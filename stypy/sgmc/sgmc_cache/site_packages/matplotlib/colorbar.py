
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: Colorbar toolkit with two classes and a function:
3: 
4:     :class:`ColorbarBase`
5:         the base class with full colorbar drawing functionality.
6:         It can be used as-is to make a colorbar for a given colormap;
7:         a mappable object (e.g., image) is not needed.
8: 
9:     :class:`Colorbar`
10:         the derived class for use with images or contour plots.
11: 
12:     :func:`make_axes`
13:         a function for resizing an axes and adding a second axes
14:         suitable for a colorbar
15: 
16: The :meth:`~matplotlib.figure.Figure.colorbar` method uses :func:`make_axes`
17: and :class:`Colorbar`; the :func:`~matplotlib.pyplot.colorbar` function
18: is a thin wrapper over :meth:`~matplotlib.figure.Figure.colorbar`.
19: 
20: '''
21: from __future__ import (absolute_import, division, print_function,
22:                         unicode_literals)
23: 
24: import six
25: from six.moves import xrange, zip
26: 
27: import warnings
28: 
29: import numpy as np
30: 
31: import matplotlib as mpl
32: import matplotlib.artist as martist
33: import matplotlib.cbook as cbook
34: import matplotlib.collections as collections
35: import matplotlib.colors as colors
36: import matplotlib.contour as contour
37: import matplotlib.cm as cm
38: import matplotlib.gridspec as gridspec
39: import matplotlib.patches as mpatches
40: import matplotlib.path as mpath
41: import matplotlib.ticker as ticker
42: import matplotlib.transforms as mtransforms
43: 
44: from matplotlib import docstring
45: 
46: make_axes_kw_doc = '''
47: 
48:     ============= ====================================================
49:     Property      Description
50:     ============= ====================================================
51:     *orientation* vertical or horizontal
52:     *fraction*    0.15; fraction of original axes to use for colorbar
53:     *pad*         0.05 if vertical, 0.15 if horizontal; fraction
54:                   of original axes between colorbar and new image axes
55:     *shrink*      1.0; fraction by which to multiply the size of the colorbar
56:     *aspect*      20; ratio of long to short dimensions
57:     *anchor*      (0.0, 0.5) if vertical; (0.5, 1.0) if horizontal;
58:                   the anchor point of the colorbar axes
59:     *panchor*     (1.0, 0.5) if vertical; (0.5, 0.0) if horizontal;
60:                   the anchor point of the colorbar parent axes. If
61:                   False, the parent axes' anchor will be unchanged
62:     ============= ====================================================
63: 
64: '''
65: 
66: colormap_kw_doc = '''
67: 
68:     ============  ====================================================
69:     Property      Description
70:     ============  ====================================================
71:     *extend*      [ 'neither' | 'both' | 'min' | 'max' ]
72:                   If not 'neither', make pointed end(s) for out-of-
73:                   range values.  These are set for a given colormap
74:                   using the colormap set_under and set_over methods.
75:     *extendfrac*  [ *None* | 'auto' | length | lengths ]
76:                   If set to *None*, both the minimum and maximum
77:                   triangular colorbar extensions with have a length of
78:                   5% of the interior colorbar length (this is the
79:                   default setting). If set to 'auto', makes the
80:                   triangular colorbar extensions the same lengths as
81:                   the interior boxes (when *spacing* is set to
82:                   'uniform') or the same lengths as the respective
83:                   adjacent interior boxes (when *spacing* is set to
84:                   'proportional'). If a scalar, indicates the length
85:                   of both the minimum and maximum triangular colorbar
86:                   extensions as a fraction of the interior colorbar
87:                   length. A two-element sequence of fractions may also
88:                   be given, indicating the lengths of the minimum and
89:                   maximum colorbar extensions respectively as a
90:                   fraction of the interior colorbar length.
91:     *extendrect*  [ *False* | *True* ]
92:                   If *False* the minimum and maximum colorbar extensions
93:                   will be triangular (the default). If *True* the
94:                   extensions will be rectangular.
95:     *spacing*     [ 'uniform' | 'proportional' ]
96:                   Uniform spacing gives each discrete color the same
97:                   space; proportional makes the space proportional to
98:                   the data interval.
99:     *ticks*       [ None | list of ticks | Locator object ]
100:                   If None, ticks are determined automatically from the
101:                   input.
102:     *format*      [ None | format string | Formatter object ]
103:                   If None, the
104:                   :class:`~matplotlib.ticker.ScalarFormatter` is used.
105:                   If a format string is given, e.g., '%.3f', that is
106:                   used. An alternative
107:                   :class:`~matplotlib.ticker.Formatter` object may be
108:                   given instead.
109:     *drawedges*   [ False | True ] If true, draw lines at color
110:                   boundaries.
111:     ============  ====================================================
112: 
113:     The following will probably be useful only in the context of
114:     indexed colors (that is, when the mappable has norm=NoNorm()),
115:     or other unusual circumstances.
116: 
117:     ============   ===================================================
118:     Property       Description
119:     ============   ===================================================
120:     *boundaries*   None or a sequence
121:     *values*       None or a sequence which must be of length 1 less
122:                    than the sequence of *boundaries*. For each region
123:                    delimited by adjacent entries in *boundaries*, the
124:                    color mapped to the corresponding value in values
125:                    will be used.
126:     ============   ===================================================
127: 
128: '''
129: 
130: colorbar_doc = '''
131: 
132: Add a colorbar to a plot.
133: 
134: Function signatures for the :mod:`~matplotlib.pyplot` interface; all
135: but the first are also method signatures for the
136: :meth:`~matplotlib.figure.Figure.colorbar` method::
137: 
138:   colorbar(**kwargs)
139:   colorbar(mappable, **kwargs)
140:   colorbar(mappable, cax=cax, **kwargs)
141:   colorbar(mappable, ax=ax, **kwargs)
142: 
143: arguments:
144: 
145:   *mappable*
146:     the :class:`~matplotlib.image.Image`,
147:     :class:`~matplotlib.contour.ContourSet`, etc. to
148:     which the colorbar applies; this argument is mandatory for the
149:     :meth:`~matplotlib.figure.Figure.colorbar` method but optional for the
150:     :func:`~matplotlib.pyplot.colorbar` function, which sets the
151:     default to the current image.
152: 
153: keyword arguments:
154: 
155:   *cax*
156:     None | axes object into which the colorbar will be drawn
157:   *ax*
158:     None | parent axes object(s) from which space for a new
159:     colorbar axes will be stolen. If a list of axes is given
160:     they will all be resized to make room for the colorbar axes.
161:   *use_gridspec*
162:     False | If *cax* is None, a new *cax* is created as an instance of
163:     Axes. If *ax* is an instance of Subplot and *use_gridspec* is True,
164:     *cax* is created as an instance of Subplot using the
165:     grid_spec module.
166: 
167: 
168: Additional keyword arguments are of two kinds:
169: 
170:   axes properties:
171: %s
172:   colorbar properties:
173: %s
174: 
175: If *mappable* is a :class:`~matplotlib.contours.ContourSet`, its *extend*
176: kwarg is included automatically.
177: 
178: Note that the *shrink* kwarg provides a simple way to keep a vertical
179: colorbar, for example, from being taller than the axes of the mappable
180: to which the colorbar is attached; but it is a manual method requiring
181: some trial and error. If the colorbar is too tall (or a horizontal
182: colorbar is too wide) use a smaller value of *shrink*.
183: 
184: For more precise control, you can manually specify the positions of
185: the axes objects in which the mappable and the colorbar are drawn.  In
186: this case, do not use any of the axes properties kwargs.
187: 
188: It is known that some vector graphics viewer (svg and pdf) renders white gaps
189: between segments of the colorbar. This is due to bugs in the viewers not
190: matplotlib. As a workaround the colorbar can be rendered with overlapping
191: segments::
192: 
193:     cbar = colorbar()
194:     cbar.solids.set_edgecolor("face")
195:     draw()
196: 
197: However this has negative consequences in other circumstances. Particularly
198: with semi transparent images (alpha < 1) and colorbar extensions and is not
199: enabled by default see (issue #1188).
200: 
201: returns:
202:     :class:`~matplotlib.colorbar.Colorbar` instance; see also its base class,
203:     :class:`~matplotlib.colorbar.ColorbarBase`.  Call the
204:     :meth:`~matplotlib.colorbar.ColorbarBase.set_label` method
205:     to label the colorbar.
206: 
207: ''' % (make_axes_kw_doc, colormap_kw_doc)
208: 
209: docstring.interpd.update(colorbar_doc=colorbar_doc)
210: 
211: 
212: def _set_ticks_on_axis_warn(*args, **kw):
213:     # a top level function which gets put in at the axes'
214:     # set_xticks set_yticks by _patch_ax
215:     warnings.warn("Use the colorbar set_ticks() method instead.")
216: 
217: 
218: class ColorbarBase(cm.ScalarMappable):
219:     '''
220:     Draw a colorbar in an existing axes.
221: 
222:     This is a base class for the :class:`Colorbar` class, which is the
223:     basis for the :func:`~matplotlib.pyplot.colorbar` function and the
224:     :meth:`~matplotlib.figure.Figure.colorbar` method, which are the
225:     usual ways of creating a colorbar.
226: 
227:     It is also useful by itself for showing a colormap.  If the *cmap*
228:     kwarg is given but *boundaries* and *values* are left as None,
229:     then the colormap will be displayed on a 0-1 scale. To show the
230:     under- and over-value colors, specify the *norm* as::
231: 
232:         colors.Normalize(clip=False)
233: 
234:     To show the colors versus index instead of on the 0-1 scale,
235:     use::
236: 
237:         norm=colors.NoNorm.
238: 
239:     Useful attributes:
240: 
241:         :attr:`ax`
242:             the Axes instance in which the colorbar is drawn
243: 
244:         :attr:`lines`
245:             a list of LineCollection if lines were drawn, otherwise
246:             an empty list
247: 
248:         :attr:`dividers`
249:             a LineCollection if *drawedges* is True, otherwise None
250: 
251:     Useful public methods are :meth:`set_label` and :meth:`add_lines`.
252: 
253:     '''
254:     _slice_dict = {'neither': slice(0, None),
255:                    'both': slice(1, -1),
256:                    'min': slice(1, None),
257:                    'max': slice(0, -1)}
258: 
259:     n_rasterize = 50  # rasterize solids if number of colors >= n_rasterize
260: 
261:     def __init__(self, ax, cmap=None,
262:                  norm=None,
263:                  alpha=None,
264:                  values=None,
265:                  boundaries=None,
266:                  orientation='vertical',
267:                  ticklocation='auto',
268:                  extend='neither',
269:                  spacing='uniform',  # uniform or proportional
270:                  ticks=None,
271:                  format=None,
272:                  drawedges=False,
273:                  filled=True,
274:                  extendfrac=None,
275:                  extendrect=False,
276:                  label='',
277:                  ):
278:         #: The axes that this colorbar lives in.
279:         self.ax = ax
280:         self._patch_ax()
281:         if cmap is None:
282:             cmap = cm.get_cmap()
283:         if norm is None:
284:             norm = colors.Normalize()
285:         self.alpha = alpha
286:         cm.ScalarMappable.__init__(self, cmap=cmap, norm=norm)
287:         self.values = values
288:         self.boundaries = boundaries
289:         self.extend = extend
290:         self._inside = self._slice_dict[extend]
291:         self.spacing = spacing
292:         self.orientation = orientation
293:         self.drawedges = drawedges
294:         self.filled = filled
295:         self.extendfrac = extendfrac
296:         self.extendrect = extendrect
297:         self.solids = None
298:         self.lines = list()
299:         self.outline = None
300:         self.patch = None
301:         self.dividers = None
302: 
303:         if ticklocation == 'auto':
304:             ticklocation = 'bottom' if orientation == 'horizontal' else 'right'
305:         self.ticklocation = ticklocation
306: 
307:         self.set_label(label)
308:         if cbook.iterable(ticks):
309:             self.locator = ticker.FixedLocator(ticks, nbins=len(ticks))
310:         else:
311:             self.locator = ticks    # Handle default in _ticker()
312:         if format is None:
313:             if isinstance(self.norm, colors.LogNorm):
314:                 self.formatter = ticker.LogFormatterSciNotation()
315:             elif isinstance(self.norm, colors.SymLogNorm):
316:                 self.formatter = ticker.LogFormatterSciNotation(
317:                                         linthresh=self.norm.linthresh)
318:             else:
319:                 self.formatter = ticker.ScalarFormatter()
320:         elif isinstance(format, six.string_types):
321:             self.formatter = ticker.FormatStrFormatter(format)
322:         else:
323:             self.formatter = format  # Assume it is a Formatter
324:         # The rest is in a method so we can recalculate when clim changes.
325:         self.config_axis()
326:         self.draw_all()
327: 
328:     def _extend_lower(self):
329:         '''Returns whether the lower limit is open ended.'''
330:         return self.extend in ('both', 'min')
331: 
332:     def _extend_upper(self):
333:         '''Returns whether the uper limit is open ended.'''
334:         return self.extend in ('both', 'max')
335: 
336:     def _patch_ax(self):
337:         # bind some methods to the axes to warn users
338:         # against using those methods.
339:         self.ax.set_xticks = _set_ticks_on_axis_warn
340:         self.ax.set_yticks = _set_ticks_on_axis_warn
341: 
342:     def draw_all(self):
343:         '''
344:         Calculate any free parameters based on the current cmap and norm,
345:         and do all the drawing.
346:         '''
347: 
348:         self._process_values()
349:         self._find_range()
350:         X, Y = self._mesh()
351:         C = self._values[:, np.newaxis]
352:         self._config_axes(X, Y)
353:         if self.filled:
354:             self._add_solids(X, Y, C)
355: 
356:     def config_axis(self):
357:         ax = self.ax
358:         if self.orientation == 'vertical':
359:             ax.xaxis.set_ticks([])
360:             # location is either one of 'bottom' or 'top'
361:             ax.yaxis.set_label_position(self.ticklocation)
362:             ax.yaxis.set_ticks_position(self.ticklocation)
363:         else:
364:             ax.yaxis.set_ticks([])
365:             # location is either one of 'left' or 'right'
366:             ax.xaxis.set_label_position(self.ticklocation)
367:             ax.xaxis.set_ticks_position(self.ticklocation)
368: 
369:         self._set_label()
370: 
371:     def update_ticks(self):
372:         '''
373:         Force the update of the ticks and ticklabels. This must be
374:         called whenever the tick locator and/or tick formatter changes.
375:         '''
376:         ax = self.ax
377:         ticks, ticklabels, offset_string = self._ticker()
378:         if self.orientation == 'vertical':
379:             ax.yaxis.set_ticks(ticks)
380:             ax.set_yticklabels(ticklabels)
381:             ax.yaxis.get_major_formatter().set_offset_string(offset_string)
382: 
383:         else:
384:             ax.xaxis.set_ticks(ticks)
385:             ax.set_xticklabels(ticklabels)
386:             ax.xaxis.get_major_formatter().set_offset_string(offset_string)
387: 
388:     def set_ticks(self, ticks, update_ticks=True):
389:         '''
390:         Set tick locations.
391: 
392:         Parameters
393:         ----------
394:         ticks : {None, sequence, :class:`~matplotlib.ticker.Locator` instance}
395:             If None, a default Locator will be used.
396: 
397:         update_ticks : {True, False}, optional
398:             If True, tick locations are updated immediately.  If False,
399:             use :meth:`update_ticks` to manually update the ticks.
400: 
401:         '''
402:         if cbook.iterable(ticks):
403:             self.locator = ticker.FixedLocator(ticks, nbins=len(ticks))
404:         else:
405:             self.locator = ticks
406: 
407:         if update_ticks:
408:             self.update_ticks()
409:         self.stale = True
410: 
411:     def get_ticks(self, minor=False):
412:         '''Return the x ticks as a list of locations'''
413:         return self._tick_data_values
414: 
415:     def set_ticklabels(self, ticklabels, update_ticks=True):
416:         '''
417:         set tick labels. Tick labels are updated immediately unless
418:         update_ticks is *False*. To manually update the ticks, call
419:         *update_ticks* method explicitly.
420:         '''
421:         if isinstance(self.locator, ticker.FixedLocator):
422:             self.formatter = ticker.FixedFormatter(ticklabels)
423:             if update_ticks:
424:                 self.update_ticks()
425:         else:
426:             warnings.warn("set_ticks() must have been called.")
427:         self.stale = True
428: 
429:     def _config_axes(self, X, Y):
430:         '''
431:         Make an axes patch and outline.
432:         '''
433:         ax = self.ax
434:         ax.set_frame_on(False)
435:         ax.set_navigate(False)
436:         xy = self._outline(X, Y)
437:         ax.update_datalim(xy)
438:         ax.set_xlim(*ax.dataLim.intervalx)
439:         ax.set_ylim(*ax.dataLim.intervaly)
440:         if self.outline is not None:
441:             self.outline.remove()
442:         self.outline = mpatches.Polygon(
443:             xy, edgecolor=mpl.rcParams['axes.edgecolor'],
444:             facecolor='none',
445:             linewidth=mpl.rcParams['axes.linewidth'],
446:             closed=True,
447:             zorder=2)
448:         ax.add_artist(self.outline)
449:         self.outline.set_clip_box(None)
450:         self.outline.set_clip_path(None)
451:         c = mpl.rcParams['axes.facecolor']
452:         if self.patch is not None:
453:             self.patch.remove()
454:         self.patch = mpatches.Polygon(xy, edgecolor=c,
455:                                       facecolor=c,
456:                                       linewidth=0.01,
457:                                       zorder=-1)
458:         ax.add_artist(self.patch)
459: 
460:         self.update_ticks()
461: 
462:     def _set_label(self):
463:         if self.orientation == 'vertical':
464:             self.ax.set_ylabel(self._label, **self._labelkw)
465:         else:
466:             self.ax.set_xlabel(self._label, **self._labelkw)
467:         self.stale = True
468: 
469:     def set_label(self, label, **kw):
470:         '''
471:         Label the long axis of the colorbar
472:         '''
473:         self._label = '%s' % (label, )
474:         self._labelkw = kw
475:         self._set_label()
476: 
477:     def _outline(self, X, Y):
478:         '''
479:         Return *x*, *y* arrays of colorbar bounding polygon,
480:         taking orientation into account.
481:         '''
482:         N = X.shape[0]
483:         ii = [0, 1, N - 2, N - 1, 2 * N - 1, 2 * N - 2, N + 1, N, 0]
484:         x = np.take(np.ravel(np.transpose(X)), ii)
485:         y = np.take(np.ravel(np.transpose(Y)), ii)
486:         x = x.reshape((len(x), 1))
487:         y = y.reshape((len(y), 1))
488:         if self.orientation == 'horizontal':
489:             return np.hstack((y, x))
490:         return np.hstack((x, y))
491: 
492:     def _edges(self, X, Y):
493:         '''
494:         Return the separator line segments; helper for _add_solids.
495:         '''
496:         N = X.shape[0]
497:         # Using the non-array form of these line segments is much
498:         # simpler than making them into arrays.
499:         if self.orientation == 'vertical':
500:             return [list(zip(X[i], Y[i])) for i in xrange(1, N - 1)]
501:         else:
502:             return [list(zip(Y[i], X[i])) for i in xrange(1, N - 1)]
503: 
504:     def _add_solids(self, X, Y, C):
505:         '''
506:         Draw the colors using :meth:`~matplotlib.axes.Axes.pcolormesh`;
507:         optionally add separators.
508:         '''
509:         if self.orientation == 'vertical':
510:             args = (X, Y, C)
511:         else:
512:             args = (np.transpose(Y), np.transpose(X), np.transpose(C))
513:         kw = dict(cmap=self.cmap,
514:                   norm=self.norm,
515:                   alpha=self.alpha,
516:                   edgecolors='None')
517:         # Save, set, and restore hold state to keep pcolor from
518:         # clearing the axes. Ordinarily this will not be needed,
519:         # since the axes object should already have hold set.
520:         _hold = self.ax._hold
521:         self.ax._hold = True
522:         col = self.ax.pcolormesh(*args, **kw)
523:         self.ax._hold = _hold
524:         #self.add_observer(col) # We should observe, not be observed...
525: 
526:         if self.solids is not None:
527:             self.solids.remove()
528:         self.solids = col
529:         if self.dividers is not None:
530:             self.dividers.remove()
531:             self.dividers = None
532:         if self.drawedges:
533:             linewidths = (0.5 * mpl.rcParams['axes.linewidth'],)
534:             self.dividers = collections.LineCollection(self._edges(X, Y),
535:                                     colors=(mpl.rcParams['axes.edgecolor'],),
536:                                     linewidths=linewidths)
537:             self.ax.add_collection(self.dividers)
538:         elif len(self._y) >= self.n_rasterize:
539:             self.solids.set_rasterized(True)
540: 
541:     def add_lines(self, levels, colors, linewidths, erase=True):
542:         '''
543:         Draw lines on the colorbar.
544: 
545:         *colors* and *linewidths* must be scalars or
546:         sequences the same length as *levels*.
547: 
548:         Set *erase* to False to add lines without first
549:         removing any previously added lines.
550:         '''
551:         y = self._locate(levels)
552:         igood = (y < 1.001) & (y > -0.001)
553:         y = y[igood]
554:         if cbook.iterable(colors):
555:             colors = np.asarray(colors)[igood]
556:         if cbook.iterable(linewidths):
557:             linewidths = np.asarray(linewidths)[igood]
558:         N = len(y)
559:         x = np.array([0.0, 1.0])
560:         X, Y = np.meshgrid(x, y)
561:         if self.orientation == 'vertical':
562:             xy = [list(zip(X[i], Y[i])) for i in xrange(N)]
563:         else:
564:             xy = [list(zip(Y[i], X[i])) for i in xrange(N)]
565:         col = collections.LineCollection(xy, linewidths=linewidths)
566: 
567:         if erase and self.lines:
568:             for lc in self.lines:
569:                 lc.remove()
570:             self.lines = []
571:         self.lines.append(col)
572:         col.set_color(colors)
573:         self.ax.add_collection(col)
574:         self.stale = True
575: 
576:     def _ticker(self):
577:         '''
578:         Return the sequence of ticks (colorbar data locations),
579:         ticklabels (strings), and the corresponding offset string.
580:         '''
581:         locator = self.locator
582:         formatter = self.formatter
583:         if locator is None:
584:             if self.boundaries is None:
585:                 if isinstance(self.norm, colors.NoNorm):
586:                     nv = len(self._values)
587:                     base = 1 + int(nv / 10)
588:                     locator = ticker.IndexLocator(base=base, offset=0)
589:                 elif isinstance(self.norm, colors.BoundaryNorm):
590:                     b = self.norm.boundaries
591:                     locator = ticker.FixedLocator(b, nbins=10)
592:                 elif isinstance(self.norm, colors.LogNorm):
593:                     locator = ticker.LogLocator(subs='all')
594:                 elif isinstance(self.norm, colors.SymLogNorm):
595:                     # The subs setting here should be replaced
596:                     # by logic in the locator.
597:                     locator = ticker.SymmetricalLogLocator(
598:                                       subs=np.arange(1, 10),
599:                                       linthresh=self.norm.linthresh,
600:                                       base=10)
601:                 else:
602:                     if mpl.rcParams['_internal.classic_mode']:
603:                         locator = ticker.MaxNLocator()
604:                     else:
605:                         locator = ticker.AutoLocator()
606:             else:
607:                 b = self._boundaries[self._inside]
608:                 locator = ticker.FixedLocator(b, nbins=10)
609:         if isinstance(self.norm, colors.NoNorm) and self.boundaries is None:
610:             intv = self._values[0], self._values[-1]
611:         else:
612:             intv = self.vmin, self.vmax
613:         locator.create_dummy_axis(minpos=intv[0])
614:         formatter.create_dummy_axis(minpos=intv[0])
615:         locator.set_view_interval(*intv)
616:         locator.set_data_interval(*intv)
617:         formatter.set_view_interval(*intv)
618:         formatter.set_data_interval(*intv)
619: 
620:         b = np.array(locator())
621:         if isinstance(locator, ticker.LogLocator):
622:             eps = 1e-10
623:             b = b[(b <= intv[1] * (1 + eps)) & (b >= intv[0] * (1 - eps))]
624:         else:
625:             eps = (intv[1] - intv[0]) * 1e-10
626:             b = b[(b <= intv[1] + eps) & (b >= intv[0] - eps)]
627:         self._tick_data_values = b
628:         ticks = self._locate(b)
629:         formatter.set_locs(b)
630:         ticklabels = [formatter(t, i) for i, t in enumerate(b)]
631:         offset_string = formatter.get_offset()
632:         return ticks, ticklabels, offset_string
633: 
634:     def _process_values(self, b=None):
635:         '''
636:         Set the :attr:`_boundaries` and :attr:`_values` attributes
637:         based on the input boundaries and values.  Input boundaries
638:         can be *self.boundaries* or the argument *b*.
639:         '''
640:         if b is None:
641:             b = self.boundaries
642:         if b is not None:
643:             self._boundaries = np.asarray(b, dtype=float)
644:             if self.values is None:
645:                 self._values = 0.5 * (self._boundaries[:-1]
646:                                       + self._boundaries[1:])
647:                 if isinstance(self.norm, colors.NoNorm):
648:                     self._values = (self._values + 0.00001).astype(np.int16)
649:                 return
650:             self._values = np.array(self.values)
651:             return
652:         if self.values is not None:
653:             self._values = np.array(self.values)
654:             if self.boundaries is None:
655:                 b = np.zeros(len(self.values) + 1, 'd')
656:                 b[1:-1] = 0.5 * (self._values[:-1] - self._values[1:])
657:                 b[0] = 2.0 * b[1] - b[2]
658:                 b[-1] = 2.0 * b[-2] - b[-3]
659:                 self._boundaries = b
660:                 return
661:             self._boundaries = np.array(self.boundaries)
662:             return
663:         # Neither boundaries nor values are specified;
664:         # make reasonable ones based on cmap and norm.
665:         if isinstance(self.norm, colors.NoNorm):
666:             b = self._uniform_y(self.cmap.N + 1) * self.cmap.N - 0.5
667:             v = np.zeros((len(b) - 1,), dtype=np.int16)
668:             v[self._inside] = np.arange(self.cmap.N, dtype=np.int16)
669:             if self._extend_lower():
670:                 v[0] = -1
671:             if self._extend_upper():
672:                 v[-1] = self.cmap.N
673:             self._boundaries = b
674:             self._values = v
675:             return
676:         elif isinstance(self.norm, colors.BoundaryNorm):
677:             b = list(self.norm.boundaries)
678:             if self._extend_lower():
679:                 b = [b[0] - 1] + b
680:             if self._extend_upper():
681:                 b = b + [b[-1] + 1]
682:             b = np.array(b)
683:             v = np.zeros((len(b) - 1,), dtype=float)
684:             bi = self.norm.boundaries
685:             v[self._inside] = 0.5 * (bi[:-1] + bi[1:])
686:             if self._extend_lower():
687:                 v[0] = b[0] - 1
688:             if self._extend_upper():
689:                 v[-1] = b[-1] + 1
690:             self._boundaries = b
691:             self._values = v
692:             return
693:         else:
694:             if not self.norm.scaled():
695:                 self.norm.vmin = 0
696:                 self.norm.vmax = 1
697: 
698:             self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(
699:                 self.norm.vmin,
700:                 self.norm.vmax,
701:                 expander=0.1)
702: 
703:             b = self.norm.inverse(self._uniform_y(self.cmap.N + 1))
704: 
705:             if isinstance(self.norm, colors.LogNorm):
706:                 # If using a lognorm, ensure extensions don't go negative
707:                 if self._extend_lower():
708:                     b[0] = 0.9 * b[0]
709:                 if self._extend_upper():
710:                     b[-1] = 1.1 * b[-1]
711:             else:
712:                 if self._extend_lower():
713:                     b[0] = b[0] - 1
714:                 if self._extend_upper():
715:                     b[-1] = b[-1] + 1
716:         self._process_values(b)
717: 
718:     def _find_range(self):
719:         '''
720:         Set :attr:`vmin` and :attr:`vmax` attributes to the first and
721:         last boundary excluding extended end boundaries.
722:         '''
723:         b = self._boundaries[self._inside]
724:         self.vmin = b[0]
725:         self.vmax = b[-1]
726: 
727:     def _central_N(self):
728:         '''number of boundaries **before** extension of ends'''
729:         nb = len(self._boundaries)
730:         if self.extend == 'both':
731:             nb -= 2
732:         elif self.extend in ('min', 'max'):
733:             nb -= 1
734:         return nb
735: 
736:     def _extended_N(self):
737:         '''
738:         Based on the colormap and extend variable, return the
739:         number of boundaries.
740:         '''
741:         N = self.cmap.N + 1
742:         if self.extend == 'both':
743:             N += 2
744:         elif self.extend in ('min', 'max'):
745:             N += 1
746:         return N
747: 
748:     def _get_extension_lengths(self, frac, automin, automax, default=0.05):
749:         '''
750:         Get the lengths of colorbar extensions.
751: 
752:         A helper method for _uniform_y and _proportional_y.
753:         '''
754:         # Set the default value.
755:         extendlength = np.array([default, default])
756:         if isinstance(frac, six.string_types):
757:             if frac.lower() == 'auto':
758:                 # Use the provided values when 'auto' is required.
759:                 extendlength[0] = automin
760:                 extendlength[1] = automax
761:             else:
762:                 # Any other string is invalid.
763:                 raise ValueError('invalid value for extendfrac')
764:         elif frac is not None:
765:             try:
766:                 # Try to set min and max extension fractions directly.
767:                 extendlength[:] = frac
768:                 # If frac is a sequence contaning None then NaN may
769:                 # be encountered. This is an error.
770:                 if np.isnan(extendlength).any():
771:                     raise ValueError()
772:             except (TypeError, ValueError):
773:                 # Raise an error on encountering an invalid value for frac.
774:                 raise ValueError('invalid value for extendfrac')
775:         return extendlength
776: 
777:     def _uniform_y(self, N):
778:         '''
779:         Return colorbar data coordinates for *N* uniformly
780:         spaced boundaries, plus ends if required.
781:         '''
782:         if self.extend == 'neither':
783:             y = np.linspace(0, 1, N)
784:         else:
785:             automin = automax = 1. / (N - 1.)
786:             extendlength = self._get_extension_lengths(self.extendfrac,
787:                                                        automin, automax,
788:                                                        default=0.05)
789:             if self.extend == 'both':
790:                 y = np.zeros(N + 2, 'd')
791:                 y[0] = 0. - extendlength[0]
792:                 y[-1] = 1. + extendlength[1]
793:             elif self.extend == 'min':
794:                 y = np.zeros(N + 1, 'd')
795:                 y[0] = 0. - extendlength[0]
796:             else:
797:                 y = np.zeros(N + 1, 'd')
798:                 y[-1] = 1. + extendlength[1]
799:             y[self._inside] = np.linspace(0, 1, N)
800:         return y
801: 
802:     def _proportional_y(self):
803:         '''
804:         Return colorbar data coordinates for the boundaries of
805:         a proportional colorbar.
806:         '''
807:         if isinstance(self.norm, colors.BoundaryNorm):
808:             y = (self._boundaries - self._boundaries[0])
809:             y = y / (self._boundaries[-1] - self._boundaries[0])
810:         else:
811:             y = self.norm(self._boundaries.copy())
812:             y = np.ma.filled(y, np.nan)
813:         if self.extend == 'min':
814:             # Exclude leftmost interval of y.
815:             clen = y[-1] - y[1]
816:             automin = (y[2] - y[1]) / clen
817:             automax = (y[-1] - y[-2]) / clen
818:         elif self.extend == 'max':
819:             # Exclude rightmost interval in y.
820:             clen = y[-2] - y[0]
821:             automin = (y[1] - y[0]) / clen
822:             automax = (y[-2] - y[-3]) / clen
823:         elif self.extend == 'both':
824:             # Exclude leftmost and rightmost intervals in y.
825:             clen = y[-2] - y[1]
826:             automin = (y[2] - y[1]) / clen
827:             automax = (y[-2] - y[-3]) / clen
828:         if self.extend in ('both', 'min', 'max'):
829:             extendlength = self._get_extension_lengths(self.extendfrac,
830:                                                        automin, automax,
831:                                                        default=0.05)
832:         if self.extend in ('both', 'min'):
833:             y[0] = 0. - extendlength[0]
834:         if self.extend in ('both', 'max'):
835:             y[-1] = 1. + extendlength[1]
836:         yi = y[self._inside]
837:         norm = colors.Normalize(yi[0], yi[-1])
838:         y[self._inside] = np.ma.filled(norm(yi), np.nan)
839:         return y
840: 
841:     def _mesh(self):
842:         '''
843:         Return X,Y, the coordinate arrays for the colorbar pcolormesh.
844:         These are suitable for a vertical colorbar; swapping and
845:         transposition for a horizontal colorbar are done outside
846:         this function.
847:         '''
848:         x = np.array([0.0, 1.0])
849:         if self.spacing == 'uniform':
850:             y = self._uniform_y(self._central_N())
851:         else:
852:             y = self._proportional_y()
853:         self._y = y
854:         X, Y = np.meshgrid(x, y)
855:         if self._extend_lower() and not self.extendrect:
856:             X[0, :] = 0.5
857:         if self._extend_upper() and not self.extendrect:
858:             X[-1, :] = 0.5
859:         return X, Y
860: 
861:     def _locate(self, x):
862:         '''
863:         Given a set of color data values, return their
864:         corresponding colorbar data coordinates.
865:         '''
866:         if isinstance(self.norm, (colors.NoNorm, colors.BoundaryNorm)):
867:             b = self._boundaries
868:             xn = x
869:         else:
870:             # Do calculations using normalized coordinates so
871:             # as to make the interpolation more accurate.
872:             b = self.norm(self._boundaries, clip=False).filled()
873:             xn = self.norm(x, clip=False).filled()
874: 
875:         # The rest is linear interpolation with extrapolation at ends.
876:         ii = np.searchsorted(b, xn)
877:         i0 = ii - 1
878:         itop = (ii == len(b))
879:         ibot = (ii == 0)
880:         i0[itop] -= 1
881:         ii[itop] -= 1
882:         i0[ibot] += 1
883:         ii[ibot] += 1
884: 
885:         db = np.take(b, ii) - np.take(b, i0)
886:         y = self._y
887:         dy = np.take(y, ii) - np.take(y, i0)
888:         z = np.take(y, i0) + (xn - np.take(b, i0)) * dy / db
889:         return z
890: 
891:     def set_alpha(self, alpha):
892:         self.alpha = alpha
893: 
894:     def remove(self):
895:         '''
896:         Remove this colorbar from the figure
897:         '''
898: 
899:         fig = self.ax.figure
900:         fig.delaxes(self.ax)
901: 
902: 
903: class Colorbar(ColorbarBase):
904:     '''
905:     This class connects a :class:`ColorbarBase` to a
906:     :class:`~matplotlib.cm.ScalarMappable` such as a
907:     :class:`~matplotlib.image.AxesImage` generated via
908:     :meth:`~matplotlib.axes.Axes.imshow`.
909: 
910:     It is not intended to be instantiated directly; instead,
911:     use :meth:`~matplotlib.figure.Figure.colorbar` or
912:     :func:`~matplotlib.pyplot.colorbar` to make your colorbar.
913: 
914:     '''
915:     def __init__(self, ax, mappable, **kw):
916:         # Ensure the given mappable's norm has appropriate vmin and vmax set
917:         # even if mappable.draw has not yet been called.
918:         mappable.autoscale_None()
919: 
920:         self.mappable = mappable
921:         kw['cmap'] = cmap = mappable.cmap
922:         kw['norm'] = norm = mappable.norm
923: 
924:         if isinstance(mappable, contour.ContourSet):
925:             CS = mappable
926:             kw['alpha'] = mappable.get_alpha()
927:             kw['boundaries'] = CS._levels
928:             kw['values'] = CS.cvalues
929:             kw['extend'] = CS.extend
930:             #kw['ticks'] = CS._levels
931:             kw.setdefault('ticks', ticker.FixedLocator(CS.levels, nbins=10))
932:             kw['filled'] = CS.filled
933:             ColorbarBase.__init__(self, ax, **kw)
934:             if not CS.filled:
935:                 self.add_lines(CS)
936:         else:
937:             if getattr(cmap, 'colorbar_extend', False) is not False:
938:                 kw.setdefault('extend', cmap.colorbar_extend)
939: 
940:             if isinstance(mappable, martist.Artist):
941:                 kw['alpha'] = mappable.get_alpha()
942: 
943:             ColorbarBase.__init__(self, ax, **kw)
944: 
945:     def on_mappable_changed(self, mappable):
946:         '''
947:         Updates this colorbar to match the mappable's properties.
948: 
949:         Typically this is automatically registered as an event handler
950:         by :func:`colorbar_factory` and should not be called manually.
951: 
952:         '''
953:         self.set_cmap(mappable.get_cmap())
954:         self.set_clim(mappable.get_clim())
955:         self.update_normal(mappable)
956: 
957:     def add_lines(self, CS, erase=True):
958:         '''
959:         Add the lines from a non-filled
960:         :class:`~matplotlib.contour.ContourSet` to the colorbar.
961: 
962:         Set *erase* to False if these lines should be added to
963:         any pre-existing lines.
964:         '''
965:         if not isinstance(CS, contour.ContourSet) or CS.filled:
966:             raise ValueError('add_lines is only for a ContourSet of lines')
967:         tcolors = [c[0] for c in CS.tcolors]
968:         tlinewidths = [t[0] for t in CS.tlinewidths]
969:         # The following was an attempt to get the colorbar lines
970:         # to follow subsequent changes in the contour lines,
971:         # but more work is needed: specifically, a careful
972:         # look at event sequences, and at how
973:         # to make one object track another automatically.
974:         #tcolors = [col.get_colors()[0] for col in CS.collections]
975:         #tlinewidths = [col.get_linewidth()[0] for lw in CS.collections]
976:         #print 'tlinewidths:', tlinewidths
977:         ColorbarBase.add_lines(self, CS.levels, tcolors, tlinewidths,
978:                                erase=erase)
979: 
980:     def update_normal(self, mappable):
981:         '''
982:         update solid, lines, etc. Unlike update_bruteforce, it does
983:         not clear the axes.  This is meant to be called when the image
984:         or contour plot to which this colorbar belongs is changed.
985:         '''
986:         self.draw_all()
987:         if isinstance(self.mappable, contour.ContourSet):
988:             CS = self.mappable
989:             if not CS.filled:
990:                 self.add_lines(CS)
991:         self.stale = True
992: 
993:     def update_bruteforce(self, mappable):
994:         '''
995:         Destroy and rebuild the colorbar.  This is
996:         intended to become obsolete, and will probably be
997:         deprecated and then removed.  It is not called when
998:         the pyplot.colorbar function or the Figure.colorbar
999:         method are used to create the colorbar.
1000: 
1001:         '''
1002:         # We are using an ugly brute-force method: clearing and
1003:         # redrawing the whole thing.  The problem is that if any
1004:         # properties have been changed by methods other than the
1005:         # colorbar methods, those changes will be lost.
1006:         self.ax.cla()
1007:         # clearing the axes will delete outline, patch, solids, and lines:
1008:         self.outline = None
1009:         self.patch = None
1010:         self.solids = None
1011:         self.lines = list()
1012:         self.dividers = None
1013:         self.set_alpha(mappable.get_alpha())
1014:         self.cmap = mappable.cmap
1015:         self.norm = mappable.norm
1016:         self.config_axis()
1017:         self.draw_all()
1018:         if isinstance(self.mappable, contour.ContourSet):
1019:             CS = self.mappable
1020:             if not CS.filled:
1021:                 self.add_lines(CS)
1022:             #if self.lines is not None:
1023:             #    tcolors = [c[0] for c in CS.tcolors]
1024:             #    self.lines.set_color(tcolors)
1025:         #Fixme? Recalculate boundaries, ticks if vmin, vmax have changed.
1026:         #Fixme: Some refactoring may be needed; we should not
1027:         # be recalculating everything if there was a simple alpha
1028:         # change.
1029: 
1030:     def remove(self):
1031:         '''
1032:         Remove this colorbar from the figure.  If the colorbar was created with
1033:         ``use_gridspec=True`` then restore the gridspec to its previous value.
1034:         '''
1035: 
1036:         ColorbarBase.remove(self)
1037:         self.mappable.callbacksSM.disconnect(self.mappable.colorbar_cid)
1038:         self.mappable.colorbar = None
1039:         self.mappable.colorbar_cid = None
1040: 
1041:         try:
1042:             ax = self.mappable.axes
1043:         except AttributeError:
1044:             return
1045: 
1046:         try:
1047:             gs = ax.get_subplotspec().get_gridspec()
1048:             subplotspec = gs.get_topmost_subplotspec()
1049:         except AttributeError:
1050:             # use_gridspec was False
1051:             pos = ax.get_position(original=True)
1052:             ax.set_position(pos)
1053:         else:
1054:             # use_gridspec was True
1055:             ax.set_subplotspec(subplotspec)
1056: 
1057: 
1058: @docstring.Substitution(make_axes_kw_doc)
1059: def make_axes(parents, location=None, orientation=None, fraction=0.15,
1060:               shrink=1.0, aspect=20, **kw):
1061:     '''
1062:     Resize and reposition parent axes, and return a child
1063:     axes suitable for a colorbar.
1064: 
1065:     Keyword arguments may include the following (with defaults):
1066: 
1067:         location : [None|'left'|'right'|'top'|'bottom']
1068:             The position, relative to **parents**, where the colorbar axes
1069:             should be created. If None, the value will either come from the
1070:             given ``orientation``, else it will default to 'right'.
1071: 
1072:         orientation :  [None|'vertical'|'horizontal']
1073:             The orientation of the colorbar. Typically, this keyword shouldn't
1074:             be used, as it can be derived from the ``location`` keyword.
1075: 
1076:     %s
1077: 
1078:     Returns (cax, kw), the child axes and the reduced kw dictionary to be
1079:     passed when creating the colorbar instance.
1080:     '''
1081:     locations = ["left", "right", "top", "bottom"]
1082:     if orientation is not None and location is not None:
1083:         msg = ('position and orientation are mutually exclusive. '
1084:                'Consider setting the position to any of '
1085:                '{0}'.format(', '.join(locations)))
1086:         raise TypeError(msg)
1087: 
1088:     # provide a default location
1089:     if location is None and orientation is None:
1090:         location = 'right'
1091: 
1092:     # allow the user to not specify the location by specifying the
1093:     # orientation instead
1094:     if location is None:
1095:         location = 'right' if orientation == 'vertical' else 'bottom'
1096: 
1097:     if location not in locations:
1098:         raise ValueError('Invalid colorbar location. Must be one '
1099:                          'of %s' % ', '.join(locations))
1100: 
1101:     default_location_settings = {'left':   {'anchor': (1.0, 0.5),
1102:                                             'panchor': (0.0, 0.5),
1103:                                             'pad': 0.10,
1104:                                             'orientation': 'vertical'},
1105:                                  'right':  {'anchor': (0.0, 0.5),
1106:                                             'panchor': (1.0, 0.5),
1107:                                             'pad': 0.05,
1108:                                             'orientation': 'vertical'},
1109:                                  'top':    {'anchor': (0.5, 0.0),
1110:                                             'panchor': (0.5, 1.0),
1111:                                             'pad': 0.05,
1112:                                             'orientation': 'horizontal'},
1113:                                  'bottom': {'anchor': (0.5, 1.0),
1114:                                             'panchor': (0.5, 0.0),
1115:                                             'pad': 0.15,  # backwards compat
1116:                                             'orientation': 'horizontal'},
1117:                                  }
1118: 
1119:     loc_settings = default_location_settings[location]
1120: 
1121:     # put appropriate values into the kw dict for passing back to
1122:     # the Colorbar class
1123:     kw['orientation'] = loc_settings['orientation']
1124:     kw['ticklocation'] = location
1125: 
1126:     anchor = kw.pop('anchor', loc_settings['anchor'])
1127:     parent_anchor = kw.pop('panchor', loc_settings['panchor'])
1128:     pad = kw.pop('pad', loc_settings['pad'])
1129: 
1130:     # turn parents into a list if it is not already. We do this w/ np
1131:     # because `plt.subplots` can return an ndarray and is natural to
1132:     # pass to `colorbar`.
1133:     parents = np.atleast_1d(parents).ravel()
1134: 
1135:     fig = parents[0].get_figure()
1136:     if not all(fig is ax.get_figure() for ax in parents):
1137:         raise ValueError('Unable to create a colorbar axes as not all '
1138:                          'parents share the same figure.')
1139: 
1140:     # take a bounding box around all of the given axes
1141:     parents_bbox = mtransforms.Bbox.union(
1142:         [ax.get_position(original=True).frozen() for ax in parents])
1143: 
1144:     pb = parents_bbox
1145:     if location in ('left', 'right'):
1146:         if location == 'left':
1147:             pbcb, _, pb1 = pb.splitx(fraction, fraction + pad)
1148:         else:
1149:             pb1, _, pbcb = pb.splitx(1 - fraction - pad, 1 - fraction)
1150:         pbcb = pbcb.shrunk(1.0, shrink).anchored(anchor, pbcb)
1151:     else:
1152:         if location == 'bottom':
1153:             pbcb, _, pb1 = pb.splity(fraction, fraction + pad)
1154:         else:
1155:             pb1, _, pbcb = pb.splity(1 - fraction - pad, 1 - fraction)
1156:         pbcb = pbcb.shrunk(shrink, 1.0).anchored(anchor, pbcb)
1157: 
1158:         # define the aspect ratio in terms of y's per x rather than x's per y
1159:         aspect = 1.0 / aspect
1160: 
1161:     # define a transform which takes us from old axes coordinates to
1162:     # new axes coordinates
1163:     shrinking_trans = mtransforms.BboxTransform(parents_bbox, pb1)
1164: 
1165:     # transform each of the axes in parents using the new transform
1166:     for ax in parents:
1167:         new_posn = shrinking_trans.transform(ax.get_position())
1168:         new_posn = mtransforms.Bbox(new_posn)
1169:         ax.set_position(new_posn)
1170:         if parent_anchor is not False:
1171:             ax.set_anchor(parent_anchor)
1172: 
1173:     cax = fig.add_axes(pbcb)
1174:     cax.set_aspect(aspect, anchor=anchor, adjustable='box')
1175:     return cax, kw
1176: 
1177: 
1178: @docstring.Substitution(make_axes_kw_doc)
1179: def make_axes_gridspec(parent, **kw):
1180:     '''
1181:     Resize and reposition a parent axes, and return a child axes
1182:     suitable for a colorbar. This function is similar to
1183:     make_axes. Prmary differences are
1184: 
1185:      * *make_axes_gridspec* only handles the *orientation* keyword
1186:        and cannot handle the "location" keyword.
1187: 
1188:      * *make_axes_gridspec* should only be used with a subplot parent.
1189: 
1190:      * *make_axes* creates an instance of Axes. *make_axes_gridspec*
1191:         creates an instance of Subplot.
1192: 
1193:      * *make_axes* updates the position of the
1194:         parent. *make_axes_gridspec* replaces the grid_spec attribute
1195:         of the parent with a new one.
1196: 
1197:     While this function is meant to be compatible with *make_axes*,
1198:     there could be some minor differences.
1199: 
1200:     Keyword arguments may include the following (with defaults):
1201: 
1202:         *orientation*
1203:             'vertical' or 'horizontal'
1204: 
1205:     %s
1206: 
1207:     All but the first of these are stripped from the input kw set.
1208: 
1209:     Returns (cax, kw), the child axes and the reduced kw dictionary to be
1210:     passed when creating the colorbar instance.
1211:     '''
1212: 
1213:     orientation = kw.setdefault('orientation', 'vertical')
1214:     kw['ticklocation'] = 'auto'
1215: 
1216:     fraction = kw.pop('fraction', 0.15)
1217:     shrink = kw.pop('shrink', 1.0)
1218:     aspect = kw.pop('aspect', 20)
1219: 
1220:     x1 = 1.0 - fraction
1221: 
1222:     # for shrinking
1223:     pad_s = (1. - shrink) * 0.5
1224:     wh_ratios = [pad_s, shrink, pad_s]
1225: 
1226:     gs_from_subplotspec = gridspec.GridSpecFromSubplotSpec
1227:     if orientation == 'vertical':
1228:         pad = kw.pop('pad', 0.05)
1229:         wh_space = 2 * pad / (1 - pad)
1230: 
1231:         gs = gs_from_subplotspec(1, 2,
1232:                                  subplot_spec=parent.get_subplotspec(),
1233:                                  wspace=wh_space,
1234:                                  width_ratios=[x1 - pad, fraction]
1235:                                  )
1236: 
1237:         gs2 = gs_from_subplotspec(3, 1,
1238:                                   subplot_spec=gs[1],
1239:                                   hspace=0.,
1240:                                   height_ratios=wh_ratios,
1241:                                   )
1242: 
1243:         anchor = (0.0, 0.5)
1244:         panchor = (1.0, 0.5)
1245:     else:
1246:         pad = kw.pop('pad', 0.15)
1247:         wh_space = 2 * pad / (1 - pad)
1248: 
1249:         gs = gs_from_subplotspec(2, 1,
1250:                                  subplot_spec=parent.get_subplotspec(),
1251:                                  hspace=wh_space,
1252:                                  height_ratios=[x1 - pad, fraction]
1253:                                  )
1254: 
1255:         gs2 = gs_from_subplotspec(1, 3,
1256:                                   subplot_spec=gs[1],
1257:                                   wspace=0.,
1258:                                   width_ratios=wh_ratios,
1259:                                   )
1260: 
1261:         aspect = 1.0 / aspect
1262:         anchor = (0.5, 1.0)
1263:         panchor = (0.5, 0.0)
1264: 
1265:     parent.set_subplotspec(gs[0])
1266:     parent.update_params()
1267:     parent.set_position(parent.figbox)
1268:     parent.set_anchor(panchor)
1269: 
1270:     fig = parent.get_figure()
1271:     cax = fig.add_subplot(gs2[1])
1272:     cax.set_aspect(aspect, anchor=anchor, adjustable='box')
1273:     return cax, kw
1274: 
1275: 
1276: class ColorbarPatch(Colorbar):
1277:     '''
1278:     A Colorbar which is created using :class:`~matplotlib.patches.Patch`
1279:     rather than the default :func:`~matplotlib.axes.pcolor`.
1280: 
1281:     It uses a list of Patch instances instead of a
1282:     :class:`~matplotlib.collections.PatchCollection` because the
1283:     latter does not allow the hatch pattern to vary among the
1284:     members of the collection.
1285:     '''
1286:     def __init__(self, ax, mappable, **kw):
1287:         # we do not want to override the behaviour of solids
1288:         # so add a new attribute which will be a list of the
1289:         # colored patches in the colorbar
1290:         self.solids_patches = []
1291:         Colorbar.__init__(self, ax, mappable, **kw)
1292: 
1293:     def _add_solids(self, X, Y, C):
1294:         '''
1295:         Draw the colors using :class:`~matplotlib.patches.Patch`;
1296:         optionally add separators.
1297:         '''
1298:         # Save, set, and restore hold state to keep pcolor from
1299:         # clearing the axes. Ordinarily this will not be needed,
1300:         # since the axes object should already have hold set.
1301:         _hold = self.ax._hold
1302:         self.ax._hold = True
1303: 
1304:         kw = {'alpha': self.alpha, }
1305: 
1306:         n_segments = len(C)
1307: 
1308:         # ensure there are sufficent hatches
1309:         hatches = self.mappable.hatches * n_segments
1310: 
1311:         patches = []
1312:         for i in xrange(len(X) - 1):
1313:             val = C[i][0]
1314:             hatch = hatches[i]
1315: 
1316:             xy = np.array([[X[i][0], Y[i][0]],
1317:                            [X[i][1], Y[i][0]],
1318:                            [X[i + 1][1], Y[i + 1][0]],
1319:                            [X[i + 1][0], Y[i + 1][1]]])
1320: 
1321:             if self.orientation == 'horizontal':
1322:                 # if horizontal swap the xs and ys
1323:                 xy = xy[..., ::-1]
1324: 
1325:             patch = mpatches.PathPatch(mpath.Path(xy),
1326:                                        facecolor=self.cmap(self.norm(val)),
1327:                                        hatch=hatch, linewidth=0,
1328:                                        antialiased=False, **kw)
1329:             self.ax.add_patch(patch)
1330:             patches.append(patch)
1331: 
1332:         if self.solids_patches:
1333:             for solid in self.solids_patches:
1334:                 solid.remove()
1335: 
1336:         self.solids_patches = patches
1337: 
1338:         if self.dividers is not None:
1339:             self.dividers.remove()
1340:             self.dividers = None
1341: 
1342:         if self.drawedges:
1343:             self.dividers = collections.LineCollection(self._edges(X, Y),
1344:                     colors=(mpl.rcParams['axes.edgecolor'],),
1345:                     linewidths=(0.5 * mpl.rcParams['axes.linewidth'],))
1346:             self.ax.add_collection(self.dividers)
1347: 
1348:         self.ax._hold = _hold
1349: 
1350: 
1351: def colorbar_factory(cax, mappable, **kwargs):
1352:     '''
1353:     Creates a colorbar on the given axes for the given mappable.
1354: 
1355:     Typically, for automatic colorbar placement given only a mappable use
1356:     :meth:`~matplotlib.figure.Figure.colorbar`.
1357: 
1358:     '''
1359:     # if the given mappable is a contourset with any hatching, use
1360:     # ColorbarPatch else use Colorbar
1361:     if (isinstance(mappable, contour.ContourSet)
1362:             and any([hatch is not None for hatch in mappable.hatches])):
1363:         cb = ColorbarPatch(cax, mappable, **kwargs)
1364:     else:
1365:         cb = Colorbar(cax, mappable, **kwargs)
1366: 
1367:     cid = mappable.callbacksSM.connect('changed', cb.on_mappable_changed)
1368:     mappable.colorbar = cb
1369:     mappable.colorbar_cid = cid
1370: 
1371:     return cb
1372: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_30395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 20, (-1)), 'unicode', u'\nColorbar toolkit with two classes and a function:\n\n    :class:`ColorbarBase`\n        the base class with full colorbar drawing functionality.\n        It can be used as-is to make a colorbar for a given colormap;\n        a mappable object (e.g., image) is not needed.\n\n    :class:`Colorbar`\n        the derived class for use with images or contour plots.\n\n    :func:`make_axes`\n        a function for resizing an axes and adding a second axes\n        suitable for a colorbar\n\nThe :meth:`~matplotlib.figure.Figure.colorbar` method uses :func:`make_axes`\nand :class:`Colorbar`; the :func:`~matplotlib.pyplot.colorbar` function\nis a thin wrapper over :meth:`~matplotlib.figure.Figure.colorbar`.\n\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'import six' statement (line 24)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30396 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'six')

if (type(import_30396) is not StypyTypeError):

    if (import_30396 != 'pyd_module'):
        __import__(import_30396)
        sys_modules_30397 = sys.modules[import_30396]
        import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'six', sys_modules_30397.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'six', import_30396)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'from six.moves import xrange, zip' statement (line 25)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30398 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'six.moves')

if (type(import_30398) is not StypyTypeError):

    if (import_30398 != 'pyd_module'):
        __import__(import_30398)
        sys_modules_30399 = sys.modules[import_30398]
        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'six.moves', sys_modules_30399.module_type_store, module_type_store, ['xrange', 'zip'])
        nest_module(stypy.reporting.localization.Localization(__file__, 25, 0), __file__, sys_modules_30399, sys_modules_30399.module_type_store, module_type_store)
    else:
        from six.moves import xrange, zip

        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'six.moves', None, module_type_store, ['xrange', 'zip'], [xrange, zip])

else:
    # Assigning a type to the variable 'six.moves' (line 25)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'six.moves', import_30398)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'import warnings' statement (line 27)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'import numpy' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30400 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy')

if (type(import_30400) is not StypyTypeError):

    if (import_30400 != 'pyd_module'):
        __import__(import_30400)
        sys_modules_30401 = sys.modules[import_30400]
        import_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'np', sys_modules_30401.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy', import_30400)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 31, 0))

# 'import matplotlib' statement (line 31)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30402 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib')

if (type(import_30402) is not StypyTypeError):

    if (import_30402 != 'pyd_module'):
        __import__(import_30402)
        sys_modules_30403 = sys.modules[import_30402]
        import_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'mpl', sys_modules_30403.module_type_store, module_type_store)
    else:
        import matplotlib as mpl

        import_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'mpl', matplotlib, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib' (line 31)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib', import_30402)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 0))

# 'import matplotlib.artist' statement (line 32)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30404 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.artist')

if (type(import_30404) is not StypyTypeError):

    if (import_30404 != 'pyd_module'):
        __import__(import_30404)
        sys_modules_30405 = sys.modules[import_30404]
        import_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'martist', sys_modules_30405.module_type_store, module_type_store)
    else:
        import matplotlib.artist as martist

        import_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'martist', matplotlib.artist, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 32)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.artist', import_30404)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 33, 0))

# 'import matplotlib.cbook' statement (line 33)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30406 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib.cbook')

if (type(import_30406) is not StypyTypeError):

    if (import_30406 != 'pyd_module'):
        __import__(import_30406)
        sys_modules_30407 = sys.modules[import_30406]
        import_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'cbook', sys_modules_30407.module_type_store, module_type_store)
    else:
        import matplotlib.cbook as cbook

        import_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'cbook', matplotlib.cbook, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 33)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib.cbook', import_30406)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 34, 0))

# 'import matplotlib.collections' statement (line 34)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30408 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.collections')

if (type(import_30408) is not StypyTypeError):

    if (import_30408 != 'pyd_module'):
        __import__(import_30408)
        sys_modules_30409 = sys.modules[import_30408]
        import_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'collections', sys_modules_30409.module_type_store, module_type_store)
    else:
        import matplotlib.collections as collections

        import_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'collections', matplotlib.collections, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.collections' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.collections', import_30408)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 35, 0))

# 'import matplotlib.colors' statement (line 35)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30410 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib.colors')

if (type(import_30410) is not StypyTypeError):

    if (import_30410 != 'pyd_module'):
        __import__(import_30410)
        sys_modules_30411 = sys.modules[import_30410]
        import_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'colors', sys_modules_30411.module_type_store, module_type_store)
    else:
        import matplotlib.colors as colors

        import_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'colors', matplotlib.colors, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.colors' (line 35)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib.colors', import_30410)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 36, 0))

# 'import matplotlib.contour' statement (line 36)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30412 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'matplotlib.contour')

if (type(import_30412) is not StypyTypeError):

    if (import_30412 != 'pyd_module'):
        __import__(import_30412)
        sys_modules_30413 = sys.modules[import_30412]
        import_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'contour', sys_modules_30413.module_type_store, module_type_store)
    else:
        import matplotlib.contour as contour

        import_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'contour', matplotlib.contour, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.contour' (line 36)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'matplotlib.contour', import_30412)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 37, 0))

# 'import matplotlib.cm' statement (line 37)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30414 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.cm')

if (type(import_30414) is not StypyTypeError):

    if (import_30414 != 'pyd_module'):
        __import__(import_30414)
        sys_modules_30415 = sys.modules[import_30414]
        import_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'cm', sys_modules_30415.module_type_store, module_type_store)
    else:
        import matplotlib.cm as cm

        import_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'cm', matplotlib.cm, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cm' (line 37)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.cm', import_30414)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 38, 0))

# 'import matplotlib.gridspec' statement (line 38)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30416 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.gridspec')

if (type(import_30416) is not StypyTypeError):

    if (import_30416 != 'pyd_module'):
        __import__(import_30416)
        sys_modules_30417 = sys.modules[import_30416]
        import_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'gridspec', sys_modules_30417.module_type_store, module_type_store)
    else:
        import matplotlib.gridspec as gridspec

        import_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'gridspec', matplotlib.gridspec, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.gridspec' (line 38)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.gridspec', import_30416)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 39, 0))

# 'import matplotlib.patches' statement (line 39)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30418 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'matplotlib.patches')

if (type(import_30418) is not StypyTypeError):

    if (import_30418 != 'pyd_module'):
        __import__(import_30418)
        sys_modules_30419 = sys.modules[import_30418]
        import_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'mpatches', sys_modules_30419.module_type_store, module_type_store)
    else:
        import matplotlib.patches as mpatches

        import_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'mpatches', matplotlib.patches, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.patches' (line 39)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'matplotlib.patches', import_30418)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 40, 0))

# 'import matplotlib.path' statement (line 40)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30420 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.path')

if (type(import_30420) is not StypyTypeError):

    if (import_30420 != 'pyd_module'):
        __import__(import_30420)
        sys_modules_30421 = sys.modules[import_30420]
        import_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'mpath', sys_modules_30421.module_type_store, module_type_store)
    else:
        import matplotlib.path as mpath

        import_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'mpath', matplotlib.path, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.path' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.path', import_30420)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 41, 0))

# 'import matplotlib.ticker' statement (line 41)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30422 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib.ticker')

if (type(import_30422) is not StypyTypeError):

    if (import_30422 != 'pyd_module'):
        __import__(import_30422)
        sys_modules_30423 = sys.modules[import_30422]
        import_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'ticker', sys_modules_30423.module_type_store, module_type_store)
    else:
        import matplotlib.ticker as ticker

        import_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'ticker', matplotlib.ticker, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.ticker' (line 41)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib.ticker', import_30422)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 42, 0))

# 'import matplotlib.transforms' statement (line 42)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30424 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib.transforms')

if (type(import_30424) is not StypyTypeError):

    if (import_30424 != 'pyd_module'):
        __import__(import_30424)
        sys_modules_30425 = sys.modules[import_30424]
        import_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'mtransforms', sys_modules_30425.module_type_store, module_type_store)
    else:
        import matplotlib.transforms as mtransforms

        import_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'mtransforms', matplotlib.transforms, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 42)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib.transforms', import_30424)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 44, 0))

# 'from matplotlib import docstring' statement (line 44)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_30426 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib')

if (type(import_30426) is not StypyTypeError):

    if (import_30426 != 'pyd_module'):
        __import__(import_30426)
        sys_modules_30427 = sys.modules[import_30426]
        import_from_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib', sys_modules_30427.module_type_store, module_type_store, ['docstring'])
        nest_module(stypy.reporting.localization.Localization(__file__, 44, 0), __file__, sys_modules_30427, sys_modules_30427.module_type_store, module_type_store)
    else:
        from matplotlib import docstring

        import_from_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib', None, module_type_store, ['docstring'], [docstring])

else:
    # Assigning a type to the variable 'matplotlib' (line 44)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib', import_30426)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')


# Assigning a Str to a Name (line 46):

# Assigning a Str to a Name (line 46):
unicode_30428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, (-1)), 'unicode', u"\n\n    ============= ====================================================\n    Property      Description\n    ============= ====================================================\n    *orientation* vertical or horizontal\n    *fraction*    0.15; fraction of original axes to use for colorbar\n    *pad*         0.05 if vertical, 0.15 if horizontal; fraction\n                  of original axes between colorbar and new image axes\n    *shrink*      1.0; fraction by which to multiply the size of the colorbar\n    *aspect*      20; ratio of long to short dimensions\n    *anchor*      (0.0, 0.5) if vertical; (0.5, 1.0) if horizontal;\n                  the anchor point of the colorbar axes\n    *panchor*     (1.0, 0.5) if vertical; (0.5, 0.0) if horizontal;\n                  the anchor point of the colorbar parent axes. If\n                  False, the parent axes' anchor will be unchanged\n    ============= ====================================================\n\n")
# Assigning a type to the variable 'make_axes_kw_doc' (line 46)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 0), 'make_axes_kw_doc', unicode_30428)

# Assigning a Str to a Name (line 66):

# Assigning a Str to a Name (line 66):
unicode_30429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 128, (-1)), 'unicode', u"\n\n    ============  ====================================================\n    Property      Description\n    ============  ====================================================\n    *extend*      [ 'neither' | 'both' | 'min' | 'max' ]\n                  If not 'neither', make pointed end(s) for out-of-\n                  range values.  These are set for a given colormap\n                  using the colormap set_under and set_over methods.\n    *extendfrac*  [ *None* | 'auto' | length | lengths ]\n                  If set to *None*, both the minimum and maximum\n                  triangular colorbar extensions with have a length of\n                  5% of the interior colorbar length (this is the\n                  default setting). If set to 'auto', makes the\n                  triangular colorbar extensions the same lengths as\n                  the interior boxes (when *spacing* is set to\n                  'uniform') or the same lengths as the respective\n                  adjacent interior boxes (when *spacing* is set to\n                  'proportional'). If a scalar, indicates the length\n                  of both the minimum and maximum triangular colorbar\n                  extensions as a fraction of the interior colorbar\n                  length. A two-element sequence of fractions may also\n                  be given, indicating the lengths of the minimum and\n                  maximum colorbar extensions respectively as a\n                  fraction of the interior colorbar length.\n    *extendrect*  [ *False* | *True* ]\n                  If *False* the minimum and maximum colorbar extensions\n                  will be triangular (the default). If *True* the\n                  extensions will be rectangular.\n    *spacing*     [ 'uniform' | 'proportional' ]\n                  Uniform spacing gives each discrete color the same\n                  space; proportional makes the space proportional to\n                  the data interval.\n    *ticks*       [ None | list of ticks | Locator object ]\n                  If None, ticks are determined automatically from the\n                  input.\n    *format*      [ None | format string | Formatter object ]\n                  If None, the\n                  :class:`~matplotlib.ticker.ScalarFormatter` is used.\n                  If a format string is given, e.g., '%.3f', that is\n                  used. An alternative\n                  :class:`~matplotlib.ticker.Formatter` object may be\n                  given instead.\n    *drawedges*   [ False | True ] If true, draw lines at color\n                  boundaries.\n    ============  ====================================================\n\n    The following will probably be useful only in the context of\n    indexed colors (that is, when the mappable has norm=NoNorm()),\n    or other unusual circumstances.\n\n    ============   ===================================================\n    Property       Description\n    ============   ===================================================\n    *boundaries*   None or a sequence\n    *values*       None or a sequence which must be of length 1 less\n                   than the sequence of *boundaries*. For each region\n                   delimited by adjacent entries in *boundaries*, the\n                   color mapped to the corresponding value in values\n                   will be used.\n    ============   ===================================================\n\n")
# Assigning a type to the variable 'colormap_kw_doc' (line 66)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 66, 0), 'colormap_kw_doc', unicode_30429)

# Assigning a BinOp to a Name (line 130):

# Assigning a BinOp to a Name (line 130):
unicode_30430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, (-1)), 'unicode', u'\n\nAdd a colorbar to a plot.\n\nFunction signatures for the :mod:`~matplotlib.pyplot` interface; all\nbut the first are also method signatures for the\n:meth:`~matplotlib.figure.Figure.colorbar` method::\n\n  colorbar(**kwargs)\n  colorbar(mappable, **kwargs)\n  colorbar(mappable, cax=cax, **kwargs)\n  colorbar(mappable, ax=ax, **kwargs)\n\narguments:\n\n  *mappable*\n    the :class:`~matplotlib.image.Image`,\n    :class:`~matplotlib.contour.ContourSet`, etc. to\n    which the colorbar applies; this argument is mandatory for the\n    :meth:`~matplotlib.figure.Figure.colorbar` method but optional for the\n    :func:`~matplotlib.pyplot.colorbar` function, which sets the\n    default to the current image.\n\nkeyword arguments:\n\n  *cax*\n    None | axes object into which the colorbar will be drawn\n  *ax*\n    None | parent axes object(s) from which space for a new\n    colorbar axes will be stolen. If a list of axes is given\n    they will all be resized to make room for the colorbar axes.\n  *use_gridspec*\n    False | If *cax* is None, a new *cax* is created as an instance of\n    Axes. If *ax* is an instance of Subplot and *use_gridspec* is True,\n    *cax* is created as an instance of Subplot using the\n    grid_spec module.\n\n\nAdditional keyword arguments are of two kinds:\n\n  axes properties:\n%s\n  colorbar properties:\n%s\n\nIf *mappable* is a :class:`~matplotlib.contours.ContourSet`, its *extend*\nkwarg is included automatically.\n\nNote that the *shrink* kwarg provides a simple way to keep a vertical\ncolorbar, for example, from being taller than the axes of the mappable\nto which the colorbar is attached; but it is a manual method requiring\nsome trial and error. If the colorbar is too tall (or a horizontal\ncolorbar is too wide) use a smaller value of *shrink*.\n\nFor more precise control, you can manually specify the positions of\nthe axes objects in which the mappable and the colorbar are drawn.  In\nthis case, do not use any of the axes properties kwargs.\n\nIt is known that some vector graphics viewer (svg and pdf) renders white gaps\nbetween segments of the colorbar. This is due to bugs in the viewers not\nmatplotlib. As a workaround the colorbar can be rendered with overlapping\nsegments::\n\n    cbar = colorbar()\n    cbar.solids.set_edgecolor("face")\n    draw()\n\nHowever this has negative consequences in other circumstances. Particularly\nwith semi transparent images (alpha < 1) and colorbar extensions and is not\nenabled by default see (issue #1188).\n\nreturns:\n    :class:`~matplotlib.colorbar.Colorbar` instance; see also its base class,\n    :class:`~matplotlib.colorbar.ColorbarBase`.  Call the\n    :meth:`~matplotlib.colorbar.ColorbarBase.set_label` method\n    to label the colorbar.\n\n')

# Obtaining an instance of the builtin type 'tuple' (line 207)
tuple_30431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 7), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 207)
# Adding element type (line 207)
# Getting the type of 'make_axes_kw_doc' (line 207)
make_axes_kw_doc_30432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 7), 'make_axes_kw_doc')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 7), tuple_30431, make_axes_kw_doc_30432)
# Adding element type (line 207)
# Getting the type of 'colormap_kw_doc' (line 207)
colormap_kw_doc_30433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 25), 'colormap_kw_doc')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 7), tuple_30431, colormap_kw_doc_30433)

# Applying the binary operator '%' (line 207)
result_mod_30434 = python_operator(stypy.reporting.localization.Localization(__file__, 207, (-1)), '%', unicode_30430, tuple_30431)

# Assigning a type to the variable 'colorbar_doc' (line 130)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 0), 'colorbar_doc', result_mod_30434)

# Call to update(...): (line 209)
# Processing the call keyword arguments (line 209)
# Getting the type of 'colorbar_doc' (line 209)
colorbar_doc_30438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 38), 'colorbar_doc', False)
keyword_30439 = colorbar_doc_30438
kwargs_30440 = {'colorbar_doc': keyword_30439}
# Getting the type of 'docstring' (line 209)
docstring_30435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 209)
interpd_30436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 0), docstring_30435, 'interpd')
# Obtaining the member 'update' of a type (line 209)
update_30437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 0), interpd_30436, 'update')
# Calling update(args, kwargs) (line 209)
update_call_result_30441 = invoke(stypy.reporting.localization.Localization(__file__, 209, 0), update_30437, *[], **kwargs_30440)


@norecursion
def _set_ticks_on_axis_warn(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_set_ticks_on_axis_warn'
    module_type_store = module_type_store.open_function_context('_set_ticks_on_axis_warn', 212, 0, False)
    
    # Passed parameters checking function
    _set_ticks_on_axis_warn.stypy_localization = localization
    _set_ticks_on_axis_warn.stypy_type_of_self = None
    _set_ticks_on_axis_warn.stypy_type_store = module_type_store
    _set_ticks_on_axis_warn.stypy_function_name = '_set_ticks_on_axis_warn'
    _set_ticks_on_axis_warn.stypy_param_names_list = []
    _set_ticks_on_axis_warn.stypy_varargs_param_name = 'args'
    _set_ticks_on_axis_warn.stypy_kwargs_param_name = 'kw'
    _set_ticks_on_axis_warn.stypy_call_defaults = defaults
    _set_ticks_on_axis_warn.stypy_call_varargs = varargs
    _set_ticks_on_axis_warn.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_set_ticks_on_axis_warn', [], 'args', 'kw', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_set_ticks_on_axis_warn', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_set_ticks_on_axis_warn(...)' code ##################

    
    # Call to warn(...): (line 215)
    # Processing the call arguments (line 215)
    unicode_30444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 215, 18), 'unicode', u'Use the colorbar set_ticks() method instead.')
    # Processing the call keyword arguments (line 215)
    kwargs_30445 = {}
    # Getting the type of 'warnings' (line 215)
    warnings_30442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 4), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 215)
    warn_30443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 4), warnings_30442, 'warn')
    # Calling warn(args, kwargs) (line 215)
    warn_call_result_30446 = invoke(stypy.reporting.localization.Localization(__file__, 215, 4), warn_30443, *[unicode_30444], **kwargs_30445)
    
    
    # ################# End of '_set_ticks_on_axis_warn(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_set_ticks_on_axis_warn' in the type store
    # Getting the type of 'stypy_return_type' (line 212)
    stypy_return_type_30447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_30447)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_set_ticks_on_axis_warn'
    return stypy_return_type_30447

# Assigning a type to the variable '_set_ticks_on_axis_warn' (line 212)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 212, 0), '_set_ticks_on_axis_warn', _set_ticks_on_axis_warn)
# Declaration of the 'ColorbarBase' class
# Getting the type of 'cm' (line 218)
cm_30448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 19), 'cm')
# Obtaining the member 'ScalarMappable' of a type (line 218)
ScalarMappable_30449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 218, 19), cm_30448, 'ScalarMappable')

class ColorbarBase(ScalarMappable_30449, ):
    unicode_30450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, (-1)), 'unicode', u'\n    Draw a colorbar in an existing axes.\n\n    This is a base class for the :class:`Colorbar` class, which is the\n    basis for the :func:`~matplotlib.pyplot.colorbar` function and the\n    :meth:`~matplotlib.figure.Figure.colorbar` method, which are the\n    usual ways of creating a colorbar.\n\n    It is also useful by itself for showing a colormap.  If the *cmap*\n    kwarg is given but *boundaries* and *values* are left as None,\n    then the colormap will be displayed on a 0-1 scale. To show the\n    under- and over-value colors, specify the *norm* as::\n\n        colors.Normalize(clip=False)\n\n    To show the colors versus index instead of on the 0-1 scale,\n    use::\n\n        norm=colors.NoNorm.\n\n    Useful attributes:\n\n        :attr:`ax`\n            the Axes instance in which the colorbar is drawn\n\n        :attr:`lines`\n            a list of LineCollection if lines were drawn, otherwise\n            an empty list\n\n        :attr:`dividers`\n            a LineCollection if *drawedges* is True, otherwise None\n\n    Useful public methods are :meth:`set_label` and :meth:`add_lines`.\n\n    ')
    
    # Assigning a Dict to a Name (line 254):
    
    # Assigning a Num to a Name (line 259):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 261)
        None_30451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 32), 'None')
        # Getting the type of 'None' (line 262)
        None_30452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 22), 'None')
        # Getting the type of 'None' (line 263)
        None_30453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 23), 'None')
        # Getting the type of 'None' (line 264)
        None_30454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 24), 'None')
        # Getting the type of 'None' (line 265)
        None_30455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 28), 'None')
        unicode_30456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 29), 'unicode', u'vertical')
        unicode_30457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 30), 'unicode', u'auto')
        unicode_30458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 24), 'unicode', u'neither')
        unicode_30459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 25), 'unicode', u'uniform')
        # Getting the type of 'None' (line 270)
        None_30460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 23), 'None')
        # Getting the type of 'None' (line 271)
        None_30461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 24), 'None')
        # Getting the type of 'False' (line 272)
        False_30462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 27), 'False')
        # Getting the type of 'True' (line 273)
        True_30463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 24), 'True')
        # Getting the type of 'None' (line 274)
        None_30464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 28), 'None')
        # Getting the type of 'False' (line 275)
        False_30465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 28), 'False')
        unicode_30466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, 23), 'unicode', u'')
        defaults = [None_30451, None_30452, None_30453, None_30454, None_30455, unicode_30456, unicode_30457, unicode_30458, unicode_30459, None_30460, None_30461, False_30462, True_30463, None_30464, False_30465, unicode_30466]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 261, 4, False)
        # Assigning a type to the variable 'self' (line 262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 262, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase.__init__', ['ax', 'cmap', 'norm', 'alpha', 'values', 'boundaries', 'orientation', 'ticklocation', 'extend', 'spacing', 'ticks', 'format', 'drawedges', 'filled', 'extendfrac', 'extendrect', 'label'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'cmap', 'norm', 'alpha', 'values', 'boundaries', 'orientation', 'ticklocation', 'extend', 'spacing', 'ticks', 'format', 'drawedges', 'filled', 'extendfrac', 'extendrect', 'label'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 279):
        
        # Assigning a Name to a Attribute (line 279):
        # Getting the type of 'ax' (line 279)
        ax_30467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 18), 'ax')
        # Getting the type of 'self' (line 279)
        self_30468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 8), 'self')
        # Setting the type of the member 'ax' of a type (line 279)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 8), self_30468, 'ax', ax_30467)
        
        # Call to _patch_ax(...): (line 280)
        # Processing the call keyword arguments (line 280)
        kwargs_30471 = {}
        # Getting the type of 'self' (line 280)
        self_30469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 8), 'self', False)
        # Obtaining the member '_patch_ax' of a type (line 280)
        _patch_ax_30470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 8), self_30469, '_patch_ax')
        # Calling _patch_ax(args, kwargs) (line 280)
        _patch_ax_call_result_30472 = invoke(stypy.reporting.localization.Localization(__file__, 280, 8), _patch_ax_30470, *[], **kwargs_30471)
        
        
        # Type idiom detected: calculating its left and rigth part (line 281)
        # Getting the type of 'cmap' (line 281)
        cmap_30473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 11), 'cmap')
        # Getting the type of 'None' (line 281)
        None_30474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 19), 'None')
        
        (may_be_30475, more_types_in_union_30476) = may_be_none(cmap_30473, None_30474)

        if may_be_30475:

            if more_types_in_union_30476:
                # Runtime conditional SSA (line 281)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 282):
            
            # Assigning a Call to a Name (line 282):
            
            # Call to get_cmap(...): (line 282)
            # Processing the call keyword arguments (line 282)
            kwargs_30479 = {}
            # Getting the type of 'cm' (line 282)
            cm_30477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 19), 'cm', False)
            # Obtaining the member 'get_cmap' of a type (line 282)
            get_cmap_30478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 282, 19), cm_30477, 'get_cmap')
            # Calling get_cmap(args, kwargs) (line 282)
            get_cmap_call_result_30480 = invoke(stypy.reporting.localization.Localization(__file__, 282, 19), get_cmap_30478, *[], **kwargs_30479)
            
            # Assigning a type to the variable 'cmap' (line 282)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 12), 'cmap', get_cmap_call_result_30480)

            if more_types_in_union_30476:
                # SSA join for if statement (line 281)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 283)
        # Getting the type of 'norm' (line 283)
        norm_30481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 11), 'norm')
        # Getting the type of 'None' (line 283)
        None_30482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 19), 'None')
        
        (may_be_30483, more_types_in_union_30484) = may_be_none(norm_30481, None_30482)

        if may_be_30483:

            if more_types_in_union_30484:
                # Runtime conditional SSA (line 283)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 284):
            
            # Assigning a Call to a Name (line 284):
            
            # Call to Normalize(...): (line 284)
            # Processing the call keyword arguments (line 284)
            kwargs_30487 = {}
            # Getting the type of 'colors' (line 284)
            colors_30485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 19), 'colors', False)
            # Obtaining the member 'Normalize' of a type (line 284)
            Normalize_30486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 19), colors_30485, 'Normalize')
            # Calling Normalize(args, kwargs) (line 284)
            Normalize_call_result_30488 = invoke(stypy.reporting.localization.Localization(__file__, 284, 19), Normalize_30486, *[], **kwargs_30487)
            
            # Assigning a type to the variable 'norm' (line 284)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 12), 'norm', Normalize_call_result_30488)

            if more_types_in_union_30484:
                # SSA join for if statement (line 283)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 285):
        
        # Assigning a Name to a Attribute (line 285):
        # Getting the type of 'alpha' (line 285)
        alpha_30489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 21), 'alpha')
        # Getting the type of 'self' (line 285)
        self_30490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 8), 'self')
        # Setting the type of the member 'alpha' of a type (line 285)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 285, 8), self_30490, 'alpha', alpha_30489)
        
        # Call to __init__(...): (line 286)
        # Processing the call arguments (line 286)
        # Getting the type of 'self' (line 286)
        self_30494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 35), 'self', False)
        # Processing the call keyword arguments (line 286)
        # Getting the type of 'cmap' (line 286)
        cmap_30495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 46), 'cmap', False)
        keyword_30496 = cmap_30495
        # Getting the type of 'norm' (line 286)
        norm_30497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 57), 'norm', False)
        keyword_30498 = norm_30497
        kwargs_30499 = {'cmap': keyword_30496, 'norm': keyword_30498}
        # Getting the type of 'cm' (line 286)
        cm_30491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 8), 'cm', False)
        # Obtaining the member 'ScalarMappable' of a type (line 286)
        ScalarMappable_30492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 8), cm_30491, 'ScalarMappable')
        # Obtaining the member '__init__' of a type (line 286)
        init___30493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 8), ScalarMappable_30492, '__init__')
        # Calling __init__(args, kwargs) (line 286)
        init___call_result_30500 = invoke(stypy.reporting.localization.Localization(__file__, 286, 8), init___30493, *[self_30494], **kwargs_30499)
        
        
        # Assigning a Name to a Attribute (line 287):
        
        # Assigning a Name to a Attribute (line 287):
        # Getting the type of 'values' (line 287)
        values_30501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 22), 'values')
        # Getting the type of 'self' (line 287)
        self_30502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 8), 'self')
        # Setting the type of the member 'values' of a type (line 287)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 8), self_30502, 'values', values_30501)
        
        # Assigning a Name to a Attribute (line 288):
        
        # Assigning a Name to a Attribute (line 288):
        # Getting the type of 'boundaries' (line 288)
        boundaries_30503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 26), 'boundaries')
        # Getting the type of 'self' (line 288)
        self_30504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 8), 'self')
        # Setting the type of the member 'boundaries' of a type (line 288)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 8), self_30504, 'boundaries', boundaries_30503)
        
        # Assigning a Name to a Attribute (line 289):
        
        # Assigning a Name to a Attribute (line 289):
        # Getting the type of 'extend' (line 289)
        extend_30505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 22), 'extend')
        # Getting the type of 'self' (line 289)
        self_30506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 8), 'self')
        # Setting the type of the member 'extend' of a type (line 289)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 8), self_30506, 'extend', extend_30505)
        
        # Assigning a Subscript to a Attribute (line 290):
        
        # Assigning a Subscript to a Attribute (line 290):
        
        # Obtaining the type of the subscript
        # Getting the type of 'extend' (line 290)
        extend_30507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 40), 'extend')
        # Getting the type of 'self' (line 290)
        self_30508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 23), 'self')
        # Obtaining the member '_slice_dict' of a type (line 290)
        _slice_dict_30509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 23), self_30508, '_slice_dict')
        # Obtaining the member '__getitem__' of a type (line 290)
        getitem___30510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 23), _slice_dict_30509, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 290)
        subscript_call_result_30511 = invoke(stypy.reporting.localization.Localization(__file__, 290, 23), getitem___30510, extend_30507)
        
        # Getting the type of 'self' (line 290)
        self_30512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 8), 'self')
        # Setting the type of the member '_inside' of a type (line 290)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 8), self_30512, '_inside', subscript_call_result_30511)
        
        # Assigning a Name to a Attribute (line 291):
        
        # Assigning a Name to a Attribute (line 291):
        # Getting the type of 'spacing' (line 291)
        spacing_30513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 23), 'spacing')
        # Getting the type of 'self' (line 291)
        self_30514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 8), 'self')
        # Setting the type of the member 'spacing' of a type (line 291)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 291, 8), self_30514, 'spacing', spacing_30513)
        
        # Assigning a Name to a Attribute (line 292):
        
        # Assigning a Name to a Attribute (line 292):
        # Getting the type of 'orientation' (line 292)
        orientation_30515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 27), 'orientation')
        # Getting the type of 'self' (line 292)
        self_30516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 8), 'self')
        # Setting the type of the member 'orientation' of a type (line 292)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 8), self_30516, 'orientation', orientation_30515)
        
        # Assigning a Name to a Attribute (line 293):
        
        # Assigning a Name to a Attribute (line 293):
        # Getting the type of 'drawedges' (line 293)
        drawedges_30517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 25), 'drawedges')
        # Getting the type of 'self' (line 293)
        self_30518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 8), 'self')
        # Setting the type of the member 'drawedges' of a type (line 293)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 8), self_30518, 'drawedges', drawedges_30517)
        
        # Assigning a Name to a Attribute (line 294):
        
        # Assigning a Name to a Attribute (line 294):
        # Getting the type of 'filled' (line 294)
        filled_30519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 22), 'filled')
        # Getting the type of 'self' (line 294)
        self_30520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 8), 'self')
        # Setting the type of the member 'filled' of a type (line 294)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 294, 8), self_30520, 'filled', filled_30519)
        
        # Assigning a Name to a Attribute (line 295):
        
        # Assigning a Name to a Attribute (line 295):
        # Getting the type of 'extendfrac' (line 295)
        extendfrac_30521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 26), 'extendfrac')
        # Getting the type of 'self' (line 295)
        self_30522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 8), 'self')
        # Setting the type of the member 'extendfrac' of a type (line 295)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 8), self_30522, 'extendfrac', extendfrac_30521)
        
        # Assigning a Name to a Attribute (line 296):
        
        # Assigning a Name to a Attribute (line 296):
        # Getting the type of 'extendrect' (line 296)
        extendrect_30523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 26), 'extendrect')
        # Getting the type of 'self' (line 296)
        self_30524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 8), 'self')
        # Setting the type of the member 'extendrect' of a type (line 296)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 8), self_30524, 'extendrect', extendrect_30523)
        
        # Assigning a Name to a Attribute (line 297):
        
        # Assigning a Name to a Attribute (line 297):
        # Getting the type of 'None' (line 297)
        None_30525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 22), 'None')
        # Getting the type of 'self' (line 297)
        self_30526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'self')
        # Setting the type of the member 'solids' of a type (line 297)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 8), self_30526, 'solids', None_30525)
        
        # Assigning a Call to a Attribute (line 298):
        
        # Assigning a Call to a Attribute (line 298):
        
        # Call to list(...): (line 298)
        # Processing the call keyword arguments (line 298)
        kwargs_30528 = {}
        # Getting the type of 'list' (line 298)
        list_30527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 21), 'list', False)
        # Calling list(args, kwargs) (line 298)
        list_call_result_30529 = invoke(stypy.reporting.localization.Localization(__file__, 298, 21), list_30527, *[], **kwargs_30528)
        
        # Getting the type of 'self' (line 298)
        self_30530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 8), 'self')
        # Setting the type of the member 'lines' of a type (line 298)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 8), self_30530, 'lines', list_call_result_30529)
        
        # Assigning a Name to a Attribute (line 299):
        
        # Assigning a Name to a Attribute (line 299):
        # Getting the type of 'None' (line 299)
        None_30531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 23), 'None')
        # Getting the type of 'self' (line 299)
        self_30532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 8), 'self')
        # Setting the type of the member 'outline' of a type (line 299)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 8), self_30532, 'outline', None_30531)
        
        # Assigning a Name to a Attribute (line 300):
        
        # Assigning a Name to a Attribute (line 300):
        # Getting the type of 'None' (line 300)
        None_30533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 21), 'None')
        # Getting the type of 'self' (line 300)
        self_30534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 8), 'self')
        # Setting the type of the member 'patch' of a type (line 300)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 300, 8), self_30534, 'patch', None_30533)
        
        # Assigning a Name to a Attribute (line 301):
        
        # Assigning a Name to a Attribute (line 301):
        # Getting the type of 'None' (line 301)
        None_30535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 24), 'None')
        # Getting the type of 'self' (line 301)
        self_30536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 8), 'self')
        # Setting the type of the member 'dividers' of a type (line 301)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 8), self_30536, 'dividers', None_30535)
        
        
        # Getting the type of 'ticklocation' (line 303)
        ticklocation_30537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 11), 'ticklocation')
        unicode_30538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 303, 27), 'unicode', u'auto')
        # Applying the binary operator '==' (line 303)
        result_eq_30539 = python_operator(stypy.reporting.localization.Localization(__file__, 303, 11), '==', ticklocation_30537, unicode_30538)
        
        # Testing the type of an if condition (line 303)
        if_condition_30540 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 303, 8), result_eq_30539)
        # Assigning a type to the variable 'if_condition_30540' (line 303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 303, 8), 'if_condition_30540', if_condition_30540)
        # SSA begins for if statement (line 303)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a IfExp to a Name (line 304):
        
        # Assigning a IfExp to a Name (line 304):
        
        
        # Getting the type of 'orientation' (line 304)
        orientation_30541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 39), 'orientation')
        unicode_30542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 304, 54), 'unicode', u'horizontal')
        # Applying the binary operator '==' (line 304)
        result_eq_30543 = python_operator(stypy.reporting.localization.Localization(__file__, 304, 39), '==', orientation_30541, unicode_30542)
        
        # Testing the type of an if expression (line 304)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 304, 27), result_eq_30543)
        # SSA begins for if expression (line 304)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        unicode_30544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 304, 27), 'unicode', u'bottom')
        # SSA branch for the else part of an if expression (line 304)
        module_type_store.open_ssa_branch('if expression else')
        unicode_30545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 304, 72), 'unicode', u'right')
        # SSA join for if expression (line 304)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_30546 = union_type.UnionType.add(unicode_30544, unicode_30545)
        
        # Assigning a type to the variable 'ticklocation' (line 304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 304, 12), 'ticklocation', if_exp_30546)
        # SSA join for if statement (line 303)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 305):
        
        # Assigning a Name to a Attribute (line 305):
        # Getting the type of 'ticklocation' (line 305)
        ticklocation_30547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 28), 'ticklocation')
        # Getting the type of 'self' (line 305)
        self_30548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 8), 'self')
        # Setting the type of the member 'ticklocation' of a type (line 305)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 8), self_30548, 'ticklocation', ticklocation_30547)
        
        # Call to set_label(...): (line 307)
        # Processing the call arguments (line 307)
        # Getting the type of 'label' (line 307)
        label_30551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 23), 'label', False)
        # Processing the call keyword arguments (line 307)
        kwargs_30552 = {}
        # Getting the type of 'self' (line 307)
        self_30549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 8), 'self', False)
        # Obtaining the member 'set_label' of a type (line 307)
        set_label_30550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 307, 8), self_30549, 'set_label')
        # Calling set_label(args, kwargs) (line 307)
        set_label_call_result_30553 = invoke(stypy.reporting.localization.Localization(__file__, 307, 8), set_label_30550, *[label_30551], **kwargs_30552)
        
        
        
        # Call to iterable(...): (line 308)
        # Processing the call arguments (line 308)
        # Getting the type of 'ticks' (line 308)
        ticks_30556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 26), 'ticks', False)
        # Processing the call keyword arguments (line 308)
        kwargs_30557 = {}
        # Getting the type of 'cbook' (line 308)
        cbook_30554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 11), 'cbook', False)
        # Obtaining the member 'iterable' of a type (line 308)
        iterable_30555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 11), cbook_30554, 'iterable')
        # Calling iterable(args, kwargs) (line 308)
        iterable_call_result_30558 = invoke(stypy.reporting.localization.Localization(__file__, 308, 11), iterable_30555, *[ticks_30556], **kwargs_30557)
        
        # Testing the type of an if condition (line 308)
        if_condition_30559 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 308, 8), iterable_call_result_30558)
        # Assigning a type to the variable 'if_condition_30559' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'if_condition_30559', if_condition_30559)
        # SSA begins for if statement (line 308)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 309):
        
        # Assigning a Call to a Attribute (line 309):
        
        # Call to FixedLocator(...): (line 309)
        # Processing the call arguments (line 309)
        # Getting the type of 'ticks' (line 309)
        ticks_30562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 47), 'ticks', False)
        # Processing the call keyword arguments (line 309)
        
        # Call to len(...): (line 309)
        # Processing the call arguments (line 309)
        # Getting the type of 'ticks' (line 309)
        ticks_30564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 64), 'ticks', False)
        # Processing the call keyword arguments (line 309)
        kwargs_30565 = {}
        # Getting the type of 'len' (line 309)
        len_30563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 60), 'len', False)
        # Calling len(args, kwargs) (line 309)
        len_call_result_30566 = invoke(stypy.reporting.localization.Localization(__file__, 309, 60), len_30563, *[ticks_30564], **kwargs_30565)
        
        keyword_30567 = len_call_result_30566
        kwargs_30568 = {'nbins': keyword_30567}
        # Getting the type of 'ticker' (line 309)
        ticker_30560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 27), 'ticker', False)
        # Obtaining the member 'FixedLocator' of a type (line 309)
        FixedLocator_30561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 27), ticker_30560, 'FixedLocator')
        # Calling FixedLocator(args, kwargs) (line 309)
        FixedLocator_call_result_30569 = invoke(stypy.reporting.localization.Localization(__file__, 309, 27), FixedLocator_30561, *[ticks_30562], **kwargs_30568)
        
        # Getting the type of 'self' (line 309)
        self_30570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 12), 'self')
        # Setting the type of the member 'locator' of a type (line 309)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 12), self_30570, 'locator', FixedLocator_call_result_30569)
        # SSA branch for the else part of an if statement (line 308)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 311):
        
        # Assigning a Name to a Attribute (line 311):
        # Getting the type of 'ticks' (line 311)
        ticks_30571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 27), 'ticks')
        # Getting the type of 'self' (line 311)
        self_30572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 12), 'self')
        # Setting the type of the member 'locator' of a type (line 311)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 12), self_30572, 'locator', ticks_30571)
        # SSA join for if statement (line 308)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 312)
        # Getting the type of 'format' (line 312)
        format_30573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 11), 'format')
        # Getting the type of 'None' (line 312)
        None_30574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 21), 'None')
        
        (may_be_30575, more_types_in_union_30576) = may_be_none(format_30573, None_30574)

        if may_be_30575:

            if more_types_in_union_30576:
                # Runtime conditional SSA (line 312)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Call to isinstance(...): (line 313)
            # Processing the call arguments (line 313)
            # Getting the type of 'self' (line 313)
            self_30578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 26), 'self', False)
            # Obtaining the member 'norm' of a type (line 313)
            norm_30579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 313, 26), self_30578, 'norm')
            # Getting the type of 'colors' (line 313)
            colors_30580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 37), 'colors', False)
            # Obtaining the member 'LogNorm' of a type (line 313)
            LogNorm_30581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 313, 37), colors_30580, 'LogNorm')
            # Processing the call keyword arguments (line 313)
            kwargs_30582 = {}
            # Getting the type of 'isinstance' (line 313)
            isinstance_30577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 313)
            isinstance_call_result_30583 = invoke(stypy.reporting.localization.Localization(__file__, 313, 15), isinstance_30577, *[norm_30579, LogNorm_30581], **kwargs_30582)
            
            # Testing the type of an if condition (line 313)
            if_condition_30584 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 313, 12), isinstance_call_result_30583)
            # Assigning a type to the variable 'if_condition_30584' (line 313)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 313, 12), 'if_condition_30584', if_condition_30584)
            # SSA begins for if statement (line 313)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 314):
            
            # Assigning a Call to a Attribute (line 314):
            
            # Call to LogFormatterSciNotation(...): (line 314)
            # Processing the call keyword arguments (line 314)
            kwargs_30587 = {}
            # Getting the type of 'ticker' (line 314)
            ticker_30585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 33), 'ticker', False)
            # Obtaining the member 'LogFormatterSciNotation' of a type (line 314)
            LogFormatterSciNotation_30586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 33), ticker_30585, 'LogFormatterSciNotation')
            # Calling LogFormatterSciNotation(args, kwargs) (line 314)
            LogFormatterSciNotation_call_result_30588 = invoke(stypy.reporting.localization.Localization(__file__, 314, 33), LogFormatterSciNotation_30586, *[], **kwargs_30587)
            
            # Getting the type of 'self' (line 314)
            self_30589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 16), 'self')
            # Setting the type of the member 'formatter' of a type (line 314)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 16), self_30589, 'formatter', LogFormatterSciNotation_call_result_30588)
            # SSA branch for the else part of an if statement (line 313)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to isinstance(...): (line 315)
            # Processing the call arguments (line 315)
            # Getting the type of 'self' (line 315)
            self_30591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 28), 'self', False)
            # Obtaining the member 'norm' of a type (line 315)
            norm_30592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 28), self_30591, 'norm')
            # Getting the type of 'colors' (line 315)
            colors_30593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 39), 'colors', False)
            # Obtaining the member 'SymLogNorm' of a type (line 315)
            SymLogNorm_30594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 39), colors_30593, 'SymLogNorm')
            # Processing the call keyword arguments (line 315)
            kwargs_30595 = {}
            # Getting the type of 'isinstance' (line 315)
            isinstance_30590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 17), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 315)
            isinstance_call_result_30596 = invoke(stypy.reporting.localization.Localization(__file__, 315, 17), isinstance_30590, *[norm_30592, SymLogNorm_30594], **kwargs_30595)
            
            # Testing the type of an if condition (line 315)
            if_condition_30597 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 315, 17), isinstance_call_result_30596)
            # Assigning a type to the variable 'if_condition_30597' (line 315)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 315, 17), 'if_condition_30597', if_condition_30597)
            # SSA begins for if statement (line 315)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 316):
            
            # Assigning a Call to a Attribute (line 316):
            
            # Call to LogFormatterSciNotation(...): (line 316)
            # Processing the call keyword arguments (line 316)
            # Getting the type of 'self' (line 317)
            self_30600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 50), 'self', False)
            # Obtaining the member 'norm' of a type (line 317)
            norm_30601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 50), self_30600, 'norm')
            # Obtaining the member 'linthresh' of a type (line 317)
            linthresh_30602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 50), norm_30601, 'linthresh')
            keyword_30603 = linthresh_30602
            kwargs_30604 = {'linthresh': keyword_30603}
            # Getting the type of 'ticker' (line 316)
            ticker_30598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 33), 'ticker', False)
            # Obtaining the member 'LogFormatterSciNotation' of a type (line 316)
            LogFormatterSciNotation_30599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 316, 33), ticker_30598, 'LogFormatterSciNotation')
            # Calling LogFormatterSciNotation(args, kwargs) (line 316)
            LogFormatterSciNotation_call_result_30605 = invoke(stypy.reporting.localization.Localization(__file__, 316, 33), LogFormatterSciNotation_30599, *[], **kwargs_30604)
            
            # Getting the type of 'self' (line 316)
            self_30606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 16), 'self')
            # Setting the type of the member 'formatter' of a type (line 316)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 316, 16), self_30606, 'formatter', LogFormatterSciNotation_call_result_30605)
            # SSA branch for the else part of an if statement (line 315)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Attribute (line 319):
            
            # Assigning a Call to a Attribute (line 319):
            
            # Call to ScalarFormatter(...): (line 319)
            # Processing the call keyword arguments (line 319)
            kwargs_30609 = {}
            # Getting the type of 'ticker' (line 319)
            ticker_30607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 33), 'ticker', False)
            # Obtaining the member 'ScalarFormatter' of a type (line 319)
            ScalarFormatter_30608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 33), ticker_30607, 'ScalarFormatter')
            # Calling ScalarFormatter(args, kwargs) (line 319)
            ScalarFormatter_call_result_30610 = invoke(stypy.reporting.localization.Localization(__file__, 319, 33), ScalarFormatter_30608, *[], **kwargs_30609)
            
            # Getting the type of 'self' (line 319)
            self_30611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 16), 'self')
            # Setting the type of the member 'formatter' of a type (line 319)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 16), self_30611, 'formatter', ScalarFormatter_call_result_30610)
            # SSA join for if statement (line 315)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 313)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_30576:
                # Runtime conditional SSA for else branch (line 312)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_30575) or more_types_in_union_30576):
            
            
            # Call to isinstance(...): (line 320)
            # Processing the call arguments (line 320)
            # Getting the type of 'format' (line 320)
            format_30613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 24), 'format', False)
            # Getting the type of 'six' (line 320)
            six_30614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 32), 'six', False)
            # Obtaining the member 'string_types' of a type (line 320)
            string_types_30615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 32), six_30614, 'string_types')
            # Processing the call keyword arguments (line 320)
            kwargs_30616 = {}
            # Getting the type of 'isinstance' (line 320)
            isinstance_30612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 13), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 320)
            isinstance_call_result_30617 = invoke(stypy.reporting.localization.Localization(__file__, 320, 13), isinstance_30612, *[format_30613, string_types_30615], **kwargs_30616)
            
            # Testing the type of an if condition (line 320)
            if_condition_30618 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 320, 13), isinstance_call_result_30617)
            # Assigning a type to the variable 'if_condition_30618' (line 320)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 320, 13), 'if_condition_30618', if_condition_30618)
            # SSA begins for if statement (line 320)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 321):
            
            # Assigning a Call to a Attribute (line 321):
            
            # Call to FormatStrFormatter(...): (line 321)
            # Processing the call arguments (line 321)
            # Getting the type of 'format' (line 321)
            format_30621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 55), 'format', False)
            # Processing the call keyword arguments (line 321)
            kwargs_30622 = {}
            # Getting the type of 'ticker' (line 321)
            ticker_30619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 29), 'ticker', False)
            # Obtaining the member 'FormatStrFormatter' of a type (line 321)
            FormatStrFormatter_30620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 29), ticker_30619, 'FormatStrFormatter')
            # Calling FormatStrFormatter(args, kwargs) (line 321)
            FormatStrFormatter_call_result_30623 = invoke(stypy.reporting.localization.Localization(__file__, 321, 29), FormatStrFormatter_30620, *[format_30621], **kwargs_30622)
            
            # Getting the type of 'self' (line 321)
            self_30624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 12), 'self')
            # Setting the type of the member 'formatter' of a type (line 321)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 12), self_30624, 'formatter', FormatStrFormatter_call_result_30623)
            # SSA branch for the else part of an if statement (line 320)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Attribute (line 323):
            
            # Assigning a Name to a Attribute (line 323):
            # Getting the type of 'format' (line 323)
            format_30625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 29), 'format')
            # Getting the type of 'self' (line 323)
            self_30626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 12), 'self')
            # Setting the type of the member 'formatter' of a type (line 323)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 12), self_30626, 'formatter', format_30625)
            # SSA join for if statement (line 320)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_30575 and more_types_in_union_30576):
                # SSA join for if statement (line 312)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to config_axis(...): (line 325)
        # Processing the call keyword arguments (line 325)
        kwargs_30629 = {}
        # Getting the type of 'self' (line 325)
        self_30627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 8), 'self', False)
        # Obtaining the member 'config_axis' of a type (line 325)
        config_axis_30628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 8), self_30627, 'config_axis')
        # Calling config_axis(args, kwargs) (line 325)
        config_axis_call_result_30630 = invoke(stypy.reporting.localization.Localization(__file__, 325, 8), config_axis_30628, *[], **kwargs_30629)
        
        
        # Call to draw_all(...): (line 326)
        # Processing the call keyword arguments (line 326)
        kwargs_30633 = {}
        # Getting the type of 'self' (line 326)
        self_30631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 8), 'self', False)
        # Obtaining the member 'draw_all' of a type (line 326)
        draw_all_30632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 8), self_30631, 'draw_all')
        # Calling draw_all(args, kwargs) (line 326)
        draw_all_call_result_30634 = invoke(stypy.reporting.localization.Localization(__file__, 326, 8), draw_all_30632, *[], **kwargs_30633)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _extend_lower(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_extend_lower'
        module_type_store = module_type_store.open_function_context('_extend_lower', 328, 4, False)
        # Assigning a type to the variable 'self' (line 329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._extend_lower.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._extend_lower.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._extend_lower.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._extend_lower.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._extend_lower')
        ColorbarBase._extend_lower.__dict__.__setitem__('stypy_param_names_list', [])
        ColorbarBase._extend_lower.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._extend_lower.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._extend_lower.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._extend_lower.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._extend_lower.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._extend_lower.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._extend_lower', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_extend_lower', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_extend_lower(...)' code ##################

        unicode_30635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 329, 8), 'unicode', u'Returns whether the lower limit is open ended.')
        
        # Getting the type of 'self' (line 330)
        self_30636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 15), 'self')
        # Obtaining the member 'extend' of a type (line 330)
        extend_30637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 330, 15), self_30636, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 330)
        tuple_30638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 330)
        # Adding element type (line 330)
        unicode_30639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, 31), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 330, 31), tuple_30638, unicode_30639)
        # Adding element type (line 330)
        unicode_30640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, 39), 'unicode', u'min')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 330, 31), tuple_30638, unicode_30640)
        
        # Applying the binary operator 'in' (line 330)
        result_contains_30641 = python_operator(stypy.reporting.localization.Localization(__file__, 330, 15), 'in', extend_30637, tuple_30638)
        
        # Assigning a type to the variable 'stypy_return_type' (line 330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 330, 8), 'stypy_return_type', result_contains_30641)
        
        # ################# End of '_extend_lower(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_extend_lower' in the type store
        # Getting the type of 'stypy_return_type' (line 328)
        stypy_return_type_30642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30642)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_extend_lower'
        return stypy_return_type_30642


    @norecursion
    def _extend_upper(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_extend_upper'
        module_type_store = module_type_store.open_function_context('_extend_upper', 332, 4, False)
        # Assigning a type to the variable 'self' (line 333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 333, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._extend_upper.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._extend_upper.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._extend_upper.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._extend_upper.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._extend_upper')
        ColorbarBase._extend_upper.__dict__.__setitem__('stypy_param_names_list', [])
        ColorbarBase._extend_upper.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._extend_upper.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._extend_upper.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._extend_upper.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._extend_upper.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._extend_upper.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._extend_upper', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_extend_upper', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_extend_upper(...)' code ##################

        unicode_30643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, 8), 'unicode', u'Returns whether the uper limit is open ended.')
        
        # Getting the type of 'self' (line 334)
        self_30644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 15), 'self')
        # Obtaining the member 'extend' of a type (line 334)
        extend_30645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 334, 15), self_30644, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 334)
        tuple_30646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 334)
        # Adding element type (line 334)
        unicode_30647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, 31), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 334, 31), tuple_30646, unicode_30647)
        # Adding element type (line 334)
        unicode_30648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, 39), 'unicode', u'max')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 334, 31), tuple_30646, unicode_30648)
        
        # Applying the binary operator 'in' (line 334)
        result_contains_30649 = python_operator(stypy.reporting.localization.Localization(__file__, 334, 15), 'in', extend_30645, tuple_30646)
        
        # Assigning a type to the variable 'stypy_return_type' (line 334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 8), 'stypy_return_type', result_contains_30649)
        
        # ################# End of '_extend_upper(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_extend_upper' in the type store
        # Getting the type of 'stypy_return_type' (line 332)
        stypy_return_type_30650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30650)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_extend_upper'
        return stypy_return_type_30650


    @norecursion
    def _patch_ax(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_patch_ax'
        module_type_store = module_type_store.open_function_context('_patch_ax', 336, 4, False)
        # Assigning a type to the variable 'self' (line 337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 337, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._patch_ax.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._patch_ax.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._patch_ax.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._patch_ax.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._patch_ax')
        ColorbarBase._patch_ax.__dict__.__setitem__('stypy_param_names_list', [])
        ColorbarBase._patch_ax.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._patch_ax.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._patch_ax.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._patch_ax.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._patch_ax.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._patch_ax.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._patch_ax', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_patch_ax', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_patch_ax(...)' code ##################

        
        # Assigning a Name to a Attribute (line 339):
        
        # Assigning a Name to a Attribute (line 339):
        # Getting the type of '_set_ticks_on_axis_warn' (line 339)
        _set_ticks_on_axis_warn_30651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 29), '_set_ticks_on_axis_warn')
        # Getting the type of 'self' (line 339)
        self_30652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 8), 'self')
        # Obtaining the member 'ax' of a type (line 339)
        ax_30653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 8), self_30652, 'ax')
        # Setting the type of the member 'set_xticks' of a type (line 339)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 8), ax_30653, 'set_xticks', _set_ticks_on_axis_warn_30651)
        
        # Assigning a Name to a Attribute (line 340):
        
        # Assigning a Name to a Attribute (line 340):
        # Getting the type of '_set_ticks_on_axis_warn' (line 340)
        _set_ticks_on_axis_warn_30654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 29), '_set_ticks_on_axis_warn')
        # Getting the type of 'self' (line 340)
        self_30655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 8), 'self')
        # Obtaining the member 'ax' of a type (line 340)
        ax_30656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 8), self_30655, 'ax')
        # Setting the type of the member 'set_yticks' of a type (line 340)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 8), ax_30656, 'set_yticks', _set_ticks_on_axis_warn_30654)
        
        # ################# End of '_patch_ax(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_patch_ax' in the type store
        # Getting the type of 'stypy_return_type' (line 336)
        stypy_return_type_30657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30657)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_patch_ax'
        return stypy_return_type_30657


    @norecursion
    def draw_all(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_all'
        module_type_store = module_type_store.open_function_context('draw_all', 342, 4, False)
        # Assigning a type to the variable 'self' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase.draw_all.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase.draw_all.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase.draw_all.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase.draw_all.__dict__.__setitem__('stypy_function_name', 'ColorbarBase.draw_all')
        ColorbarBase.draw_all.__dict__.__setitem__('stypy_param_names_list', [])
        ColorbarBase.draw_all.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase.draw_all.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase.draw_all.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase.draw_all.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase.draw_all.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase.draw_all.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase.draw_all', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_all', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_all(...)' code ##################

        unicode_30658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 346, (-1)), 'unicode', u'\n        Calculate any free parameters based on the current cmap and norm,\n        and do all the drawing.\n        ')
        
        # Call to _process_values(...): (line 348)
        # Processing the call keyword arguments (line 348)
        kwargs_30661 = {}
        # Getting the type of 'self' (line 348)
        self_30659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 8), 'self', False)
        # Obtaining the member '_process_values' of a type (line 348)
        _process_values_30660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 8), self_30659, '_process_values')
        # Calling _process_values(args, kwargs) (line 348)
        _process_values_call_result_30662 = invoke(stypy.reporting.localization.Localization(__file__, 348, 8), _process_values_30660, *[], **kwargs_30661)
        
        
        # Call to _find_range(...): (line 349)
        # Processing the call keyword arguments (line 349)
        kwargs_30665 = {}
        # Getting the type of 'self' (line 349)
        self_30663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'self', False)
        # Obtaining the member '_find_range' of a type (line 349)
        _find_range_30664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 8), self_30663, '_find_range')
        # Calling _find_range(args, kwargs) (line 349)
        _find_range_call_result_30666 = invoke(stypy.reporting.localization.Localization(__file__, 349, 8), _find_range_30664, *[], **kwargs_30665)
        
        
        # Assigning a Call to a Tuple (line 350):
        
        # Assigning a Call to a Name:
        
        # Call to _mesh(...): (line 350)
        # Processing the call keyword arguments (line 350)
        kwargs_30669 = {}
        # Getting the type of 'self' (line 350)
        self_30667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 15), 'self', False)
        # Obtaining the member '_mesh' of a type (line 350)
        _mesh_30668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 15), self_30667, '_mesh')
        # Calling _mesh(args, kwargs) (line 350)
        _mesh_call_result_30670 = invoke(stypy.reporting.localization.Localization(__file__, 350, 15), _mesh_30668, *[], **kwargs_30669)
        
        # Assigning a type to the variable 'call_assignment_30363' (line 350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 350, 8), 'call_assignment_30363', _mesh_call_result_30670)
        
        # Assigning a Call to a Name (line 350):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_30673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 8), 'int')
        # Processing the call keyword arguments
        kwargs_30674 = {}
        # Getting the type of 'call_assignment_30363' (line 350)
        call_assignment_30363_30671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 8), 'call_assignment_30363', False)
        # Obtaining the member '__getitem__' of a type (line 350)
        getitem___30672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 8), call_assignment_30363_30671, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_30675 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___30672, *[int_30673], **kwargs_30674)
        
        # Assigning a type to the variable 'call_assignment_30364' (line 350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 350, 8), 'call_assignment_30364', getitem___call_result_30675)
        
        # Assigning a Name to a Name (line 350):
        # Getting the type of 'call_assignment_30364' (line 350)
        call_assignment_30364_30676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 8), 'call_assignment_30364')
        # Assigning a type to the variable 'X' (line 350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 350, 8), 'X', call_assignment_30364_30676)
        
        # Assigning a Call to a Name (line 350):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_30679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 8), 'int')
        # Processing the call keyword arguments
        kwargs_30680 = {}
        # Getting the type of 'call_assignment_30363' (line 350)
        call_assignment_30363_30677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 8), 'call_assignment_30363', False)
        # Obtaining the member '__getitem__' of a type (line 350)
        getitem___30678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 8), call_assignment_30363_30677, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_30681 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___30678, *[int_30679], **kwargs_30680)
        
        # Assigning a type to the variable 'call_assignment_30365' (line 350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 350, 8), 'call_assignment_30365', getitem___call_result_30681)
        
        # Assigning a Name to a Name (line 350):
        # Getting the type of 'call_assignment_30365' (line 350)
        call_assignment_30365_30682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 8), 'call_assignment_30365')
        # Assigning a type to the variable 'Y' (line 350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 350, 11), 'Y', call_assignment_30365_30682)
        
        # Assigning a Subscript to a Name (line 351):
        
        # Assigning a Subscript to a Name (line 351):
        
        # Obtaining the type of the subscript
        slice_30683 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 351, 12), None, None, None)
        # Getting the type of 'np' (line 351)
        np_30684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 28), 'np')
        # Obtaining the member 'newaxis' of a type (line 351)
        newaxis_30685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 28), np_30684, 'newaxis')
        # Getting the type of 'self' (line 351)
        self_30686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 12), 'self')
        # Obtaining the member '_values' of a type (line 351)
        _values_30687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 12), self_30686, '_values')
        # Obtaining the member '__getitem__' of a type (line 351)
        getitem___30688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 12), _values_30687, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 351)
        subscript_call_result_30689 = invoke(stypy.reporting.localization.Localization(__file__, 351, 12), getitem___30688, (slice_30683, newaxis_30685))
        
        # Assigning a type to the variable 'C' (line 351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 351, 8), 'C', subscript_call_result_30689)
        
        # Call to _config_axes(...): (line 352)
        # Processing the call arguments (line 352)
        # Getting the type of 'X' (line 352)
        X_30692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 26), 'X', False)
        # Getting the type of 'Y' (line 352)
        Y_30693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 29), 'Y', False)
        # Processing the call keyword arguments (line 352)
        kwargs_30694 = {}
        # Getting the type of 'self' (line 352)
        self_30690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'self', False)
        # Obtaining the member '_config_axes' of a type (line 352)
        _config_axes_30691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 8), self_30690, '_config_axes')
        # Calling _config_axes(args, kwargs) (line 352)
        _config_axes_call_result_30695 = invoke(stypy.reporting.localization.Localization(__file__, 352, 8), _config_axes_30691, *[X_30692, Y_30693], **kwargs_30694)
        
        
        # Getting the type of 'self' (line 353)
        self_30696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 11), 'self')
        # Obtaining the member 'filled' of a type (line 353)
        filled_30697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 353, 11), self_30696, 'filled')
        # Testing the type of an if condition (line 353)
        if_condition_30698 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 353, 8), filled_30697)
        # Assigning a type to the variable 'if_condition_30698' (line 353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 353, 8), 'if_condition_30698', if_condition_30698)
        # SSA begins for if statement (line 353)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _add_solids(...): (line 354)
        # Processing the call arguments (line 354)
        # Getting the type of 'X' (line 354)
        X_30701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 29), 'X', False)
        # Getting the type of 'Y' (line 354)
        Y_30702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 32), 'Y', False)
        # Getting the type of 'C' (line 354)
        C_30703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 35), 'C', False)
        # Processing the call keyword arguments (line 354)
        kwargs_30704 = {}
        # Getting the type of 'self' (line 354)
        self_30699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 12), 'self', False)
        # Obtaining the member '_add_solids' of a type (line 354)
        _add_solids_30700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 354, 12), self_30699, '_add_solids')
        # Calling _add_solids(args, kwargs) (line 354)
        _add_solids_call_result_30705 = invoke(stypy.reporting.localization.Localization(__file__, 354, 12), _add_solids_30700, *[X_30701, Y_30702, C_30703], **kwargs_30704)
        
        # SSA join for if statement (line 353)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'draw_all(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_all' in the type store
        # Getting the type of 'stypy_return_type' (line 342)
        stypy_return_type_30706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30706)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_all'
        return stypy_return_type_30706


    @norecursion
    def config_axis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'config_axis'
        module_type_store = module_type_store.open_function_context('config_axis', 356, 4, False)
        # Assigning a type to the variable 'self' (line 357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 357, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase.config_axis.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase.config_axis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase.config_axis.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase.config_axis.__dict__.__setitem__('stypy_function_name', 'ColorbarBase.config_axis')
        ColorbarBase.config_axis.__dict__.__setitem__('stypy_param_names_list', [])
        ColorbarBase.config_axis.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase.config_axis.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase.config_axis.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase.config_axis.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase.config_axis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase.config_axis.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase.config_axis', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'config_axis', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'config_axis(...)' code ##################

        
        # Assigning a Attribute to a Name (line 357):
        
        # Assigning a Attribute to a Name (line 357):
        # Getting the type of 'self' (line 357)
        self_30707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 13), 'self')
        # Obtaining the member 'ax' of a type (line 357)
        ax_30708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 357, 13), self_30707, 'ax')
        # Assigning a type to the variable 'ax' (line 357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 357, 8), 'ax', ax_30708)
        
        
        # Getting the type of 'self' (line 358)
        self_30709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 11), 'self')
        # Obtaining the member 'orientation' of a type (line 358)
        orientation_30710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 358, 11), self_30709, 'orientation')
        unicode_30711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 31), 'unicode', u'vertical')
        # Applying the binary operator '==' (line 358)
        result_eq_30712 = python_operator(stypy.reporting.localization.Localization(__file__, 358, 11), '==', orientation_30710, unicode_30711)
        
        # Testing the type of an if condition (line 358)
        if_condition_30713 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 358, 8), result_eq_30712)
        # Assigning a type to the variable 'if_condition_30713' (line 358)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 358, 8), 'if_condition_30713', if_condition_30713)
        # SSA begins for if statement (line 358)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_ticks(...): (line 359)
        # Processing the call arguments (line 359)
        
        # Obtaining an instance of the builtin type 'list' (line 359)
        list_30717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 359)
        
        # Processing the call keyword arguments (line 359)
        kwargs_30718 = {}
        # Getting the type of 'ax' (line 359)
        ax_30714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'ax', False)
        # Obtaining the member 'xaxis' of a type (line 359)
        xaxis_30715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 12), ax_30714, 'xaxis')
        # Obtaining the member 'set_ticks' of a type (line 359)
        set_ticks_30716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 12), xaxis_30715, 'set_ticks')
        # Calling set_ticks(args, kwargs) (line 359)
        set_ticks_call_result_30719 = invoke(stypy.reporting.localization.Localization(__file__, 359, 12), set_ticks_30716, *[list_30717], **kwargs_30718)
        
        
        # Call to set_label_position(...): (line 361)
        # Processing the call arguments (line 361)
        # Getting the type of 'self' (line 361)
        self_30723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 40), 'self', False)
        # Obtaining the member 'ticklocation' of a type (line 361)
        ticklocation_30724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 40), self_30723, 'ticklocation')
        # Processing the call keyword arguments (line 361)
        kwargs_30725 = {}
        # Getting the type of 'ax' (line 361)
        ax_30720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'ax', False)
        # Obtaining the member 'yaxis' of a type (line 361)
        yaxis_30721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 12), ax_30720, 'yaxis')
        # Obtaining the member 'set_label_position' of a type (line 361)
        set_label_position_30722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 12), yaxis_30721, 'set_label_position')
        # Calling set_label_position(args, kwargs) (line 361)
        set_label_position_call_result_30726 = invoke(stypy.reporting.localization.Localization(__file__, 361, 12), set_label_position_30722, *[ticklocation_30724], **kwargs_30725)
        
        
        # Call to set_ticks_position(...): (line 362)
        # Processing the call arguments (line 362)
        # Getting the type of 'self' (line 362)
        self_30730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 40), 'self', False)
        # Obtaining the member 'ticklocation' of a type (line 362)
        ticklocation_30731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 40), self_30730, 'ticklocation')
        # Processing the call keyword arguments (line 362)
        kwargs_30732 = {}
        # Getting the type of 'ax' (line 362)
        ax_30727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 12), 'ax', False)
        # Obtaining the member 'yaxis' of a type (line 362)
        yaxis_30728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 12), ax_30727, 'yaxis')
        # Obtaining the member 'set_ticks_position' of a type (line 362)
        set_ticks_position_30729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 12), yaxis_30728, 'set_ticks_position')
        # Calling set_ticks_position(args, kwargs) (line 362)
        set_ticks_position_call_result_30733 = invoke(stypy.reporting.localization.Localization(__file__, 362, 12), set_ticks_position_30729, *[ticklocation_30731], **kwargs_30732)
        
        # SSA branch for the else part of an if statement (line 358)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_ticks(...): (line 364)
        # Processing the call arguments (line 364)
        
        # Obtaining an instance of the builtin type 'list' (line 364)
        list_30737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 364, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 364)
        
        # Processing the call keyword arguments (line 364)
        kwargs_30738 = {}
        # Getting the type of 'ax' (line 364)
        ax_30734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 12), 'ax', False)
        # Obtaining the member 'yaxis' of a type (line 364)
        yaxis_30735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 12), ax_30734, 'yaxis')
        # Obtaining the member 'set_ticks' of a type (line 364)
        set_ticks_30736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 12), yaxis_30735, 'set_ticks')
        # Calling set_ticks(args, kwargs) (line 364)
        set_ticks_call_result_30739 = invoke(stypy.reporting.localization.Localization(__file__, 364, 12), set_ticks_30736, *[list_30737], **kwargs_30738)
        
        
        # Call to set_label_position(...): (line 366)
        # Processing the call arguments (line 366)
        # Getting the type of 'self' (line 366)
        self_30743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 40), 'self', False)
        # Obtaining the member 'ticklocation' of a type (line 366)
        ticklocation_30744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 40), self_30743, 'ticklocation')
        # Processing the call keyword arguments (line 366)
        kwargs_30745 = {}
        # Getting the type of 'ax' (line 366)
        ax_30740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 12), 'ax', False)
        # Obtaining the member 'xaxis' of a type (line 366)
        xaxis_30741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 12), ax_30740, 'xaxis')
        # Obtaining the member 'set_label_position' of a type (line 366)
        set_label_position_30742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 12), xaxis_30741, 'set_label_position')
        # Calling set_label_position(args, kwargs) (line 366)
        set_label_position_call_result_30746 = invoke(stypy.reporting.localization.Localization(__file__, 366, 12), set_label_position_30742, *[ticklocation_30744], **kwargs_30745)
        
        
        # Call to set_ticks_position(...): (line 367)
        # Processing the call arguments (line 367)
        # Getting the type of 'self' (line 367)
        self_30750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 40), 'self', False)
        # Obtaining the member 'ticklocation' of a type (line 367)
        ticklocation_30751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 40), self_30750, 'ticklocation')
        # Processing the call keyword arguments (line 367)
        kwargs_30752 = {}
        # Getting the type of 'ax' (line 367)
        ax_30747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 12), 'ax', False)
        # Obtaining the member 'xaxis' of a type (line 367)
        xaxis_30748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 12), ax_30747, 'xaxis')
        # Obtaining the member 'set_ticks_position' of a type (line 367)
        set_ticks_position_30749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 12), xaxis_30748, 'set_ticks_position')
        # Calling set_ticks_position(args, kwargs) (line 367)
        set_ticks_position_call_result_30753 = invoke(stypy.reporting.localization.Localization(__file__, 367, 12), set_ticks_position_30749, *[ticklocation_30751], **kwargs_30752)
        
        # SSA join for if statement (line 358)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _set_label(...): (line 369)
        # Processing the call keyword arguments (line 369)
        kwargs_30756 = {}
        # Getting the type of 'self' (line 369)
        self_30754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 8), 'self', False)
        # Obtaining the member '_set_label' of a type (line 369)
        _set_label_30755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 8), self_30754, '_set_label')
        # Calling _set_label(args, kwargs) (line 369)
        _set_label_call_result_30757 = invoke(stypy.reporting.localization.Localization(__file__, 369, 8), _set_label_30755, *[], **kwargs_30756)
        
        
        # ################# End of 'config_axis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'config_axis' in the type store
        # Getting the type of 'stypy_return_type' (line 356)
        stypy_return_type_30758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30758)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'config_axis'
        return stypy_return_type_30758


    @norecursion
    def update_ticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_ticks'
        module_type_store = module_type_store.open_function_context('update_ticks', 371, 4, False)
        # Assigning a type to the variable 'self' (line 372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase.update_ticks.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase.update_ticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase.update_ticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase.update_ticks.__dict__.__setitem__('stypy_function_name', 'ColorbarBase.update_ticks')
        ColorbarBase.update_ticks.__dict__.__setitem__('stypy_param_names_list', [])
        ColorbarBase.update_ticks.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase.update_ticks.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase.update_ticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase.update_ticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase.update_ticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase.update_ticks.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase.update_ticks', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_ticks', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_ticks(...)' code ##################

        unicode_30759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, (-1)), 'unicode', u'\n        Force the update of the ticks and ticklabels. This must be\n        called whenever the tick locator and/or tick formatter changes.\n        ')
        
        # Assigning a Attribute to a Name (line 376):
        
        # Assigning a Attribute to a Name (line 376):
        # Getting the type of 'self' (line 376)
        self_30760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 13), 'self')
        # Obtaining the member 'ax' of a type (line 376)
        ax_30761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 13), self_30760, 'ax')
        # Assigning a type to the variable 'ax' (line 376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 8), 'ax', ax_30761)
        
        # Assigning a Call to a Tuple (line 377):
        
        # Assigning a Call to a Name:
        
        # Call to _ticker(...): (line 377)
        # Processing the call keyword arguments (line 377)
        kwargs_30764 = {}
        # Getting the type of 'self' (line 377)
        self_30762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 43), 'self', False)
        # Obtaining the member '_ticker' of a type (line 377)
        _ticker_30763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 43), self_30762, '_ticker')
        # Calling _ticker(args, kwargs) (line 377)
        _ticker_call_result_30765 = invoke(stypy.reporting.localization.Localization(__file__, 377, 43), _ticker_30763, *[], **kwargs_30764)
        
        # Assigning a type to the variable 'call_assignment_30366' (line 377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'call_assignment_30366', _ticker_call_result_30765)
        
        # Assigning a Call to a Name (line 377):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_30768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 377, 8), 'int')
        # Processing the call keyword arguments
        kwargs_30769 = {}
        # Getting the type of 'call_assignment_30366' (line 377)
        call_assignment_30366_30766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'call_assignment_30366', False)
        # Obtaining the member '__getitem__' of a type (line 377)
        getitem___30767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 8), call_assignment_30366_30766, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_30770 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___30767, *[int_30768], **kwargs_30769)
        
        # Assigning a type to the variable 'call_assignment_30367' (line 377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'call_assignment_30367', getitem___call_result_30770)
        
        # Assigning a Name to a Name (line 377):
        # Getting the type of 'call_assignment_30367' (line 377)
        call_assignment_30367_30771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'call_assignment_30367')
        # Assigning a type to the variable 'ticks' (line 377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'ticks', call_assignment_30367_30771)
        
        # Assigning a Call to a Name (line 377):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_30774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 377, 8), 'int')
        # Processing the call keyword arguments
        kwargs_30775 = {}
        # Getting the type of 'call_assignment_30366' (line 377)
        call_assignment_30366_30772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'call_assignment_30366', False)
        # Obtaining the member '__getitem__' of a type (line 377)
        getitem___30773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 8), call_assignment_30366_30772, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_30776 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___30773, *[int_30774], **kwargs_30775)
        
        # Assigning a type to the variable 'call_assignment_30368' (line 377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'call_assignment_30368', getitem___call_result_30776)
        
        # Assigning a Name to a Name (line 377):
        # Getting the type of 'call_assignment_30368' (line 377)
        call_assignment_30368_30777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'call_assignment_30368')
        # Assigning a type to the variable 'ticklabels' (line 377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 15), 'ticklabels', call_assignment_30368_30777)
        
        # Assigning a Call to a Name (line 377):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_30780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 377, 8), 'int')
        # Processing the call keyword arguments
        kwargs_30781 = {}
        # Getting the type of 'call_assignment_30366' (line 377)
        call_assignment_30366_30778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'call_assignment_30366', False)
        # Obtaining the member '__getitem__' of a type (line 377)
        getitem___30779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 8), call_assignment_30366_30778, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_30782 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___30779, *[int_30780], **kwargs_30781)
        
        # Assigning a type to the variable 'call_assignment_30369' (line 377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'call_assignment_30369', getitem___call_result_30782)
        
        # Assigning a Name to a Name (line 377):
        # Getting the type of 'call_assignment_30369' (line 377)
        call_assignment_30369_30783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'call_assignment_30369')
        # Assigning a type to the variable 'offset_string' (line 377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 27), 'offset_string', call_assignment_30369_30783)
        
        
        # Getting the type of 'self' (line 378)
        self_30784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 11), 'self')
        # Obtaining the member 'orientation' of a type (line 378)
        orientation_30785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 378, 11), self_30784, 'orientation')
        unicode_30786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 378, 31), 'unicode', u'vertical')
        # Applying the binary operator '==' (line 378)
        result_eq_30787 = python_operator(stypy.reporting.localization.Localization(__file__, 378, 11), '==', orientation_30785, unicode_30786)
        
        # Testing the type of an if condition (line 378)
        if_condition_30788 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 378, 8), result_eq_30787)
        # Assigning a type to the variable 'if_condition_30788' (line 378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 8), 'if_condition_30788', if_condition_30788)
        # SSA begins for if statement (line 378)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_ticks(...): (line 379)
        # Processing the call arguments (line 379)
        # Getting the type of 'ticks' (line 379)
        ticks_30792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 31), 'ticks', False)
        # Processing the call keyword arguments (line 379)
        kwargs_30793 = {}
        # Getting the type of 'ax' (line 379)
        ax_30789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 12), 'ax', False)
        # Obtaining the member 'yaxis' of a type (line 379)
        yaxis_30790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 12), ax_30789, 'yaxis')
        # Obtaining the member 'set_ticks' of a type (line 379)
        set_ticks_30791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 12), yaxis_30790, 'set_ticks')
        # Calling set_ticks(args, kwargs) (line 379)
        set_ticks_call_result_30794 = invoke(stypy.reporting.localization.Localization(__file__, 379, 12), set_ticks_30791, *[ticks_30792], **kwargs_30793)
        
        
        # Call to set_yticklabels(...): (line 380)
        # Processing the call arguments (line 380)
        # Getting the type of 'ticklabels' (line 380)
        ticklabels_30797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 31), 'ticklabels', False)
        # Processing the call keyword arguments (line 380)
        kwargs_30798 = {}
        # Getting the type of 'ax' (line 380)
        ax_30795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 12), 'ax', False)
        # Obtaining the member 'set_yticklabels' of a type (line 380)
        set_yticklabels_30796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 380, 12), ax_30795, 'set_yticklabels')
        # Calling set_yticklabels(args, kwargs) (line 380)
        set_yticklabels_call_result_30799 = invoke(stypy.reporting.localization.Localization(__file__, 380, 12), set_yticklabels_30796, *[ticklabels_30797], **kwargs_30798)
        
        
        # Call to set_offset_string(...): (line 381)
        # Processing the call arguments (line 381)
        # Getting the type of 'offset_string' (line 381)
        offset_string_30806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 61), 'offset_string', False)
        # Processing the call keyword arguments (line 381)
        kwargs_30807 = {}
        
        # Call to get_major_formatter(...): (line 381)
        # Processing the call keyword arguments (line 381)
        kwargs_30803 = {}
        # Getting the type of 'ax' (line 381)
        ax_30800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 12), 'ax', False)
        # Obtaining the member 'yaxis' of a type (line 381)
        yaxis_30801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 381, 12), ax_30800, 'yaxis')
        # Obtaining the member 'get_major_formatter' of a type (line 381)
        get_major_formatter_30802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 381, 12), yaxis_30801, 'get_major_formatter')
        # Calling get_major_formatter(args, kwargs) (line 381)
        get_major_formatter_call_result_30804 = invoke(stypy.reporting.localization.Localization(__file__, 381, 12), get_major_formatter_30802, *[], **kwargs_30803)
        
        # Obtaining the member 'set_offset_string' of a type (line 381)
        set_offset_string_30805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 381, 12), get_major_formatter_call_result_30804, 'set_offset_string')
        # Calling set_offset_string(args, kwargs) (line 381)
        set_offset_string_call_result_30808 = invoke(stypy.reporting.localization.Localization(__file__, 381, 12), set_offset_string_30805, *[offset_string_30806], **kwargs_30807)
        
        # SSA branch for the else part of an if statement (line 378)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_ticks(...): (line 384)
        # Processing the call arguments (line 384)
        # Getting the type of 'ticks' (line 384)
        ticks_30812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 31), 'ticks', False)
        # Processing the call keyword arguments (line 384)
        kwargs_30813 = {}
        # Getting the type of 'ax' (line 384)
        ax_30809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 12), 'ax', False)
        # Obtaining the member 'xaxis' of a type (line 384)
        xaxis_30810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 12), ax_30809, 'xaxis')
        # Obtaining the member 'set_ticks' of a type (line 384)
        set_ticks_30811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 12), xaxis_30810, 'set_ticks')
        # Calling set_ticks(args, kwargs) (line 384)
        set_ticks_call_result_30814 = invoke(stypy.reporting.localization.Localization(__file__, 384, 12), set_ticks_30811, *[ticks_30812], **kwargs_30813)
        
        
        # Call to set_xticklabels(...): (line 385)
        # Processing the call arguments (line 385)
        # Getting the type of 'ticklabels' (line 385)
        ticklabels_30817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 31), 'ticklabels', False)
        # Processing the call keyword arguments (line 385)
        kwargs_30818 = {}
        # Getting the type of 'ax' (line 385)
        ax_30815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 12), 'ax', False)
        # Obtaining the member 'set_xticklabels' of a type (line 385)
        set_xticklabels_30816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 12), ax_30815, 'set_xticklabels')
        # Calling set_xticklabels(args, kwargs) (line 385)
        set_xticklabels_call_result_30819 = invoke(stypy.reporting.localization.Localization(__file__, 385, 12), set_xticklabels_30816, *[ticklabels_30817], **kwargs_30818)
        
        
        # Call to set_offset_string(...): (line 386)
        # Processing the call arguments (line 386)
        # Getting the type of 'offset_string' (line 386)
        offset_string_30826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 61), 'offset_string', False)
        # Processing the call keyword arguments (line 386)
        kwargs_30827 = {}
        
        # Call to get_major_formatter(...): (line 386)
        # Processing the call keyword arguments (line 386)
        kwargs_30823 = {}
        # Getting the type of 'ax' (line 386)
        ax_30820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'ax', False)
        # Obtaining the member 'xaxis' of a type (line 386)
        xaxis_30821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 12), ax_30820, 'xaxis')
        # Obtaining the member 'get_major_formatter' of a type (line 386)
        get_major_formatter_30822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 12), xaxis_30821, 'get_major_formatter')
        # Calling get_major_formatter(args, kwargs) (line 386)
        get_major_formatter_call_result_30824 = invoke(stypy.reporting.localization.Localization(__file__, 386, 12), get_major_formatter_30822, *[], **kwargs_30823)
        
        # Obtaining the member 'set_offset_string' of a type (line 386)
        set_offset_string_30825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 12), get_major_formatter_call_result_30824, 'set_offset_string')
        # Calling set_offset_string(args, kwargs) (line 386)
        set_offset_string_call_result_30828 = invoke(stypy.reporting.localization.Localization(__file__, 386, 12), set_offset_string_30825, *[offset_string_30826], **kwargs_30827)
        
        # SSA join for if statement (line 378)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'update_ticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_ticks' in the type store
        # Getting the type of 'stypy_return_type' (line 371)
        stypy_return_type_30829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30829)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_ticks'
        return stypy_return_type_30829


    @norecursion
    def set_ticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 388)
        True_30830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 44), 'True')
        defaults = [True_30830]
        # Create a new context for function 'set_ticks'
        module_type_store = module_type_store.open_function_context('set_ticks', 388, 4, False)
        # Assigning a type to the variable 'self' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase.set_ticks.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase.set_ticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase.set_ticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase.set_ticks.__dict__.__setitem__('stypy_function_name', 'ColorbarBase.set_ticks')
        ColorbarBase.set_ticks.__dict__.__setitem__('stypy_param_names_list', ['ticks', 'update_ticks'])
        ColorbarBase.set_ticks.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase.set_ticks.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase.set_ticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase.set_ticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase.set_ticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase.set_ticks.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase.set_ticks', ['ticks', 'update_ticks'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ticks', localization, ['ticks', 'update_ticks'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ticks(...)' code ##################

        unicode_30831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, (-1)), 'unicode', u'\n        Set tick locations.\n\n        Parameters\n        ----------\n        ticks : {None, sequence, :class:`~matplotlib.ticker.Locator` instance}\n            If None, a default Locator will be used.\n\n        update_ticks : {True, False}, optional\n            If True, tick locations are updated immediately.  If False,\n            use :meth:`update_ticks` to manually update the ticks.\n\n        ')
        
        
        # Call to iterable(...): (line 402)
        # Processing the call arguments (line 402)
        # Getting the type of 'ticks' (line 402)
        ticks_30834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 26), 'ticks', False)
        # Processing the call keyword arguments (line 402)
        kwargs_30835 = {}
        # Getting the type of 'cbook' (line 402)
        cbook_30832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 11), 'cbook', False)
        # Obtaining the member 'iterable' of a type (line 402)
        iterable_30833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 11), cbook_30832, 'iterable')
        # Calling iterable(args, kwargs) (line 402)
        iterable_call_result_30836 = invoke(stypy.reporting.localization.Localization(__file__, 402, 11), iterable_30833, *[ticks_30834], **kwargs_30835)
        
        # Testing the type of an if condition (line 402)
        if_condition_30837 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 402, 8), iterable_call_result_30836)
        # Assigning a type to the variable 'if_condition_30837' (line 402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 8), 'if_condition_30837', if_condition_30837)
        # SSA begins for if statement (line 402)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 403):
        
        # Assigning a Call to a Attribute (line 403):
        
        # Call to FixedLocator(...): (line 403)
        # Processing the call arguments (line 403)
        # Getting the type of 'ticks' (line 403)
        ticks_30840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 47), 'ticks', False)
        # Processing the call keyword arguments (line 403)
        
        # Call to len(...): (line 403)
        # Processing the call arguments (line 403)
        # Getting the type of 'ticks' (line 403)
        ticks_30842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 64), 'ticks', False)
        # Processing the call keyword arguments (line 403)
        kwargs_30843 = {}
        # Getting the type of 'len' (line 403)
        len_30841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 60), 'len', False)
        # Calling len(args, kwargs) (line 403)
        len_call_result_30844 = invoke(stypy.reporting.localization.Localization(__file__, 403, 60), len_30841, *[ticks_30842], **kwargs_30843)
        
        keyword_30845 = len_call_result_30844
        kwargs_30846 = {'nbins': keyword_30845}
        # Getting the type of 'ticker' (line 403)
        ticker_30838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 27), 'ticker', False)
        # Obtaining the member 'FixedLocator' of a type (line 403)
        FixedLocator_30839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 27), ticker_30838, 'FixedLocator')
        # Calling FixedLocator(args, kwargs) (line 403)
        FixedLocator_call_result_30847 = invoke(stypy.reporting.localization.Localization(__file__, 403, 27), FixedLocator_30839, *[ticks_30840], **kwargs_30846)
        
        # Getting the type of 'self' (line 403)
        self_30848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 12), 'self')
        # Setting the type of the member 'locator' of a type (line 403)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 12), self_30848, 'locator', FixedLocator_call_result_30847)
        # SSA branch for the else part of an if statement (line 402)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 405):
        
        # Assigning a Name to a Attribute (line 405):
        # Getting the type of 'ticks' (line 405)
        ticks_30849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 27), 'ticks')
        # Getting the type of 'self' (line 405)
        self_30850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 12), 'self')
        # Setting the type of the member 'locator' of a type (line 405)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 405, 12), self_30850, 'locator', ticks_30849)
        # SSA join for if statement (line 402)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'update_ticks' (line 407)
        update_ticks_30851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 11), 'update_ticks')
        # Testing the type of an if condition (line 407)
        if_condition_30852 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 407, 8), update_ticks_30851)
        # Assigning a type to the variable 'if_condition_30852' (line 407)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 407, 8), 'if_condition_30852', if_condition_30852)
        # SSA begins for if statement (line 407)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update_ticks(...): (line 408)
        # Processing the call keyword arguments (line 408)
        kwargs_30855 = {}
        # Getting the type of 'self' (line 408)
        self_30853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 12), 'self', False)
        # Obtaining the member 'update_ticks' of a type (line 408)
        update_ticks_30854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 12), self_30853, 'update_ticks')
        # Calling update_ticks(args, kwargs) (line 408)
        update_ticks_call_result_30856 = invoke(stypy.reporting.localization.Localization(__file__, 408, 12), update_ticks_30854, *[], **kwargs_30855)
        
        # SSA join for if statement (line 407)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 409):
        
        # Assigning a Name to a Attribute (line 409):
        # Getting the type of 'True' (line 409)
        True_30857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 21), 'True')
        # Getting the type of 'self' (line 409)
        self_30858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 409)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 409, 8), self_30858, 'stale', True_30857)
        
        # ################# End of 'set_ticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ticks' in the type store
        # Getting the type of 'stypy_return_type' (line 388)
        stypy_return_type_30859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30859)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ticks'
        return stypy_return_type_30859


    @norecursion
    def get_ticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 411)
        False_30860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 30), 'False')
        defaults = [False_30860]
        # Create a new context for function 'get_ticks'
        module_type_store = module_type_store.open_function_context('get_ticks', 411, 4, False)
        # Assigning a type to the variable 'self' (line 412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase.get_ticks.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase.get_ticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase.get_ticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase.get_ticks.__dict__.__setitem__('stypy_function_name', 'ColorbarBase.get_ticks')
        ColorbarBase.get_ticks.__dict__.__setitem__('stypy_param_names_list', ['minor'])
        ColorbarBase.get_ticks.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase.get_ticks.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase.get_ticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase.get_ticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase.get_ticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase.get_ticks.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase.get_ticks', ['minor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ticks', localization, ['minor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ticks(...)' code ##################

        unicode_30861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 412, 8), 'unicode', u'Return the x ticks as a list of locations')
        # Getting the type of 'self' (line 413)
        self_30862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 15), 'self')
        # Obtaining the member '_tick_data_values' of a type (line 413)
        _tick_data_values_30863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 15), self_30862, '_tick_data_values')
        # Assigning a type to the variable 'stypy_return_type' (line 413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'stypy_return_type', _tick_data_values_30863)
        
        # ################# End of 'get_ticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ticks' in the type store
        # Getting the type of 'stypy_return_type' (line 411)
        stypy_return_type_30864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30864)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ticks'
        return stypy_return_type_30864


    @norecursion
    def set_ticklabels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 415)
        True_30865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 54), 'True')
        defaults = [True_30865]
        # Create a new context for function 'set_ticklabels'
        module_type_store = module_type_store.open_function_context('set_ticklabels', 415, 4, False)
        # Assigning a type to the variable 'self' (line 416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase.set_ticklabels.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase.set_ticklabels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase.set_ticklabels.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase.set_ticklabels.__dict__.__setitem__('stypy_function_name', 'ColorbarBase.set_ticklabels')
        ColorbarBase.set_ticklabels.__dict__.__setitem__('stypy_param_names_list', ['ticklabels', 'update_ticks'])
        ColorbarBase.set_ticklabels.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase.set_ticklabels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase.set_ticklabels.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase.set_ticklabels.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase.set_ticklabels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase.set_ticklabels.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase.set_ticklabels', ['ticklabels', 'update_ticks'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ticklabels', localization, ['ticklabels', 'update_ticks'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ticklabels(...)' code ##################

        unicode_30866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 420, (-1)), 'unicode', u'\n        set tick labels. Tick labels are updated immediately unless\n        update_ticks is *False*. To manually update the ticks, call\n        *update_ticks* method explicitly.\n        ')
        
        
        # Call to isinstance(...): (line 421)
        # Processing the call arguments (line 421)
        # Getting the type of 'self' (line 421)
        self_30868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 22), 'self', False)
        # Obtaining the member 'locator' of a type (line 421)
        locator_30869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 421, 22), self_30868, 'locator')
        # Getting the type of 'ticker' (line 421)
        ticker_30870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 36), 'ticker', False)
        # Obtaining the member 'FixedLocator' of a type (line 421)
        FixedLocator_30871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 421, 36), ticker_30870, 'FixedLocator')
        # Processing the call keyword arguments (line 421)
        kwargs_30872 = {}
        # Getting the type of 'isinstance' (line 421)
        isinstance_30867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 421)
        isinstance_call_result_30873 = invoke(stypy.reporting.localization.Localization(__file__, 421, 11), isinstance_30867, *[locator_30869, FixedLocator_30871], **kwargs_30872)
        
        # Testing the type of an if condition (line 421)
        if_condition_30874 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 421, 8), isinstance_call_result_30873)
        # Assigning a type to the variable 'if_condition_30874' (line 421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 421, 8), 'if_condition_30874', if_condition_30874)
        # SSA begins for if statement (line 421)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 422):
        
        # Assigning a Call to a Attribute (line 422):
        
        # Call to FixedFormatter(...): (line 422)
        # Processing the call arguments (line 422)
        # Getting the type of 'ticklabels' (line 422)
        ticklabels_30877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 51), 'ticklabels', False)
        # Processing the call keyword arguments (line 422)
        kwargs_30878 = {}
        # Getting the type of 'ticker' (line 422)
        ticker_30875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 29), 'ticker', False)
        # Obtaining the member 'FixedFormatter' of a type (line 422)
        FixedFormatter_30876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 29), ticker_30875, 'FixedFormatter')
        # Calling FixedFormatter(args, kwargs) (line 422)
        FixedFormatter_call_result_30879 = invoke(stypy.reporting.localization.Localization(__file__, 422, 29), FixedFormatter_30876, *[ticklabels_30877], **kwargs_30878)
        
        # Getting the type of 'self' (line 422)
        self_30880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 12), 'self')
        # Setting the type of the member 'formatter' of a type (line 422)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 12), self_30880, 'formatter', FixedFormatter_call_result_30879)
        
        # Getting the type of 'update_ticks' (line 423)
        update_ticks_30881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 15), 'update_ticks')
        # Testing the type of an if condition (line 423)
        if_condition_30882 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 423, 12), update_ticks_30881)
        # Assigning a type to the variable 'if_condition_30882' (line 423)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 12), 'if_condition_30882', if_condition_30882)
        # SSA begins for if statement (line 423)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update_ticks(...): (line 424)
        # Processing the call keyword arguments (line 424)
        kwargs_30885 = {}
        # Getting the type of 'self' (line 424)
        self_30883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 16), 'self', False)
        # Obtaining the member 'update_ticks' of a type (line 424)
        update_ticks_30884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 424, 16), self_30883, 'update_ticks')
        # Calling update_ticks(args, kwargs) (line 424)
        update_ticks_call_result_30886 = invoke(stypy.reporting.localization.Localization(__file__, 424, 16), update_ticks_30884, *[], **kwargs_30885)
        
        # SSA join for if statement (line 423)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 421)
        module_type_store.open_ssa_branch('else')
        
        # Call to warn(...): (line 426)
        # Processing the call arguments (line 426)
        unicode_30889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 26), 'unicode', u'set_ticks() must have been called.')
        # Processing the call keyword arguments (line 426)
        kwargs_30890 = {}
        # Getting the type of 'warnings' (line 426)
        warnings_30887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 426)
        warn_30888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 12), warnings_30887, 'warn')
        # Calling warn(args, kwargs) (line 426)
        warn_call_result_30891 = invoke(stypy.reporting.localization.Localization(__file__, 426, 12), warn_30888, *[unicode_30889], **kwargs_30890)
        
        # SSA join for if statement (line 421)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 427):
        
        # Assigning a Name to a Attribute (line 427):
        # Getting the type of 'True' (line 427)
        True_30892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 21), 'True')
        # Getting the type of 'self' (line 427)
        self_30893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 427)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 8), self_30893, 'stale', True_30892)
        
        # ################# End of 'set_ticklabels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ticklabels' in the type store
        # Getting the type of 'stypy_return_type' (line 415)
        stypy_return_type_30894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30894)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ticklabels'
        return stypy_return_type_30894


    @norecursion
    def _config_axes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_config_axes'
        module_type_store = module_type_store.open_function_context('_config_axes', 429, 4, False)
        # Assigning a type to the variable 'self' (line 430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._config_axes.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._config_axes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._config_axes.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._config_axes.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._config_axes')
        ColorbarBase._config_axes.__dict__.__setitem__('stypy_param_names_list', ['X', 'Y'])
        ColorbarBase._config_axes.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._config_axes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._config_axes.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._config_axes.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._config_axes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._config_axes.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._config_axes', ['X', 'Y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_config_axes', localization, ['X', 'Y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_config_axes(...)' code ##################

        unicode_30895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 432, (-1)), 'unicode', u'\n        Make an axes patch and outline.\n        ')
        
        # Assigning a Attribute to a Name (line 433):
        
        # Assigning a Attribute to a Name (line 433):
        # Getting the type of 'self' (line 433)
        self_30896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 13), 'self')
        # Obtaining the member 'ax' of a type (line 433)
        ax_30897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 13), self_30896, 'ax')
        # Assigning a type to the variable 'ax' (line 433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 8), 'ax', ax_30897)
        
        # Call to set_frame_on(...): (line 434)
        # Processing the call arguments (line 434)
        # Getting the type of 'False' (line 434)
        False_30900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 24), 'False', False)
        # Processing the call keyword arguments (line 434)
        kwargs_30901 = {}
        # Getting the type of 'ax' (line 434)
        ax_30898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 'ax', False)
        # Obtaining the member 'set_frame_on' of a type (line 434)
        set_frame_on_30899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 8), ax_30898, 'set_frame_on')
        # Calling set_frame_on(args, kwargs) (line 434)
        set_frame_on_call_result_30902 = invoke(stypy.reporting.localization.Localization(__file__, 434, 8), set_frame_on_30899, *[False_30900], **kwargs_30901)
        
        
        # Call to set_navigate(...): (line 435)
        # Processing the call arguments (line 435)
        # Getting the type of 'False' (line 435)
        False_30905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 24), 'False', False)
        # Processing the call keyword arguments (line 435)
        kwargs_30906 = {}
        # Getting the type of 'ax' (line 435)
        ax_30903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'ax', False)
        # Obtaining the member 'set_navigate' of a type (line 435)
        set_navigate_30904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 8), ax_30903, 'set_navigate')
        # Calling set_navigate(args, kwargs) (line 435)
        set_navigate_call_result_30907 = invoke(stypy.reporting.localization.Localization(__file__, 435, 8), set_navigate_30904, *[False_30905], **kwargs_30906)
        
        
        # Assigning a Call to a Name (line 436):
        
        # Assigning a Call to a Name (line 436):
        
        # Call to _outline(...): (line 436)
        # Processing the call arguments (line 436)
        # Getting the type of 'X' (line 436)
        X_30910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 27), 'X', False)
        # Getting the type of 'Y' (line 436)
        Y_30911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 30), 'Y', False)
        # Processing the call keyword arguments (line 436)
        kwargs_30912 = {}
        # Getting the type of 'self' (line 436)
        self_30908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 13), 'self', False)
        # Obtaining the member '_outline' of a type (line 436)
        _outline_30909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 436, 13), self_30908, '_outline')
        # Calling _outline(args, kwargs) (line 436)
        _outline_call_result_30913 = invoke(stypy.reporting.localization.Localization(__file__, 436, 13), _outline_30909, *[X_30910, Y_30911], **kwargs_30912)
        
        # Assigning a type to the variable 'xy' (line 436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 8), 'xy', _outline_call_result_30913)
        
        # Call to update_datalim(...): (line 437)
        # Processing the call arguments (line 437)
        # Getting the type of 'xy' (line 437)
        xy_30916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 26), 'xy', False)
        # Processing the call keyword arguments (line 437)
        kwargs_30917 = {}
        # Getting the type of 'ax' (line 437)
        ax_30914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 8), 'ax', False)
        # Obtaining the member 'update_datalim' of a type (line 437)
        update_datalim_30915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 437, 8), ax_30914, 'update_datalim')
        # Calling update_datalim(args, kwargs) (line 437)
        update_datalim_call_result_30918 = invoke(stypy.reporting.localization.Localization(__file__, 437, 8), update_datalim_30915, *[xy_30916], **kwargs_30917)
        
        
        # Call to set_xlim(...): (line 438)
        # Getting the type of 'ax' (line 438)
        ax_30921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 21), 'ax', False)
        # Obtaining the member 'dataLim' of a type (line 438)
        dataLim_30922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 21), ax_30921, 'dataLim')
        # Obtaining the member 'intervalx' of a type (line 438)
        intervalx_30923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 21), dataLim_30922, 'intervalx')
        # Processing the call keyword arguments (line 438)
        kwargs_30924 = {}
        # Getting the type of 'ax' (line 438)
        ax_30919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 8), 'ax', False)
        # Obtaining the member 'set_xlim' of a type (line 438)
        set_xlim_30920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 8), ax_30919, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 438)
        set_xlim_call_result_30925 = invoke(stypy.reporting.localization.Localization(__file__, 438, 8), set_xlim_30920, *[intervalx_30923], **kwargs_30924)
        
        
        # Call to set_ylim(...): (line 439)
        # Getting the type of 'ax' (line 439)
        ax_30928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 21), 'ax', False)
        # Obtaining the member 'dataLim' of a type (line 439)
        dataLim_30929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 21), ax_30928, 'dataLim')
        # Obtaining the member 'intervaly' of a type (line 439)
        intervaly_30930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 21), dataLim_30929, 'intervaly')
        # Processing the call keyword arguments (line 439)
        kwargs_30931 = {}
        # Getting the type of 'ax' (line 439)
        ax_30926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 8), 'ax', False)
        # Obtaining the member 'set_ylim' of a type (line 439)
        set_ylim_30927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 8), ax_30926, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 439)
        set_ylim_call_result_30932 = invoke(stypy.reporting.localization.Localization(__file__, 439, 8), set_ylim_30927, *[intervaly_30930], **kwargs_30931)
        
        
        
        # Getting the type of 'self' (line 440)
        self_30933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 11), 'self')
        # Obtaining the member 'outline' of a type (line 440)
        outline_30934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 11), self_30933, 'outline')
        # Getting the type of 'None' (line 440)
        None_30935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 31), 'None')
        # Applying the binary operator 'isnot' (line 440)
        result_is_not_30936 = python_operator(stypy.reporting.localization.Localization(__file__, 440, 11), 'isnot', outline_30934, None_30935)
        
        # Testing the type of an if condition (line 440)
        if_condition_30937 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 440, 8), result_is_not_30936)
        # Assigning a type to the variable 'if_condition_30937' (line 440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 8), 'if_condition_30937', if_condition_30937)
        # SSA begins for if statement (line 440)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to remove(...): (line 441)
        # Processing the call keyword arguments (line 441)
        kwargs_30941 = {}
        # Getting the type of 'self' (line 441)
        self_30938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 12), 'self', False)
        # Obtaining the member 'outline' of a type (line 441)
        outline_30939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 12), self_30938, 'outline')
        # Obtaining the member 'remove' of a type (line 441)
        remove_30940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 12), outline_30939, 'remove')
        # Calling remove(args, kwargs) (line 441)
        remove_call_result_30942 = invoke(stypy.reporting.localization.Localization(__file__, 441, 12), remove_30940, *[], **kwargs_30941)
        
        # SSA join for if statement (line 440)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 442):
        
        # Assigning a Call to a Attribute (line 442):
        
        # Call to Polygon(...): (line 442)
        # Processing the call arguments (line 442)
        # Getting the type of 'xy' (line 443)
        xy_30945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 12), 'xy', False)
        # Processing the call keyword arguments (line 442)
        
        # Obtaining the type of the subscript
        unicode_30946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 443, 39), 'unicode', u'axes.edgecolor')
        # Getting the type of 'mpl' (line 443)
        mpl_30947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 26), 'mpl', False)
        # Obtaining the member 'rcParams' of a type (line 443)
        rcParams_30948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 443, 26), mpl_30947, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 443)
        getitem___30949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 443, 26), rcParams_30948, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 443)
        subscript_call_result_30950 = invoke(stypy.reporting.localization.Localization(__file__, 443, 26), getitem___30949, unicode_30946)
        
        keyword_30951 = subscript_call_result_30950
        unicode_30952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 444, 22), 'unicode', u'none')
        keyword_30953 = unicode_30952
        
        # Obtaining the type of the subscript
        unicode_30954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 35), 'unicode', u'axes.linewidth')
        # Getting the type of 'mpl' (line 445)
        mpl_30955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 22), 'mpl', False)
        # Obtaining the member 'rcParams' of a type (line 445)
        rcParams_30956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 22), mpl_30955, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 445)
        getitem___30957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 22), rcParams_30956, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 445)
        subscript_call_result_30958 = invoke(stypy.reporting.localization.Localization(__file__, 445, 22), getitem___30957, unicode_30954)
        
        keyword_30959 = subscript_call_result_30958
        # Getting the type of 'True' (line 446)
        True_30960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 19), 'True', False)
        keyword_30961 = True_30960
        int_30962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 447, 19), 'int')
        keyword_30963 = int_30962
        kwargs_30964 = {'edgecolor': keyword_30951, 'linewidth': keyword_30959, 'zorder': keyword_30963, 'facecolor': keyword_30953, 'closed': keyword_30961}
        # Getting the type of 'mpatches' (line 442)
        mpatches_30943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 23), 'mpatches', False)
        # Obtaining the member 'Polygon' of a type (line 442)
        Polygon_30944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 442, 23), mpatches_30943, 'Polygon')
        # Calling Polygon(args, kwargs) (line 442)
        Polygon_call_result_30965 = invoke(stypy.reporting.localization.Localization(__file__, 442, 23), Polygon_30944, *[xy_30945], **kwargs_30964)
        
        # Getting the type of 'self' (line 442)
        self_30966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 8), 'self')
        # Setting the type of the member 'outline' of a type (line 442)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 442, 8), self_30966, 'outline', Polygon_call_result_30965)
        
        # Call to add_artist(...): (line 448)
        # Processing the call arguments (line 448)
        # Getting the type of 'self' (line 448)
        self_30969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 22), 'self', False)
        # Obtaining the member 'outline' of a type (line 448)
        outline_30970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 22), self_30969, 'outline')
        # Processing the call keyword arguments (line 448)
        kwargs_30971 = {}
        # Getting the type of 'ax' (line 448)
        ax_30967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 8), 'ax', False)
        # Obtaining the member 'add_artist' of a type (line 448)
        add_artist_30968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 8), ax_30967, 'add_artist')
        # Calling add_artist(args, kwargs) (line 448)
        add_artist_call_result_30972 = invoke(stypy.reporting.localization.Localization(__file__, 448, 8), add_artist_30968, *[outline_30970], **kwargs_30971)
        
        
        # Call to set_clip_box(...): (line 449)
        # Processing the call arguments (line 449)
        # Getting the type of 'None' (line 449)
        None_30976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 34), 'None', False)
        # Processing the call keyword arguments (line 449)
        kwargs_30977 = {}
        # Getting the type of 'self' (line 449)
        self_30973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 8), 'self', False)
        # Obtaining the member 'outline' of a type (line 449)
        outline_30974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 8), self_30973, 'outline')
        # Obtaining the member 'set_clip_box' of a type (line 449)
        set_clip_box_30975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 8), outline_30974, 'set_clip_box')
        # Calling set_clip_box(args, kwargs) (line 449)
        set_clip_box_call_result_30978 = invoke(stypy.reporting.localization.Localization(__file__, 449, 8), set_clip_box_30975, *[None_30976], **kwargs_30977)
        
        
        # Call to set_clip_path(...): (line 450)
        # Processing the call arguments (line 450)
        # Getting the type of 'None' (line 450)
        None_30982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 35), 'None', False)
        # Processing the call keyword arguments (line 450)
        kwargs_30983 = {}
        # Getting the type of 'self' (line 450)
        self_30979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 8), 'self', False)
        # Obtaining the member 'outline' of a type (line 450)
        outline_30980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 8), self_30979, 'outline')
        # Obtaining the member 'set_clip_path' of a type (line 450)
        set_clip_path_30981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 8), outline_30980, 'set_clip_path')
        # Calling set_clip_path(args, kwargs) (line 450)
        set_clip_path_call_result_30984 = invoke(stypy.reporting.localization.Localization(__file__, 450, 8), set_clip_path_30981, *[None_30982], **kwargs_30983)
        
        
        # Assigning a Subscript to a Name (line 451):
        
        # Assigning a Subscript to a Name (line 451):
        
        # Obtaining the type of the subscript
        unicode_30985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 451, 25), 'unicode', u'axes.facecolor')
        # Getting the type of 'mpl' (line 451)
        mpl_30986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 12), 'mpl')
        # Obtaining the member 'rcParams' of a type (line 451)
        rcParams_30987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 451, 12), mpl_30986, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 451)
        getitem___30988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 451, 12), rcParams_30987, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 451)
        subscript_call_result_30989 = invoke(stypy.reporting.localization.Localization(__file__, 451, 12), getitem___30988, unicode_30985)
        
        # Assigning a type to the variable 'c' (line 451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 8), 'c', subscript_call_result_30989)
        
        
        # Getting the type of 'self' (line 452)
        self_30990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 11), 'self')
        # Obtaining the member 'patch' of a type (line 452)
        patch_30991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 452, 11), self_30990, 'patch')
        # Getting the type of 'None' (line 452)
        None_30992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 29), 'None')
        # Applying the binary operator 'isnot' (line 452)
        result_is_not_30993 = python_operator(stypy.reporting.localization.Localization(__file__, 452, 11), 'isnot', patch_30991, None_30992)
        
        # Testing the type of an if condition (line 452)
        if_condition_30994 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 452, 8), result_is_not_30993)
        # Assigning a type to the variable 'if_condition_30994' (line 452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 8), 'if_condition_30994', if_condition_30994)
        # SSA begins for if statement (line 452)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to remove(...): (line 453)
        # Processing the call keyword arguments (line 453)
        kwargs_30998 = {}
        # Getting the type of 'self' (line 453)
        self_30995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 12), 'self', False)
        # Obtaining the member 'patch' of a type (line 453)
        patch_30996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 12), self_30995, 'patch')
        # Obtaining the member 'remove' of a type (line 453)
        remove_30997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 12), patch_30996, 'remove')
        # Calling remove(args, kwargs) (line 453)
        remove_call_result_30999 = invoke(stypy.reporting.localization.Localization(__file__, 453, 12), remove_30997, *[], **kwargs_30998)
        
        # SSA join for if statement (line 452)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 454):
        
        # Assigning a Call to a Attribute (line 454):
        
        # Call to Polygon(...): (line 454)
        # Processing the call arguments (line 454)
        # Getting the type of 'xy' (line 454)
        xy_31002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 38), 'xy', False)
        # Processing the call keyword arguments (line 454)
        # Getting the type of 'c' (line 454)
        c_31003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 52), 'c', False)
        keyword_31004 = c_31003
        # Getting the type of 'c' (line 455)
        c_31005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 48), 'c', False)
        keyword_31006 = c_31005
        float_31007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 456, 48), 'float')
        keyword_31008 = float_31007
        int_31009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 457, 45), 'int')
        keyword_31010 = int_31009
        kwargs_31011 = {'edgecolor': keyword_31004, 'linewidth': keyword_31008, 'zorder': keyword_31010, 'facecolor': keyword_31006}
        # Getting the type of 'mpatches' (line 454)
        mpatches_31000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 21), 'mpatches', False)
        # Obtaining the member 'Polygon' of a type (line 454)
        Polygon_31001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 454, 21), mpatches_31000, 'Polygon')
        # Calling Polygon(args, kwargs) (line 454)
        Polygon_call_result_31012 = invoke(stypy.reporting.localization.Localization(__file__, 454, 21), Polygon_31001, *[xy_31002], **kwargs_31011)
        
        # Getting the type of 'self' (line 454)
        self_31013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 8), 'self')
        # Setting the type of the member 'patch' of a type (line 454)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 454, 8), self_31013, 'patch', Polygon_call_result_31012)
        
        # Call to add_artist(...): (line 458)
        # Processing the call arguments (line 458)
        # Getting the type of 'self' (line 458)
        self_31016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 22), 'self', False)
        # Obtaining the member 'patch' of a type (line 458)
        patch_31017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 22), self_31016, 'patch')
        # Processing the call keyword arguments (line 458)
        kwargs_31018 = {}
        # Getting the type of 'ax' (line 458)
        ax_31014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 8), 'ax', False)
        # Obtaining the member 'add_artist' of a type (line 458)
        add_artist_31015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 8), ax_31014, 'add_artist')
        # Calling add_artist(args, kwargs) (line 458)
        add_artist_call_result_31019 = invoke(stypy.reporting.localization.Localization(__file__, 458, 8), add_artist_31015, *[patch_31017], **kwargs_31018)
        
        
        # Call to update_ticks(...): (line 460)
        # Processing the call keyword arguments (line 460)
        kwargs_31022 = {}
        # Getting the type of 'self' (line 460)
        self_31020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'self', False)
        # Obtaining the member 'update_ticks' of a type (line 460)
        update_ticks_31021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 8), self_31020, 'update_ticks')
        # Calling update_ticks(args, kwargs) (line 460)
        update_ticks_call_result_31023 = invoke(stypy.reporting.localization.Localization(__file__, 460, 8), update_ticks_31021, *[], **kwargs_31022)
        
        
        # ################# End of '_config_axes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_config_axes' in the type store
        # Getting the type of 'stypy_return_type' (line 429)
        stypy_return_type_31024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31024)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_config_axes'
        return stypy_return_type_31024


    @norecursion
    def _set_label(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_label'
        module_type_store = module_type_store.open_function_context('_set_label', 462, 4, False)
        # Assigning a type to the variable 'self' (line 463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._set_label.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._set_label.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._set_label.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._set_label.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._set_label')
        ColorbarBase._set_label.__dict__.__setitem__('stypy_param_names_list', [])
        ColorbarBase._set_label.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._set_label.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._set_label.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._set_label.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._set_label.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._set_label.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._set_label', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_label', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_label(...)' code ##################

        
        
        # Getting the type of 'self' (line 463)
        self_31025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 11), 'self')
        # Obtaining the member 'orientation' of a type (line 463)
        orientation_31026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 463, 11), self_31025, 'orientation')
        unicode_31027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 463, 31), 'unicode', u'vertical')
        # Applying the binary operator '==' (line 463)
        result_eq_31028 = python_operator(stypy.reporting.localization.Localization(__file__, 463, 11), '==', orientation_31026, unicode_31027)
        
        # Testing the type of an if condition (line 463)
        if_condition_31029 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 463, 8), result_eq_31028)
        # Assigning a type to the variable 'if_condition_31029' (line 463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 8), 'if_condition_31029', if_condition_31029)
        # SSA begins for if statement (line 463)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_ylabel(...): (line 464)
        # Processing the call arguments (line 464)
        # Getting the type of 'self' (line 464)
        self_31033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 31), 'self', False)
        # Obtaining the member '_label' of a type (line 464)
        _label_31034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 31), self_31033, '_label')
        # Processing the call keyword arguments (line 464)
        # Getting the type of 'self' (line 464)
        self_31035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 46), 'self', False)
        # Obtaining the member '_labelkw' of a type (line 464)
        _labelkw_31036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 46), self_31035, '_labelkw')
        kwargs_31037 = {'_labelkw_31036': _labelkw_31036}
        # Getting the type of 'self' (line 464)
        self_31030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 464)
        ax_31031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 12), self_31030, 'ax')
        # Obtaining the member 'set_ylabel' of a type (line 464)
        set_ylabel_31032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 12), ax_31031, 'set_ylabel')
        # Calling set_ylabel(args, kwargs) (line 464)
        set_ylabel_call_result_31038 = invoke(stypy.reporting.localization.Localization(__file__, 464, 12), set_ylabel_31032, *[_label_31034], **kwargs_31037)
        
        # SSA branch for the else part of an if statement (line 463)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_xlabel(...): (line 466)
        # Processing the call arguments (line 466)
        # Getting the type of 'self' (line 466)
        self_31042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 31), 'self', False)
        # Obtaining the member '_label' of a type (line 466)
        _label_31043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 31), self_31042, '_label')
        # Processing the call keyword arguments (line 466)
        # Getting the type of 'self' (line 466)
        self_31044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 46), 'self', False)
        # Obtaining the member '_labelkw' of a type (line 466)
        _labelkw_31045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 46), self_31044, '_labelkw')
        kwargs_31046 = {'_labelkw_31045': _labelkw_31045}
        # Getting the type of 'self' (line 466)
        self_31039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 466)
        ax_31040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 12), self_31039, 'ax')
        # Obtaining the member 'set_xlabel' of a type (line 466)
        set_xlabel_31041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 12), ax_31040, 'set_xlabel')
        # Calling set_xlabel(args, kwargs) (line 466)
        set_xlabel_call_result_31047 = invoke(stypy.reporting.localization.Localization(__file__, 466, 12), set_xlabel_31041, *[_label_31043], **kwargs_31046)
        
        # SSA join for if statement (line 463)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 467):
        
        # Assigning a Name to a Attribute (line 467):
        # Getting the type of 'True' (line 467)
        True_31048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 21), 'True')
        # Getting the type of 'self' (line 467)
        self_31049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 467)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 8), self_31049, 'stale', True_31048)
        
        # ################# End of '_set_label(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_label' in the type store
        # Getting the type of 'stypy_return_type' (line 462)
        stypy_return_type_31050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31050)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_label'
        return stypy_return_type_31050


    @norecursion
    def set_label(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_label'
        module_type_store = module_type_store.open_function_context('set_label', 469, 4, False)
        # Assigning a type to the variable 'self' (line 470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase.set_label.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase.set_label.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase.set_label.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase.set_label.__dict__.__setitem__('stypy_function_name', 'ColorbarBase.set_label')
        ColorbarBase.set_label.__dict__.__setitem__('stypy_param_names_list', ['label'])
        ColorbarBase.set_label.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase.set_label.__dict__.__setitem__('stypy_kwargs_param_name', 'kw')
        ColorbarBase.set_label.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase.set_label.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase.set_label.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase.set_label.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase.set_label', ['label'], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_label', localization, ['label'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_label(...)' code ##################

        unicode_31051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 472, (-1)), 'unicode', u'\n        Label the long axis of the colorbar\n        ')
        
        # Assigning a BinOp to a Attribute (line 473):
        
        # Assigning a BinOp to a Attribute (line 473):
        unicode_31052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 22), 'unicode', u'%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 473)
        tuple_31053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 473)
        # Adding element type (line 473)
        # Getting the type of 'label' (line 473)
        label_31054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 30), 'label')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 30), tuple_31053, label_31054)
        
        # Applying the binary operator '%' (line 473)
        result_mod_31055 = python_operator(stypy.reporting.localization.Localization(__file__, 473, 22), '%', unicode_31052, tuple_31053)
        
        # Getting the type of 'self' (line 473)
        self_31056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'self')
        # Setting the type of the member '_label' of a type (line 473)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 8), self_31056, '_label', result_mod_31055)
        
        # Assigning a Name to a Attribute (line 474):
        
        # Assigning a Name to a Attribute (line 474):
        # Getting the type of 'kw' (line 474)
        kw_31057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 24), 'kw')
        # Getting the type of 'self' (line 474)
        self_31058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'self')
        # Setting the type of the member '_labelkw' of a type (line 474)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 8), self_31058, '_labelkw', kw_31057)
        
        # Call to _set_label(...): (line 475)
        # Processing the call keyword arguments (line 475)
        kwargs_31061 = {}
        # Getting the type of 'self' (line 475)
        self_31059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'self', False)
        # Obtaining the member '_set_label' of a type (line 475)
        _set_label_31060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 8), self_31059, '_set_label')
        # Calling _set_label(args, kwargs) (line 475)
        _set_label_call_result_31062 = invoke(stypy.reporting.localization.Localization(__file__, 475, 8), _set_label_31060, *[], **kwargs_31061)
        
        
        # ################# End of 'set_label(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_label' in the type store
        # Getting the type of 'stypy_return_type' (line 469)
        stypy_return_type_31063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31063)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_label'
        return stypy_return_type_31063


    @norecursion
    def _outline(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_outline'
        module_type_store = module_type_store.open_function_context('_outline', 477, 4, False)
        # Assigning a type to the variable 'self' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._outline.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._outline.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._outline.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._outline.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._outline')
        ColorbarBase._outline.__dict__.__setitem__('stypy_param_names_list', ['X', 'Y'])
        ColorbarBase._outline.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._outline.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._outline.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._outline.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._outline.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._outline.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._outline', ['X', 'Y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_outline', localization, ['X', 'Y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_outline(...)' code ##################

        unicode_31064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, (-1)), 'unicode', u'\n        Return *x*, *y* arrays of colorbar bounding polygon,\n        taking orientation into account.\n        ')
        
        # Assigning a Subscript to a Name (line 482):
        
        # Assigning a Subscript to a Name (line 482):
        
        # Obtaining the type of the subscript
        int_31065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 20), 'int')
        # Getting the type of 'X' (line 482)
        X_31066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 12), 'X')
        # Obtaining the member 'shape' of a type (line 482)
        shape_31067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 12), X_31066, 'shape')
        # Obtaining the member '__getitem__' of a type (line 482)
        getitem___31068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 12), shape_31067, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 482)
        subscript_call_result_31069 = invoke(stypy.reporting.localization.Localization(__file__, 482, 12), getitem___31068, int_31065)
        
        # Assigning a type to the variable 'N' (line 482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 8), 'N', subscript_call_result_31069)
        
        # Assigning a List to a Name (line 483):
        
        # Assigning a List to a Name (line 483):
        
        # Obtaining an instance of the builtin type 'list' (line 483)
        list_31070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 483)
        # Adding element type (line 483)
        int_31071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 14), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 13), list_31070, int_31071)
        # Adding element type (line 483)
        int_31072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 13), list_31070, int_31072)
        # Adding element type (line 483)
        # Getting the type of 'N' (line 483)
        N_31073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 20), 'N')
        int_31074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 24), 'int')
        # Applying the binary operator '-' (line 483)
        result_sub_31075 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 20), '-', N_31073, int_31074)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 13), list_31070, result_sub_31075)
        # Adding element type (line 483)
        # Getting the type of 'N' (line 483)
        N_31076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 27), 'N')
        int_31077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 31), 'int')
        # Applying the binary operator '-' (line 483)
        result_sub_31078 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 27), '-', N_31076, int_31077)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 13), list_31070, result_sub_31078)
        # Adding element type (line 483)
        int_31079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 34), 'int')
        # Getting the type of 'N' (line 483)
        N_31080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 38), 'N')
        # Applying the binary operator '*' (line 483)
        result_mul_31081 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 34), '*', int_31079, N_31080)
        
        int_31082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 42), 'int')
        # Applying the binary operator '-' (line 483)
        result_sub_31083 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 34), '-', result_mul_31081, int_31082)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 13), list_31070, result_sub_31083)
        # Adding element type (line 483)
        int_31084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 45), 'int')
        # Getting the type of 'N' (line 483)
        N_31085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 49), 'N')
        # Applying the binary operator '*' (line 483)
        result_mul_31086 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 45), '*', int_31084, N_31085)
        
        int_31087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 53), 'int')
        # Applying the binary operator '-' (line 483)
        result_sub_31088 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 45), '-', result_mul_31086, int_31087)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 13), list_31070, result_sub_31088)
        # Adding element type (line 483)
        # Getting the type of 'N' (line 483)
        N_31089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 56), 'N')
        int_31090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 60), 'int')
        # Applying the binary operator '+' (line 483)
        result_add_31091 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 56), '+', N_31089, int_31090)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 13), list_31070, result_add_31091)
        # Adding element type (line 483)
        # Getting the type of 'N' (line 483)
        N_31092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 63), 'N')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 13), list_31070, N_31092)
        # Adding element type (line 483)
        int_31093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 66), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 13), list_31070, int_31093)
        
        # Assigning a type to the variable 'ii' (line 483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'ii', list_31070)
        
        # Assigning a Call to a Name (line 484):
        
        # Assigning a Call to a Name (line 484):
        
        # Call to take(...): (line 484)
        # Processing the call arguments (line 484)
        
        # Call to ravel(...): (line 484)
        # Processing the call arguments (line 484)
        
        # Call to transpose(...): (line 484)
        # Processing the call arguments (line 484)
        # Getting the type of 'X' (line 484)
        X_31100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 42), 'X', False)
        # Processing the call keyword arguments (line 484)
        kwargs_31101 = {}
        # Getting the type of 'np' (line 484)
        np_31098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 29), 'np', False)
        # Obtaining the member 'transpose' of a type (line 484)
        transpose_31099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 29), np_31098, 'transpose')
        # Calling transpose(args, kwargs) (line 484)
        transpose_call_result_31102 = invoke(stypy.reporting.localization.Localization(__file__, 484, 29), transpose_31099, *[X_31100], **kwargs_31101)
        
        # Processing the call keyword arguments (line 484)
        kwargs_31103 = {}
        # Getting the type of 'np' (line 484)
        np_31096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 20), 'np', False)
        # Obtaining the member 'ravel' of a type (line 484)
        ravel_31097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 20), np_31096, 'ravel')
        # Calling ravel(args, kwargs) (line 484)
        ravel_call_result_31104 = invoke(stypy.reporting.localization.Localization(__file__, 484, 20), ravel_31097, *[transpose_call_result_31102], **kwargs_31103)
        
        # Getting the type of 'ii' (line 484)
        ii_31105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 47), 'ii', False)
        # Processing the call keyword arguments (line 484)
        kwargs_31106 = {}
        # Getting the type of 'np' (line 484)
        np_31094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 12), 'np', False)
        # Obtaining the member 'take' of a type (line 484)
        take_31095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 12), np_31094, 'take')
        # Calling take(args, kwargs) (line 484)
        take_call_result_31107 = invoke(stypy.reporting.localization.Localization(__file__, 484, 12), take_31095, *[ravel_call_result_31104, ii_31105], **kwargs_31106)
        
        # Assigning a type to the variable 'x' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'x', take_call_result_31107)
        
        # Assigning a Call to a Name (line 485):
        
        # Assigning a Call to a Name (line 485):
        
        # Call to take(...): (line 485)
        # Processing the call arguments (line 485)
        
        # Call to ravel(...): (line 485)
        # Processing the call arguments (line 485)
        
        # Call to transpose(...): (line 485)
        # Processing the call arguments (line 485)
        # Getting the type of 'Y' (line 485)
        Y_31114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 42), 'Y', False)
        # Processing the call keyword arguments (line 485)
        kwargs_31115 = {}
        # Getting the type of 'np' (line 485)
        np_31112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 29), 'np', False)
        # Obtaining the member 'transpose' of a type (line 485)
        transpose_31113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 29), np_31112, 'transpose')
        # Calling transpose(args, kwargs) (line 485)
        transpose_call_result_31116 = invoke(stypy.reporting.localization.Localization(__file__, 485, 29), transpose_31113, *[Y_31114], **kwargs_31115)
        
        # Processing the call keyword arguments (line 485)
        kwargs_31117 = {}
        # Getting the type of 'np' (line 485)
        np_31110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 20), 'np', False)
        # Obtaining the member 'ravel' of a type (line 485)
        ravel_31111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 20), np_31110, 'ravel')
        # Calling ravel(args, kwargs) (line 485)
        ravel_call_result_31118 = invoke(stypy.reporting.localization.Localization(__file__, 485, 20), ravel_31111, *[transpose_call_result_31116], **kwargs_31117)
        
        # Getting the type of 'ii' (line 485)
        ii_31119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 47), 'ii', False)
        # Processing the call keyword arguments (line 485)
        kwargs_31120 = {}
        # Getting the type of 'np' (line 485)
        np_31108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 12), 'np', False)
        # Obtaining the member 'take' of a type (line 485)
        take_31109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 12), np_31108, 'take')
        # Calling take(args, kwargs) (line 485)
        take_call_result_31121 = invoke(stypy.reporting.localization.Localization(__file__, 485, 12), take_31109, *[ravel_call_result_31118, ii_31119], **kwargs_31120)
        
        # Assigning a type to the variable 'y' (line 485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 8), 'y', take_call_result_31121)
        
        # Assigning a Call to a Name (line 486):
        
        # Assigning a Call to a Name (line 486):
        
        # Call to reshape(...): (line 486)
        # Processing the call arguments (line 486)
        
        # Obtaining an instance of the builtin type 'tuple' (line 486)
        tuple_31124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 486)
        # Adding element type (line 486)
        
        # Call to len(...): (line 486)
        # Processing the call arguments (line 486)
        # Getting the type of 'x' (line 486)
        x_31126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 27), 'x', False)
        # Processing the call keyword arguments (line 486)
        kwargs_31127 = {}
        # Getting the type of 'len' (line 486)
        len_31125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 23), 'len', False)
        # Calling len(args, kwargs) (line 486)
        len_call_result_31128 = invoke(stypy.reporting.localization.Localization(__file__, 486, 23), len_31125, *[x_31126], **kwargs_31127)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 486, 23), tuple_31124, len_call_result_31128)
        # Adding element type (line 486)
        int_31129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 31), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 486, 23), tuple_31124, int_31129)
        
        # Processing the call keyword arguments (line 486)
        kwargs_31130 = {}
        # Getting the type of 'x' (line 486)
        x_31122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 12), 'x', False)
        # Obtaining the member 'reshape' of a type (line 486)
        reshape_31123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 12), x_31122, 'reshape')
        # Calling reshape(args, kwargs) (line 486)
        reshape_call_result_31131 = invoke(stypy.reporting.localization.Localization(__file__, 486, 12), reshape_31123, *[tuple_31124], **kwargs_31130)
        
        # Assigning a type to the variable 'x' (line 486)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 486, 8), 'x', reshape_call_result_31131)
        
        # Assigning a Call to a Name (line 487):
        
        # Assigning a Call to a Name (line 487):
        
        # Call to reshape(...): (line 487)
        # Processing the call arguments (line 487)
        
        # Obtaining an instance of the builtin type 'tuple' (line 487)
        tuple_31134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 487)
        # Adding element type (line 487)
        
        # Call to len(...): (line 487)
        # Processing the call arguments (line 487)
        # Getting the type of 'y' (line 487)
        y_31136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 27), 'y', False)
        # Processing the call keyword arguments (line 487)
        kwargs_31137 = {}
        # Getting the type of 'len' (line 487)
        len_31135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 23), 'len', False)
        # Calling len(args, kwargs) (line 487)
        len_call_result_31138 = invoke(stypy.reporting.localization.Localization(__file__, 487, 23), len_31135, *[y_31136], **kwargs_31137)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 487, 23), tuple_31134, len_call_result_31138)
        # Adding element type (line 487)
        int_31139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 31), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 487, 23), tuple_31134, int_31139)
        
        # Processing the call keyword arguments (line 487)
        kwargs_31140 = {}
        # Getting the type of 'y' (line 487)
        y_31132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 12), 'y', False)
        # Obtaining the member 'reshape' of a type (line 487)
        reshape_31133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 12), y_31132, 'reshape')
        # Calling reshape(args, kwargs) (line 487)
        reshape_call_result_31141 = invoke(stypy.reporting.localization.Localization(__file__, 487, 12), reshape_31133, *[tuple_31134], **kwargs_31140)
        
        # Assigning a type to the variable 'y' (line 487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 8), 'y', reshape_call_result_31141)
        
        
        # Getting the type of 'self' (line 488)
        self_31142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 11), 'self')
        # Obtaining the member 'orientation' of a type (line 488)
        orientation_31143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 11), self_31142, 'orientation')
        unicode_31144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 488, 31), 'unicode', u'horizontal')
        # Applying the binary operator '==' (line 488)
        result_eq_31145 = python_operator(stypy.reporting.localization.Localization(__file__, 488, 11), '==', orientation_31143, unicode_31144)
        
        # Testing the type of an if condition (line 488)
        if_condition_31146 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 488, 8), result_eq_31145)
        # Assigning a type to the variable 'if_condition_31146' (line 488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 8), 'if_condition_31146', if_condition_31146)
        # SSA begins for if statement (line 488)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to hstack(...): (line 489)
        # Processing the call arguments (line 489)
        
        # Obtaining an instance of the builtin type 'tuple' (line 489)
        tuple_31149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 489)
        # Adding element type (line 489)
        # Getting the type of 'y' (line 489)
        y_31150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 30), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 489, 30), tuple_31149, y_31150)
        # Adding element type (line 489)
        # Getting the type of 'x' (line 489)
        x_31151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 33), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 489, 30), tuple_31149, x_31151)
        
        # Processing the call keyword arguments (line 489)
        kwargs_31152 = {}
        # Getting the type of 'np' (line 489)
        np_31147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 19), 'np', False)
        # Obtaining the member 'hstack' of a type (line 489)
        hstack_31148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 19), np_31147, 'hstack')
        # Calling hstack(args, kwargs) (line 489)
        hstack_call_result_31153 = invoke(stypy.reporting.localization.Localization(__file__, 489, 19), hstack_31148, *[tuple_31149], **kwargs_31152)
        
        # Assigning a type to the variable 'stypy_return_type' (line 489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 12), 'stypy_return_type', hstack_call_result_31153)
        # SSA join for if statement (line 488)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to hstack(...): (line 490)
        # Processing the call arguments (line 490)
        
        # Obtaining an instance of the builtin type 'tuple' (line 490)
        tuple_31156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 490)
        # Adding element type (line 490)
        # Getting the type of 'x' (line 490)
        x_31157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 26), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 490, 26), tuple_31156, x_31157)
        # Adding element type (line 490)
        # Getting the type of 'y' (line 490)
        y_31158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 29), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 490, 26), tuple_31156, y_31158)
        
        # Processing the call keyword arguments (line 490)
        kwargs_31159 = {}
        # Getting the type of 'np' (line 490)
        np_31154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 15), 'np', False)
        # Obtaining the member 'hstack' of a type (line 490)
        hstack_31155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 15), np_31154, 'hstack')
        # Calling hstack(args, kwargs) (line 490)
        hstack_call_result_31160 = invoke(stypy.reporting.localization.Localization(__file__, 490, 15), hstack_31155, *[tuple_31156], **kwargs_31159)
        
        # Assigning a type to the variable 'stypy_return_type' (line 490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 8), 'stypy_return_type', hstack_call_result_31160)
        
        # ################# End of '_outline(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_outline' in the type store
        # Getting the type of 'stypy_return_type' (line 477)
        stypy_return_type_31161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31161)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_outline'
        return stypy_return_type_31161


    @norecursion
    def _edges(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_edges'
        module_type_store = module_type_store.open_function_context('_edges', 492, 4, False)
        # Assigning a type to the variable 'self' (line 493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._edges.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._edges.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._edges.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._edges.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._edges')
        ColorbarBase._edges.__dict__.__setitem__('stypy_param_names_list', ['X', 'Y'])
        ColorbarBase._edges.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._edges.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._edges.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._edges.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._edges.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._edges.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._edges', ['X', 'Y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_edges', localization, ['X', 'Y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_edges(...)' code ##################

        unicode_31162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, (-1)), 'unicode', u'\n        Return the separator line segments; helper for _add_solids.\n        ')
        
        # Assigning a Subscript to a Name (line 496):
        
        # Assigning a Subscript to a Name (line 496):
        
        # Obtaining the type of the subscript
        int_31163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 496, 20), 'int')
        # Getting the type of 'X' (line 496)
        X_31164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 12), 'X')
        # Obtaining the member 'shape' of a type (line 496)
        shape_31165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 12), X_31164, 'shape')
        # Obtaining the member '__getitem__' of a type (line 496)
        getitem___31166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 12), shape_31165, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 496)
        subscript_call_result_31167 = invoke(stypy.reporting.localization.Localization(__file__, 496, 12), getitem___31166, int_31163)
        
        # Assigning a type to the variable 'N' (line 496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), 'N', subscript_call_result_31167)
        
        
        # Getting the type of 'self' (line 499)
        self_31168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 11), 'self')
        # Obtaining the member 'orientation' of a type (line 499)
        orientation_31169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 11), self_31168, 'orientation')
        unicode_31170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 499, 31), 'unicode', u'vertical')
        # Applying the binary operator '==' (line 499)
        result_eq_31171 = python_operator(stypy.reporting.localization.Localization(__file__, 499, 11), '==', orientation_31169, unicode_31170)
        
        # Testing the type of an if condition (line 499)
        if_condition_31172 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 499, 8), result_eq_31171)
        # Assigning a type to the variable 'if_condition_31172' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 8), 'if_condition_31172', if_condition_31172)
        # SSA begins for if statement (line 499)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to xrange(...): (line 500)
        # Processing the call arguments (line 500)
        int_31188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 500, 58), 'int')
        # Getting the type of 'N' (line 500)
        N_31189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 61), 'N', False)
        int_31190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 500, 65), 'int')
        # Applying the binary operator '-' (line 500)
        result_sub_31191 = python_operator(stypy.reporting.localization.Localization(__file__, 500, 61), '-', N_31189, int_31190)
        
        # Processing the call keyword arguments (line 500)
        kwargs_31192 = {}
        # Getting the type of 'xrange' (line 500)
        xrange_31187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 51), 'xrange', False)
        # Calling xrange(args, kwargs) (line 500)
        xrange_call_result_31193 = invoke(stypy.reporting.localization.Localization(__file__, 500, 51), xrange_31187, *[int_31188, result_sub_31191], **kwargs_31192)
        
        comprehension_31194 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 500, 20), xrange_call_result_31193)
        # Assigning a type to the variable 'i' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 20), 'i', comprehension_31194)
        
        # Call to list(...): (line 500)
        # Processing the call arguments (line 500)
        
        # Call to zip(...): (line 500)
        # Processing the call arguments (line 500)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 500)
        i_31175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 31), 'i', False)
        # Getting the type of 'X' (line 500)
        X_31176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 29), 'X', False)
        # Obtaining the member '__getitem__' of a type (line 500)
        getitem___31177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 500, 29), X_31176, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 500)
        subscript_call_result_31178 = invoke(stypy.reporting.localization.Localization(__file__, 500, 29), getitem___31177, i_31175)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 500)
        i_31179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 37), 'i', False)
        # Getting the type of 'Y' (line 500)
        Y_31180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 35), 'Y', False)
        # Obtaining the member '__getitem__' of a type (line 500)
        getitem___31181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 500, 35), Y_31180, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 500)
        subscript_call_result_31182 = invoke(stypy.reporting.localization.Localization(__file__, 500, 35), getitem___31181, i_31179)
        
        # Processing the call keyword arguments (line 500)
        kwargs_31183 = {}
        # Getting the type of 'zip' (line 500)
        zip_31174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 25), 'zip', False)
        # Calling zip(args, kwargs) (line 500)
        zip_call_result_31184 = invoke(stypy.reporting.localization.Localization(__file__, 500, 25), zip_31174, *[subscript_call_result_31178, subscript_call_result_31182], **kwargs_31183)
        
        # Processing the call keyword arguments (line 500)
        kwargs_31185 = {}
        # Getting the type of 'list' (line 500)
        list_31173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 20), 'list', False)
        # Calling list(args, kwargs) (line 500)
        list_call_result_31186 = invoke(stypy.reporting.localization.Localization(__file__, 500, 20), list_31173, *[zip_call_result_31184], **kwargs_31185)
        
        list_31195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 500, 20), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 500, 20), list_31195, list_call_result_31186)
        # Assigning a type to the variable 'stypy_return_type' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 12), 'stypy_return_type', list_31195)
        # SSA branch for the else part of an if statement (line 499)
        module_type_store.open_ssa_branch('else')
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to xrange(...): (line 502)
        # Processing the call arguments (line 502)
        int_31211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 58), 'int')
        # Getting the type of 'N' (line 502)
        N_31212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 61), 'N', False)
        int_31213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 65), 'int')
        # Applying the binary operator '-' (line 502)
        result_sub_31214 = python_operator(stypy.reporting.localization.Localization(__file__, 502, 61), '-', N_31212, int_31213)
        
        # Processing the call keyword arguments (line 502)
        kwargs_31215 = {}
        # Getting the type of 'xrange' (line 502)
        xrange_31210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 51), 'xrange', False)
        # Calling xrange(args, kwargs) (line 502)
        xrange_call_result_31216 = invoke(stypy.reporting.localization.Localization(__file__, 502, 51), xrange_31210, *[int_31211, result_sub_31214], **kwargs_31215)
        
        comprehension_31217 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 20), xrange_call_result_31216)
        # Assigning a type to the variable 'i' (line 502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 20), 'i', comprehension_31217)
        
        # Call to list(...): (line 502)
        # Processing the call arguments (line 502)
        
        # Call to zip(...): (line 502)
        # Processing the call arguments (line 502)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 502)
        i_31198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 31), 'i', False)
        # Getting the type of 'Y' (line 502)
        Y_31199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 29), 'Y', False)
        # Obtaining the member '__getitem__' of a type (line 502)
        getitem___31200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 29), Y_31199, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 502)
        subscript_call_result_31201 = invoke(stypy.reporting.localization.Localization(__file__, 502, 29), getitem___31200, i_31198)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 502)
        i_31202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 37), 'i', False)
        # Getting the type of 'X' (line 502)
        X_31203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 35), 'X', False)
        # Obtaining the member '__getitem__' of a type (line 502)
        getitem___31204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 35), X_31203, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 502)
        subscript_call_result_31205 = invoke(stypy.reporting.localization.Localization(__file__, 502, 35), getitem___31204, i_31202)
        
        # Processing the call keyword arguments (line 502)
        kwargs_31206 = {}
        # Getting the type of 'zip' (line 502)
        zip_31197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 25), 'zip', False)
        # Calling zip(args, kwargs) (line 502)
        zip_call_result_31207 = invoke(stypy.reporting.localization.Localization(__file__, 502, 25), zip_31197, *[subscript_call_result_31201, subscript_call_result_31205], **kwargs_31206)
        
        # Processing the call keyword arguments (line 502)
        kwargs_31208 = {}
        # Getting the type of 'list' (line 502)
        list_31196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 20), 'list', False)
        # Calling list(args, kwargs) (line 502)
        list_call_result_31209 = invoke(stypy.reporting.localization.Localization(__file__, 502, 20), list_31196, *[zip_call_result_31207], **kwargs_31208)
        
        list_31218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 20), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 20), list_31218, list_call_result_31209)
        # Assigning a type to the variable 'stypy_return_type' (line 502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 12), 'stypy_return_type', list_31218)
        # SSA join for if statement (line 499)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_edges(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_edges' in the type store
        # Getting the type of 'stypy_return_type' (line 492)
        stypy_return_type_31219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31219)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_edges'
        return stypy_return_type_31219


    @norecursion
    def _add_solids(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_add_solids'
        module_type_store = module_type_store.open_function_context('_add_solids', 504, 4, False)
        # Assigning a type to the variable 'self' (line 505)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 505, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._add_solids.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._add_solids.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._add_solids.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._add_solids.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._add_solids')
        ColorbarBase._add_solids.__dict__.__setitem__('stypy_param_names_list', ['X', 'Y', 'C'])
        ColorbarBase._add_solids.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._add_solids.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._add_solids.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._add_solids.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._add_solids.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._add_solids.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._add_solids', ['X', 'Y', 'C'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_add_solids', localization, ['X', 'Y', 'C'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_add_solids(...)' code ##################

        unicode_31220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, (-1)), 'unicode', u'\n        Draw the colors using :meth:`~matplotlib.axes.Axes.pcolormesh`;\n        optionally add separators.\n        ')
        
        
        # Getting the type of 'self' (line 509)
        self_31221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 11), 'self')
        # Obtaining the member 'orientation' of a type (line 509)
        orientation_31222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 509, 11), self_31221, 'orientation')
        unicode_31223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 31), 'unicode', u'vertical')
        # Applying the binary operator '==' (line 509)
        result_eq_31224 = python_operator(stypy.reporting.localization.Localization(__file__, 509, 11), '==', orientation_31222, unicode_31223)
        
        # Testing the type of an if condition (line 509)
        if_condition_31225 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 509, 8), result_eq_31224)
        # Assigning a type to the variable 'if_condition_31225' (line 509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 509, 8), 'if_condition_31225', if_condition_31225)
        # SSA begins for if statement (line 509)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Name (line 510):
        
        # Assigning a Tuple to a Name (line 510):
        
        # Obtaining an instance of the builtin type 'tuple' (line 510)
        tuple_31226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 510)
        # Adding element type (line 510)
        # Getting the type of 'X' (line 510)
        X_31227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 20), 'X')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 510, 20), tuple_31226, X_31227)
        # Adding element type (line 510)
        # Getting the type of 'Y' (line 510)
        Y_31228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 23), 'Y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 510, 20), tuple_31226, Y_31228)
        # Adding element type (line 510)
        # Getting the type of 'C' (line 510)
        C_31229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 26), 'C')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 510, 20), tuple_31226, C_31229)
        
        # Assigning a type to the variable 'args' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 12), 'args', tuple_31226)
        # SSA branch for the else part of an if statement (line 509)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Name (line 512):
        
        # Assigning a Tuple to a Name (line 512):
        
        # Obtaining an instance of the builtin type 'tuple' (line 512)
        tuple_31230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 512)
        # Adding element type (line 512)
        
        # Call to transpose(...): (line 512)
        # Processing the call arguments (line 512)
        # Getting the type of 'Y' (line 512)
        Y_31233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 33), 'Y', False)
        # Processing the call keyword arguments (line 512)
        kwargs_31234 = {}
        # Getting the type of 'np' (line 512)
        np_31231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 20), 'np', False)
        # Obtaining the member 'transpose' of a type (line 512)
        transpose_31232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 20), np_31231, 'transpose')
        # Calling transpose(args, kwargs) (line 512)
        transpose_call_result_31235 = invoke(stypy.reporting.localization.Localization(__file__, 512, 20), transpose_31232, *[Y_31233], **kwargs_31234)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 512, 20), tuple_31230, transpose_call_result_31235)
        # Adding element type (line 512)
        
        # Call to transpose(...): (line 512)
        # Processing the call arguments (line 512)
        # Getting the type of 'X' (line 512)
        X_31238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 50), 'X', False)
        # Processing the call keyword arguments (line 512)
        kwargs_31239 = {}
        # Getting the type of 'np' (line 512)
        np_31236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 37), 'np', False)
        # Obtaining the member 'transpose' of a type (line 512)
        transpose_31237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 37), np_31236, 'transpose')
        # Calling transpose(args, kwargs) (line 512)
        transpose_call_result_31240 = invoke(stypy.reporting.localization.Localization(__file__, 512, 37), transpose_31237, *[X_31238], **kwargs_31239)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 512, 20), tuple_31230, transpose_call_result_31240)
        # Adding element type (line 512)
        
        # Call to transpose(...): (line 512)
        # Processing the call arguments (line 512)
        # Getting the type of 'C' (line 512)
        C_31243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 67), 'C', False)
        # Processing the call keyword arguments (line 512)
        kwargs_31244 = {}
        # Getting the type of 'np' (line 512)
        np_31241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 54), 'np', False)
        # Obtaining the member 'transpose' of a type (line 512)
        transpose_31242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 54), np_31241, 'transpose')
        # Calling transpose(args, kwargs) (line 512)
        transpose_call_result_31245 = invoke(stypy.reporting.localization.Localization(__file__, 512, 54), transpose_31242, *[C_31243], **kwargs_31244)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 512, 20), tuple_31230, transpose_call_result_31245)
        
        # Assigning a type to the variable 'args' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 12), 'args', tuple_31230)
        # SSA join for if statement (line 509)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 513):
        
        # Assigning a Call to a Name (line 513):
        
        # Call to dict(...): (line 513)
        # Processing the call keyword arguments (line 513)
        # Getting the type of 'self' (line 513)
        self_31247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 23), 'self', False)
        # Obtaining the member 'cmap' of a type (line 513)
        cmap_31248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 23), self_31247, 'cmap')
        keyword_31249 = cmap_31248
        # Getting the type of 'self' (line 514)
        self_31250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 23), 'self', False)
        # Obtaining the member 'norm' of a type (line 514)
        norm_31251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 23), self_31250, 'norm')
        keyword_31252 = norm_31251
        # Getting the type of 'self' (line 515)
        self_31253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 24), 'self', False)
        # Obtaining the member 'alpha' of a type (line 515)
        alpha_31254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 24), self_31253, 'alpha')
        keyword_31255 = alpha_31254
        unicode_31256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 516, 29), 'unicode', u'None')
        keyword_31257 = unicode_31256
        kwargs_31258 = {'alpha': keyword_31255, 'cmap': keyword_31249, 'norm': keyword_31252, 'edgecolors': keyword_31257}
        # Getting the type of 'dict' (line 513)
        dict_31246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 13), 'dict', False)
        # Calling dict(args, kwargs) (line 513)
        dict_call_result_31259 = invoke(stypy.reporting.localization.Localization(__file__, 513, 13), dict_31246, *[], **kwargs_31258)
        
        # Assigning a type to the variable 'kw' (line 513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 8), 'kw', dict_call_result_31259)
        
        # Assigning a Attribute to a Name (line 520):
        
        # Assigning a Attribute to a Name (line 520):
        # Getting the type of 'self' (line 520)
        self_31260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 16), 'self')
        # Obtaining the member 'ax' of a type (line 520)
        ax_31261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 16), self_31260, 'ax')
        # Obtaining the member '_hold' of a type (line 520)
        _hold_31262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 16), ax_31261, '_hold')
        # Assigning a type to the variable '_hold' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 8), '_hold', _hold_31262)
        
        # Assigning a Name to a Attribute (line 521):
        
        # Assigning a Name to a Attribute (line 521):
        # Getting the type of 'True' (line 521)
        True_31263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 24), 'True')
        # Getting the type of 'self' (line 521)
        self_31264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 8), 'self')
        # Obtaining the member 'ax' of a type (line 521)
        ax_31265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 8), self_31264, 'ax')
        # Setting the type of the member '_hold' of a type (line 521)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 8), ax_31265, '_hold', True_31263)
        
        # Assigning a Call to a Name (line 522):
        
        # Assigning a Call to a Name (line 522):
        
        # Call to pcolormesh(...): (line 522)
        # Getting the type of 'args' (line 522)
        args_31269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 34), 'args', False)
        # Processing the call keyword arguments (line 522)
        # Getting the type of 'kw' (line 522)
        kw_31270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 42), 'kw', False)
        kwargs_31271 = {'kw_31270': kw_31270}
        # Getting the type of 'self' (line 522)
        self_31266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 14), 'self', False)
        # Obtaining the member 'ax' of a type (line 522)
        ax_31267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 14), self_31266, 'ax')
        # Obtaining the member 'pcolormesh' of a type (line 522)
        pcolormesh_31268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 14), ax_31267, 'pcolormesh')
        # Calling pcolormesh(args, kwargs) (line 522)
        pcolormesh_call_result_31272 = invoke(stypy.reporting.localization.Localization(__file__, 522, 14), pcolormesh_31268, *[args_31269], **kwargs_31271)
        
        # Assigning a type to the variable 'col' (line 522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 8), 'col', pcolormesh_call_result_31272)
        
        # Assigning a Name to a Attribute (line 523):
        
        # Assigning a Name to a Attribute (line 523):
        # Getting the type of '_hold' (line 523)
        _hold_31273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 24), '_hold')
        # Getting the type of 'self' (line 523)
        self_31274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'self')
        # Obtaining the member 'ax' of a type (line 523)
        ax_31275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 8), self_31274, 'ax')
        # Setting the type of the member '_hold' of a type (line 523)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 8), ax_31275, '_hold', _hold_31273)
        
        
        # Getting the type of 'self' (line 526)
        self_31276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 11), 'self')
        # Obtaining the member 'solids' of a type (line 526)
        solids_31277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 11), self_31276, 'solids')
        # Getting the type of 'None' (line 526)
        None_31278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 30), 'None')
        # Applying the binary operator 'isnot' (line 526)
        result_is_not_31279 = python_operator(stypy.reporting.localization.Localization(__file__, 526, 11), 'isnot', solids_31277, None_31278)
        
        # Testing the type of an if condition (line 526)
        if_condition_31280 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 526, 8), result_is_not_31279)
        # Assigning a type to the variable 'if_condition_31280' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'if_condition_31280', if_condition_31280)
        # SSA begins for if statement (line 526)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to remove(...): (line 527)
        # Processing the call keyword arguments (line 527)
        kwargs_31284 = {}
        # Getting the type of 'self' (line 527)
        self_31281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 12), 'self', False)
        # Obtaining the member 'solids' of a type (line 527)
        solids_31282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 12), self_31281, 'solids')
        # Obtaining the member 'remove' of a type (line 527)
        remove_31283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 12), solids_31282, 'remove')
        # Calling remove(args, kwargs) (line 527)
        remove_call_result_31285 = invoke(stypy.reporting.localization.Localization(__file__, 527, 12), remove_31283, *[], **kwargs_31284)
        
        # SSA join for if statement (line 526)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 528):
        
        # Assigning a Name to a Attribute (line 528):
        # Getting the type of 'col' (line 528)
        col_31286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 22), 'col')
        # Getting the type of 'self' (line 528)
        self_31287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'self')
        # Setting the type of the member 'solids' of a type (line 528)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 8), self_31287, 'solids', col_31286)
        
        
        # Getting the type of 'self' (line 529)
        self_31288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 11), 'self')
        # Obtaining the member 'dividers' of a type (line 529)
        dividers_31289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 11), self_31288, 'dividers')
        # Getting the type of 'None' (line 529)
        None_31290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 32), 'None')
        # Applying the binary operator 'isnot' (line 529)
        result_is_not_31291 = python_operator(stypy.reporting.localization.Localization(__file__, 529, 11), 'isnot', dividers_31289, None_31290)
        
        # Testing the type of an if condition (line 529)
        if_condition_31292 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 529, 8), result_is_not_31291)
        # Assigning a type to the variable 'if_condition_31292' (line 529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 8), 'if_condition_31292', if_condition_31292)
        # SSA begins for if statement (line 529)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to remove(...): (line 530)
        # Processing the call keyword arguments (line 530)
        kwargs_31296 = {}
        # Getting the type of 'self' (line 530)
        self_31293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 12), 'self', False)
        # Obtaining the member 'dividers' of a type (line 530)
        dividers_31294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 12), self_31293, 'dividers')
        # Obtaining the member 'remove' of a type (line 530)
        remove_31295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 12), dividers_31294, 'remove')
        # Calling remove(args, kwargs) (line 530)
        remove_call_result_31297 = invoke(stypy.reporting.localization.Localization(__file__, 530, 12), remove_31295, *[], **kwargs_31296)
        
        
        # Assigning a Name to a Attribute (line 531):
        
        # Assigning a Name to a Attribute (line 531):
        # Getting the type of 'None' (line 531)
        None_31298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 28), 'None')
        # Getting the type of 'self' (line 531)
        self_31299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 12), 'self')
        # Setting the type of the member 'dividers' of a type (line 531)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 12), self_31299, 'dividers', None_31298)
        # SSA join for if statement (line 529)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 532)
        self_31300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 11), 'self')
        # Obtaining the member 'drawedges' of a type (line 532)
        drawedges_31301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 11), self_31300, 'drawedges')
        # Testing the type of an if condition (line 532)
        if_condition_31302 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 532, 8), drawedges_31301)
        # Assigning a type to the variable 'if_condition_31302' (line 532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 8), 'if_condition_31302', if_condition_31302)
        # SSA begins for if statement (line 532)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Name (line 533):
        
        # Assigning a Tuple to a Name (line 533):
        
        # Obtaining an instance of the builtin type 'tuple' (line 533)
        tuple_31303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 533)
        # Adding element type (line 533)
        float_31304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 26), 'float')
        
        # Obtaining the type of the subscript
        unicode_31305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 45), 'unicode', u'axes.linewidth')
        # Getting the type of 'mpl' (line 533)
        mpl_31306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 32), 'mpl')
        # Obtaining the member 'rcParams' of a type (line 533)
        rcParams_31307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 32), mpl_31306, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 533)
        getitem___31308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 32), rcParams_31307, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 533)
        subscript_call_result_31309 = invoke(stypy.reporting.localization.Localization(__file__, 533, 32), getitem___31308, unicode_31305)
        
        # Applying the binary operator '*' (line 533)
        result_mul_31310 = python_operator(stypy.reporting.localization.Localization(__file__, 533, 26), '*', float_31304, subscript_call_result_31309)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 533, 26), tuple_31303, result_mul_31310)
        
        # Assigning a type to the variable 'linewidths' (line 533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 12), 'linewidths', tuple_31303)
        
        # Assigning a Call to a Attribute (line 534):
        
        # Assigning a Call to a Attribute (line 534):
        
        # Call to LineCollection(...): (line 534)
        # Processing the call arguments (line 534)
        
        # Call to _edges(...): (line 534)
        # Processing the call arguments (line 534)
        # Getting the type of 'X' (line 534)
        X_31315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 67), 'X', False)
        # Getting the type of 'Y' (line 534)
        Y_31316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 70), 'Y', False)
        # Processing the call keyword arguments (line 534)
        kwargs_31317 = {}
        # Getting the type of 'self' (line 534)
        self_31313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 55), 'self', False)
        # Obtaining the member '_edges' of a type (line 534)
        _edges_31314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 55), self_31313, '_edges')
        # Calling _edges(args, kwargs) (line 534)
        _edges_call_result_31318 = invoke(stypy.reporting.localization.Localization(__file__, 534, 55), _edges_31314, *[X_31315, Y_31316], **kwargs_31317)
        
        # Processing the call keyword arguments (line 534)
        
        # Obtaining an instance of the builtin type 'tuple' (line 535)
        tuple_31319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 535)
        # Adding element type (line 535)
        
        # Obtaining the type of the subscript
        unicode_31320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 57), 'unicode', u'axes.edgecolor')
        # Getting the type of 'mpl' (line 535)
        mpl_31321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 44), 'mpl', False)
        # Obtaining the member 'rcParams' of a type (line 535)
        rcParams_31322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 44), mpl_31321, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 535)
        getitem___31323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 44), rcParams_31322, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 535)
        subscript_call_result_31324 = invoke(stypy.reporting.localization.Localization(__file__, 535, 44), getitem___31323, unicode_31320)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 535, 44), tuple_31319, subscript_call_result_31324)
        
        keyword_31325 = tuple_31319
        # Getting the type of 'linewidths' (line 536)
        linewidths_31326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 47), 'linewidths', False)
        keyword_31327 = linewidths_31326
        kwargs_31328 = {'colors': keyword_31325, 'linewidths': keyword_31327}
        # Getting the type of 'collections' (line 534)
        collections_31311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 28), 'collections', False)
        # Obtaining the member 'LineCollection' of a type (line 534)
        LineCollection_31312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 28), collections_31311, 'LineCollection')
        # Calling LineCollection(args, kwargs) (line 534)
        LineCollection_call_result_31329 = invoke(stypy.reporting.localization.Localization(__file__, 534, 28), LineCollection_31312, *[_edges_call_result_31318], **kwargs_31328)
        
        # Getting the type of 'self' (line 534)
        self_31330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 12), 'self')
        # Setting the type of the member 'dividers' of a type (line 534)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 12), self_31330, 'dividers', LineCollection_call_result_31329)
        
        # Call to add_collection(...): (line 537)
        # Processing the call arguments (line 537)
        # Getting the type of 'self' (line 537)
        self_31334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 35), 'self', False)
        # Obtaining the member 'dividers' of a type (line 537)
        dividers_31335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 35), self_31334, 'dividers')
        # Processing the call keyword arguments (line 537)
        kwargs_31336 = {}
        # Getting the type of 'self' (line 537)
        self_31331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 537)
        ax_31332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 12), self_31331, 'ax')
        # Obtaining the member 'add_collection' of a type (line 537)
        add_collection_31333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 12), ax_31332, 'add_collection')
        # Calling add_collection(args, kwargs) (line 537)
        add_collection_call_result_31337 = invoke(stypy.reporting.localization.Localization(__file__, 537, 12), add_collection_31333, *[dividers_31335], **kwargs_31336)
        
        # SSA branch for the else part of an if statement (line 532)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to len(...): (line 538)
        # Processing the call arguments (line 538)
        # Getting the type of 'self' (line 538)
        self_31339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 17), 'self', False)
        # Obtaining the member '_y' of a type (line 538)
        _y_31340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 17), self_31339, '_y')
        # Processing the call keyword arguments (line 538)
        kwargs_31341 = {}
        # Getting the type of 'len' (line 538)
        len_31338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 13), 'len', False)
        # Calling len(args, kwargs) (line 538)
        len_call_result_31342 = invoke(stypy.reporting.localization.Localization(__file__, 538, 13), len_31338, *[_y_31340], **kwargs_31341)
        
        # Getting the type of 'self' (line 538)
        self_31343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 29), 'self')
        # Obtaining the member 'n_rasterize' of a type (line 538)
        n_rasterize_31344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 29), self_31343, 'n_rasterize')
        # Applying the binary operator '>=' (line 538)
        result_ge_31345 = python_operator(stypy.reporting.localization.Localization(__file__, 538, 13), '>=', len_call_result_31342, n_rasterize_31344)
        
        # Testing the type of an if condition (line 538)
        if_condition_31346 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 538, 13), result_ge_31345)
        # Assigning a type to the variable 'if_condition_31346' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 13), 'if_condition_31346', if_condition_31346)
        # SSA begins for if statement (line 538)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_rasterized(...): (line 539)
        # Processing the call arguments (line 539)
        # Getting the type of 'True' (line 539)
        True_31350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 39), 'True', False)
        # Processing the call keyword arguments (line 539)
        kwargs_31351 = {}
        # Getting the type of 'self' (line 539)
        self_31347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 12), 'self', False)
        # Obtaining the member 'solids' of a type (line 539)
        solids_31348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 12), self_31347, 'solids')
        # Obtaining the member 'set_rasterized' of a type (line 539)
        set_rasterized_31349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 12), solids_31348, 'set_rasterized')
        # Calling set_rasterized(args, kwargs) (line 539)
        set_rasterized_call_result_31352 = invoke(stypy.reporting.localization.Localization(__file__, 539, 12), set_rasterized_31349, *[True_31350], **kwargs_31351)
        
        # SSA join for if statement (line 538)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 532)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_add_solids(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_add_solids' in the type store
        # Getting the type of 'stypy_return_type' (line 504)
        stypy_return_type_31353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31353)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_add_solids'
        return stypy_return_type_31353


    @norecursion
    def add_lines(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 541)
        True_31354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 58), 'True')
        defaults = [True_31354]
        # Create a new context for function 'add_lines'
        module_type_store = module_type_store.open_function_context('add_lines', 541, 4, False)
        # Assigning a type to the variable 'self' (line 542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase.add_lines.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase.add_lines.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase.add_lines.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase.add_lines.__dict__.__setitem__('stypy_function_name', 'ColorbarBase.add_lines')
        ColorbarBase.add_lines.__dict__.__setitem__('stypy_param_names_list', ['levels', 'colors', 'linewidths', 'erase'])
        ColorbarBase.add_lines.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase.add_lines.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase.add_lines.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase.add_lines.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase.add_lines.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase.add_lines.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase.add_lines', ['levels', 'colors', 'linewidths', 'erase'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_lines', localization, ['levels', 'colors', 'linewidths', 'erase'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_lines(...)' code ##################

        unicode_31355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 550, (-1)), 'unicode', u'\n        Draw lines on the colorbar.\n\n        *colors* and *linewidths* must be scalars or\n        sequences the same length as *levels*.\n\n        Set *erase* to False to add lines without first\n        removing any previously added lines.\n        ')
        
        # Assigning a Call to a Name (line 551):
        
        # Assigning a Call to a Name (line 551):
        
        # Call to _locate(...): (line 551)
        # Processing the call arguments (line 551)
        # Getting the type of 'levels' (line 551)
        levels_31358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 25), 'levels', False)
        # Processing the call keyword arguments (line 551)
        kwargs_31359 = {}
        # Getting the type of 'self' (line 551)
        self_31356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 12), 'self', False)
        # Obtaining the member '_locate' of a type (line 551)
        _locate_31357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 12), self_31356, '_locate')
        # Calling _locate(args, kwargs) (line 551)
        _locate_call_result_31360 = invoke(stypy.reporting.localization.Localization(__file__, 551, 12), _locate_31357, *[levels_31358], **kwargs_31359)
        
        # Assigning a type to the variable 'y' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 8), 'y', _locate_call_result_31360)
        
        # Assigning a BinOp to a Name (line 552):
        
        # Assigning a BinOp to a Name (line 552):
        
        # Getting the type of 'y' (line 552)
        y_31361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 17), 'y')
        float_31362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 21), 'float')
        # Applying the binary operator '<' (line 552)
        result_lt_31363 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 17), '<', y_31361, float_31362)
        
        
        # Getting the type of 'y' (line 552)
        y_31364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 31), 'y')
        float_31365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 35), 'float')
        # Applying the binary operator '>' (line 552)
        result_gt_31366 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 31), '>', y_31364, float_31365)
        
        # Applying the binary operator '&' (line 552)
        result_and__31367 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 16), '&', result_lt_31363, result_gt_31366)
        
        # Assigning a type to the variable 'igood' (line 552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 8), 'igood', result_and__31367)
        
        # Assigning a Subscript to a Name (line 553):
        
        # Assigning a Subscript to a Name (line 553):
        
        # Obtaining the type of the subscript
        # Getting the type of 'igood' (line 553)
        igood_31368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 14), 'igood')
        # Getting the type of 'y' (line 553)
        y_31369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'y')
        # Obtaining the member '__getitem__' of a type (line 553)
        getitem___31370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 12), y_31369, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 553)
        subscript_call_result_31371 = invoke(stypy.reporting.localization.Localization(__file__, 553, 12), getitem___31370, igood_31368)
        
        # Assigning a type to the variable 'y' (line 553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 8), 'y', subscript_call_result_31371)
        
        
        # Call to iterable(...): (line 554)
        # Processing the call arguments (line 554)
        # Getting the type of 'colors' (line 554)
        colors_31374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 26), 'colors', False)
        # Processing the call keyword arguments (line 554)
        kwargs_31375 = {}
        # Getting the type of 'cbook' (line 554)
        cbook_31372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 11), 'cbook', False)
        # Obtaining the member 'iterable' of a type (line 554)
        iterable_31373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 11), cbook_31372, 'iterable')
        # Calling iterable(args, kwargs) (line 554)
        iterable_call_result_31376 = invoke(stypy.reporting.localization.Localization(__file__, 554, 11), iterable_31373, *[colors_31374], **kwargs_31375)
        
        # Testing the type of an if condition (line 554)
        if_condition_31377 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 554, 8), iterable_call_result_31376)
        # Assigning a type to the variable 'if_condition_31377' (line 554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 8), 'if_condition_31377', if_condition_31377)
        # SSA begins for if statement (line 554)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 555):
        
        # Assigning a Subscript to a Name (line 555):
        
        # Obtaining the type of the subscript
        # Getting the type of 'igood' (line 555)
        igood_31378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 40), 'igood')
        
        # Call to asarray(...): (line 555)
        # Processing the call arguments (line 555)
        # Getting the type of 'colors' (line 555)
        colors_31381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 32), 'colors', False)
        # Processing the call keyword arguments (line 555)
        kwargs_31382 = {}
        # Getting the type of 'np' (line 555)
        np_31379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 21), 'np', False)
        # Obtaining the member 'asarray' of a type (line 555)
        asarray_31380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 21), np_31379, 'asarray')
        # Calling asarray(args, kwargs) (line 555)
        asarray_call_result_31383 = invoke(stypy.reporting.localization.Localization(__file__, 555, 21), asarray_31380, *[colors_31381], **kwargs_31382)
        
        # Obtaining the member '__getitem__' of a type (line 555)
        getitem___31384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 21), asarray_call_result_31383, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 555)
        subscript_call_result_31385 = invoke(stypy.reporting.localization.Localization(__file__, 555, 21), getitem___31384, igood_31378)
        
        # Assigning a type to the variable 'colors' (line 555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 12), 'colors', subscript_call_result_31385)
        # SSA join for if statement (line 554)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to iterable(...): (line 556)
        # Processing the call arguments (line 556)
        # Getting the type of 'linewidths' (line 556)
        linewidths_31388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 26), 'linewidths', False)
        # Processing the call keyword arguments (line 556)
        kwargs_31389 = {}
        # Getting the type of 'cbook' (line 556)
        cbook_31386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 11), 'cbook', False)
        # Obtaining the member 'iterable' of a type (line 556)
        iterable_31387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 11), cbook_31386, 'iterable')
        # Calling iterable(args, kwargs) (line 556)
        iterable_call_result_31390 = invoke(stypy.reporting.localization.Localization(__file__, 556, 11), iterable_31387, *[linewidths_31388], **kwargs_31389)
        
        # Testing the type of an if condition (line 556)
        if_condition_31391 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 556, 8), iterable_call_result_31390)
        # Assigning a type to the variable 'if_condition_31391' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'if_condition_31391', if_condition_31391)
        # SSA begins for if statement (line 556)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 557):
        
        # Assigning a Subscript to a Name (line 557):
        
        # Obtaining the type of the subscript
        # Getting the type of 'igood' (line 557)
        igood_31392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 48), 'igood')
        
        # Call to asarray(...): (line 557)
        # Processing the call arguments (line 557)
        # Getting the type of 'linewidths' (line 557)
        linewidths_31395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 36), 'linewidths', False)
        # Processing the call keyword arguments (line 557)
        kwargs_31396 = {}
        # Getting the type of 'np' (line 557)
        np_31393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 25), 'np', False)
        # Obtaining the member 'asarray' of a type (line 557)
        asarray_31394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 25), np_31393, 'asarray')
        # Calling asarray(args, kwargs) (line 557)
        asarray_call_result_31397 = invoke(stypy.reporting.localization.Localization(__file__, 557, 25), asarray_31394, *[linewidths_31395], **kwargs_31396)
        
        # Obtaining the member '__getitem__' of a type (line 557)
        getitem___31398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 25), asarray_call_result_31397, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 557)
        subscript_call_result_31399 = invoke(stypy.reporting.localization.Localization(__file__, 557, 25), getitem___31398, igood_31392)
        
        # Assigning a type to the variable 'linewidths' (line 557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'linewidths', subscript_call_result_31399)
        # SSA join for if statement (line 556)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 558):
        
        # Assigning a Call to a Name (line 558):
        
        # Call to len(...): (line 558)
        # Processing the call arguments (line 558)
        # Getting the type of 'y' (line 558)
        y_31401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 16), 'y', False)
        # Processing the call keyword arguments (line 558)
        kwargs_31402 = {}
        # Getting the type of 'len' (line 558)
        len_31400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 12), 'len', False)
        # Calling len(args, kwargs) (line 558)
        len_call_result_31403 = invoke(stypy.reporting.localization.Localization(__file__, 558, 12), len_31400, *[y_31401], **kwargs_31402)
        
        # Assigning a type to the variable 'N' (line 558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 558, 8), 'N', len_call_result_31403)
        
        # Assigning a Call to a Name (line 559):
        
        # Assigning a Call to a Name (line 559):
        
        # Call to array(...): (line 559)
        # Processing the call arguments (line 559)
        
        # Obtaining an instance of the builtin type 'list' (line 559)
        list_31406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 559)
        # Adding element type (line 559)
        float_31407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 22), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 21), list_31406, float_31407)
        # Adding element type (line 559)
        float_31408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 27), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 21), list_31406, float_31408)
        
        # Processing the call keyword arguments (line 559)
        kwargs_31409 = {}
        # Getting the type of 'np' (line 559)
        np_31404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 559)
        array_31405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 12), np_31404, 'array')
        # Calling array(args, kwargs) (line 559)
        array_call_result_31410 = invoke(stypy.reporting.localization.Localization(__file__, 559, 12), array_31405, *[list_31406], **kwargs_31409)
        
        # Assigning a type to the variable 'x' (line 559)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 8), 'x', array_call_result_31410)
        
        # Assigning a Call to a Tuple (line 560):
        
        # Assigning a Call to a Name:
        
        # Call to meshgrid(...): (line 560)
        # Processing the call arguments (line 560)
        # Getting the type of 'x' (line 560)
        x_31413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 27), 'x', False)
        # Getting the type of 'y' (line 560)
        y_31414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 30), 'y', False)
        # Processing the call keyword arguments (line 560)
        kwargs_31415 = {}
        # Getting the type of 'np' (line 560)
        np_31411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 15), 'np', False)
        # Obtaining the member 'meshgrid' of a type (line 560)
        meshgrid_31412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 15), np_31411, 'meshgrid')
        # Calling meshgrid(args, kwargs) (line 560)
        meshgrid_call_result_31416 = invoke(stypy.reporting.localization.Localization(__file__, 560, 15), meshgrid_31412, *[x_31413, y_31414], **kwargs_31415)
        
        # Assigning a type to the variable 'call_assignment_30370' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'call_assignment_30370', meshgrid_call_result_31416)
        
        # Assigning a Call to a Name (line 560):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_31419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 8), 'int')
        # Processing the call keyword arguments
        kwargs_31420 = {}
        # Getting the type of 'call_assignment_30370' (line 560)
        call_assignment_30370_31417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'call_assignment_30370', False)
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___31418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 8), call_assignment_30370_31417, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_31421 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___31418, *[int_31419], **kwargs_31420)
        
        # Assigning a type to the variable 'call_assignment_30371' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'call_assignment_30371', getitem___call_result_31421)
        
        # Assigning a Name to a Name (line 560):
        # Getting the type of 'call_assignment_30371' (line 560)
        call_assignment_30371_31422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'call_assignment_30371')
        # Assigning a type to the variable 'X' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'X', call_assignment_30371_31422)
        
        # Assigning a Call to a Name (line 560):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_31425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 8), 'int')
        # Processing the call keyword arguments
        kwargs_31426 = {}
        # Getting the type of 'call_assignment_30370' (line 560)
        call_assignment_30370_31423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'call_assignment_30370', False)
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___31424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 8), call_assignment_30370_31423, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_31427 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___31424, *[int_31425], **kwargs_31426)
        
        # Assigning a type to the variable 'call_assignment_30372' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'call_assignment_30372', getitem___call_result_31427)
        
        # Assigning a Name to a Name (line 560):
        # Getting the type of 'call_assignment_30372' (line 560)
        call_assignment_30372_31428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'call_assignment_30372')
        # Assigning a type to the variable 'Y' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 11), 'Y', call_assignment_30372_31428)
        
        
        # Getting the type of 'self' (line 561)
        self_31429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 11), 'self')
        # Obtaining the member 'orientation' of a type (line 561)
        orientation_31430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 11), self_31429, 'orientation')
        unicode_31431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 31), 'unicode', u'vertical')
        # Applying the binary operator '==' (line 561)
        result_eq_31432 = python_operator(stypy.reporting.localization.Localization(__file__, 561, 11), '==', orientation_31430, unicode_31431)
        
        # Testing the type of an if condition (line 561)
        if_condition_31433 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 561, 8), result_eq_31432)
        # Assigning a type to the variable 'if_condition_31433' (line 561)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 561, 8), 'if_condition_31433', if_condition_31433)
        # SSA begins for if statement (line 561)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a ListComp to a Name (line 562):
        
        # Assigning a ListComp to a Name (line 562):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to xrange(...): (line 562)
        # Processing the call arguments (line 562)
        # Getting the type of 'N' (line 562)
        N_31449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 56), 'N', False)
        # Processing the call keyword arguments (line 562)
        kwargs_31450 = {}
        # Getting the type of 'xrange' (line 562)
        xrange_31448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 49), 'xrange', False)
        # Calling xrange(args, kwargs) (line 562)
        xrange_call_result_31451 = invoke(stypy.reporting.localization.Localization(__file__, 562, 49), xrange_31448, *[N_31449], **kwargs_31450)
        
        comprehension_31452 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 18), xrange_call_result_31451)
        # Assigning a type to the variable 'i' (line 562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 18), 'i', comprehension_31452)
        
        # Call to list(...): (line 562)
        # Processing the call arguments (line 562)
        
        # Call to zip(...): (line 562)
        # Processing the call arguments (line 562)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 562)
        i_31436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 29), 'i', False)
        # Getting the type of 'X' (line 562)
        X_31437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 27), 'X', False)
        # Obtaining the member '__getitem__' of a type (line 562)
        getitem___31438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 27), X_31437, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 562)
        subscript_call_result_31439 = invoke(stypy.reporting.localization.Localization(__file__, 562, 27), getitem___31438, i_31436)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 562)
        i_31440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 35), 'i', False)
        # Getting the type of 'Y' (line 562)
        Y_31441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 33), 'Y', False)
        # Obtaining the member '__getitem__' of a type (line 562)
        getitem___31442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 33), Y_31441, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 562)
        subscript_call_result_31443 = invoke(stypy.reporting.localization.Localization(__file__, 562, 33), getitem___31442, i_31440)
        
        # Processing the call keyword arguments (line 562)
        kwargs_31444 = {}
        # Getting the type of 'zip' (line 562)
        zip_31435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 23), 'zip', False)
        # Calling zip(args, kwargs) (line 562)
        zip_call_result_31445 = invoke(stypy.reporting.localization.Localization(__file__, 562, 23), zip_31435, *[subscript_call_result_31439, subscript_call_result_31443], **kwargs_31444)
        
        # Processing the call keyword arguments (line 562)
        kwargs_31446 = {}
        # Getting the type of 'list' (line 562)
        list_31434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 18), 'list', False)
        # Calling list(args, kwargs) (line 562)
        list_call_result_31447 = invoke(stypy.reporting.localization.Localization(__file__, 562, 18), list_31434, *[zip_call_result_31445], **kwargs_31446)
        
        list_31453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 18), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 18), list_31453, list_call_result_31447)
        # Assigning a type to the variable 'xy' (line 562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 12), 'xy', list_31453)
        # SSA branch for the else part of an if statement (line 561)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a ListComp to a Name (line 564):
        
        # Assigning a ListComp to a Name (line 564):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to xrange(...): (line 564)
        # Processing the call arguments (line 564)
        # Getting the type of 'N' (line 564)
        N_31469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 56), 'N', False)
        # Processing the call keyword arguments (line 564)
        kwargs_31470 = {}
        # Getting the type of 'xrange' (line 564)
        xrange_31468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 49), 'xrange', False)
        # Calling xrange(args, kwargs) (line 564)
        xrange_call_result_31471 = invoke(stypy.reporting.localization.Localization(__file__, 564, 49), xrange_31468, *[N_31469], **kwargs_31470)
        
        comprehension_31472 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 564, 18), xrange_call_result_31471)
        # Assigning a type to the variable 'i' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 18), 'i', comprehension_31472)
        
        # Call to list(...): (line 564)
        # Processing the call arguments (line 564)
        
        # Call to zip(...): (line 564)
        # Processing the call arguments (line 564)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 564)
        i_31456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 29), 'i', False)
        # Getting the type of 'Y' (line 564)
        Y_31457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 27), 'Y', False)
        # Obtaining the member '__getitem__' of a type (line 564)
        getitem___31458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 27), Y_31457, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 564)
        subscript_call_result_31459 = invoke(stypy.reporting.localization.Localization(__file__, 564, 27), getitem___31458, i_31456)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 564)
        i_31460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 35), 'i', False)
        # Getting the type of 'X' (line 564)
        X_31461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 33), 'X', False)
        # Obtaining the member '__getitem__' of a type (line 564)
        getitem___31462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 33), X_31461, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 564)
        subscript_call_result_31463 = invoke(stypy.reporting.localization.Localization(__file__, 564, 33), getitem___31462, i_31460)
        
        # Processing the call keyword arguments (line 564)
        kwargs_31464 = {}
        # Getting the type of 'zip' (line 564)
        zip_31455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 23), 'zip', False)
        # Calling zip(args, kwargs) (line 564)
        zip_call_result_31465 = invoke(stypy.reporting.localization.Localization(__file__, 564, 23), zip_31455, *[subscript_call_result_31459, subscript_call_result_31463], **kwargs_31464)
        
        # Processing the call keyword arguments (line 564)
        kwargs_31466 = {}
        # Getting the type of 'list' (line 564)
        list_31454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 18), 'list', False)
        # Calling list(args, kwargs) (line 564)
        list_call_result_31467 = invoke(stypy.reporting.localization.Localization(__file__, 564, 18), list_31454, *[zip_call_result_31465], **kwargs_31466)
        
        list_31473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 564, 18), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 564, 18), list_31473, list_call_result_31467)
        # Assigning a type to the variable 'xy' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 12), 'xy', list_31473)
        # SSA join for if statement (line 561)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 565):
        
        # Assigning a Call to a Name (line 565):
        
        # Call to LineCollection(...): (line 565)
        # Processing the call arguments (line 565)
        # Getting the type of 'xy' (line 565)
        xy_31476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 41), 'xy', False)
        # Processing the call keyword arguments (line 565)
        # Getting the type of 'linewidths' (line 565)
        linewidths_31477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 56), 'linewidths', False)
        keyword_31478 = linewidths_31477
        kwargs_31479 = {'linewidths': keyword_31478}
        # Getting the type of 'collections' (line 565)
        collections_31474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 14), 'collections', False)
        # Obtaining the member 'LineCollection' of a type (line 565)
        LineCollection_31475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 14), collections_31474, 'LineCollection')
        # Calling LineCollection(args, kwargs) (line 565)
        LineCollection_call_result_31480 = invoke(stypy.reporting.localization.Localization(__file__, 565, 14), LineCollection_31475, *[xy_31476], **kwargs_31479)
        
        # Assigning a type to the variable 'col' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'col', LineCollection_call_result_31480)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'erase' (line 567)
        erase_31481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 11), 'erase')
        # Getting the type of 'self' (line 567)
        self_31482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 21), 'self')
        # Obtaining the member 'lines' of a type (line 567)
        lines_31483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 21), self_31482, 'lines')
        # Applying the binary operator 'and' (line 567)
        result_and_keyword_31484 = python_operator(stypy.reporting.localization.Localization(__file__, 567, 11), 'and', erase_31481, lines_31483)
        
        # Testing the type of an if condition (line 567)
        if_condition_31485 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 567, 8), result_and_keyword_31484)
        # Assigning a type to the variable 'if_condition_31485' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 8), 'if_condition_31485', if_condition_31485)
        # SSA begins for if statement (line 567)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 568)
        self_31486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 22), 'self')
        # Obtaining the member 'lines' of a type (line 568)
        lines_31487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 22), self_31486, 'lines')
        # Testing the type of a for loop iterable (line 568)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 568, 12), lines_31487)
        # Getting the type of the for loop variable (line 568)
        for_loop_var_31488 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 568, 12), lines_31487)
        # Assigning a type to the variable 'lc' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 12), 'lc', for_loop_var_31488)
        # SSA begins for a for statement (line 568)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to remove(...): (line 569)
        # Processing the call keyword arguments (line 569)
        kwargs_31491 = {}
        # Getting the type of 'lc' (line 569)
        lc_31489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 16), 'lc', False)
        # Obtaining the member 'remove' of a type (line 569)
        remove_31490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 16), lc_31489, 'remove')
        # Calling remove(args, kwargs) (line 569)
        remove_call_result_31492 = invoke(stypy.reporting.localization.Localization(__file__, 569, 16), remove_31490, *[], **kwargs_31491)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Attribute (line 570):
        
        # Assigning a List to a Attribute (line 570):
        
        # Obtaining an instance of the builtin type 'list' (line 570)
        list_31493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 570)
        
        # Getting the type of 'self' (line 570)
        self_31494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 12), 'self')
        # Setting the type of the member 'lines' of a type (line 570)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 12), self_31494, 'lines', list_31493)
        # SSA join for if statement (line 567)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 571)
        # Processing the call arguments (line 571)
        # Getting the type of 'col' (line 571)
        col_31498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 26), 'col', False)
        # Processing the call keyword arguments (line 571)
        kwargs_31499 = {}
        # Getting the type of 'self' (line 571)
        self_31495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 8), 'self', False)
        # Obtaining the member 'lines' of a type (line 571)
        lines_31496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 8), self_31495, 'lines')
        # Obtaining the member 'append' of a type (line 571)
        append_31497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 8), lines_31496, 'append')
        # Calling append(args, kwargs) (line 571)
        append_call_result_31500 = invoke(stypy.reporting.localization.Localization(__file__, 571, 8), append_31497, *[col_31498], **kwargs_31499)
        
        
        # Call to set_color(...): (line 572)
        # Processing the call arguments (line 572)
        # Getting the type of 'colors' (line 572)
        colors_31503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 22), 'colors', False)
        # Processing the call keyword arguments (line 572)
        kwargs_31504 = {}
        # Getting the type of 'col' (line 572)
        col_31501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'col', False)
        # Obtaining the member 'set_color' of a type (line 572)
        set_color_31502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 8), col_31501, 'set_color')
        # Calling set_color(args, kwargs) (line 572)
        set_color_call_result_31505 = invoke(stypy.reporting.localization.Localization(__file__, 572, 8), set_color_31502, *[colors_31503], **kwargs_31504)
        
        
        # Call to add_collection(...): (line 573)
        # Processing the call arguments (line 573)
        # Getting the type of 'col' (line 573)
        col_31509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 31), 'col', False)
        # Processing the call keyword arguments (line 573)
        kwargs_31510 = {}
        # Getting the type of 'self' (line 573)
        self_31506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 8), 'self', False)
        # Obtaining the member 'ax' of a type (line 573)
        ax_31507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 8), self_31506, 'ax')
        # Obtaining the member 'add_collection' of a type (line 573)
        add_collection_31508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 8), ax_31507, 'add_collection')
        # Calling add_collection(args, kwargs) (line 573)
        add_collection_call_result_31511 = invoke(stypy.reporting.localization.Localization(__file__, 573, 8), add_collection_31508, *[col_31509], **kwargs_31510)
        
        
        # Assigning a Name to a Attribute (line 574):
        
        # Assigning a Name to a Attribute (line 574):
        # Getting the type of 'True' (line 574)
        True_31512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 21), 'True')
        # Getting the type of 'self' (line 574)
        self_31513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 574)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 8), self_31513, 'stale', True_31512)
        
        # ################# End of 'add_lines(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_lines' in the type store
        # Getting the type of 'stypy_return_type' (line 541)
        stypy_return_type_31514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31514)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_lines'
        return stypy_return_type_31514


    @norecursion
    def _ticker(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_ticker'
        module_type_store = module_type_store.open_function_context('_ticker', 576, 4, False)
        # Assigning a type to the variable 'self' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._ticker.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._ticker.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._ticker.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._ticker.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._ticker')
        ColorbarBase._ticker.__dict__.__setitem__('stypy_param_names_list', [])
        ColorbarBase._ticker.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._ticker.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._ticker.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._ticker.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._ticker.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._ticker.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._ticker', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_ticker', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_ticker(...)' code ##################

        unicode_31515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 580, (-1)), 'unicode', u'\n        Return the sequence of ticks (colorbar data locations),\n        ticklabels (strings), and the corresponding offset string.\n        ')
        
        # Assigning a Attribute to a Name (line 581):
        
        # Assigning a Attribute to a Name (line 581):
        # Getting the type of 'self' (line 581)
        self_31516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 18), 'self')
        # Obtaining the member 'locator' of a type (line 581)
        locator_31517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 18), self_31516, 'locator')
        # Assigning a type to the variable 'locator' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 8), 'locator', locator_31517)
        
        # Assigning a Attribute to a Name (line 582):
        
        # Assigning a Attribute to a Name (line 582):
        # Getting the type of 'self' (line 582)
        self_31518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 20), 'self')
        # Obtaining the member 'formatter' of a type (line 582)
        formatter_31519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 20), self_31518, 'formatter')
        # Assigning a type to the variable 'formatter' (line 582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 8), 'formatter', formatter_31519)
        
        # Type idiom detected: calculating its left and rigth part (line 583)
        # Getting the type of 'locator' (line 583)
        locator_31520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 11), 'locator')
        # Getting the type of 'None' (line 583)
        None_31521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 22), 'None')
        
        (may_be_31522, more_types_in_union_31523) = may_be_none(locator_31520, None_31521)

        if may_be_31522:

            if more_types_in_union_31523:
                # Runtime conditional SSA (line 583)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Type idiom detected: calculating its left and rigth part (line 584)
            # Getting the type of 'self' (line 584)
            self_31524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 15), 'self')
            # Obtaining the member 'boundaries' of a type (line 584)
            boundaries_31525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 15), self_31524, 'boundaries')
            # Getting the type of 'None' (line 584)
            None_31526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 34), 'None')
            
            (may_be_31527, more_types_in_union_31528) = may_be_none(boundaries_31525, None_31526)

            if may_be_31527:

                if more_types_in_union_31528:
                    # Runtime conditional SSA (line 584)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                
                # Call to isinstance(...): (line 585)
                # Processing the call arguments (line 585)
                # Getting the type of 'self' (line 585)
                self_31530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 30), 'self', False)
                # Obtaining the member 'norm' of a type (line 585)
                norm_31531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 30), self_31530, 'norm')
                # Getting the type of 'colors' (line 585)
                colors_31532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 41), 'colors', False)
                # Obtaining the member 'NoNorm' of a type (line 585)
                NoNorm_31533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 41), colors_31532, 'NoNorm')
                # Processing the call keyword arguments (line 585)
                kwargs_31534 = {}
                # Getting the type of 'isinstance' (line 585)
                isinstance_31529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 19), 'isinstance', False)
                # Calling isinstance(args, kwargs) (line 585)
                isinstance_call_result_31535 = invoke(stypy.reporting.localization.Localization(__file__, 585, 19), isinstance_31529, *[norm_31531, NoNorm_31533], **kwargs_31534)
                
                # Testing the type of an if condition (line 585)
                if_condition_31536 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 585, 16), isinstance_call_result_31535)
                # Assigning a type to the variable 'if_condition_31536' (line 585)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 16), 'if_condition_31536', if_condition_31536)
                # SSA begins for if statement (line 585)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Call to a Name (line 586):
                
                # Assigning a Call to a Name (line 586):
                
                # Call to len(...): (line 586)
                # Processing the call arguments (line 586)
                # Getting the type of 'self' (line 586)
                self_31538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 29), 'self', False)
                # Obtaining the member '_values' of a type (line 586)
                _values_31539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 586, 29), self_31538, '_values')
                # Processing the call keyword arguments (line 586)
                kwargs_31540 = {}
                # Getting the type of 'len' (line 586)
                len_31537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 25), 'len', False)
                # Calling len(args, kwargs) (line 586)
                len_call_result_31541 = invoke(stypy.reporting.localization.Localization(__file__, 586, 25), len_31537, *[_values_31539], **kwargs_31540)
                
                # Assigning a type to the variable 'nv' (line 586)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 20), 'nv', len_call_result_31541)
                
                # Assigning a BinOp to a Name (line 587):
                
                # Assigning a BinOp to a Name (line 587):
                int_31542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 587, 27), 'int')
                
                # Call to int(...): (line 587)
                # Processing the call arguments (line 587)
                # Getting the type of 'nv' (line 587)
                nv_31544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 35), 'nv', False)
                int_31545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 587, 40), 'int')
                # Applying the binary operator 'div' (line 587)
                result_div_31546 = python_operator(stypy.reporting.localization.Localization(__file__, 587, 35), 'div', nv_31544, int_31545)
                
                # Processing the call keyword arguments (line 587)
                kwargs_31547 = {}
                # Getting the type of 'int' (line 587)
                int_31543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 31), 'int', False)
                # Calling int(args, kwargs) (line 587)
                int_call_result_31548 = invoke(stypy.reporting.localization.Localization(__file__, 587, 31), int_31543, *[result_div_31546], **kwargs_31547)
                
                # Applying the binary operator '+' (line 587)
                result_add_31549 = python_operator(stypy.reporting.localization.Localization(__file__, 587, 27), '+', int_31542, int_call_result_31548)
                
                # Assigning a type to the variable 'base' (line 587)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 20), 'base', result_add_31549)
                
                # Assigning a Call to a Name (line 588):
                
                # Assigning a Call to a Name (line 588):
                
                # Call to IndexLocator(...): (line 588)
                # Processing the call keyword arguments (line 588)
                # Getting the type of 'base' (line 588)
                base_31552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 55), 'base', False)
                keyword_31553 = base_31552
                int_31554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, 68), 'int')
                keyword_31555 = int_31554
                kwargs_31556 = {'base': keyword_31553, 'offset': keyword_31555}
                # Getting the type of 'ticker' (line 588)
                ticker_31550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 30), 'ticker', False)
                # Obtaining the member 'IndexLocator' of a type (line 588)
                IndexLocator_31551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 30), ticker_31550, 'IndexLocator')
                # Calling IndexLocator(args, kwargs) (line 588)
                IndexLocator_call_result_31557 = invoke(stypy.reporting.localization.Localization(__file__, 588, 30), IndexLocator_31551, *[], **kwargs_31556)
                
                # Assigning a type to the variable 'locator' (line 588)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 20), 'locator', IndexLocator_call_result_31557)
                # SSA branch for the else part of an if statement (line 585)
                module_type_store.open_ssa_branch('else')
                
                
                # Call to isinstance(...): (line 589)
                # Processing the call arguments (line 589)
                # Getting the type of 'self' (line 589)
                self_31559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 32), 'self', False)
                # Obtaining the member 'norm' of a type (line 589)
                norm_31560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 32), self_31559, 'norm')
                # Getting the type of 'colors' (line 589)
                colors_31561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 43), 'colors', False)
                # Obtaining the member 'BoundaryNorm' of a type (line 589)
                BoundaryNorm_31562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 43), colors_31561, 'BoundaryNorm')
                # Processing the call keyword arguments (line 589)
                kwargs_31563 = {}
                # Getting the type of 'isinstance' (line 589)
                isinstance_31558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 21), 'isinstance', False)
                # Calling isinstance(args, kwargs) (line 589)
                isinstance_call_result_31564 = invoke(stypy.reporting.localization.Localization(__file__, 589, 21), isinstance_31558, *[norm_31560, BoundaryNorm_31562], **kwargs_31563)
                
                # Testing the type of an if condition (line 589)
                if_condition_31565 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 589, 21), isinstance_call_result_31564)
                # Assigning a type to the variable 'if_condition_31565' (line 589)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 21), 'if_condition_31565', if_condition_31565)
                # SSA begins for if statement (line 589)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Attribute to a Name (line 590):
                
                # Assigning a Attribute to a Name (line 590):
                # Getting the type of 'self' (line 590)
                self_31566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 24), 'self')
                # Obtaining the member 'norm' of a type (line 590)
                norm_31567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 24), self_31566, 'norm')
                # Obtaining the member 'boundaries' of a type (line 590)
                boundaries_31568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 24), norm_31567, 'boundaries')
                # Assigning a type to the variable 'b' (line 590)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 20), 'b', boundaries_31568)
                
                # Assigning a Call to a Name (line 591):
                
                # Assigning a Call to a Name (line 591):
                
                # Call to FixedLocator(...): (line 591)
                # Processing the call arguments (line 591)
                # Getting the type of 'b' (line 591)
                b_31571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 50), 'b', False)
                # Processing the call keyword arguments (line 591)
                int_31572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 59), 'int')
                keyword_31573 = int_31572
                kwargs_31574 = {'nbins': keyword_31573}
                # Getting the type of 'ticker' (line 591)
                ticker_31569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 30), 'ticker', False)
                # Obtaining the member 'FixedLocator' of a type (line 591)
                FixedLocator_31570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 30), ticker_31569, 'FixedLocator')
                # Calling FixedLocator(args, kwargs) (line 591)
                FixedLocator_call_result_31575 = invoke(stypy.reporting.localization.Localization(__file__, 591, 30), FixedLocator_31570, *[b_31571], **kwargs_31574)
                
                # Assigning a type to the variable 'locator' (line 591)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 20), 'locator', FixedLocator_call_result_31575)
                # SSA branch for the else part of an if statement (line 589)
                module_type_store.open_ssa_branch('else')
                
                
                # Call to isinstance(...): (line 592)
                # Processing the call arguments (line 592)
                # Getting the type of 'self' (line 592)
                self_31577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 32), 'self', False)
                # Obtaining the member 'norm' of a type (line 592)
                norm_31578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 32), self_31577, 'norm')
                # Getting the type of 'colors' (line 592)
                colors_31579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 43), 'colors', False)
                # Obtaining the member 'LogNorm' of a type (line 592)
                LogNorm_31580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 43), colors_31579, 'LogNorm')
                # Processing the call keyword arguments (line 592)
                kwargs_31581 = {}
                # Getting the type of 'isinstance' (line 592)
                isinstance_31576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 21), 'isinstance', False)
                # Calling isinstance(args, kwargs) (line 592)
                isinstance_call_result_31582 = invoke(stypy.reporting.localization.Localization(__file__, 592, 21), isinstance_31576, *[norm_31578, LogNorm_31580], **kwargs_31581)
                
                # Testing the type of an if condition (line 592)
                if_condition_31583 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 592, 21), isinstance_call_result_31582)
                # Assigning a type to the variable 'if_condition_31583' (line 592)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 21), 'if_condition_31583', if_condition_31583)
                # SSA begins for if statement (line 592)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Call to a Name (line 593):
                
                # Assigning a Call to a Name (line 593):
                
                # Call to LogLocator(...): (line 593)
                # Processing the call keyword arguments (line 593)
                unicode_31586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 593, 53), 'unicode', u'all')
                keyword_31587 = unicode_31586
                kwargs_31588 = {'subs': keyword_31587}
                # Getting the type of 'ticker' (line 593)
                ticker_31584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 30), 'ticker', False)
                # Obtaining the member 'LogLocator' of a type (line 593)
                LogLocator_31585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 30), ticker_31584, 'LogLocator')
                # Calling LogLocator(args, kwargs) (line 593)
                LogLocator_call_result_31589 = invoke(stypy.reporting.localization.Localization(__file__, 593, 30), LogLocator_31585, *[], **kwargs_31588)
                
                # Assigning a type to the variable 'locator' (line 593)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 20), 'locator', LogLocator_call_result_31589)
                # SSA branch for the else part of an if statement (line 592)
                module_type_store.open_ssa_branch('else')
                
                
                # Call to isinstance(...): (line 594)
                # Processing the call arguments (line 594)
                # Getting the type of 'self' (line 594)
                self_31591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 32), 'self', False)
                # Obtaining the member 'norm' of a type (line 594)
                norm_31592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 32), self_31591, 'norm')
                # Getting the type of 'colors' (line 594)
                colors_31593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 43), 'colors', False)
                # Obtaining the member 'SymLogNorm' of a type (line 594)
                SymLogNorm_31594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 43), colors_31593, 'SymLogNorm')
                # Processing the call keyword arguments (line 594)
                kwargs_31595 = {}
                # Getting the type of 'isinstance' (line 594)
                isinstance_31590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 21), 'isinstance', False)
                # Calling isinstance(args, kwargs) (line 594)
                isinstance_call_result_31596 = invoke(stypy.reporting.localization.Localization(__file__, 594, 21), isinstance_31590, *[norm_31592, SymLogNorm_31594], **kwargs_31595)
                
                # Testing the type of an if condition (line 594)
                if_condition_31597 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 594, 21), isinstance_call_result_31596)
                # Assigning a type to the variable 'if_condition_31597' (line 594)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 21), 'if_condition_31597', if_condition_31597)
                # SSA begins for if statement (line 594)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Call to a Name (line 597):
                
                # Assigning a Call to a Name (line 597):
                
                # Call to SymmetricalLogLocator(...): (line 597)
                # Processing the call keyword arguments (line 597)
                
                # Call to arange(...): (line 598)
                # Processing the call arguments (line 598)
                int_31602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 53), 'int')
                int_31603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 56), 'int')
                # Processing the call keyword arguments (line 598)
                kwargs_31604 = {}
                # Getting the type of 'np' (line 598)
                np_31600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 43), 'np', False)
                # Obtaining the member 'arange' of a type (line 598)
                arange_31601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 43), np_31600, 'arange')
                # Calling arange(args, kwargs) (line 598)
                arange_call_result_31605 = invoke(stypy.reporting.localization.Localization(__file__, 598, 43), arange_31601, *[int_31602, int_31603], **kwargs_31604)
                
                keyword_31606 = arange_call_result_31605
                # Getting the type of 'self' (line 599)
                self_31607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 48), 'self', False)
                # Obtaining the member 'norm' of a type (line 599)
                norm_31608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 48), self_31607, 'norm')
                # Obtaining the member 'linthresh' of a type (line 599)
                linthresh_31609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 48), norm_31608, 'linthresh')
                keyword_31610 = linthresh_31609
                int_31611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 600, 43), 'int')
                keyword_31612 = int_31611
                kwargs_31613 = {'base': keyword_31612, 'subs': keyword_31606, 'linthresh': keyword_31610}
                # Getting the type of 'ticker' (line 597)
                ticker_31598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 30), 'ticker', False)
                # Obtaining the member 'SymmetricalLogLocator' of a type (line 597)
                SymmetricalLogLocator_31599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 30), ticker_31598, 'SymmetricalLogLocator')
                # Calling SymmetricalLogLocator(args, kwargs) (line 597)
                SymmetricalLogLocator_call_result_31614 = invoke(stypy.reporting.localization.Localization(__file__, 597, 30), SymmetricalLogLocator_31599, *[], **kwargs_31613)
                
                # Assigning a type to the variable 'locator' (line 597)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 20), 'locator', SymmetricalLogLocator_call_result_31614)
                # SSA branch for the else part of an if statement (line 594)
                module_type_store.open_ssa_branch('else')
                
                
                # Obtaining the type of the subscript
                unicode_31615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 36), 'unicode', u'_internal.classic_mode')
                # Getting the type of 'mpl' (line 602)
                mpl_31616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 23), 'mpl')
                # Obtaining the member 'rcParams' of a type (line 602)
                rcParams_31617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 23), mpl_31616, 'rcParams')
                # Obtaining the member '__getitem__' of a type (line 602)
                getitem___31618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 23), rcParams_31617, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 602)
                subscript_call_result_31619 = invoke(stypy.reporting.localization.Localization(__file__, 602, 23), getitem___31618, unicode_31615)
                
                # Testing the type of an if condition (line 602)
                if_condition_31620 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 602, 20), subscript_call_result_31619)
                # Assigning a type to the variable 'if_condition_31620' (line 602)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 20), 'if_condition_31620', if_condition_31620)
                # SSA begins for if statement (line 602)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Call to a Name (line 603):
                
                # Assigning a Call to a Name (line 603):
                
                # Call to MaxNLocator(...): (line 603)
                # Processing the call keyword arguments (line 603)
                kwargs_31623 = {}
                # Getting the type of 'ticker' (line 603)
                ticker_31621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 34), 'ticker', False)
                # Obtaining the member 'MaxNLocator' of a type (line 603)
                MaxNLocator_31622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 34), ticker_31621, 'MaxNLocator')
                # Calling MaxNLocator(args, kwargs) (line 603)
                MaxNLocator_call_result_31624 = invoke(stypy.reporting.localization.Localization(__file__, 603, 34), MaxNLocator_31622, *[], **kwargs_31623)
                
                # Assigning a type to the variable 'locator' (line 603)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 24), 'locator', MaxNLocator_call_result_31624)
                # SSA branch for the else part of an if statement (line 602)
                module_type_store.open_ssa_branch('else')
                
                # Assigning a Call to a Name (line 605):
                
                # Assigning a Call to a Name (line 605):
                
                # Call to AutoLocator(...): (line 605)
                # Processing the call keyword arguments (line 605)
                kwargs_31627 = {}
                # Getting the type of 'ticker' (line 605)
                ticker_31625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 34), 'ticker', False)
                # Obtaining the member 'AutoLocator' of a type (line 605)
                AutoLocator_31626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 34), ticker_31625, 'AutoLocator')
                # Calling AutoLocator(args, kwargs) (line 605)
                AutoLocator_call_result_31628 = invoke(stypy.reporting.localization.Localization(__file__, 605, 34), AutoLocator_31626, *[], **kwargs_31627)
                
                # Assigning a type to the variable 'locator' (line 605)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 24), 'locator', AutoLocator_call_result_31628)
                # SSA join for if statement (line 602)
                module_type_store = module_type_store.join_ssa_context()
                
                # SSA join for if statement (line 594)
                module_type_store = module_type_store.join_ssa_context()
                
                # SSA join for if statement (line 592)
                module_type_store = module_type_store.join_ssa_context()
                
                # SSA join for if statement (line 589)
                module_type_store = module_type_store.join_ssa_context()
                
                # SSA join for if statement (line 585)
                module_type_store = module_type_store.join_ssa_context()
                

                if more_types_in_union_31528:
                    # Runtime conditional SSA for else branch (line 584)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_31527) or more_types_in_union_31528):
                
                # Assigning a Subscript to a Name (line 607):
                
                # Assigning a Subscript to a Name (line 607):
                
                # Obtaining the type of the subscript
                # Getting the type of 'self' (line 607)
                self_31629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 37), 'self')
                # Obtaining the member '_inside' of a type (line 607)
                _inside_31630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 37), self_31629, '_inside')
                # Getting the type of 'self' (line 607)
                self_31631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 20), 'self')
                # Obtaining the member '_boundaries' of a type (line 607)
                _boundaries_31632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 20), self_31631, '_boundaries')
                # Obtaining the member '__getitem__' of a type (line 607)
                getitem___31633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 20), _boundaries_31632, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 607)
                subscript_call_result_31634 = invoke(stypy.reporting.localization.Localization(__file__, 607, 20), getitem___31633, _inside_31630)
                
                # Assigning a type to the variable 'b' (line 607)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 16), 'b', subscript_call_result_31634)
                
                # Assigning a Call to a Name (line 608):
                
                # Assigning a Call to a Name (line 608):
                
                # Call to FixedLocator(...): (line 608)
                # Processing the call arguments (line 608)
                # Getting the type of 'b' (line 608)
                b_31637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 46), 'b', False)
                # Processing the call keyword arguments (line 608)
                int_31638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 608, 55), 'int')
                keyword_31639 = int_31638
                kwargs_31640 = {'nbins': keyword_31639}
                # Getting the type of 'ticker' (line 608)
                ticker_31635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 26), 'ticker', False)
                # Obtaining the member 'FixedLocator' of a type (line 608)
                FixedLocator_31636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 26), ticker_31635, 'FixedLocator')
                # Calling FixedLocator(args, kwargs) (line 608)
                FixedLocator_call_result_31641 = invoke(stypy.reporting.localization.Localization(__file__, 608, 26), FixedLocator_31636, *[b_31637], **kwargs_31640)
                
                # Assigning a type to the variable 'locator' (line 608)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 608, 16), 'locator', FixedLocator_call_result_31641)

                if (may_be_31527 and more_types_in_union_31528):
                    # SSA join for if statement (line 584)
                    module_type_store = module_type_store.join_ssa_context()


            

            if more_types_in_union_31523:
                # SSA join for if statement (line 583)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 609)
        # Processing the call arguments (line 609)
        # Getting the type of 'self' (line 609)
        self_31643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 22), 'self', False)
        # Obtaining the member 'norm' of a type (line 609)
        norm_31644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 22), self_31643, 'norm')
        # Getting the type of 'colors' (line 609)
        colors_31645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 33), 'colors', False)
        # Obtaining the member 'NoNorm' of a type (line 609)
        NoNorm_31646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 33), colors_31645, 'NoNorm')
        # Processing the call keyword arguments (line 609)
        kwargs_31647 = {}
        # Getting the type of 'isinstance' (line 609)
        isinstance_31642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 609)
        isinstance_call_result_31648 = invoke(stypy.reporting.localization.Localization(__file__, 609, 11), isinstance_31642, *[norm_31644, NoNorm_31646], **kwargs_31647)
        
        
        # Getting the type of 'self' (line 609)
        self_31649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 52), 'self')
        # Obtaining the member 'boundaries' of a type (line 609)
        boundaries_31650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 52), self_31649, 'boundaries')
        # Getting the type of 'None' (line 609)
        None_31651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 71), 'None')
        # Applying the binary operator 'is' (line 609)
        result_is__31652 = python_operator(stypy.reporting.localization.Localization(__file__, 609, 52), 'is', boundaries_31650, None_31651)
        
        # Applying the binary operator 'and' (line 609)
        result_and_keyword_31653 = python_operator(stypy.reporting.localization.Localization(__file__, 609, 11), 'and', isinstance_call_result_31648, result_is__31652)
        
        # Testing the type of an if condition (line 609)
        if_condition_31654 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 609, 8), result_and_keyword_31653)
        # Assigning a type to the variable 'if_condition_31654' (line 609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 8), 'if_condition_31654', if_condition_31654)
        # SSA begins for if statement (line 609)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Name (line 610):
        
        # Assigning a Tuple to a Name (line 610):
        
        # Obtaining an instance of the builtin type 'tuple' (line 610)
        tuple_31655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 610)
        # Adding element type (line 610)
        
        # Obtaining the type of the subscript
        int_31656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 32), 'int')
        # Getting the type of 'self' (line 610)
        self_31657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 19), 'self')
        # Obtaining the member '_values' of a type (line 610)
        _values_31658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 19), self_31657, '_values')
        # Obtaining the member '__getitem__' of a type (line 610)
        getitem___31659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 19), _values_31658, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 610)
        subscript_call_result_31660 = invoke(stypy.reporting.localization.Localization(__file__, 610, 19), getitem___31659, int_31656)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 610, 19), tuple_31655, subscript_call_result_31660)
        # Adding element type (line 610)
        
        # Obtaining the type of the subscript
        int_31661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 49), 'int')
        # Getting the type of 'self' (line 610)
        self_31662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 36), 'self')
        # Obtaining the member '_values' of a type (line 610)
        _values_31663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 36), self_31662, '_values')
        # Obtaining the member '__getitem__' of a type (line 610)
        getitem___31664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 36), _values_31663, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 610)
        subscript_call_result_31665 = invoke(stypy.reporting.localization.Localization(__file__, 610, 36), getitem___31664, int_31661)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 610, 19), tuple_31655, subscript_call_result_31665)
        
        # Assigning a type to the variable 'intv' (line 610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 12), 'intv', tuple_31655)
        # SSA branch for the else part of an if statement (line 609)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Name (line 612):
        
        # Assigning a Tuple to a Name (line 612):
        
        # Obtaining an instance of the builtin type 'tuple' (line 612)
        tuple_31666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 612)
        # Adding element type (line 612)
        # Getting the type of 'self' (line 612)
        self_31667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 19), 'self')
        # Obtaining the member 'vmin' of a type (line 612)
        vmin_31668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 19), self_31667, 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 612, 19), tuple_31666, vmin_31668)
        # Adding element type (line 612)
        # Getting the type of 'self' (line 612)
        self_31669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 30), 'self')
        # Obtaining the member 'vmax' of a type (line 612)
        vmax_31670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 30), self_31669, 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 612, 19), tuple_31666, vmax_31670)
        
        # Assigning a type to the variable 'intv' (line 612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 12), 'intv', tuple_31666)
        # SSA join for if statement (line 609)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to create_dummy_axis(...): (line 613)
        # Processing the call keyword arguments (line 613)
        
        # Obtaining the type of the subscript
        int_31673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 46), 'int')
        # Getting the type of 'intv' (line 613)
        intv_31674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 41), 'intv', False)
        # Obtaining the member '__getitem__' of a type (line 613)
        getitem___31675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 41), intv_31674, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 613)
        subscript_call_result_31676 = invoke(stypy.reporting.localization.Localization(__file__, 613, 41), getitem___31675, int_31673)
        
        keyword_31677 = subscript_call_result_31676
        kwargs_31678 = {'minpos': keyword_31677}
        # Getting the type of 'locator' (line 613)
        locator_31671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 8), 'locator', False)
        # Obtaining the member 'create_dummy_axis' of a type (line 613)
        create_dummy_axis_31672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 8), locator_31671, 'create_dummy_axis')
        # Calling create_dummy_axis(args, kwargs) (line 613)
        create_dummy_axis_call_result_31679 = invoke(stypy.reporting.localization.Localization(__file__, 613, 8), create_dummy_axis_31672, *[], **kwargs_31678)
        
        
        # Call to create_dummy_axis(...): (line 614)
        # Processing the call keyword arguments (line 614)
        
        # Obtaining the type of the subscript
        int_31682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 48), 'int')
        # Getting the type of 'intv' (line 614)
        intv_31683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 43), 'intv', False)
        # Obtaining the member '__getitem__' of a type (line 614)
        getitem___31684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 43), intv_31683, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 614)
        subscript_call_result_31685 = invoke(stypy.reporting.localization.Localization(__file__, 614, 43), getitem___31684, int_31682)
        
        keyword_31686 = subscript_call_result_31685
        kwargs_31687 = {'minpos': keyword_31686}
        # Getting the type of 'formatter' (line 614)
        formatter_31680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 8), 'formatter', False)
        # Obtaining the member 'create_dummy_axis' of a type (line 614)
        create_dummy_axis_31681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 8), formatter_31680, 'create_dummy_axis')
        # Calling create_dummy_axis(args, kwargs) (line 614)
        create_dummy_axis_call_result_31688 = invoke(stypy.reporting.localization.Localization(__file__, 614, 8), create_dummy_axis_31681, *[], **kwargs_31687)
        
        
        # Call to set_view_interval(...): (line 615)
        # Getting the type of 'intv' (line 615)
        intv_31691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 35), 'intv', False)
        # Processing the call keyword arguments (line 615)
        kwargs_31692 = {}
        # Getting the type of 'locator' (line 615)
        locator_31689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 8), 'locator', False)
        # Obtaining the member 'set_view_interval' of a type (line 615)
        set_view_interval_31690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 8), locator_31689, 'set_view_interval')
        # Calling set_view_interval(args, kwargs) (line 615)
        set_view_interval_call_result_31693 = invoke(stypy.reporting.localization.Localization(__file__, 615, 8), set_view_interval_31690, *[intv_31691], **kwargs_31692)
        
        
        # Call to set_data_interval(...): (line 616)
        # Getting the type of 'intv' (line 616)
        intv_31696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 35), 'intv', False)
        # Processing the call keyword arguments (line 616)
        kwargs_31697 = {}
        # Getting the type of 'locator' (line 616)
        locator_31694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'locator', False)
        # Obtaining the member 'set_data_interval' of a type (line 616)
        set_data_interval_31695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 8), locator_31694, 'set_data_interval')
        # Calling set_data_interval(args, kwargs) (line 616)
        set_data_interval_call_result_31698 = invoke(stypy.reporting.localization.Localization(__file__, 616, 8), set_data_interval_31695, *[intv_31696], **kwargs_31697)
        
        
        # Call to set_view_interval(...): (line 617)
        # Getting the type of 'intv' (line 617)
        intv_31701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 37), 'intv', False)
        # Processing the call keyword arguments (line 617)
        kwargs_31702 = {}
        # Getting the type of 'formatter' (line 617)
        formatter_31699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'formatter', False)
        # Obtaining the member 'set_view_interval' of a type (line 617)
        set_view_interval_31700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 8), formatter_31699, 'set_view_interval')
        # Calling set_view_interval(args, kwargs) (line 617)
        set_view_interval_call_result_31703 = invoke(stypy.reporting.localization.Localization(__file__, 617, 8), set_view_interval_31700, *[intv_31701], **kwargs_31702)
        
        
        # Call to set_data_interval(...): (line 618)
        # Getting the type of 'intv' (line 618)
        intv_31706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 37), 'intv', False)
        # Processing the call keyword arguments (line 618)
        kwargs_31707 = {}
        # Getting the type of 'formatter' (line 618)
        formatter_31704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), 'formatter', False)
        # Obtaining the member 'set_data_interval' of a type (line 618)
        set_data_interval_31705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 8), formatter_31704, 'set_data_interval')
        # Calling set_data_interval(args, kwargs) (line 618)
        set_data_interval_call_result_31708 = invoke(stypy.reporting.localization.Localization(__file__, 618, 8), set_data_interval_31705, *[intv_31706], **kwargs_31707)
        
        
        # Assigning a Call to a Name (line 620):
        
        # Assigning a Call to a Name (line 620):
        
        # Call to array(...): (line 620)
        # Processing the call arguments (line 620)
        
        # Call to locator(...): (line 620)
        # Processing the call keyword arguments (line 620)
        kwargs_31712 = {}
        # Getting the type of 'locator' (line 620)
        locator_31711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 21), 'locator', False)
        # Calling locator(args, kwargs) (line 620)
        locator_call_result_31713 = invoke(stypy.reporting.localization.Localization(__file__, 620, 21), locator_31711, *[], **kwargs_31712)
        
        # Processing the call keyword arguments (line 620)
        kwargs_31714 = {}
        # Getting the type of 'np' (line 620)
        np_31709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 620)
        array_31710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 12), np_31709, 'array')
        # Calling array(args, kwargs) (line 620)
        array_call_result_31715 = invoke(stypy.reporting.localization.Localization(__file__, 620, 12), array_31710, *[locator_call_result_31713], **kwargs_31714)
        
        # Assigning a type to the variable 'b' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 'b', array_call_result_31715)
        
        
        # Call to isinstance(...): (line 621)
        # Processing the call arguments (line 621)
        # Getting the type of 'locator' (line 621)
        locator_31717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 22), 'locator', False)
        # Getting the type of 'ticker' (line 621)
        ticker_31718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 31), 'ticker', False)
        # Obtaining the member 'LogLocator' of a type (line 621)
        LogLocator_31719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 31), ticker_31718, 'LogLocator')
        # Processing the call keyword arguments (line 621)
        kwargs_31720 = {}
        # Getting the type of 'isinstance' (line 621)
        isinstance_31716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 621)
        isinstance_call_result_31721 = invoke(stypy.reporting.localization.Localization(__file__, 621, 11), isinstance_31716, *[locator_31717, LogLocator_31719], **kwargs_31720)
        
        # Testing the type of an if condition (line 621)
        if_condition_31722 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 621, 8), isinstance_call_result_31721)
        # Assigning a type to the variable 'if_condition_31722' (line 621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 8), 'if_condition_31722', if_condition_31722)
        # SSA begins for if statement (line 621)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 622):
        
        # Assigning a Num to a Name (line 622):
        float_31723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 622, 18), 'float')
        # Assigning a type to the variable 'eps' (line 622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 12), 'eps', float_31723)
        
        # Assigning a Subscript to a Name (line 623):
        
        # Assigning a Subscript to a Name (line 623):
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'b' (line 623)
        b_31724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 19), 'b')
        
        # Obtaining the type of the subscript
        int_31725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 623, 29), 'int')
        # Getting the type of 'intv' (line 623)
        intv_31726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 24), 'intv')
        # Obtaining the member '__getitem__' of a type (line 623)
        getitem___31727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 24), intv_31726, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 623)
        subscript_call_result_31728 = invoke(stypy.reporting.localization.Localization(__file__, 623, 24), getitem___31727, int_31725)
        
        int_31729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 623, 35), 'int')
        # Getting the type of 'eps' (line 623)
        eps_31730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 39), 'eps')
        # Applying the binary operator '+' (line 623)
        result_add_31731 = python_operator(stypy.reporting.localization.Localization(__file__, 623, 35), '+', int_31729, eps_31730)
        
        # Applying the binary operator '*' (line 623)
        result_mul_31732 = python_operator(stypy.reporting.localization.Localization(__file__, 623, 24), '*', subscript_call_result_31728, result_add_31731)
        
        # Applying the binary operator '<=' (line 623)
        result_le_31733 = python_operator(stypy.reporting.localization.Localization(__file__, 623, 19), '<=', b_31724, result_mul_31732)
        
        
        # Getting the type of 'b' (line 623)
        b_31734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 48), 'b')
        
        # Obtaining the type of the subscript
        int_31735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 623, 58), 'int')
        # Getting the type of 'intv' (line 623)
        intv_31736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 53), 'intv')
        # Obtaining the member '__getitem__' of a type (line 623)
        getitem___31737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 53), intv_31736, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 623)
        subscript_call_result_31738 = invoke(stypy.reporting.localization.Localization(__file__, 623, 53), getitem___31737, int_31735)
        
        int_31739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 623, 64), 'int')
        # Getting the type of 'eps' (line 623)
        eps_31740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 68), 'eps')
        # Applying the binary operator '-' (line 623)
        result_sub_31741 = python_operator(stypy.reporting.localization.Localization(__file__, 623, 64), '-', int_31739, eps_31740)
        
        # Applying the binary operator '*' (line 623)
        result_mul_31742 = python_operator(stypy.reporting.localization.Localization(__file__, 623, 53), '*', subscript_call_result_31738, result_sub_31741)
        
        # Applying the binary operator '>=' (line 623)
        result_ge_31743 = python_operator(stypy.reporting.localization.Localization(__file__, 623, 48), '>=', b_31734, result_mul_31742)
        
        # Applying the binary operator '&' (line 623)
        result_and__31744 = python_operator(stypy.reporting.localization.Localization(__file__, 623, 18), '&', result_le_31733, result_ge_31743)
        
        # Getting the type of 'b' (line 623)
        b_31745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 16), 'b')
        # Obtaining the member '__getitem__' of a type (line 623)
        getitem___31746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 16), b_31745, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 623)
        subscript_call_result_31747 = invoke(stypy.reporting.localization.Localization(__file__, 623, 16), getitem___31746, result_and__31744)
        
        # Assigning a type to the variable 'b' (line 623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 12), 'b', subscript_call_result_31747)
        # SSA branch for the else part of an if statement (line 621)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 625):
        
        # Assigning a BinOp to a Name (line 625):
        
        # Obtaining the type of the subscript
        int_31748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 24), 'int')
        # Getting the type of 'intv' (line 625)
        intv_31749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 19), 'intv')
        # Obtaining the member '__getitem__' of a type (line 625)
        getitem___31750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 19), intv_31749, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 625)
        subscript_call_result_31751 = invoke(stypy.reporting.localization.Localization(__file__, 625, 19), getitem___31750, int_31748)
        
        
        # Obtaining the type of the subscript
        int_31752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 34), 'int')
        # Getting the type of 'intv' (line 625)
        intv_31753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 29), 'intv')
        # Obtaining the member '__getitem__' of a type (line 625)
        getitem___31754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 29), intv_31753, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 625)
        subscript_call_result_31755 = invoke(stypy.reporting.localization.Localization(__file__, 625, 29), getitem___31754, int_31752)
        
        # Applying the binary operator '-' (line 625)
        result_sub_31756 = python_operator(stypy.reporting.localization.Localization(__file__, 625, 19), '-', subscript_call_result_31751, subscript_call_result_31755)
        
        float_31757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 40), 'float')
        # Applying the binary operator '*' (line 625)
        result_mul_31758 = python_operator(stypy.reporting.localization.Localization(__file__, 625, 18), '*', result_sub_31756, float_31757)
        
        # Assigning a type to the variable 'eps' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 12), 'eps', result_mul_31758)
        
        # Assigning a Subscript to a Name (line 626):
        
        # Assigning a Subscript to a Name (line 626):
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'b' (line 626)
        b_31759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 19), 'b')
        
        # Obtaining the type of the subscript
        int_31760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 29), 'int')
        # Getting the type of 'intv' (line 626)
        intv_31761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 24), 'intv')
        # Obtaining the member '__getitem__' of a type (line 626)
        getitem___31762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 24), intv_31761, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 626)
        subscript_call_result_31763 = invoke(stypy.reporting.localization.Localization(__file__, 626, 24), getitem___31762, int_31760)
        
        # Getting the type of 'eps' (line 626)
        eps_31764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 34), 'eps')
        # Applying the binary operator '+' (line 626)
        result_add_31765 = python_operator(stypy.reporting.localization.Localization(__file__, 626, 24), '+', subscript_call_result_31763, eps_31764)
        
        # Applying the binary operator '<=' (line 626)
        result_le_31766 = python_operator(stypy.reporting.localization.Localization(__file__, 626, 19), '<=', b_31759, result_add_31765)
        
        
        # Getting the type of 'b' (line 626)
        b_31767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 42), 'b')
        
        # Obtaining the type of the subscript
        int_31768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 52), 'int')
        # Getting the type of 'intv' (line 626)
        intv_31769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 47), 'intv')
        # Obtaining the member '__getitem__' of a type (line 626)
        getitem___31770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 47), intv_31769, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 626)
        subscript_call_result_31771 = invoke(stypy.reporting.localization.Localization(__file__, 626, 47), getitem___31770, int_31768)
        
        # Getting the type of 'eps' (line 626)
        eps_31772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 57), 'eps')
        # Applying the binary operator '-' (line 626)
        result_sub_31773 = python_operator(stypy.reporting.localization.Localization(__file__, 626, 47), '-', subscript_call_result_31771, eps_31772)
        
        # Applying the binary operator '>=' (line 626)
        result_ge_31774 = python_operator(stypy.reporting.localization.Localization(__file__, 626, 42), '>=', b_31767, result_sub_31773)
        
        # Applying the binary operator '&' (line 626)
        result_and__31775 = python_operator(stypy.reporting.localization.Localization(__file__, 626, 18), '&', result_le_31766, result_ge_31774)
        
        # Getting the type of 'b' (line 626)
        b_31776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 16), 'b')
        # Obtaining the member '__getitem__' of a type (line 626)
        getitem___31777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 16), b_31776, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 626)
        subscript_call_result_31778 = invoke(stypy.reporting.localization.Localization(__file__, 626, 16), getitem___31777, result_and__31775)
        
        # Assigning a type to the variable 'b' (line 626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 12), 'b', subscript_call_result_31778)
        # SSA join for if statement (line 621)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 627):
        
        # Assigning a Name to a Attribute (line 627):
        # Getting the type of 'b' (line 627)
        b_31779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 33), 'b')
        # Getting the type of 'self' (line 627)
        self_31780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 8), 'self')
        # Setting the type of the member '_tick_data_values' of a type (line 627)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 8), self_31780, '_tick_data_values', b_31779)
        
        # Assigning a Call to a Name (line 628):
        
        # Assigning a Call to a Name (line 628):
        
        # Call to _locate(...): (line 628)
        # Processing the call arguments (line 628)
        # Getting the type of 'b' (line 628)
        b_31783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 29), 'b', False)
        # Processing the call keyword arguments (line 628)
        kwargs_31784 = {}
        # Getting the type of 'self' (line 628)
        self_31781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 16), 'self', False)
        # Obtaining the member '_locate' of a type (line 628)
        _locate_31782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 16), self_31781, '_locate')
        # Calling _locate(args, kwargs) (line 628)
        _locate_call_result_31785 = invoke(stypy.reporting.localization.Localization(__file__, 628, 16), _locate_31782, *[b_31783], **kwargs_31784)
        
        # Assigning a type to the variable 'ticks' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 8), 'ticks', _locate_call_result_31785)
        
        # Call to set_locs(...): (line 629)
        # Processing the call arguments (line 629)
        # Getting the type of 'b' (line 629)
        b_31788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 27), 'b', False)
        # Processing the call keyword arguments (line 629)
        kwargs_31789 = {}
        # Getting the type of 'formatter' (line 629)
        formatter_31786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 8), 'formatter', False)
        # Obtaining the member 'set_locs' of a type (line 629)
        set_locs_31787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 8), formatter_31786, 'set_locs')
        # Calling set_locs(args, kwargs) (line 629)
        set_locs_call_result_31790 = invoke(stypy.reporting.localization.Localization(__file__, 629, 8), set_locs_31787, *[b_31788], **kwargs_31789)
        
        
        # Assigning a ListComp to a Name (line 630):
        
        # Assigning a ListComp to a Name (line 630):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to enumerate(...): (line 630)
        # Processing the call arguments (line 630)
        # Getting the type of 'b' (line 630)
        b_31797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 60), 'b', False)
        # Processing the call keyword arguments (line 630)
        kwargs_31798 = {}
        # Getting the type of 'enumerate' (line 630)
        enumerate_31796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 50), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 630)
        enumerate_call_result_31799 = invoke(stypy.reporting.localization.Localization(__file__, 630, 50), enumerate_31796, *[b_31797], **kwargs_31798)
        
        comprehension_31800 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 630, 22), enumerate_call_result_31799)
        # Assigning a type to the variable 'i' (line 630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 22), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 630, 22), comprehension_31800))
        # Assigning a type to the variable 't' (line 630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 22), 't', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 630, 22), comprehension_31800))
        
        # Call to formatter(...): (line 630)
        # Processing the call arguments (line 630)
        # Getting the type of 't' (line 630)
        t_31792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 32), 't', False)
        # Getting the type of 'i' (line 630)
        i_31793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 35), 'i', False)
        # Processing the call keyword arguments (line 630)
        kwargs_31794 = {}
        # Getting the type of 'formatter' (line 630)
        formatter_31791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 22), 'formatter', False)
        # Calling formatter(args, kwargs) (line 630)
        formatter_call_result_31795 = invoke(stypy.reporting.localization.Localization(__file__, 630, 22), formatter_31791, *[t_31792, i_31793], **kwargs_31794)
        
        list_31801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 22), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 630, 22), list_31801, formatter_call_result_31795)
        # Assigning a type to the variable 'ticklabels' (line 630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 8), 'ticklabels', list_31801)
        
        # Assigning a Call to a Name (line 631):
        
        # Assigning a Call to a Name (line 631):
        
        # Call to get_offset(...): (line 631)
        # Processing the call keyword arguments (line 631)
        kwargs_31804 = {}
        # Getting the type of 'formatter' (line 631)
        formatter_31802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 24), 'formatter', False)
        # Obtaining the member 'get_offset' of a type (line 631)
        get_offset_31803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 631, 24), formatter_31802, 'get_offset')
        # Calling get_offset(args, kwargs) (line 631)
        get_offset_call_result_31805 = invoke(stypy.reporting.localization.Localization(__file__, 631, 24), get_offset_31803, *[], **kwargs_31804)
        
        # Assigning a type to the variable 'offset_string' (line 631)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 631, 8), 'offset_string', get_offset_call_result_31805)
        
        # Obtaining an instance of the builtin type 'tuple' (line 632)
        tuple_31806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 632, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 632)
        # Adding element type (line 632)
        # Getting the type of 'ticks' (line 632)
        ticks_31807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 15), 'ticks')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 632, 15), tuple_31806, ticks_31807)
        # Adding element type (line 632)
        # Getting the type of 'ticklabels' (line 632)
        ticklabels_31808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 22), 'ticklabels')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 632, 15), tuple_31806, ticklabels_31808)
        # Adding element type (line 632)
        # Getting the type of 'offset_string' (line 632)
        offset_string_31809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 34), 'offset_string')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 632, 15), tuple_31806, offset_string_31809)
        
        # Assigning a type to the variable 'stypy_return_type' (line 632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 632, 8), 'stypy_return_type', tuple_31806)
        
        # ################# End of '_ticker(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_ticker' in the type store
        # Getting the type of 'stypy_return_type' (line 576)
        stypy_return_type_31810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31810)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_ticker'
        return stypy_return_type_31810


    @norecursion
    def _process_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 634)
        None_31811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 32), 'None')
        defaults = [None_31811]
        # Create a new context for function '_process_values'
        module_type_store = module_type_store.open_function_context('_process_values', 634, 4, False)
        # Assigning a type to the variable 'self' (line 635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._process_values.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._process_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._process_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._process_values.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._process_values')
        ColorbarBase._process_values.__dict__.__setitem__('stypy_param_names_list', ['b'])
        ColorbarBase._process_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._process_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._process_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._process_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._process_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._process_values.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._process_values', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_values', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_values(...)' code ##################

        unicode_31812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, (-1)), 'unicode', u'\n        Set the :attr:`_boundaries` and :attr:`_values` attributes\n        based on the input boundaries and values.  Input boundaries\n        can be *self.boundaries* or the argument *b*.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 640)
        # Getting the type of 'b' (line 640)
        b_31813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 11), 'b')
        # Getting the type of 'None' (line 640)
        None_31814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 16), 'None')
        
        (may_be_31815, more_types_in_union_31816) = may_be_none(b_31813, None_31814)

        if may_be_31815:

            if more_types_in_union_31816:
                # Runtime conditional SSA (line 640)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 641):
            
            # Assigning a Attribute to a Name (line 641):
            # Getting the type of 'self' (line 641)
            self_31817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 16), 'self')
            # Obtaining the member 'boundaries' of a type (line 641)
            boundaries_31818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 641, 16), self_31817, 'boundaries')
            # Assigning a type to the variable 'b' (line 641)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 12), 'b', boundaries_31818)

            if more_types_in_union_31816:
                # SSA join for if statement (line 640)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 642)
        # Getting the type of 'b' (line 642)
        b_31819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 8), 'b')
        # Getting the type of 'None' (line 642)
        None_31820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 20), 'None')
        
        (may_be_31821, more_types_in_union_31822) = may_not_be_none(b_31819, None_31820)

        if may_be_31821:

            if more_types_in_union_31822:
                # Runtime conditional SSA (line 642)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 643):
            
            # Assigning a Call to a Attribute (line 643):
            
            # Call to asarray(...): (line 643)
            # Processing the call arguments (line 643)
            # Getting the type of 'b' (line 643)
            b_31825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 42), 'b', False)
            # Processing the call keyword arguments (line 643)
            # Getting the type of 'float' (line 643)
            float_31826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 51), 'float', False)
            keyword_31827 = float_31826
            kwargs_31828 = {'dtype': keyword_31827}
            # Getting the type of 'np' (line 643)
            np_31823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 31), 'np', False)
            # Obtaining the member 'asarray' of a type (line 643)
            asarray_31824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 31), np_31823, 'asarray')
            # Calling asarray(args, kwargs) (line 643)
            asarray_call_result_31829 = invoke(stypy.reporting.localization.Localization(__file__, 643, 31), asarray_31824, *[b_31825], **kwargs_31828)
            
            # Getting the type of 'self' (line 643)
            self_31830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 12), 'self')
            # Setting the type of the member '_boundaries' of a type (line 643)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 12), self_31830, '_boundaries', asarray_call_result_31829)
            
            # Type idiom detected: calculating its left and rigth part (line 644)
            # Getting the type of 'self' (line 644)
            self_31831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 15), 'self')
            # Obtaining the member 'values' of a type (line 644)
            values_31832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 15), self_31831, 'values')
            # Getting the type of 'None' (line 644)
            None_31833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 30), 'None')
            
            (may_be_31834, more_types_in_union_31835) = may_be_none(values_31832, None_31833)

            if may_be_31834:

                if more_types_in_union_31835:
                    # Runtime conditional SSA (line 644)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a BinOp to a Attribute (line 645):
                
                # Assigning a BinOp to a Attribute (line 645):
                float_31836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 645, 31), 'float')
                
                # Obtaining the type of the subscript
                int_31837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 645, 56), 'int')
                slice_31838 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 645, 38), None, int_31837, None)
                # Getting the type of 'self' (line 645)
                self_31839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 38), 'self')
                # Obtaining the member '_boundaries' of a type (line 645)
                _boundaries_31840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 38), self_31839, '_boundaries')
                # Obtaining the member '__getitem__' of a type (line 645)
                getitem___31841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 38), _boundaries_31840, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 645)
                subscript_call_result_31842 = invoke(stypy.reporting.localization.Localization(__file__, 645, 38), getitem___31841, slice_31838)
                
                
                # Obtaining the type of the subscript
                int_31843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 646, 57), 'int')
                slice_31844 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 646, 40), int_31843, None, None)
                # Getting the type of 'self' (line 646)
                self_31845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 40), 'self')
                # Obtaining the member '_boundaries' of a type (line 646)
                _boundaries_31846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 40), self_31845, '_boundaries')
                # Obtaining the member '__getitem__' of a type (line 646)
                getitem___31847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 40), _boundaries_31846, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 646)
                subscript_call_result_31848 = invoke(stypy.reporting.localization.Localization(__file__, 646, 40), getitem___31847, slice_31844)
                
                # Applying the binary operator '+' (line 645)
                result_add_31849 = python_operator(stypy.reporting.localization.Localization(__file__, 645, 38), '+', subscript_call_result_31842, subscript_call_result_31848)
                
                # Applying the binary operator '*' (line 645)
                result_mul_31850 = python_operator(stypy.reporting.localization.Localization(__file__, 645, 31), '*', float_31836, result_add_31849)
                
                # Getting the type of 'self' (line 645)
                self_31851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 16), 'self')
                # Setting the type of the member '_values' of a type (line 645)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 16), self_31851, '_values', result_mul_31850)
                
                
                # Call to isinstance(...): (line 647)
                # Processing the call arguments (line 647)
                # Getting the type of 'self' (line 647)
                self_31853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 30), 'self', False)
                # Obtaining the member 'norm' of a type (line 647)
                norm_31854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 30), self_31853, 'norm')
                # Getting the type of 'colors' (line 647)
                colors_31855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 41), 'colors', False)
                # Obtaining the member 'NoNorm' of a type (line 647)
                NoNorm_31856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 41), colors_31855, 'NoNorm')
                # Processing the call keyword arguments (line 647)
                kwargs_31857 = {}
                # Getting the type of 'isinstance' (line 647)
                isinstance_31852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 19), 'isinstance', False)
                # Calling isinstance(args, kwargs) (line 647)
                isinstance_call_result_31858 = invoke(stypy.reporting.localization.Localization(__file__, 647, 19), isinstance_31852, *[norm_31854, NoNorm_31856], **kwargs_31857)
                
                # Testing the type of an if condition (line 647)
                if_condition_31859 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 647, 16), isinstance_call_result_31858)
                # Assigning a type to the variable 'if_condition_31859' (line 647)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 16), 'if_condition_31859', if_condition_31859)
                # SSA begins for if statement (line 647)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Call to a Attribute (line 648):
                
                # Assigning a Call to a Attribute (line 648):
                
                # Call to astype(...): (line 648)
                # Processing the call arguments (line 648)
                # Getting the type of 'np' (line 648)
                np_31865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 67), 'np', False)
                # Obtaining the member 'int16' of a type (line 648)
                int16_31866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 67), np_31865, 'int16')
                # Processing the call keyword arguments (line 648)
                kwargs_31867 = {}
                # Getting the type of 'self' (line 648)
                self_31860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 36), 'self', False)
                # Obtaining the member '_values' of a type (line 648)
                _values_31861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 36), self_31860, '_values')
                float_31862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 51), 'float')
                # Applying the binary operator '+' (line 648)
                result_add_31863 = python_operator(stypy.reporting.localization.Localization(__file__, 648, 36), '+', _values_31861, float_31862)
                
                # Obtaining the member 'astype' of a type (line 648)
                astype_31864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 36), result_add_31863, 'astype')
                # Calling astype(args, kwargs) (line 648)
                astype_call_result_31868 = invoke(stypy.reporting.localization.Localization(__file__, 648, 36), astype_31864, *[int16_31866], **kwargs_31867)
                
                # Getting the type of 'self' (line 648)
                self_31869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 20), 'self')
                # Setting the type of the member '_values' of a type (line 648)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 20), self_31869, '_values', astype_call_result_31868)
                # SSA join for if statement (line 647)
                module_type_store = module_type_store.join_ssa_context()
                
                # Assigning a type to the variable 'stypy_return_type' (line 649)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 16), 'stypy_return_type', types.NoneType)

                if more_types_in_union_31835:
                    # SSA join for if statement (line 644)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Assigning a Call to a Attribute (line 650):
            
            # Assigning a Call to a Attribute (line 650):
            
            # Call to array(...): (line 650)
            # Processing the call arguments (line 650)
            # Getting the type of 'self' (line 650)
            self_31872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 36), 'self', False)
            # Obtaining the member 'values' of a type (line 650)
            values_31873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 36), self_31872, 'values')
            # Processing the call keyword arguments (line 650)
            kwargs_31874 = {}
            # Getting the type of 'np' (line 650)
            np_31870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 27), 'np', False)
            # Obtaining the member 'array' of a type (line 650)
            array_31871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 27), np_31870, 'array')
            # Calling array(args, kwargs) (line 650)
            array_call_result_31875 = invoke(stypy.reporting.localization.Localization(__file__, 650, 27), array_31871, *[values_31873], **kwargs_31874)
            
            # Getting the type of 'self' (line 650)
            self_31876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 12), 'self')
            # Setting the type of the member '_values' of a type (line 650)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 12), self_31876, '_values', array_call_result_31875)
            # Assigning a type to the variable 'stypy_return_type' (line 651)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 651, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_31822:
                # SSA join for if statement (line 642)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'self' (line 652)
        self_31877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 11), 'self')
        # Obtaining the member 'values' of a type (line 652)
        values_31878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 11), self_31877, 'values')
        # Getting the type of 'None' (line 652)
        None_31879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 30), 'None')
        # Applying the binary operator 'isnot' (line 652)
        result_is_not_31880 = python_operator(stypy.reporting.localization.Localization(__file__, 652, 11), 'isnot', values_31878, None_31879)
        
        # Testing the type of an if condition (line 652)
        if_condition_31881 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 652, 8), result_is_not_31880)
        # Assigning a type to the variable 'if_condition_31881' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'if_condition_31881', if_condition_31881)
        # SSA begins for if statement (line 652)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 653):
        
        # Assigning a Call to a Attribute (line 653):
        
        # Call to array(...): (line 653)
        # Processing the call arguments (line 653)
        # Getting the type of 'self' (line 653)
        self_31884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 36), 'self', False)
        # Obtaining the member 'values' of a type (line 653)
        values_31885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 36), self_31884, 'values')
        # Processing the call keyword arguments (line 653)
        kwargs_31886 = {}
        # Getting the type of 'np' (line 653)
        np_31882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 27), 'np', False)
        # Obtaining the member 'array' of a type (line 653)
        array_31883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 27), np_31882, 'array')
        # Calling array(args, kwargs) (line 653)
        array_call_result_31887 = invoke(stypy.reporting.localization.Localization(__file__, 653, 27), array_31883, *[values_31885], **kwargs_31886)
        
        # Getting the type of 'self' (line 653)
        self_31888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 12), 'self')
        # Setting the type of the member '_values' of a type (line 653)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 12), self_31888, '_values', array_call_result_31887)
        
        # Type idiom detected: calculating its left and rigth part (line 654)
        # Getting the type of 'self' (line 654)
        self_31889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 15), 'self')
        # Obtaining the member 'boundaries' of a type (line 654)
        boundaries_31890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 15), self_31889, 'boundaries')
        # Getting the type of 'None' (line 654)
        None_31891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 34), 'None')
        
        (may_be_31892, more_types_in_union_31893) = may_be_none(boundaries_31890, None_31891)

        if may_be_31892:

            if more_types_in_union_31893:
                # Runtime conditional SSA (line 654)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 655):
            
            # Assigning a Call to a Name (line 655):
            
            # Call to zeros(...): (line 655)
            # Processing the call arguments (line 655)
            
            # Call to len(...): (line 655)
            # Processing the call arguments (line 655)
            # Getting the type of 'self' (line 655)
            self_31897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 33), 'self', False)
            # Obtaining the member 'values' of a type (line 655)
            values_31898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 33), self_31897, 'values')
            # Processing the call keyword arguments (line 655)
            kwargs_31899 = {}
            # Getting the type of 'len' (line 655)
            len_31896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 29), 'len', False)
            # Calling len(args, kwargs) (line 655)
            len_call_result_31900 = invoke(stypy.reporting.localization.Localization(__file__, 655, 29), len_31896, *[values_31898], **kwargs_31899)
            
            int_31901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 655, 48), 'int')
            # Applying the binary operator '+' (line 655)
            result_add_31902 = python_operator(stypy.reporting.localization.Localization(__file__, 655, 29), '+', len_call_result_31900, int_31901)
            
            unicode_31903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 655, 51), 'unicode', u'd')
            # Processing the call keyword arguments (line 655)
            kwargs_31904 = {}
            # Getting the type of 'np' (line 655)
            np_31894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 20), 'np', False)
            # Obtaining the member 'zeros' of a type (line 655)
            zeros_31895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 20), np_31894, 'zeros')
            # Calling zeros(args, kwargs) (line 655)
            zeros_call_result_31905 = invoke(stypy.reporting.localization.Localization(__file__, 655, 20), zeros_31895, *[result_add_31902, unicode_31903], **kwargs_31904)
            
            # Assigning a type to the variable 'b' (line 655)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 16), 'b', zeros_call_result_31905)
            
            # Assigning a BinOp to a Subscript (line 656):
            
            # Assigning a BinOp to a Subscript (line 656):
            float_31906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 26), 'float')
            
            # Obtaining the type of the subscript
            int_31907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 47), 'int')
            slice_31908 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 656, 33), None, int_31907, None)
            # Getting the type of 'self' (line 656)
            self_31909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 33), 'self')
            # Obtaining the member '_values' of a type (line 656)
            _values_31910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 33), self_31909, '_values')
            # Obtaining the member '__getitem__' of a type (line 656)
            getitem___31911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 33), _values_31910, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 656)
            subscript_call_result_31912 = invoke(stypy.reporting.localization.Localization(__file__, 656, 33), getitem___31911, slice_31908)
            
            
            # Obtaining the type of the subscript
            int_31913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 66), 'int')
            slice_31914 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 656, 53), int_31913, None, None)
            # Getting the type of 'self' (line 656)
            self_31915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 53), 'self')
            # Obtaining the member '_values' of a type (line 656)
            _values_31916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 53), self_31915, '_values')
            # Obtaining the member '__getitem__' of a type (line 656)
            getitem___31917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 53), _values_31916, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 656)
            subscript_call_result_31918 = invoke(stypy.reporting.localization.Localization(__file__, 656, 53), getitem___31917, slice_31914)
            
            # Applying the binary operator '-' (line 656)
            result_sub_31919 = python_operator(stypy.reporting.localization.Localization(__file__, 656, 33), '-', subscript_call_result_31912, subscript_call_result_31918)
            
            # Applying the binary operator '*' (line 656)
            result_mul_31920 = python_operator(stypy.reporting.localization.Localization(__file__, 656, 26), '*', float_31906, result_sub_31919)
            
            # Getting the type of 'b' (line 656)
            b_31921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 16), 'b')
            int_31922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 18), 'int')
            int_31923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 20), 'int')
            slice_31924 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 656, 16), int_31922, int_31923, None)
            # Storing an element on a container (line 656)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 656, 16), b_31921, (slice_31924, result_mul_31920))
            
            # Assigning a BinOp to a Subscript (line 657):
            
            # Assigning a BinOp to a Subscript (line 657):
            float_31925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 657, 23), 'float')
            
            # Obtaining the type of the subscript
            int_31926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 657, 31), 'int')
            # Getting the type of 'b' (line 657)
            b_31927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 29), 'b')
            # Obtaining the member '__getitem__' of a type (line 657)
            getitem___31928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 657, 29), b_31927, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 657)
            subscript_call_result_31929 = invoke(stypy.reporting.localization.Localization(__file__, 657, 29), getitem___31928, int_31926)
            
            # Applying the binary operator '*' (line 657)
            result_mul_31930 = python_operator(stypy.reporting.localization.Localization(__file__, 657, 23), '*', float_31925, subscript_call_result_31929)
            
            
            # Obtaining the type of the subscript
            int_31931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 657, 38), 'int')
            # Getting the type of 'b' (line 657)
            b_31932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 36), 'b')
            # Obtaining the member '__getitem__' of a type (line 657)
            getitem___31933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 657, 36), b_31932, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 657)
            subscript_call_result_31934 = invoke(stypy.reporting.localization.Localization(__file__, 657, 36), getitem___31933, int_31931)
            
            # Applying the binary operator '-' (line 657)
            result_sub_31935 = python_operator(stypy.reporting.localization.Localization(__file__, 657, 23), '-', result_mul_31930, subscript_call_result_31934)
            
            # Getting the type of 'b' (line 657)
            b_31936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 16), 'b')
            int_31937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 657, 18), 'int')
            # Storing an element on a container (line 657)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 657, 16), b_31936, (int_31937, result_sub_31935))
            
            # Assigning a BinOp to a Subscript (line 658):
            
            # Assigning a BinOp to a Subscript (line 658):
            float_31938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, 24), 'float')
            
            # Obtaining the type of the subscript
            int_31939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, 32), 'int')
            # Getting the type of 'b' (line 658)
            b_31940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 30), 'b')
            # Obtaining the member '__getitem__' of a type (line 658)
            getitem___31941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 30), b_31940, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 658)
            subscript_call_result_31942 = invoke(stypy.reporting.localization.Localization(__file__, 658, 30), getitem___31941, int_31939)
            
            # Applying the binary operator '*' (line 658)
            result_mul_31943 = python_operator(stypy.reporting.localization.Localization(__file__, 658, 24), '*', float_31938, subscript_call_result_31942)
            
            
            # Obtaining the type of the subscript
            int_31944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, 40), 'int')
            # Getting the type of 'b' (line 658)
            b_31945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 38), 'b')
            # Obtaining the member '__getitem__' of a type (line 658)
            getitem___31946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 38), b_31945, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 658)
            subscript_call_result_31947 = invoke(stypy.reporting.localization.Localization(__file__, 658, 38), getitem___31946, int_31944)
            
            # Applying the binary operator '-' (line 658)
            result_sub_31948 = python_operator(stypy.reporting.localization.Localization(__file__, 658, 24), '-', result_mul_31943, subscript_call_result_31947)
            
            # Getting the type of 'b' (line 658)
            b_31949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 16), 'b')
            int_31950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, 18), 'int')
            # Storing an element on a container (line 658)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 658, 16), b_31949, (int_31950, result_sub_31948))
            
            # Assigning a Name to a Attribute (line 659):
            
            # Assigning a Name to a Attribute (line 659):
            # Getting the type of 'b' (line 659)
            b_31951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 35), 'b')
            # Getting the type of 'self' (line 659)
            self_31952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 16), 'self')
            # Setting the type of the member '_boundaries' of a type (line 659)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 16), self_31952, '_boundaries', b_31951)
            # Assigning a type to the variable 'stypy_return_type' (line 660)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 16), 'stypy_return_type', types.NoneType)

            if more_types_in_union_31893:
                # SSA join for if statement (line 654)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 661):
        
        # Assigning a Call to a Attribute (line 661):
        
        # Call to array(...): (line 661)
        # Processing the call arguments (line 661)
        # Getting the type of 'self' (line 661)
        self_31955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 40), 'self', False)
        # Obtaining the member 'boundaries' of a type (line 661)
        boundaries_31956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 40), self_31955, 'boundaries')
        # Processing the call keyword arguments (line 661)
        kwargs_31957 = {}
        # Getting the type of 'np' (line 661)
        np_31953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 31), 'np', False)
        # Obtaining the member 'array' of a type (line 661)
        array_31954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 31), np_31953, 'array')
        # Calling array(args, kwargs) (line 661)
        array_call_result_31958 = invoke(stypy.reporting.localization.Localization(__file__, 661, 31), array_31954, *[boundaries_31956], **kwargs_31957)
        
        # Getting the type of 'self' (line 661)
        self_31959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 12), 'self')
        # Setting the type of the member '_boundaries' of a type (line 661)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 12), self_31959, '_boundaries', array_call_result_31958)
        # Assigning a type to the variable 'stypy_return_type' (line 662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 662, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 652)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to isinstance(...): (line 665)
        # Processing the call arguments (line 665)
        # Getting the type of 'self' (line 665)
        self_31961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 22), 'self', False)
        # Obtaining the member 'norm' of a type (line 665)
        norm_31962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 22), self_31961, 'norm')
        # Getting the type of 'colors' (line 665)
        colors_31963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 33), 'colors', False)
        # Obtaining the member 'NoNorm' of a type (line 665)
        NoNorm_31964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 33), colors_31963, 'NoNorm')
        # Processing the call keyword arguments (line 665)
        kwargs_31965 = {}
        # Getting the type of 'isinstance' (line 665)
        isinstance_31960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 665)
        isinstance_call_result_31966 = invoke(stypy.reporting.localization.Localization(__file__, 665, 11), isinstance_31960, *[norm_31962, NoNorm_31964], **kwargs_31965)
        
        # Testing the type of an if condition (line 665)
        if_condition_31967 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 665, 8), isinstance_call_result_31966)
        # Assigning a type to the variable 'if_condition_31967' (line 665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 8), 'if_condition_31967', if_condition_31967)
        # SSA begins for if statement (line 665)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 666):
        
        # Assigning a BinOp to a Name (line 666):
        
        # Call to _uniform_y(...): (line 666)
        # Processing the call arguments (line 666)
        # Getting the type of 'self' (line 666)
        self_31970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 32), 'self', False)
        # Obtaining the member 'cmap' of a type (line 666)
        cmap_31971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 32), self_31970, 'cmap')
        # Obtaining the member 'N' of a type (line 666)
        N_31972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 32), cmap_31971, 'N')
        int_31973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 46), 'int')
        # Applying the binary operator '+' (line 666)
        result_add_31974 = python_operator(stypy.reporting.localization.Localization(__file__, 666, 32), '+', N_31972, int_31973)
        
        # Processing the call keyword arguments (line 666)
        kwargs_31975 = {}
        # Getting the type of 'self' (line 666)
        self_31968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 16), 'self', False)
        # Obtaining the member '_uniform_y' of a type (line 666)
        _uniform_y_31969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 16), self_31968, '_uniform_y')
        # Calling _uniform_y(args, kwargs) (line 666)
        _uniform_y_call_result_31976 = invoke(stypy.reporting.localization.Localization(__file__, 666, 16), _uniform_y_31969, *[result_add_31974], **kwargs_31975)
        
        # Getting the type of 'self' (line 666)
        self_31977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 51), 'self')
        # Obtaining the member 'cmap' of a type (line 666)
        cmap_31978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 51), self_31977, 'cmap')
        # Obtaining the member 'N' of a type (line 666)
        N_31979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 51), cmap_31978, 'N')
        # Applying the binary operator '*' (line 666)
        result_mul_31980 = python_operator(stypy.reporting.localization.Localization(__file__, 666, 16), '*', _uniform_y_call_result_31976, N_31979)
        
        float_31981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 65), 'float')
        # Applying the binary operator '-' (line 666)
        result_sub_31982 = python_operator(stypy.reporting.localization.Localization(__file__, 666, 16), '-', result_mul_31980, float_31981)
        
        # Assigning a type to the variable 'b' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 12), 'b', result_sub_31982)
        
        # Assigning a Call to a Name (line 667):
        
        # Assigning a Call to a Name (line 667):
        
        # Call to zeros(...): (line 667)
        # Processing the call arguments (line 667)
        
        # Obtaining an instance of the builtin type 'tuple' (line 667)
        tuple_31985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 667)
        # Adding element type (line 667)
        
        # Call to len(...): (line 667)
        # Processing the call arguments (line 667)
        # Getting the type of 'b' (line 667)
        b_31987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 30), 'b', False)
        # Processing the call keyword arguments (line 667)
        kwargs_31988 = {}
        # Getting the type of 'len' (line 667)
        len_31986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 26), 'len', False)
        # Calling len(args, kwargs) (line 667)
        len_call_result_31989 = invoke(stypy.reporting.localization.Localization(__file__, 667, 26), len_31986, *[b_31987], **kwargs_31988)
        
        int_31990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 35), 'int')
        # Applying the binary operator '-' (line 667)
        result_sub_31991 = python_operator(stypy.reporting.localization.Localization(__file__, 667, 26), '-', len_call_result_31989, int_31990)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 26), tuple_31985, result_sub_31991)
        
        # Processing the call keyword arguments (line 667)
        # Getting the type of 'np' (line 667)
        np_31992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 46), 'np', False)
        # Obtaining the member 'int16' of a type (line 667)
        int16_31993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 46), np_31992, 'int16')
        keyword_31994 = int16_31993
        kwargs_31995 = {'dtype': keyword_31994}
        # Getting the type of 'np' (line 667)
        np_31983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 16), 'np', False)
        # Obtaining the member 'zeros' of a type (line 667)
        zeros_31984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 16), np_31983, 'zeros')
        # Calling zeros(args, kwargs) (line 667)
        zeros_call_result_31996 = invoke(stypy.reporting.localization.Localization(__file__, 667, 16), zeros_31984, *[tuple_31985], **kwargs_31995)
        
        # Assigning a type to the variable 'v' (line 667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 667, 12), 'v', zeros_call_result_31996)
        
        # Assigning a Call to a Subscript (line 668):
        
        # Assigning a Call to a Subscript (line 668):
        
        # Call to arange(...): (line 668)
        # Processing the call arguments (line 668)
        # Getting the type of 'self' (line 668)
        self_31999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 40), 'self', False)
        # Obtaining the member 'cmap' of a type (line 668)
        cmap_32000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 40), self_31999, 'cmap')
        # Obtaining the member 'N' of a type (line 668)
        N_32001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 40), cmap_32000, 'N')
        # Processing the call keyword arguments (line 668)
        # Getting the type of 'np' (line 668)
        np_32002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 59), 'np', False)
        # Obtaining the member 'int16' of a type (line 668)
        int16_32003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 59), np_32002, 'int16')
        keyword_32004 = int16_32003
        kwargs_32005 = {'dtype': keyword_32004}
        # Getting the type of 'np' (line 668)
        np_31997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 30), 'np', False)
        # Obtaining the member 'arange' of a type (line 668)
        arange_31998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 30), np_31997, 'arange')
        # Calling arange(args, kwargs) (line 668)
        arange_call_result_32006 = invoke(stypy.reporting.localization.Localization(__file__, 668, 30), arange_31998, *[N_32001], **kwargs_32005)
        
        # Getting the type of 'v' (line 668)
        v_32007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 12), 'v')
        # Getting the type of 'self' (line 668)
        self_32008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 14), 'self')
        # Obtaining the member '_inside' of a type (line 668)
        _inside_32009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 14), self_32008, '_inside')
        # Storing an element on a container (line 668)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 668, 12), v_32007, (_inside_32009, arange_call_result_32006))
        
        
        # Call to _extend_lower(...): (line 669)
        # Processing the call keyword arguments (line 669)
        kwargs_32012 = {}
        # Getting the type of 'self' (line 669)
        self_32010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 15), 'self', False)
        # Obtaining the member '_extend_lower' of a type (line 669)
        _extend_lower_32011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 15), self_32010, '_extend_lower')
        # Calling _extend_lower(args, kwargs) (line 669)
        _extend_lower_call_result_32013 = invoke(stypy.reporting.localization.Localization(__file__, 669, 15), _extend_lower_32011, *[], **kwargs_32012)
        
        # Testing the type of an if condition (line 669)
        if_condition_32014 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 669, 12), _extend_lower_call_result_32013)
        # Assigning a type to the variable 'if_condition_32014' (line 669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 12), 'if_condition_32014', if_condition_32014)
        # SSA begins for if statement (line 669)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Subscript (line 670):
        
        # Assigning a Num to a Subscript (line 670):
        int_32015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 23), 'int')
        # Getting the type of 'v' (line 670)
        v_32016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 16), 'v')
        int_32017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 18), 'int')
        # Storing an element on a container (line 670)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 670, 16), v_32016, (int_32017, int_32015))
        # SSA join for if statement (line 669)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to _extend_upper(...): (line 671)
        # Processing the call keyword arguments (line 671)
        kwargs_32020 = {}
        # Getting the type of 'self' (line 671)
        self_32018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 15), 'self', False)
        # Obtaining the member '_extend_upper' of a type (line 671)
        _extend_upper_32019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 15), self_32018, '_extend_upper')
        # Calling _extend_upper(args, kwargs) (line 671)
        _extend_upper_call_result_32021 = invoke(stypy.reporting.localization.Localization(__file__, 671, 15), _extend_upper_32019, *[], **kwargs_32020)
        
        # Testing the type of an if condition (line 671)
        if_condition_32022 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 671, 12), _extend_upper_call_result_32021)
        # Assigning a type to the variable 'if_condition_32022' (line 671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 671, 12), 'if_condition_32022', if_condition_32022)
        # SSA begins for if statement (line 671)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 672):
        
        # Assigning a Attribute to a Subscript (line 672):
        # Getting the type of 'self' (line 672)
        self_32023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 24), 'self')
        # Obtaining the member 'cmap' of a type (line 672)
        cmap_32024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 24), self_32023, 'cmap')
        # Obtaining the member 'N' of a type (line 672)
        N_32025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 24), cmap_32024, 'N')
        # Getting the type of 'v' (line 672)
        v_32026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 16), 'v')
        int_32027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 18), 'int')
        # Storing an element on a container (line 672)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 672, 16), v_32026, (int_32027, N_32025))
        # SSA join for if statement (line 671)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 673):
        
        # Assigning a Name to a Attribute (line 673):
        # Getting the type of 'b' (line 673)
        b_32028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 31), 'b')
        # Getting the type of 'self' (line 673)
        self_32029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 12), 'self')
        # Setting the type of the member '_boundaries' of a type (line 673)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 12), self_32029, '_boundaries', b_32028)
        
        # Assigning a Name to a Attribute (line 674):
        
        # Assigning a Name to a Attribute (line 674):
        # Getting the type of 'v' (line 674)
        v_32030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 27), 'v')
        # Getting the type of 'self' (line 674)
        self_32031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 12), 'self')
        # Setting the type of the member '_values' of a type (line 674)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 12), self_32031, '_values', v_32030)
        # Assigning a type to the variable 'stypy_return_type' (line 675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 12), 'stypy_return_type', types.NoneType)
        # SSA branch for the else part of an if statement (line 665)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to isinstance(...): (line 676)
        # Processing the call arguments (line 676)
        # Getting the type of 'self' (line 676)
        self_32033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 24), 'self', False)
        # Obtaining the member 'norm' of a type (line 676)
        norm_32034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 24), self_32033, 'norm')
        # Getting the type of 'colors' (line 676)
        colors_32035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 35), 'colors', False)
        # Obtaining the member 'BoundaryNorm' of a type (line 676)
        BoundaryNorm_32036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 35), colors_32035, 'BoundaryNorm')
        # Processing the call keyword arguments (line 676)
        kwargs_32037 = {}
        # Getting the type of 'isinstance' (line 676)
        isinstance_32032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 13), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 676)
        isinstance_call_result_32038 = invoke(stypy.reporting.localization.Localization(__file__, 676, 13), isinstance_32032, *[norm_32034, BoundaryNorm_32036], **kwargs_32037)
        
        # Testing the type of an if condition (line 676)
        if_condition_32039 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 676, 13), isinstance_call_result_32038)
        # Assigning a type to the variable 'if_condition_32039' (line 676)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 676, 13), 'if_condition_32039', if_condition_32039)
        # SSA begins for if statement (line 676)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 677):
        
        # Assigning a Call to a Name (line 677):
        
        # Call to list(...): (line 677)
        # Processing the call arguments (line 677)
        # Getting the type of 'self' (line 677)
        self_32041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 21), 'self', False)
        # Obtaining the member 'norm' of a type (line 677)
        norm_32042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 677, 21), self_32041, 'norm')
        # Obtaining the member 'boundaries' of a type (line 677)
        boundaries_32043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 677, 21), norm_32042, 'boundaries')
        # Processing the call keyword arguments (line 677)
        kwargs_32044 = {}
        # Getting the type of 'list' (line 677)
        list_32040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 16), 'list', False)
        # Calling list(args, kwargs) (line 677)
        list_call_result_32045 = invoke(stypy.reporting.localization.Localization(__file__, 677, 16), list_32040, *[boundaries_32043], **kwargs_32044)
        
        # Assigning a type to the variable 'b' (line 677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 12), 'b', list_call_result_32045)
        
        
        # Call to _extend_lower(...): (line 678)
        # Processing the call keyword arguments (line 678)
        kwargs_32048 = {}
        # Getting the type of 'self' (line 678)
        self_32046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 15), 'self', False)
        # Obtaining the member '_extend_lower' of a type (line 678)
        _extend_lower_32047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 678, 15), self_32046, '_extend_lower')
        # Calling _extend_lower(args, kwargs) (line 678)
        _extend_lower_call_result_32049 = invoke(stypy.reporting.localization.Localization(__file__, 678, 15), _extend_lower_32047, *[], **kwargs_32048)
        
        # Testing the type of an if condition (line 678)
        if_condition_32050 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 678, 12), _extend_lower_call_result_32049)
        # Assigning a type to the variable 'if_condition_32050' (line 678)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 678, 12), 'if_condition_32050', if_condition_32050)
        # SSA begins for if statement (line 678)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 679):
        
        # Assigning a BinOp to a Name (line 679):
        
        # Obtaining an instance of the builtin type 'list' (line 679)
        list_32051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 679)
        # Adding element type (line 679)
        
        # Obtaining the type of the subscript
        int_32052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 23), 'int')
        # Getting the type of 'b' (line 679)
        b_32053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 21), 'b')
        # Obtaining the member '__getitem__' of a type (line 679)
        getitem___32054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 21), b_32053, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 679)
        subscript_call_result_32055 = invoke(stypy.reporting.localization.Localization(__file__, 679, 21), getitem___32054, int_32052)
        
        int_32056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 28), 'int')
        # Applying the binary operator '-' (line 679)
        result_sub_32057 = python_operator(stypy.reporting.localization.Localization(__file__, 679, 21), '-', subscript_call_result_32055, int_32056)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 679, 20), list_32051, result_sub_32057)
        
        # Getting the type of 'b' (line 679)
        b_32058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 33), 'b')
        # Applying the binary operator '+' (line 679)
        result_add_32059 = python_operator(stypy.reporting.localization.Localization(__file__, 679, 20), '+', list_32051, b_32058)
        
        # Assigning a type to the variable 'b' (line 679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 16), 'b', result_add_32059)
        # SSA join for if statement (line 678)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to _extend_upper(...): (line 680)
        # Processing the call keyword arguments (line 680)
        kwargs_32062 = {}
        # Getting the type of 'self' (line 680)
        self_32060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 15), 'self', False)
        # Obtaining the member '_extend_upper' of a type (line 680)
        _extend_upper_32061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 15), self_32060, '_extend_upper')
        # Calling _extend_upper(args, kwargs) (line 680)
        _extend_upper_call_result_32063 = invoke(stypy.reporting.localization.Localization(__file__, 680, 15), _extend_upper_32061, *[], **kwargs_32062)
        
        # Testing the type of an if condition (line 680)
        if_condition_32064 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 680, 12), _extend_upper_call_result_32063)
        # Assigning a type to the variable 'if_condition_32064' (line 680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 12), 'if_condition_32064', if_condition_32064)
        # SSA begins for if statement (line 680)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 681):
        
        # Assigning a BinOp to a Name (line 681):
        # Getting the type of 'b' (line 681)
        b_32065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 20), 'b')
        
        # Obtaining an instance of the builtin type 'list' (line 681)
        list_32066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 681, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 681)
        # Adding element type (line 681)
        
        # Obtaining the type of the subscript
        int_32067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 681, 27), 'int')
        # Getting the type of 'b' (line 681)
        b_32068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 25), 'b')
        # Obtaining the member '__getitem__' of a type (line 681)
        getitem___32069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 25), b_32068, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 681)
        subscript_call_result_32070 = invoke(stypy.reporting.localization.Localization(__file__, 681, 25), getitem___32069, int_32067)
        
        int_32071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 681, 33), 'int')
        # Applying the binary operator '+' (line 681)
        result_add_32072 = python_operator(stypy.reporting.localization.Localization(__file__, 681, 25), '+', subscript_call_result_32070, int_32071)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 681, 24), list_32066, result_add_32072)
        
        # Applying the binary operator '+' (line 681)
        result_add_32073 = python_operator(stypy.reporting.localization.Localization(__file__, 681, 20), '+', b_32065, list_32066)
        
        # Assigning a type to the variable 'b' (line 681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 16), 'b', result_add_32073)
        # SSA join for if statement (line 680)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 682):
        
        # Assigning a Call to a Name (line 682):
        
        # Call to array(...): (line 682)
        # Processing the call arguments (line 682)
        # Getting the type of 'b' (line 682)
        b_32076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 25), 'b', False)
        # Processing the call keyword arguments (line 682)
        kwargs_32077 = {}
        # Getting the type of 'np' (line 682)
        np_32074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 682)
        array_32075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 682, 16), np_32074, 'array')
        # Calling array(args, kwargs) (line 682)
        array_call_result_32078 = invoke(stypy.reporting.localization.Localization(__file__, 682, 16), array_32075, *[b_32076], **kwargs_32077)
        
        # Assigning a type to the variable 'b' (line 682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 12), 'b', array_call_result_32078)
        
        # Assigning a Call to a Name (line 683):
        
        # Assigning a Call to a Name (line 683):
        
        # Call to zeros(...): (line 683)
        # Processing the call arguments (line 683)
        
        # Obtaining an instance of the builtin type 'tuple' (line 683)
        tuple_32081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 683, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 683)
        # Adding element type (line 683)
        
        # Call to len(...): (line 683)
        # Processing the call arguments (line 683)
        # Getting the type of 'b' (line 683)
        b_32083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 30), 'b', False)
        # Processing the call keyword arguments (line 683)
        kwargs_32084 = {}
        # Getting the type of 'len' (line 683)
        len_32082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 26), 'len', False)
        # Calling len(args, kwargs) (line 683)
        len_call_result_32085 = invoke(stypy.reporting.localization.Localization(__file__, 683, 26), len_32082, *[b_32083], **kwargs_32084)
        
        int_32086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 683, 35), 'int')
        # Applying the binary operator '-' (line 683)
        result_sub_32087 = python_operator(stypy.reporting.localization.Localization(__file__, 683, 26), '-', len_call_result_32085, int_32086)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 683, 26), tuple_32081, result_sub_32087)
        
        # Processing the call keyword arguments (line 683)
        # Getting the type of 'float' (line 683)
        float_32088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 46), 'float', False)
        keyword_32089 = float_32088
        kwargs_32090 = {'dtype': keyword_32089}
        # Getting the type of 'np' (line 683)
        np_32079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 16), 'np', False)
        # Obtaining the member 'zeros' of a type (line 683)
        zeros_32080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 683, 16), np_32079, 'zeros')
        # Calling zeros(args, kwargs) (line 683)
        zeros_call_result_32091 = invoke(stypy.reporting.localization.Localization(__file__, 683, 16), zeros_32080, *[tuple_32081], **kwargs_32090)
        
        # Assigning a type to the variable 'v' (line 683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 683, 12), 'v', zeros_call_result_32091)
        
        # Assigning a Attribute to a Name (line 684):
        
        # Assigning a Attribute to a Name (line 684):
        # Getting the type of 'self' (line 684)
        self_32092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 17), 'self')
        # Obtaining the member 'norm' of a type (line 684)
        norm_32093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 17), self_32092, 'norm')
        # Obtaining the member 'boundaries' of a type (line 684)
        boundaries_32094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 17), norm_32093, 'boundaries')
        # Assigning a type to the variable 'bi' (line 684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 684, 12), 'bi', boundaries_32094)
        
        # Assigning a BinOp to a Subscript (line 685):
        
        # Assigning a BinOp to a Subscript (line 685):
        float_32095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 30), 'float')
        
        # Obtaining the type of the subscript
        int_32096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 41), 'int')
        slice_32097 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 685, 37), None, int_32096, None)
        # Getting the type of 'bi' (line 685)
        bi_32098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 37), 'bi')
        # Obtaining the member '__getitem__' of a type (line 685)
        getitem___32099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 37), bi_32098, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 685)
        subscript_call_result_32100 = invoke(stypy.reporting.localization.Localization(__file__, 685, 37), getitem___32099, slice_32097)
        
        
        # Obtaining the type of the subscript
        int_32101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 50), 'int')
        slice_32102 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 685, 47), int_32101, None, None)
        # Getting the type of 'bi' (line 685)
        bi_32103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 47), 'bi')
        # Obtaining the member '__getitem__' of a type (line 685)
        getitem___32104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 47), bi_32103, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 685)
        subscript_call_result_32105 = invoke(stypy.reporting.localization.Localization(__file__, 685, 47), getitem___32104, slice_32102)
        
        # Applying the binary operator '+' (line 685)
        result_add_32106 = python_operator(stypy.reporting.localization.Localization(__file__, 685, 37), '+', subscript_call_result_32100, subscript_call_result_32105)
        
        # Applying the binary operator '*' (line 685)
        result_mul_32107 = python_operator(stypy.reporting.localization.Localization(__file__, 685, 30), '*', float_32095, result_add_32106)
        
        # Getting the type of 'v' (line 685)
        v_32108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 12), 'v')
        # Getting the type of 'self' (line 685)
        self_32109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 14), 'self')
        # Obtaining the member '_inside' of a type (line 685)
        _inside_32110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 14), self_32109, '_inside')
        # Storing an element on a container (line 685)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 685, 12), v_32108, (_inside_32110, result_mul_32107))
        
        
        # Call to _extend_lower(...): (line 686)
        # Processing the call keyword arguments (line 686)
        kwargs_32113 = {}
        # Getting the type of 'self' (line 686)
        self_32111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 15), 'self', False)
        # Obtaining the member '_extend_lower' of a type (line 686)
        _extend_lower_32112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 686, 15), self_32111, '_extend_lower')
        # Calling _extend_lower(args, kwargs) (line 686)
        _extend_lower_call_result_32114 = invoke(stypy.reporting.localization.Localization(__file__, 686, 15), _extend_lower_32112, *[], **kwargs_32113)
        
        # Testing the type of an if condition (line 686)
        if_condition_32115 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 686, 12), _extend_lower_call_result_32114)
        # Assigning a type to the variable 'if_condition_32115' (line 686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 686, 12), 'if_condition_32115', if_condition_32115)
        # SSA begins for if statement (line 686)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Subscript (line 687):
        
        # Assigning a BinOp to a Subscript (line 687):
        
        # Obtaining the type of the subscript
        int_32116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 25), 'int')
        # Getting the type of 'b' (line 687)
        b_32117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 23), 'b')
        # Obtaining the member '__getitem__' of a type (line 687)
        getitem___32118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 23), b_32117, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 687)
        subscript_call_result_32119 = invoke(stypy.reporting.localization.Localization(__file__, 687, 23), getitem___32118, int_32116)
        
        int_32120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 30), 'int')
        # Applying the binary operator '-' (line 687)
        result_sub_32121 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 23), '-', subscript_call_result_32119, int_32120)
        
        # Getting the type of 'v' (line 687)
        v_32122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 16), 'v')
        int_32123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 18), 'int')
        # Storing an element on a container (line 687)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 16), v_32122, (int_32123, result_sub_32121))
        # SSA join for if statement (line 686)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to _extend_upper(...): (line 688)
        # Processing the call keyword arguments (line 688)
        kwargs_32126 = {}
        # Getting the type of 'self' (line 688)
        self_32124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 15), 'self', False)
        # Obtaining the member '_extend_upper' of a type (line 688)
        _extend_upper_32125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 15), self_32124, '_extend_upper')
        # Calling _extend_upper(args, kwargs) (line 688)
        _extend_upper_call_result_32127 = invoke(stypy.reporting.localization.Localization(__file__, 688, 15), _extend_upper_32125, *[], **kwargs_32126)
        
        # Testing the type of an if condition (line 688)
        if_condition_32128 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 688, 12), _extend_upper_call_result_32127)
        # Assigning a type to the variable 'if_condition_32128' (line 688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 688, 12), 'if_condition_32128', if_condition_32128)
        # SSA begins for if statement (line 688)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Subscript (line 689):
        
        # Assigning a BinOp to a Subscript (line 689):
        
        # Obtaining the type of the subscript
        int_32129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 689, 26), 'int')
        # Getting the type of 'b' (line 689)
        b_32130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 24), 'b')
        # Obtaining the member '__getitem__' of a type (line 689)
        getitem___32131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 24), b_32130, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 689)
        subscript_call_result_32132 = invoke(stypy.reporting.localization.Localization(__file__, 689, 24), getitem___32131, int_32129)
        
        int_32133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 689, 32), 'int')
        # Applying the binary operator '+' (line 689)
        result_add_32134 = python_operator(stypy.reporting.localization.Localization(__file__, 689, 24), '+', subscript_call_result_32132, int_32133)
        
        # Getting the type of 'v' (line 689)
        v_32135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 16), 'v')
        int_32136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 689, 18), 'int')
        # Storing an element on a container (line 689)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 689, 16), v_32135, (int_32136, result_add_32134))
        # SSA join for if statement (line 688)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 690):
        
        # Assigning a Name to a Attribute (line 690):
        # Getting the type of 'b' (line 690)
        b_32137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 31), 'b')
        # Getting the type of 'self' (line 690)
        self_32138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 12), 'self')
        # Setting the type of the member '_boundaries' of a type (line 690)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 690, 12), self_32138, '_boundaries', b_32137)
        
        # Assigning a Name to a Attribute (line 691):
        
        # Assigning a Name to a Attribute (line 691):
        # Getting the type of 'v' (line 691)
        v_32139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 27), 'v')
        # Getting the type of 'self' (line 691)
        self_32140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 12), 'self')
        # Setting the type of the member '_values' of a type (line 691)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 12), self_32140, '_values', v_32139)
        # Assigning a type to the variable 'stypy_return_type' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'stypy_return_type', types.NoneType)
        # SSA branch for the else part of an if statement (line 676)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to scaled(...): (line 694)
        # Processing the call keyword arguments (line 694)
        kwargs_32144 = {}
        # Getting the type of 'self' (line 694)
        self_32141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 19), 'self', False)
        # Obtaining the member 'norm' of a type (line 694)
        norm_32142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 19), self_32141, 'norm')
        # Obtaining the member 'scaled' of a type (line 694)
        scaled_32143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 19), norm_32142, 'scaled')
        # Calling scaled(args, kwargs) (line 694)
        scaled_call_result_32145 = invoke(stypy.reporting.localization.Localization(__file__, 694, 19), scaled_32143, *[], **kwargs_32144)
        
        # Applying the 'not' unary operator (line 694)
        result_not__32146 = python_operator(stypy.reporting.localization.Localization(__file__, 694, 15), 'not', scaled_call_result_32145)
        
        # Testing the type of an if condition (line 694)
        if_condition_32147 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 694, 12), result_not__32146)
        # Assigning a type to the variable 'if_condition_32147' (line 694)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 12), 'if_condition_32147', if_condition_32147)
        # SSA begins for if statement (line 694)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 695):
        
        # Assigning a Num to a Attribute (line 695):
        int_32148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 695, 33), 'int')
        # Getting the type of 'self' (line 695)
        self_32149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 16), 'self')
        # Obtaining the member 'norm' of a type (line 695)
        norm_32150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 695, 16), self_32149, 'norm')
        # Setting the type of the member 'vmin' of a type (line 695)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 695, 16), norm_32150, 'vmin', int_32148)
        
        # Assigning a Num to a Attribute (line 696):
        
        # Assigning a Num to a Attribute (line 696):
        int_32151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 33), 'int')
        # Getting the type of 'self' (line 696)
        self_32152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 16), 'self')
        # Obtaining the member 'norm' of a type (line 696)
        norm_32153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 696, 16), self_32152, 'norm')
        # Setting the type of the member 'vmax' of a type (line 696)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 696, 16), norm_32153, 'vmax', int_32151)
        # SSA join for if statement (line 694)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 698):
        
        # Assigning a Call to a Name:
        
        # Call to nonsingular(...): (line 698)
        # Processing the call arguments (line 698)
        # Getting the type of 'self' (line 699)
        self_32156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 16), 'self', False)
        # Obtaining the member 'norm' of a type (line 699)
        norm_32157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 16), self_32156, 'norm')
        # Obtaining the member 'vmin' of a type (line 699)
        vmin_32158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 16), norm_32157, 'vmin')
        # Getting the type of 'self' (line 700)
        self_32159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 16), 'self', False)
        # Obtaining the member 'norm' of a type (line 700)
        norm_32160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 700, 16), self_32159, 'norm')
        # Obtaining the member 'vmax' of a type (line 700)
        vmax_32161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 700, 16), norm_32160, 'vmax')
        # Processing the call keyword arguments (line 698)
        float_32162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 25), 'float')
        keyword_32163 = float_32162
        kwargs_32164 = {'expander': keyword_32163}
        # Getting the type of 'mtransforms' (line 698)
        mtransforms_32154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 45), 'mtransforms', False)
        # Obtaining the member 'nonsingular' of a type (line 698)
        nonsingular_32155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 45), mtransforms_32154, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 698)
        nonsingular_call_result_32165 = invoke(stypy.reporting.localization.Localization(__file__, 698, 45), nonsingular_32155, *[vmin_32158, vmax_32161], **kwargs_32164)
        
        # Assigning a type to the variable 'call_assignment_30373' (line 698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'call_assignment_30373', nonsingular_call_result_32165)
        
        # Assigning a Call to a Name (line 698):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_32168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 12), 'int')
        # Processing the call keyword arguments
        kwargs_32169 = {}
        # Getting the type of 'call_assignment_30373' (line 698)
        call_assignment_30373_32166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'call_assignment_30373', False)
        # Obtaining the member '__getitem__' of a type (line 698)
        getitem___32167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 12), call_assignment_30373_32166, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_32170 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___32167, *[int_32168], **kwargs_32169)
        
        # Assigning a type to the variable 'call_assignment_30374' (line 698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'call_assignment_30374', getitem___call_result_32170)
        
        # Assigning a Name to a Attribute (line 698):
        # Getting the type of 'call_assignment_30374' (line 698)
        call_assignment_30374_32171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'call_assignment_30374')
        # Getting the type of 'self' (line 698)
        self_32172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'self')
        # Obtaining the member 'norm' of a type (line 698)
        norm_32173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 12), self_32172, 'norm')
        # Setting the type of the member 'vmin' of a type (line 698)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 12), norm_32173, 'vmin', call_assignment_30374_32171)
        
        # Assigning a Call to a Name (line 698):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_32176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 12), 'int')
        # Processing the call keyword arguments
        kwargs_32177 = {}
        # Getting the type of 'call_assignment_30373' (line 698)
        call_assignment_30373_32174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'call_assignment_30373', False)
        # Obtaining the member '__getitem__' of a type (line 698)
        getitem___32175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 12), call_assignment_30373_32174, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_32178 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___32175, *[int_32176], **kwargs_32177)
        
        # Assigning a type to the variable 'call_assignment_30375' (line 698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'call_assignment_30375', getitem___call_result_32178)
        
        # Assigning a Name to a Attribute (line 698):
        # Getting the type of 'call_assignment_30375' (line 698)
        call_assignment_30375_32179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'call_assignment_30375')
        # Getting the type of 'self' (line 698)
        self_32180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 28), 'self')
        # Obtaining the member 'norm' of a type (line 698)
        norm_32181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 28), self_32180, 'norm')
        # Setting the type of the member 'vmax' of a type (line 698)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 28), norm_32181, 'vmax', call_assignment_30375_32179)
        
        # Assigning a Call to a Name (line 703):
        
        # Assigning a Call to a Name (line 703):
        
        # Call to inverse(...): (line 703)
        # Processing the call arguments (line 703)
        
        # Call to _uniform_y(...): (line 703)
        # Processing the call arguments (line 703)
        # Getting the type of 'self' (line 703)
        self_32187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 50), 'self', False)
        # Obtaining the member 'cmap' of a type (line 703)
        cmap_32188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 50), self_32187, 'cmap')
        # Obtaining the member 'N' of a type (line 703)
        N_32189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 50), cmap_32188, 'N')
        int_32190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, 64), 'int')
        # Applying the binary operator '+' (line 703)
        result_add_32191 = python_operator(stypy.reporting.localization.Localization(__file__, 703, 50), '+', N_32189, int_32190)
        
        # Processing the call keyword arguments (line 703)
        kwargs_32192 = {}
        # Getting the type of 'self' (line 703)
        self_32185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 34), 'self', False)
        # Obtaining the member '_uniform_y' of a type (line 703)
        _uniform_y_32186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 34), self_32185, '_uniform_y')
        # Calling _uniform_y(args, kwargs) (line 703)
        _uniform_y_call_result_32193 = invoke(stypy.reporting.localization.Localization(__file__, 703, 34), _uniform_y_32186, *[result_add_32191], **kwargs_32192)
        
        # Processing the call keyword arguments (line 703)
        kwargs_32194 = {}
        # Getting the type of 'self' (line 703)
        self_32182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 16), 'self', False)
        # Obtaining the member 'norm' of a type (line 703)
        norm_32183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 16), self_32182, 'norm')
        # Obtaining the member 'inverse' of a type (line 703)
        inverse_32184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 16), norm_32183, 'inverse')
        # Calling inverse(args, kwargs) (line 703)
        inverse_call_result_32195 = invoke(stypy.reporting.localization.Localization(__file__, 703, 16), inverse_32184, *[_uniform_y_call_result_32193], **kwargs_32194)
        
        # Assigning a type to the variable 'b' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 12), 'b', inverse_call_result_32195)
        
        
        # Call to isinstance(...): (line 705)
        # Processing the call arguments (line 705)
        # Getting the type of 'self' (line 705)
        self_32197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 26), 'self', False)
        # Obtaining the member 'norm' of a type (line 705)
        norm_32198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 26), self_32197, 'norm')
        # Getting the type of 'colors' (line 705)
        colors_32199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 37), 'colors', False)
        # Obtaining the member 'LogNorm' of a type (line 705)
        LogNorm_32200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 37), colors_32199, 'LogNorm')
        # Processing the call keyword arguments (line 705)
        kwargs_32201 = {}
        # Getting the type of 'isinstance' (line 705)
        isinstance_32196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 705)
        isinstance_call_result_32202 = invoke(stypy.reporting.localization.Localization(__file__, 705, 15), isinstance_32196, *[norm_32198, LogNorm_32200], **kwargs_32201)
        
        # Testing the type of an if condition (line 705)
        if_condition_32203 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 705, 12), isinstance_call_result_32202)
        # Assigning a type to the variable 'if_condition_32203' (line 705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 12), 'if_condition_32203', if_condition_32203)
        # SSA begins for if statement (line 705)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to _extend_lower(...): (line 707)
        # Processing the call keyword arguments (line 707)
        kwargs_32206 = {}
        # Getting the type of 'self' (line 707)
        self_32204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 19), 'self', False)
        # Obtaining the member '_extend_lower' of a type (line 707)
        _extend_lower_32205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 19), self_32204, '_extend_lower')
        # Calling _extend_lower(args, kwargs) (line 707)
        _extend_lower_call_result_32207 = invoke(stypy.reporting.localization.Localization(__file__, 707, 19), _extend_lower_32205, *[], **kwargs_32206)
        
        # Testing the type of an if condition (line 707)
        if_condition_32208 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 707, 16), _extend_lower_call_result_32207)
        # Assigning a type to the variable 'if_condition_32208' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 16), 'if_condition_32208', if_condition_32208)
        # SSA begins for if statement (line 707)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Subscript (line 708):
        
        # Assigning a BinOp to a Subscript (line 708):
        float_32209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 27), 'float')
        
        # Obtaining the type of the subscript
        int_32210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 35), 'int')
        # Getting the type of 'b' (line 708)
        b_32211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 33), 'b')
        # Obtaining the member '__getitem__' of a type (line 708)
        getitem___32212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 33), b_32211, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 708)
        subscript_call_result_32213 = invoke(stypy.reporting.localization.Localization(__file__, 708, 33), getitem___32212, int_32210)
        
        # Applying the binary operator '*' (line 708)
        result_mul_32214 = python_operator(stypy.reporting.localization.Localization(__file__, 708, 27), '*', float_32209, subscript_call_result_32213)
        
        # Getting the type of 'b' (line 708)
        b_32215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 20), 'b')
        int_32216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 22), 'int')
        # Storing an element on a container (line 708)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 708, 20), b_32215, (int_32216, result_mul_32214))
        # SSA join for if statement (line 707)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to _extend_upper(...): (line 709)
        # Processing the call keyword arguments (line 709)
        kwargs_32219 = {}
        # Getting the type of 'self' (line 709)
        self_32217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 19), 'self', False)
        # Obtaining the member '_extend_upper' of a type (line 709)
        _extend_upper_32218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 19), self_32217, '_extend_upper')
        # Calling _extend_upper(args, kwargs) (line 709)
        _extend_upper_call_result_32220 = invoke(stypy.reporting.localization.Localization(__file__, 709, 19), _extend_upper_32218, *[], **kwargs_32219)
        
        # Testing the type of an if condition (line 709)
        if_condition_32221 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 709, 16), _extend_upper_call_result_32220)
        # Assigning a type to the variable 'if_condition_32221' (line 709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 709, 16), 'if_condition_32221', if_condition_32221)
        # SSA begins for if statement (line 709)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Subscript (line 710):
        
        # Assigning a BinOp to a Subscript (line 710):
        float_32222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 28), 'float')
        
        # Obtaining the type of the subscript
        int_32223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 36), 'int')
        # Getting the type of 'b' (line 710)
        b_32224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 34), 'b')
        # Obtaining the member '__getitem__' of a type (line 710)
        getitem___32225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 34), b_32224, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 710)
        subscript_call_result_32226 = invoke(stypy.reporting.localization.Localization(__file__, 710, 34), getitem___32225, int_32223)
        
        # Applying the binary operator '*' (line 710)
        result_mul_32227 = python_operator(stypy.reporting.localization.Localization(__file__, 710, 28), '*', float_32222, subscript_call_result_32226)
        
        # Getting the type of 'b' (line 710)
        b_32228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 20), 'b')
        int_32229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 22), 'int')
        # Storing an element on a container (line 710)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 710, 20), b_32228, (int_32229, result_mul_32227))
        # SSA join for if statement (line 709)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 705)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to _extend_lower(...): (line 712)
        # Processing the call keyword arguments (line 712)
        kwargs_32232 = {}
        # Getting the type of 'self' (line 712)
        self_32230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 19), 'self', False)
        # Obtaining the member '_extend_lower' of a type (line 712)
        _extend_lower_32231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 19), self_32230, '_extend_lower')
        # Calling _extend_lower(args, kwargs) (line 712)
        _extend_lower_call_result_32233 = invoke(stypy.reporting.localization.Localization(__file__, 712, 19), _extend_lower_32231, *[], **kwargs_32232)
        
        # Testing the type of an if condition (line 712)
        if_condition_32234 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 712, 16), _extend_lower_call_result_32233)
        # Assigning a type to the variable 'if_condition_32234' (line 712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 712, 16), 'if_condition_32234', if_condition_32234)
        # SSA begins for if statement (line 712)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Subscript (line 713):
        
        # Assigning a BinOp to a Subscript (line 713):
        
        # Obtaining the type of the subscript
        int_32235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 29), 'int')
        # Getting the type of 'b' (line 713)
        b_32236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 27), 'b')
        # Obtaining the member '__getitem__' of a type (line 713)
        getitem___32237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 27), b_32236, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 713)
        subscript_call_result_32238 = invoke(stypy.reporting.localization.Localization(__file__, 713, 27), getitem___32237, int_32235)
        
        int_32239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 34), 'int')
        # Applying the binary operator '-' (line 713)
        result_sub_32240 = python_operator(stypy.reporting.localization.Localization(__file__, 713, 27), '-', subscript_call_result_32238, int_32239)
        
        # Getting the type of 'b' (line 713)
        b_32241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 20), 'b')
        int_32242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 22), 'int')
        # Storing an element on a container (line 713)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 713, 20), b_32241, (int_32242, result_sub_32240))
        # SSA join for if statement (line 712)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to _extend_upper(...): (line 714)
        # Processing the call keyword arguments (line 714)
        kwargs_32245 = {}
        # Getting the type of 'self' (line 714)
        self_32243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 19), 'self', False)
        # Obtaining the member '_extend_upper' of a type (line 714)
        _extend_upper_32244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 19), self_32243, '_extend_upper')
        # Calling _extend_upper(args, kwargs) (line 714)
        _extend_upper_call_result_32246 = invoke(stypy.reporting.localization.Localization(__file__, 714, 19), _extend_upper_32244, *[], **kwargs_32245)
        
        # Testing the type of an if condition (line 714)
        if_condition_32247 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 714, 16), _extend_upper_call_result_32246)
        # Assigning a type to the variable 'if_condition_32247' (line 714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 16), 'if_condition_32247', if_condition_32247)
        # SSA begins for if statement (line 714)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Subscript (line 715):
        
        # Assigning a BinOp to a Subscript (line 715):
        
        # Obtaining the type of the subscript
        int_32248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 30), 'int')
        # Getting the type of 'b' (line 715)
        b_32249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 28), 'b')
        # Obtaining the member '__getitem__' of a type (line 715)
        getitem___32250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 28), b_32249, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 715)
        subscript_call_result_32251 = invoke(stypy.reporting.localization.Localization(__file__, 715, 28), getitem___32250, int_32248)
        
        int_32252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 36), 'int')
        # Applying the binary operator '+' (line 715)
        result_add_32253 = python_operator(stypy.reporting.localization.Localization(__file__, 715, 28), '+', subscript_call_result_32251, int_32252)
        
        # Getting the type of 'b' (line 715)
        b_32254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 20), 'b')
        int_32255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 22), 'int')
        # Storing an element on a container (line 715)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 715, 20), b_32254, (int_32255, result_add_32253))
        # SSA join for if statement (line 714)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 705)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 676)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 665)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _process_values(...): (line 716)
        # Processing the call arguments (line 716)
        # Getting the type of 'b' (line 716)
        b_32258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 29), 'b', False)
        # Processing the call keyword arguments (line 716)
        kwargs_32259 = {}
        # Getting the type of 'self' (line 716)
        self_32256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 8), 'self', False)
        # Obtaining the member '_process_values' of a type (line 716)
        _process_values_32257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 716, 8), self_32256, '_process_values')
        # Calling _process_values(args, kwargs) (line 716)
        _process_values_call_result_32260 = invoke(stypy.reporting.localization.Localization(__file__, 716, 8), _process_values_32257, *[b_32258], **kwargs_32259)
        
        
        # ################# End of '_process_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_values' in the type store
        # Getting the type of 'stypy_return_type' (line 634)
        stypy_return_type_32261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32261)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_values'
        return stypy_return_type_32261


    @norecursion
    def _find_range(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_find_range'
        module_type_store = module_type_store.open_function_context('_find_range', 718, 4, False)
        # Assigning a type to the variable 'self' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._find_range.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._find_range.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._find_range.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._find_range.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._find_range')
        ColorbarBase._find_range.__dict__.__setitem__('stypy_param_names_list', [])
        ColorbarBase._find_range.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._find_range.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._find_range.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._find_range.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._find_range.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._find_range.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._find_range', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_find_range', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_find_range(...)' code ##################

        unicode_32262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, (-1)), 'unicode', u'\n        Set :attr:`vmin` and :attr:`vmax` attributes to the first and\n        last boundary excluding extended end boundaries.\n        ')
        
        # Assigning a Subscript to a Name (line 723):
        
        # Assigning a Subscript to a Name (line 723):
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 723)
        self_32263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 29), 'self')
        # Obtaining the member '_inside' of a type (line 723)
        _inside_32264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 29), self_32263, '_inside')
        # Getting the type of 'self' (line 723)
        self_32265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 12), 'self')
        # Obtaining the member '_boundaries' of a type (line 723)
        _boundaries_32266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 12), self_32265, '_boundaries')
        # Obtaining the member '__getitem__' of a type (line 723)
        getitem___32267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 12), _boundaries_32266, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 723)
        subscript_call_result_32268 = invoke(stypy.reporting.localization.Localization(__file__, 723, 12), getitem___32267, _inside_32264)
        
        # Assigning a type to the variable 'b' (line 723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 8), 'b', subscript_call_result_32268)
        
        # Assigning a Subscript to a Attribute (line 724):
        
        # Assigning a Subscript to a Attribute (line 724):
        
        # Obtaining the type of the subscript
        int_32269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 724, 22), 'int')
        # Getting the type of 'b' (line 724)
        b_32270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 20), 'b')
        # Obtaining the member '__getitem__' of a type (line 724)
        getitem___32271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 724, 20), b_32270, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 724)
        subscript_call_result_32272 = invoke(stypy.reporting.localization.Localization(__file__, 724, 20), getitem___32271, int_32269)
        
        # Getting the type of 'self' (line 724)
        self_32273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 8), 'self')
        # Setting the type of the member 'vmin' of a type (line 724)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 724, 8), self_32273, 'vmin', subscript_call_result_32272)
        
        # Assigning a Subscript to a Attribute (line 725):
        
        # Assigning a Subscript to a Attribute (line 725):
        
        # Obtaining the type of the subscript
        int_32274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 22), 'int')
        # Getting the type of 'b' (line 725)
        b_32275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 20), 'b')
        # Obtaining the member '__getitem__' of a type (line 725)
        getitem___32276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 20), b_32275, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 725)
        subscript_call_result_32277 = invoke(stypy.reporting.localization.Localization(__file__, 725, 20), getitem___32276, int_32274)
        
        # Getting the type of 'self' (line 725)
        self_32278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'self')
        # Setting the type of the member 'vmax' of a type (line 725)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 8), self_32278, 'vmax', subscript_call_result_32277)
        
        # ################# End of '_find_range(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_find_range' in the type store
        # Getting the type of 'stypy_return_type' (line 718)
        stypy_return_type_32279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32279)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_find_range'
        return stypy_return_type_32279


    @norecursion
    def _central_N(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_central_N'
        module_type_store = module_type_store.open_function_context('_central_N', 727, 4, False)
        # Assigning a type to the variable 'self' (line 728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._central_N.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._central_N.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._central_N.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._central_N.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._central_N')
        ColorbarBase._central_N.__dict__.__setitem__('stypy_param_names_list', [])
        ColorbarBase._central_N.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._central_N.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._central_N.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._central_N.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._central_N.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._central_N.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._central_N', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_central_N', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_central_N(...)' code ##################

        unicode_32280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 8), 'unicode', u'number of boundaries **before** extension of ends')
        
        # Assigning a Call to a Name (line 729):
        
        # Assigning a Call to a Name (line 729):
        
        # Call to len(...): (line 729)
        # Processing the call arguments (line 729)
        # Getting the type of 'self' (line 729)
        self_32282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 17), 'self', False)
        # Obtaining the member '_boundaries' of a type (line 729)
        _boundaries_32283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 17), self_32282, '_boundaries')
        # Processing the call keyword arguments (line 729)
        kwargs_32284 = {}
        # Getting the type of 'len' (line 729)
        len_32281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 13), 'len', False)
        # Calling len(args, kwargs) (line 729)
        len_call_result_32285 = invoke(stypy.reporting.localization.Localization(__file__, 729, 13), len_32281, *[_boundaries_32283], **kwargs_32284)
        
        # Assigning a type to the variable 'nb' (line 729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 8), 'nb', len_call_result_32285)
        
        
        # Getting the type of 'self' (line 730)
        self_32286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 11), 'self')
        # Obtaining the member 'extend' of a type (line 730)
        extend_32287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 11), self_32286, 'extend')
        unicode_32288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 730, 26), 'unicode', u'both')
        # Applying the binary operator '==' (line 730)
        result_eq_32289 = python_operator(stypy.reporting.localization.Localization(__file__, 730, 11), '==', extend_32287, unicode_32288)
        
        # Testing the type of an if condition (line 730)
        if_condition_32290 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 730, 8), result_eq_32289)
        # Assigning a type to the variable 'if_condition_32290' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 8), 'if_condition_32290', if_condition_32290)
        # SSA begins for if statement (line 730)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'nb' (line 731)
        nb_32291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 12), 'nb')
        int_32292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 18), 'int')
        # Applying the binary operator '-=' (line 731)
        result_isub_32293 = python_operator(stypy.reporting.localization.Localization(__file__, 731, 12), '-=', nb_32291, int_32292)
        # Assigning a type to the variable 'nb' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 12), 'nb', result_isub_32293)
        
        # SSA branch for the else part of an if statement (line 730)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 732)
        self_32294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 13), 'self')
        # Obtaining the member 'extend' of a type (line 732)
        extend_32295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 13), self_32294, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 732)
        tuple_32296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 732)
        # Adding element type (line 732)
        unicode_32297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 29), 'unicode', u'min')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 732, 29), tuple_32296, unicode_32297)
        # Adding element type (line 732)
        unicode_32298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 36), 'unicode', u'max')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 732, 29), tuple_32296, unicode_32298)
        
        # Applying the binary operator 'in' (line 732)
        result_contains_32299 = python_operator(stypy.reporting.localization.Localization(__file__, 732, 13), 'in', extend_32295, tuple_32296)
        
        # Testing the type of an if condition (line 732)
        if_condition_32300 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 732, 13), result_contains_32299)
        # Assigning a type to the variable 'if_condition_32300' (line 732)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 13), 'if_condition_32300', if_condition_32300)
        # SSA begins for if statement (line 732)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'nb' (line 733)
        nb_32301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 12), 'nb')
        int_32302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 733, 18), 'int')
        # Applying the binary operator '-=' (line 733)
        result_isub_32303 = python_operator(stypy.reporting.localization.Localization(__file__, 733, 12), '-=', nb_32301, int_32302)
        # Assigning a type to the variable 'nb' (line 733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 12), 'nb', result_isub_32303)
        
        # SSA join for if statement (line 732)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 730)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'nb' (line 734)
        nb_32304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 15), 'nb')
        # Assigning a type to the variable 'stypy_return_type' (line 734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'stypy_return_type', nb_32304)
        
        # ################# End of '_central_N(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_central_N' in the type store
        # Getting the type of 'stypy_return_type' (line 727)
        stypy_return_type_32305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32305)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_central_N'
        return stypy_return_type_32305


    @norecursion
    def _extended_N(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_extended_N'
        module_type_store = module_type_store.open_function_context('_extended_N', 736, 4, False)
        # Assigning a type to the variable 'self' (line 737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._extended_N.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._extended_N.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._extended_N.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._extended_N.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._extended_N')
        ColorbarBase._extended_N.__dict__.__setitem__('stypy_param_names_list', [])
        ColorbarBase._extended_N.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._extended_N.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._extended_N.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._extended_N.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._extended_N.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._extended_N.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._extended_N', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_extended_N', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_extended_N(...)' code ##################

        unicode_32306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 740, (-1)), 'unicode', u'\n        Based on the colormap and extend variable, return the\n        number of boundaries.\n        ')
        
        # Assigning a BinOp to a Name (line 741):
        
        # Assigning a BinOp to a Name (line 741):
        # Getting the type of 'self' (line 741)
        self_32307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 12), 'self')
        # Obtaining the member 'cmap' of a type (line 741)
        cmap_32308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 12), self_32307, 'cmap')
        # Obtaining the member 'N' of a type (line 741)
        N_32309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 12), cmap_32308, 'N')
        int_32310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 741, 26), 'int')
        # Applying the binary operator '+' (line 741)
        result_add_32311 = python_operator(stypy.reporting.localization.Localization(__file__, 741, 12), '+', N_32309, int_32310)
        
        # Assigning a type to the variable 'N' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 8), 'N', result_add_32311)
        
        
        # Getting the type of 'self' (line 742)
        self_32312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 11), 'self')
        # Obtaining the member 'extend' of a type (line 742)
        extend_32313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 11), self_32312, 'extend')
        unicode_32314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 26), 'unicode', u'both')
        # Applying the binary operator '==' (line 742)
        result_eq_32315 = python_operator(stypy.reporting.localization.Localization(__file__, 742, 11), '==', extend_32313, unicode_32314)
        
        # Testing the type of an if condition (line 742)
        if_condition_32316 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 742, 8), result_eq_32315)
        # Assigning a type to the variable 'if_condition_32316' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 8), 'if_condition_32316', if_condition_32316)
        # SSA begins for if statement (line 742)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'N' (line 743)
        N_32317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 12), 'N')
        int_32318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 743, 17), 'int')
        # Applying the binary operator '+=' (line 743)
        result_iadd_32319 = python_operator(stypy.reporting.localization.Localization(__file__, 743, 12), '+=', N_32317, int_32318)
        # Assigning a type to the variable 'N' (line 743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 12), 'N', result_iadd_32319)
        
        # SSA branch for the else part of an if statement (line 742)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 744)
        self_32320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 13), 'self')
        # Obtaining the member 'extend' of a type (line 744)
        extend_32321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 13), self_32320, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 744)
        tuple_32322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 744)
        # Adding element type (line 744)
        unicode_32323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, 29), 'unicode', u'min')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 744, 29), tuple_32322, unicode_32323)
        # Adding element type (line 744)
        unicode_32324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, 36), 'unicode', u'max')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 744, 29), tuple_32322, unicode_32324)
        
        # Applying the binary operator 'in' (line 744)
        result_contains_32325 = python_operator(stypy.reporting.localization.Localization(__file__, 744, 13), 'in', extend_32321, tuple_32322)
        
        # Testing the type of an if condition (line 744)
        if_condition_32326 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 744, 13), result_contains_32325)
        # Assigning a type to the variable 'if_condition_32326' (line 744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 744, 13), 'if_condition_32326', if_condition_32326)
        # SSA begins for if statement (line 744)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'N' (line 745)
        N_32327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 12), 'N')
        int_32328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 745, 17), 'int')
        # Applying the binary operator '+=' (line 745)
        result_iadd_32329 = python_operator(stypy.reporting.localization.Localization(__file__, 745, 12), '+=', N_32327, int_32328)
        # Assigning a type to the variable 'N' (line 745)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 745, 12), 'N', result_iadd_32329)
        
        # SSA join for if statement (line 744)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 742)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'N' (line 746)
        N_32330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 15), 'N')
        # Assigning a type to the variable 'stypy_return_type' (line 746)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 8), 'stypy_return_type', N_32330)
        
        # ################# End of '_extended_N(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_extended_N' in the type store
        # Getting the type of 'stypy_return_type' (line 736)
        stypy_return_type_32331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32331)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_extended_N'
        return stypy_return_type_32331


    @norecursion
    def _get_extension_lengths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_32332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 69), 'float')
        defaults = [float_32332]
        # Create a new context for function '_get_extension_lengths'
        module_type_store = module_type_store.open_function_context('_get_extension_lengths', 748, 4, False)
        # Assigning a type to the variable 'self' (line 749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._get_extension_lengths.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._get_extension_lengths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._get_extension_lengths.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._get_extension_lengths.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._get_extension_lengths')
        ColorbarBase._get_extension_lengths.__dict__.__setitem__('stypy_param_names_list', ['frac', 'automin', 'automax', 'default'])
        ColorbarBase._get_extension_lengths.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._get_extension_lengths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._get_extension_lengths.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._get_extension_lengths.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._get_extension_lengths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._get_extension_lengths.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._get_extension_lengths', ['frac', 'automin', 'automax', 'default'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_extension_lengths', localization, ['frac', 'automin', 'automax', 'default'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_extension_lengths(...)' code ##################

        unicode_32333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, (-1)), 'unicode', u'\n        Get the lengths of colorbar extensions.\n\n        A helper method for _uniform_y and _proportional_y.\n        ')
        
        # Assigning a Call to a Name (line 755):
        
        # Assigning a Call to a Name (line 755):
        
        # Call to array(...): (line 755)
        # Processing the call arguments (line 755)
        
        # Obtaining an instance of the builtin type 'list' (line 755)
        list_32336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 755)
        # Adding element type (line 755)
        # Getting the type of 'default' (line 755)
        default_32337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 33), 'default', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 755, 32), list_32336, default_32337)
        # Adding element type (line 755)
        # Getting the type of 'default' (line 755)
        default_32338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 42), 'default', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 755, 32), list_32336, default_32338)
        
        # Processing the call keyword arguments (line 755)
        kwargs_32339 = {}
        # Getting the type of 'np' (line 755)
        np_32334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 23), 'np', False)
        # Obtaining the member 'array' of a type (line 755)
        array_32335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 23), np_32334, 'array')
        # Calling array(args, kwargs) (line 755)
        array_call_result_32340 = invoke(stypy.reporting.localization.Localization(__file__, 755, 23), array_32335, *[list_32336], **kwargs_32339)
        
        # Assigning a type to the variable 'extendlength' (line 755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 8), 'extendlength', array_call_result_32340)
        
        
        # Call to isinstance(...): (line 756)
        # Processing the call arguments (line 756)
        # Getting the type of 'frac' (line 756)
        frac_32342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 22), 'frac', False)
        # Getting the type of 'six' (line 756)
        six_32343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 28), 'six', False)
        # Obtaining the member 'string_types' of a type (line 756)
        string_types_32344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 28), six_32343, 'string_types')
        # Processing the call keyword arguments (line 756)
        kwargs_32345 = {}
        # Getting the type of 'isinstance' (line 756)
        isinstance_32341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 756)
        isinstance_call_result_32346 = invoke(stypy.reporting.localization.Localization(__file__, 756, 11), isinstance_32341, *[frac_32342, string_types_32344], **kwargs_32345)
        
        # Testing the type of an if condition (line 756)
        if_condition_32347 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 756, 8), isinstance_call_result_32346)
        # Assigning a type to the variable 'if_condition_32347' (line 756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 8), 'if_condition_32347', if_condition_32347)
        # SSA begins for if statement (line 756)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to lower(...): (line 757)
        # Processing the call keyword arguments (line 757)
        kwargs_32350 = {}
        # Getting the type of 'frac' (line 757)
        frac_32348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 15), 'frac', False)
        # Obtaining the member 'lower' of a type (line 757)
        lower_32349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 15), frac_32348, 'lower')
        # Calling lower(args, kwargs) (line 757)
        lower_call_result_32351 = invoke(stypy.reporting.localization.Localization(__file__, 757, 15), lower_32349, *[], **kwargs_32350)
        
        unicode_32352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 31), 'unicode', u'auto')
        # Applying the binary operator '==' (line 757)
        result_eq_32353 = python_operator(stypy.reporting.localization.Localization(__file__, 757, 15), '==', lower_call_result_32351, unicode_32352)
        
        # Testing the type of an if condition (line 757)
        if_condition_32354 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 757, 12), result_eq_32353)
        # Assigning a type to the variable 'if_condition_32354' (line 757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 12), 'if_condition_32354', if_condition_32354)
        # SSA begins for if statement (line 757)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 759):
        
        # Assigning a Name to a Subscript (line 759):
        # Getting the type of 'automin' (line 759)
        automin_32355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 34), 'automin')
        # Getting the type of 'extendlength' (line 759)
        extendlength_32356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 16), 'extendlength')
        int_32357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 29), 'int')
        # Storing an element on a container (line 759)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 759, 16), extendlength_32356, (int_32357, automin_32355))
        
        # Assigning a Name to a Subscript (line 760):
        
        # Assigning a Name to a Subscript (line 760):
        # Getting the type of 'automax' (line 760)
        automax_32358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 34), 'automax')
        # Getting the type of 'extendlength' (line 760)
        extendlength_32359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 16), 'extendlength')
        int_32360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 760, 29), 'int')
        # Storing an element on a container (line 760)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 760, 16), extendlength_32359, (int_32360, automax_32358))
        # SSA branch for the else part of an if statement (line 757)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 763)
        # Processing the call arguments (line 763)
        unicode_32362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 33), 'unicode', u'invalid value for extendfrac')
        # Processing the call keyword arguments (line 763)
        kwargs_32363 = {}
        # Getting the type of 'ValueError' (line 763)
        ValueError_32361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 763)
        ValueError_call_result_32364 = invoke(stypy.reporting.localization.Localization(__file__, 763, 22), ValueError_32361, *[unicode_32362], **kwargs_32363)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 763, 16), ValueError_call_result_32364, 'raise parameter', BaseException)
        # SSA join for if statement (line 757)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 756)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 764)
        # Getting the type of 'frac' (line 764)
        frac_32365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 13), 'frac')
        # Getting the type of 'None' (line 764)
        None_32366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 25), 'None')
        
        (may_be_32367, more_types_in_union_32368) = may_not_be_none(frac_32365, None_32366)

        if may_be_32367:

            if more_types_in_union_32368:
                # Runtime conditional SSA (line 764)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # SSA begins for try-except statement (line 765)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Name to a Subscript (line 767):
            
            # Assigning a Name to a Subscript (line 767):
            # Getting the type of 'frac' (line 767)
            frac_32369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 34), 'frac')
            # Getting the type of 'extendlength' (line 767)
            extendlength_32370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 16), 'extendlength')
            slice_32371 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 767, 16), None, None, None)
            # Storing an element on a container (line 767)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 767, 16), extendlength_32370, (slice_32371, frac_32369))
            
            
            # Call to any(...): (line 770)
            # Processing the call keyword arguments (line 770)
            kwargs_32378 = {}
            
            # Call to isnan(...): (line 770)
            # Processing the call arguments (line 770)
            # Getting the type of 'extendlength' (line 770)
            extendlength_32374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 28), 'extendlength', False)
            # Processing the call keyword arguments (line 770)
            kwargs_32375 = {}
            # Getting the type of 'np' (line 770)
            np_32372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 19), 'np', False)
            # Obtaining the member 'isnan' of a type (line 770)
            isnan_32373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 19), np_32372, 'isnan')
            # Calling isnan(args, kwargs) (line 770)
            isnan_call_result_32376 = invoke(stypy.reporting.localization.Localization(__file__, 770, 19), isnan_32373, *[extendlength_32374], **kwargs_32375)
            
            # Obtaining the member 'any' of a type (line 770)
            any_32377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 19), isnan_call_result_32376, 'any')
            # Calling any(args, kwargs) (line 770)
            any_call_result_32379 = invoke(stypy.reporting.localization.Localization(__file__, 770, 19), any_32377, *[], **kwargs_32378)
            
            # Testing the type of an if condition (line 770)
            if_condition_32380 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 770, 16), any_call_result_32379)
            # Assigning a type to the variable 'if_condition_32380' (line 770)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 16), 'if_condition_32380', if_condition_32380)
            # SSA begins for if statement (line 770)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 771)
            # Processing the call keyword arguments (line 771)
            kwargs_32382 = {}
            # Getting the type of 'ValueError' (line 771)
            ValueError_32381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 26), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 771)
            ValueError_call_result_32383 = invoke(stypy.reporting.localization.Localization(__file__, 771, 26), ValueError_32381, *[], **kwargs_32382)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 771, 20), ValueError_call_result_32383, 'raise parameter', BaseException)
            # SSA join for if statement (line 770)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the except part of a try statement (line 765)
            # SSA branch for the except 'Tuple' branch of a try statement (line 765)
            module_type_store.open_ssa_branch('except')
            
            # Call to ValueError(...): (line 774)
            # Processing the call arguments (line 774)
            unicode_32385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 33), 'unicode', u'invalid value for extendfrac')
            # Processing the call keyword arguments (line 774)
            kwargs_32386 = {}
            # Getting the type of 'ValueError' (line 774)
            ValueError_32384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 774)
            ValueError_call_result_32387 = invoke(stypy.reporting.localization.Localization(__file__, 774, 22), ValueError_32384, *[unicode_32385], **kwargs_32386)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 774, 16), ValueError_call_result_32387, 'raise parameter', BaseException)
            # SSA join for try-except statement (line 765)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_32368:
                # SSA join for if statement (line 764)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 756)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'extendlength' (line 775)
        extendlength_32388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 15), 'extendlength')
        # Assigning a type to the variable 'stypy_return_type' (line 775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 775, 8), 'stypy_return_type', extendlength_32388)
        
        # ################# End of '_get_extension_lengths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_extension_lengths' in the type store
        # Getting the type of 'stypy_return_type' (line 748)
        stypy_return_type_32389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32389)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_extension_lengths'
        return stypy_return_type_32389


    @norecursion
    def _uniform_y(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_uniform_y'
        module_type_store = module_type_store.open_function_context('_uniform_y', 777, 4, False)
        # Assigning a type to the variable 'self' (line 778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 778, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._uniform_y.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._uniform_y.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._uniform_y.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._uniform_y.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._uniform_y')
        ColorbarBase._uniform_y.__dict__.__setitem__('stypy_param_names_list', ['N'])
        ColorbarBase._uniform_y.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._uniform_y.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._uniform_y.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._uniform_y.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._uniform_y.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._uniform_y.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._uniform_y', ['N'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_uniform_y', localization, ['N'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_uniform_y(...)' code ##################

        unicode_32390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 781, (-1)), 'unicode', u'\n        Return colorbar data coordinates for *N* uniformly\n        spaced boundaries, plus ends if required.\n        ')
        
        
        # Getting the type of 'self' (line 782)
        self_32391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 11), 'self')
        # Obtaining the member 'extend' of a type (line 782)
        extend_32392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 11), self_32391, 'extend')
        unicode_32393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 782, 26), 'unicode', u'neither')
        # Applying the binary operator '==' (line 782)
        result_eq_32394 = python_operator(stypy.reporting.localization.Localization(__file__, 782, 11), '==', extend_32392, unicode_32393)
        
        # Testing the type of an if condition (line 782)
        if_condition_32395 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 782, 8), result_eq_32394)
        # Assigning a type to the variable 'if_condition_32395' (line 782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 8), 'if_condition_32395', if_condition_32395)
        # SSA begins for if statement (line 782)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 783):
        
        # Assigning a Call to a Name (line 783):
        
        # Call to linspace(...): (line 783)
        # Processing the call arguments (line 783)
        int_32398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 783, 28), 'int')
        int_32399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 783, 31), 'int')
        # Getting the type of 'N' (line 783)
        N_32400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 34), 'N', False)
        # Processing the call keyword arguments (line 783)
        kwargs_32401 = {}
        # Getting the type of 'np' (line 783)
        np_32396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 16), 'np', False)
        # Obtaining the member 'linspace' of a type (line 783)
        linspace_32397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 783, 16), np_32396, 'linspace')
        # Calling linspace(args, kwargs) (line 783)
        linspace_call_result_32402 = invoke(stypy.reporting.localization.Localization(__file__, 783, 16), linspace_32397, *[int_32398, int_32399, N_32400], **kwargs_32401)
        
        # Assigning a type to the variable 'y' (line 783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 783, 12), 'y', linspace_call_result_32402)
        # SSA branch for the else part of an if statement (line 782)
        module_type_store.open_ssa_branch('else')
        
        # Multiple assignment of 2 elements.
        
        # Assigning a BinOp to a Name (line 785):
        float_32403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 32), 'float')
        # Getting the type of 'N' (line 785)
        N_32404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 38), 'N')
        float_32405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 42), 'float')
        # Applying the binary operator '-' (line 785)
        result_sub_32406 = python_operator(stypy.reporting.localization.Localization(__file__, 785, 38), '-', N_32404, float_32405)
        
        # Applying the binary operator 'div' (line 785)
        result_div_32407 = python_operator(stypy.reporting.localization.Localization(__file__, 785, 32), 'div', float_32403, result_sub_32406)
        
        # Assigning a type to the variable 'automax' (line 785)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 785, 22), 'automax', result_div_32407)
        
        # Assigning a Name to a Name (line 785):
        # Getting the type of 'automax' (line 785)
        automax_32408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 22), 'automax')
        # Assigning a type to the variable 'automin' (line 785)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 785, 12), 'automin', automax_32408)
        
        # Assigning a Call to a Name (line 786):
        
        # Assigning a Call to a Name (line 786):
        
        # Call to _get_extension_lengths(...): (line 786)
        # Processing the call arguments (line 786)
        # Getting the type of 'self' (line 786)
        self_32411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 55), 'self', False)
        # Obtaining the member 'extendfrac' of a type (line 786)
        extendfrac_32412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 55), self_32411, 'extendfrac')
        # Getting the type of 'automin' (line 787)
        automin_32413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 55), 'automin', False)
        # Getting the type of 'automax' (line 787)
        automax_32414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 64), 'automax', False)
        # Processing the call keyword arguments (line 786)
        float_32415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 788, 63), 'float')
        keyword_32416 = float_32415
        kwargs_32417 = {'default': keyword_32416}
        # Getting the type of 'self' (line 786)
        self_32409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 27), 'self', False)
        # Obtaining the member '_get_extension_lengths' of a type (line 786)
        _get_extension_lengths_32410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 27), self_32409, '_get_extension_lengths')
        # Calling _get_extension_lengths(args, kwargs) (line 786)
        _get_extension_lengths_call_result_32418 = invoke(stypy.reporting.localization.Localization(__file__, 786, 27), _get_extension_lengths_32410, *[extendfrac_32412, automin_32413, automax_32414], **kwargs_32417)
        
        # Assigning a type to the variable 'extendlength' (line 786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 12), 'extendlength', _get_extension_lengths_call_result_32418)
        
        
        # Getting the type of 'self' (line 789)
        self_32419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 15), 'self')
        # Obtaining the member 'extend' of a type (line 789)
        extend_32420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 15), self_32419, 'extend')
        unicode_32421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, 30), 'unicode', u'both')
        # Applying the binary operator '==' (line 789)
        result_eq_32422 = python_operator(stypy.reporting.localization.Localization(__file__, 789, 15), '==', extend_32420, unicode_32421)
        
        # Testing the type of an if condition (line 789)
        if_condition_32423 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 789, 12), result_eq_32422)
        # Assigning a type to the variable 'if_condition_32423' (line 789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 12), 'if_condition_32423', if_condition_32423)
        # SSA begins for if statement (line 789)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 790):
        
        # Assigning a Call to a Name (line 790):
        
        # Call to zeros(...): (line 790)
        # Processing the call arguments (line 790)
        # Getting the type of 'N' (line 790)
        N_32426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 29), 'N', False)
        int_32427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 790, 33), 'int')
        # Applying the binary operator '+' (line 790)
        result_add_32428 = python_operator(stypy.reporting.localization.Localization(__file__, 790, 29), '+', N_32426, int_32427)
        
        unicode_32429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 790, 36), 'unicode', u'd')
        # Processing the call keyword arguments (line 790)
        kwargs_32430 = {}
        # Getting the type of 'np' (line 790)
        np_32424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 20), 'np', False)
        # Obtaining the member 'zeros' of a type (line 790)
        zeros_32425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 790, 20), np_32424, 'zeros')
        # Calling zeros(args, kwargs) (line 790)
        zeros_call_result_32431 = invoke(stypy.reporting.localization.Localization(__file__, 790, 20), zeros_32425, *[result_add_32428, unicode_32429], **kwargs_32430)
        
        # Assigning a type to the variable 'y' (line 790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 790, 16), 'y', zeros_call_result_32431)
        
        # Assigning a BinOp to a Subscript (line 791):
        
        # Assigning a BinOp to a Subscript (line 791):
        float_32432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 23), 'float')
        
        # Obtaining the type of the subscript
        int_32433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 41), 'int')
        # Getting the type of 'extendlength' (line 791)
        extendlength_32434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 28), 'extendlength')
        # Obtaining the member '__getitem__' of a type (line 791)
        getitem___32435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 28), extendlength_32434, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 791)
        subscript_call_result_32436 = invoke(stypy.reporting.localization.Localization(__file__, 791, 28), getitem___32435, int_32433)
        
        # Applying the binary operator '-' (line 791)
        result_sub_32437 = python_operator(stypy.reporting.localization.Localization(__file__, 791, 23), '-', float_32432, subscript_call_result_32436)
        
        # Getting the type of 'y' (line 791)
        y_32438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 16), 'y')
        int_32439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 18), 'int')
        # Storing an element on a container (line 791)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 791, 16), y_32438, (int_32439, result_sub_32437))
        
        # Assigning a BinOp to a Subscript (line 792):
        
        # Assigning a BinOp to a Subscript (line 792):
        float_32440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 24), 'float')
        
        # Obtaining the type of the subscript
        int_32441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 42), 'int')
        # Getting the type of 'extendlength' (line 792)
        extendlength_32442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 29), 'extendlength')
        # Obtaining the member '__getitem__' of a type (line 792)
        getitem___32443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 29), extendlength_32442, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 792)
        subscript_call_result_32444 = invoke(stypy.reporting.localization.Localization(__file__, 792, 29), getitem___32443, int_32441)
        
        # Applying the binary operator '+' (line 792)
        result_add_32445 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 24), '+', float_32440, subscript_call_result_32444)
        
        # Getting the type of 'y' (line 792)
        y_32446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 16), 'y')
        int_32447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 18), 'int')
        # Storing an element on a container (line 792)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 792, 16), y_32446, (int_32447, result_add_32445))
        # SSA branch for the else part of an if statement (line 789)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 793)
        self_32448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 17), 'self')
        # Obtaining the member 'extend' of a type (line 793)
        extend_32449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 17), self_32448, 'extend')
        unicode_32450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 32), 'unicode', u'min')
        # Applying the binary operator '==' (line 793)
        result_eq_32451 = python_operator(stypy.reporting.localization.Localization(__file__, 793, 17), '==', extend_32449, unicode_32450)
        
        # Testing the type of an if condition (line 793)
        if_condition_32452 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 793, 17), result_eq_32451)
        # Assigning a type to the variable 'if_condition_32452' (line 793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 17), 'if_condition_32452', if_condition_32452)
        # SSA begins for if statement (line 793)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 794):
        
        # Assigning a Call to a Name (line 794):
        
        # Call to zeros(...): (line 794)
        # Processing the call arguments (line 794)
        # Getting the type of 'N' (line 794)
        N_32455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 29), 'N', False)
        int_32456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 794, 33), 'int')
        # Applying the binary operator '+' (line 794)
        result_add_32457 = python_operator(stypy.reporting.localization.Localization(__file__, 794, 29), '+', N_32455, int_32456)
        
        unicode_32458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 794, 36), 'unicode', u'd')
        # Processing the call keyword arguments (line 794)
        kwargs_32459 = {}
        # Getting the type of 'np' (line 794)
        np_32453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 20), 'np', False)
        # Obtaining the member 'zeros' of a type (line 794)
        zeros_32454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 20), np_32453, 'zeros')
        # Calling zeros(args, kwargs) (line 794)
        zeros_call_result_32460 = invoke(stypy.reporting.localization.Localization(__file__, 794, 20), zeros_32454, *[result_add_32457, unicode_32458], **kwargs_32459)
        
        # Assigning a type to the variable 'y' (line 794)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 16), 'y', zeros_call_result_32460)
        
        # Assigning a BinOp to a Subscript (line 795):
        
        # Assigning a BinOp to a Subscript (line 795):
        float_32461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 795, 23), 'float')
        
        # Obtaining the type of the subscript
        int_32462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 795, 41), 'int')
        # Getting the type of 'extendlength' (line 795)
        extendlength_32463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 28), 'extendlength')
        # Obtaining the member '__getitem__' of a type (line 795)
        getitem___32464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 28), extendlength_32463, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 795)
        subscript_call_result_32465 = invoke(stypy.reporting.localization.Localization(__file__, 795, 28), getitem___32464, int_32462)
        
        # Applying the binary operator '-' (line 795)
        result_sub_32466 = python_operator(stypy.reporting.localization.Localization(__file__, 795, 23), '-', float_32461, subscript_call_result_32465)
        
        # Getting the type of 'y' (line 795)
        y_32467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 16), 'y')
        int_32468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 795, 18), 'int')
        # Storing an element on a container (line 795)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 795, 16), y_32467, (int_32468, result_sub_32466))
        # SSA branch for the else part of an if statement (line 793)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 797):
        
        # Assigning a Call to a Name (line 797):
        
        # Call to zeros(...): (line 797)
        # Processing the call arguments (line 797)
        # Getting the type of 'N' (line 797)
        N_32471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 29), 'N', False)
        int_32472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 33), 'int')
        # Applying the binary operator '+' (line 797)
        result_add_32473 = python_operator(stypy.reporting.localization.Localization(__file__, 797, 29), '+', N_32471, int_32472)
        
        unicode_32474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 36), 'unicode', u'd')
        # Processing the call keyword arguments (line 797)
        kwargs_32475 = {}
        # Getting the type of 'np' (line 797)
        np_32469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 20), 'np', False)
        # Obtaining the member 'zeros' of a type (line 797)
        zeros_32470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 20), np_32469, 'zeros')
        # Calling zeros(args, kwargs) (line 797)
        zeros_call_result_32476 = invoke(stypy.reporting.localization.Localization(__file__, 797, 20), zeros_32470, *[result_add_32473, unicode_32474], **kwargs_32475)
        
        # Assigning a type to the variable 'y' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 16), 'y', zeros_call_result_32476)
        
        # Assigning a BinOp to a Subscript (line 798):
        
        # Assigning a BinOp to a Subscript (line 798):
        float_32477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 24), 'float')
        
        # Obtaining the type of the subscript
        int_32478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 42), 'int')
        # Getting the type of 'extendlength' (line 798)
        extendlength_32479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 29), 'extendlength')
        # Obtaining the member '__getitem__' of a type (line 798)
        getitem___32480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 29), extendlength_32479, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 798)
        subscript_call_result_32481 = invoke(stypy.reporting.localization.Localization(__file__, 798, 29), getitem___32480, int_32478)
        
        # Applying the binary operator '+' (line 798)
        result_add_32482 = python_operator(stypy.reporting.localization.Localization(__file__, 798, 24), '+', float_32477, subscript_call_result_32481)
        
        # Getting the type of 'y' (line 798)
        y_32483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 16), 'y')
        int_32484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 18), 'int')
        # Storing an element on a container (line 798)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 798, 16), y_32483, (int_32484, result_add_32482))
        # SSA join for if statement (line 793)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 789)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Subscript (line 799):
        
        # Assigning a Call to a Subscript (line 799):
        
        # Call to linspace(...): (line 799)
        # Processing the call arguments (line 799)
        int_32487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 42), 'int')
        int_32488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 45), 'int')
        # Getting the type of 'N' (line 799)
        N_32489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 48), 'N', False)
        # Processing the call keyword arguments (line 799)
        kwargs_32490 = {}
        # Getting the type of 'np' (line 799)
        np_32485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 30), 'np', False)
        # Obtaining the member 'linspace' of a type (line 799)
        linspace_32486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 30), np_32485, 'linspace')
        # Calling linspace(args, kwargs) (line 799)
        linspace_call_result_32491 = invoke(stypy.reporting.localization.Localization(__file__, 799, 30), linspace_32486, *[int_32487, int_32488, N_32489], **kwargs_32490)
        
        # Getting the type of 'y' (line 799)
        y_32492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'y')
        # Getting the type of 'self' (line 799)
        self_32493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 14), 'self')
        # Obtaining the member '_inside' of a type (line 799)
        _inside_32494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 14), self_32493, '_inside')
        # Storing an element on a container (line 799)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 799, 12), y_32492, (_inside_32494, linspace_call_result_32491))
        # SSA join for if statement (line 782)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'y' (line 800)
        y_32495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 15), 'y')
        # Assigning a type to the variable 'stypy_return_type' (line 800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 800, 8), 'stypy_return_type', y_32495)
        
        # ################# End of '_uniform_y(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_uniform_y' in the type store
        # Getting the type of 'stypy_return_type' (line 777)
        stypy_return_type_32496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32496)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_uniform_y'
        return stypy_return_type_32496


    @norecursion
    def _proportional_y(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_proportional_y'
        module_type_store = module_type_store.open_function_context('_proportional_y', 802, 4, False)
        # Assigning a type to the variable 'self' (line 803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._proportional_y.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._proportional_y.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._proportional_y.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._proportional_y.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._proportional_y')
        ColorbarBase._proportional_y.__dict__.__setitem__('stypy_param_names_list', [])
        ColorbarBase._proportional_y.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._proportional_y.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._proportional_y.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._proportional_y.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._proportional_y.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._proportional_y.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._proportional_y', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_proportional_y', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_proportional_y(...)' code ##################

        unicode_32497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 806, (-1)), 'unicode', u'\n        Return colorbar data coordinates for the boundaries of\n        a proportional colorbar.\n        ')
        
        
        # Call to isinstance(...): (line 807)
        # Processing the call arguments (line 807)
        # Getting the type of 'self' (line 807)
        self_32499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 22), 'self', False)
        # Obtaining the member 'norm' of a type (line 807)
        norm_32500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 22), self_32499, 'norm')
        # Getting the type of 'colors' (line 807)
        colors_32501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 33), 'colors', False)
        # Obtaining the member 'BoundaryNorm' of a type (line 807)
        BoundaryNorm_32502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 33), colors_32501, 'BoundaryNorm')
        # Processing the call keyword arguments (line 807)
        kwargs_32503 = {}
        # Getting the type of 'isinstance' (line 807)
        isinstance_32498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 807)
        isinstance_call_result_32504 = invoke(stypy.reporting.localization.Localization(__file__, 807, 11), isinstance_32498, *[norm_32500, BoundaryNorm_32502], **kwargs_32503)
        
        # Testing the type of an if condition (line 807)
        if_condition_32505 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 807, 8), isinstance_call_result_32504)
        # Assigning a type to the variable 'if_condition_32505' (line 807)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 8), 'if_condition_32505', if_condition_32505)
        # SSA begins for if statement (line 807)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 808):
        
        # Assigning a BinOp to a Name (line 808):
        # Getting the type of 'self' (line 808)
        self_32506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 17), 'self')
        # Obtaining the member '_boundaries' of a type (line 808)
        _boundaries_32507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 17), self_32506, '_boundaries')
        
        # Obtaining the type of the subscript
        int_32508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 53), 'int')
        # Getting the type of 'self' (line 808)
        self_32509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 36), 'self')
        # Obtaining the member '_boundaries' of a type (line 808)
        _boundaries_32510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 36), self_32509, '_boundaries')
        # Obtaining the member '__getitem__' of a type (line 808)
        getitem___32511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 36), _boundaries_32510, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 808)
        subscript_call_result_32512 = invoke(stypy.reporting.localization.Localization(__file__, 808, 36), getitem___32511, int_32508)
        
        # Applying the binary operator '-' (line 808)
        result_sub_32513 = python_operator(stypy.reporting.localization.Localization(__file__, 808, 17), '-', _boundaries_32507, subscript_call_result_32512)
        
        # Assigning a type to the variable 'y' (line 808)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 808, 12), 'y', result_sub_32513)
        
        # Assigning a BinOp to a Name (line 809):
        
        # Assigning a BinOp to a Name (line 809):
        # Getting the type of 'y' (line 809)
        y_32514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 16), 'y')
        
        # Obtaining the type of the subscript
        int_32515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 38), 'int')
        # Getting the type of 'self' (line 809)
        self_32516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 21), 'self')
        # Obtaining the member '_boundaries' of a type (line 809)
        _boundaries_32517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 21), self_32516, '_boundaries')
        # Obtaining the member '__getitem__' of a type (line 809)
        getitem___32518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 21), _boundaries_32517, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 809)
        subscript_call_result_32519 = invoke(stypy.reporting.localization.Localization(__file__, 809, 21), getitem___32518, int_32515)
        
        
        # Obtaining the type of the subscript
        int_32520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 61), 'int')
        # Getting the type of 'self' (line 809)
        self_32521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 44), 'self')
        # Obtaining the member '_boundaries' of a type (line 809)
        _boundaries_32522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 44), self_32521, '_boundaries')
        # Obtaining the member '__getitem__' of a type (line 809)
        getitem___32523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 44), _boundaries_32522, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 809)
        subscript_call_result_32524 = invoke(stypy.reporting.localization.Localization(__file__, 809, 44), getitem___32523, int_32520)
        
        # Applying the binary operator '-' (line 809)
        result_sub_32525 = python_operator(stypy.reporting.localization.Localization(__file__, 809, 21), '-', subscript_call_result_32519, subscript_call_result_32524)
        
        # Applying the binary operator 'div' (line 809)
        result_div_32526 = python_operator(stypy.reporting.localization.Localization(__file__, 809, 16), 'div', y_32514, result_sub_32525)
        
        # Assigning a type to the variable 'y' (line 809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 809, 12), 'y', result_div_32526)
        # SSA branch for the else part of an if statement (line 807)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 811):
        
        # Assigning a Call to a Name (line 811):
        
        # Call to norm(...): (line 811)
        # Processing the call arguments (line 811)
        
        # Call to copy(...): (line 811)
        # Processing the call keyword arguments (line 811)
        kwargs_32532 = {}
        # Getting the type of 'self' (line 811)
        self_32529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 26), 'self', False)
        # Obtaining the member '_boundaries' of a type (line 811)
        _boundaries_32530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 811, 26), self_32529, '_boundaries')
        # Obtaining the member 'copy' of a type (line 811)
        copy_32531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 811, 26), _boundaries_32530, 'copy')
        # Calling copy(args, kwargs) (line 811)
        copy_call_result_32533 = invoke(stypy.reporting.localization.Localization(__file__, 811, 26), copy_32531, *[], **kwargs_32532)
        
        # Processing the call keyword arguments (line 811)
        kwargs_32534 = {}
        # Getting the type of 'self' (line 811)
        self_32527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 16), 'self', False)
        # Obtaining the member 'norm' of a type (line 811)
        norm_32528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 811, 16), self_32527, 'norm')
        # Calling norm(args, kwargs) (line 811)
        norm_call_result_32535 = invoke(stypy.reporting.localization.Localization(__file__, 811, 16), norm_32528, *[copy_call_result_32533], **kwargs_32534)
        
        # Assigning a type to the variable 'y' (line 811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 12), 'y', norm_call_result_32535)
        
        # Assigning a Call to a Name (line 812):
        
        # Assigning a Call to a Name (line 812):
        
        # Call to filled(...): (line 812)
        # Processing the call arguments (line 812)
        # Getting the type of 'y' (line 812)
        y_32539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 29), 'y', False)
        # Getting the type of 'np' (line 812)
        np_32540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 32), 'np', False)
        # Obtaining the member 'nan' of a type (line 812)
        nan_32541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 32), np_32540, 'nan')
        # Processing the call keyword arguments (line 812)
        kwargs_32542 = {}
        # Getting the type of 'np' (line 812)
        np_32536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 16), 'np', False)
        # Obtaining the member 'ma' of a type (line 812)
        ma_32537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 16), np_32536, 'ma')
        # Obtaining the member 'filled' of a type (line 812)
        filled_32538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 16), ma_32537, 'filled')
        # Calling filled(args, kwargs) (line 812)
        filled_call_result_32543 = invoke(stypy.reporting.localization.Localization(__file__, 812, 16), filled_32538, *[y_32539, nan_32541], **kwargs_32542)
        
        # Assigning a type to the variable 'y' (line 812)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 812, 12), 'y', filled_call_result_32543)
        # SSA join for if statement (line 807)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 813)
        self_32544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 11), 'self')
        # Obtaining the member 'extend' of a type (line 813)
        extend_32545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 813, 11), self_32544, 'extend')
        unicode_32546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 26), 'unicode', u'min')
        # Applying the binary operator '==' (line 813)
        result_eq_32547 = python_operator(stypy.reporting.localization.Localization(__file__, 813, 11), '==', extend_32545, unicode_32546)
        
        # Testing the type of an if condition (line 813)
        if_condition_32548 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 813, 8), result_eq_32547)
        # Assigning a type to the variable 'if_condition_32548' (line 813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 813, 8), 'if_condition_32548', if_condition_32548)
        # SSA begins for if statement (line 813)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 815):
        
        # Assigning a BinOp to a Name (line 815):
        
        # Obtaining the type of the subscript
        int_32549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 21), 'int')
        # Getting the type of 'y' (line 815)
        y_32550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 19), 'y')
        # Obtaining the member '__getitem__' of a type (line 815)
        getitem___32551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 19), y_32550, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 815)
        subscript_call_result_32552 = invoke(stypy.reporting.localization.Localization(__file__, 815, 19), getitem___32551, int_32549)
        
        
        # Obtaining the type of the subscript
        int_32553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 29), 'int')
        # Getting the type of 'y' (line 815)
        y_32554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 27), 'y')
        # Obtaining the member '__getitem__' of a type (line 815)
        getitem___32555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 27), y_32554, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 815)
        subscript_call_result_32556 = invoke(stypy.reporting.localization.Localization(__file__, 815, 27), getitem___32555, int_32553)
        
        # Applying the binary operator '-' (line 815)
        result_sub_32557 = python_operator(stypy.reporting.localization.Localization(__file__, 815, 19), '-', subscript_call_result_32552, subscript_call_result_32556)
        
        # Assigning a type to the variable 'clen' (line 815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 12), 'clen', result_sub_32557)
        
        # Assigning a BinOp to a Name (line 816):
        
        # Assigning a BinOp to a Name (line 816):
        
        # Obtaining the type of the subscript
        int_32558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 816, 25), 'int')
        # Getting the type of 'y' (line 816)
        y_32559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 23), 'y')
        # Obtaining the member '__getitem__' of a type (line 816)
        getitem___32560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 816, 23), y_32559, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 816)
        subscript_call_result_32561 = invoke(stypy.reporting.localization.Localization(__file__, 816, 23), getitem___32560, int_32558)
        
        
        # Obtaining the type of the subscript
        int_32562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 816, 32), 'int')
        # Getting the type of 'y' (line 816)
        y_32563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 30), 'y')
        # Obtaining the member '__getitem__' of a type (line 816)
        getitem___32564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 816, 30), y_32563, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 816)
        subscript_call_result_32565 = invoke(stypy.reporting.localization.Localization(__file__, 816, 30), getitem___32564, int_32562)
        
        # Applying the binary operator '-' (line 816)
        result_sub_32566 = python_operator(stypy.reporting.localization.Localization(__file__, 816, 23), '-', subscript_call_result_32561, subscript_call_result_32565)
        
        # Getting the type of 'clen' (line 816)
        clen_32567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 38), 'clen')
        # Applying the binary operator 'div' (line 816)
        result_div_32568 = python_operator(stypy.reporting.localization.Localization(__file__, 816, 22), 'div', result_sub_32566, clen_32567)
        
        # Assigning a type to the variable 'automin' (line 816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 816, 12), 'automin', result_div_32568)
        
        # Assigning a BinOp to a Name (line 817):
        
        # Assigning a BinOp to a Name (line 817):
        
        # Obtaining the type of the subscript
        int_32569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 817, 25), 'int')
        # Getting the type of 'y' (line 817)
        y_32570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 23), 'y')
        # Obtaining the member '__getitem__' of a type (line 817)
        getitem___32571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 23), y_32570, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 817)
        subscript_call_result_32572 = invoke(stypy.reporting.localization.Localization(__file__, 817, 23), getitem___32571, int_32569)
        
        
        # Obtaining the type of the subscript
        int_32573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 817, 33), 'int')
        # Getting the type of 'y' (line 817)
        y_32574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 31), 'y')
        # Obtaining the member '__getitem__' of a type (line 817)
        getitem___32575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 31), y_32574, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 817)
        subscript_call_result_32576 = invoke(stypy.reporting.localization.Localization(__file__, 817, 31), getitem___32575, int_32573)
        
        # Applying the binary operator '-' (line 817)
        result_sub_32577 = python_operator(stypy.reporting.localization.Localization(__file__, 817, 23), '-', subscript_call_result_32572, subscript_call_result_32576)
        
        # Getting the type of 'clen' (line 817)
        clen_32578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 40), 'clen')
        # Applying the binary operator 'div' (line 817)
        result_div_32579 = python_operator(stypy.reporting.localization.Localization(__file__, 817, 22), 'div', result_sub_32577, clen_32578)
        
        # Assigning a type to the variable 'automax' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 12), 'automax', result_div_32579)
        # SSA branch for the else part of an if statement (line 813)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 818)
        self_32580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 13), 'self')
        # Obtaining the member 'extend' of a type (line 818)
        extend_32581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 13), self_32580, 'extend')
        unicode_32582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 28), 'unicode', u'max')
        # Applying the binary operator '==' (line 818)
        result_eq_32583 = python_operator(stypy.reporting.localization.Localization(__file__, 818, 13), '==', extend_32581, unicode_32582)
        
        # Testing the type of an if condition (line 818)
        if_condition_32584 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 818, 13), result_eq_32583)
        # Assigning a type to the variable 'if_condition_32584' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 13), 'if_condition_32584', if_condition_32584)
        # SSA begins for if statement (line 818)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 820):
        
        # Assigning a BinOp to a Name (line 820):
        
        # Obtaining the type of the subscript
        int_32585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 21), 'int')
        # Getting the type of 'y' (line 820)
        y_32586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 19), 'y')
        # Obtaining the member '__getitem__' of a type (line 820)
        getitem___32587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 19), y_32586, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 820)
        subscript_call_result_32588 = invoke(stypy.reporting.localization.Localization(__file__, 820, 19), getitem___32587, int_32585)
        
        
        # Obtaining the type of the subscript
        int_32589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 29), 'int')
        # Getting the type of 'y' (line 820)
        y_32590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 27), 'y')
        # Obtaining the member '__getitem__' of a type (line 820)
        getitem___32591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 27), y_32590, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 820)
        subscript_call_result_32592 = invoke(stypy.reporting.localization.Localization(__file__, 820, 27), getitem___32591, int_32589)
        
        # Applying the binary operator '-' (line 820)
        result_sub_32593 = python_operator(stypy.reporting.localization.Localization(__file__, 820, 19), '-', subscript_call_result_32588, subscript_call_result_32592)
        
        # Assigning a type to the variable 'clen' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 12), 'clen', result_sub_32593)
        
        # Assigning a BinOp to a Name (line 821):
        
        # Assigning a BinOp to a Name (line 821):
        
        # Obtaining the type of the subscript
        int_32594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, 25), 'int')
        # Getting the type of 'y' (line 821)
        y_32595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 23), 'y')
        # Obtaining the member '__getitem__' of a type (line 821)
        getitem___32596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 821, 23), y_32595, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 821)
        subscript_call_result_32597 = invoke(stypy.reporting.localization.Localization(__file__, 821, 23), getitem___32596, int_32594)
        
        
        # Obtaining the type of the subscript
        int_32598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, 32), 'int')
        # Getting the type of 'y' (line 821)
        y_32599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 30), 'y')
        # Obtaining the member '__getitem__' of a type (line 821)
        getitem___32600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 821, 30), y_32599, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 821)
        subscript_call_result_32601 = invoke(stypy.reporting.localization.Localization(__file__, 821, 30), getitem___32600, int_32598)
        
        # Applying the binary operator '-' (line 821)
        result_sub_32602 = python_operator(stypy.reporting.localization.Localization(__file__, 821, 23), '-', subscript_call_result_32597, subscript_call_result_32601)
        
        # Getting the type of 'clen' (line 821)
        clen_32603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 38), 'clen')
        # Applying the binary operator 'div' (line 821)
        result_div_32604 = python_operator(stypy.reporting.localization.Localization(__file__, 821, 22), 'div', result_sub_32602, clen_32603)
        
        # Assigning a type to the variable 'automin' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 12), 'automin', result_div_32604)
        
        # Assigning a BinOp to a Name (line 822):
        
        # Assigning a BinOp to a Name (line 822):
        
        # Obtaining the type of the subscript
        int_32605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 25), 'int')
        # Getting the type of 'y' (line 822)
        y_32606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 23), 'y')
        # Obtaining the member '__getitem__' of a type (line 822)
        getitem___32607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 23), y_32606, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 822)
        subscript_call_result_32608 = invoke(stypy.reporting.localization.Localization(__file__, 822, 23), getitem___32607, int_32605)
        
        
        # Obtaining the type of the subscript
        int_32609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 33), 'int')
        # Getting the type of 'y' (line 822)
        y_32610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 31), 'y')
        # Obtaining the member '__getitem__' of a type (line 822)
        getitem___32611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 31), y_32610, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 822)
        subscript_call_result_32612 = invoke(stypy.reporting.localization.Localization(__file__, 822, 31), getitem___32611, int_32609)
        
        # Applying the binary operator '-' (line 822)
        result_sub_32613 = python_operator(stypy.reporting.localization.Localization(__file__, 822, 23), '-', subscript_call_result_32608, subscript_call_result_32612)
        
        # Getting the type of 'clen' (line 822)
        clen_32614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 40), 'clen')
        # Applying the binary operator 'div' (line 822)
        result_div_32615 = python_operator(stypy.reporting.localization.Localization(__file__, 822, 22), 'div', result_sub_32613, clen_32614)
        
        # Assigning a type to the variable 'automax' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 12), 'automax', result_div_32615)
        # SSA branch for the else part of an if statement (line 818)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 823)
        self_32616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 13), 'self')
        # Obtaining the member 'extend' of a type (line 823)
        extend_32617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 13), self_32616, 'extend')
        unicode_32618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 28), 'unicode', u'both')
        # Applying the binary operator '==' (line 823)
        result_eq_32619 = python_operator(stypy.reporting.localization.Localization(__file__, 823, 13), '==', extend_32617, unicode_32618)
        
        # Testing the type of an if condition (line 823)
        if_condition_32620 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 823, 13), result_eq_32619)
        # Assigning a type to the variable 'if_condition_32620' (line 823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 13), 'if_condition_32620', if_condition_32620)
        # SSA begins for if statement (line 823)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 825):
        
        # Assigning a BinOp to a Name (line 825):
        
        # Obtaining the type of the subscript
        int_32621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 21), 'int')
        # Getting the type of 'y' (line 825)
        y_32622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 19), 'y')
        # Obtaining the member '__getitem__' of a type (line 825)
        getitem___32623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 19), y_32622, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 825)
        subscript_call_result_32624 = invoke(stypy.reporting.localization.Localization(__file__, 825, 19), getitem___32623, int_32621)
        
        
        # Obtaining the type of the subscript
        int_32625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 29), 'int')
        # Getting the type of 'y' (line 825)
        y_32626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 27), 'y')
        # Obtaining the member '__getitem__' of a type (line 825)
        getitem___32627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 27), y_32626, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 825)
        subscript_call_result_32628 = invoke(stypy.reporting.localization.Localization(__file__, 825, 27), getitem___32627, int_32625)
        
        # Applying the binary operator '-' (line 825)
        result_sub_32629 = python_operator(stypy.reporting.localization.Localization(__file__, 825, 19), '-', subscript_call_result_32624, subscript_call_result_32628)
        
        # Assigning a type to the variable 'clen' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 12), 'clen', result_sub_32629)
        
        # Assigning a BinOp to a Name (line 826):
        
        # Assigning a BinOp to a Name (line 826):
        
        # Obtaining the type of the subscript
        int_32630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 25), 'int')
        # Getting the type of 'y' (line 826)
        y_32631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 23), 'y')
        # Obtaining the member '__getitem__' of a type (line 826)
        getitem___32632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 23), y_32631, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 826)
        subscript_call_result_32633 = invoke(stypy.reporting.localization.Localization(__file__, 826, 23), getitem___32632, int_32630)
        
        
        # Obtaining the type of the subscript
        int_32634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 32), 'int')
        # Getting the type of 'y' (line 826)
        y_32635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 30), 'y')
        # Obtaining the member '__getitem__' of a type (line 826)
        getitem___32636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 30), y_32635, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 826)
        subscript_call_result_32637 = invoke(stypy.reporting.localization.Localization(__file__, 826, 30), getitem___32636, int_32634)
        
        # Applying the binary operator '-' (line 826)
        result_sub_32638 = python_operator(stypy.reporting.localization.Localization(__file__, 826, 23), '-', subscript_call_result_32633, subscript_call_result_32637)
        
        # Getting the type of 'clen' (line 826)
        clen_32639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 38), 'clen')
        # Applying the binary operator 'div' (line 826)
        result_div_32640 = python_operator(stypy.reporting.localization.Localization(__file__, 826, 22), 'div', result_sub_32638, clen_32639)
        
        # Assigning a type to the variable 'automin' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 12), 'automin', result_div_32640)
        
        # Assigning a BinOp to a Name (line 827):
        
        # Assigning a BinOp to a Name (line 827):
        
        # Obtaining the type of the subscript
        int_32641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 25), 'int')
        # Getting the type of 'y' (line 827)
        y_32642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 23), 'y')
        # Obtaining the member '__getitem__' of a type (line 827)
        getitem___32643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 23), y_32642, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 827)
        subscript_call_result_32644 = invoke(stypy.reporting.localization.Localization(__file__, 827, 23), getitem___32643, int_32641)
        
        
        # Obtaining the type of the subscript
        int_32645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 33), 'int')
        # Getting the type of 'y' (line 827)
        y_32646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 31), 'y')
        # Obtaining the member '__getitem__' of a type (line 827)
        getitem___32647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 31), y_32646, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 827)
        subscript_call_result_32648 = invoke(stypy.reporting.localization.Localization(__file__, 827, 31), getitem___32647, int_32645)
        
        # Applying the binary operator '-' (line 827)
        result_sub_32649 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 23), '-', subscript_call_result_32644, subscript_call_result_32648)
        
        # Getting the type of 'clen' (line 827)
        clen_32650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 40), 'clen')
        # Applying the binary operator 'div' (line 827)
        result_div_32651 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 22), 'div', result_sub_32649, clen_32650)
        
        # Assigning a type to the variable 'automax' (line 827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 827, 12), 'automax', result_div_32651)
        # SSA join for if statement (line 823)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 818)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 813)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 828)
        self_32652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 11), 'self')
        # Obtaining the member 'extend' of a type (line 828)
        extend_32653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 11), self_32652, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 828)
        tuple_32654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 828)
        # Adding element type (line 828)
        unicode_32655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 27), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 828, 27), tuple_32654, unicode_32655)
        # Adding element type (line 828)
        unicode_32656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 35), 'unicode', u'min')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 828, 27), tuple_32654, unicode_32656)
        # Adding element type (line 828)
        unicode_32657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 42), 'unicode', u'max')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 828, 27), tuple_32654, unicode_32657)
        
        # Applying the binary operator 'in' (line 828)
        result_contains_32658 = python_operator(stypy.reporting.localization.Localization(__file__, 828, 11), 'in', extend_32653, tuple_32654)
        
        # Testing the type of an if condition (line 828)
        if_condition_32659 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 828, 8), result_contains_32658)
        # Assigning a type to the variable 'if_condition_32659' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 8), 'if_condition_32659', if_condition_32659)
        # SSA begins for if statement (line 828)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 829):
        
        # Assigning a Call to a Name (line 829):
        
        # Call to _get_extension_lengths(...): (line 829)
        # Processing the call arguments (line 829)
        # Getting the type of 'self' (line 829)
        self_32662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 55), 'self', False)
        # Obtaining the member 'extendfrac' of a type (line 829)
        extendfrac_32663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 55), self_32662, 'extendfrac')
        # Getting the type of 'automin' (line 830)
        automin_32664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 55), 'automin', False)
        # Getting the type of 'automax' (line 830)
        automax_32665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 64), 'automax', False)
        # Processing the call keyword arguments (line 829)
        float_32666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 63), 'float')
        keyword_32667 = float_32666
        kwargs_32668 = {'default': keyword_32667}
        # Getting the type of 'self' (line 829)
        self_32660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 27), 'self', False)
        # Obtaining the member '_get_extension_lengths' of a type (line 829)
        _get_extension_lengths_32661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 27), self_32660, '_get_extension_lengths')
        # Calling _get_extension_lengths(args, kwargs) (line 829)
        _get_extension_lengths_call_result_32669 = invoke(stypy.reporting.localization.Localization(__file__, 829, 27), _get_extension_lengths_32661, *[extendfrac_32663, automin_32664, automax_32665], **kwargs_32668)
        
        # Assigning a type to the variable 'extendlength' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 12), 'extendlength', _get_extension_lengths_call_result_32669)
        # SSA join for if statement (line 828)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 832)
        self_32670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 11), 'self')
        # Obtaining the member 'extend' of a type (line 832)
        extend_32671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 832, 11), self_32670, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 832)
        tuple_32672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 832)
        # Adding element type (line 832)
        unicode_32673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 27), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 832, 27), tuple_32672, unicode_32673)
        # Adding element type (line 832)
        unicode_32674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 35), 'unicode', u'min')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 832, 27), tuple_32672, unicode_32674)
        
        # Applying the binary operator 'in' (line 832)
        result_contains_32675 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 11), 'in', extend_32671, tuple_32672)
        
        # Testing the type of an if condition (line 832)
        if_condition_32676 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 832, 8), result_contains_32675)
        # Assigning a type to the variable 'if_condition_32676' (line 832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 8), 'if_condition_32676', if_condition_32676)
        # SSA begins for if statement (line 832)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Subscript (line 833):
        
        # Assigning a BinOp to a Subscript (line 833):
        float_32677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 833, 19), 'float')
        
        # Obtaining the type of the subscript
        int_32678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 833, 37), 'int')
        # Getting the type of 'extendlength' (line 833)
        extendlength_32679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 24), 'extendlength')
        # Obtaining the member '__getitem__' of a type (line 833)
        getitem___32680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 24), extendlength_32679, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 833)
        subscript_call_result_32681 = invoke(stypy.reporting.localization.Localization(__file__, 833, 24), getitem___32680, int_32678)
        
        # Applying the binary operator '-' (line 833)
        result_sub_32682 = python_operator(stypy.reporting.localization.Localization(__file__, 833, 19), '-', float_32677, subscript_call_result_32681)
        
        # Getting the type of 'y' (line 833)
        y_32683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 12), 'y')
        int_32684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 833, 14), 'int')
        # Storing an element on a container (line 833)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 833, 12), y_32683, (int_32684, result_sub_32682))
        # SSA join for if statement (line 832)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 834)
        self_32685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 11), 'self')
        # Obtaining the member 'extend' of a type (line 834)
        extend_32686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 11), self_32685, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 834)
        tuple_32687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 834, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 834)
        # Adding element type (line 834)
        unicode_32688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 834, 27), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 834, 27), tuple_32687, unicode_32688)
        # Adding element type (line 834)
        unicode_32689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 834, 35), 'unicode', u'max')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 834, 27), tuple_32687, unicode_32689)
        
        # Applying the binary operator 'in' (line 834)
        result_contains_32690 = python_operator(stypy.reporting.localization.Localization(__file__, 834, 11), 'in', extend_32686, tuple_32687)
        
        # Testing the type of an if condition (line 834)
        if_condition_32691 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 834, 8), result_contains_32690)
        # Assigning a type to the variable 'if_condition_32691' (line 834)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 8), 'if_condition_32691', if_condition_32691)
        # SSA begins for if statement (line 834)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Subscript (line 835):
        
        # Assigning a BinOp to a Subscript (line 835):
        float_32692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 835, 20), 'float')
        
        # Obtaining the type of the subscript
        int_32693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 835, 38), 'int')
        # Getting the type of 'extendlength' (line 835)
        extendlength_32694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 25), 'extendlength')
        # Obtaining the member '__getitem__' of a type (line 835)
        getitem___32695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 25), extendlength_32694, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 835)
        subscript_call_result_32696 = invoke(stypy.reporting.localization.Localization(__file__, 835, 25), getitem___32695, int_32693)
        
        # Applying the binary operator '+' (line 835)
        result_add_32697 = python_operator(stypy.reporting.localization.Localization(__file__, 835, 20), '+', float_32692, subscript_call_result_32696)
        
        # Getting the type of 'y' (line 835)
        y_32698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 12), 'y')
        int_32699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 835, 14), 'int')
        # Storing an element on a container (line 835)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 835, 12), y_32698, (int_32699, result_add_32697))
        # SSA join for if statement (line 834)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 836):
        
        # Assigning a Subscript to a Name (line 836):
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 836)
        self_32700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 15), 'self')
        # Obtaining the member '_inside' of a type (line 836)
        _inside_32701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 15), self_32700, '_inside')
        # Getting the type of 'y' (line 836)
        y_32702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 13), 'y')
        # Obtaining the member '__getitem__' of a type (line 836)
        getitem___32703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 13), y_32702, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 836)
        subscript_call_result_32704 = invoke(stypy.reporting.localization.Localization(__file__, 836, 13), getitem___32703, _inside_32701)
        
        # Assigning a type to the variable 'yi' (line 836)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 836, 8), 'yi', subscript_call_result_32704)
        
        # Assigning a Call to a Name (line 837):
        
        # Assigning a Call to a Name (line 837):
        
        # Call to Normalize(...): (line 837)
        # Processing the call arguments (line 837)
        
        # Obtaining the type of the subscript
        int_32707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, 35), 'int')
        # Getting the type of 'yi' (line 837)
        yi_32708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 32), 'yi', False)
        # Obtaining the member '__getitem__' of a type (line 837)
        getitem___32709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 32), yi_32708, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 837)
        subscript_call_result_32710 = invoke(stypy.reporting.localization.Localization(__file__, 837, 32), getitem___32709, int_32707)
        
        
        # Obtaining the type of the subscript
        int_32711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, 42), 'int')
        # Getting the type of 'yi' (line 837)
        yi_32712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 39), 'yi', False)
        # Obtaining the member '__getitem__' of a type (line 837)
        getitem___32713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 39), yi_32712, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 837)
        subscript_call_result_32714 = invoke(stypy.reporting.localization.Localization(__file__, 837, 39), getitem___32713, int_32711)
        
        # Processing the call keyword arguments (line 837)
        kwargs_32715 = {}
        # Getting the type of 'colors' (line 837)
        colors_32705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 15), 'colors', False)
        # Obtaining the member 'Normalize' of a type (line 837)
        Normalize_32706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 15), colors_32705, 'Normalize')
        # Calling Normalize(args, kwargs) (line 837)
        Normalize_call_result_32716 = invoke(stypy.reporting.localization.Localization(__file__, 837, 15), Normalize_32706, *[subscript_call_result_32710, subscript_call_result_32714], **kwargs_32715)
        
        # Assigning a type to the variable 'norm' (line 837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 837, 8), 'norm', Normalize_call_result_32716)
        
        # Assigning a Call to a Subscript (line 838):
        
        # Assigning a Call to a Subscript (line 838):
        
        # Call to filled(...): (line 838)
        # Processing the call arguments (line 838)
        
        # Call to norm(...): (line 838)
        # Processing the call arguments (line 838)
        # Getting the type of 'yi' (line 838)
        yi_32721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 44), 'yi', False)
        # Processing the call keyword arguments (line 838)
        kwargs_32722 = {}
        # Getting the type of 'norm' (line 838)
        norm_32720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 39), 'norm', False)
        # Calling norm(args, kwargs) (line 838)
        norm_call_result_32723 = invoke(stypy.reporting.localization.Localization(__file__, 838, 39), norm_32720, *[yi_32721], **kwargs_32722)
        
        # Getting the type of 'np' (line 838)
        np_32724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 49), 'np', False)
        # Obtaining the member 'nan' of a type (line 838)
        nan_32725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 49), np_32724, 'nan')
        # Processing the call keyword arguments (line 838)
        kwargs_32726 = {}
        # Getting the type of 'np' (line 838)
        np_32717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 26), 'np', False)
        # Obtaining the member 'ma' of a type (line 838)
        ma_32718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 26), np_32717, 'ma')
        # Obtaining the member 'filled' of a type (line 838)
        filled_32719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 26), ma_32718, 'filled')
        # Calling filled(args, kwargs) (line 838)
        filled_call_result_32727 = invoke(stypy.reporting.localization.Localization(__file__, 838, 26), filled_32719, *[norm_call_result_32723, nan_32725], **kwargs_32726)
        
        # Getting the type of 'y' (line 838)
        y_32728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 8), 'y')
        # Getting the type of 'self' (line 838)
        self_32729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 10), 'self')
        # Obtaining the member '_inside' of a type (line 838)
        _inside_32730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 10), self_32729, '_inside')
        # Storing an element on a container (line 838)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 838, 8), y_32728, (_inside_32730, filled_call_result_32727))
        # Getting the type of 'y' (line 839)
        y_32731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 15), 'y')
        # Assigning a type to the variable 'stypy_return_type' (line 839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 8), 'stypy_return_type', y_32731)
        
        # ################# End of '_proportional_y(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_proportional_y' in the type store
        # Getting the type of 'stypy_return_type' (line 802)
        stypy_return_type_32732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32732)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_proportional_y'
        return stypy_return_type_32732


    @norecursion
    def _mesh(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_mesh'
        module_type_store = module_type_store.open_function_context('_mesh', 841, 4, False)
        # Assigning a type to the variable 'self' (line 842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 842, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._mesh.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._mesh.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._mesh.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._mesh.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._mesh')
        ColorbarBase._mesh.__dict__.__setitem__('stypy_param_names_list', [])
        ColorbarBase._mesh.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._mesh.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._mesh.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._mesh.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._mesh.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._mesh.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._mesh', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_mesh', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_mesh(...)' code ##################

        unicode_32733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 847, (-1)), 'unicode', u'\n        Return X,Y, the coordinate arrays for the colorbar pcolormesh.\n        These are suitable for a vertical colorbar; swapping and\n        transposition for a horizontal colorbar are done outside\n        this function.\n        ')
        
        # Assigning a Call to a Name (line 848):
        
        # Assigning a Call to a Name (line 848):
        
        # Call to array(...): (line 848)
        # Processing the call arguments (line 848)
        
        # Obtaining an instance of the builtin type 'list' (line 848)
        list_32736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 848, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 848)
        # Adding element type (line 848)
        float_32737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 848, 22), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 848, 21), list_32736, float_32737)
        # Adding element type (line 848)
        float_32738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 848, 27), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 848, 21), list_32736, float_32738)
        
        # Processing the call keyword arguments (line 848)
        kwargs_32739 = {}
        # Getting the type of 'np' (line 848)
        np_32734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 848)
        array_32735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 848, 12), np_32734, 'array')
        # Calling array(args, kwargs) (line 848)
        array_call_result_32740 = invoke(stypy.reporting.localization.Localization(__file__, 848, 12), array_32735, *[list_32736], **kwargs_32739)
        
        # Assigning a type to the variable 'x' (line 848)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 8), 'x', array_call_result_32740)
        
        
        # Getting the type of 'self' (line 849)
        self_32741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 11), 'self')
        # Obtaining the member 'spacing' of a type (line 849)
        spacing_32742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 849, 11), self_32741, 'spacing')
        unicode_32743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 849, 27), 'unicode', u'uniform')
        # Applying the binary operator '==' (line 849)
        result_eq_32744 = python_operator(stypy.reporting.localization.Localization(__file__, 849, 11), '==', spacing_32742, unicode_32743)
        
        # Testing the type of an if condition (line 849)
        if_condition_32745 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 849, 8), result_eq_32744)
        # Assigning a type to the variable 'if_condition_32745' (line 849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 849, 8), 'if_condition_32745', if_condition_32745)
        # SSA begins for if statement (line 849)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 850):
        
        # Assigning a Call to a Name (line 850):
        
        # Call to _uniform_y(...): (line 850)
        # Processing the call arguments (line 850)
        
        # Call to _central_N(...): (line 850)
        # Processing the call keyword arguments (line 850)
        kwargs_32750 = {}
        # Getting the type of 'self' (line 850)
        self_32748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 32), 'self', False)
        # Obtaining the member '_central_N' of a type (line 850)
        _central_N_32749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 850, 32), self_32748, '_central_N')
        # Calling _central_N(args, kwargs) (line 850)
        _central_N_call_result_32751 = invoke(stypy.reporting.localization.Localization(__file__, 850, 32), _central_N_32749, *[], **kwargs_32750)
        
        # Processing the call keyword arguments (line 850)
        kwargs_32752 = {}
        # Getting the type of 'self' (line 850)
        self_32746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 16), 'self', False)
        # Obtaining the member '_uniform_y' of a type (line 850)
        _uniform_y_32747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 850, 16), self_32746, '_uniform_y')
        # Calling _uniform_y(args, kwargs) (line 850)
        _uniform_y_call_result_32753 = invoke(stypy.reporting.localization.Localization(__file__, 850, 16), _uniform_y_32747, *[_central_N_call_result_32751], **kwargs_32752)
        
        # Assigning a type to the variable 'y' (line 850)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 850, 12), 'y', _uniform_y_call_result_32753)
        # SSA branch for the else part of an if statement (line 849)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 852):
        
        # Assigning a Call to a Name (line 852):
        
        # Call to _proportional_y(...): (line 852)
        # Processing the call keyword arguments (line 852)
        kwargs_32756 = {}
        # Getting the type of 'self' (line 852)
        self_32754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 16), 'self', False)
        # Obtaining the member '_proportional_y' of a type (line 852)
        _proportional_y_32755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 16), self_32754, '_proportional_y')
        # Calling _proportional_y(args, kwargs) (line 852)
        _proportional_y_call_result_32757 = invoke(stypy.reporting.localization.Localization(__file__, 852, 16), _proportional_y_32755, *[], **kwargs_32756)
        
        # Assigning a type to the variable 'y' (line 852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 12), 'y', _proportional_y_call_result_32757)
        # SSA join for if statement (line 849)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 853):
        
        # Assigning a Name to a Attribute (line 853):
        # Getting the type of 'y' (line 853)
        y_32758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 18), 'y')
        # Getting the type of 'self' (line 853)
        self_32759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 8), 'self')
        # Setting the type of the member '_y' of a type (line 853)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 853, 8), self_32759, '_y', y_32758)
        
        # Assigning a Call to a Tuple (line 854):
        
        # Assigning a Call to a Name:
        
        # Call to meshgrid(...): (line 854)
        # Processing the call arguments (line 854)
        # Getting the type of 'x' (line 854)
        x_32762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 27), 'x', False)
        # Getting the type of 'y' (line 854)
        y_32763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 30), 'y', False)
        # Processing the call keyword arguments (line 854)
        kwargs_32764 = {}
        # Getting the type of 'np' (line 854)
        np_32760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 15), 'np', False)
        # Obtaining the member 'meshgrid' of a type (line 854)
        meshgrid_32761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 854, 15), np_32760, 'meshgrid')
        # Calling meshgrid(args, kwargs) (line 854)
        meshgrid_call_result_32765 = invoke(stypy.reporting.localization.Localization(__file__, 854, 15), meshgrid_32761, *[x_32762, y_32763], **kwargs_32764)
        
        # Assigning a type to the variable 'call_assignment_30376' (line 854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'call_assignment_30376', meshgrid_call_result_32765)
        
        # Assigning a Call to a Name (line 854):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_32768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 854, 8), 'int')
        # Processing the call keyword arguments
        kwargs_32769 = {}
        # Getting the type of 'call_assignment_30376' (line 854)
        call_assignment_30376_32766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'call_assignment_30376', False)
        # Obtaining the member '__getitem__' of a type (line 854)
        getitem___32767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 854, 8), call_assignment_30376_32766, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_32770 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___32767, *[int_32768], **kwargs_32769)
        
        # Assigning a type to the variable 'call_assignment_30377' (line 854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'call_assignment_30377', getitem___call_result_32770)
        
        # Assigning a Name to a Name (line 854):
        # Getting the type of 'call_assignment_30377' (line 854)
        call_assignment_30377_32771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'call_assignment_30377')
        # Assigning a type to the variable 'X' (line 854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'X', call_assignment_30377_32771)
        
        # Assigning a Call to a Name (line 854):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_32774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 854, 8), 'int')
        # Processing the call keyword arguments
        kwargs_32775 = {}
        # Getting the type of 'call_assignment_30376' (line 854)
        call_assignment_30376_32772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'call_assignment_30376', False)
        # Obtaining the member '__getitem__' of a type (line 854)
        getitem___32773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 854, 8), call_assignment_30376_32772, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_32776 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___32773, *[int_32774], **kwargs_32775)
        
        # Assigning a type to the variable 'call_assignment_30378' (line 854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'call_assignment_30378', getitem___call_result_32776)
        
        # Assigning a Name to a Name (line 854):
        # Getting the type of 'call_assignment_30378' (line 854)
        call_assignment_30378_32777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'call_assignment_30378')
        # Assigning a type to the variable 'Y' (line 854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 11), 'Y', call_assignment_30378_32777)
        
        
        # Evaluating a boolean operation
        
        # Call to _extend_lower(...): (line 855)
        # Processing the call keyword arguments (line 855)
        kwargs_32780 = {}
        # Getting the type of 'self' (line 855)
        self_32778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 11), 'self', False)
        # Obtaining the member '_extend_lower' of a type (line 855)
        _extend_lower_32779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 855, 11), self_32778, '_extend_lower')
        # Calling _extend_lower(args, kwargs) (line 855)
        _extend_lower_call_result_32781 = invoke(stypy.reporting.localization.Localization(__file__, 855, 11), _extend_lower_32779, *[], **kwargs_32780)
        
        
        # Getting the type of 'self' (line 855)
        self_32782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 40), 'self')
        # Obtaining the member 'extendrect' of a type (line 855)
        extendrect_32783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 855, 40), self_32782, 'extendrect')
        # Applying the 'not' unary operator (line 855)
        result_not__32784 = python_operator(stypy.reporting.localization.Localization(__file__, 855, 36), 'not', extendrect_32783)
        
        # Applying the binary operator 'and' (line 855)
        result_and_keyword_32785 = python_operator(stypy.reporting.localization.Localization(__file__, 855, 11), 'and', _extend_lower_call_result_32781, result_not__32784)
        
        # Testing the type of an if condition (line 855)
        if_condition_32786 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 855, 8), result_and_keyword_32785)
        # Assigning a type to the variable 'if_condition_32786' (line 855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 855, 8), 'if_condition_32786', if_condition_32786)
        # SSA begins for if statement (line 855)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Subscript (line 856):
        
        # Assigning a Num to a Subscript (line 856):
        float_32787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, 22), 'float')
        # Getting the type of 'X' (line 856)
        X_32788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 12), 'X')
        int_32789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, 14), 'int')
        slice_32790 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 856, 12), None, None, None)
        # Storing an element on a container (line 856)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 856, 12), X_32788, ((int_32789, slice_32790), float_32787))
        # SSA join for if statement (line 855)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Call to _extend_upper(...): (line 857)
        # Processing the call keyword arguments (line 857)
        kwargs_32793 = {}
        # Getting the type of 'self' (line 857)
        self_32791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 11), 'self', False)
        # Obtaining the member '_extend_upper' of a type (line 857)
        _extend_upper_32792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 857, 11), self_32791, '_extend_upper')
        # Calling _extend_upper(args, kwargs) (line 857)
        _extend_upper_call_result_32794 = invoke(stypy.reporting.localization.Localization(__file__, 857, 11), _extend_upper_32792, *[], **kwargs_32793)
        
        
        # Getting the type of 'self' (line 857)
        self_32795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 40), 'self')
        # Obtaining the member 'extendrect' of a type (line 857)
        extendrect_32796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 857, 40), self_32795, 'extendrect')
        # Applying the 'not' unary operator (line 857)
        result_not__32797 = python_operator(stypy.reporting.localization.Localization(__file__, 857, 36), 'not', extendrect_32796)
        
        # Applying the binary operator 'and' (line 857)
        result_and_keyword_32798 = python_operator(stypy.reporting.localization.Localization(__file__, 857, 11), 'and', _extend_upper_call_result_32794, result_not__32797)
        
        # Testing the type of an if condition (line 857)
        if_condition_32799 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 857, 8), result_and_keyword_32798)
        # Assigning a type to the variable 'if_condition_32799' (line 857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 857, 8), 'if_condition_32799', if_condition_32799)
        # SSA begins for if statement (line 857)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Subscript (line 858):
        
        # Assigning a Num to a Subscript (line 858):
        float_32800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, 23), 'float')
        # Getting the type of 'X' (line 858)
        X_32801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 12), 'X')
        int_32802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, 14), 'int')
        slice_32803 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 858, 12), None, None, None)
        # Storing an element on a container (line 858)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 858, 12), X_32801, ((int_32802, slice_32803), float_32800))
        # SSA join for if statement (line 857)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 859)
        tuple_32804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 859, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 859)
        # Adding element type (line 859)
        # Getting the type of 'X' (line 859)
        X_32805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 15), 'X')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 859, 15), tuple_32804, X_32805)
        # Adding element type (line 859)
        # Getting the type of 'Y' (line 859)
        Y_32806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 18), 'Y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 859, 15), tuple_32804, Y_32806)
        
        # Assigning a type to the variable 'stypy_return_type' (line 859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 8), 'stypy_return_type', tuple_32804)
        
        # ################# End of '_mesh(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_mesh' in the type store
        # Getting the type of 'stypy_return_type' (line 841)
        stypy_return_type_32807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32807)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_mesh'
        return stypy_return_type_32807


    @norecursion
    def _locate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_locate'
        module_type_store = module_type_store.open_function_context('_locate', 861, 4, False)
        # Assigning a type to the variable 'self' (line 862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 862, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase._locate.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase._locate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase._locate.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase._locate.__dict__.__setitem__('stypy_function_name', 'ColorbarBase._locate')
        ColorbarBase._locate.__dict__.__setitem__('stypy_param_names_list', ['x'])
        ColorbarBase._locate.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase._locate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase._locate.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase._locate.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase._locate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase._locate.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase._locate', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_locate', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_locate(...)' code ##################

        unicode_32808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 865, (-1)), 'unicode', u'\n        Given a set of color data values, return their\n        corresponding colorbar data coordinates.\n        ')
        
        
        # Call to isinstance(...): (line 866)
        # Processing the call arguments (line 866)
        # Getting the type of 'self' (line 866)
        self_32810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 22), 'self', False)
        # Obtaining the member 'norm' of a type (line 866)
        norm_32811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 866, 22), self_32810, 'norm')
        
        # Obtaining an instance of the builtin type 'tuple' (line 866)
        tuple_32812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 866, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 866)
        # Adding element type (line 866)
        # Getting the type of 'colors' (line 866)
        colors_32813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 34), 'colors', False)
        # Obtaining the member 'NoNorm' of a type (line 866)
        NoNorm_32814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 866, 34), colors_32813, 'NoNorm')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 866, 34), tuple_32812, NoNorm_32814)
        # Adding element type (line 866)
        # Getting the type of 'colors' (line 866)
        colors_32815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 49), 'colors', False)
        # Obtaining the member 'BoundaryNorm' of a type (line 866)
        BoundaryNorm_32816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 866, 49), colors_32815, 'BoundaryNorm')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 866, 34), tuple_32812, BoundaryNorm_32816)
        
        # Processing the call keyword arguments (line 866)
        kwargs_32817 = {}
        # Getting the type of 'isinstance' (line 866)
        isinstance_32809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 866)
        isinstance_call_result_32818 = invoke(stypy.reporting.localization.Localization(__file__, 866, 11), isinstance_32809, *[norm_32811, tuple_32812], **kwargs_32817)
        
        # Testing the type of an if condition (line 866)
        if_condition_32819 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 866, 8), isinstance_call_result_32818)
        # Assigning a type to the variable 'if_condition_32819' (line 866)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 866, 8), 'if_condition_32819', if_condition_32819)
        # SSA begins for if statement (line 866)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 867):
        
        # Assigning a Attribute to a Name (line 867):
        # Getting the type of 'self' (line 867)
        self_32820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 16), 'self')
        # Obtaining the member '_boundaries' of a type (line 867)
        _boundaries_32821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 16), self_32820, '_boundaries')
        # Assigning a type to the variable 'b' (line 867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 867, 12), 'b', _boundaries_32821)
        
        # Assigning a Name to a Name (line 868):
        
        # Assigning a Name to a Name (line 868):
        # Getting the type of 'x' (line 868)
        x_32822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 17), 'x')
        # Assigning a type to the variable 'xn' (line 868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 12), 'xn', x_32822)
        # SSA branch for the else part of an if statement (line 866)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 872):
        
        # Assigning a Call to a Name (line 872):
        
        # Call to filled(...): (line 872)
        # Processing the call keyword arguments (line 872)
        kwargs_32832 = {}
        
        # Call to norm(...): (line 872)
        # Processing the call arguments (line 872)
        # Getting the type of 'self' (line 872)
        self_32825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 26), 'self', False)
        # Obtaining the member '_boundaries' of a type (line 872)
        _boundaries_32826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 872, 26), self_32825, '_boundaries')
        # Processing the call keyword arguments (line 872)
        # Getting the type of 'False' (line 872)
        False_32827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 49), 'False', False)
        keyword_32828 = False_32827
        kwargs_32829 = {'clip': keyword_32828}
        # Getting the type of 'self' (line 872)
        self_32823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 16), 'self', False)
        # Obtaining the member 'norm' of a type (line 872)
        norm_32824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 872, 16), self_32823, 'norm')
        # Calling norm(args, kwargs) (line 872)
        norm_call_result_32830 = invoke(stypy.reporting.localization.Localization(__file__, 872, 16), norm_32824, *[_boundaries_32826], **kwargs_32829)
        
        # Obtaining the member 'filled' of a type (line 872)
        filled_32831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 872, 16), norm_call_result_32830, 'filled')
        # Calling filled(args, kwargs) (line 872)
        filled_call_result_32833 = invoke(stypy.reporting.localization.Localization(__file__, 872, 16), filled_32831, *[], **kwargs_32832)
        
        # Assigning a type to the variable 'b' (line 872)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 872, 12), 'b', filled_call_result_32833)
        
        # Assigning a Call to a Name (line 873):
        
        # Assigning a Call to a Name (line 873):
        
        # Call to filled(...): (line 873)
        # Processing the call keyword arguments (line 873)
        kwargs_32842 = {}
        
        # Call to norm(...): (line 873)
        # Processing the call arguments (line 873)
        # Getting the type of 'x' (line 873)
        x_32836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 27), 'x', False)
        # Processing the call keyword arguments (line 873)
        # Getting the type of 'False' (line 873)
        False_32837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 35), 'False', False)
        keyword_32838 = False_32837
        kwargs_32839 = {'clip': keyword_32838}
        # Getting the type of 'self' (line 873)
        self_32834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 17), 'self', False)
        # Obtaining the member 'norm' of a type (line 873)
        norm_32835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 17), self_32834, 'norm')
        # Calling norm(args, kwargs) (line 873)
        norm_call_result_32840 = invoke(stypy.reporting.localization.Localization(__file__, 873, 17), norm_32835, *[x_32836], **kwargs_32839)
        
        # Obtaining the member 'filled' of a type (line 873)
        filled_32841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 17), norm_call_result_32840, 'filled')
        # Calling filled(args, kwargs) (line 873)
        filled_call_result_32843 = invoke(stypy.reporting.localization.Localization(__file__, 873, 17), filled_32841, *[], **kwargs_32842)
        
        # Assigning a type to the variable 'xn' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 12), 'xn', filled_call_result_32843)
        # SSA join for if statement (line 866)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 876):
        
        # Assigning a Call to a Name (line 876):
        
        # Call to searchsorted(...): (line 876)
        # Processing the call arguments (line 876)
        # Getting the type of 'b' (line 876)
        b_32846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 29), 'b', False)
        # Getting the type of 'xn' (line 876)
        xn_32847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 32), 'xn', False)
        # Processing the call keyword arguments (line 876)
        kwargs_32848 = {}
        # Getting the type of 'np' (line 876)
        np_32844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 13), 'np', False)
        # Obtaining the member 'searchsorted' of a type (line 876)
        searchsorted_32845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 13), np_32844, 'searchsorted')
        # Calling searchsorted(args, kwargs) (line 876)
        searchsorted_call_result_32849 = invoke(stypy.reporting.localization.Localization(__file__, 876, 13), searchsorted_32845, *[b_32846, xn_32847], **kwargs_32848)
        
        # Assigning a type to the variable 'ii' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'ii', searchsorted_call_result_32849)
        
        # Assigning a BinOp to a Name (line 877):
        
        # Assigning a BinOp to a Name (line 877):
        # Getting the type of 'ii' (line 877)
        ii_32850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 13), 'ii')
        int_32851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 18), 'int')
        # Applying the binary operator '-' (line 877)
        result_sub_32852 = python_operator(stypy.reporting.localization.Localization(__file__, 877, 13), '-', ii_32850, int_32851)
        
        # Assigning a type to the variable 'i0' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'i0', result_sub_32852)
        
        # Assigning a Compare to a Name (line 878):
        
        # Assigning a Compare to a Name (line 878):
        
        # Getting the type of 'ii' (line 878)
        ii_32853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 16), 'ii')
        
        # Call to len(...): (line 878)
        # Processing the call arguments (line 878)
        # Getting the type of 'b' (line 878)
        b_32855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 26), 'b', False)
        # Processing the call keyword arguments (line 878)
        kwargs_32856 = {}
        # Getting the type of 'len' (line 878)
        len_32854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 22), 'len', False)
        # Calling len(args, kwargs) (line 878)
        len_call_result_32857 = invoke(stypy.reporting.localization.Localization(__file__, 878, 22), len_32854, *[b_32855], **kwargs_32856)
        
        # Applying the binary operator '==' (line 878)
        result_eq_32858 = python_operator(stypy.reporting.localization.Localization(__file__, 878, 16), '==', ii_32853, len_call_result_32857)
        
        # Assigning a type to the variable 'itop' (line 878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 878, 8), 'itop', result_eq_32858)
        
        # Assigning a Compare to a Name (line 879):
        
        # Assigning a Compare to a Name (line 879):
        
        # Getting the type of 'ii' (line 879)
        ii_32859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 16), 'ii')
        int_32860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 879, 22), 'int')
        # Applying the binary operator '==' (line 879)
        result_eq_32861 = python_operator(stypy.reporting.localization.Localization(__file__, 879, 16), '==', ii_32859, int_32860)
        
        # Assigning a type to the variable 'ibot' (line 879)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 879, 8), 'ibot', result_eq_32861)
        
        # Getting the type of 'i0' (line 880)
        i0_32862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 8), 'i0')
        
        # Obtaining the type of the subscript
        # Getting the type of 'itop' (line 880)
        itop_32863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 11), 'itop')
        # Getting the type of 'i0' (line 880)
        i0_32864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 8), 'i0')
        # Obtaining the member '__getitem__' of a type (line 880)
        getitem___32865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 880, 8), i0_32864, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 880)
        subscript_call_result_32866 = invoke(stypy.reporting.localization.Localization(__file__, 880, 8), getitem___32865, itop_32863)
        
        int_32867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, 20), 'int')
        # Applying the binary operator '-=' (line 880)
        result_isub_32868 = python_operator(stypy.reporting.localization.Localization(__file__, 880, 8), '-=', subscript_call_result_32866, int_32867)
        # Getting the type of 'i0' (line 880)
        i0_32869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 8), 'i0')
        # Getting the type of 'itop' (line 880)
        itop_32870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 11), 'itop')
        # Storing an element on a container (line 880)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 880, 8), i0_32869, (itop_32870, result_isub_32868))
        
        
        # Getting the type of 'ii' (line 881)
        ii_32871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 8), 'ii')
        
        # Obtaining the type of the subscript
        # Getting the type of 'itop' (line 881)
        itop_32872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 11), 'itop')
        # Getting the type of 'ii' (line 881)
        ii_32873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 8), 'ii')
        # Obtaining the member '__getitem__' of a type (line 881)
        getitem___32874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 8), ii_32873, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 881)
        subscript_call_result_32875 = invoke(stypy.reporting.localization.Localization(__file__, 881, 8), getitem___32874, itop_32872)
        
        int_32876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, 20), 'int')
        # Applying the binary operator '-=' (line 881)
        result_isub_32877 = python_operator(stypy.reporting.localization.Localization(__file__, 881, 8), '-=', subscript_call_result_32875, int_32876)
        # Getting the type of 'ii' (line 881)
        ii_32878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 8), 'ii')
        # Getting the type of 'itop' (line 881)
        itop_32879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 11), 'itop')
        # Storing an element on a container (line 881)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 881, 8), ii_32878, (itop_32879, result_isub_32877))
        
        
        # Getting the type of 'i0' (line 882)
        i0_32880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 8), 'i0')
        
        # Obtaining the type of the subscript
        # Getting the type of 'ibot' (line 882)
        ibot_32881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 11), 'ibot')
        # Getting the type of 'i0' (line 882)
        i0_32882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 8), 'i0')
        # Obtaining the member '__getitem__' of a type (line 882)
        getitem___32883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 8), i0_32882, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 882)
        subscript_call_result_32884 = invoke(stypy.reporting.localization.Localization(__file__, 882, 8), getitem___32883, ibot_32881)
        
        int_32885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 20), 'int')
        # Applying the binary operator '+=' (line 882)
        result_iadd_32886 = python_operator(stypy.reporting.localization.Localization(__file__, 882, 8), '+=', subscript_call_result_32884, int_32885)
        # Getting the type of 'i0' (line 882)
        i0_32887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 8), 'i0')
        # Getting the type of 'ibot' (line 882)
        ibot_32888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 11), 'ibot')
        # Storing an element on a container (line 882)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 882, 8), i0_32887, (ibot_32888, result_iadd_32886))
        
        
        # Getting the type of 'ii' (line 883)
        ii_32889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'ii')
        
        # Obtaining the type of the subscript
        # Getting the type of 'ibot' (line 883)
        ibot_32890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 11), 'ibot')
        # Getting the type of 'ii' (line 883)
        ii_32891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'ii')
        # Obtaining the member '__getitem__' of a type (line 883)
        getitem___32892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 8), ii_32891, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 883)
        subscript_call_result_32893 = invoke(stypy.reporting.localization.Localization(__file__, 883, 8), getitem___32892, ibot_32890)
        
        int_32894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 20), 'int')
        # Applying the binary operator '+=' (line 883)
        result_iadd_32895 = python_operator(stypy.reporting.localization.Localization(__file__, 883, 8), '+=', subscript_call_result_32893, int_32894)
        # Getting the type of 'ii' (line 883)
        ii_32896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'ii')
        # Getting the type of 'ibot' (line 883)
        ibot_32897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 11), 'ibot')
        # Storing an element on a container (line 883)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 883, 8), ii_32896, (ibot_32897, result_iadd_32895))
        
        
        # Assigning a BinOp to a Name (line 885):
        
        # Assigning a BinOp to a Name (line 885):
        
        # Call to take(...): (line 885)
        # Processing the call arguments (line 885)
        # Getting the type of 'b' (line 885)
        b_32900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 21), 'b', False)
        # Getting the type of 'ii' (line 885)
        ii_32901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 24), 'ii', False)
        # Processing the call keyword arguments (line 885)
        kwargs_32902 = {}
        # Getting the type of 'np' (line 885)
        np_32898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 13), 'np', False)
        # Obtaining the member 'take' of a type (line 885)
        take_32899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 13), np_32898, 'take')
        # Calling take(args, kwargs) (line 885)
        take_call_result_32903 = invoke(stypy.reporting.localization.Localization(__file__, 885, 13), take_32899, *[b_32900, ii_32901], **kwargs_32902)
        
        
        # Call to take(...): (line 885)
        # Processing the call arguments (line 885)
        # Getting the type of 'b' (line 885)
        b_32906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 38), 'b', False)
        # Getting the type of 'i0' (line 885)
        i0_32907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 41), 'i0', False)
        # Processing the call keyword arguments (line 885)
        kwargs_32908 = {}
        # Getting the type of 'np' (line 885)
        np_32904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 30), 'np', False)
        # Obtaining the member 'take' of a type (line 885)
        take_32905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 30), np_32904, 'take')
        # Calling take(args, kwargs) (line 885)
        take_call_result_32909 = invoke(stypy.reporting.localization.Localization(__file__, 885, 30), take_32905, *[b_32906, i0_32907], **kwargs_32908)
        
        # Applying the binary operator '-' (line 885)
        result_sub_32910 = python_operator(stypy.reporting.localization.Localization(__file__, 885, 13), '-', take_call_result_32903, take_call_result_32909)
        
        # Assigning a type to the variable 'db' (line 885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 8), 'db', result_sub_32910)
        
        # Assigning a Attribute to a Name (line 886):
        
        # Assigning a Attribute to a Name (line 886):
        # Getting the type of 'self' (line 886)
        self_32911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 12), 'self')
        # Obtaining the member '_y' of a type (line 886)
        _y_32912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 12), self_32911, '_y')
        # Assigning a type to the variable 'y' (line 886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 8), 'y', _y_32912)
        
        # Assigning a BinOp to a Name (line 887):
        
        # Assigning a BinOp to a Name (line 887):
        
        # Call to take(...): (line 887)
        # Processing the call arguments (line 887)
        # Getting the type of 'y' (line 887)
        y_32915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 21), 'y', False)
        # Getting the type of 'ii' (line 887)
        ii_32916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 24), 'ii', False)
        # Processing the call keyword arguments (line 887)
        kwargs_32917 = {}
        # Getting the type of 'np' (line 887)
        np_32913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 13), 'np', False)
        # Obtaining the member 'take' of a type (line 887)
        take_32914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 13), np_32913, 'take')
        # Calling take(args, kwargs) (line 887)
        take_call_result_32918 = invoke(stypy.reporting.localization.Localization(__file__, 887, 13), take_32914, *[y_32915, ii_32916], **kwargs_32917)
        
        
        # Call to take(...): (line 887)
        # Processing the call arguments (line 887)
        # Getting the type of 'y' (line 887)
        y_32921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 38), 'y', False)
        # Getting the type of 'i0' (line 887)
        i0_32922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 41), 'i0', False)
        # Processing the call keyword arguments (line 887)
        kwargs_32923 = {}
        # Getting the type of 'np' (line 887)
        np_32919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 30), 'np', False)
        # Obtaining the member 'take' of a type (line 887)
        take_32920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 30), np_32919, 'take')
        # Calling take(args, kwargs) (line 887)
        take_call_result_32924 = invoke(stypy.reporting.localization.Localization(__file__, 887, 30), take_32920, *[y_32921, i0_32922], **kwargs_32923)
        
        # Applying the binary operator '-' (line 887)
        result_sub_32925 = python_operator(stypy.reporting.localization.Localization(__file__, 887, 13), '-', take_call_result_32918, take_call_result_32924)
        
        # Assigning a type to the variable 'dy' (line 887)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 887, 8), 'dy', result_sub_32925)
        
        # Assigning a BinOp to a Name (line 888):
        
        # Assigning a BinOp to a Name (line 888):
        
        # Call to take(...): (line 888)
        # Processing the call arguments (line 888)
        # Getting the type of 'y' (line 888)
        y_32928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 20), 'y', False)
        # Getting the type of 'i0' (line 888)
        i0_32929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 23), 'i0', False)
        # Processing the call keyword arguments (line 888)
        kwargs_32930 = {}
        # Getting the type of 'np' (line 888)
        np_32926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 12), 'np', False)
        # Obtaining the member 'take' of a type (line 888)
        take_32927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 12), np_32926, 'take')
        # Calling take(args, kwargs) (line 888)
        take_call_result_32931 = invoke(stypy.reporting.localization.Localization(__file__, 888, 12), take_32927, *[y_32928, i0_32929], **kwargs_32930)
        
        # Getting the type of 'xn' (line 888)
        xn_32932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 30), 'xn')
        
        # Call to take(...): (line 888)
        # Processing the call arguments (line 888)
        # Getting the type of 'b' (line 888)
        b_32935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 43), 'b', False)
        # Getting the type of 'i0' (line 888)
        i0_32936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 46), 'i0', False)
        # Processing the call keyword arguments (line 888)
        kwargs_32937 = {}
        # Getting the type of 'np' (line 888)
        np_32933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 35), 'np', False)
        # Obtaining the member 'take' of a type (line 888)
        take_32934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 35), np_32933, 'take')
        # Calling take(args, kwargs) (line 888)
        take_call_result_32938 = invoke(stypy.reporting.localization.Localization(__file__, 888, 35), take_32934, *[b_32935, i0_32936], **kwargs_32937)
        
        # Applying the binary operator '-' (line 888)
        result_sub_32939 = python_operator(stypy.reporting.localization.Localization(__file__, 888, 30), '-', xn_32932, take_call_result_32938)
        
        # Getting the type of 'dy' (line 888)
        dy_32940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 53), 'dy')
        # Applying the binary operator '*' (line 888)
        result_mul_32941 = python_operator(stypy.reporting.localization.Localization(__file__, 888, 29), '*', result_sub_32939, dy_32940)
        
        # Getting the type of 'db' (line 888)
        db_32942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 58), 'db')
        # Applying the binary operator 'div' (line 888)
        result_div_32943 = python_operator(stypy.reporting.localization.Localization(__file__, 888, 56), 'div', result_mul_32941, db_32942)
        
        # Applying the binary operator '+' (line 888)
        result_add_32944 = python_operator(stypy.reporting.localization.Localization(__file__, 888, 12), '+', take_call_result_32931, result_div_32943)
        
        # Assigning a type to the variable 'z' (line 888)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 888, 8), 'z', result_add_32944)
        # Getting the type of 'z' (line 889)
        z_32945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 15), 'z')
        # Assigning a type to the variable 'stypy_return_type' (line 889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 889, 8), 'stypy_return_type', z_32945)
        
        # ################# End of '_locate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_locate' in the type store
        # Getting the type of 'stypy_return_type' (line 861)
        stypy_return_type_32946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32946)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_locate'
        return stypy_return_type_32946


    @norecursion
    def set_alpha(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_alpha'
        module_type_store = module_type_store.open_function_context('set_alpha', 891, 4, False)
        # Assigning a type to the variable 'self' (line 892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase.set_alpha.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase.set_alpha.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase.set_alpha.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase.set_alpha.__dict__.__setitem__('stypy_function_name', 'ColorbarBase.set_alpha')
        ColorbarBase.set_alpha.__dict__.__setitem__('stypy_param_names_list', ['alpha'])
        ColorbarBase.set_alpha.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase.set_alpha.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase.set_alpha.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase.set_alpha.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase.set_alpha.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase.set_alpha.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase.set_alpha', ['alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_alpha', localization, ['alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_alpha(...)' code ##################

        
        # Assigning a Name to a Attribute (line 892):
        
        # Assigning a Name to a Attribute (line 892):
        # Getting the type of 'alpha' (line 892)
        alpha_32947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 21), 'alpha')
        # Getting the type of 'self' (line 892)
        self_32948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 8), 'self')
        # Setting the type of the member 'alpha' of a type (line 892)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 8), self_32948, 'alpha', alpha_32947)
        
        # ################# End of 'set_alpha(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_alpha' in the type store
        # Getting the type of 'stypy_return_type' (line 891)
        stypy_return_type_32949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32949)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_alpha'
        return stypy_return_type_32949


    @norecursion
    def remove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'remove'
        module_type_store = module_type_store.open_function_context('remove', 894, 4, False)
        # Assigning a type to the variable 'self' (line 895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarBase.remove.__dict__.__setitem__('stypy_localization', localization)
        ColorbarBase.remove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarBase.remove.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarBase.remove.__dict__.__setitem__('stypy_function_name', 'ColorbarBase.remove')
        ColorbarBase.remove.__dict__.__setitem__('stypy_param_names_list', [])
        ColorbarBase.remove.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarBase.remove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarBase.remove.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarBase.remove.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarBase.remove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarBase.remove.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarBase.remove', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'remove', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'remove(...)' code ##################

        unicode_32950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, (-1)), 'unicode', u'\n        Remove this colorbar from the figure\n        ')
        
        # Assigning a Attribute to a Name (line 899):
        
        # Assigning a Attribute to a Name (line 899):
        # Getting the type of 'self' (line 899)
        self_32951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 14), 'self')
        # Obtaining the member 'ax' of a type (line 899)
        ax_32952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 899, 14), self_32951, 'ax')
        # Obtaining the member 'figure' of a type (line 899)
        figure_32953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 899, 14), ax_32952, 'figure')
        # Assigning a type to the variable 'fig' (line 899)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 8), 'fig', figure_32953)
        
        # Call to delaxes(...): (line 900)
        # Processing the call arguments (line 900)
        # Getting the type of 'self' (line 900)
        self_32956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 20), 'self', False)
        # Obtaining the member 'ax' of a type (line 900)
        ax_32957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 20), self_32956, 'ax')
        # Processing the call keyword arguments (line 900)
        kwargs_32958 = {}
        # Getting the type of 'fig' (line 900)
        fig_32954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 8), 'fig', False)
        # Obtaining the member 'delaxes' of a type (line 900)
        delaxes_32955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 8), fig_32954, 'delaxes')
        # Calling delaxes(args, kwargs) (line 900)
        delaxes_call_result_32959 = invoke(stypy.reporting.localization.Localization(__file__, 900, 8), delaxes_32955, *[ax_32957], **kwargs_32958)
        
        
        # ################# End of 'remove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'remove' in the type store
        # Getting the type of 'stypy_return_type' (line 894)
        stypy_return_type_32960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32960)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'remove'
        return stypy_return_type_32960


# Assigning a type to the variable 'ColorbarBase' (line 218)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 0), 'ColorbarBase', ColorbarBase)

# Assigning a Dict to a Name (line 254):

# Obtaining an instance of the builtin type 'dict' (line 254)
dict_32961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 18), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 254)
# Adding element type (key, value) (line 254)
unicode_32962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 19), 'unicode', u'neither')

# Call to slice(...): (line 254)
# Processing the call arguments (line 254)
int_32964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 36), 'int')
# Getting the type of 'None' (line 254)
None_32965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 39), 'None', False)
# Processing the call keyword arguments (line 254)
kwargs_32966 = {}
# Getting the type of 'slice' (line 254)
slice_32963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 30), 'slice', False)
# Calling slice(args, kwargs) (line 254)
slice_call_result_32967 = invoke(stypy.reporting.localization.Localization(__file__, 254, 30), slice_32963, *[int_32964, None_32965], **kwargs_32966)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 254, 18), dict_32961, (unicode_32962, slice_call_result_32967))
# Adding element type (key, value) (line 254)
unicode_32968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 19), 'unicode', u'both')

# Call to slice(...): (line 255)
# Processing the call arguments (line 255)
int_32970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 33), 'int')
int_32971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 36), 'int')
# Processing the call keyword arguments (line 255)
kwargs_32972 = {}
# Getting the type of 'slice' (line 255)
slice_32969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 27), 'slice', False)
# Calling slice(args, kwargs) (line 255)
slice_call_result_32973 = invoke(stypy.reporting.localization.Localization(__file__, 255, 27), slice_32969, *[int_32970, int_32971], **kwargs_32972)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 254, 18), dict_32961, (unicode_32968, slice_call_result_32973))
# Adding element type (key, value) (line 254)
unicode_32974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 19), 'unicode', u'min')

# Call to slice(...): (line 256)
# Processing the call arguments (line 256)
int_32976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 32), 'int')
# Getting the type of 'None' (line 256)
None_32977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 35), 'None', False)
# Processing the call keyword arguments (line 256)
kwargs_32978 = {}
# Getting the type of 'slice' (line 256)
slice_32975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 26), 'slice', False)
# Calling slice(args, kwargs) (line 256)
slice_call_result_32979 = invoke(stypy.reporting.localization.Localization(__file__, 256, 26), slice_32975, *[int_32976, None_32977], **kwargs_32978)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 254, 18), dict_32961, (unicode_32974, slice_call_result_32979))
# Adding element type (key, value) (line 254)
unicode_32980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 19), 'unicode', u'max')

# Call to slice(...): (line 257)
# Processing the call arguments (line 257)
int_32982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 32), 'int')
int_32983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 35), 'int')
# Processing the call keyword arguments (line 257)
kwargs_32984 = {}
# Getting the type of 'slice' (line 257)
slice_32981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 26), 'slice', False)
# Calling slice(args, kwargs) (line 257)
slice_call_result_32985 = invoke(stypy.reporting.localization.Localization(__file__, 257, 26), slice_32981, *[int_32982, int_32983], **kwargs_32984)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 254, 18), dict_32961, (unicode_32980, slice_call_result_32985))

# Getting the type of 'ColorbarBase'
ColorbarBase_32986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ColorbarBase')
# Setting the type of the member '_slice_dict' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ColorbarBase_32986, '_slice_dict', dict_32961)

# Assigning a Num to a Name (line 259):
int_32987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, 18), 'int')
# Getting the type of 'ColorbarBase'
ColorbarBase_32988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ColorbarBase')
# Setting the type of the member 'n_rasterize' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ColorbarBase_32988, 'n_rasterize', int_32987)
# Declaration of the 'Colorbar' class
# Getting the type of 'ColorbarBase' (line 903)
ColorbarBase_32989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 15), 'ColorbarBase')

class Colorbar(ColorbarBase_32989, ):
    unicode_32990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, (-1)), 'unicode', u'\n    This class connects a :class:`ColorbarBase` to a\n    :class:`~matplotlib.cm.ScalarMappable` such as a\n    :class:`~matplotlib.image.AxesImage` generated via\n    :meth:`~matplotlib.axes.Axes.imshow`.\n\n    It is not intended to be instantiated directly; instead,\n    use :meth:`~matplotlib.figure.Figure.colorbar` or\n    :func:`~matplotlib.pyplot.colorbar` to make your colorbar.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 915, 4, False)
        # Assigning a type to the variable 'self' (line 916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 916, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colorbar.__init__', ['ax', 'mappable'], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'mappable'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to autoscale_None(...): (line 918)
        # Processing the call keyword arguments (line 918)
        kwargs_32993 = {}
        # Getting the type of 'mappable' (line 918)
        mappable_32991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 8), 'mappable', False)
        # Obtaining the member 'autoscale_None' of a type (line 918)
        autoscale_None_32992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 8), mappable_32991, 'autoscale_None')
        # Calling autoscale_None(args, kwargs) (line 918)
        autoscale_None_call_result_32994 = invoke(stypy.reporting.localization.Localization(__file__, 918, 8), autoscale_None_32992, *[], **kwargs_32993)
        
        
        # Assigning a Name to a Attribute (line 920):
        
        # Assigning a Name to a Attribute (line 920):
        # Getting the type of 'mappable' (line 920)
        mappable_32995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 24), 'mappable')
        # Getting the type of 'self' (line 920)
        self_32996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 8), 'self')
        # Setting the type of the member 'mappable' of a type (line 920)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 8), self_32996, 'mappable', mappable_32995)
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Attribute to a Name (line 921):
        # Getting the type of 'mappable' (line 921)
        mappable_32997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 28), 'mappable')
        # Obtaining the member 'cmap' of a type (line 921)
        cmap_32998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 28), mappable_32997, 'cmap')
        # Assigning a type to the variable 'cmap' (line 921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 21), 'cmap', cmap_32998)
        
        # Assigning a Name to a Subscript (line 921):
        # Getting the type of 'cmap' (line 921)
        cmap_32999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 21), 'cmap')
        # Getting the type of 'kw' (line 921)
        kw_33000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 8), 'kw')
        unicode_33001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 921, 11), 'unicode', u'cmap')
        # Storing an element on a container (line 921)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 921, 8), kw_33000, (unicode_33001, cmap_32999))
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Attribute to a Name (line 922):
        # Getting the type of 'mappable' (line 922)
        mappable_33002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 28), 'mappable')
        # Obtaining the member 'norm' of a type (line 922)
        norm_33003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 28), mappable_33002, 'norm')
        # Assigning a type to the variable 'norm' (line 922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 21), 'norm', norm_33003)
        
        # Assigning a Name to a Subscript (line 922):
        # Getting the type of 'norm' (line 922)
        norm_33004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 21), 'norm')
        # Getting the type of 'kw' (line 922)
        kw_33005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 8), 'kw')
        unicode_33006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 922, 11), 'unicode', u'norm')
        # Storing an element on a container (line 922)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 922, 8), kw_33005, (unicode_33006, norm_33004))
        
        
        # Call to isinstance(...): (line 924)
        # Processing the call arguments (line 924)
        # Getting the type of 'mappable' (line 924)
        mappable_33008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 22), 'mappable', False)
        # Getting the type of 'contour' (line 924)
        contour_33009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 32), 'contour', False)
        # Obtaining the member 'ContourSet' of a type (line 924)
        ContourSet_33010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 32), contour_33009, 'ContourSet')
        # Processing the call keyword arguments (line 924)
        kwargs_33011 = {}
        # Getting the type of 'isinstance' (line 924)
        isinstance_33007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 924)
        isinstance_call_result_33012 = invoke(stypy.reporting.localization.Localization(__file__, 924, 11), isinstance_33007, *[mappable_33008, ContourSet_33010], **kwargs_33011)
        
        # Testing the type of an if condition (line 924)
        if_condition_33013 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 924, 8), isinstance_call_result_33012)
        # Assigning a type to the variable 'if_condition_33013' (line 924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'if_condition_33013', if_condition_33013)
        # SSA begins for if statement (line 924)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 925):
        
        # Assigning a Name to a Name (line 925):
        # Getting the type of 'mappable' (line 925)
        mappable_33014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 17), 'mappable')
        # Assigning a type to the variable 'CS' (line 925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 12), 'CS', mappable_33014)
        
        # Assigning a Call to a Subscript (line 926):
        
        # Assigning a Call to a Subscript (line 926):
        
        # Call to get_alpha(...): (line 926)
        # Processing the call keyword arguments (line 926)
        kwargs_33017 = {}
        # Getting the type of 'mappable' (line 926)
        mappable_33015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 26), 'mappable', False)
        # Obtaining the member 'get_alpha' of a type (line 926)
        get_alpha_33016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 926, 26), mappable_33015, 'get_alpha')
        # Calling get_alpha(args, kwargs) (line 926)
        get_alpha_call_result_33018 = invoke(stypy.reporting.localization.Localization(__file__, 926, 26), get_alpha_33016, *[], **kwargs_33017)
        
        # Getting the type of 'kw' (line 926)
        kw_33019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 12), 'kw')
        unicode_33020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 926, 15), 'unicode', u'alpha')
        # Storing an element on a container (line 926)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 926, 12), kw_33019, (unicode_33020, get_alpha_call_result_33018))
        
        # Assigning a Attribute to a Subscript (line 927):
        
        # Assigning a Attribute to a Subscript (line 927):
        # Getting the type of 'CS' (line 927)
        CS_33021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 31), 'CS')
        # Obtaining the member '_levels' of a type (line 927)
        _levels_33022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 927, 31), CS_33021, '_levels')
        # Getting the type of 'kw' (line 927)
        kw_33023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 12), 'kw')
        unicode_33024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 927, 15), 'unicode', u'boundaries')
        # Storing an element on a container (line 927)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 927, 12), kw_33023, (unicode_33024, _levels_33022))
        
        # Assigning a Attribute to a Subscript (line 928):
        
        # Assigning a Attribute to a Subscript (line 928):
        # Getting the type of 'CS' (line 928)
        CS_33025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 27), 'CS')
        # Obtaining the member 'cvalues' of a type (line 928)
        cvalues_33026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 928, 27), CS_33025, 'cvalues')
        # Getting the type of 'kw' (line 928)
        kw_33027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 12), 'kw')
        unicode_33028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 15), 'unicode', u'values')
        # Storing an element on a container (line 928)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 928, 12), kw_33027, (unicode_33028, cvalues_33026))
        
        # Assigning a Attribute to a Subscript (line 929):
        
        # Assigning a Attribute to a Subscript (line 929):
        # Getting the type of 'CS' (line 929)
        CS_33029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 27), 'CS')
        # Obtaining the member 'extend' of a type (line 929)
        extend_33030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 27), CS_33029, 'extend')
        # Getting the type of 'kw' (line 929)
        kw_33031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 12), 'kw')
        unicode_33032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 15), 'unicode', u'extend')
        # Storing an element on a container (line 929)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 929, 12), kw_33031, (unicode_33032, extend_33030))
        
        # Call to setdefault(...): (line 931)
        # Processing the call arguments (line 931)
        unicode_33035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, 26), 'unicode', u'ticks')
        
        # Call to FixedLocator(...): (line 931)
        # Processing the call arguments (line 931)
        # Getting the type of 'CS' (line 931)
        CS_33038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 55), 'CS', False)
        # Obtaining the member 'levels' of a type (line 931)
        levels_33039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 55), CS_33038, 'levels')
        # Processing the call keyword arguments (line 931)
        int_33040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, 72), 'int')
        keyword_33041 = int_33040
        kwargs_33042 = {'nbins': keyword_33041}
        # Getting the type of 'ticker' (line 931)
        ticker_33036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 35), 'ticker', False)
        # Obtaining the member 'FixedLocator' of a type (line 931)
        FixedLocator_33037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 35), ticker_33036, 'FixedLocator')
        # Calling FixedLocator(args, kwargs) (line 931)
        FixedLocator_call_result_33043 = invoke(stypy.reporting.localization.Localization(__file__, 931, 35), FixedLocator_33037, *[levels_33039], **kwargs_33042)
        
        # Processing the call keyword arguments (line 931)
        kwargs_33044 = {}
        # Getting the type of 'kw' (line 931)
        kw_33033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 12), 'kw', False)
        # Obtaining the member 'setdefault' of a type (line 931)
        setdefault_33034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 12), kw_33033, 'setdefault')
        # Calling setdefault(args, kwargs) (line 931)
        setdefault_call_result_33045 = invoke(stypy.reporting.localization.Localization(__file__, 931, 12), setdefault_33034, *[unicode_33035, FixedLocator_call_result_33043], **kwargs_33044)
        
        
        # Assigning a Attribute to a Subscript (line 932):
        
        # Assigning a Attribute to a Subscript (line 932):
        # Getting the type of 'CS' (line 932)
        CS_33046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 27), 'CS')
        # Obtaining the member 'filled' of a type (line 932)
        filled_33047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 27), CS_33046, 'filled')
        # Getting the type of 'kw' (line 932)
        kw_33048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 12), 'kw')
        unicode_33049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 932, 15), 'unicode', u'filled')
        # Storing an element on a container (line 932)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 932, 12), kw_33048, (unicode_33049, filled_33047))
        
        # Call to __init__(...): (line 933)
        # Processing the call arguments (line 933)
        # Getting the type of 'self' (line 933)
        self_33052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 34), 'self', False)
        # Getting the type of 'ax' (line 933)
        ax_33053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 40), 'ax', False)
        # Processing the call keyword arguments (line 933)
        # Getting the type of 'kw' (line 933)
        kw_33054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 46), 'kw', False)
        kwargs_33055 = {'kw_33054': kw_33054}
        # Getting the type of 'ColorbarBase' (line 933)
        ColorbarBase_33050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 12), 'ColorbarBase', False)
        # Obtaining the member '__init__' of a type (line 933)
        init___33051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 12), ColorbarBase_33050, '__init__')
        # Calling __init__(args, kwargs) (line 933)
        init___call_result_33056 = invoke(stypy.reporting.localization.Localization(__file__, 933, 12), init___33051, *[self_33052, ax_33053], **kwargs_33055)
        
        
        
        # Getting the type of 'CS' (line 934)
        CS_33057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 19), 'CS')
        # Obtaining the member 'filled' of a type (line 934)
        filled_33058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 19), CS_33057, 'filled')
        # Applying the 'not' unary operator (line 934)
        result_not__33059 = python_operator(stypy.reporting.localization.Localization(__file__, 934, 15), 'not', filled_33058)
        
        # Testing the type of an if condition (line 934)
        if_condition_33060 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 934, 12), result_not__33059)
        # Assigning a type to the variable 'if_condition_33060' (line 934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 12), 'if_condition_33060', if_condition_33060)
        # SSA begins for if statement (line 934)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to add_lines(...): (line 935)
        # Processing the call arguments (line 935)
        # Getting the type of 'CS' (line 935)
        CS_33063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 31), 'CS', False)
        # Processing the call keyword arguments (line 935)
        kwargs_33064 = {}
        # Getting the type of 'self' (line 935)
        self_33061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 16), 'self', False)
        # Obtaining the member 'add_lines' of a type (line 935)
        add_lines_33062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 16), self_33061, 'add_lines')
        # Calling add_lines(args, kwargs) (line 935)
        add_lines_call_result_33065 = invoke(stypy.reporting.localization.Localization(__file__, 935, 16), add_lines_33062, *[CS_33063], **kwargs_33064)
        
        # SSA join for if statement (line 934)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 924)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to getattr(...): (line 937)
        # Processing the call arguments (line 937)
        # Getting the type of 'cmap' (line 937)
        cmap_33067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 23), 'cmap', False)
        unicode_33068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 937, 29), 'unicode', u'colorbar_extend')
        # Getting the type of 'False' (line 937)
        False_33069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 48), 'False', False)
        # Processing the call keyword arguments (line 937)
        kwargs_33070 = {}
        # Getting the type of 'getattr' (line 937)
        getattr_33066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 15), 'getattr', False)
        # Calling getattr(args, kwargs) (line 937)
        getattr_call_result_33071 = invoke(stypy.reporting.localization.Localization(__file__, 937, 15), getattr_33066, *[cmap_33067, unicode_33068, False_33069], **kwargs_33070)
        
        # Getting the type of 'False' (line 937)
        False_33072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 62), 'False')
        # Applying the binary operator 'isnot' (line 937)
        result_is_not_33073 = python_operator(stypy.reporting.localization.Localization(__file__, 937, 15), 'isnot', getattr_call_result_33071, False_33072)
        
        # Testing the type of an if condition (line 937)
        if_condition_33074 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 937, 12), result_is_not_33073)
        # Assigning a type to the variable 'if_condition_33074' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 12), 'if_condition_33074', if_condition_33074)
        # SSA begins for if statement (line 937)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to setdefault(...): (line 938)
        # Processing the call arguments (line 938)
        unicode_33077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 30), 'unicode', u'extend')
        # Getting the type of 'cmap' (line 938)
        cmap_33078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 40), 'cmap', False)
        # Obtaining the member 'colorbar_extend' of a type (line 938)
        colorbar_extend_33079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 40), cmap_33078, 'colorbar_extend')
        # Processing the call keyword arguments (line 938)
        kwargs_33080 = {}
        # Getting the type of 'kw' (line 938)
        kw_33075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 16), 'kw', False)
        # Obtaining the member 'setdefault' of a type (line 938)
        setdefault_33076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 16), kw_33075, 'setdefault')
        # Calling setdefault(args, kwargs) (line 938)
        setdefault_call_result_33081 = invoke(stypy.reporting.localization.Localization(__file__, 938, 16), setdefault_33076, *[unicode_33077, colorbar_extend_33079], **kwargs_33080)
        
        # SSA join for if statement (line 937)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to isinstance(...): (line 940)
        # Processing the call arguments (line 940)
        # Getting the type of 'mappable' (line 940)
        mappable_33083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 26), 'mappable', False)
        # Getting the type of 'martist' (line 940)
        martist_33084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 36), 'martist', False)
        # Obtaining the member 'Artist' of a type (line 940)
        Artist_33085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 36), martist_33084, 'Artist')
        # Processing the call keyword arguments (line 940)
        kwargs_33086 = {}
        # Getting the type of 'isinstance' (line 940)
        isinstance_33082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 940)
        isinstance_call_result_33087 = invoke(stypy.reporting.localization.Localization(__file__, 940, 15), isinstance_33082, *[mappable_33083, Artist_33085], **kwargs_33086)
        
        # Testing the type of an if condition (line 940)
        if_condition_33088 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 940, 12), isinstance_call_result_33087)
        # Assigning a type to the variable 'if_condition_33088' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 12), 'if_condition_33088', if_condition_33088)
        # SSA begins for if statement (line 940)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 941):
        
        # Assigning a Call to a Subscript (line 941):
        
        # Call to get_alpha(...): (line 941)
        # Processing the call keyword arguments (line 941)
        kwargs_33091 = {}
        # Getting the type of 'mappable' (line 941)
        mappable_33089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 30), 'mappable', False)
        # Obtaining the member 'get_alpha' of a type (line 941)
        get_alpha_33090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 941, 30), mappable_33089, 'get_alpha')
        # Calling get_alpha(args, kwargs) (line 941)
        get_alpha_call_result_33092 = invoke(stypy.reporting.localization.Localization(__file__, 941, 30), get_alpha_33090, *[], **kwargs_33091)
        
        # Getting the type of 'kw' (line 941)
        kw_33093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 16), 'kw')
        unicode_33094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 19), 'unicode', u'alpha')
        # Storing an element on a container (line 941)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 941, 16), kw_33093, (unicode_33094, get_alpha_call_result_33092))
        # SSA join for if statement (line 940)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 943)
        # Processing the call arguments (line 943)
        # Getting the type of 'self' (line 943)
        self_33097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 34), 'self', False)
        # Getting the type of 'ax' (line 943)
        ax_33098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 40), 'ax', False)
        # Processing the call keyword arguments (line 943)
        # Getting the type of 'kw' (line 943)
        kw_33099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 46), 'kw', False)
        kwargs_33100 = {'kw_33099': kw_33099}
        # Getting the type of 'ColorbarBase' (line 943)
        ColorbarBase_33095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 12), 'ColorbarBase', False)
        # Obtaining the member '__init__' of a type (line 943)
        init___33096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 12), ColorbarBase_33095, '__init__')
        # Calling __init__(args, kwargs) (line 943)
        init___call_result_33101 = invoke(stypy.reporting.localization.Localization(__file__, 943, 12), init___33096, *[self_33097, ax_33098], **kwargs_33100)
        
        # SSA join for if statement (line 924)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def on_mappable_changed(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'on_mappable_changed'
        module_type_store = module_type_store.open_function_context('on_mappable_changed', 945, 4, False)
        # Assigning a type to the variable 'self' (line 946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Colorbar.on_mappable_changed.__dict__.__setitem__('stypy_localization', localization)
        Colorbar.on_mappable_changed.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Colorbar.on_mappable_changed.__dict__.__setitem__('stypy_type_store', module_type_store)
        Colorbar.on_mappable_changed.__dict__.__setitem__('stypy_function_name', 'Colorbar.on_mappable_changed')
        Colorbar.on_mappable_changed.__dict__.__setitem__('stypy_param_names_list', ['mappable'])
        Colorbar.on_mappable_changed.__dict__.__setitem__('stypy_varargs_param_name', None)
        Colorbar.on_mappable_changed.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Colorbar.on_mappable_changed.__dict__.__setitem__('stypy_call_defaults', defaults)
        Colorbar.on_mappable_changed.__dict__.__setitem__('stypy_call_varargs', varargs)
        Colorbar.on_mappable_changed.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Colorbar.on_mappable_changed.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colorbar.on_mappable_changed', ['mappable'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'on_mappable_changed', localization, ['mappable'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'on_mappable_changed(...)' code ##################

        unicode_33102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, (-1)), 'unicode', u"\n        Updates this colorbar to match the mappable's properties.\n\n        Typically this is automatically registered as an event handler\n        by :func:`colorbar_factory` and should not be called manually.\n\n        ")
        
        # Call to set_cmap(...): (line 953)
        # Processing the call arguments (line 953)
        
        # Call to get_cmap(...): (line 953)
        # Processing the call keyword arguments (line 953)
        kwargs_33107 = {}
        # Getting the type of 'mappable' (line 953)
        mappable_33105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 22), 'mappable', False)
        # Obtaining the member 'get_cmap' of a type (line 953)
        get_cmap_33106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 22), mappable_33105, 'get_cmap')
        # Calling get_cmap(args, kwargs) (line 953)
        get_cmap_call_result_33108 = invoke(stypy.reporting.localization.Localization(__file__, 953, 22), get_cmap_33106, *[], **kwargs_33107)
        
        # Processing the call keyword arguments (line 953)
        kwargs_33109 = {}
        # Getting the type of 'self' (line 953)
        self_33103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 8), 'self', False)
        # Obtaining the member 'set_cmap' of a type (line 953)
        set_cmap_33104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 8), self_33103, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 953)
        set_cmap_call_result_33110 = invoke(stypy.reporting.localization.Localization(__file__, 953, 8), set_cmap_33104, *[get_cmap_call_result_33108], **kwargs_33109)
        
        
        # Call to set_clim(...): (line 954)
        # Processing the call arguments (line 954)
        
        # Call to get_clim(...): (line 954)
        # Processing the call keyword arguments (line 954)
        kwargs_33115 = {}
        # Getting the type of 'mappable' (line 954)
        mappable_33113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 22), 'mappable', False)
        # Obtaining the member 'get_clim' of a type (line 954)
        get_clim_33114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 22), mappable_33113, 'get_clim')
        # Calling get_clim(args, kwargs) (line 954)
        get_clim_call_result_33116 = invoke(stypy.reporting.localization.Localization(__file__, 954, 22), get_clim_33114, *[], **kwargs_33115)
        
        # Processing the call keyword arguments (line 954)
        kwargs_33117 = {}
        # Getting the type of 'self' (line 954)
        self_33111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 8), 'self', False)
        # Obtaining the member 'set_clim' of a type (line 954)
        set_clim_33112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 8), self_33111, 'set_clim')
        # Calling set_clim(args, kwargs) (line 954)
        set_clim_call_result_33118 = invoke(stypy.reporting.localization.Localization(__file__, 954, 8), set_clim_33112, *[get_clim_call_result_33116], **kwargs_33117)
        
        
        # Call to update_normal(...): (line 955)
        # Processing the call arguments (line 955)
        # Getting the type of 'mappable' (line 955)
        mappable_33121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 27), 'mappable', False)
        # Processing the call keyword arguments (line 955)
        kwargs_33122 = {}
        # Getting the type of 'self' (line 955)
        self_33119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 8), 'self', False)
        # Obtaining the member 'update_normal' of a type (line 955)
        update_normal_33120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 8), self_33119, 'update_normal')
        # Calling update_normal(args, kwargs) (line 955)
        update_normal_call_result_33123 = invoke(stypy.reporting.localization.Localization(__file__, 955, 8), update_normal_33120, *[mappable_33121], **kwargs_33122)
        
        
        # ################# End of 'on_mappable_changed(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'on_mappable_changed' in the type store
        # Getting the type of 'stypy_return_type' (line 945)
        stypy_return_type_33124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_33124)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'on_mappable_changed'
        return stypy_return_type_33124


    @norecursion
    def add_lines(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 957)
        True_33125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 34), 'True')
        defaults = [True_33125]
        # Create a new context for function 'add_lines'
        module_type_store = module_type_store.open_function_context('add_lines', 957, 4, False)
        # Assigning a type to the variable 'self' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Colorbar.add_lines.__dict__.__setitem__('stypy_localization', localization)
        Colorbar.add_lines.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Colorbar.add_lines.__dict__.__setitem__('stypy_type_store', module_type_store)
        Colorbar.add_lines.__dict__.__setitem__('stypy_function_name', 'Colorbar.add_lines')
        Colorbar.add_lines.__dict__.__setitem__('stypy_param_names_list', ['CS', 'erase'])
        Colorbar.add_lines.__dict__.__setitem__('stypy_varargs_param_name', None)
        Colorbar.add_lines.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Colorbar.add_lines.__dict__.__setitem__('stypy_call_defaults', defaults)
        Colorbar.add_lines.__dict__.__setitem__('stypy_call_varargs', varargs)
        Colorbar.add_lines.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Colorbar.add_lines.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colorbar.add_lines', ['CS', 'erase'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_lines', localization, ['CS', 'erase'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_lines(...)' code ##################

        unicode_33126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, (-1)), 'unicode', u'\n        Add the lines from a non-filled\n        :class:`~matplotlib.contour.ContourSet` to the colorbar.\n\n        Set *erase* to False if these lines should be added to\n        any pre-existing lines.\n        ')
        
        
        # Evaluating a boolean operation
        
        
        # Call to isinstance(...): (line 965)
        # Processing the call arguments (line 965)
        # Getting the type of 'CS' (line 965)
        CS_33128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 26), 'CS', False)
        # Getting the type of 'contour' (line 965)
        contour_33129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 30), 'contour', False)
        # Obtaining the member 'ContourSet' of a type (line 965)
        ContourSet_33130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 30), contour_33129, 'ContourSet')
        # Processing the call keyword arguments (line 965)
        kwargs_33131 = {}
        # Getting the type of 'isinstance' (line 965)
        isinstance_33127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 965)
        isinstance_call_result_33132 = invoke(stypy.reporting.localization.Localization(__file__, 965, 15), isinstance_33127, *[CS_33128, ContourSet_33130], **kwargs_33131)
        
        # Applying the 'not' unary operator (line 965)
        result_not__33133 = python_operator(stypy.reporting.localization.Localization(__file__, 965, 11), 'not', isinstance_call_result_33132)
        
        # Getting the type of 'CS' (line 965)
        CS_33134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 53), 'CS')
        # Obtaining the member 'filled' of a type (line 965)
        filled_33135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 53), CS_33134, 'filled')
        # Applying the binary operator 'or' (line 965)
        result_or_keyword_33136 = python_operator(stypy.reporting.localization.Localization(__file__, 965, 11), 'or', result_not__33133, filled_33135)
        
        # Testing the type of an if condition (line 965)
        if_condition_33137 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 965, 8), result_or_keyword_33136)
        # Assigning a type to the variable 'if_condition_33137' (line 965)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 965, 8), 'if_condition_33137', if_condition_33137)
        # SSA begins for if statement (line 965)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 966)
        # Processing the call arguments (line 966)
        unicode_33139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 966, 29), 'unicode', u'add_lines is only for a ContourSet of lines')
        # Processing the call keyword arguments (line 966)
        kwargs_33140 = {}
        # Getting the type of 'ValueError' (line 966)
        ValueError_33138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 966)
        ValueError_call_result_33141 = invoke(stypy.reporting.localization.Localization(__file__, 966, 18), ValueError_33138, *[unicode_33139], **kwargs_33140)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 966, 12), ValueError_call_result_33141, 'raise parameter', BaseException)
        # SSA join for if statement (line 965)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a ListComp to a Name (line 967):
        
        # Assigning a ListComp to a Name (line 967):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'CS' (line 967)
        CS_33146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 33), 'CS')
        # Obtaining the member 'tcolors' of a type (line 967)
        tcolors_33147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 33), CS_33146, 'tcolors')
        comprehension_33148 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 967, 19), tcolors_33147)
        # Assigning a type to the variable 'c' (line 967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 19), 'c', comprehension_33148)
        
        # Obtaining the type of the subscript
        int_33142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 21), 'int')
        # Getting the type of 'c' (line 967)
        c_33143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 19), 'c')
        # Obtaining the member '__getitem__' of a type (line 967)
        getitem___33144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 19), c_33143, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 967)
        subscript_call_result_33145 = invoke(stypy.reporting.localization.Localization(__file__, 967, 19), getitem___33144, int_33142)
        
        list_33149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 19), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 967, 19), list_33149, subscript_call_result_33145)
        # Assigning a type to the variable 'tcolors' (line 967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 8), 'tcolors', list_33149)
        
        # Assigning a ListComp to a Name (line 968):
        
        # Assigning a ListComp to a Name (line 968):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'CS' (line 968)
        CS_33154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 37), 'CS')
        # Obtaining the member 'tlinewidths' of a type (line 968)
        tlinewidths_33155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 37), CS_33154, 'tlinewidths')
        comprehension_33156 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 968, 23), tlinewidths_33155)
        # Assigning a type to the variable 't' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 23), 't', comprehension_33156)
        
        # Obtaining the type of the subscript
        int_33150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 25), 'int')
        # Getting the type of 't' (line 968)
        t_33151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 23), 't')
        # Obtaining the member '__getitem__' of a type (line 968)
        getitem___33152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 23), t_33151, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 968)
        subscript_call_result_33153 = invoke(stypy.reporting.localization.Localization(__file__, 968, 23), getitem___33152, int_33150)
        
        list_33157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 23), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 968, 23), list_33157, subscript_call_result_33153)
        # Assigning a type to the variable 'tlinewidths' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'tlinewidths', list_33157)
        
        # Call to add_lines(...): (line 977)
        # Processing the call arguments (line 977)
        # Getting the type of 'self' (line 977)
        self_33160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 31), 'self', False)
        # Getting the type of 'CS' (line 977)
        CS_33161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 37), 'CS', False)
        # Obtaining the member 'levels' of a type (line 977)
        levels_33162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 37), CS_33161, 'levels')
        # Getting the type of 'tcolors' (line 977)
        tcolors_33163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 48), 'tcolors', False)
        # Getting the type of 'tlinewidths' (line 977)
        tlinewidths_33164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 57), 'tlinewidths', False)
        # Processing the call keyword arguments (line 977)
        # Getting the type of 'erase' (line 978)
        erase_33165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 37), 'erase', False)
        keyword_33166 = erase_33165
        kwargs_33167 = {'erase': keyword_33166}
        # Getting the type of 'ColorbarBase' (line 977)
        ColorbarBase_33158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 8), 'ColorbarBase', False)
        # Obtaining the member 'add_lines' of a type (line 977)
        add_lines_33159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 8), ColorbarBase_33158, 'add_lines')
        # Calling add_lines(args, kwargs) (line 977)
        add_lines_call_result_33168 = invoke(stypy.reporting.localization.Localization(__file__, 977, 8), add_lines_33159, *[self_33160, levels_33162, tcolors_33163, tlinewidths_33164], **kwargs_33167)
        
        
        # ################# End of 'add_lines(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_lines' in the type store
        # Getting the type of 'stypy_return_type' (line 957)
        stypy_return_type_33169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_33169)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_lines'
        return stypy_return_type_33169


    @norecursion
    def update_normal(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_normal'
        module_type_store = module_type_store.open_function_context('update_normal', 980, 4, False)
        # Assigning a type to the variable 'self' (line 981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 981, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Colorbar.update_normal.__dict__.__setitem__('stypy_localization', localization)
        Colorbar.update_normal.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Colorbar.update_normal.__dict__.__setitem__('stypy_type_store', module_type_store)
        Colorbar.update_normal.__dict__.__setitem__('stypy_function_name', 'Colorbar.update_normal')
        Colorbar.update_normal.__dict__.__setitem__('stypy_param_names_list', ['mappable'])
        Colorbar.update_normal.__dict__.__setitem__('stypy_varargs_param_name', None)
        Colorbar.update_normal.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Colorbar.update_normal.__dict__.__setitem__('stypy_call_defaults', defaults)
        Colorbar.update_normal.__dict__.__setitem__('stypy_call_varargs', varargs)
        Colorbar.update_normal.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Colorbar.update_normal.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colorbar.update_normal', ['mappable'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_normal', localization, ['mappable'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_normal(...)' code ##################

        unicode_33170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, (-1)), 'unicode', u'\n        update solid, lines, etc. Unlike update_bruteforce, it does\n        not clear the axes.  This is meant to be called when the image\n        or contour plot to which this colorbar belongs is changed.\n        ')
        
        # Call to draw_all(...): (line 986)
        # Processing the call keyword arguments (line 986)
        kwargs_33173 = {}
        # Getting the type of 'self' (line 986)
        self_33171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'self', False)
        # Obtaining the member 'draw_all' of a type (line 986)
        draw_all_33172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 8), self_33171, 'draw_all')
        # Calling draw_all(args, kwargs) (line 986)
        draw_all_call_result_33174 = invoke(stypy.reporting.localization.Localization(__file__, 986, 8), draw_all_33172, *[], **kwargs_33173)
        
        
        
        # Call to isinstance(...): (line 987)
        # Processing the call arguments (line 987)
        # Getting the type of 'self' (line 987)
        self_33176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 22), 'self', False)
        # Obtaining the member 'mappable' of a type (line 987)
        mappable_33177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 22), self_33176, 'mappable')
        # Getting the type of 'contour' (line 987)
        contour_33178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 37), 'contour', False)
        # Obtaining the member 'ContourSet' of a type (line 987)
        ContourSet_33179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 37), contour_33178, 'ContourSet')
        # Processing the call keyword arguments (line 987)
        kwargs_33180 = {}
        # Getting the type of 'isinstance' (line 987)
        isinstance_33175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 987)
        isinstance_call_result_33181 = invoke(stypy.reporting.localization.Localization(__file__, 987, 11), isinstance_33175, *[mappable_33177, ContourSet_33179], **kwargs_33180)
        
        # Testing the type of an if condition (line 987)
        if_condition_33182 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 987, 8), isinstance_call_result_33181)
        # Assigning a type to the variable 'if_condition_33182' (line 987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 8), 'if_condition_33182', if_condition_33182)
        # SSA begins for if statement (line 987)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 988):
        
        # Assigning a Attribute to a Name (line 988):
        # Getting the type of 'self' (line 988)
        self_33183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 17), 'self')
        # Obtaining the member 'mappable' of a type (line 988)
        mappable_33184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 988, 17), self_33183, 'mappable')
        # Assigning a type to the variable 'CS' (line 988)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 12), 'CS', mappable_33184)
        
        
        # Getting the type of 'CS' (line 989)
        CS_33185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 19), 'CS')
        # Obtaining the member 'filled' of a type (line 989)
        filled_33186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 989, 19), CS_33185, 'filled')
        # Applying the 'not' unary operator (line 989)
        result_not__33187 = python_operator(stypy.reporting.localization.Localization(__file__, 989, 15), 'not', filled_33186)
        
        # Testing the type of an if condition (line 989)
        if_condition_33188 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 989, 12), result_not__33187)
        # Assigning a type to the variable 'if_condition_33188' (line 989)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 12), 'if_condition_33188', if_condition_33188)
        # SSA begins for if statement (line 989)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to add_lines(...): (line 990)
        # Processing the call arguments (line 990)
        # Getting the type of 'CS' (line 990)
        CS_33191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 31), 'CS', False)
        # Processing the call keyword arguments (line 990)
        kwargs_33192 = {}
        # Getting the type of 'self' (line 990)
        self_33189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 16), 'self', False)
        # Obtaining the member 'add_lines' of a type (line 990)
        add_lines_33190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 16), self_33189, 'add_lines')
        # Calling add_lines(args, kwargs) (line 990)
        add_lines_call_result_33193 = invoke(stypy.reporting.localization.Localization(__file__, 990, 16), add_lines_33190, *[CS_33191], **kwargs_33192)
        
        # SSA join for if statement (line 989)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 987)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 991):
        
        # Assigning a Name to a Attribute (line 991):
        # Getting the type of 'True' (line 991)
        True_33194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 21), 'True')
        # Getting the type of 'self' (line 991)
        self_33195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 991)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 8), self_33195, 'stale', True_33194)
        
        # ################# End of 'update_normal(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_normal' in the type store
        # Getting the type of 'stypy_return_type' (line 980)
        stypy_return_type_33196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_33196)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_normal'
        return stypy_return_type_33196


    @norecursion
    def update_bruteforce(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_bruteforce'
        module_type_store = module_type_store.open_function_context('update_bruteforce', 993, 4, False)
        # Assigning a type to the variable 'self' (line 994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Colorbar.update_bruteforce.__dict__.__setitem__('stypy_localization', localization)
        Colorbar.update_bruteforce.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Colorbar.update_bruteforce.__dict__.__setitem__('stypy_type_store', module_type_store)
        Colorbar.update_bruteforce.__dict__.__setitem__('stypy_function_name', 'Colorbar.update_bruteforce')
        Colorbar.update_bruteforce.__dict__.__setitem__('stypy_param_names_list', ['mappable'])
        Colorbar.update_bruteforce.__dict__.__setitem__('stypy_varargs_param_name', None)
        Colorbar.update_bruteforce.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Colorbar.update_bruteforce.__dict__.__setitem__('stypy_call_defaults', defaults)
        Colorbar.update_bruteforce.__dict__.__setitem__('stypy_call_varargs', varargs)
        Colorbar.update_bruteforce.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Colorbar.update_bruteforce.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colorbar.update_bruteforce', ['mappable'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_bruteforce', localization, ['mappable'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_bruteforce(...)' code ##################

        unicode_33197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1001, (-1)), 'unicode', u'\n        Destroy and rebuild the colorbar.  This is\n        intended to become obsolete, and will probably be\n        deprecated and then removed.  It is not called when\n        the pyplot.colorbar function or the Figure.colorbar\n        method are used to create the colorbar.\n\n        ')
        
        # Call to cla(...): (line 1006)
        # Processing the call keyword arguments (line 1006)
        kwargs_33201 = {}
        # Getting the type of 'self' (line 1006)
        self_33198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 8), 'self', False)
        # Obtaining the member 'ax' of a type (line 1006)
        ax_33199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1006, 8), self_33198, 'ax')
        # Obtaining the member 'cla' of a type (line 1006)
        cla_33200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1006, 8), ax_33199, 'cla')
        # Calling cla(args, kwargs) (line 1006)
        cla_call_result_33202 = invoke(stypy.reporting.localization.Localization(__file__, 1006, 8), cla_33200, *[], **kwargs_33201)
        
        
        # Assigning a Name to a Attribute (line 1008):
        
        # Assigning a Name to a Attribute (line 1008):
        # Getting the type of 'None' (line 1008)
        None_33203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 23), 'None')
        # Getting the type of 'self' (line 1008)
        self_33204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 8), 'self')
        # Setting the type of the member 'outline' of a type (line 1008)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1008, 8), self_33204, 'outline', None_33203)
        
        # Assigning a Name to a Attribute (line 1009):
        
        # Assigning a Name to a Attribute (line 1009):
        # Getting the type of 'None' (line 1009)
        None_33205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 21), 'None')
        # Getting the type of 'self' (line 1009)
        self_33206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 8), 'self')
        # Setting the type of the member 'patch' of a type (line 1009)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 8), self_33206, 'patch', None_33205)
        
        # Assigning a Name to a Attribute (line 1010):
        
        # Assigning a Name to a Attribute (line 1010):
        # Getting the type of 'None' (line 1010)
        None_33207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 22), 'None')
        # Getting the type of 'self' (line 1010)
        self_33208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 8), 'self')
        # Setting the type of the member 'solids' of a type (line 1010)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 8), self_33208, 'solids', None_33207)
        
        # Assigning a Call to a Attribute (line 1011):
        
        # Assigning a Call to a Attribute (line 1011):
        
        # Call to list(...): (line 1011)
        # Processing the call keyword arguments (line 1011)
        kwargs_33210 = {}
        # Getting the type of 'list' (line 1011)
        list_33209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 21), 'list', False)
        # Calling list(args, kwargs) (line 1011)
        list_call_result_33211 = invoke(stypy.reporting.localization.Localization(__file__, 1011, 21), list_33209, *[], **kwargs_33210)
        
        # Getting the type of 'self' (line 1011)
        self_33212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 8), 'self')
        # Setting the type of the member 'lines' of a type (line 1011)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1011, 8), self_33212, 'lines', list_call_result_33211)
        
        # Assigning a Name to a Attribute (line 1012):
        
        # Assigning a Name to a Attribute (line 1012):
        # Getting the type of 'None' (line 1012)
        None_33213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 24), 'None')
        # Getting the type of 'self' (line 1012)
        self_33214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 8), 'self')
        # Setting the type of the member 'dividers' of a type (line 1012)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1012, 8), self_33214, 'dividers', None_33213)
        
        # Call to set_alpha(...): (line 1013)
        # Processing the call arguments (line 1013)
        
        # Call to get_alpha(...): (line 1013)
        # Processing the call keyword arguments (line 1013)
        kwargs_33219 = {}
        # Getting the type of 'mappable' (line 1013)
        mappable_33217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 23), 'mappable', False)
        # Obtaining the member 'get_alpha' of a type (line 1013)
        get_alpha_33218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 23), mappable_33217, 'get_alpha')
        # Calling get_alpha(args, kwargs) (line 1013)
        get_alpha_call_result_33220 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 23), get_alpha_33218, *[], **kwargs_33219)
        
        # Processing the call keyword arguments (line 1013)
        kwargs_33221 = {}
        # Getting the type of 'self' (line 1013)
        self_33215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 8), 'self', False)
        # Obtaining the member 'set_alpha' of a type (line 1013)
        set_alpha_33216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 8), self_33215, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 1013)
        set_alpha_call_result_33222 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 8), set_alpha_33216, *[get_alpha_call_result_33220], **kwargs_33221)
        
        
        # Assigning a Attribute to a Attribute (line 1014):
        
        # Assigning a Attribute to a Attribute (line 1014):
        # Getting the type of 'mappable' (line 1014)
        mappable_33223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 20), 'mappable')
        # Obtaining the member 'cmap' of a type (line 1014)
        cmap_33224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1014, 20), mappable_33223, 'cmap')
        # Getting the type of 'self' (line 1014)
        self_33225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 8), 'self')
        # Setting the type of the member 'cmap' of a type (line 1014)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1014, 8), self_33225, 'cmap', cmap_33224)
        
        # Assigning a Attribute to a Attribute (line 1015):
        
        # Assigning a Attribute to a Attribute (line 1015):
        # Getting the type of 'mappable' (line 1015)
        mappable_33226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 20), 'mappable')
        # Obtaining the member 'norm' of a type (line 1015)
        norm_33227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1015, 20), mappable_33226, 'norm')
        # Getting the type of 'self' (line 1015)
        self_33228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 8), 'self')
        # Setting the type of the member 'norm' of a type (line 1015)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1015, 8), self_33228, 'norm', norm_33227)
        
        # Call to config_axis(...): (line 1016)
        # Processing the call keyword arguments (line 1016)
        kwargs_33231 = {}
        # Getting the type of 'self' (line 1016)
        self_33229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 8), 'self', False)
        # Obtaining the member 'config_axis' of a type (line 1016)
        config_axis_33230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1016, 8), self_33229, 'config_axis')
        # Calling config_axis(args, kwargs) (line 1016)
        config_axis_call_result_33232 = invoke(stypy.reporting.localization.Localization(__file__, 1016, 8), config_axis_33230, *[], **kwargs_33231)
        
        
        # Call to draw_all(...): (line 1017)
        # Processing the call keyword arguments (line 1017)
        kwargs_33235 = {}
        # Getting the type of 'self' (line 1017)
        self_33233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 8), 'self', False)
        # Obtaining the member 'draw_all' of a type (line 1017)
        draw_all_33234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 8), self_33233, 'draw_all')
        # Calling draw_all(args, kwargs) (line 1017)
        draw_all_call_result_33236 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 8), draw_all_33234, *[], **kwargs_33235)
        
        
        
        # Call to isinstance(...): (line 1018)
        # Processing the call arguments (line 1018)
        # Getting the type of 'self' (line 1018)
        self_33238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 22), 'self', False)
        # Obtaining the member 'mappable' of a type (line 1018)
        mappable_33239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1018, 22), self_33238, 'mappable')
        # Getting the type of 'contour' (line 1018)
        contour_33240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 37), 'contour', False)
        # Obtaining the member 'ContourSet' of a type (line 1018)
        ContourSet_33241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1018, 37), contour_33240, 'ContourSet')
        # Processing the call keyword arguments (line 1018)
        kwargs_33242 = {}
        # Getting the type of 'isinstance' (line 1018)
        isinstance_33237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1018)
        isinstance_call_result_33243 = invoke(stypy.reporting.localization.Localization(__file__, 1018, 11), isinstance_33237, *[mappable_33239, ContourSet_33241], **kwargs_33242)
        
        # Testing the type of an if condition (line 1018)
        if_condition_33244 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1018, 8), isinstance_call_result_33243)
        # Assigning a type to the variable 'if_condition_33244' (line 1018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 8), 'if_condition_33244', if_condition_33244)
        # SSA begins for if statement (line 1018)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1019):
        
        # Assigning a Attribute to a Name (line 1019):
        # Getting the type of 'self' (line 1019)
        self_33245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 17), 'self')
        # Obtaining the member 'mappable' of a type (line 1019)
        mappable_33246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1019, 17), self_33245, 'mappable')
        # Assigning a type to the variable 'CS' (line 1019)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1019, 12), 'CS', mappable_33246)
        
        
        # Getting the type of 'CS' (line 1020)
        CS_33247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 19), 'CS')
        # Obtaining the member 'filled' of a type (line 1020)
        filled_33248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 19), CS_33247, 'filled')
        # Applying the 'not' unary operator (line 1020)
        result_not__33249 = python_operator(stypy.reporting.localization.Localization(__file__, 1020, 15), 'not', filled_33248)
        
        # Testing the type of an if condition (line 1020)
        if_condition_33250 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1020, 12), result_not__33249)
        # Assigning a type to the variable 'if_condition_33250' (line 1020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1020, 12), 'if_condition_33250', if_condition_33250)
        # SSA begins for if statement (line 1020)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to add_lines(...): (line 1021)
        # Processing the call arguments (line 1021)
        # Getting the type of 'CS' (line 1021)
        CS_33253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 31), 'CS', False)
        # Processing the call keyword arguments (line 1021)
        kwargs_33254 = {}
        # Getting the type of 'self' (line 1021)
        self_33251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 16), 'self', False)
        # Obtaining the member 'add_lines' of a type (line 1021)
        add_lines_33252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1021, 16), self_33251, 'add_lines')
        # Calling add_lines(args, kwargs) (line 1021)
        add_lines_call_result_33255 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 16), add_lines_33252, *[CS_33253], **kwargs_33254)
        
        # SSA join for if statement (line 1020)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1018)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'update_bruteforce(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_bruteforce' in the type store
        # Getting the type of 'stypy_return_type' (line 993)
        stypy_return_type_33256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_33256)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_bruteforce'
        return stypy_return_type_33256


    @norecursion
    def remove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'remove'
        module_type_store = module_type_store.open_function_context('remove', 1030, 4, False)
        # Assigning a type to the variable 'self' (line 1031)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1031, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Colorbar.remove.__dict__.__setitem__('stypy_localization', localization)
        Colorbar.remove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Colorbar.remove.__dict__.__setitem__('stypy_type_store', module_type_store)
        Colorbar.remove.__dict__.__setitem__('stypy_function_name', 'Colorbar.remove')
        Colorbar.remove.__dict__.__setitem__('stypy_param_names_list', [])
        Colorbar.remove.__dict__.__setitem__('stypy_varargs_param_name', None)
        Colorbar.remove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Colorbar.remove.__dict__.__setitem__('stypy_call_defaults', defaults)
        Colorbar.remove.__dict__.__setitem__('stypy_call_varargs', varargs)
        Colorbar.remove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Colorbar.remove.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colorbar.remove', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'remove', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'remove(...)' code ##################

        unicode_33257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1034, (-1)), 'unicode', u'\n        Remove this colorbar from the figure.  If the colorbar was created with\n        ``use_gridspec=True`` then restore the gridspec to its previous value.\n        ')
        
        # Call to remove(...): (line 1036)
        # Processing the call arguments (line 1036)
        # Getting the type of 'self' (line 1036)
        self_33260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 28), 'self', False)
        # Processing the call keyword arguments (line 1036)
        kwargs_33261 = {}
        # Getting the type of 'ColorbarBase' (line 1036)
        ColorbarBase_33258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 8), 'ColorbarBase', False)
        # Obtaining the member 'remove' of a type (line 1036)
        remove_33259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 8), ColorbarBase_33258, 'remove')
        # Calling remove(args, kwargs) (line 1036)
        remove_call_result_33262 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 8), remove_33259, *[self_33260], **kwargs_33261)
        
        
        # Call to disconnect(...): (line 1037)
        # Processing the call arguments (line 1037)
        # Getting the type of 'self' (line 1037)
        self_33267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 45), 'self', False)
        # Obtaining the member 'mappable' of a type (line 1037)
        mappable_33268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 45), self_33267, 'mappable')
        # Obtaining the member 'colorbar_cid' of a type (line 1037)
        colorbar_cid_33269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 45), mappable_33268, 'colorbar_cid')
        # Processing the call keyword arguments (line 1037)
        kwargs_33270 = {}
        # Getting the type of 'self' (line 1037)
        self_33263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 8), 'self', False)
        # Obtaining the member 'mappable' of a type (line 1037)
        mappable_33264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 8), self_33263, 'mappable')
        # Obtaining the member 'callbacksSM' of a type (line 1037)
        callbacksSM_33265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 8), mappable_33264, 'callbacksSM')
        # Obtaining the member 'disconnect' of a type (line 1037)
        disconnect_33266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 8), callbacksSM_33265, 'disconnect')
        # Calling disconnect(args, kwargs) (line 1037)
        disconnect_call_result_33271 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 8), disconnect_33266, *[colorbar_cid_33269], **kwargs_33270)
        
        
        # Assigning a Name to a Attribute (line 1038):
        
        # Assigning a Name to a Attribute (line 1038):
        # Getting the type of 'None' (line 1038)
        None_33272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 33), 'None')
        # Getting the type of 'self' (line 1038)
        self_33273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'self')
        # Obtaining the member 'mappable' of a type (line 1038)
        mappable_33274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 8), self_33273, 'mappable')
        # Setting the type of the member 'colorbar' of a type (line 1038)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 8), mappable_33274, 'colorbar', None_33272)
        
        # Assigning a Name to a Attribute (line 1039):
        
        # Assigning a Name to a Attribute (line 1039):
        # Getting the type of 'None' (line 1039)
        None_33275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 37), 'None')
        # Getting the type of 'self' (line 1039)
        self_33276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 8), 'self')
        # Obtaining the member 'mappable' of a type (line 1039)
        mappable_33277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 8), self_33276, 'mappable')
        # Setting the type of the member 'colorbar_cid' of a type (line 1039)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 8), mappable_33277, 'colorbar_cid', None_33275)
        
        
        # SSA begins for try-except statement (line 1041)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Attribute to a Name (line 1042):
        
        # Assigning a Attribute to a Name (line 1042):
        # Getting the type of 'self' (line 1042)
        self_33278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 17), 'self')
        # Obtaining the member 'mappable' of a type (line 1042)
        mappable_33279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 17), self_33278, 'mappable')
        # Obtaining the member 'axes' of a type (line 1042)
        axes_33280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 17), mappable_33279, 'axes')
        # Assigning a type to the variable 'ax' (line 1042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 12), 'ax', axes_33280)
        # SSA branch for the except part of a try statement (line 1041)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 1041)
        module_type_store.open_ssa_branch('except')
        # Assigning a type to the variable 'stypy_return_type' (line 1044)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1044, 12), 'stypy_return_type', types.NoneType)
        # SSA join for try-except statement (line 1041)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 1046)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1047):
        
        # Assigning a Call to a Name (line 1047):
        
        # Call to get_gridspec(...): (line 1047)
        # Processing the call keyword arguments (line 1047)
        kwargs_33286 = {}
        
        # Call to get_subplotspec(...): (line 1047)
        # Processing the call keyword arguments (line 1047)
        kwargs_33283 = {}
        # Getting the type of 'ax' (line 1047)
        ax_33281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 17), 'ax', False)
        # Obtaining the member 'get_subplotspec' of a type (line 1047)
        get_subplotspec_33282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 17), ax_33281, 'get_subplotspec')
        # Calling get_subplotspec(args, kwargs) (line 1047)
        get_subplotspec_call_result_33284 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 17), get_subplotspec_33282, *[], **kwargs_33283)
        
        # Obtaining the member 'get_gridspec' of a type (line 1047)
        get_gridspec_33285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 17), get_subplotspec_call_result_33284, 'get_gridspec')
        # Calling get_gridspec(args, kwargs) (line 1047)
        get_gridspec_call_result_33287 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 17), get_gridspec_33285, *[], **kwargs_33286)
        
        # Assigning a type to the variable 'gs' (line 1047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'gs', get_gridspec_call_result_33287)
        
        # Assigning a Call to a Name (line 1048):
        
        # Assigning a Call to a Name (line 1048):
        
        # Call to get_topmost_subplotspec(...): (line 1048)
        # Processing the call keyword arguments (line 1048)
        kwargs_33290 = {}
        # Getting the type of 'gs' (line 1048)
        gs_33288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 26), 'gs', False)
        # Obtaining the member 'get_topmost_subplotspec' of a type (line 1048)
        get_topmost_subplotspec_33289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 26), gs_33288, 'get_topmost_subplotspec')
        # Calling get_topmost_subplotspec(args, kwargs) (line 1048)
        get_topmost_subplotspec_call_result_33291 = invoke(stypy.reporting.localization.Localization(__file__, 1048, 26), get_topmost_subplotspec_33289, *[], **kwargs_33290)
        
        # Assigning a type to the variable 'subplotspec' (line 1048)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 12), 'subplotspec', get_topmost_subplotspec_call_result_33291)
        # SSA branch for the except part of a try statement (line 1046)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 1046)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 1051):
        
        # Assigning a Call to a Name (line 1051):
        
        # Call to get_position(...): (line 1051)
        # Processing the call keyword arguments (line 1051)
        # Getting the type of 'True' (line 1051)
        True_33294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 43), 'True', False)
        keyword_33295 = True_33294
        kwargs_33296 = {'original': keyword_33295}
        # Getting the type of 'ax' (line 1051)
        ax_33292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 18), 'ax', False)
        # Obtaining the member 'get_position' of a type (line 1051)
        get_position_33293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 18), ax_33292, 'get_position')
        # Calling get_position(args, kwargs) (line 1051)
        get_position_call_result_33297 = invoke(stypy.reporting.localization.Localization(__file__, 1051, 18), get_position_33293, *[], **kwargs_33296)
        
        # Assigning a type to the variable 'pos' (line 1051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'pos', get_position_call_result_33297)
        
        # Call to set_position(...): (line 1052)
        # Processing the call arguments (line 1052)
        # Getting the type of 'pos' (line 1052)
        pos_33300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 28), 'pos', False)
        # Processing the call keyword arguments (line 1052)
        kwargs_33301 = {}
        # Getting the type of 'ax' (line 1052)
        ax_33298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 12), 'ax', False)
        # Obtaining the member 'set_position' of a type (line 1052)
        set_position_33299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 12), ax_33298, 'set_position')
        # Calling set_position(args, kwargs) (line 1052)
        set_position_call_result_33302 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 12), set_position_33299, *[pos_33300], **kwargs_33301)
        
        # SSA branch for the else branch of a try statement (line 1046)
        module_type_store.open_ssa_branch('except else')
        
        # Call to set_subplotspec(...): (line 1055)
        # Processing the call arguments (line 1055)
        # Getting the type of 'subplotspec' (line 1055)
        subplotspec_33305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 31), 'subplotspec', False)
        # Processing the call keyword arguments (line 1055)
        kwargs_33306 = {}
        # Getting the type of 'ax' (line 1055)
        ax_33303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 12), 'ax', False)
        # Obtaining the member 'set_subplotspec' of a type (line 1055)
        set_subplotspec_33304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1055, 12), ax_33303, 'set_subplotspec')
        # Calling set_subplotspec(args, kwargs) (line 1055)
        set_subplotspec_call_result_33307 = invoke(stypy.reporting.localization.Localization(__file__, 1055, 12), set_subplotspec_33304, *[subplotspec_33305], **kwargs_33306)
        
        # SSA join for try-except statement (line 1046)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'remove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'remove' in the type store
        # Getting the type of 'stypy_return_type' (line 1030)
        stypy_return_type_33308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_33308)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'remove'
        return stypy_return_type_33308


# Assigning a type to the variable 'Colorbar' (line 903)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 0), 'Colorbar', Colorbar)

@norecursion
def make_axes(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1059)
    None_33309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 32), 'None')
    # Getting the type of 'None' (line 1059)
    None_33310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 50), 'None')
    float_33311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1059, 65), 'float')
    float_33312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1060, 21), 'float')
    int_33313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1060, 33), 'int')
    defaults = [None_33309, None_33310, float_33311, float_33312, int_33313]
    # Create a new context for function 'make_axes'
    module_type_store = module_type_store.open_function_context('make_axes', 1058, 0, False)
    
    # Passed parameters checking function
    make_axes.stypy_localization = localization
    make_axes.stypy_type_of_self = None
    make_axes.stypy_type_store = module_type_store
    make_axes.stypy_function_name = 'make_axes'
    make_axes.stypy_param_names_list = ['parents', 'location', 'orientation', 'fraction', 'shrink', 'aspect']
    make_axes.stypy_varargs_param_name = None
    make_axes.stypy_kwargs_param_name = 'kw'
    make_axes.stypy_call_defaults = defaults
    make_axes.stypy_call_varargs = varargs
    make_axes.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'make_axes', ['parents', 'location', 'orientation', 'fraction', 'shrink', 'aspect'], None, 'kw', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'make_axes', localization, ['parents', 'location', 'orientation', 'fraction', 'shrink', 'aspect'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'make_axes(...)' code ##################

    unicode_33314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, (-1)), 'unicode', u"\n    Resize and reposition parent axes, and return a child\n    axes suitable for a colorbar.\n\n    Keyword arguments may include the following (with defaults):\n\n        location : [None|'left'|'right'|'top'|'bottom']\n            The position, relative to **parents**, where the colorbar axes\n            should be created. If None, the value will either come from the\n            given ``orientation``, else it will default to 'right'.\n\n        orientation :  [None|'vertical'|'horizontal']\n            The orientation of the colorbar. Typically, this keyword shouldn't\n            be used, as it can be derived from the ``location`` keyword.\n\n    %s\n\n    Returns (cax, kw), the child axes and the reduced kw dictionary to be\n    passed when creating the colorbar instance.\n    ")
    
    # Assigning a List to a Name (line 1081):
    
    # Assigning a List to a Name (line 1081):
    
    # Obtaining an instance of the builtin type 'list' (line 1081)
    list_33315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1081, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1081)
    # Adding element type (line 1081)
    unicode_33316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1081, 17), 'unicode', u'left')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1081, 16), list_33315, unicode_33316)
    # Adding element type (line 1081)
    unicode_33317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1081, 25), 'unicode', u'right')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1081, 16), list_33315, unicode_33317)
    # Adding element type (line 1081)
    unicode_33318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1081, 34), 'unicode', u'top')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1081, 16), list_33315, unicode_33318)
    # Adding element type (line 1081)
    unicode_33319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1081, 41), 'unicode', u'bottom')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1081, 16), list_33315, unicode_33319)
    
    # Assigning a type to the variable 'locations' (line 1081)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1081, 4), 'locations', list_33315)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'orientation' (line 1082)
    orientation_33320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 7), 'orientation')
    # Getting the type of 'None' (line 1082)
    None_33321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 26), 'None')
    # Applying the binary operator 'isnot' (line 1082)
    result_is_not_33322 = python_operator(stypy.reporting.localization.Localization(__file__, 1082, 7), 'isnot', orientation_33320, None_33321)
    
    
    # Getting the type of 'location' (line 1082)
    location_33323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 35), 'location')
    # Getting the type of 'None' (line 1082)
    None_33324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 51), 'None')
    # Applying the binary operator 'isnot' (line 1082)
    result_is_not_33325 = python_operator(stypy.reporting.localization.Localization(__file__, 1082, 35), 'isnot', location_33323, None_33324)
    
    # Applying the binary operator 'and' (line 1082)
    result_and_keyword_33326 = python_operator(stypy.reporting.localization.Localization(__file__, 1082, 7), 'and', result_is_not_33322, result_is_not_33325)
    
    # Testing the type of an if condition (line 1082)
    if_condition_33327 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1082, 4), result_and_keyword_33326)
    # Assigning a type to the variable 'if_condition_33327' (line 1082)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1082, 4), 'if_condition_33327', if_condition_33327)
    # SSA begins for if statement (line 1082)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1083):
    
    # Assigning a Call to a Name (line 1083):
    
    # Call to format(...): (line 1083)
    # Processing the call arguments (line 1083)
    
    # Call to join(...): (line 1085)
    # Processing the call arguments (line 1085)
    # Getting the type of 'locations' (line 1085)
    locations_33332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 38), 'locations', False)
    # Processing the call keyword arguments (line 1085)
    kwargs_33333 = {}
    unicode_33330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1085, 28), 'unicode', u', ')
    # Obtaining the member 'join' of a type (line 1085)
    join_33331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 28), unicode_33330, 'join')
    # Calling join(args, kwargs) (line 1085)
    join_call_result_33334 = invoke(stypy.reporting.localization.Localization(__file__, 1085, 28), join_33331, *[locations_33332], **kwargs_33333)
    
    # Processing the call keyword arguments (line 1083)
    kwargs_33335 = {}
    unicode_33328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 15), 'unicode', u'position and orientation are mutually exclusive. Consider setting the position to any of {0}')
    # Obtaining the member 'format' of a type (line 1083)
    format_33329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1083, 15), unicode_33328, 'format')
    # Calling format(args, kwargs) (line 1083)
    format_call_result_33336 = invoke(stypy.reporting.localization.Localization(__file__, 1083, 15), format_33329, *[join_call_result_33334], **kwargs_33335)
    
    # Assigning a type to the variable 'msg' (line 1083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1083, 8), 'msg', format_call_result_33336)
    
    # Call to TypeError(...): (line 1086)
    # Processing the call arguments (line 1086)
    # Getting the type of 'msg' (line 1086)
    msg_33338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 24), 'msg', False)
    # Processing the call keyword arguments (line 1086)
    kwargs_33339 = {}
    # Getting the type of 'TypeError' (line 1086)
    TypeError_33337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1086)
    TypeError_call_result_33340 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 14), TypeError_33337, *[msg_33338], **kwargs_33339)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1086, 8), TypeError_call_result_33340, 'raise parameter', BaseException)
    # SSA join for if statement (line 1082)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'location' (line 1089)
    location_33341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 7), 'location')
    # Getting the type of 'None' (line 1089)
    None_33342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 19), 'None')
    # Applying the binary operator 'is' (line 1089)
    result_is__33343 = python_operator(stypy.reporting.localization.Localization(__file__, 1089, 7), 'is', location_33341, None_33342)
    
    
    # Getting the type of 'orientation' (line 1089)
    orientation_33344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 28), 'orientation')
    # Getting the type of 'None' (line 1089)
    None_33345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 43), 'None')
    # Applying the binary operator 'is' (line 1089)
    result_is__33346 = python_operator(stypy.reporting.localization.Localization(__file__, 1089, 28), 'is', orientation_33344, None_33345)
    
    # Applying the binary operator 'and' (line 1089)
    result_and_keyword_33347 = python_operator(stypy.reporting.localization.Localization(__file__, 1089, 7), 'and', result_is__33343, result_is__33346)
    
    # Testing the type of an if condition (line 1089)
    if_condition_33348 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1089, 4), result_and_keyword_33347)
    # Assigning a type to the variable 'if_condition_33348' (line 1089)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 4), 'if_condition_33348', if_condition_33348)
    # SSA begins for if statement (line 1089)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 1090):
    
    # Assigning a Str to a Name (line 1090):
    unicode_33349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 19), 'unicode', u'right')
    # Assigning a type to the variable 'location' (line 1090)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'location', unicode_33349)
    # SSA join for if statement (line 1089)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1094)
    # Getting the type of 'location' (line 1094)
    location_33350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 7), 'location')
    # Getting the type of 'None' (line 1094)
    None_33351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 19), 'None')
    
    (may_be_33352, more_types_in_union_33353) = may_be_none(location_33350, None_33351)

    if may_be_33352:

        if more_types_in_union_33353:
            # Runtime conditional SSA (line 1094)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a IfExp to a Name (line 1095):
        
        # Assigning a IfExp to a Name (line 1095):
        
        
        # Getting the type of 'orientation' (line 1095)
        orientation_33354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 30), 'orientation')
        unicode_33355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 45), 'unicode', u'vertical')
        # Applying the binary operator '==' (line 1095)
        result_eq_33356 = python_operator(stypy.reporting.localization.Localization(__file__, 1095, 30), '==', orientation_33354, unicode_33355)
        
        # Testing the type of an if expression (line 1095)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1095, 19), result_eq_33356)
        # SSA begins for if expression (line 1095)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        unicode_33357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 19), 'unicode', u'right')
        # SSA branch for the else part of an if expression (line 1095)
        module_type_store.open_ssa_branch('if expression else')
        unicode_33358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 61), 'unicode', u'bottom')
        # SSA join for if expression (line 1095)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_33359 = union_type.UnionType.add(unicode_33357, unicode_33358)
        
        # Assigning a type to the variable 'location' (line 1095)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1095, 8), 'location', if_exp_33359)

        if more_types_in_union_33353:
            # SSA join for if statement (line 1094)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'location' (line 1097)
    location_33360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 7), 'location')
    # Getting the type of 'locations' (line 1097)
    locations_33361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 23), 'locations')
    # Applying the binary operator 'notin' (line 1097)
    result_contains_33362 = python_operator(stypy.reporting.localization.Localization(__file__, 1097, 7), 'notin', location_33360, locations_33361)
    
    # Testing the type of an if condition (line 1097)
    if_condition_33363 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1097, 4), result_contains_33362)
    # Assigning a type to the variable 'if_condition_33363' (line 1097)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1097, 4), 'if_condition_33363', if_condition_33363)
    # SSA begins for if statement (line 1097)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1098)
    # Processing the call arguments (line 1098)
    unicode_33365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1098, 25), 'unicode', u'Invalid colorbar location. Must be one of %s')
    
    # Call to join(...): (line 1099)
    # Processing the call arguments (line 1099)
    # Getting the type of 'locations' (line 1099)
    locations_33368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 45), 'locations', False)
    # Processing the call keyword arguments (line 1099)
    kwargs_33369 = {}
    unicode_33366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1099, 35), 'unicode', u', ')
    # Obtaining the member 'join' of a type (line 1099)
    join_33367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 35), unicode_33366, 'join')
    # Calling join(args, kwargs) (line 1099)
    join_call_result_33370 = invoke(stypy.reporting.localization.Localization(__file__, 1099, 35), join_33367, *[locations_33368], **kwargs_33369)
    
    # Applying the binary operator '%' (line 1098)
    result_mod_33371 = python_operator(stypy.reporting.localization.Localization(__file__, 1098, 25), '%', unicode_33365, join_call_result_33370)
    
    # Processing the call keyword arguments (line 1098)
    kwargs_33372 = {}
    # Getting the type of 'ValueError' (line 1098)
    ValueError_33364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1098)
    ValueError_call_result_33373 = invoke(stypy.reporting.localization.Localization(__file__, 1098, 14), ValueError_33364, *[result_mod_33371], **kwargs_33372)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1098, 8), ValueError_call_result_33373, 'raise parameter', BaseException)
    # SSA join for if statement (line 1097)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Dict to a Name (line 1101):
    
    # Assigning a Dict to a Name (line 1101):
    
    # Obtaining an instance of the builtin type 'dict' (line 1101)
    dict_33374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 32), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1101)
    # Adding element type (key, value) (line 1101)
    unicode_33375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 33), 'unicode', u'left')
    
    # Obtaining an instance of the builtin type 'dict' (line 1101)
    dict_33376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 43), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1101)
    # Adding element type (key, value) (line 1101)
    unicode_33377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 44), 'unicode', u'anchor')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1101)
    tuple_33378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 55), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1101)
    # Adding element type (line 1101)
    float_33379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 55), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1101, 55), tuple_33378, float_33379)
    # Adding element type (line 1101)
    float_33380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 60), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1101, 55), tuple_33378, float_33380)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1101, 43), dict_33376, (unicode_33377, tuple_33378))
    # Adding element type (key, value) (line 1101)
    unicode_33381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, 44), 'unicode', u'panchor')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1102)
    tuple_33382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, 56), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1102)
    # Adding element type (line 1102)
    float_33383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, 56), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1102, 56), tuple_33382, float_33383)
    # Adding element type (line 1102)
    float_33384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, 61), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1102, 56), tuple_33382, float_33384)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1101, 43), dict_33376, (unicode_33381, tuple_33382))
    # Adding element type (key, value) (line 1101)
    unicode_33385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1103, 44), 'unicode', u'pad')
    float_33386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1103, 51), 'float')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1101, 43), dict_33376, (unicode_33385, float_33386))
    # Adding element type (key, value) (line 1101)
    unicode_33387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1104, 44), 'unicode', u'orientation')
    unicode_33388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1104, 59), 'unicode', u'vertical')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1101, 43), dict_33376, (unicode_33387, unicode_33388))
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1101, 32), dict_33374, (unicode_33375, dict_33376))
    # Adding element type (key, value) (line 1101)
    unicode_33389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1105, 33), 'unicode', u'right')
    
    # Obtaining an instance of the builtin type 'dict' (line 1105)
    dict_33390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1105, 43), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1105)
    # Adding element type (key, value) (line 1105)
    unicode_33391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1105, 44), 'unicode', u'anchor')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1105)
    tuple_33392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1105, 55), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1105)
    # Adding element type (line 1105)
    float_33393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1105, 55), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1105, 55), tuple_33392, float_33393)
    # Adding element type (line 1105)
    float_33394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1105, 60), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1105, 55), tuple_33392, float_33394)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1105, 43), dict_33390, (unicode_33391, tuple_33392))
    # Adding element type (key, value) (line 1105)
    unicode_33395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1106, 44), 'unicode', u'panchor')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1106)
    tuple_33396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1106, 56), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1106)
    # Adding element type (line 1106)
    float_33397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1106, 56), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1106, 56), tuple_33396, float_33397)
    # Adding element type (line 1106)
    float_33398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1106, 61), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1106, 56), tuple_33396, float_33398)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1105, 43), dict_33390, (unicode_33395, tuple_33396))
    # Adding element type (key, value) (line 1105)
    unicode_33399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 44), 'unicode', u'pad')
    float_33400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 51), 'float')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1105, 43), dict_33390, (unicode_33399, float_33400))
    # Adding element type (key, value) (line 1105)
    unicode_33401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1108, 44), 'unicode', u'orientation')
    unicode_33402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1108, 59), 'unicode', u'vertical')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1105, 43), dict_33390, (unicode_33401, unicode_33402))
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1101, 32), dict_33374, (unicode_33389, dict_33390))
    # Adding element type (key, value) (line 1101)
    unicode_33403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 33), 'unicode', u'top')
    
    # Obtaining an instance of the builtin type 'dict' (line 1109)
    dict_33404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 43), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1109)
    # Adding element type (key, value) (line 1109)
    unicode_33405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 44), 'unicode', u'anchor')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1109)
    tuple_33406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 55), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1109)
    # Adding element type (line 1109)
    float_33407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 55), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1109, 55), tuple_33406, float_33407)
    # Adding element type (line 1109)
    float_33408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 60), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1109, 55), tuple_33406, float_33408)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1109, 43), dict_33404, (unicode_33405, tuple_33406))
    # Adding element type (key, value) (line 1109)
    unicode_33409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1110, 44), 'unicode', u'panchor')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1110)
    tuple_33410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1110, 56), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1110)
    # Adding element type (line 1110)
    float_33411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1110, 56), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1110, 56), tuple_33410, float_33411)
    # Adding element type (line 1110)
    float_33412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1110, 61), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1110, 56), tuple_33410, float_33412)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1109, 43), dict_33404, (unicode_33409, tuple_33410))
    # Adding element type (key, value) (line 1109)
    unicode_33413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1111, 44), 'unicode', u'pad')
    float_33414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1111, 51), 'float')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1109, 43), dict_33404, (unicode_33413, float_33414))
    # Adding element type (key, value) (line 1109)
    unicode_33415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1112, 44), 'unicode', u'orientation')
    unicode_33416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1112, 59), 'unicode', u'horizontal')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1109, 43), dict_33404, (unicode_33415, unicode_33416))
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1101, 32), dict_33374, (unicode_33403, dict_33404))
    # Adding element type (key, value) (line 1101)
    unicode_33417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, 33), 'unicode', u'bottom')
    
    # Obtaining an instance of the builtin type 'dict' (line 1113)
    dict_33418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, 43), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1113)
    # Adding element type (key, value) (line 1113)
    unicode_33419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, 44), 'unicode', u'anchor')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1113)
    tuple_33420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, 55), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1113)
    # Adding element type (line 1113)
    float_33421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, 55), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1113, 55), tuple_33420, float_33421)
    # Adding element type (line 1113)
    float_33422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, 60), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1113, 55), tuple_33420, float_33422)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1113, 43), dict_33418, (unicode_33419, tuple_33420))
    # Adding element type (key, value) (line 1113)
    unicode_33423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, 44), 'unicode', u'panchor')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1114)
    tuple_33424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, 56), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1114)
    # Adding element type (line 1114)
    float_33425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, 56), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1114, 56), tuple_33424, float_33425)
    # Adding element type (line 1114)
    float_33426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, 61), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1114, 56), tuple_33424, float_33426)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1113, 43), dict_33418, (unicode_33423, tuple_33424))
    # Adding element type (key, value) (line 1113)
    unicode_33427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1115, 44), 'unicode', u'pad')
    float_33428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1115, 51), 'float')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1113, 43), dict_33418, (unicode_33427, float_33428))
    # Adding element type (key, value) (line 1113)
    unicode_33429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1116, 44), 'unicode', u'orientation')
    unicode_33430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1116, 59), 'unicode', u'horizontal')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1113, 43), dict_33418, (unicode_33429, unicode_33430))
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1101, 32), dict_33374, (unicode_33417, dict_33418))
    
    # Assigning a type to the variable 'default_location_settings' (line 1101)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1101, 4), 'default_location_settings', dict_33374)
    
    # Assigning a Subscript to a Name (line 1119):
    
    # Assigning a Subscript to a Name (line 1119):
    
    # Obtaining the type of the subscript
    # Getting the type of 'location' (line 1119)
    location_33431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 45), 'location')
    # Getting the type of 'default_location_settings' (line 1119)
    default_location_settings_33432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 19), 'default_location_settings')
    # Obtaining the member '__getitem__' of a type (line 1119)
    getitem___33433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 19), default_location_settings_33432, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1119)
    subscript_call_result_33434 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 19), getitem___33433, location_33431)
    
    # Assigning a type to the variable 'loc_settings' (line 1119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 4), 'loc_settings', subscript_call_result_33434)
    
    # Assigning a Subscript to a Subscript (line 1123):
    
    # Assigning a Subscript to a Subscript (line 1123):
    
    # Obtaining the type of the subscript
    unicode_33435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 37), 'unicode', u'orientation')
    # Getting the type of 'loc_settings' (line 1123)
    loc_settings_33436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 24), 'loc_settings')
    # Obtaining the member '__getitem__' of a type (line 1123)
    getitem___33437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 24), loc_settings_33436, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1123)
    subscript_call_result_33438 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 24), getitem___33437, unicode_33435)
    
    # Getting the type of 'kw' (line 1123)
    kw_33439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 4), 'kw')
    unicode_33440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 7), 'unicode', u'orientation')
    # Storing an element on a container (line 1123)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1123, 4), kw_33439, (unicode_33440, subscript_call_result_33438))
    
    # Assigning a Name to a Subscript (line 1124):
    
    # Assigning a Name to a Subscript (line 1124):
    # Getting the type of 'location' (line 1124)
    location_33441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 25), 'location')
    # Getting the type of 'kw' (line 1124)
    kw_33442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 4), 'kw')
    unicode_33443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 7), 'unicode', u'ticklocation')
    # Storing an element on a container (line 1124)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1124, 4), kw_33442, (unicode_33443, location_33441))
    
    # Assigning a Call to a Name (line 1126):
    
    # Assigning a Call to a Name (line 1126):
    
    # Call to pop(...): (line 1126)
    # Processing the call arguments (line 1126)
    unicode_33446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 20), 'unicode', u'anchor')
    
    # Obtaining the type of the subscript
    unicode_33447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 43), 'unicode', u'anchor')
    # Getting the type of 'loc_settings' (line 1126)
    loc_settings_33448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 30), 'loc_settings', False)
    # Obtaining the member '__getitem__' of a type (line 1126)
    getitem___33449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 30), loc_settings_33448, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1126)
    subscript_call_result_33450 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 30), getitem___33449, unicode_33447)
    
    # Processing the call keyword arguments (line 1126)
    kwargs_33451 = {}
    # Getting the type of 'kw' (line 1126)
    kw_33444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 13), 'kw', False)
    # Obtaining the member 'pop' of a type (line 1126)
    pop_33445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 13), kw_33444, 'pop')
    # Calling pop(args, kwargs) (line 1126)
    pop_call_result_33452 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 13), pop_33445, *[unicode_33446, subscript_call_result_33450], **kwargs_33451)
    
    # Assigning a type to the variable 'anchor' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'anchor', pop_call_result_33452)
    
    # Assigning a Call to a Name (line 1127):
    
    # Assigning a Call to a Name (line 1127):
    
    # Call to pop(...): (line 1127)
    # Processing the call arguments (line 1127)
    unicode_33455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 27), 'unicode', u'panchor')
    
    # Obtaining the type of the subscript
    unicode_33456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 51), 'unicode', u'panchor')
    # Getting the type of 'loc_settings' (line 1127)
    loc_settings_33457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 38), 'loc_settings', False)
    # Obtaining the member '__getitem__' of a type (line 1127)
    getitem___33458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1127, 38), loc_settings_33457, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1127)
    subscript_call_result_33459 = invoke(stypy.reporting.localization.Localization(__file__, 1127, 38), getitem___33458, unicode_33456)
    
    # Processing the call keyword arguments (line 1127)
    kwargs_33460 = {}
    # Getting the type of 'kw' (line 1127)
    kw_33453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 20), 'kw', False)
    # Obtaining the member 'pop' of a type (line 1127)
    pop_33454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1127, 20), kw_33453, 'pop')
    # Calling pop(args, kwargs) (line 1127)
    pop_call_result_33461 = invoke(stypy.reporting.localization.Localization(__file__, 1127, 20), pop_33454, *[unicode_33455, subscript_call_result_33459], **kwargs_33460)
    
    # Assigning a type to the variable 'parent_anchor' (line 1127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 4), 'parent_anchor', pop_call_result_33461)
    
    # Assigning a Call to a Name (line 1128):
    
    # Assigning a Call to a Name (line 1128):
    
    # Call to pop(...): (line 1128)
    # Processing the call arguments (line 1128)
    unicode_33464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 17), 'unicode', u'pad')
    
    # Obtaining the type of the subscript
    unicode_33465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 37), 'unicode', u'pad')
    # Getting the type of 'loc_settings' (line 1128)
    loc_settings_33466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 24), 'loc_settings', False)
    # Obtaining the member '__getitem__' of a type (line 1128)
    getitem___33467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 24), loc_settings_33466, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1128)
    subscript_call_result_33468 = invoke(stypy.reporting.localization.Localization(__file__, 1128, 24), getitem___33467, unicode_33465)
    
    # Processing the call keyword arguments (line 1128)
    kwargs_33469 = {}
    # Getting the type of 'kw' (line 1128)
    kw_33462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 10), 'kw', False)
    # Obtaining the member 'pop' of a type (line 1128)
    pop_33463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 10), kw_33462, 'pop')
    # Calling pop(args, kwargs) (line 1128)
    pop_call_result_33470 = invoke(stypy.reporting.localization.Localization(__file__, 1128, 10), pop_33463, *[unicode_33464, subscript_call_result_33468], **kwargs_33469)
    
    # Assigning a type to the variable 'pad' (line 1128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 4), 'pad', pop_call_result_33470)
    
    # Assigning a Call to a Name (line 1133):
    
    # Assigning a Call to a Name (line 1133):
    
    # Call to ravel(...): (line 1133)
    # Processing the call keyword arguments (line 1133)
    kwargs_33477 = {}
    
    # Call to atleast_1d(...): (line 1133)
    # Processing the call arguments (line 1133)
    # Getting the type of 'parents' (line 1133)
    parents_33473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 28), 'parents', False)
    # Processing the call keyword arguments (line 1133)
    kwargs_33474 = {}
    # Getting the type of 'np' (line 1133)
    np_33471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 14), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 1133)
    atleast_1d_33472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 14), np_33471, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 1133)
    atleast_1d_call_result_33475 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 14), atleast_1d_33472, *[parents_33473], **kwargs_33474)
    
    # Obtaining the member 'ravel' of a type (line 1133)
    ravel_33476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 14), atleast_1d_call_result_33475, 'ravel')
    # Calling ravel(args, kwargs) (line 1133)
    ravel_call_result_33478 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 14), ravel_33476, *[], **kwargs_33477)
    
    # Assigning a type to the variable 'parents' (line 1133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1133, 4), 'parents', ravel_call_result_33478)
    
    # Assigning a Call to a Name (line 1135):
    
    # Assigning a Call to a Name (line 1135):
    
    # Call to get_figure(...): (line 1135)
    # Processing the call keyword arguments (line 1135)
    kwargs_33484 = {}
    
    # Obtaining the type of the subscript
    int_33479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 18), 'int')
    # Getting the type of 'parents' (line 1135)
    parents_33480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 10), 'parents', False)
    # Obtaining the member '__getitem__' of a type (line 1135)
    getitem___33481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1135, 10), parents_33480, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1135)
    subscript_call_result_33482 = invoke(stypy.reporting.localization.Localization(__file__, 1135, 10), getitem___33481, int_33479)
    
    # Obtaining the member 'get_figure' of a type (line 1135)
    get_figure_33483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1135, 10), subscript_call_result_33482, 'get_figure')
    # Calling get_figure(args, kwargs) (line 1135)
    get_figure_call_result_33485 = invoke(stypy.reporting.localization.Localization(__file__, 1135, 10), get_figure_33483, *[], **kwargs_33484)
    
    # Assigning a type to the variable 'fig' (line 1135)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 4), 'fig', get_figure_call_result_33485)
    
    
    
    # Call to all(...): (line 1136)
    # Processing the call arguments (line 1136)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 1136, 15, True)
    # Calculating comprehension expression
    # Getting the type of 'parents' (line 1136)
    parents_33493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 48), 'parents', False)
    comprehension_33494 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1136, 15), parents_33493)
    # Assigning a type to the variable 'ax' (line 1136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 15), 'ax', comprehension_33494)
    
    # Getting the type of 'fig' (line 1136)
    fig_33487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 15), 'fig', False)
    
    # Call to get_figure(...): (line 1136)
    # Processing the call keyword arguments (line 1136)
    kwargs_33490 = {}
    # Getting the type of 'ax' (line 1136)
    ax_33488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 22), 'ax', False)
    # Obtaining the member 'get_figure' of a type (line 1136)
    get_figure_33489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 22), ax_33488, 'get_figure')
    # Calling get_figure(args, kwargs) (line 1136)
    get_figure_call_result_33491 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 22), get_figure_33489, *[], **kwargs_33490)
    
    # Applying the binary operator 'is' (line 1136)
    result_is__33492 = python_operator(stypy.reporting.localization.Localization(__file__, 1136, 15), 'is', fig_33487, get_figure_call_result_33491)
    
    list_33495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 15), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1136, 15), list_33495, result_is__33492)
    # Processing the call keyword arguments (line 1136)
    kwargs_33496 = {}
    # Getting the type of 'all' (line 1136)
    all_33486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 11), 'all', False)
    # Calling all(args, kwargs) (line 1136)
    all_call_result_33497 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 11), all_33486, *[list_33495], **kwargs_33496)
    
    # Applying the 'not' unary operator (line 1136)
    result_not__33498 = python_operator(stypy.reporting.localization.Localization(__file__, 1136, 7), 'not', all_call_result_33497)
    
    # Testing the type of an if condition (line 1136)
    if_condition_33499 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1136, 4), result_not__33498)
    # Assigning a type to the variable 'if_condition_33499' (line 1136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 4), 'if_condition_33499', if_condition_33499)
    # SSA begins for if statement (line 1136)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1137)
    # Processing the call arguments (line 1137)
    unicode_33501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1137, 25), 'unicode', u'Unable to create a colorbar axes as not all parents share the same figure.')
    # Processing the call keyword arguments (line 1137)
    kwargs_33502 = {}
    # Getting the type of 'ValueError' (line 1137)
    ValueError_33500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1137)
    ValueError_call_result_33503 = invoke(stypy.reporting.localization.Localization(__file__, 1137, 14), ValueError_33500, *[unicode_33501], **kwargs_33502)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1137, 8), ValueError_call_result_33503, 'raise parameter', BaseException)
    # SSA join for if statement (line 1136)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1141):
    
    # Assigning a Call to a Name (line 1141):
    
    # Call to union(...): (line 1141)
    # Processing the call arguments (line 1141)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'parents' (line 1142)
    parents_33516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 59), 'parents', False)
    comprehension_33517 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1142, 9), parents_33516)
    # Assigning a type to the variable 'ax' (line 1142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1142, 9), 'ax', comprehension_33517)
    
    # Call to frozen(...): (line 1142)
    # Processing the call keyword arguments (line 1142)
    kwargs_33514 = {}
    
    # Call to get_position(...): (line 1142)
    # Processing the call keyword arguments (line 1142)
    # Getting the type of 'True' (line 1142)
    True_33509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 34), 'True', False)
    keyword_33510 = True_33509
    kwargs_33511 = {'original': keyword_33510}
    # Getting the type of 'ax' (line 1142)
    ax_33507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 9), 'ax', False)
    # Obtaining the member 'get_position' of a type (line 1142)
    get_position_33508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1142, 9), ax_33507, 'get_position')
    # Calling get_position(args, kwargs) (line 1142)
    get_position_call_result_33512 = invoke(stypy.reporting.localization.Localization(__file__, 1142, 9), get_position_33508, *[], **kwargs_33511)
    
    # Obtaining the member 'frozen' of a type (line 1142)
    frozen_33513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1142, 9), get_position_call_result_33512, 'frozen')
    # Calling frozen(args, kwargs) (line 1142)
    frozen_call_result_33515 = invoke(stypy.reporting.localization.Localization(__file__, 1142, 9), frozen_33513, *[], **kwargs_33514)
    
    list_33518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1142, 9), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1142, 9), list_33518, frozen_call_result_33515)
    # Processing the call keyword arguments (line 1141)
    kwargs_33519 = {}
    # Getting the type of 'mtransforms' (line 1141)
    mtransforms_33504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 19), 'mtransforms', False)
    # Obtaining the member 'Bbox' of a type (line 1141)
    Bbox_33505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1141, 19), mtransforms_33504, 'Bbox')
    # Obtaining the member 'union' of a type (line 1141)
    union_33506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1141, 19), Bbox_33505, 'union')
    # Calling union(args, kwargs) (line 1141)
    union_call_result_33520 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 19), union_33506, *[list_33518], **kwargs_33519)
    
    # Assigning a type to the variable 'parents_bbox' (line 1141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 4), 'parents_bbox', union_call_result_33520)
    
    # Assigning a Name to a Name (line 1144):
    
    # Assigning a Name to a Name (line 1144):
    # Getting the type of 'parents_bbox' (line 1144)
    parents_bbox_33521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 9), 'parents_bbox')
    # Assigning a type to the variable 'pb' (line 1144)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 4), 'pb', parents_bbox_33521)
    
    
    # Getting the type of 'location' (line 1145)
    location_33522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 7), 'location')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1145)
    tuple_33523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1145)
    # Adding element type (line 1145)
    unicode_33524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, 20), 'unicode', u'left')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1145, 20), tuple_33523, unicode_33524)
    # Adding element type (line 1145)
    unicode_33525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, 28), 'unicode', u'right')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1145, 20), tuple_33523, unicode_33525)
    
    # Applying the binary operator 'in' (line 1145)
    result_contains_33526 = python_operator(stypy.reporting.localization.Localization(__file__, 1145, 7), 'in', location_33522, tuple_33523)
    
    # Testing the type of an if condition (line 1145)
    if_condition_33527 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1145, 4), result_contains_33526)
    # Assigning a type to the variable 'if_condition_33527' (line 1145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1145, 4), 'if_condition_33527', if_condition_33527)
    # SSA begins for if statement (line 1145)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'location' (line 1146)
    location_33528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 11), 'location')
    unicode_33529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1146, 23), 'unicode', u'left')
    # Applying the binary operator '==' (line 1146)
    result_eq_33530 = python_operator(stypy.reporting.localization.Localization(__file__, 1146, 11), '==', location_33528, unicode_33529)
    
    # Testing the type of an if condition (line 1146)
    if_condition_33531 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1146, 8), result_eq_33530)
    # Assigning a type to the variable 'if_condition_33531' (line 1146)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1146, 8), 'if_condition_33531', if_condition_33531)
    # SSA begins for if statement (line 1146)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1147):
    
    # Assigning a Call to a Name:
    
    # Call to splitx(...): (line 1147)
    # Processing the call arguments (line 1147)
    # Getting the type of 'fraction' (line 1147)
    fraction_33534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 37), 'fraction', False)
    # Getting the type of 'fraction' (line 1147)
    fraction_33535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 47), 'fraction', False)
    # Getting the type of 'pad' (line 1147)
    pad_33536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 58), 'pad', False)
    # Applying the binary operator '+' (line 1147)
    result_add_33537 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 47), '+', fraction_33535, pad_33536)
    
    # Processing the call keyword arguments (line 1147)
    kwargs_33538 = {}
    # Getting the type of 'pb' (line 1147)
    pb_33532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 27), 'pb', False)
    # Obtaining the member 'splitx' of a type (line 1147)
    splitx_33533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 27), pb_33532, 'splitx')
    # Calling splitx(args, kwargs) (line 1147)
    splitx_call_result_33539 = invoke(stypy.reporting.localization.Localization(__file__, 1147, 27), splitx_33533, *[fraction_33534, result_add_33537], **kwargs_33538)
    
    # Assigning a type to the variable 'call_assignment_30379' (line 1147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 12), 'call_assignment_30379', splitx_call_result_33539)
    
    # Assigning a Call to a Name (line 1147):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_33542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 12), 'int')
    # Processing the call keyword arguments
    kwargs_33543 = {}
    # Getting the type of 'call_assignment_30379' (line 1147)
    call_assignment_30379_33540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 12), 'call_assignment_30379', False)
    # Obtaining the member '__getitem__' of a type (line 1147)
    getitem___33541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 12), call_assignment_30379_33540, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_33544 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___33541, *[int_33542], **kwargs_33543)
    
    # Assigning a type to the variable 'call_assignment_30380' (line 1147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 12), 'call_assignment_30380', getitem___call_result_33544)
    
    # Assigning a Name to a Name (line 1147):
    # Getting the type of 'call_assignment_30380' (line 1147)
    call_assignment_30380_33545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 12), 'call_assignment_30380')
    # Assigning a type to the variable 'pbcb' (line 1147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 12), 'pbcb', call_assignment_30380_33545)
    
    # Assigning a Call to a Name (line 1147):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_33548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 12), 'int')
    # Processing the call keyword arguments
    kwargs_33549 = {}
    # Getting the type of 'call_assignment_30379' (line 1147)
    call_assignment_30379_33546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 12), 'call_assignment_30379', False)
    # Obtaining the member '__getitem__' of a type (line 1147)
    getitem___33547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 12), call_assignment_30379_33546, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_33550 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___33547, *[int_33548], **kwargs_33549)
    
    # Assigning a type to the variable 'call_assignment_30381' (line 1147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 12), 'call_assignment_30381', getitem___call_result_33550)
    
    # Assigning a Name to a Name (line 1147):
    # Getting the type of 'call_assignment_30381' (line 1147)
    call_assignment_30381_33551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 12), 'call_assignment_30381')
    # Assigning a type to the variable '_' (line 1147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 18), '_', call_assignment_30381_33551)
    
    # Assigning a Call to a Name (line 1147):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_33554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 12), 'int')
    # Processing the call keyword arguments
    kwargs_33555 = {}
    # Getting the type of 'call_assignment_30379' (line 1147)
    call_assignment_30379_33552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 12), 'call_assignment_30379', False)
    # Obtaining the member '__getitem__' of a type (line 1147)
    getitem___33553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 12), call_assignment_30379_33552, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_33556 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___33553, *[int_33554], **kwargs_33555)
    
    # Assigning a type to the variable 'call_assignment_30382' (line 1147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 12), 'call_assignment_30382', getitem___call_result_33556)
    
    # Assigning a Name to a Name (line 1147):
    # Getting the type of 'call_assignment_30382' (line 1147)
    call_assignment_30382_33557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 12), 'call_assignment_30382')
    # Assigning a type to the variable 'pb1' (line 1147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 21), 'pb1', call_assignment_30382_33557)
    # SSA branch for the else part of an if statement (line 1146)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 1149):
    
    # Assigning a Call to a Name:
    
    # Call to splitx(...): (line 1149)
    # Processing the call arguments (line 1149)
    int_33560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1149, 37), 'int')
    # Getting the type of 'fraction' (line 1149)
    fraction_33561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 41), 'fraction', False)
    # Applying the binary operator '-' (line 1149)
    result_sub_33562 = python_operator(stypy.reporting.localization.Localization(__file__, 1149, 37), '-', int_33560, fraction_33561)
    
    # Getting the type of 'pad' (line 1149)
    pad_33563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 52), 'pad', False)
    # Applying the binary operator '-' (line 1149)
    result_sub_33564 = python_operator(stypy.reporting.localization.Localization(__file__, 1149, 50), '-', result_sub_33562, pad_33563)
    
    int_33565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1149, 57), 'int')
    # Getting the type of 'fraction' (line 1149)
    fraction_33566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 61), 'fraction', False)
    # Applying the binary operator '-' (line 1149)
    result_sub_33567 = python_operator(stypy.reporting.localization.Localization(__file__, 1149, 57), '-', int_33565, fraction_33566)
    
    # Processing the call keyword arguments (line 1149)
    kwargs_33568 = {}
    # Getting the type of 'pb' (line 1149)
    pb_33558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 27), 'pb', False)
    # Obtaining the member 'splitx' of a type (line 1149)
    splitx_33559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 27), pb_33558, 'splitx')
    # Calling splitx(args, kwargs) (line 1149)
    splitx_call_result_33569 = invoke(stypy.reporting.localization.Localization(__file__, 1149, 27), splitx_33559, *[result_sub_33564, result_sub_33567], **kwargs_33568)
    
    # Assigning a type to the variable 'call_assignment_30383' (line 1149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'call_assignment_30383', splitx_call_result_33569)
    
    # Assigning a Call to a Name (line 1149):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_33572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1149, 12), 'int')
    # Processing the call keyword arguments
    kwargs_33573 = {}
    # Getting the type of 'call_assignment_30383' (line 1149)
    call_assignment_30383_33570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'call_assignment_30383', False)
    # Obtaining the member '__getitem__' of a type (line 1149)
    getitem___33571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 12), call_assignment_30383_33570, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_33574 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___33571, *[int_33572], **kwargs_33573)
    
    # Assigning a type to the variable 'call_assignment_30384' (line 1149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'call_assignment_30384', getitem___call_result_33574)
    
    # Assigning a Name to a Name (line 1149):
    # Getting the type of 'call_assignment_30384' (line 1149)
    call_assignment_30384_33575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'call_assignment_30384')
    # Assigning a type to the variable 'pb1' (line 1149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'pb1', call_assignment_30384_33575)
    
    # Assigning a Call to a Name (line 1149):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_33578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1149, 12), 'int')
    # Processing the call keyword arguments
    kwargs_33579 = {}
    # Getting the type of 'call_assignment_30383' (line 1149)
    call_assignment_30383_33576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'call_assignment_30383', False)
    # Obtaining the member '__getitem__' of a type (line 1149)
    getitem___33577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 12), call_assignment_30383_33576, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_33580 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___33577, *[int_33578], **kwargs_33579)
    
    # Assigning a type to the variable 'call_assignment_30385' (line 1149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'call_assignment_30385', getitem___call_result_33580)
    
    # Assigning a Name to a Name (line 1149):
    # Getting the type of 'call_assignment_30385' (line 1149)
    call_assignment_30385_33581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'call_assignment_30385')
    # Assigning a type to the variable '_' (line 1149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 17), '_', call_assignment_30385_33581)
    
    # Assigning a Call to a Name (line 1149):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_33584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1149, 12), 'int')
    # Processing the call keyword arguments
    kwargs_33585 = {}
    # Getting the type of 'call_assignment_30383' (line 1149)
    call_assignment_30383_33582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'call_assignment_30383', False)
    # Obtaining the member '__getitem__' of a type (line 1149)
    getitem___33583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 12), call_assignment_30383_33582, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_33586 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___33583, *[int_33584], **kwargs_33585)
    
    # Assigning a type to the variable 'call_assignment_30386' (line 1149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'call_assignment_30386', getitem___call_result_33586)
    
    # Assigning a Name to a Name (line 1149):
    # Getting the type of 'call_assignment_30386' (line 1149)
    call_assignment_30386_33587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'call_assignment_30386')
    # Assigning a type to the variable 'pbcb' (line 1149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 20), 'pbcb', call_assignment_30386_33587)
    # SSA join for if statement (line 1146)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1150):
    
    # Assigning a Call to a Name (line 1150):
    
    # Call to anchored(...): (line 1150)
    # Processing the call arguments (line 1150)
    # Getting the type of 'anchor' (line 1150)
    anchor_33595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 49), 'anchor', False)
    # Getting the type of 'pbcb' (line 1150)
    pbcb_33596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 57), 'pbcb', False)
    # Processing the call keyword arguments (line 1150)
    kwargs_33597 = {}
    
    # Call to shrunk(...): (line 1150)
    # Processing the call arguments (line 1150)
    float_33590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 27), 'float')
    # Getting the type of 'shrink' (line 1150)
    shrink_33591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 32), 'shrink', False)
    # Processing the call keyword arguments (line 1150)
    kwargs_33592 = {}
    # Getting the type of 'pbcb' (line 1150)
    pbcb_33588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 15), 'pbcb', False)
    # Obtaining the member 'shrunk' of a type (line 1150)
    shrunk_33589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 15), pbcb_33588, 'shrunk')
    # Calling shrunk(args, kwargs) (line 1150)
    shrunk_call_result_33593 = invoke(stypy.reporting.localization.Localization(__file__, 1150, 15), shrunk_33589, *[float_33590, shrink_33591], **kwargs_33592)
    
    # Obtaining the member 'anchored' of a type (line 1150)
    anchored_33594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 15), shrunk_call_result_33593, 'anchored')
    # Calling anchored(args, kwargs) (line 1150)
    anchored_call_result_33598 = invoke(stypy.reporting.localization.Localization(__file__, 1150, 15), anchored_33594, *[anchor_33595, pbcb_33596], **kwargs_33597)
    
    # Assigning a type to the variable 'pbcb' (line 1150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 8), 'pbcb', anchored_call_result_33598)
    # SSA branch for the else part of an if statement (line 1145)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'location' (line 1152)
    location_33599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 11), 'location')
    unicode_33600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1152, 23), 'unicode', u'bottom')
    # Applying the binary operator '==' (line 1152)
    result_eq_33601 = python_operator(stypy.reporting.localization.Localization(__file__, 1152, 11), '==', location_33599, unicode_33600)
    
    # Testing the type of an if condition (line 1152)
    if_condition_33602 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1152, 8), result_eq_33601)
    # Assigning a type to the variable 'if_condition_33602' (line 1152)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1152, 8), 'if_condition_33602', if_condition_33602)
    # SSA begins for if statement (line 1152)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1153):
    
    # Assigning a Call to a Name:
    
    # Call to splity(...): (line 1153)
    # Processing the call arguments (line 1153)
    # Getting the type of 'fraction' (line 1153)
    fraction_33605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 37), 'fraction', False)
    # Getting the type of 'fraction' (line 1153)
    fraction_33606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 47), 'fraction', False)
    # Getting the type of 'pad' (line 1153)
    pad_33607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 58), 'pad', False)
    # Applying the binary operator '+' (line 1153)
    result_add_33608 = python_operator(stypy.reporting.localization.Localization(__file__, 1153, 47), '+', fraction_33606, pad_33607)
    
    # Processing the call keyword arguments (line 1153)
    kwargs_33609 = {}
    # Getting the type of 'pb' (line 1153)
    pb_33603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 27), 'pb', False)
    # Obtaining the member 'splity' of a type (line 1153)
    splity_33604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 27), pb_33603, 'splity')
    # Calling splity(args, kwargs) (line 1153)
    splity_call_result_33610 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 27), splity_33604, *[fraction_33605, result_add_33608], **kwargs_33609)
    
    # Assigning a type to the variable 'call_assignment_30387' (line 1153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 12), 'call_assignment_30387', splity_call_result_33610)
    
    # Assigning a Call to a Name (line 1153):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_33613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 12), 'int')
    # Processing the call keyword arguments
    kwargs_33614 = {}
    # Getting the type of 'call_assignment_30387' (line 1153)
    call_assignment_30387_33611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 12), 'call_assignment_30387', False)
    # Obtaining the member '__getitem__' of a type (line 1153)
    getitem___33612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 12), call_assignment_30387_33611, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_33615 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___33612, *[int_33613], **kwargs_33614)
    
    # Assigning a type to the variable 'call_assignment_30388' (line 1153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 12), 'call_assignment_30388', getitem___call_result_33615)
    
    # Assigning a Name to a Name (line 1153):
    # Getting the type of 'call_assignment_30388' (line 1153)
    call_assignment_30388_33616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 12), 'call_assignment_30388')
    # Assigning a type to the variable 'pbcb' (line 1153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 12), 'pbcb', call_assignment_30388_33616)
    
    # Assigning a Call to a Name (line 1153):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_33619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 12), 'int')
    # Processing the call keyword arguments
    kwargs_33620 = {}
    # Getting the type of 'call_assignment_30387' (line 1153)
    call_assignment_30387_33617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 12), 'call_assignment_30387', False)
    # Obtaining the member '__getitem__' of a type (line 1153)
    getitem___33618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 12), call_assignment_30387_33617, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_33621 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___33618, *[int_33619], **kwargs_33620)
    
    # Assigning a type to the variable 'call_assignment_30389' (line 1153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 12), 'call_assignment_30389', getitem___call_result_33621)
    
    # Assigning a Name to a Name (line 1153):
    # Getting the type of 'call_assignment_30389' (line 1153)
    call_assignment_30389_33622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 12), 'call_assignment_30389')
    # Assigning a type to the variable '_' (line 1153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 18), '_', call_assignment_30389_33622)
    
    # Assigning a Call to a Name (line 1153):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_33625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 12), 'int')
    # Processing the call keyword arguments
    kwargs_33626 = {}
    # Getting the type of 'call_assignment_30387' (line 1153)
    call_assignment_30387_33623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 12), 'call_assignment_30387', False)
    # Obtaining the member '__getitem__' of a type (line 1153)
    getitem___33624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 12), call_assignment_30387_33623, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_33627 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___33624, *[int_33625], **kwargs_33626)
    
    # Assigning a type to the variable 'call_assignment_30390' (line 1153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 12), 'call_assignment_30390', getitem___call_result_33627)
    
    # Assigning a Name to a Name (line 1153):
    # Getting the type of 'call_assignment_30390' (line 1153)
    call_assignment_30390_33628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 12), 'call_assignment_30390')
    # Assigning a type to the variable 'pb1' (line 1153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 21), 'pb1', call_assignment_30390_33628)
    # SSA branch for the else part of an if statement (line 1152)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 1155):
    
    # Assigning a Call to a Name:
    
    # Call to splity(...): (line 1155)
    # Processing the call arguments (line 1155)
    int_33631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1155, 37), 'int')
    # Getting the type of 'fraction' (line 1155)
    fraction_33632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 41), 'fraction', False)
    # Applying the binary operator '-' (line 1155)
    result_sub_33633 = python_operator(stypy.reporting.localization.Localization(__file__, 1155, 37), '-', int_33631, fraction_33632)
    
    # Getting the type of 'pad' (line 1155)
    pad_33634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 52), 'pad', False)
    # Applying the binary operator '-' (line 1155)
    result_sub_33635 = python_operator(stypy.reporting.localization.Localization(__file__, 1155, 50), '-', result_sub_33633, pad_33634)
    
    int_33636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1155, 57), 'int')
    # Getting the type of 'fraction' (line 1155)
    fraction_33637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 61), 'fraction', False)
    # Applying the binary operator '-' (line 1155)
    result_sub_33638 = python_operator(stypy.reporting.localization.Localization(__file__, 1155, 57), '-', int_33636, fraction_33637)
    
    # Processing the call keyword arguments (line 1155)
    kwargs_33639 = {}
    # Getting the type of 'pb' (line 1155)
    pb_33629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 27), 'pb', False)
    # Obtaining the member 'splity' of a type (line 1155)
    splity_33630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 27), pb_33629, 'splity')
    # Calling splity(args, kwargs) (line 1155)
    splity_call_result_33640 = invoke(stypy.reporting.localization.Localization(__file__, 1155, 27), splity_33630, *[result_sub_33635, result_sub_33638], **kwargs_33639)
    
    # Assigning a type to the variable 'call_assignment_30391' (line 1155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'call_assignment_30391', splity_call_result_33640)
    
    # Assigning a Call to a Name (line 1155):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_33643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1155, 12), 'int')
    # Processing the call keyword arguments
    kwargs_33644 = {}
    # Getting the type of 'call_assignment_30391' (line 1155)
    call_assignment_30391_33641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'call_assignment_30391', False)
    # Obtaining the member '__getitem__' of a type (line 1155)
    getitem___33642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 12), call_assignment_30391_33641, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_33645 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___33642, *[int_33643], **kwargs_33644)
    
    # Assigning a type to the variable 'call_assignment_30392' (line 1155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'call_assignment_30392', getitem___call_result_33645)
    
    # Assigning a Name to a Name (line 1155):
    # Getting the type of 'call_assignment_30392' (line 1155)
    call_assignment_30392_33646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'call_assignment_30392')
    # Assigning a type to the variable 'pb1' (line 1155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'pb1', call_assignment_30392_33646)
    
    # Assigning a Call to a Name (line 1155):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_33649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1155, 12), 'int')
    # Processing the call keyword arguments
    kwargs_33650 = {}
    # Getting the type of 'call_assignment_30391' (line 1155)
    call_assignment_30391_33647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'call_assignment_30391', False)
    # Obtaining the member '__getitem__' of a type (line 1155)
    getitem___33648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 12), call_assignment_30391_33647, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_33651 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___33648, *[int_33649], **kwargs_33650)
    
    # Assigning a type to the variable 'call_assignment_30393' (line 1155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'call_assignment_30393', getitem___call_result_33651)
    
    # Assigning a Name to a Name (line 1155):
    # Getting the type of 'call_assignment_30393' (line 1155)
    call_assignment_30393_33652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'call_assignment_30393')
    # Assigning a type to the variable '_' (line 1155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 17), '_', call_assignment_30393_33652)
    
    # Assigning a Call to a Name (line 1155):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_33655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1155, 12), 'int')
    # Processing the call keyword arguments
    kwargs_33656 = {}
    # Getting the type of 'call_assignment_30391' (line 1155)
    call_assignment_30391_33653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'call_assignment_30391', False)
    # Obtaining the member '__getitem__' of a type (line 1155)
    getitem___33654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 12), call_assignment_30391_33653, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_33657 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___33654, *[int_33655], **kwargs_33656)
    
    # Assigning a type to the variable 'call_assignment_30394' (line 1155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'call_assignment_30394', getitem___call_result_33657)
    
    # Assigning a Name to a Name (line 1155):
    # Getting the type of 'call_assignment_30394' (line 1155)
    call_assignment_30394_33658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'call_assignment_30394')
    # Assigning a type to the variable 'pbcb' (line 1155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 20), 'pbcb', call_assignment_30394_33658)
    # SSA join for if statement (line 1152)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1156):
    
    # Assigning a Call to a Name (line 1156):
    
    # Call to anchored(...): (line 1156)
    # Processing the call arguments (line 1156)
    # Getting the type of 'anchor' (line 1156)
    anchor_33666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 49), 'anchor', False)
    # Getting the type of 'pbcb' (line 1156)
    pbcb_33667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 57), 'pbcb', False)
    # Processing the call keyword arguments (line 1156)
    kwargs_33668 = {}
    
    # Call to shrunk(...): (line 1156)
    # Processing the call arguments (line 1156)
    # Getting the type of 'shrink' (line 1156)
    shrink_33661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 27), 'shrink', False)
    float_33662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1156, 35), 'float')
    # Processing the call keyword arguments (line 1156)
    kwargs_33663 = {}
    # Getting the type of 'pbcb' (line 1156)
    pbcb_33659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 15), 'pbcb', False)
    # Obtaining the member 'shrunk' of a type (line 1156)
    shrunk_33660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1156, 15), pbcb_33659, 'shrunk')
    # Calling shrunk(args, kwargs) (line 1156)
    shrunk_call_result_33664 = invoke(stypy.reporting.localization.Localization(__file__, 1156, 15), shrunk_33660, *[shrink_33661, float_33662], **kwargs_33663)
    
    # Obtaining the member 'anchored' of a type (line 1156)
    anchored_33665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1156, 15), shrunk_call_result_33664, 'anchored')
    # Calling anchored(args, kwargs) (line 1156)
    anchored_call_result_33669 = invoke(stypy.reporting.localization.Localization(__file__, 1156, 15), anchored_33665, *[anchor_33666, pbcb_33667], **kwargs_33668)
    
    # Assigning a type to the variable 'pbcb' (line 1156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1156, 8), 'pbcb', anchored_call_result_33669)
    
    # Assigning a BinOp to a Name (line 1159):
    
    # Assigning a BinOp to a Name (line 1159):
    float_33670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, 17), 'float')
    # Getting the type of 'aspect' (line 1159)
    aspect_33671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 23), 'aspect')
    # Applying the binary operator 'div' (line 1159)
    result_div_33672 = python_operator(stypy.reporting.localization.Localization(__file__, 1159, 17), 'div', float_33670, aspect_33671)
    
    # Assigning a type to the variable 'aspect' (line 1159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 8), 'aspect', result_div_33672)
    # SSA join for if statement (line 1145)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1163):
    
    # Assigning a Call to a Name (line 1163):
    
    # Call to BboxTransform(...): (line 1163)
    # Processing the call arguments (line 1163)
    # Getting the type of 'parents_bbox' (line 1163)
    parents_bbox_33675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 48), 'parents_bbox', False)
    # Getting the type of 'pb1' (line 1163)
    pb1_33676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 62), 'pb1', False)
    # Processing the call keyword arguments (line 1163)
    kwargs_33677 = {}
    # Getting the type of 'mtransforms' (line 1163)
    mtransforms_33673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 22), 'mtransforms', False)
    # Obtaining the member 'BboxTransform' of a type (line 1163)
    BboxTransform_33674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 22), mtransforms_33673, 'BboxTransform')
    # Calling BboxTransform(args, kwargs) (line 1163)
    BboxTransform_call_result_33678 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 22), BboxTransform_33674, *[parents_bbox_33675, pb1_33676], **kwargs_33677)
    
    # Assigning a type to the variable 'shrinking_trans' (line 1163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 4), 'shrinking_trans', BboxTransform_call_result_33678)
    
    # Getting the type of 'parents' (line 1166)
    parents_33679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 14), 'parents')
    # Testing the type of a for loop iterable (line 1166)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1166, 4), parents_33679)
    # Getting the type of the for loop variable (line 1166)
    for_loop_var_33680 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1166, 4), parents_33679)
    # Assigning a type to the variable 'ax' (line 1166)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 4), 'ax', for_loop_var_33680)
    # SSA begins for a for statement (line 1166)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1167):
    
    # Assigning a Call to a Name (line 1167):
    
    # Call to transform(...): (line 1167)
    # Processing the call arguments (line 1167)
    
    # Call to get_position(...): (line 1167)
    # Processing the call keyword arguments (line 1167)
    kwargs_33685 = {}
    # Getting the type of 'ax' (line 1167)
    ax_33683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 45), 'ax', False)
    # Obtaining the member 'get_position' of a type (line 1167)
    get_position_33684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1167, 45), ax_33683, 'get_position')
    # Calling get_position(args, kwargs) (line 1167)
    get_position_call_result_33686 = invoke(stypy.reporting.localization.Localization(__file__, 1167, 45), get_position_33684, *[], **kwargs_33685)
    
    # Processing the call keyword arguments (line 1167)
    kwargs_33687 = {}
    # Getting the type of 'shrinking_trans' (line 1167)
    shrinking_trans_33681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 19), 'shrinking_trans', False)
    # Obtaining the member 'transform' of a type (line 1167)
    transform_33682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1167, 19), shrinking_trans_33681, 'transform')
    # Calling transform(args, kwargs) (line 1167)
    transform_call_result_33688 = invoke(stypy.reporting.localization.Localization(__file__, 1167, 19), transform_33682, *[get_position_call_result_33686], **kwargs_33687)
    
    # Assigning a type to the variable 'new_posn' (line 1167)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1167, 8), 'new_posn', transform_call_result_33688)
    
    # Assigning a Call to a Name (line 1168):
    
    # Assigning a Call to a Name (line 1168):
    
    # Call to Bbox(...): (line 1168)
    # Processing the call arguments (line 1168)
    # Getting the type of 'new_posn' (line 1168)
    new_posn_33691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 36), 'new_posn', False)
    # Processing the call keyword arguments (line 1168)
    kwargs_33692 = {}
    # Getting the type of 'mtransforms' (line 1168)
    mtransforms_33689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 19), 'mtransforms', False)
    # Obtaining the member 'Bbox' of a type (line 1168)
    Bbox_33690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1168, 19), mtransforms_33689, 'Bbox')
    # Calling Bbox(args, kwargs) (line 1168)
    Bbox_call_result_33693 = invoke(stypy.reporting.localization.Localization(__file__, 1168, 19), Bbox_33690, *[new_posn_33691], **kwargs_33692)
    
    # Assigning a type to the variable 'new_posn' (line 1168)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1168, 8), 'new_posn', Bbox_call_result_33693)
    
    # Call to set_position(...): (line 1169)
    # Processing the call arguments (line 1169)
    # Getting the type of 'new_posn' (line 1169)
    new_posn_33696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 24), 'new_posn', False)
    # Processing the call keyword arguments (line 1169)
    kwargs_33697 = {}
    # Getting the type of 'ax' (line 1169)
    ax_33694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 8), 'ax', False)
    # Obtaining the member 'set_position' of a type (line 1169)
    set_position_33695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 8), ax_33694, 'set_position')
    # Calling set_position(args, kwargs) (line 1169)
    set_position_call_result_33698 = invoke(stypy.reporting.localization.Localization(__file__, 1169, 8), set_position_33695, *[new_posn_33696], **kwargs_33697)
    
    
    
    # Getting the type of 'parent_anchor' (line 1170)
    parent_anchor_33699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 11), 'parent_anchor')
    # Getting the type of 'False' (line 1170)
    False_33700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 32), 'False')
    # Applying the binary operator 'isnot' (line 1170)
    result_is_not_33701 = python_operator(stypy.reporting.localization.Localization(__file__, 1170, 11), 'isnot', parent_anchor_33699, False_33700)
    
    # Testing the type of an if condition (line 1170)
    if_condition_33702 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1170, 8), result_is_not_33701)
    # Assigning a type to the variable 'if_condition_33702' (line 1170)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1170, 8), 'if_condition_33702', if_condition_33702)
    # SSA begins for if statement (line 1170)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_anchor(...): (line 1171)
    # Processing the call arguments (line 1171)
    # Getting the type of 'parent_anchor' (line 1171)
    parent_anchor_33705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 26), 'parent_anchor', False)
    # Processing the call keyword arguments (line 1171)
    kwargs_33706 = {}
    # Getting the type of 'ax' (line 1171)
    ax_33703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 12), 'ax', False)
    # Obtaining the member 'set_anchor' of a type (line 1171)
    set_anchor_33704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 12), ax_33703, 'set_anchor')
    # Calling set_anchor(args, kwargs) (line 1171)
    set_anchor_call_result_33707 = invoke(stypy.reporting.localization.Localization(__file__, 1171, 12), set_anchor_33704, *[parent_anchor_33705], **kwargs_33706)
    
    # SSA join for if statement (line 1170)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1173):
    
    # Assigning a Call to a Name (line 1173):
    
    # Call to add_axes(...): (line 1173)
    # Processing the call arguments (line 1173)
    # Getting the type of 'pbcb' (line 1173)
    pbcb_33710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 23), 'pbcb', False)
    # Processing the call keyword arguments (line 1173)
    kwargs_33711 = {}
    # Getting the type of 'fig' (line 1173)
    fig_33708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 10), 'fig', False)
    # Obtaining the member 'add_axes' of a type (line 1173)
    add_axes_33709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1173, 10), fig_33708, 'add_axes')
    # Calling add_axes(args, kwargs) (line 1173)
    add_axes_call_result_33712 = invoke(stypy.reporting.localization.Localization(__file__, 1173, 10), add_axes_33709, *[pbcb_33710], **kwargs_33711)
    
    # Assigning a type to the variable 'cax' (line 1173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1173, 4), 'cax', add_axes_call_result_33712)
    
    # Call to set_aspect(...): (line 1174)
    # Processing the call arguments (line 1174)
    # Getting the type of 'aspect' (line 1174)
    aspect_33715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 19), 'aspect', False)
    # Processing the call keyword arguments (line 1174)
    # Getting the type of 'anchor' (line 1174)
    anchor_33716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 34), 'anchor', False)
    keyword_33717 = anchor_33716
    unicode_33718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1174, 53), 'unicode', u'box')
    keyword_33719 = unicode_33718
    kwargs_33720 = {'adjustable': keyword_33719, 'anchor': keyword_33717}
    # Getting the type of 'cax' (line 1174)
    cax_33713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 4), 'cax', False)
    # Obtaining the member 'set_aspect' of a type (line 1174)
    set_aspect_33714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1174, 4), cax_33713, 'set_aspect')
    # Calling set_aspect(args, kwargs) (line 1174)
    set_aspect_call_result_33721 = invoke(stypy.reporting.localization.Localization(__file__, 1174, 4), set_aspect_33714, *[aspect_33715], **kwargs_33720)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1175)
    tuple_33722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1175)
    # Adding element type (line 1175)
    # Getting the type of 'cax' (line 1175)
    cax_33723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 11), 'cax')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1175, 11), tuple_33722, cax_33723)
    # Adding element type (line 1175)
    # Getting the type of 'kw' (line 1175)
    kw_33724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 16), 'kw')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1175, 11), tuple_33722, kw_33724)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 4), 'stypy_return_type', tuple_33722)
    
    # ################# End of 'make_axes(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'make_axes' in the type store
    # Getting the type of 'stypy_return_type' (line 1058)
    stypy_return_type_33725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_33725)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'make_axes'
    return stypy_return_type_33725

# Assigning a type to the variable 'make_axes' (line 1058)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1058, 0), 'make_axes', make_axes)

@norecursion
def make_axes_gridspec(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'make_axes_gridspec'
    module_type_store = module_type_store.open_function_context('make_axes_gridspec', 1178, 0, False)
    
    # Passed parameters checking function
    make_axes_gridspec.stypy_localization = localization
    make_axes_gridspec.stypy_type_of_self = None
    make_axes_gridspec.stypy_type_store = module_type_store
    make_axes_gridspec.stypy_function_name = 'make_axes_gridspec'
    make_axes_gridspec.stypy_param_names_list = ['parent']
    make_axes_gridspec.stypy_varargs_param_name = None
    make_axes_gridspec.stypy_kwargs_param_name = 'kw'
    make_axes_gridspec.stypy_call_defaults = defaults
    make_axes_gridspec.stypy_call_varargs = varargs
    make_axes_gridspec.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'make_axes_gridspec', ['parent'], None, 'kw', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'make_axes_gridspec', localization, ['parent'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'make_axes_gridspec(...)' code ##################

    unicode_33726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, (-1)), 'unicode', u'\n    Resize and reposition a parent axes, and return a child axes\n    suitable for a colorbar. This function is similar to\n    make_axes. Prmary differences are\n\n     * *make_axes_gridspec* only handles the *orientation* keyword\n       and cannot handle the "location" keyword.\n\n     * *make_axes_gridspec* should only be used with a subplot parent.\n\n     * *make_axes* creates an instance of Axes. *make_axes_gridspec*\n        creates an instance of Subplot.\n\n     * *make_axes* updates the position of the\n        parent. *make_axes_gridspec* replaces the grid_spec attribute\n        of the parent with a new one.\n\n    While this function is meant to be compatible with *make_axes*,\n    there could be some minor differences.\n\n    Keyword arguments may include the following (with defaults):\n\n        *orientation*\n            \'vertical\' or \'horizontal\'\n\n    %s\n\n    All but the first of these are stripped from the input kw set.\n\n    Returns (cax, kw), the child axes and the reduced kw dictionary to be\n    passed when creating the colorbar instance.\n    ')
    
    # Assigning a Call to a Name (line 1213):
    
    # Assigning a Call to a Name (line 1213):
    
    # Call to setdefault(...): (line 1213)
    # Processing the call arguments (line 1213)
    unicode_33729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1213, 32), 'unicode', u'orientation')
    unicode_33730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1213, 47), 'unicode', u'vertical')
    # Processing the call keyword arguments (line 1213)
    kwargs_33731 = {}
    # Getting the type of 'kw' (line 1213)
    kw_33727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 18), 'kw', False)
    # Obtaining the member 'setdefault' of a type (line 1213)
    setdefault_33728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1213, 18), kw_33727, 'setdefault')
    # Calling setdefault(args, kwargs) (line 1213)
    setdefault_call_result_33732 = invoke(stypy.reporting.localization.Localization(__file__, 1213, 18), setdefault_33728, *[unicode_33729, unicode_33730], **kwargs_33731)
    
    # Assigning a type to the variable 'orientation' (line 1213)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 4), 'orientation', setdefault_call_result_33732)
    
    # Assigning a Str to a Subscript (line 1214):
    
    # Assigning a Str to a Subscript (line 1214):
    unicode_33733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 25), 'unicode', u'auto')
    # Getting the type of 'kw' (line 1214)
    kw_33734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 4), 'kw')
    unicode_33735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 7), 'unicode', u'ticklocation')
    # Storing an element on a container (line 1214)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1214, 4), kw_33734, (unicode_33735, unicode_33733))
    
    # Assigning a Call to a Name (line 1216):
    
    # Assigning a Call to a Name (line 1216):
    
    # Call to pop(...): (line 1216)
    # Processing the call arguments (line 1216)
    unicode_33738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 22), 'unicode', u'fraction')
    float_33739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 34), 'float')
    # Processing the call keyword arguments (line 1216)
    kwargs_33740 = {}
    # Getting the type of 'kw' (line 1216)
    kw_33736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 15), 'kw', False)
    # Obtaining the member 'pop' of a type (line 1216)
    pop_33737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 15), kw_33736, 'pop')
    # Calling pop(args, kwargs) (line 1216)
    pop_call_result_33741 = invoke(stypy.reporting.localization.Localization(__file__, 1216, 15), pop_33737, *[unicode_33738, float_33739], **kwargs_33740)
    
    # Assigning a type to the variable 'fraction' (line 1216)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1216, 4), 'fraction', pop_call_result_33741)
    
    # Assigning a Call to a Name (line 1217):
    
    # Assigning a Call to a Name (line 1217):
    
    # Call to pop(...): (line 1217)
    # Processing the call arguments (line 1217)
    unicode_33744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1217, 20), 'unicode', u'shrink')
    float_33745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1217, 30), 'float')
    # Processing the call keyword arguments (line 1217)
    kwargs_33746 = {}
    # Getting the type of 'kw' (line 1217)
    kw_33742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 13), 'kw', False)
    # Obtaining the member 'pop' of a type (line 1217)
    pop_33743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 13), kw_33742, 'pop')
    # Calling pop(args, kwargs) (line 1217)
    pop_call_result_33747 = invoke(stypy.reporting.localization.Localization(__file__, 1217, 13), pop_33743, *[unicode_33744, float_33745], **kwargs_33746)
    
    # Assigning a type to the variable 'shrink' (line 1217)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 4), 'shrink', pop_call_result_33747)
    
    # Assigning a Call to a Name (line 1218):
    
    # Assigning a Call to a Name (line 1218):
    
    # Call to pop(...): (line 1218)
    # Processing the call arguments (line 1218)
    unicode_33750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1218, 20), 'unicode', u'aspect')
    int_33751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1218, 30), 'int')
    # Processing the call keyword arguments (line 1218)
    kwargs_33752 = {}
    # Getting the type of 'kw' (line 1218)
    kw_33748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 13), 'kw', False)
    # Obtaining the member 'pop' of a type (line 1218)
    pop_33749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 13), kw_33748, 'pop')
    # Calling pop(args, kwargs) (line 1218)
    pop_call_result_33753 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 13), pop_33749, *[unicode_33750, int_33751], **kwargs_33752)
    
    # Assigning a type to the variable 'aspect' (line 1218)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1218, 4), 'aspect', pop_call_result_33753)
    
    # Assigning a BinOp to a Name (line 1220):
    
    # Assigning a BinOp to a Name (line 1220):
    float_33754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1220, 9), 'float')
    # Getting the type of 'fraction' (line 1220)
    fraction_33755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 15), 'fraction')
    # Applying the binary operator '-' (line 1220)
    result_sub_33756 = python_operator(stypy.reporting.localization.Localization(__file__, 1220, 9), '-', float_33754, fraction_33755)
    
    # Assigning a type to the variable 'x1' (line 1220)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1220, 4), 'x1', result_sub_33756)
    
    # Assigning a BinOp to a Name (line 1223):
    
    # Assigning a BinOp to a Name (line 1223):
    float_33757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1223, 13), 'float')
    # Getting the type of 'shrink' (line 1223)
    shrink_33758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 18), 'shrink')
    # Applying the binary operator '-' (line 1223)
    result_sub_33759 = python_operator(stypy.reporting.localization.Localization(__file__, 1223, 13), '-', float_33757, shrink_33758)
    
    float_33760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1223, 28), 'float')
    # Applying the binary operator '*' (line 1223)
    result_mul_33761 = python_operator(stypy.reporting.localization.Localization(__file__, 1223, 12), '*', result_sub_33759, float_33760)
    
    # Assigning a type to the variable 'pad_s' (line 1223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 4), 'pad_s', result_mul_33761)
    
    # Assigning a List to a Name (line 1224):
    
    # Assigning a List to a Name (line 1224):
    
    # Obtaining an instance of the builtin type 'list' (line 1224)
    list_33762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1224, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1224)
    # Adding element type (line 1224)
    # Getting the type of 'pad_s' (line 1224)
    pad_s_33763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 17), 'pad_s')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1224, 16), list_33762, pad_s_33763)
    # Adding element type (line 1224)
    # Getting the type of 'shrink' (line 1224)
    shrink_33764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 24), 'shrink')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1224, 16), list_33762, shrink_33764)
    # Adding element type (line 1224)
    # Getting the type of 'pad_s' (line 1224)
    pad_s_33765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 32), 'pad_s')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1224, 16), list_33762, pad_s_33765)
    
    # Assigning a type to the variable 'wh_ratios' (line 1224)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1224, 4), 'wh_ratios', list_33762)
    
    # Assigning a Attribute to a Name (line 1226):
    
    # Assigning a Attribute to a Name (line 1226):
    # Getting the type of 'gridspec' (line 1226)
    gridspec_33766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 26), 'gridspec')
    # Obtaining the member 'GridSpecFromSubplotSpec' of a type (line 1226)
    GridSpecFromSubplotSpec_33767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 26), gridspec_33766, 'GridSpecFromSubplotSpec')
    # Assigning a type to the variable 'gs_from_subplotspec' (line 1226)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1226, 4), 'gs_from_subplotspec', GridSpecFromSubplotSpec_33767)
    
    
    # Getting the type of 'orientation' (line 1227)
    orientation_33768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 7), 'orientation')
    unicode_33769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 22), 'unicode', u'vertical')
    # Applying the binary operator '==' (line 1227)
    result_eq_33770 = python_operator(stypy.reporting.localization.Localization(__file__, 1227, 7), '==', orientation_33768, unicode_33769)
    
    # Testing the type of an if condition (line 1227)
    if_condition_33771 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1227, 4), result_eq_33770)
    # Assigning a type to the variable 'if_condition_33771' (line 1227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1227, 4), 'if_condition_33771', if_condition_33771)
    # SSA begins for if statement (line 1227)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1228):
    
    # Assigning a Call to a Name (line 1228):
    
    # Call to pop(...): (line 1228)
    # Processing the call arguments (line 1228)
    unicode_33774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1228, 21), 'unicode', u'pad')
    float_33775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1228, 28), 'float')
    # Processing the call keyword arguments (line 1228)
    kwargs_33776 = {}
    # Getting the type of 'kw' (line 1228)
    kw_33772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 14), 'kw', False)
    # Obtaining the member 'pop' of a type (line 1228)
    pop_33773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1228, 14), kw_33772, 'pop')
    # Calling pop(args, kwargs) (line 1228)
    pop_call_result_33777 = invoke(stypy.reporting.localization.Localization(__file__, 1228, 14), pop_33773, *[unicode_33774, float_33775], **kwargs_33776)
    
    # Assigning a type to the variable 'pad' (line 1228)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1228, 8), 'pad', pop_call_result_33777)
    
    # Assigning a BinOp to a Name (line 1229):
    
    # Assigning a BinOp to a Name (line 1229):
    int_33778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1229, 19), 'int')
    # Getting the type of 'pad' (line 1229)
    pad_33779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 23), 'pad')
    # Applying the binary operator '*' (line 1229)
    result_mul_33780 = python_operator(stypy.reporting.localization.Localization(__file__, 1229, 19), '*', int_33778, pad_33779)
    
    int_33781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1229, 30), 'int')
    # Getting the type of 'pad' (line 1229)
    pad_33782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 34), 'pad')
    # Applying the binary operator '-' (line 1229)
    result_sub_33783 = python_operator(stypy.reporting.localization.Localization(__file__, 1229, 30), '-', int_33781, pad_33782)
    
    # Applying the binary operator 'div' (line 1229)
    result_div_33784 = python_operator(stypy.reporting.localization.Localization(__file__, 1229, 27), 'div', result_mul_33780, result_sub_33783)
    
    # Assigning a type to the variable 'wh_space' (line 1229)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 8), 'wh_space', result_div_33784)
    
    # Assigning a Call to a Name (line 1231):
    
    # Assigning a Call to a Name (line 1231):
    
    # Call to gs_from_subplotspec(...): (line 1231)
    # Processing the call arguments (line 1231)
    int_33786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 33), 'int')
    int_33787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 36), 'int')
    # Processing the call keyword arguments (line 1231)
    
    # Call to get_subplotspec(...): (line 1232)
    # Processing the call keyword arguments (line 1232)
    kwargs_33790 = {}
    # Getting the type of 'parent' (line 1232)
    parent_33788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 46), 'parent', False)
    # Obtaining the member 'get_subplotspec' of a type (line 1232)
    get_subplotspec_33789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1232, 46), parent_33788, 'get_subplotspec')
    # Calling get_subplotspec(args, kwargs) (line 1232)
    get_subplotspec_call_result_33791 = invoke(stypy.reporting.localization.Localization(__file__, 1232, 46), get_subplotspec_33789, *[], **kwargs_33790)
    
    keyword_33792 = get_subplotspec_call_result_33791
    # Getting the type of 'wh_space' (line 1233)
    wh_space_33793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 40), 'wh_space', False)
    keyword_33794 = wh_space_33793
    
    # Obtaining an instance of the builtin type 'list' (line 1234)
    list_33795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, 46), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1234)
    # Adding element type (line 1234)
    # Getting the type of 'x1' (line 1234)
    x1_33796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 47), 'x1', False)
    # Getting the type of 'pad' (line 1234)
    pad_33797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 52), 'pad', False)
    # Applying the binary operator '-' (line 1234)
    result_sub_33798 = python_operator(stypy.reporting.localization.Localization(__file__, 1234, 47), '-', x1_33796, pad_33797)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1234, 46), list_33795, result_sub_33798)
    # Adding element type (line 1234)
    # Getting the type of 'fraction' (line 1234)
    fraction_33799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 57), 'fraction', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1234, 46), list_33795, fraction_33799)
    
    keyword_33800 = list_33795
    kwargs_33801 = {'wspace': keyword_33794, 'width_ratios': keyword_33800, 'subplot_spec': keyword_33792}
    # Getting the type of 'gs_from_subplotspec' (line 1231)
    gs_from_subplotspec_33785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 13), 'gs_from_subplotspec', False)
    # Calling gs_from_subplotspec(args, kwargs) (line 1231)
    gs_from_subplotspec_call_result_33802 = invoke(stypy.reporting.localization.Localization(__file__, 1231, 13), gs_from_subplotspec_33785, *[int_33786, int_33787], **kwargs_33801)
    
    # Assigning a type to the variable 'gs' (line 1231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1231, 8), 'gs', gs_from_subplotspec_call_result_33802)
    
    # Assigning a Call to a Name (line 1237):
    
    # Assigning a Call to a Name (line 1237):
    
    # Call to gs_from_subplotspec(...): (line 1237)
    # Processing the call arguments (line 1237)
    int_33804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, 34), 'int')
    int_33805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, 37), 'int')
    # Processing the call keyword arguments (line 1237)
    
    # Obtaining the type of the subscript
    int_33806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 50), 'int')
    # Getting the type of 'gs' (line 1238)
    gs_33807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 47), 'gs', False)
    # Obtaining the member '__getitem__' of a type (line 1238)
    getitem___33808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 47), gs_33807, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1238)
    subscript_call_result_33809 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 47), getitem___33808, int_33806)
    
    keyword_33810 = subscript_call_result_33809
    float_33811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 41), 'float')
    keyword_33812 = float_33811
    # Getting the type of 'wh_ratios' (line 1240)
    wh_ratios_33813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 48), 'wh_ratios', False)
    keyword_33814 = wh_ratios_33813
    kwargs_33815 = {'height_ratios': keyword_33814, 'hspace': keyword_33812, 'subplot_spec': keyword_33810}
    # Getting the type of 'gs_from_subplotspec' (line 1237)
    gs_from_subplotspec_33803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 14), 'gs_from_subplotspec', False)
    # Calling gs_from_subplotspec(args, kwargs) (line 1237)
    gs_from_subplotspec_call_result_33816 = invoke(stypy.reporting.localization.Localization(__file__, 1237, 14), gs_from_subplotspec_33803, *[int_33804, int_33805], **kwargs_33815)
    
    # Assigning a type to the variable 'gs2' (line 1237)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1237, 8), 'gs2', gs_from_subplotspec_call_result_33816)
    
    # Assigning a Tuple to a Name (line 1243):
    
    # Assigning a Tuple to a Name (line 1243):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1243)
    tuple_33817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1243)
    # Adding element type (line 1243)
    float_33818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 18), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1243, 18), tuple_33817, float_33818)
    # Adding element type (line 1243)
    float_33819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 23), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1243, 18), tuple_33817, float_33819)
    
    # Assigning a type to the variable 'anchor' (line 1243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 8), 'anchor', tuple_33817)
    
    # Assigning a Tuple to a Name (line 1244):
    
    # Assigning a Tuple to a Name (line 1244):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1244)
    tuple_33820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1244, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1244)
    # Adding element type (line 1244)
    float_33821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1244, 19), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1244, 19), tuple_33820, float_33821)
    # Adding element type (line 1244)
    float_33822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1244, 24), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1244, 19), tuple_33820, float_33822)
    
    # Assigning a type to the variable 'panchor' (line 1244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1244, 8), 'panchor', tuple_33820)
    # SSA branch for the else part of an if statement (line 1227)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1246):
    
    # Assigning a Call to a Name (line 1246):
    
    # Call to pop(...): (line 1246)
    # Processing the call arguments (line 1246)
    unicode_33825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 21), 'unicode', u'pad')
    float_33826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 28), 'float')
    # Processing the call keyword arguments (line 1246)
    kwargs_33827 = {}
    # Getting the type of 'kw' (line 1246)
    kw_33823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 14), 'kw', False)
    # Obtaining the member 'pop' of a type (line 1246)
    pop_33824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1246, 14), kw_33823, 'pop')
    # Calling pop(args, kwargs) (line 1246)
    pop_call_result_33828 = invoke(stypy.reporting.localization.Localization(__file__, 1246, 14), pop_33824, *[unicode_33825, float_33826], **kwargs_33827)
    
    # Assigning a type to the variable 'pad' (line 1246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 8), 'pad', pop_call_result_33828)
    
    # Assigning a BinOp to a Name (line 1247):
    
    # Assigning a BinOp to a Name (line 1247):
    int_33829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, 19), 'int')
    # Getting the type of 'pad' (line 1247)
    pad_33830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 23), 'pad')
    # Applying the binary operator '*' (line 1247)
    result_mul_33831 = python_operator(stypy.reporting.localization.Localization(__file__, 1247, 19), '*', int_33829, pad_33830)
    
    int_33832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, 30), 'int')
    # Getting the type of 'pad' (line 1247)
    pad_33833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 34), 'pad')
    # Applying the binary operator '-' (line 1247)
    result_sub_33834 = python_operator(stypy.reporting.localization.Localization(__file__, 1247, 30), '-', int_33832, pad_33833)
    
    # Applying the binary operator 'div' (line 1247)
    result_div_33835 = python_operator(stypy.reporting.localization.Localization(__file__, 1247, 27), 'div', result_mul_33831, result_sub_33834)
    
    # Assigning a type to the variable 'wh_space' (line 1247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 8), 'wh_space', result_div_33835)
    
    # Assigning a Call to a Name (line 1249):
    
    # Assigning a Call to a Name (line 1249):
    
    # Call to gs_from_subplotspec(...): (line 1249)
    # Processing the call arguments (line 1249)
    int_33837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 33), 'int')
    int_33838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 36), 'int')
    # Processing the call keyword arguments (line 1249)
    
    # Call to get_subplotspec(...): (line 1250)
    # Processing the call keyword arguments (line 1250)
    kwargs_33841 = {}
    # Getting the type of 'parent' (line 1250)
    parent_33839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 46), 'parent', False)
    # Obtaining the member 'get_subplotspec' of a type (line 1250)
    get_subplotspec_33840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1250, 46), parent_33839, 'get_subplotspec')
    # Calling get_subplotspec(args, kwargs) (line 1250)
    get_subplotspec_call_result_33842 = invoke(stypy.reporting.localization.Localization(__file__, 1250, 46), get_subplotspec_33840, *[], **kwargs_33841)
    
    keyword_33843 = get_subplotspec_call_result_33842
    # Getting the type of 'wh_space' (line 1251)
    wh_space_33844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 40), 'wh_space', False)
    keyword_33845 = wh_space_33844
    
    # Obtaining an instance of the builtin type 'list' (line 1252)
    list_33846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1252, 47), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1252)
    # Adding element type (line 1252)
    # Getting the type of 'x1' (line 1252)
    x1_33847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 48), 'x1', False)
    # Getting the type of 'pad' (line 1252)
    pad_33848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 53), 'pad', False)
    # Applying the binary operator '-' (line 1252)
    result_sub_33849 = python_operator(stypy.reporting.localization.Localization(__file__, 1252, 48), '-', x1_33847, pad_33848)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1252, 47), list_33846, result_sub_33849)
    # Adding element type (line 1252)
    # Getting the type of 'fraction' (line 1252)
    fraction_33850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 58), 'fraction', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1252, 47), list_33846, fraction_33850)
    
    keyword_33851 = list_33846
    kwargs_33852 = {'height_ratios': keyword_33851, 'hspace': keyword_33845, 'subplot_spec': keyword_33843}
    # Getting the type of 'gs_from_subplotspec' (line 1249)
    gs_from_subplotspec_33836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 13), 'gs_from_subplotspec', False)
    # Calling gs_from_subplotspec(args, kwargs) (line 1249)
    gs_from_subplotspec_call_result_33853 = invoke(stypy.reporting.localization.Localization(__file__, 1249, 13), gs_from_subplotspec_33836, *[int_33837, int_33838], **kwargs_33852)
    
    # Assigning a type to the variable 'gs' (line 1249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 8), 'gs', gs_from_subplotspec_call_result_33853)
    
    # Assigning a Call to a Name (line 1255):
    
    # Assigning a Call to a Name (line 1255):
    
    # Call to gs_from_subplotspec(...): (line 1255)
    # Processing the call arguments (line 1255)
    int_33855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 34), 'int')
    int_33856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 37), 'int')
    # Processing the call keyword arguments (line 1255)
    
    # Obtaining the type of the subscript
    int_33857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1256, 50), 'int')
    # Getting the type of 'gs' (line 1256)
    gs_33858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 47), 'gs', False)
    # Obtaining the member '__getitem__' of a type (line 1256)
    getitem___33859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1256, 47), gs_33858, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1256)
    subscript_call_result_33860 = invoke(stypy.reporting.localization.Localization(__file__, 1256, 47), getitem___33859, int_33857)
    
    keyword_33861 = subscript_call_result_33860
    float_33862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 41), 'float')
    keyword_33863 = float_33862
    # Getting the type of 'wh_ratios' (line 1258)
    wh_ratios_33864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 47), 'wh_ratios', False)
    keyword_33865 = wh_ratios_33864
    kwargs_33866 = {'wspace': keyword_33863, 'width_ratios': keyword_33865, 'subplot_spec': keyword_33861}
    # Getting the type of 'gs_from_subplotspec' (line 1255)
    gs_from_subplotspec_33854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 14), 'gs_from_subplotspec', False)
    # Calling gs_from_subplotspec(args, kwargs) (line 1255)
    gs_from_subplotspec_call_result_33867 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 14), gs_from_subplotspec_33854, *[int_33855, int_33856], **kwargs_33866)
    
    # Assigning a type to the variable 'gs2' (line 1255)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 8), 'gs2', gs_from_subplotspec_call_result_33867)
    
    # Assigning a BinOp to a Name (line 1261):
    
    # Assigning a BinOp to a Name (line 1261):
    float_33868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1261, 17), 'float')
    # Getting the type of 'aspect' (line 1261)
    aspect_33869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 23), 'aspect')
    # Applying the binary operator 'div' (line 1261)
    result_div_33870 = python_operator(stypy.reporting.localization.Localization(__file__, 1261, 17), 'div', float_33868, aspect_33869)
    
    # Assigning a type to the variable 'aspect' (line 1261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1261, 8), 'aspect', result_div_33870)
    
    # Assigning a Tuple to a Name (line 1262):
    
    # Assigning a Tuple to a Name (line 1262):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1262)
    tuple_33871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1262, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1262)
    # Adding element type (line 1262)
    float_33872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1262, 18), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1262, 18), tuple_33871, float_33872)
    # Adding element type (line 1262)
    float_33873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1262, 23), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1262, 18), tuple_33871, float_33873)
    
    # Assigning a type to the variable 'anchor' (line 1262)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1262, 8), 'anchor', tuple_33871)
    
    # Assigning a Tuple to a Name (line 1263):
    
    # Assigning a Tuple to a Name (line 1263):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1263)
    tuple_33874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1263, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1263)
    # Adding element type (line 1263)
    float_33875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1263, 19), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1263, 19), tuple_33874, float_33875)
    # Adding element type (line 1263)
    float_33876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1263, 24), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1263, 19), tuple_33874, float_33876)
    
    # Assigning a type to the variable 'panchor' (line 1263)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1263, 8), 'panchor', tuple_33874)
    # SSA join for if statement (line 1227)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to set_subplotspec(...): (line 1265)
    # Processing the call arguments (line 1265)
    
    # Obtaining the type of the subscript
    int_33879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1265, 30), 'int')
    # Getting the type of 'gs' (line 1265)
    gs_33880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 27), 'gs', False)
    # Obtaining the member '__getitem__' of a type (line 1265)
    getitem___33881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1265, 27), gs_33880, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1265)
    subscript_call_result_33882 = invoke(stypy.reporting.localization.Localization(__file__, 1265, 27), getitem___33881, int_33879)
    
    # Processing the call keyword arguments (line 1265)
    kwargs_33883 = {}
    # Getting the type of 'parent' (line 1265)
    parent_33877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 4), 'parent', False)
    # Obtaining the member 'set_subplotspec' of a type (line 1265)
    set_subplotspec_33878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1265, 4), parent_33877, 'set_subplotspec')
    # Calling set_subplotspec(args, kwargs) (line 1265)
    set_subplotspec_call_result_33884 = invoke(stypy.reporting.localization.Localization(__file__, 1265, 4), set_subplotspec_33878, *[subscript_call_result_33882], **kwargs_33883)
    
    
    # Call to update_params(...): (line 1266)
    # Processing the call keyword arguments (line 1266)
    kwargs_33887 = {}
    # Getting the type of 'parent' (line 1266)
    parent_33885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 4), 'parent', False)
    # Obtaining the member 'update_params' of a type (line 1266)
    update_params_33886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 4), parent_33885, 'update_params')
    # Calling update_params(args, kwargs) (line 1266)
    update_params_call_result_33888 = invoke(stypy.reporting.localization.Localization(__file__, 1266, 4), update_params_33886, *[], **kwargs_33887)
    
    
    # Call to set_position(...): (line 1267)
    # Processing the call arguments (line 1267)
    # Getting the type of 'parent' (line 1267)
    parent_33891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 24), 'parent', False)
    # Obtaining the member 'figbox' of a type (line 1267)
    figbox_33892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1267, 24), parent_33891, 'figbox')
    # Processing the call keyword arguments (line 1267)
    kwargs_33893 = {}
    # Getting the type of 'parent' (line 1267)
    parent_33889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 4), 'parent', False)
    # Obtaining the member 'set_position' of a type (line 1267)
    set_position_33890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1267, 4), parent_33889, 'set_position')
    # Calling set_position(args, kwargs) (line 1267)
    set_position_call_result_33894 = invoke(stypy.reporting.localization.Localization(__file__, 1267, 4), set_position_33890, *[figbox_33892], **kwargs_33893)
    
    
    # Call to set_anchor(...): (line 1268)
    # Processing the call arguments (line 1268)
    # Getting the type of 'panchor' (line 1268)
    panchor_33897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 22), 'panchor', False)
    # Processing the call keyword arguments (line 1268)
    kwargs_33898 = {}
    # Getting the type of 'parent' (line 1268)
    parent_33895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 4), 'parent', False)
    # Obtaining the member 'set_anchor' of a type (line 1268)
    set_anchor_33896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1268, 4), parent_33895, 'set_anchor')
    # Calling set_anchor(args, kwargs) (line 1268)
    set_anchor_call_result_33899 = invoke(stypy.reporting.localization.Localization(__file__, 1268, 4), set_anchor_33896, *[panchor_33897], **kwargs_33898)
    
    
    # Assigning a Call to a Name (line 1270):
    
    # Assigning a Call to a Name (line 1270):
    
    # Call to get_figure(...): (line 1270)
    # Processing the call keyword arguments (line 1270)
    kwargs_33902 = {}
    # Getting the type of 'parent' (line 1270)
    parent_33900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 10), 'parent', False)
    # Obtaining the member 'get_figure' of a type (line 1270)
    get_figure_33901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1270, 10), parent_33900, 'get_figure')
    # Calling get_figure(args, kwargs) (line 1270)
    get_figure_call_result_33903 = invoke(stypy.reporting.localization.Localization(__file__, 1270, 10), get_figure_33901, *[], **kwargs_33902)
    
    # Assigning a type to the variable 'fig' (line 1270)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1270, 4), 'fig', get_figure_call_result_33903)
    
    # Assigning a Call to a Name (line 1271):
    
    # Assigning a Call to a Name (line 1271):
    
    # Call to add_subplot(...): (line 1271)
    # Processing the call arguments (line 1271)
    
    # Obtaining the type of the subscript
    int_33906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1271, 30), 'int')
    # Getting the type of 'gs2' (line 1271)
    gs2_33907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 26), 'gs2', False)
    # Obtaining the member '__getitem__' of a type (line 1271)
    getitem___33908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1271, 26), gs2_33907, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1271)
    subscript_call_result_33909 = invoke(stypy.reporting.localization.Localization(__file__, 1271, 26), getitem___33908, int_33906)
    
    # Processing the call keyword arguments (line 1271)
    kwargs_33910 = {}
    # Getting the type of 'fig' (line 1271)
    fig_33904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 10), 'fig', False)
    # Obtaining the member 'add_subplot' of a type (line 1271)
    add_subplot_33905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1271, 10), fig_33904, 'add_subplot')
    # Calling add_subplot(args, kwargs) (line 1271)
    add_subplot_call_result_33911 = invoke(stypy.reporting.localization.Localization(__file__, 1271, 10), add_subplot_33905, *[subscript_call_result_33909], **kwargs_33910)
    
    # Assigning a type to the variable 'cax' (line 1271)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 4), 'cax', add_subplot_call_result_33911)
    
    # Call to set_aspect(...): (line 1272)
    # Processing the call arguments (line 1272)
    # Getting the type of 'aspect' (line 1272)
    aspect_33914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 19), 'aspect', False)
    # Processing the call keyword arguments (line 1272)
    # Getting the type of 'anchor' (line 1272)
    anchor_33915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 34), 'anchor', False)
    keyword_33916 = anchor_33915
    unicode_33917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1272, 53), 'unicode', u'box')
    keyword_33918 = unicode_33917
    kwargs_33919 = {'adjustable': keyword_33918, 'anchor': keyword_33916}
    # Getting the type of 'cax' (line 1272)
    cax_33912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 4), 'cax', False)
    # Obtaining the member 'set_aspect' of a type (line 1272)
    set_aspect_33913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 4), cax_33912, 'set_aspect')
    # Calling set_aspect(args, kwargs) (line 1272)
    set_aspect_call_result_33920 = invoke(stypy.reporting.localization.Localization(__file__, 1272, 4), set_aspect_33913, *[aspect_33914], **kwargs_33919)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1273)
    tuple_33921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1273, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1273)
    # Adding element type (line 1273)
    # Getting the type of 'cax' (line 1273)
    cax_33922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 11), 'cax')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1273, 11), tuple_33921, cax_33922)
    # Adding element type (line 1273)
    # Getting the type of 'kw' (line 1273)
    kw_33923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 16), 'kw')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1273, 11), tuple_33921, kw_33923)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1273, 4), 'stypy_return_type', tuple_33921)
    
    # ################# End of 'make_axes_gridspec(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'make_axes_gridspec' in the type store
    # Getting the type of 'stypy_return_type' (line 1178)
    stypy_return_type_33924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_33924)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'make_axes_gridspec'
    return stypy_return_type_33924

# Assigning a type to the variable 'make_axes_gridspec' (line 1178)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1178, 0), 'make_axes_gridspec', make_axes_gridspec)
# Declaration of the 'ColorbarPatch' class
# Getting the type of 'Colorbar' (line 1276)
Colorbar_33925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 20), 'Colorbar')

class ColorbarPatch(Colorbar_33925, ):
    unicode_33926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1285, (-1)), 'unicode', u'\n    A Colorbar which is created using :class:`~matplotlib.patches.Patch`\n    rather than the default :func:`~matplotlib.axes.pcolor`.\n\n    It uses a list of Patch instances instead of a\n    :class:`~matplotlib.collections.PatchCollection` because the\n    latter does not allow the hatch pattern to vary among the\n    members of the collection.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1286, 4, False)
        # Assigning a type to the variable 'self' (line 1287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1287, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarPatch.__init__', ['ax', 'mappable'], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'mappable'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a List to a Attribute (line 1290):
        
        # Assigning a List to a Attribute (line 1290):
        
        # Obtaining an instance of the builtin type 'list' (line 1290)
        list_33927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1290, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1290)
        
        # Getting the type of 'self' (line 1290)
        self_33928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 8), 'self')
        # Setting the type of the member 'solids_patches' of a type (line 1290)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1290, 8), self_33928, 'solids_patches', list_33927)
        
        # Call to __init__(...): (line 1291)
        # Processing the call arguments (line 1291)
        # Getting the type of 'self' (line 1291)
        self_33931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 26), 'self', False)
        # Getting the type of 'ax' (line 1291)
        ax_33932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 32), 'ax', False)
        # Getting the type of 'mappable' (line 1291)
        mappable_33933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 36), 'mappable', False)
        # Processing the call keyword arguments (line 1291)
        # Getting the type of 'kw' (line 1291)
        kw_33934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 48), 'kw', False)
        kwargs_33935 = {'kw_33934': kw_33934}
        # Getting the type of 'Colorbar' (line 1291)
        Colorbar_33929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 8), 'Colorbar', False)
        # Obtaining the member '__init__' of a type (line 1291)
        init___33930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 8), Colorbar_33929, '__init__')
        # Calling __init__(args, kwargs) (line 1291)
        init___call_result_33936 = invoke(stypy.reporting.localization.Localization(__file__, 1291, 8), init___33930, *[self_33931, ax_33932, mappable_33933], **kwargs_33935)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _add_solids(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_add_solids'
        module_type_store = module_type_store.open_function_context('_add_solids', 1293, 4, False)
        # Assigning a type to the variable 'self' (line 1294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ColorbarPatch._add_solids.__dict__.__setitem__('stypy_localization', localization)
        ColorbarPatch._add_solids.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ColorbarPatch._add_solids.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorbarPatch._add_solids.__dict__.__setitem__('stypy_function_name', 'ColorbarPatch._add_solids')
        ColorbarPatch._add_solids.__dict__.__setitem__('stypy_param_names_list', ['X', 'Y', 'C'])
        ColorbarPatch._add_solids.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorbarPatch._add_solids.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorbarPatch._add_solids.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorbarPatch._add_solids.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorbarPatch._add_solids.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorbarPatch._add_solids.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorbarPatch._add_solids', ['X', 'Y', 'C'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_add_solids', localization, ['X', 'Y', 'C'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_add_solids(...)' code ##################

        unicode_33937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, (-1)), 'unicode', u'\n        Draw the colors using :class:`~matplotlib.patches.Patch`;\n        optionally add separators.\n        ')
        
        # Assigning a Attribute to a Name (line 1301):
        
        # Assigning a Attribute to a Name (line 1301):
        # Getting the type of 'self' (line 1301)
        self_33938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 16), 'self')
        # Obtaining the member 'ax' of a type (line 1301)
        ax_33939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 16), self_33938, 'ax')
        # Obtaining the member '_hold' of a type (line 1301)
        _hold_33940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 16), ax_33939, '_hold')
        # Assigning a type to the variable '_hold' (line 1301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1301, 8), '_hold', _hold_33940)
        
        # Assigning a Name to a Attribute (line 1302):
        
        # Assigning a Name to a Attribute (line 1302):
        # Getting the type of 'True' (line 1302)
        True_33941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 24), 'True')
        # Getting the type of 'self' (line 1302)
        self_33942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 8), 'self')
        # Obtaining the member 'ax' of a type (line 1302)
        ax_33943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 8), self_33942, 'ax')
        # Setting the type of the member '_hold' of a type (line 1302)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 8), ax_33943, '_hold', True_33941)
        
        # Assigning a Dict to a Name (line 1304):
        
        # Assigning a Dict to a Name (line 1304):
        
        # Obtaining an instance of the builtin type 'dict' (line 1304)
        dict_33944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1304, 13), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1304)
        # Adding element type (key, value) (line 1304)
        unicode_33945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1304, 14), 'unicode', u'alpha')
        # Getting the type of 'self' (line 1304)
        self_33946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 23), 'self')
        # Obtaining the member 'alpha' of a type (line 1304)
        alpha_33947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 23), self_33946, 'alpha')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1304, 13), dict_33944, (unicode_33945, alpha_33947))
        
        # Assigning a type to the variable 'kw' (line 1304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 8), 'kw', dict_33944)
        
        # Assigning a Call to a Name (line 1306):
        
        # Assigning a Call to a Name (line 1306):
        
        # Call to len(...): (line 1306)
        # Processing the call arguments (line 1306)
        # Getting the type of 'C' (line 1306)
        C_33949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 25), 'C', False)
        # Processing the call keyword arguments (line 1306)
        kwargs_33950 = {}
        # Getting the type of 'len' (line 1306)
        len_33948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 21), 'len', False)
        # Calling len(args, kwargs) (line 1306)
        len_call_result_33951 = invoke(stypy.reporting.localization.Localization(__file__, 1306, 21), len_33948, *[C_33949], **kwargs_33950)
        
        # Assigning a type to the variable 'n_segments' (line 1306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1306, 8), 'n_segments', len_call_result_33951)
        
        # Assigning a BinOp to a Name (line 1309):
        
        # Assigning a BinOp to a Name (line 1309):
        # Getting the type of 'self' (line 1309)
        self_33952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 18), 'self')
        # Obtaining the member 'mappable' of a type (line 1309)
        mappable_33953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1309, 18), self_33952, 'mappable')
        # Obtaining the member 'hatches' of a type (line 1309)
        hatches_33954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1309, 18), mappable_33953, 'hatches')
        # Getting the type of 'n_segments' (line 1309)
        n_segments_33955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 42), 'n_segments')
        # Applying the binary operator '*' (line 1309)
        result_mul_33956 = python_operator(stypy.reporting.localization.Localization(__file__, 1309, 18), '*', hatches_33954, n_segments_33955)
        
        # Assigning a type to the variable 'hatches' (line 1309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1309, 8), 'hatches', result_mul_33956)
        
        # Assigning a List to a Name (line 1311):
        
        # Assigning a List to a Name (line 1311):
        
        # Obtaining an instance of the builtin type 'list' (line 1311)
        list_33957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1311, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1311)
        
        # Assigning a type to the variable 'patches' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 8), 'patches', list_33957)
        
        
        # Call to xrange(...): (line 1312)
        # Processing the call arguments (line 1312)
        
        # Call to len(...): (line 1312)
        # Processing the call arguments (line 1312)
        # Getting the type of 'X' (line 1312)
        X_33960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 28), 'X', False)
        # Processing the call keyword arguments (line 1312)
        kwargs_33961 = {}
        # Getting the type of 'len' (line 1312)
        len_33959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 24), 'len', False)
        # Calling len(args, kwargs) (line 1312)
        len_call_result_33962 = invoke(stypy.reporting.localization.Localization(__file__, 1312, 24), len_33959, *[X_33960], **kwargs_33961)
        
        int_33963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 33), 'int')
        # Applying the binary operator '-' (line 1312)
        result_sub_33964 = python_operator(stypy.reporting.localization.Localization(__file__, 1312, 24), '-', len_call_result_33962, int_33963)
        
        # Processing the call keyword arguments (line 1312)
        kwargs_33965 = {}
        # Getting the type of 'xrange' (line 1312)
        xrange_33958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 17), 'xrange', False)
        # Calling xrange(args, kwargs) (line 1312)
        xrange_call_result_33966 = invoke(stypy.reporting.localization.Localization(__file__, 1312, 17), xrange_33958, *[result_sub_33964], **kwargs_33965)
        
        # Testing the type of a for loop iterable (line 1312)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1312, 8), xrange_call_result_33966)
        # Getting the type of the for loop variable (line 1312)
        for_loop_var_33967 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1312, 8), xrange_call_result_33966)
        # Assigning a type to the variable 'i' (line 1312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 8), 'i', for_loop_var_33967)
        # SSA begins for a for statement (line 1312)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 1313):
        
        # Assigning a Subscript to a Name (line 1313):
        
        # Obtaining the type of the subscript
        int_33968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1313, 23), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1313)
        i_33969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 20), 'i')
        # Getting the type of 'C' (line 1313)
        C_33970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 18), 'C')
        # Obtaining the member '__getitem__' of a type (line 1313)
        getitem___33971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 18), C_33970, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1313)
        subscript_call_result_33972 = invoke(stypy.reporting.localization.Localization(__file__, 1313, 18), getitem___33971, i_33969)
        
        # Obtaining the member '__getitem__' of a type (line 1313)
        getitem___33973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 18), subscript_call_result_33972, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1313)
        subscript_call_result_33974 = invoke(stypy.reporting.localization.Localization(__file__, 1313, 18), getitem___33973, int_33968)
        
        # Assigning a type to the variable 'val' (line 1313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1313, 12), 'val', subscript_call_result_33974)
        
        # Assigning a Subscript to a Name (line 1314):
        
        # Assigning a Subscript to a Name (line 1314):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1314)
        i_33975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 28), 'i')
        # Getting the type of 'hatches' (line 1314)
        hatches_33976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 20), 'hatches')
        # Obtaining the member '__getitem__' of a type (line 1314)
        getitem___33977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 20), hatches_33976, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1314)
        subscript_call_result_33978 = invoke(stypy.reporting.localization.Localization(__file__, 1314, 20), getitem___33977, i_33975)
        
        # Assigning a type to the variable 'hatch' (line 1314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 12), 'hatch', subscript_call_result_33978)
        
        # Assigning a Call to a Name (line 1316):
        
        # Assigning a Call to a Name (line 1316):
        
        # Call to array(...): (line 1316)
        # Processing the call arguments (line 1316)
        
        # Obtaining an instance of the builtin type 'list' (line 1316)
        list_33981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1316)
        # Adding element type (line 1316)
        
        # Obtaining an instance of the builtin type 'list' (line 1316)
        list_33982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1316)
        # Adding element type (line 1316)
        
        # Obtaining the type of the subscript
        int_33983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 33), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1316)
        i_33984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 30), 'i', False)
        # Getting the type of 'X' (line 1316)
        X_33985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 28), 'X', False)
        # Obtaining the member '__getitem__' of a type (line 1316)
        getitem___33986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 28), X_33985, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1316)
        subscript_call_result_33987 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 28), getitem___33986, i_33984)
        
        # Obtaining the member '__getitem__' of a type (line 1316)
        getitem___33988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 28), subscript_call_result_33987, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1316)
        subscript_call_result_33989 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 28), getitem___33988, int_33983)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1316, 27), list_33982, subscript_call_result_33989)
        # Adding element type (line 1316)
        
        # Obtaining the type of the subscript
        int_33990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 42), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1316)
        i_33991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 39), 'i', False)
        # Getting the type of 'Y' (line 1316)
        Y_33992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 37), 'Y', False)
        # Obtaining the member '__getitem__' of a type (line 1316)
        getitem___33993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 37), Y_33992, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1316)
        subscript_call_result_33994 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 37), getitem___33993, i_33991)
        
        # Obtaining the member '__getitem__' of a type (line 1316)
        getitem___33995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 37), subscript_call_result_33994, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1316)
        subscript_call_result_33996 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 37), getitem___33995, int_33990)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1316, 27), list_33982, subscript_call_result_33996)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1316, 26), list_33981, list_33982)
        # Adding element type (line 1316)
        
        # Obtaining an instance of the builtin type 'list' (line 1317)
        list_33997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1317)
        # Adding element type (line 1317)
        
        # Obtaining the type of the subscript
        int_33998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 33), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1317)
        i_33999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 30), 'i', False)
        # Getting the type of 'X' (line 1317)
        X_34000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 28), 'X', False)
        # Obtaining the member '__getitem__' of a type (line 1317)
        getitem___34001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1317, 28), X_34000, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1317)
        subscript_call_result_34002 = invoke(stypy.reporting.localization.Localization(__file__, 1317, 28), getitem___34001, i_33999)
        
        # Obtaining the member '__getitem__' of a type (line 1317)
        getitem___34003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1317, 28), subscript_call_result_34002, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1317)
        subscript_call_result_34004 = invoke(stypy.reporting.localization.Localization(__file__, 1317, 28), getitem___34003, int_33998)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1317, 27), list_33997, subscript_call_result_34004)
        # Adding element type (line 1317)
        
        # Obtaining the type of the subscript
        int_34005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 42), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1317)
        i_34006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 39), 'i', False)
        # Getting the type of 'Y' (line 1317)
        Y_34007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 37), 'Y', False)
        # Obtaining the member '__getitem__' of a type (line 1317)
        getitem___34008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1317, 37), Y_34007, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1317)
        subscript_call_result_34009 = invoke(stypy.reporting.localization.Localization(__file__, 1317, 37), getitem___34008, i_34006)
        
        # Obtaining the member '__getitem__' of a type (line 1317)
        getitem___34010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1317, 37), subscript_call_result_34009, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1317)
        subscript_call_result_34011 = invoke(stypy.reporting.localization.Localization(__file__, 1317, 37), getitem___34010, int_34005)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1317, 27), list_33997, subscript_call_result_34011)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1316, 26), list_33981, list_33997)
        # Adding element type (line 1316)
        
        # Obtaining an instance of the builtin type 'list' (line 1318)
        list_34012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1318)
        # Adding element type (line 1318)
        
        # Obtaining the type of the subscript
        int_34013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 37), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1318)
        i_34014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 30), 'i', False)
        int_34015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 34), 'int')
        # Applying the binary operator '+' (line 1318)
        result_add_34016 = python_operator(stypy.reporting.localization.Localization(__file__, 1318, 30), '+', i_34014, int_34015)
        
        # Getting the type of 'X' (line 1318)
        X_34017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 28), 'X', False)
        # Obtaining the member '__getitem__' of a type (line 1318)
        getitem___34018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 28), X_34017, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1318)
        subscript_call_result_34019 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 28), getitem___34018, result_add_34016)
        
        # Obtaining the member '__getitem__' of a type (line 1318)
        getitem___34020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 28), subscript_call_result_34019, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1318)
        subscript_call_result_34021 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 28), getitem___34020, int_34013)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1318, 27), list_34012, subscript_call_result_34021)
        # Adding element type (line 1318)
        
        # Obtaining the type of the subscript
        int_34022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 50), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1318)
        i_34023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 43), 'i', False)
        int_34024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 47), 'int')
        # Applying the binary operator '+' (line 1318)
        result_add_34025 = python_operator(stypy.reporting.localization.Localization(__file__, 1318, 43), '+', i_34023, int_34024)
        
        # Getting the type of 'Y' (line 1318)
        Y_34026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 41), 'Y', False)
        # Obtaining the member '__getitem__' of a type (line 1318)
        getitem___34027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 41), Y_34026, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1318)
        subscript_call_result_34028 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 41), getitem___34027, result_add_34025)
        
        # Obtaining the member '__getitem__' of a type (line 1318)
        getitem___34029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 41), subscript_call_result_34028, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1318)
        subscript_call_result_34030 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 41), getitem___34029, int_34022)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1318, 27), list_34012, subscript_call_result_34030)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1316, 26), list_33981, list_34012)
        # Adding element type (line 1316)
        
        # Obtaining an instance of the builtin type 'list' (line 1319)
        list_34031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1319, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1319)
        # Adding element type (line 1319)
        
        # Obtaining the type of the subscript
        int_34032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1319, 37), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1319)
        i_34033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 30), 'i', False)
        int_34034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1319, 34), 'int')
        # Applying the binary operator '+' (line 1319)
        result_add_34035 = python_operator(stypy.reporting.localization.Localization(__file__, 1319, 30), '+', i_34033, int_34034)
        
        # Getting the type of 'X' (line 1319)
        X_34036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 28), 'X', False)
        # Obtaining the member '__getitem__' of a type (line 1319)
        getitem___34037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 28), X_34036, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1319)
        subscript_call_result_34038 = invoke(stypy.reporting.localization.Localization(__file__, 1319, 28), getitem___34037, result_add_34035)
        
        # Obtaining the member '__getitem__' of a type (line 1319)
        getitem___34039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 28), subscript_call_result_34038, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1319)
        subscript_call_result_34040 = invoke(stypy.reporting.localization.Localization(__file__, 1319, 28), getitem___34039, int_34032)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1319, 27), list_34031, subscript_call_result_34040)
        # Adding element type (line 1319)
        
        # Obtaining the type of the subscript
        int_34041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1319, 50), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1319)
        i_34042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 43), 'i', False)
        int_34043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1319, 47), 'int')
        # Applying the binary operator '+' (line 1319)
        result_add_34044 = python_operator(stypy.reporting.localization.Localization(__file__, 1319, 43), '+', i_34042, int_34043)
        
        # Getting the type of 'Y' (line 1319)
        Y_34045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 41), 'Y', False)
        # Obtaining the member '__getitem__' of a type (line 1319)
        getitem___34046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 41), Y_34045, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1319)
        subscript_call_result_34047 = invoke(stypy.reporting.localization.Localization(__file__, 1319, 41), getitem___34046, result_add_34044)
        
        # Obtaining the member '__getitem__' of a type (line 1319)
        getitem___34048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 41), subscript_call_result_34047, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1319)
        subscript_call_result_34049 = invoke(stypy.reporting.localization.Localization(__file__, 1319, 41), getitem___34048, int_34041)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1319, 27), list_34031, subscript_call_result_34049)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1316, 26), list_33981, list_34031)
        
        # Processing the call keyword arguments (line 1316)
        kwargs_34050 = {}
        # Getting the type of 'np' (line 1316)
        np_33979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 17), 'np', False)
        # Obtaining the member 'array' of a type (line 1316)
        array_33980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 17), np_33979, 'array')
        # Calling array(args, kwargs) (line 1316)
        array_call_result_34051 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 17), array_33980, *[list_33981], **kwargs_34050)
        
        # Assigning a type to the variable 'xy' (line 1316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1316, 12), 'xy', array_call_result_34051)
        
        
        # Getting the type of 'self' (line 1321)
        self_34052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 15), 'self')
        # Obtaining the member 'orientation' of a type (line 1321)
        orientation_34053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1321, 15), self_34052, 'orientation')
        unicode_34054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1321, 35), 'unicode', u'horizontal')
        # Applying the binary operator '==' (line 1321)
        result_eq_34055 = python_operator(stypy.reporting.localization.Localization(__file__, 1321, 15), '==', orientation_34053, unicode_34054)
        
        # Testing the type of an if condition (line 1321)
        if_condition_34056 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1321, 12), result_eq_34055)
        # Assigning a type to the variable 'if_condition_34056' (line 1321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1321, 12), 'if_condition_34056', if_condition_34056)
        # SSA begins for if statement (line 1321)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1323):
        
        # Assigning a Subscript to a Name (line 1323):
        
        # Obtaining the type of the subscript
        Ellipsis_34057 = Ellipsis
        int_34058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1323, 31), 'int')
        slice_34059 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1323, 21), None, None, int_34058)
        # Getting the type of 'xy' (line 1323)
        xy_34060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 21), 'xy')
        # Obtaining the member '__getitem__' of a type (line 1323)
        getitem___34061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1323, 21), xy_34060, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1323)
        subscript_call_result_34062 = invoke(stypy.reporting.localization.Localization(__file__, 1323, 21), getitem___34061, (Ellipsis_34057, slice_34059))
        
        # Assigning a type to the variable 'xy' (line 1323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1323, 16), 'xy', subscript_call_result_34062)
        # SSA join for if statement (line 1321)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1325):
        
        # Assigning a Call to a Name (line 1325):
        
        # Call to PathPatch(...): (line 1325)
        # Processing the call arguments (line 1325)
        
        # Call to Path(...): (line 1325)
        # Processing the call arguments (line 1325)
        # Getting the type of 'xy' (line 1325)
        xy_34067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 50), 'xy', False)
        # Processing the call keyword arguments (line 1325)
        kwargs_34068 = {}
        # Getting the type of 'mpath' (line 1325)
        mpath_34065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 39), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 1325)
        Path_34066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1325, 39), mpath_34065, 'Path')
        # Calling Path(args, kwargs) (line 1325)
        Path_call_result_34069 = invoke(stypy.reporting.localization.Localization(__file__, 1325, 39), Path_34066, *[xy_34067], **kwargs_34068)
        
        # Processing the call keyword arguments (line 1325)
        
        # Call to cmap(...): (line 1326)
        # Processing the call arguments (line 1326)
        
        # Call to norm(...): (line 1326)
        # Processing the call arguments (line 1326)
        # Getting the type of 'val' (line 1326)
        val_34074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 69), 'val', False)
        # Processing the call keyword arguments (line 1326)
        kwargs_34075 = {}
        # Getting the type of 'self' (line 1326)
        self_34072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 59), 'self', False)
        # Obtaining the member 'norm' of a type (line 1326)
        norm_34073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1326, 59), self_34072, 'norm')
        # Calling norm(args, kwargs) (line 1326)
        norm_call_result_34076 = invoke(stypy.reporting.localization.Localization(__file__, 1326, 59), norm_34073, *[val_34074], **kwargs_34075)
        
        # Processing the call keyword arguments (line 1326)
        kwargs_34077 = {}
        # Getting the type of 'self' (line 1326)
        self_34070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 49), 'self', False)
        # Obtaining the member 'cmap' of a type (line 1326)
        cmap_34071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1326, 49), self_34070, 'cmap')
        # Calling cmap(args, kwargs) (line 1326)
        cmap_call_result_34078 = invoke(stypy.reporting.localization.Localization(__file__, 1326, 49), cmap_34071, *[norm_call_result_34076], **kwargs_34077)
        
        keyword_34079 = cmap_call_result_34078
        # Getting the type of 'hatch' (line 1327)
        hatch_34080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 45), 'hatch', False)
        keyword_34081 = hatch_34080
        int_34082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 62), 'int')
        keyword_34083 = int_34082
        # Getting the type of 'False' (line 1328)
        False_34084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 51), 'False', False)
        keyword_34085 = False_34084
        # Getting the type of 'kw' (line 1328)
        kw_34086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 60), 'kw', False)
        kwargs_34087 = {'linewidth': keyword_34083, 'antialiased': keyword_34085, 'facecolor': keyword_34079, 'kw_34086': kw_34086, 'hatch': keyword_34081}
        # Getting the type of 'mpatches' (line 1325)
        mpatches_34063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 20), 'mpatches', False)
        # Obtaining the member 'PathPatch' of a type (line 1325)
        PathPatch_34064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1325, 20), mpatches_34063, 'PathPatch')
        # Calling PathPatch(args, kwargs) (line 1325)
        PathPatch_call_result_34088 = invoke(stypy.reporting.localization.Localization(__file__, 1325, 20), PathPatch_34064, *[Path_call_result_34069], **kwargs_34087)
        
        # Assigning a type to the variable 'patch' (line 1325)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1325, 12), 'patch', PathPatch_call_result_34088)
        
        # Call to add_patch(...): (line 1329)
        # Processing the call arguments (line 1329)
        # Getting the type of 'patch' (line 1329)
        patch_34092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 30), 'patch', False)
        # Processing the call keyword arguments (line 1329)
        kwargs_34093 = {}
        # Getting the type of 'self' (line 1329)
        self_34089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 1329)
        ax_34090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1329, 12), self_34089, 'ax')
        # Obtaining the member 'add_patch' of a type (line 1329)
        add_patch_34091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1329, 12), ax_34090, 'add_patch')
        # Calling add_patch(args, kwargs) (line 1329)
        add_patch_call_result_34094 = invoke(stypy.reporting.localization.Localization(__file__, 1329, 12), add_patch_34091, *[patch_34092], **kwargs_34093)
        
        
        # Call to append(...): (line 1330)
        # Processing the call arguments (line 1330)
        # Getting the type of 'patch' (line 1330)
        patch_34097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 27), 'patch', False)
        # Processing the call keyword arguments (line 1330)
        kwargs_34098 = {}
        # Getting the type of 'patches' (line 1330)
        patches_34095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 12), 'patches', False)
        # Obtaining the member 'append' of a type (line 1330)
        append_34096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1330, 12), patches_34095, 'append')
        # Calling append(args, kwargs) (line 1330)
        append_call_result_34099 = invoke(stypy.reporting.localization.Localization(__file__, 1330, 12), append_34096, *[patch_34097], **kwargs_34098)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1332)
        self_34100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 11), 'self')
        # Obtaining the member 'solids_patches' of a type (line 1332)
        solids_patches_34101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1332, 11), self_34100, 'solids_patches')
        # Testing the type of an if condition (line 1332)
        if_condition_34102 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1332, 8), solids_patches_34101)
        # Assigning a type to the variable 'if_condition_34102' (line 1332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1332, 8), 'if_condition_34102', if_condition_34102)
        # SSA begins for if statement (line 1332)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 1333)
        self_34103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 25), 'self')
        # Obtaining the member 'solids_patches' of a type (line 1333)
        solids_patches_34104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1333, 25), self_34103, 'solids_patches')
        # Testing the type of a for loop iterable (line 1333)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1333, 12), solids_patches_34104)
        # Getting the type of the for loop variable (line 1333)
        for_loop_var_34105 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1333, 12), solids_patches_34104)
        # Assigning a type to the variable 'solid' (line 1333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1333, 12), 'solid', for_loop_var_34105)
        # SSA begins for a for statement (line 1333)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to remove(...): (line 1334)
        # Processing the call keyword arguments (line 1334)
        kwargs_34108 = {}
        # Getting the type of 'solid' (line 1334)
        solid_34106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 16), 'solid', False)
        # Obtaining the member 'remove' of a type (line 1334)
        remove_34107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 16), solid_34106, 'remove')
        # Calling remove(args, kwargs) (line 1334)
        remove_call_result_34109 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 16), remove_34107, *[], **kwargs_34108)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1332)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1336):
        
        # Assigning a Name to a Attribute (line 1336):
        # Getting the type of 'patches' (line 1336)
        patches_34110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 30), 'patches')
        # Getting the type of 'self' (line 1336)
        self_34111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 8), 'self')
        # Setting the type of the member 'solids_patches' of a type (line 1336)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 8), self_34111, 'solids_patches', patches_34110)
        
        
        # Getting the type of 'self' (line 1338)
        self_34112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 11), 'self')
        # Obtaining the member 'dividers' of a type (line 1338)
        dividers_34113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1338, 11), self_34112, 'dividers')
        # Getting the type of 'None' (line 1338)
        None_34114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 32), 'None')
        # Applying the binary operator 'isnot' (line 1338)
        result_is_not_34115 = python_operator(stypy.reporting.localization.Localization(__file__, 1338, 11), 'isnot', dividers_34113, None_34114)
        
        # Testing the type of an if condition (line 1338)
        if_condition_34116 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1338, 8), result_is_not_34115)
        # Assigning a type to the variable 'if_condition_34116' (line 1338)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1338, 8), 'if_condition_34116', if_condition_34116)
        # SSA begins for if statement (line 1338)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to remove(...): (line 1339)
        # Processing the call keyword arguments (line 1339)
        kwargs_34120 = {}
        # Getting the type of 'self' (line 1339)
        self_34117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 12), 'self', False)
        # Obtaining the member 'dividers' of a type (line 1339)
        dividers_34118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1339, 12), self_34117, 'dividers')
        # Obtaining the member 'remove' of a type (line 1339)
        remove_34119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1339, 12), dividers_34118, 'remove')
        # Calling remove(args, kwargs) (line 1339)
        remove_call_result_34121 = invoke(stypy.reporting.localization.Localization(__file__, 1339, 12), remove_34119, *[], **kwargs_34120)
        
        
        # Assigning a Name to a Attribute (line 1340):
        
        # Assigning a Name to a Attribute (line 1340):
        # Getting the type of 'None' (line 1340)
        None_34122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 28), 'None')
        # Getting the type of 'self' (line 1340)
        self_34123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 12), 'self')
        # Setting the type of the member 'dividers' of a type (line 1340)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 12), self_34123, 'dividers', None_34122)
        # SSA join for if statement (line 1338)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1342)
        self_34124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 11), 'self')
        # Obtaining the member 'drawedges' of a type (line 1342)
        drawedges_34125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1342, 11), self_34124, 'drawedges')
        # Testing the type of an if condition (line 1342)
        if_condition_34126 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1342, 8), drawedges_34125)
        # Assigning a type to the variable 'if_condition_34126' (line 1342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1342, 8), 'if_condition_34126', if_condition_34126)
        # SSA begins for if statement (line 1342)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1343):
        
        # Assigning a Call to a Attribute (line 1343):
        
        # Call to LineCollection(...): (line 1343)
        # Processing the call arguments (line 1343)
        
        # Call to _edges(...): (line 1343)
        # Processing the call arguments (line 1343)
        # Getting the type of 'X' (line 1343)
        X_34131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 67), 'X', False)
        # Getting the type of 'Y' (line 1343)
        Y_34132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 70), 'Y', False)
        # Processing the call keyword arguments (line 1343)
        kwargs_34133 = {}
        # Getting the type of 'self' (line 1343)
        self_34129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 55), 'self', False)
        # Obtaining the member '_edges' of a type (line 1343)
        _edges_34130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 55), self_34129, '_edges')
        # Calling _edges(args, kwargs) (line 1343)
        _edges_call_result_34134 = invoke(stypy.reporting.localization.Localization(__file__, 1343, 55), _edges_34130, *[X_34131, Y_34132], **kwargs_34133)
        
        # Processing the call keyword arguments (line 1343)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1344)
        tuple_34135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1344, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1344)
        # Adding element type (line 1344)
        
        # Obtaining the type of the subscript
        unicode_34136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1344, 41), 'unicode', u'axes.edgecolor')
        # Getting the type of 'mpl' (line 1344)
        mpl_34137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 28), 'mpl', False)
        # Obtaining the member 'rcParams' of a type (line 1344)
        rcParams_34138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1344, 28), mpl_34137, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1344)
        getitem___34139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1344, 28), rcParams_34138, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1344)
        subscript_call_result_34140 = invoke(stypy.reporting.localization.Localization(__file__, 1344, 28), getitem___34139, unicode_34136)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1344, 28), tuple_34135, subscript_call_result_34140)
        
        keyword_34141 = tuple_34135
        
        # Obtaining an instance of the builtin type 'tuple' (line 1345)
        tuple_34142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1345)
        # Adding element type (line 1345)
        float_34143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 32), 'float')
        
        # Obtaining the type of the subscript
        unicode_34144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 51), 'unicode', u'axes.linewidth')
        # Getting the type of 'mpl' (line 1345)
        mpl_34145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 38), 'mpl', False)
        # Obtaining the member 'rcParams' of a type (line 1345)
        rcParams_34146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1345, 38), mpl_34145, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1345)
        getitem___34147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1345, 38), rcParams_34146, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1345)
        subscript_call_result_34148 = invoke(stypy.reporting.localization.Localization(__file__, 1345, 38), getitem___34147, unicode_34144)
        
        # Applying the binary operator '*' (line 1345)
        result_mul_34149 = python_operator(stypy.reporting.localization.Localization(__file__, 1345, 32), '*', float_34143, subscript_call_result_34148)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1345, 32), tuple_34142, result_mul_34149)
        
        keyword_34150 = tuple_34142
        kwargs_34151 = {'colors': keyword_34141, 'linewidths': keyword_34150}
        # Getting the type of 'collections' (line 1343)
        collections_34127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 28), 'collections', False)
        # Obtaining the member 'LineCollection' of a type (line 1343)
        LineCollection_34128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 28), collections_34127, 'LineCollection')
        # Calling LineCollection(args, kwargs) (line 1343)
        LineCollection_call_result_34152 = invoke(stypy.reporting.localization.Localization(__file__, 1343, 28), LineCollection_34128, *[_edges_call_result_34134], **kwargs_34151)
        
        # Getting the type of 'self' (line 1343)
        self_34153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 12), 'self')
        # Setting the type of the member 'dividers' of a type (line 1343)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 12), self_34153, 'dividers', LineCollection_call_result_34152)
        
        # Call to add_collection(...): (line 1346)
        # Processing the call arguments (line 1346)
        # Getting the type of 'self' (line 1346)
        self_34157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 35), 'self', False)
        # Obtaining the member 'dividers' of a type (line 1346)
        dividers_34158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1346, 35), self_34157, 'dividers')
        # Processing the call keyword arguments (line 1346)
        kwargs_34159 = {}
        # Getting the type of 'self' (line 1346)
        self_34154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 1346)
        ax_34155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1346, 12), self_34154, 'ax')
        # Obtaining the member 'add_collection' of a type (line 1346)
        add_collection_34156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1346, 12), ax_34155, 'add_collection')
        # Calling add_collection(args, kwargs) (line 1346)
        add_collection_call_result_34160 = invoke(stypy.reporting.localization.Localization(__file__, 1346, 12), add_collection_34156, *[dividers_34158], **kwargs_34159)
        
        # SSA join for if statement (line 1342)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1348):
        
        # Assigning a Name to a Attribute (line 1348):
        # Getting the type of '_hold' (line 1348)
        _hold_34161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 24), '_hold')
        # Getting the type of 'self' (line 1348)
        self_34162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 8), 'self')
        # Obtaining the member 'ax' of a type (line 1348)
        ax_34163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 8), self_34162, 'ax')
        # Setting the type of the member '_hold' of a type (line 1348)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 8), ax_34163, '_hold', _hold_34161)
        
        # ################# End of '_add_solids(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_add_solids' in the type store
        # Getting the type of 'stypy_return_type' (line 1293)
        stypy_return_type_34164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_34164)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_add_solids'
        return stypy_return_type_34164


# Assigning a type to the variable 'ColorbarPatch' (line 1276)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 0), 'ColorbarPatch', ColorbarPatch)

@norecursion
def colorbar_factory(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'colorbar_factory'
    module_type_store = module_type_store.open_function_context('colorbar_factory', 1351, 0, False)
    
    # Passed parameters checking function
    colorbar_factory.stypy_localization = localization
    colorbar_factory.stypy_type_of_self = None
    colorbar_factory.stypy_type_store = module_type_store
    colorbar_factory.stypy_function_name = 'colorbar_factory'
    colorbar_factory.stypy_param_names_list = ['cax', 'mappable']
    colorbar_factory.stypy_varargs_param_name = None
    colorbar_factory.stypy_kwargs_param_name = 'kwargs'
    colorbar_factory.stypy_call_defaults = defaults
    colorbar_factory.stypy_call_varargs = varargs
    colorbar_factory.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'colorbar_factory', ['cax', 'mappable'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'colorbar_factory', localization, ['cax', 'mappable'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'colorbar_factory(...)' code ##################

    unicode_34165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1358, (-1)), 'unicode', u'\n    Creates a colorbar on the given axes for the given mappable.\n\n    Typically, for automatic colorbar placement given only a mappable use\n    :meth:`~matplotlib.figure.Figure.colorbar`.\n\n    ')
    
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 1361)
    # Processing the call arguments (line 1361)
    # Getting the type of 'mappable' (line 1361)
    mappable_34167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 19), 'mappable', False)
    # Getting the type of 'contour' (line 1361)
    contour_34168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 29), 'contour', False)
    # Obtaining the member 'ContourSet' of a type (line 1361)
    ContourSet_34169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1361, 29), contour_34168, 'ContourSet')
    # Processing the call keyword arguments (line 1361)
    kwargs_34170 = {}
    # Getting the type of 'isinstance' (line 1361)
    isinstance_34166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1361)
    isinstance_call_result_34171 = invoke(stypy.reporting.localization.Localization(__file__, 1361, 8), isinstance_34166, *[mappable_34167, ContourSet_34169], **kwargs_34170)
    
    
    # Call to any(...): (line 1362)
    # Processing the call arguments (line 1362)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'mappable' (line 1362)
    mappable_34176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 52), 'mappable', False)
    # Obtaining the member 'hatches' of a type (line 1362)
    hatches_34177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 52), mappable_34176, 'hatches')
    comprehension_34178 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1362, 21), hatches_34177)
    # Assigning a type to the variable 'hatch' (line 1362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 21), 'hatch', comprehension_34178)
    
    # Getting the type of 'hatch' (line 1362)
    hatch_34173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 21), 'hatch', False)
    # Getting the type of 'None' (line 1362)
    None_34174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 34), 'None', False)
    # Applying the binary operator 'isnot' (line 1362)
    result_is_not_34175 = python_operator(stypy.reporting.localization.Localization(__file__, 1362, 21), 'isnot', hatch_34173, None_34174)
    
    list_34179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1362, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1362, 21), list_34179, result_is_not_34175)
    # Processing the call keyword arguments (line 1362)
    kwargs_34180 = {}
    # Getting the type of 'any' (line 1362)
    any_34172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 16), 'any', False)
    # Calling any(args, kwargs) (line 1362)
    any_call_result_34181 = invoke(stypy.reporting.localization.Localization(__file__, 1362, 16), any_34172, *[list_34179], **kwargs_34180)
    
    # Applying the binary operator 'and' (line 1361)
    result_and_keyword_34182 = python_operator(stypy.reporting.localization.Localization(__file__, 1361, 8), 'and', isinstance_call_result_34171, any_call_result_34181)
    
    # Testing the type of an if condition (line 1361)
    if_condition_34183 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1361, 4), result_and_keyword_34182)
    # Assigning a type to the variable 'if_condition_34183' (line 1361)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 4), 'if_condition_34183', if_condition_34183)
    # SSA begins for if statement (line 1361)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1363):
    
    # Assigning a Call to a Name (line 1363):
    
    # Call to ColorbarPatch(...): (line 1363)
    # Processing the call arguments (line 1363)
    # Getting the type of 'cax' (line 1363)
    cax_34185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 27), 'cax', False)
    # Getting the type of 'mappable' (line 1363)
    mappable_34186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 32), 'mappable', False)
    # Processing the call keyword arguments (line 1363)
    # Getting the type of 'kwargs' (line 1363)
    kwargs_34187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 44), 'kwargs', False)
    kwargs_34188 = {'kwargs_34187': kwargs_34187}
    # Getting the type of 'ColorbarPatch' (line 1363)
    ColorbarPatch_34184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 13), 'ColorbarPatch', False)
    # Calling ColorbarPatch(args, kwargs) (line 1363)
    ColorbarPatch_call_result_34189 = invoke(stypy.reporting.localization.Localization(__file__, 1363, 13), ColorbarPatch_34184, *[cax_34185, mappable_34186], **kwargs_34188)
    
    # Assigning a type to the variable 'cb' (line 1363)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1363, 8), 'cb', ColorbarPatch_call_result_34189)
    # SSA branch for the else part of an if statement (line 1361)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1365):
    
    # Assigning a Call to a Name (line 1365):
    
    # Call to Colorbar(...): (line 1365)
    # Processing the call arguments (line 1365)
    # Getting the type of 'cax' (line 1365)
    cax_34191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 22), 'cax', False)
    # Getting the type of 'mappable' (line 1365)
    mappable_34192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 27), 'mappable', False)
    # Processing the call keyword arguments (line 1365)
    # Getting the type of 'kwargs' (line 1365)
    kwargs_34193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 39), 'kwargs', False)
    kwargs_34194 = {'kwargs_34193': kwargs_34193}
    # Getting the type of 'Colorbar' (line 1365)
    Colorbar_34190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 13), 'Colorbar', False)
    # Calling Colorbar(args, kwargs) (line 1365)
    Colorbar_call_result_34195 = invoke(stypy.reporting.localization.Localization(__file__, 1365, 13), Colorbar_34190, *[cax_34191, mappable_34192], **kwargs_34194)
    
    # Assigning a type to the variable 'cb' (line 1365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 8), 'cb', Colorbar_call_result_34195)
    # SSA join for if statement (line 1361)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1367):
    
    # Assigning a Call to a Name (line 1367):
    
    # Call to connect(...): (line 1367)
    # Processing the call arguments (line 1367)
    unicode_34199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1367, 39), 'unicode', u'changed')
    # Getting the type of 'cb' (line 1367)
    cb_34200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 50), 'cb', False)
    # Obtaining the member 'on_mappable_changed' of a type (line 1367)
    on_mappable_changed_34201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 50), cb_34200, 'on_mappable_changed')
    # Processing the call keyword arguments (line 1367)
    kwargs_34202 = {}
    # Getting the type of 'mappable' (line 1367)
    mappable_34196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 10), 'mappable', False)
    # Obtaining the member 'callbacksSM' of a type (line 1367)
    callbacksSM_34197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 10), mappable_34196, 'callbacksSM')
    # Obtaining the member 'connect' of a type (line 1367)
    connect_34198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 10), callbacksSM_34197, 'connect')
    # Calling connect(args, kwargs) (line 1367)
    connect_call_result_34203 = invoke(stypy.reporting.localization.Localization(__file__, 1367, 10), connect_34198, *[unicode_34199, on_mappable_changed_34201], **kwargs_34202)
    
    # Assigning a type to the variable 'cid' (line 1367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1367, 4), 'cid', connect_call_result_34203)
    
    # Assigning a Name to a Attribute (line 1368):
    
    # Assigning a Name to a Attribute (line 1368):
    # Getting the type of 'cb' (line 1368)
    cb_34204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 24), 'cb')
    # Getting the type of 'mappable' (line 1368)
    mappable_34205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 4), 'mappable')
    # Setting the type of the member 'colorbar' of a type (line 1368)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 4), mappable_34205, 'colorbar', cb_34204)
    
    # Assigning a Name to a Attribute (line 1369):
    
    # Assigning a Name to a Attribute (line 1369):
    # Getting the type of 'cid' (line 1369)
    cid_34206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 28), 'cid')
    # Getting the type of 'mappable' (line 1369)
    mappable_34207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 4), 'mappable')
    # Setting the type of the member 'colorbar_cid' of a type (line 1369)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1369, 4), mappable_34207, 'colorbar_cid', cid_34206)
    # Getting the type of 'cb' (line 1371)
    cb_34208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 11), 'cb')
    # Assigning a type to the variable 'stypy_return_type' (line 1371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 4), 'stypy_return_type', cb_34208)
    
    # ################# End of 'colorbar_factory(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'colorbar_factory' in the type store
    # Getting the type of 'stypy_return_type' (line 1351)
    stypy_return_type_34209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_34209)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'colorbar_factory'
    return stypy_return_type_34209

# Assigning a type to the variable 'colorbar_factory' (line 1351)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 0), 'colorbar_factory', colorbar_factory)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
