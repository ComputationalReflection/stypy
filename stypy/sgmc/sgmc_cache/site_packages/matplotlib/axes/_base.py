
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: from __future__ import (absolute_import, division, print_function,
2:                         unicode_literals)
3: 
4: from collections import OrderedDict
5: 
6: import six
7: from six.moves import xrange
8: 
9: import itertools
10: import warnings
11: import math
12: from operator import attrgetter
13: 
14: import numpy as np
15: 
16: import matplotlib
17: 
18: from matplotlib import cbook
19: from matplotlib.cbook import (_check_1d, _string_to_bool, iterable,
20:                               index_of, get_label)
21: from matplotlib import docstring
22: import matplotlib.colors as mcolors
23: import matplotlib.lines as mlines
24: import matplotlib.patches as mpatches
25: import matplotlib.artist as martist
26: import matplotlib.transforms as mtransforms
27: import matplotlib.ticker as mticker
28: import matplotlib.axis as maxis
29: import matplotlib.scale as mscale
30: import matplotlib.spines as mspines
31: import matplotlib.font_manager as font_manager
32: import matplotlib.text as mtext
33: import matplotlib.image as mimage
34: from matplotlib.offsetbox import OffsetBox
35: from matplotlib.artist import allow_rasterization
36: 
37: from matplotlib.rcsetup import cycler
38: from matplotlib.rcsetup import validate_axisbelow
39: 
40: rcParams = matplotlib.rcParams
41: 
42: is_string_like = cbook.is_string_like
43: is_sequence_of_strings = cbook.is_sequence_of_strings
44: 
45: _hold_msg = '''axes.hold is deprecated.
46:     See the API Changes document (http://matplotlib.org/api/api_changes.html)
47:     for more details.'''
48: 
49: 
50: def _process_plot_format(fmt):
51:     '''
52:     Process a MATLAB style color/line style format string.  Return a
53:     (*linestyle*, *color*) tuple as a result of the processing.  Default
54:     values are ('-', 'b').  Example format strings include:
55: 
56:     * 'ko': black circles
57:     * '.b': blue dots
58:     * 'r--': red dashed lines
59:     * 'C2--': the third color in the color cycle, dashed lines
60: 
61:     .. seealso::
62: 
63:         :func:`~matplotlib.Line2D.lineStyles` and
64:         :func:`~matplotlib.pyplot.colors`
65:             for all possible styles and color format string.
66:     '''
67: 
68:     linestyle = None
69:     marker = None
70:     color = None
71: 
72:     # Is fmt just a colorspec?
73:     try:
74:         color = mcolors.to_rgba(fmt)
75: 
76:         # We need to differentiate grayscale '1.0' from tri_down marker '1'
77:         try:
78:             fmtint = str(int(fmt))
79:         except ValueError:
80:             return linestyle, marker, color  # Yes
81:         else:
82:             if fmt != fmtint:
83:                 # user definitely doesn't want tri_down marker
84:                 return linestyle, marker, color  # Yes
85:             else:
86:                 # ignore converted color
87:                 color = None
88:     except ValueError:
89:         pass  # No, not just a color.
90: 
91:     # handle the multi char special cases and strip them from the
92:     # string
93:     if fmt.find('--') >= 0:
94:         linestyle = '--'
95:         fmt = fmt.replace('--', '')
96:     if fmt.find('-.') >= 0:
97:         linestyle = '-.'
98:         fmt = fmt.replace('-.', '')
99:     if fmt.find(' ') >= 0:
100:         linestyle = 'None'
101:         fmt = fmt.replace(' ', '')
102: 
103:     chars = [c for c in fmt]
104: 
105:     i = 0
106:     while i < len(chars):
107:         c = chars[i]
108:         if c in mlines.lineStyles:
109:             if linestyle is not None:
110:                 raise ValueError(
111:                     'Illegal format string "%s"; two linestyle symbols' % fmt)
112:             linestyle = c
113:         elif c in mlines.lineMarkers:
114:             if marker is not None:
115:                 raise ValueError(
116:                     'Illegal format string "%s"; two marker symbols' % fmt)
117:             marker = c
118:         elif c in mcolors.get_named_colors_mapping():
119:             if color is not None:
120:                 raise ValueError(
121:                     'Illegal format string "%s"; two color symbols' % fmt)
122:             color = c
123:         elif c == 'C' and i < len(chars) - 1:
124:             color_cycle_number = int(chars[i + 1])
125:             color = mcolors.to_rgba("C{}".format(color_cycle_number))
126:             i += 1
127:         else:
128:             raise ValueError(
129:                 'Unrecognized character %c in format string' % c)
130:         i += 1
131: 
132:     if linestyle is None and marker is None:
133:         linestyle = rcParams['lines.linestyle']
134:     if linestyle is None:
135:         linestyle = 'None'
136:     if marker is None:
137:         marker = 'None'
138: 
139:     return linestyle, marker, color
140: 
141: 
142: class _process_plot_var_args(object):
143:     '''
144:     Process variable length arguments to the plot command, so that
145:     plot commands like the following are supported::
146: 
147:       plot(t, s)
148:       plot(t1, s1, t2, s2)
149:       plot(t1, s1, 'ko', t2, s2)
150:       plot(t1, s1, 'ko', t2, s2, 'r--', t3, e3)
151: 
152:     an arbitrary number of *x*, *y*, *fmt* are allowed
153:     '''
154:     def __init__(self, axes, command='plot'):
155:         self.axes = axes
156:         self.command = command
157:         self.set_prop_cycle()
158: 
159:     def __getstate__(self):
160:         # note: it is not possible to pickle a itertools.cycle instance
161:         return {'axes': self.axes, 'command': self.command}
162: 
163:     def __setstate__(self, state):
164:         self.__dict__ = state.copy()
165:         self.set_prop_cycle()
166: 
167:     def set_prop_cycle(self, *args, **kwargs):
168:         if not (args or kwargs) or (len(args) == 1 and args[0] is None):
169:             prop_cycler = rcParams['axes.prop_cycle']
170:         else:
171:             prop_cycler = cycler(*args, **kwargs)
172: 
173:         self.prop_cycler = itertools.cycle(prop_cycler)
174:         # This should make a copy
175:         self._prop_keys = prop_cycler.keys
176: 
177:     def __call__(self, *args, **kwargs):
178:         if self.axes.xaxis is not None and self.axes.yaxis is not None:
179:             xunits = kwargs.pop('xunits', self.axes.xaxis.units)
180: 
181:             if self.axes.name == 'polar':
182:                 xunits = kwargs.pop('thetaunits', xunits)
183: 
184:             yunits = kwargs.pop('yunits', self.axes.yaxis.units)
185: 
186:             if self.axes.name == 'polar':
187:                 yunits = kwargs.pop('runits', yunits)
188: 
189:             if xunits != self.axes.xaxis.units:
190:                 self.axes.xaxis.set_units(xunits)
191: 
192:             if yunits != self.axes.yaxis.units:
193:                 self.axes.yaxis.set_units(yunits)
194: 
195:         ret = self._grab_next_args(*args, **kwargs)
196:         return ret
197: 
198:     def get_next_color(self):
199:         '''
200:         Return the next color in the cycle.
201:         '''
202:         if 'color' not in self._prop_keys:
203:             return 'k'
204:         return six.next(self.prop_cycler)['color']
205: 
206:     def set_lineprops(self, line, **kwargs):
207:         assert self.command == 'plot', 'set_lineprops only works with "plot"'
208:         line.set(**kwargs)
209: 
210:     def set_patchprops(self, fill_poly, **kwargs):
211:         assert self.command == 'fill', 'set_patchprops only works with "fill"'
212:         fill_poly.set(**kwargs)
213: 
214:     def _xy_from_xy(self, x, y):
215:         if self.axes.xaxis is not None and self.axes.yaxis is not None:
216:             bx = self.axes.xaxis.update_units(x)
217:             by = self.axes.yaxis.update_units(y)
218: 
219:             if self.command != 'plot':
220:                 # the Line2D class can handle unitized data, with
221:                 # support for post hoc unit changes etc.  Other mpl
222:                 # artists, e.g., Polygon which _process_plot_var_args
223:                 # also serves on calls to fill, cannot.  So this is a
224:                 # hack to say: if you are not "plot", which is
225:                 # creating Line2D, then convert the data now to
226:                 # floats.  If you are plot, pass the raw data through
227:                 # to Line2D which will handle the conversion.  So
228:                 # polygons will not support post hoc conversions of
229:                 # the unit type since they are not storing the orig
230:                 # data.  Hopefully we can rationalize this at a later
231:                 # date - JDH
232:                 if bx:
233:                     x = self.axes.convert_xunits(x)
234:                 if by:
235:                     y = self.axes.convert_yunits(y)
236: 
237:         # like asanyarray, but converts scalar to array, and doesn't change
238:         # existing compatible sequences
239:         x = _check_1d(x)
240:         y = _check_1d(y)
241:         if x.shape[0] != y.shape[0]:
242:             raise ValueError("x and y must have same first dimension, but "
243:                              "have shapes {} and {}".format(x.shape, y.shape))
244:         if x.ndim > 2 or y.ndim > 2:
245:             raise ValueError("x and y can be no greater than 2-D, but have "
246:                              "shapes {} and {}".format(x.shape, y.shape))
247: 
248:         if x.ndim == 1:
249:             x = x[:, np.newaxis]
250:         if y.ndim == 1:
251:             y = y[:, np.newaxis]
252:         return x, y
253: 
254:     def _getdefaults(self, ignore, *kwargs):
255:         '''
256:         Only advance the cycler if the cycler has information that
257:         is not specified in any of the supplied tuple of dicts.
258:         Ignore any keys specified in the `ignore` set.
259: 
260:         Returns a copy of defaults dictionary if there are any
261:         keys that are not found in any of the supplied dictionaries.
262:         If the supplied dictionaries have non-None values for
263:         everything the property cycler has, then just return
264:         an empty dictionary. Ignored keys are excluded from the
265:         returned dictionary.
266: 
267:         '''
268:         prop_keys = self._prop_keys
269:         if ignore is None:
270:             ignore = set()
271:         prop_keys = prop_keys - ignore
272: 
273:         if any(all(kw.get(k, None) is None for kw in kwargs)
274:                for k in prop_keys):
275:             # Need to copy this dictionary or else the next time around
276:             # in the cycle, the dictionary could be missing entries.
277:             default_dict = six.next(self.prop_cycler).copy()
278:             for p in ignore:
279:                 default_dict.pop(p, None)
280:         else:
281:             default_dict = {}
282:         return default_dict
283: 
284:     def _setdefaults(self, defaults, *kwargs):
285:         '''
286:         Given a defaults dictionary, and any other dictionaries,
287:         update those other dictionaries with information in defaults if
288:         none of the other dictionaries contains that information.
289: 
290:         '''
291:         for k in defaults:
292:             if all(kw.get(k, None) is None for kw in kwargs):
293:                 for kw in kwargs:
294:                     kw[k] = defaults[k]
295: 
296:     def _makeline(self, x, y, kw, kwargs):
297:         kw = kw.copy()  # Don't modify the original kw.
298:         kw.update(kwargs)
299:         default_dict = self._getdefaults(None, kw)
300:         self._setdefaults(default_dict, kw)
301:         seg = mlines.Line2D(x, y, **kw)
302:         return seg
303: 
304:     def _makefill(self, x, y, kw, kwargs):
305:         kw = kw.copy()  # Don't modify the original kw.
306:         kwargs = kwargs.copy()
307: 
308:         # Ignore 'marker'-related properties as they aren't Polygon
309:         # properties, but they are Line2D properties, and so they are
310:         # likely to appear in the default cycler construction.
311:         # This is done here to the defaults dictionary as opposed to the
312:         # other two dictionaries because we do want to capture when a
313:         # *user* explicitly specifies a marker which should be an error.
314:         # We also want to prevent advancing the cycler if there are no
315:         # defaults needed after ignoring the given properties.
316:         ignores = {'marker', 'markersize', 'markeredgecolor',
317:                    'markerfacecolor', 'markeredgewidth'}
318:         # Also ignore anything provided by *kwargs*.
319:         for k, v in six.iteritems(kwargs):
320:             if v is not None:
321:                 ignores.add(k)
322: 
323:         # Only using the first dictionary to use as basis
324:         # for getting defaults for back-compat reasons.
325:         # Doing it with both seems to mess things up in
326:         # various places (probably due to logic bugs elsewhere).
327:         default_dict = self._getdefaults(ignores, kw)
328:         self._setdefaults(default_dict, kw)
329: 
330:         # Looks like we don't want "color" to be interpreted to
331:         # mean both facecolor and edgecolor for some reason.
332:         # So the "kw" dictionary is thrown out, and only its
333:         # 'color' value is kept and translated as a 'facecolor'.
334:         # This design should probably be revisited as it increases
335:         # complexity.
336:         facecolor = kw.get('color', None)
337: 
338:         # Throw out 'color' as it is now handled as a facecolor
339:         default_dict.pop('color', None)
340: 
341:         # To get other properties set from the cycler
342:         # modify the kwargs dictionary.
343:         self._setdefaults(default_dict, kwargs)
344: 
345:         seg = mpatches.Polygon(np.hstack((x[:, np.newaxis],
346:                                           y[:, np.newaxis])),
347:                                facecolor=facecolor,
348:                                fill=kwargs.get('fill', True),
349:                                closed=kw['closed'])
350:         self.set_patchprops(seg, **kwargs)
351:         return seg
352: 
353:     def _plot_args(self, tup, kwargs):
354:         ret = []
355:         if len(tup) > 1 and isinstance(tup[-1], six.string_types):
356:             linestyle, marker, color = _process_plot_format(tup[-1])
357:             tup = tup[:-1]
358:         elif len(tup) == 3:
359:             raise ValueError('third arg must be a format string')
360:         else:
361:             linestyle, marker, color = None, None, None
362: 
363:         # Don't allow any None value; These will be up-converted
364:         # to one element array of None which causes problems
365:         # downstream.
366:         if any(v is None for v in tup):
367:             raise ValueError("x and y must not be None")
368: 
369:         kw = {}
370:         for k, v in zip(('linestyle', 'marker', 'color'),
371:                         (linestyle, marker, color)):
372:             if v is not None:
373:                 kw[k] = v
374: 
375:         if 'label' not in kwargs or kwargs['label'] is None:
376:             kwargs['label'] = get_label(tup[-1], None)
377: 
378:         if len(tup) == 2:
379:             x = _check_1d(tup[0])
380:             y = _check_1d(tup[-1])
381:         else:
382:             x, y = index_of(tup[-1])
383: 
384:         x, y = self._xy_from_xy(x, y)
385: 
386:         if self.command == 'plot':
387:             func = self._makeline
388:         else:
389:             kw['closed'] = kwargs.get('closed', True)
390:             func = self._makefill
391: 
392:         ncx, ncy = x.shape[1], y.shape[1]
393:         for j in xrange(max(ncx, ncy)):
394:             seg = func(x[:, j % ncx], y[:, j % ncy], kw, kwargs)
395:             ret.append(seg)
396:         return ret
397: 
398:     def _grab_next_args(self, *args, **kwargs):
399:         while args:
400:             this, args = args[:2], args[2:]
401:             if args and isinstance(args[0], six.string_types):
402:                 this += args[0],
403:                 args = args[1:]
404:             for seg in self._plot_args(this, kwargs):
405:                 yield seg
406: 
407: 
408: class _AxesBase(martist.Artist):
409:     '''
410:     '''
411:     name = "rectilinear"
412: 
413:     _shared_x_axes = cbook.Grouper()
414:     _shared_y_axes = cbook.Grouper()
415: 
416:     def __str__(self):
417:         return "{0}({1[0]:g},{1[1]:g};{1[2]:g}x{1[3]:g})".format(
418:             type(self).__name__, self._position.bounds)
419: 
420:     def __init__(self, fig, rect,
421:                  facecolor=None,  # defaults to rc axes.facecolor
422:                  frameon=True,
423:                  sharex=None,  # use Axes instance's xaxis info
424:                  sharey=None,  # use Axes instance's yaxis info
425:                  label='',
426:                  xscale=None,
427:                  yscale=None,
428:                  axisbg=None,  # This will be removed eventually
429:                  **kwargs
430:                  ):
431:         '''
432:         Build an :class:`Axes` instance in
433:         :class:`~matplotlib.figure.Figure` *fig* with
434:         *rect=[left, bottom, width, height]* in
435:         :class:`~matplotlib.figure.Figure` coordinates
436: 
437:         Optional keyword arguments:
438: 
439:           ================   =========================================
440:           Keyword            Description
441:           ================   =========================================
442:           *adjustable*       [ 'box' | 'datalim' | 'box-forced']
443:           *alpha*            float: the alpha transparency (can be None)
444:           *anchor*           [ 'C', 'SW', 'S', 'SE', 'E', 'NE', 'N',
445:                                'NW', 'W' ]
446:           *aspect*           [ 'auto' | 'equal' | aspect_ratio ]
447:           *autoscale_on*     [ *True* | *False* ] whether or not to
448:                              autoscale the *viewlim*
449:           *axisbelow*        [ *True* | *False* | 'line'] draw the grids
450:                              and ticks below or above most other artists,
451:                              or below lines but above patches
452:           *cursor_props*     a (*float*, *color*) tuple
453:           *figure*           a :class:`~matplotlib.figure.Figure`
454:                              instance
455:           *frame_on*         a boolean - draw the axes frame
456:           *label*            the axes label
457:           *navigate*         [ *True* | *False* ]
458:           *navigate_mode*    [ 'PAN' | 'ZOOM' | None ] the navigation
459:                              toolbar button status
460:           *position*         [left, bottom, width, height] in
461:                              class:`~matplotlib.figure.Figure` coords
462:           *sharex*           an class:`~matplotlib.axes.Axes` instance
463:                              to share the x-axis with
464:           *sharey*           an class:`~matplotlib.axes.Axes` instance
465:                              to share the y-axis with
466:           *title*            the title string
467:           *visible*          [ *True* | *False* ] whether the axes is
468:                              visible
469:           *xlabel*           the xlabel
470:           *xlim*             (*xmin*, *xmax*) view limits
471:           *xscale*           [%(scale)s]
472:           *xticklabels*      sequence of strings
473:           *xticks*           sequence of floats
474:           *ylabel*           the ylabel strings
475:           *ylim*             (*ymin*, *ymax*) view limits
476:           *yscale*           [%(scale)s]
477:           *yticklabels*      sequence of strings
478:           *yticks*           sequence of floats
479:           ================   =========================================
480:         ''' % {'scale': ' | '.join(
481:             [repr(x) for x in mscale.get_scale_names()])}
482:         martist.Artist.__init__(self)
483:         if isinstance(rect, mtransforms.Bbox):
484:             self._position = rect
485:         else:
486:             self._position = mtransforms.Bbox.from_bounds(*rect)
487:         if self._position.width < 0 or self._position.height < 0:
488:             raise ValueError('Width and height specified must be non-negative')
489:         self._originalPosition = self._position.frozen()
490:         # self.set_axes(self)
491:         self.axes = self
492:         self.set_aspect('auto')
493:         self._adjustable = 'box'
494:         self.set_anchor('C')
495:         self._sharex = sharex
496:         self._sharey = sharey
497:         if sharex is not None:
498:             self._shared_x_axes.join(self, sharex)
499:             if sharex._adjustable == 'box':
500:                 sharex._adjustable = 'datalim'
501:                 # warnings.warn(
502:                 #    'shared axes: "adjustable" is being changed to "datalim"')
503:             self._adjustable = 'datalim'
504:         if sharey is not None:
505:             self._shared_y_axes.join(self, sharey)
506:             if sharey._adjustable == 'box':
507:                 sharey._adjustable = 'datalim'
508:                 # warnings.warn(
509:                 #    'shared axes: "adjustable" is being changed to "datalim"')
510:             self._adjustable = 'datalim'
511:         self.set_label(label)
512:         self.set_figure(fig)
513: 
514:         self.set_axes_locator(kwargs.get("axes_locator", None))
515: 
516:         self.spines = self._gen_axes_spines()
517: 
518:         # this call may differ for non-sep axes, e.g., polar
519:         self._init_axis()
520:         if axisbg is not None and facecolor is not None:
521:             raise TypeError('Both axisbg and facecolor are not None. '
522:                             'These keywords are aliases, only one may be '
523:                             'provided.')
524:         if axisbg is not None:
525:             cbook.warn_deprecated(
526:                 '2.0', name='axisbg', alternative='facecolor')
527:             facecolor = axisbg
528:         if facecolor is None:
529:             facecolor = rcParams['axes.facecolor']
530:         self._facecolor = facecolor
531:         self._frameon = frameon
532:         self._axisbelow = rcParams['axes.axisbelow']
533: 
534:         self._rasterization_zorder = None
535: 
536:         self._hold = rcParams['axes.hold']
537:         if self._hold is None:
538:             self._hold = True
539: 
540:         self._connected = {}  # a dict from events to (id, func)
541:         self.cla()
542:         # funcs used to format x and y - fall back on major formatters
543:         self.fmt_xdata = None
544:         self.fmt_ydata = None
545: 
546:         self._cachedRenderer = None
547:         self.set_navigate(True)
548:         self.set_navigate_mode(None)
549: 
550:         if xscale:
551:             self.set_xscale(xscale)
552:         if yscale:
553:             self.set_yscale(yscale)
554: 
555:         if len(kwargs):
556:             self.update(kwargs)
557: 
558:         if self.xaxis is not None:
559:             self._xcid = self.xaxis.callbacks.connect(
560:                 'units finalize', lambda: self._on_units_changed(scalex=True))
561: 
562:         if self.yaxis is not None:
563:             self._ycid = self.yaxis.callbacks.connect(
564:                 'units finalize', lambda: self._on_units_changed(scaley=True))
565: 
566:         self.tick_params(
567:             top=rcParams['xtick.top'] and rcParams['xtick.minor.top'],
568:             bottom=rcParams['xtick.bottom'] and rcParams['xtick.minor.bottom'],
569:             left=rcParams['ytick.left'] and rcParams['ytick.minor.left'],
570:             right=rcParams['ytick.right'] and rcParams['ytick.minor.right'],
571:             which='minor')
572: 
573:         self.tick_params(
574:             top=rcParams['xtick.top'] and rcParams['xtick.major.top'],
575:             bottom=rcParams['xtick.bottom'] and rcParams['xtick.major.bottom'],
576:             left=rcParams['ytick.left'] and rcParams['ytick.major.left'],
577:             right=rcParams['ytick.right'] and rcParams['ytick.major.right'],
578:             which='major')
579: 
580:     def __getstate__(self):
581:         # The renderer should be re-created by the figure, and then cached at
582:         # that point.
583:         state = super(_AxesBase, self).__getstate__()
584:         state['_cachedRenderer'] = None
585:         return state
586: 
587:     def __setstate__(self, state):
588:         self.__dict__ = state
589:         # put the _remove_method back on all artists contained within the axes
590:         for container_name in ['lines', 'collections', 'tables', 'patches',
591:                                'texts', 'images']:
592:             container = getattr(self, container_name)
593:             for artist in container:
594:                 artist._remove_method = container.remove
595:         self._stale = True
596: 
597:     def get_window_extent(self, *args, **kwargs):
598:         '''
599:         get the axes bounding box in display space; *args* and
600:         *kwargs* are empty
601:         '''
602:         bbox = self.bbox
603:         x_pad = self.xaxis.get_tick_padding()
604:         y_pad = self.yaxis.get_tick_padding()
605:         return mtransforms.Bbox([[bbox.x0 - x_pad, bbox.y0 - y_pad],
606:                                  [bbox.x1 + x_pad, bbox.y1 + y_pad]])
607: 
608:     def _init_axis(self):
609:         "move this out of __init__ because non-separable axes don't use it"
610:         self.xaxis = maxis.XAxis(self)
611:         self.spines['bottom'].register_axis(self.xaxis)
612:         self.spines['top'].register_axis(self.xaxis)
613:         self.yaxis = maxis.YAxis(self)
614:         self.spines['left'].register_axis(self.yaxis)
615:         self.spines['right'].register_axis(self.yaxis)
616:         self._update_transScale()
617: 
618:     def set_figure(self, fig):
619:         '''
620:         Set the class:`~matplotlib.axes.Axes` figure
621: 
622:         accepts a class:`~matplotlib.figure.Figure` instance
623:         '''
624:         martist.Artist.set_figure(self, fig)
625: 
626:         self.bbox = mtransforms.TransformedBbox(self._position,
627:                                                 fig.transFigure)
628:         # these will be updated later as data is added
629:         self.dataLim = mtransforms.Bbox.null()
630:         self.viewLim = mtransforms.Bbox.unit()
631:         self.transScale = mtransforms.TransformWrapper(
632:             mtransforms.IdentityTransform())
633: 
634:         self._set_lim_and_transforms()
635: 
636:     def _set_lim_and_transforms(self):
637:         '''
638:         set the *dataLim* and *viewLim*
639:         :class:`~matplotlib.transforms.Bbox` attributes and the
640:         *transScale*, *transData*, *transLimits* and *transAxes*
641:         transformations.
642: 
643:         .. note::
644: 
645:             This method is primarily used by rectilinear projections
646:             of the :class:`~matplotlib.axes.Axes` class, and is meant
647:             to be overridden by new kinds of projection axes that need
648:             different transformations and limits. (See
649:             :class:`~matplotlib.projections.polar.PolarAxes` for an
650:             example.
651: 
652:         '''
653:         self.transAxes = mtransforms.BboxTransformTo(self.bbox)
654: 
655:         # Transforms the x and y axis separately by a scale factor.
656:         # It is assumed that this part will have non-linear components
657:         # (e.g., for a log scale).
658:         self.transScale = mtransforms.TransformWrapper(
659:             mtransforms.IdentityTransform())
660: 
661:         # An affine transformation on the data, generally to limit the
662:         # range of the axes
663:         self.transLimits = mtransforms.BboxTransformFrom(
664:             mtransforms.TransformedBbox(self.viewLim, self.transScale))
665: 
666:         # The parentheses are important for efficiency here -- they
667:         # group the last two (which are usually affines) separately
668:         # from the first (which, with log-scaling can be non-affine).
669:         self.transData = self.transScale + (self.transLimits + self.transAxes)
670: 
671:         self._xaxis_transform = mtransforms.blended_transform_factory(
672:             self.transData, self.transAxes)
673:         self._yaxis_transform = mtransforms.blended_transform_factory(
674:             self.transAxes, self.transData)
675: 
676:     def get_xaxis_transform(self, which='grid'):
677:         '''
678:         Get the transformation used for drawing x-axis labels, ticks
679:         and gridlines.  The x-direction is in data coordinates and the
680:         y-direction is in axis coordinates.
681: 
682:         .. note::
683: 
684:             This transformation is primarily used by the
685:             :class:`~matplotlib.axis.Axis` class, and is meant to be
686:             overridden by new kinds of projections that may need to
687:             place axis elements in different locations.
688: 
689:         '''
690:         if which == 'grid':
691:             return self._xaxis_transform
692:         elif which == 'tick1':
693:             # for cartesian projection, this is bottom spine
694:             return self.spines['bottom'].get_spine_transform()
695:         elif which == 'tick2':
696:             # for cartesian projection, this is top spine
697:             return self.spines['top'].get_spine_transform()
698:         else:
699:             raise ValueError('unknown value for which')
700: 
701:     def get_xaxis_text1_transform(self, pad_points):
702:         '''
703:         Get the transformation used for drawing x-axis labels, which
704:         will add the given amount of padding (in points) between the
705:         axes and the label.  The x-direction is in data coordinates
706:         and the y-direction is in axis coordinates.  Returns a
707:         3-tuple of the form::
708: 
709:           (transform, valign, halign)
710: 
711:         where *valign* and *halign* are requested alignments for the
712:         text.
713: 
714:         .. note::
715: 
716:             This transformation is primarily used by the
717:             :class:`~matplotlib.axis.Axis` class, and is meant to be
718:             overridden by new kinds of projections that may need to
719:             place axis elements in different locations.
720: 
721:         '''
722:         labels_align = matplotlib.rcParams["xtick.alignment"]
723: 
724:         return (self.get_xaxis_transform(which='tick1') +
725:                 mtransforms.ScaledTranslation(0, -1 * pad_points / 72.0,
726:                                               self.figure.dpi_scale_trans),
727:                 "top", labels_align)
728: 
729:     def get_xaxis_text2_transform(self, pad_points):
730:         '''
731:         Get the transformation used for drawing the secondary x-axis
732:         labels, which will add the given amount of padding (in points)
733:         between the axes and the label.  The x-direction is in data
734:         coordinates and the y-direction is in axis coordinates.
735:         Returns a 3-tuple of the form::
736: 
737:           (transform, valign, halign)
738: 
739:         where *valign* and *halign* are requested alignments for the
740:         text.
741: 
742:         .. note::
743: 
744:             This transformation is primarily used by the
745:             :class:`~matplotlib.axis.Axis` class, and is meant to be
746:             overridden by new kinds of projections that may need to
747:             place axis elements in different locations.
748: 
749:         '''
750:         labels_align = matplotlib.rcParams["xtick.alignment"]
751:         return (self.get_xaxis_transform(which='tick2') +
752:                 mtransforms.ScaledTranslation(0, pad_points / 72.0,
753:                                               self.figure.dpi_scale_trans),
754:                 "bottom", labels_align)
755: 
756:     def get_yaxis_transform(self, which='grid'):
757:         '''
758:         Get the transformation used for drawing y-axis labels, ticks
759:         and gridlines.  The x-direction is in axis coordinates and the
760:         y-direction is in data coordinates.
761: 
762:         .. note::
763: 
764:             This transformation is primarily used by the
765:             :class:`~matplotlib.axis.Axis` class, and is meant to be
766:             overridden by new kinds of projections that may need to
767:             place axis elements in different locations.
768: 
769:         '''
770:         if which == 'grid':
771:             return self._yaxis_transform
772:         elif which == 'tick1':
773:             # for cartesian projection, this is bottom spine
774:             return self.spines['left'].get_spine_transform()
775:         elif which == 'tick2':
776:             # for cartesian projection, this is top spine
777:             return self.spines['right'].get_spine_transform()
778:         else:
779:             raise ValueError('unknown value for which')
780: 
781:     def get_yaxis_text1_transform(self, pad_points):
782:         '''
783:         Get the transformation used for drawing y-axis labels, which
784:         will add the given amount of padding (in points) between the
785:         axes and the label.  The x-direction is in axis coordinates
786:         and the y-direction is in data coordinates.  Returns a 3-tuple
787:         of the form::
788: 
789:           (transform, valign, halign)
790: 
791:         where *valign* and *halign* are requested alignments for the
792:         text.
793: 
794:         .. note::
795: 
796:             This transformation is primarily used by the
797:             :class:`~matplotlib.axis.Axis` class, and is meant to be
798:             overridden by new kinds of projections that may need to
799:             place axis elements in different locations.
800: 
801:         '''
802:         labels_align = matplotlib.rcParams["ytick.alignment"]
803:         return (self.get_yaxis_transform(which='tick1') +
804:                 mtransforms.ScaledTranslation(-1 * pad_points / 72.0, 0,
805:                                               self.figure.dpi_scale_trans),
806:                 labels_align, "right")
807: 
808:     def get_yaxis_text2_transform(self, pad_points):
809:         '''
810:         Get the transformation used for drawing the secondary y-axis
811:         labels, which will add the given amount of padding (in points)
812:         between the axes and the label.  The x-direction is in axis
813:         coordinates and the y-direction is in data coordinates.
814:         Returns a 3-tuple of the form::
815: 
816:           (transform, valign, halign)
817: 
818:         where *valign* and *halign* are requested alignments for the
819:         text.
820: 
821:         .. note::
822: 
823:             This transformation is primarily used by the
824:             :class:`~matplotlib.axis.Axis` class, and is meant to be
825:             overridden by new kinds of projections that may need to
826:             place axis elements in different locations.
827: 
828:         '''
829:         labels_align = matplotlib.rcParams["ytick.alignment"]
830: 
831:         return (self.get_yaxis_transform(which='tick2') +
832:                 mtransforms.ScaledTranslation(pad_points / 72.0, 0,
833:                                               self.figure.dpi_scale_trans),
834:                 labels_align, "left")
835: 
836:     def _update_transScale(self):
837:         self.transScale.set(
838:             mtransforms.blended_transform_factory(
839:                 self.xaxis.get_transform(), self.yaxis.get_transform()))
840:         if hasattr(self, "lines"):
841:             for line in self.lines:
842:                 try:
843:                     line._transformed_path.invalidate()
844:                 except AttributeError:
845:                     pass
846: 
847:     def get_position(self, original=False):
848:         'Return the a copy of the axes rectangle as a Bbox'
849:         if original:
850:             return self._originalPosition.frozen()
851:         else:
852:             return self._position.frozen()
853: 
854:     def set_position(self, pos, which='both'):
855:         '''Set the axes position
856: 
857:         The expected shape of ``pos`` is::
858: 
859:           pos = [left, bottom, width, height]
860: 
861:         in relative 0,1 coords, or *pos* can be a
862:         :class:`~matplotlib.transforms.Bbox`
863: 
864:         There are two position variables: one which is ultimately
865:         used, but which may be modified by :meth:`apply_aspect`, and a
866:         second which is the starting point for :meth:`apply_aspect`.
867: 
868: 
869:         Optional keyword arguments:
870:           *which*
871: 
872:             ==========   ====================
873:             value        description
874:             ==========   ====================
875:             'active'     to change the first
876:             'original'   to change the second
877:             'both'       to change both
878:             ==========   ====================
879: 
880:         '''
881:         if not isinstance(pos, mtransforms.BboxBase):
882:             pos = mtransforms.Bbox.from_bounds(*pos)
883:         if which in ('both', 'active'):
884:             self._position.set(pos)
885:         if which in ('both', 'original'):
886:             self._originalPosition.set(pos)
887:         self.stale = True
888: 
889:     def reset_position(self):
890:         '''Make the original position the active position'''
891:         pos = self.get_position(original=True)
892:         self.set_position(pos, which='active')
893: 
894:     def set_axes_locator(self, locator):
895:         '''
896:         set axes_locator
897: 
898:         ACCEPT: a callable object which takes an axes instance and renderer and
899:                  returns a bbox.
900:         '''
901:         self._axes_locator = locator
902:         self.stale = True
903: 
904:     def get_axes_locator(self):
905:         '''
906:         return axes_locator
907:         '''
908:         return self._axes_locator
909: 
910:     def _set_artist_props(self, a):
911:         '''set the boilerplate props for artists added to axes'''
912:         a.set_figure(self.figure)
913:         if not a.is_transform_set():
914:             a.set_transform(self.transData)
915: 
916:         a.axes = self
917:         if a.mouseover:
918:             self.mouseover_set.add(a)
919: 
920:     def _gen_axes_patch(self):
921:         '''
922:         Returns the patch used to draw the background of the axes.  It
923:         is also used as the clipping path for any data elements on the
924:         axes.
925: 
926:         In the standard axes, this is a rectangle, but in other
927:         projections it may not be.
928: 
929:         .. note::
930: 
931:             Intended to be overridden by new projection types.
932: 
933:         '''
934:         return mpatches.Rectangle((0.0, 0.0), 1.0, 1.0)
935: 
936:     def _gen_axes_spines(self, locations=None, offset=0.0, units='inches'):
937:         '''
938:         Returns a dict whose keys are spine names and values are
939:         Line2D or Patch instances. Each element is used to draw a
940:         spine of the axes.
941: 
942:         In the standard axes, this is a single line segment, but in
943:         other projections it may not be.
944: 
945:         .. note::
946: 
947:             Intended to be overridden by new projection types.
948: 
949:         '''
950:         return OrderedDict([
951:             ('left', mspines.Spine.linear_spine(self, 'left')),
952:             ('right', mspines.Spine.linear_spine(self, 'right')),
953:             ('bottom', mspines.Spine.linear_spine(self, 'bottom')),
954:             ('top', mspines.Spine.linear_spine(self, 'top'))])
955: 
956:     def cla(self):
957:         '''Clear the current axes.'''
958:         # Note: this is called by Axes.__init__()
959: 
960:         # stash the current visibility state
961:         if hasattr(self, 'patch'):
962:             patch_visible = self.patch.get_visible()
963:         else:
964:             patch_visible = True
965: 
966:         xaxis_visible = self.xaxis.get_visible()
967:         yaxis_visible = self.yaxis.get_visible()
968: 
969:         self.xaxis.cla()
970:         self.yaxis.cla()
971:         for name, spine in six.iteritems(self.spines):
972:             spine.cla()
973: 
974:         self.ignore_existing_data_limits = True
975:         self.callbacks = cbook.CallbackRegistry()
976: 
977:         if self._sharex is not None:
978:             # major and minor are class instances with
979:             # locator and formatter attributes
980:             self.xaxis.major = self._sharex.xaxis.major
981:             self.xaxis.minor = self._sharex.xaxis.minor
982:             x0, x1 = self._sharex.get_xlim()
983:             self.set_xlim(x0, x1, emit=False, auto=None)
984:             self.xaxis._scale = mscale.scale_factory(
985:                     self._sharex.xaxis.get_scale(), self.xaxis)
986:         else:
987:             self.xaxis._set_scale('linear')
988:             try:
989:                 self.set_xlim(0, 1)
990:             except TypeError:
991:                 pass
992: 
993:         if self._sharey is not None:
994:             self.yaxis.major = self._sharey.yaxis.major
995:             self.yaxis.minor = self._sharey.yaxis.minor
996:             y0, y1 = self._sharey.get_ylim()
997:             self.set_ylim(y0, y1, emit=False, auto=None)
998:             self.yaxis._scale = mscale.scale_factory(
999:                     self._sharey.yaxis.get_scale(), self.yaxis)
1000:         else:
1001:             self.yaxis._set_scale('linear')
1002:             try:
1003:                 self.set_ylim(0, 1)
1004:             except TypeError:
1005:                 pass
1006: 
1007:         # update the minor locator for x and y axis based on rcParams
1008:         if (rcParams['xtick.minor.visible']):
1009:             self.xaxis.set_minor_locator(mticker.AutoMinorLocator())
1010: 
1011:         if (rcParams['ytick.minor.visible']):
1012:             self.yaxis.set_minor_locator(mticker.AutoMinorLocator())
1013: 
1014:         self._autoscaleXon = True
1015:         self._autoscaleYon = True
1016:         self._xmargin = rcParams['axes.xmargin']
1017:         self._ymargin = rcParams['axes.ymargin']
1018:         self._tight = None
1019:         self._use_sticky_edges = True
1020:         self._update_transScale()  # needed?
1021: 
1022:         self._get_lines = _process_plot_var_args(self)
1023:         self._get_patches_for_fill = _process_plot_var_args(self, 'fill')
1024: 
1025:         self._gridOn = rcParams['axes.grid']
1026:         self.lines = []
1027:         self.patches = []
1028:         self.texts = []
1029:         self.tables = []
1030:         self.artists = []
1031:         self.images = []
1032:         self.mouseover_set = set()
1033:         self._current_image = None  # strictly for pyplot via _sci, _gci
1034:         self.legend_ = None
1035:         self.collections = []  # collection.Collection instances
1036:         self.containers = []
1037: 
1038:         self.grid(False)  # Disable grid on init to use rcParameter
1039:         self.grid(self._gridOn, which=rcParams['axes.grid.which'],
1040:                   axis=rcParams['axes.grid.axis'])
1041:         props = font_manager.FontProperties(
1042:             size=rcParams['axes.titlesize'],
1043:             weight=rcParams['axes.titleweight'])
1044: 
1045:         title_offset_points = rcParams['axes.titlepad']
1046:         self.titleOffsetTrans = mtransforms.ScaledTranslation(
1047:             0.0, title_offset_points / 72.0,
1048:             self.figure.dpi_scale_trans)
1049:         self.title = mtext.Text(
1050:             x=0.5, y=1.0, text='',
1051:             fontproperties=props,
1052:             verticalalignment='baseline',
1053:             horizontalalignment='center',
1054:             )
1055:         self._left_title = mtext.Text(
1056:             x=0.0, y=1.0, text='',
1057:             fontproperties=props.copy(),
1058:             verticalalignment='baseline',
1059:             horizontalalignment='left', )
1060:         self._right_title = mtext.Text(
1061:             x=1.0, y=1.0, text='',
1062:             fontproperties=props.copy(),
1063:             verticalalignment='baseline',
1064:             horizontalalignment='right',
1065:             )
1066: 
1067:         for _title in (self.title, self._left_title, self._right_title):
1068:             _title.set_transform(self.transAxes + self.titleOffsetTrans)
1069:             _title.set_clip_box(None)
1070:             self._set_artist_props(_title)
1071: 
1072:         # The patch draws the background of the axes.  We want this to be below
1073:         # the other artists.  We use the frame to draw the edges so we are
1074:         # setting the edgecolor to None.
1075:         self.patch = self._gen_axes_patch()
1076:         self.patch.set_figure(self.figure)
1077:         self.patch.set_facecolor(self._facecolor)
1078:         self.patch.set_edgecolor('None')
1079:         self.patch.set_linewidth(0)
1080:         self.patch.set_transform(self.transAxes)
1081: 
1082:         self.set_axis_on()
1083: 
1084:         self.xaxis.set_clip_path(self.patch)
1085:         self.yaxis.set_clip_path(self.patch)
1086: 
1087:         self._shared_x_axes.clean()
1088:         self._shared_y_axes.clean()
1089:         if self._sharex:
1090:             self.xaxis.set_visible(xaxis_visible)
1091:             self.patch.set_visible(patch_visible)
1092: 
1093:         if self._sharey:
1094:             self.yaxis.set_visible(yaxis_visible)
1095:             self.patch.set_visible(patch_visible)
1096: 
1097:         self.stale = True
1098: 
1099:     @property
1100:     @cbook.deprecated("2.1", alternative="Axes.patch")
1101:     def axesPatch(self):
1102:         return self.patch
1103: 
1104:     def clear(self):
1105:         '''clear the axes'''
1106:         self.cla()
1107: 
1108:     def get_facecolor(self):
1109:         return self.patch.get_facecolor()
1110:     get_fc = get_facecolor
1111: 
1112:     def set_facecolor(self, color):
1113:         self._facecolor = color
1114:         return self.patch.set_facecolor(color)
1115:     set_fc = set_facecolor
1116: 
1117:     def set_prop_cycle(self, *args, **kwargs):
1118:         '''
1119:         Set the property cycle for any future plot commands on this Axes.
1120: 
1121:         set_prop_cycle(arg)
1122:         set_prop_cycle(label, itr)
1123:         set_prop_cycle(label1=itr1[, label2=itr2[, ...]])
1124: 
1125:         Form 1 simply sets given `Cycler` object.
1126: 
1127:         Form 2 creates and sets  a `Cycler` from a label and an iterable.
1128: 
1129:         Form 3 composes and sets  a `Cycler` as an inner product of the
1130:         pairs of keyword arguments. In other words, all of the
1131:         iterables are cycled simultaneously, as if through zip().
1132: 
1133:         Parameters
1134:         ----------
1135:         arg : Cycler
1136:             Set the given Cycler.
1137:             Can also be `None` to reset to the cycle defined by the
1138:             current style.
1139: 
1140:         label : str
1141:             The property key. Must be a valid `Artist` property.
1142:             For example, 'color' or 'linestyle'. Aliases are allowed,
1143:             such as 'c' for 'color' and 'lw' for 'linewidth'.
1144: 
1145:         itr : iterable
1146:             Finite-length iterable of the property values. These values
1147:             are validated and will raise a ValueError if invalid.
1148: 
1149:         See Also
1150:         --------
1151:             :func:`cycler`      Convenience function for creating your
1152:                                 own cyclers.
1153: 
1154:         '''
1155:         if args and kwargs:
1156:             raise TypeError("Cannot supply both positional and keyword "
1157:                             "arguments to this method.")
1158:         if len(args) == 1 and args[0] is None:
1159:             prop_cycle = None
1160:         else:
1161:             prop_cycle = cycler(*args, **kwargs)
1162:         self._get_lines.set_prop_cycle(prop_cycle)
1163:         self._get_patches_for_fill.set_prop_cycle(prop_cycle)
1164: 
1165:     def set_color_cycle(self, clist):
1166:         '''
1167:         Set the color cycle for any future plot commands on this Axes.
1168: 
1169:         *clist* is a list of mpl color specifiers.
1170: 
1171:         .. deprecated:: 1.5
1172:         '''
1173:         cbook.warn_deprecated(
1174:             '1.5', name='set_color_cycle', alternative='set_prop_cycle')
1175:         if clist is None:
1176:             # Calling set_color_cycle() or set_prop_cycle() with None
1177:             # effectively resets the cycle, but you can't do
1178:             # set_prop_cycle('color', None). So we are special-casing this.
1179:             self.set_prop_cycle(None)
1180:         else:
1181:             self.set_prop_cycle('color', clist)
1182: 
1183:     @cbook.deprecated("2.0")
1184:     def ishold(self):
1185:         '''return the HOLD status of the axes
1186: 
1187:         The `hold` mechanism is deprecated and will be removed in
1188:         v3.0.
1189:         '''
1190: 
1191:         return self._hold
1192: 
1193:     @cbook.deprecated("2.0", message=_hold_msg)
1194:     def hold(self, b=None):
1195:         '''
1196:         Set the hold state
1197: 
1198:         The ``hold`` mechanism is deprecated and will be removed in
1199:         v3.0.  The behavior will remain consistent with the
1200:         long-time default value of True.
1201: 
1202:         If *hold* is *None* (default), toggle the *hold* state.  Else
1203:         set the *hold* state to boolean value *b*.
1204: 
1205:         Examples::
1206: 
1207:           # toggle hold
1208:           hold()
1209: 
1210:           # turn hold on
1211:           hold(True)
1212: 
1213:           # turn hold off
1214:           hold(False)
1215: 
1216:         When hold is *True*, subsequent plot commands will be added to
1217:         the current axes.  When hold is *False*, the current axes and
1218:         figure will be cleared on the next plot command
1219: 
1220:         '''
1221:         if b is None:
1222:             self._hold = not self._hold
1223:         else:
1224:             self._hold = b
1225: 
1226:     def get_aspect(self):
1227:         return self._aspect
1228: 
1229:     def set_aspect(self, aspect, adjustable=None, anchor=None):
1230:         '''
1231:         *aspect*
1232: 
1233:           ========   ================================================
1234:           value      description
1235:           ========   ================================================
1236:           'auto'     automatic; fill position rectangle with data
1237:           'equal'    same scaling from data to plot units for x and y
1238:            num       a circle will be stretched such that the height
1239:                      is num times the width. aspect=1 is the same as
1240:                      aspect='equal'.
1241:           ========   ================================================
1242: 
1243:         *adjustable*
1244: 
1245:           ============   =====================================
1246:           value          description
1247:           ============   =====================================
1248:           'box'          change physical size of axes
1249:           'datalim'      change xlim or ylim
1250:           'box-forced'   same as 'box', but axes can be shared
1251:           ============   =====================================
1252: 
1253:         'box' does not allow axes sharing, as this can cause
1254:         unintended side effect. For cases when sharing axes is
1255:         fine, use 'box-forced'.
1256: 
1257:         *anchor*
1258: 
1259:           =====   =====================
1260:           value   description
1261:           =====   =====================
1262:           'C'     centered
1263:           'SW'    lower left corner
1264:           'S'     middle of bottom edge
1265:           'SE'    lower right corner
1266:           etc.
1267:           =====   =====================
1268:         '''
1269:         if (isinstance(aspect, six.string_types)
1270:                 and aspect in ('equal', 'auto')):
1271:             self._aspect = aspect
1272:         else:
1273:             self._aspect = float(aspect)  # raise ValueError if necessary
1274: 
1275:         if adjustable is not None:
1276:             self.set_adjustable(adjustable)
1277:         if anchor is not None:
1278:             self.set_anchor(anchor)
1279:         self.stale = True
1280: 
1281:     def get_adjustable(self):
1282:         return self._adjustable
1283: 
1284:     def set_adjustable(self, adjustable):
1285:         '''
1286:         ACCEPTS: [ 'box' | 'datalim' | 'box-forced']
1287:         '''
1288:         if adjustable in ('box', 'datalim', 'box-forced'):
1289:             if self in self._shared_x_axes or self in self._shared_y_axes:
1290:                 if adjustable == 'box':
1291:                     raise ValueError(
1292:                         'adjustable must be "datalim" for shared axes')
1293:             self._adjustable = adjustable
1294:         else:
1295:             raise ValueError('argument must be "box", or "datalim"')
1296:         self.stale = True
1297: 
1298:     def get_anchor(self):
1299:         return self._anchor
1300: 
1301:     def set_anchor(self, anchor):
1302:         '''
1303:         *anchor*
1304: 
1305:           =====  ============
1306:           value  description
1307:           =====  ============
1308:           'C'    Center
1309:           'SW'   bottom left
1310:           'S'    bottom
1311:           'SE'   bottom right
1312:           'E'    right
1313:           'NE'   top right
1314:           'N'    top
1315:           'NW'   top left
1316:           'W'    left
1317:           =====  ============
1318: 
1319:         '''
1320:         if anchor in mtransforms.Bbox.coefs or len(anchor) == 2:
1321:             self._anchor = anchor
1322:         else:
1323:             raise ValueError('argument must be among %s' %
1324:                              ', '.join(mtransforms.Bbox.coefs))
1325:         self.stale = True
1326: 
1327:     def get_data_ratio(self):
1328:         '''
1329:         Returns the aspect ratio of the raw data.
1330: 
1331:         This method is intended to be overridden by new projection
1332:         types.
1333:         '''
1334:         xmin, xmax = self.get_xbound()
1335:         ymin, ymax = self.get_ybound()
1336: 
1337:         xsize = max(abs(xmax - xmin), 1e-30)
1338:         ysize = max(abs(ymax - ymin), 1e-30)
1339: 
1340:         return ysize / xsize
1341: 
1342:     def get_data_ratio_log(self):
1343:         '''
1344:         Returns the aspect ratio of the raw data in log scale.
1345:         Will be used when both axis scales are in log.
1346:         '''
1347:         xmin, xmax = self.get_xbound()
1348:         ymin, ymax = self.get_ybound()
1349: 
1350:         xsize = max(abs(math.log10(xmax) - math.log10(xmin)), 1e-30)
1351:         ysize = max(abs(math.log10(ymax) - math.log10(ymin)), 1e-30)
1352: 
1353:         return ysize / xsize
1354: 
1355:     def apply_aspect(self, position=None):
1356:         '''
1357:         Use :meth:`_aspect` and :meth:`_adjustable` to modify the
1358:         axes box or the view limits.
1359:         '''
1360:         if position is None:
1361:             position = self.get_position(original=True)
1362: 
1363:         aspect = self.get_aspect()
1364: 
1365:         if self.name != 'polar':
1366:             xscale, yscale = self.get_xscale(), self.get_yscale()
1367:             if xscale == "linear" and yscale == "linear":
1368:                 aspect_scale_mode = "linear"
1369:             elif xscale == "log" and yscale == "log":
1370:                 aspect_scale_mode = "log"
1371:             elif ((xscale == "linear" and yscale == "log") or
1372:                   (xscale == "log" and yscale == "linear")):
1373:                 if aspect != "auto":
1374:                     warnings.warn(
1375:                         'aspect is not supported for Axes with xscale=%s, '
1376:                         'yscale=%s' % (xscale, yscale))
1377:                     aspect = "auto"
1378:             else:  # some custom projections have their own scales.
1379:                 pass
1380:         else:
1381:             aspect_scale_mode = "linear"
1382: 
1383:         if aspect == 'auto':
1384:             self.set_position(position, which='active')
1385:             return
1386: 
1387:         if aspect == 'equal':
1388:             A = 1
1389:         else:
1390:             A = aspect
1391: 
1392:         # Ensure at drawing time that any Axes involved in axis-sharing
1393:         # does not have its position changed.
1394:         if self in self._shared_x_axes or self in self._shared_y_axes:
1395:             if self._adjustable == 'box':
1396:                 self._adjustable = 'datalim'
1397:                 warnings.warn(
1398:                     'shared axes: "adjustable" is being changed to "datalim"')
1399: 
1400:         figW, figH = self.get_figure().get_size_inches()
1401:         fig_aspect = figH / figW
1402:         if self._adjustable in ['box', 'box-forced']:
1403:             if aspect_scale_mode == "log":
1404:                 box_aspect = A * self.get_data_ratio_log()
1405:             else:
1406:                 box_aspect = A * self.get_data_ratio()
1407:             pb = position.frozen()
1408:             pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)
1409:             self.set_position(pb1.anchored(self.get_anchor(), pb), 'active')
1410:             return
1411: 
1412:         # reset active to original in case it had been changed
1413:         # by prior use of 'box'
1414:         self.set_position(position, which='active')
1415: 
1416:         xmin, xmax = self.get_xbound()
1417:         ymin, ymax = self.get_ybound()
1418: 
1419:         if aspect_scale_mode == "log":
1420:             xmin, xmax = math.log10(xmin), math.log10(xmax)
1421:             ymin, ymax = math.log10(ymin), math.log10(ymax)
1422: 
1423:         xsize = max(abs(xmax - xmin), 1e-30)
1424:         ysize = max(abs(ymax - ymin), 1e-30)
1425: 
1426:         l, b, w, h = position.bounds
1427:         box_aspect = fig_aspect * (h / w)
1428:         data_ratio = box_aspect / A
1429: 
1430:         y_expander = (data_ratio * xsize / ysize - 1.0)
1431:         # If y_expander > 0, the dy/dx viewLim ratio needs to increase
1432:         if abs(y_expander) < 0.005:
1433:             return
1434: 
1435:         if aspect_scale_mode == "log":
1436:             dL = self.dataLim
1437:             dL_width = math.log10(dL.x1) - math.log10(dL.x0)
1438:             dL_height = math.log10(dL.y1) - math.log10(dL.y0)
1439:             xr = 1.05 * dL_width
1440:             yr = 1.05 * dL_height
1441:         else:
1442:             dL = self.dataLim
1443:             xr = 1.05 * dL.width
1444:             yr = 1.05 * dL.height
1445: 
1446:         xmarg = xsize - xr
1447:         ymarg = ysize - yr
1448:         Ysize = data_ratio * xsize
1449:         Xsize = ysize / data_ratio
1450:         Xmarg = Xsize - xr
1451:         Ymarg = Ysize - yr
1452:         # Setting these targets to, e.g., 0.05*xr does not seem to
1453:         # help.
1454:         xm = 0
1455:         ym = 0
1456: 
1457:         changex = (self in self._shared_y_axes and
1458:                    self not in self._shared_x_axes)
1459:         changey = (self in self._shared_x_axes and
1460:                    self not in self._shared_y_axes)
1461:         if changex and changey:
1462:             warnings.warn("adjustable='datalim' cannot work with shared "
1463:                           "x and y axes")
1464:             return
1465:         if changex:
1466:             adjust_y = False
1467:         else:
1468:             if xmarg > xm and ymarg > ym:
1469:                 adjy = ((Ymarg > 0 and y_expander < 0) or
1470:                         (Xmarg < 0 and y_expander > 0))
1471:             else:
1472:                 adjy = y_expander > 0
1473:             adjust_y = changey or adjy  # (Ymarg > xmarg)
1474:         if adjust_y:
1475:             yc = 0.5 * (ymin + ymax)
1476:             y0 = yc - Ysize / 2.0
1477:             y1 = yc + Ysize / 2.0
1478:             if aspect_scale_mode == "log":
1479:                 self.set_ybound((10. ** y0, 10. ** y1))
1480:             else:
1481:                 self.set_ybound((y0, y1))
1482:         else:
1483:             xc = 0.5 * (xmin + xmax)
1484:             x0 = xc - Xsize / 2.0
1485:             x1 = xc + Xsize / 2.0
1486:             if aspect_scale_mode == "log":
1487:                 self.set_xbound((10. ** x0, 10. ** x1))
1488:             else:
1489:                 self.set_xbound((x0, x1))
1490: 
1491:     def axis(self, *v, **kwargs):
1492:         '''Set axis properties.
1493: 
1494:         Valid signatures::
1495: 
1496:           xmin, xmax, ymin, ymax = axis()
1497:           xmin, xmax, ymin, ymax = axis(list_arg)
1498:           xmin, xmax, ymin, ymax = axis(string_arg)
1499:           xmin, xmax, ymin, ymax = axis(**kwargs)
1500: 
1501:         Parameters
1502:         ----------
1503:         v : list of float or {'on', 'off', 'equal', 'tight', 'scaled',\
1504:             'normal', 'auto', 'image', 'square'}
1505:             Optional positional argument
1506: 
1507:             Axis data limits set from a list; or a command relating to axes:
1508: 
1509:                 ========== ================================================
1510:                 Value      Description
1511:                 ========== ================================================
1512:                 'on'       Toggle axis lines and labels on
1513:                 'off'      Toggle axis lines and labels off
1514:                 'equal'    Equal scaling by changing limits
1515:                 'scaled'   Equal scaling by changing box dimensions
1516:                 'tight'    Limits set such that all data is shown
1517:                 'auto'     Automatic scaling, fill rectangle with data
1518:                 'normal'   Same as 'auto'; deprecated
1519:                 'image'    'scaled' with axis limits equal to data limits
1520:                 'square'   Square plot; similar to 'scaled', but initially\
1521:                            forcing xmax-xmin = ymax-ymin
1522:                 ========== ================================================
1523: 
1524:         emit : bool, optional
1525:             Passed to set_{x,y}lim functions, if observers
1526:             are notified of axis limit change
1527: 
1528:         xmin, ymin, xmax, ymax : float, optional
1529:             The axis limits to be set
1530: 
1531:         Returns
1532:         -------
1533:         xmin, xmax, ymin, ymax : float
1534:             The axis limits
1535: 
1536:         '''
1537: 
1538:         if len(v) == 0 and len(kwargs) == 0:
1539:             xmin, xmax = self.get_xlim()
1540:             ymin, ymax = self.get_ylim()
1541:             return xmin, xmax, ymin, ymax
1542: 
1543:         emit = kwargs.get('emit', True)
1544: 
1545:         if len(v) == 1 and isinstance(v[0], six.string_types):
1546:             s = v[0].lower()
1547:             if s == 'on':
1548:                 self.set_axis_on()
1549:             elif s == 'off':
1550:                 self.set_axis_off()
1551:             elif s in ('equal', 'tight', 'scaled', 'normal',
1552:                        'auto', 'image', 'square'):
1553:                 self.set_autoscale_on(True)
1554:                 self.set_aspect('auto')
1555:                 self.autoscale_view(tight=False)
1556:                 # self.apply_aspect()
1557:                 if s == 'equal':
1558:                     self.set_aspect('equal', adjustable='datalim')
1559:                 elif s == 'scaled':
1560:                     self.set_aspect('equal', adjustable='box', anchor='C')
1561:                     self.set_autoscale_on(False)  # Req. by Mark Bakker
1562:                 elif s == 'tight':
1563:                     self.autoscale_view(tight=True)
1564:                     self.set_autoscale_on(False)
1565:                 elif s == 'image':
1566:                     self.autoscale_view(tight=True)
1567:                     self.set_autoscale_on(False)
1568:                     self.set_aspect('equal', adjustable='box', anchor='C')
1569:                 elif s == 'square':
1570:                     self.set_aspect('equal', adjustable='box', anchor='C')
1571:                     self.set_autoscale_on(False)
1572:                     xlim = self.get_xlim()
1573:                     ylim = self.get_ylim()
1574:                     edge_size = max(np.diff(xlim), np.diff(ylim))
1575:                     self.set_xlim([xlim[0], xlim[0] + edge_size],
1576:                                   emit=emit, auto=False)
1577:                     self.set_ylim([ylim[0], ylim[0] + edge_size],
1578:                                   emit=emit, auto=False)
1579:             else:
1580:                 raise ValueError('Unrecognized string %s to axis; '
1581:                                  'try on or off' % s)
1582:             xmin, xmax = self.get_xlim()
1583:             ymin, ymax = self.get_ylim()
1584:             return xmin, xmax, ymin, ymax
1585: 
1586:         try:
1587:             v[0]
1588:         except IndexError:
1589:             xmin = kwargs.get('xmin', None)
1590:             xmax = kwargs.get('xmax', None)
1591:             auto = False  # turn off autoscaling, unless...
1592:             if xmin is None and xmax is None:
1593:                 auto = None  # leave autoscaling state alone
1594:             xmin, xmax = self.set_xlim(xmin, xmax, emit=emit, auto=auto)
1595: 
1596:             ymin = kwargs.get('ymin', None)
1597:             ymax = kwargs.get('ymax', None)
1598:             auto = False  # turn off autoscaling, unless...
1599:             if ymin is None and ymax is None:
1600:                 auto = None  # leave autoscaling state alone
1601:             ymin, ymax = self.set_ylim(ymin, ymax, emit=emit, auto=auto)
1602:             return xmin, xmax, ymin, ymax
1603: 
1604:         v = v[0]
1605:         if len(v) != 4:
1606:             raise ValueError('v must contain [xmin xmax ymin ymax]')
1607: 
1608:         self.set_xlim([v[0], v[1]], emit=emit, auto=False)
1609:         self.set_ylim([v[2], v[3]], emit=emit, auto=False)
1610: 
1611:         return v
1612: 
1613:     def get_legend(self):
1614:         '''
1615:         Return the legend.Legend instance, or None if no legend is defined
1616:         '''
1617:         return self.legend_
1618: 
1619:     def get_images(self):
1620:         '''return a list of Axes images contained by the Axes'''
1621:         return cbook.silent_list('AxesImage', self.images)
1622: 
1623:     def get_lines(self):
1624:         '''Return a list of lines contained by the Axes'''
1625:         return cbook.silent_list('Line2D', self.lines)
1626: 
1627:     def get_xaxis(self):
1628:         '''Return the XAxis instance'''
1629:         return self.xaxis
1630: 
1631:     def get_xgridlines(self):
1632:         '''Get the x grid lines as a list of Line2D instances'''
1633:         return cbook.silent_list('Line2D xgridline',
1634:                                  self.xaxis.get_gridlines())
1635: 
1636:     def get_xticklines(self):
1637:         '''Get the xtick lines as a list of Line2D instances'''
1638:         return cbook.silent_list('Text xtickline',
1639:                                  self.xaxis.get_ticklines())
1640: 
1641:     def get_yaxis(self):
1642:         '''Return the YAxis instance'''
1643:         return self.yaxis
1644: 
1645:     def get_ygridlines(self):
1646:         '''Get the y grid lines as a list of Line2D instances'''
1647:         return cbook.silent_list('Line2D ygridline',
1648:                                  self.yaxis.get_gridlines())
1649: 
1650:     def get_yticklines(self):
1651:         '''Get the ytick lines as a list of Line2D instances'''
1652:         return cbook.silent_list('Line2D ytickline',
1653:                                  self.yaxis.get_ticklines())
1654: 
1655:     # Adding and tracking artists
1656: 
1657:     def _sci(self, im):
1658:         '''
1659:         helper for :func:`~matplotlib.pyplot.sci`;
1660:         do not use elsewhere.
1661:         '''
1662:         if isinstance(im, matplotlib.contour.ContourSet):
1663:             if im.collections[0] not in self.collections:
1664:                 raise ValueError(
1665:                     "ContourSet must be in current Axes")
1666:         elif im not in self.images and im not in self.collections:
1667:             raise ValueError(
1668:                 "Argument must be an image, collection, or ContourSet in "
1669:                 "this Axes")
1670:         self._current_image = im
1671: 
1672:     def _gci(self):
1673:         '''
1674:         Helper for :func:`~matplotlib.pyplot.gci`;
1675:         do not use elsewhere.
1676:         '''
1677:         return self._current_image
1678: 
1679:     def has_data(self):
1680:         '''
1681:         Return *True* if any artists have been added to axes.
1682: 
1683:         This should not be used to determine whether the *dataLim*
1684:         need to be updated, and may not actually be useful for
1685:         anything.
1686:         '''
1687:         return (
1688:             len(self.collections) +
1689:             len(self.images) +
1690:             len(self.lines) +
1691:             len(self.patches)) > 0
1692: 
1693:     def add_artist(self, a):
1694:         '''Add any :class:`~matplotlib.artist.Artist` to the axes.
1695: 
1696:         Use `add_artist` only for artists for which there is no dedicated
1697:         "add" method; and if necessary, use a method such as
1698:         `update_datalim` or `update_datalim_numerix` to manually update the
1699:         dataLim if the artist is to be included in autoscaling.
1700: 
1701:         Returns the artist.
1702:         '''
1703:         a.axes = self
1704:         self.artists.append(a)
1705:         self._set_artist_props(a)
1706:         a.set_clip_path(self.patch)
1707:         a._remove_method = lambda h: self.artists.remove(h)
1708:         self.stale = True
1709:         return a
1710: 
1711:     def add_collection(self, collection, autolim=True):
1712:         '''
1713:         Add a :class:`~matplotlib.collections.Collection` instance
1714:         to the axes.
1715: 
1716:         Returns the collection.
1717:         '''
1718:         label = collection.get_label()
1719:         if not label:
1720:             collection.set_label('_collection%d' % len(self.collections))
1721:         self.collections.append(collection)
1722:         self._set_artist_props(collection)
1723: 
1724:         if collection.get_clip_path() is None:
1725:             collection.set_clip_path(self.patch)
1726: 
1727:         if autolim:
1728:             self.update_datalim(collection.get_datalim(self.transData))
1729: 
1730:         collection._remove_method = lambda h: self.collections.remove(h)
1731:         self.stale = True
1732:         return collection
1733: 
1734:     def add_image(self, image):
1735:         '''
1736:         Add a :class:`~matplotlib.image.AxesImage` to the axes.
1737: 
1738:         Returns the image.
1739:         '''
1740:         self._set_artist_props(image)
1741:         if not image.get_label():
1742:             image.set_label('_image%d' % len(self.images))
1743:         self.images.append(image)
1744:         image._remove_method = lambda h: self.images.remove(h)
1745:         self.stale = True
1746:         return image
1747: 
1748:     def add_line(self, line):
1749:         '''
1750:         Add a :class:`~matplotlib.lines.Line2D` to the list of plot
1751:         lines
1752: 
1753:         Returns the line.
1754:         '''
1755:         self._set_artist_props(line)
1756:         if line.get_clip_path() is None:
1757:             line.set_clip_path(self.patch)
1758: 
1759:         self._update_line_limits(line)
1760:         if not line.get_label():
1761:             line.set_label('_line%d' % len(self.lines))
1762:         self.lines.append(line)
1763:         line._remove_method = lambda h: self.lines.remove(h)
1764:         self.stale = True
1765:         return line
1766: 
1767:     def _add_text(self, txt):
1768:         '''
1769: 
1770:         '''
1771:         self._set_artist_props(txt)
1772:         self.texts.append(txt)
1773:         txt._remove_method = lambda h: self.texts.remove(h)
1774:         self.stale = True
1775:         return txt
1776: 
1777:     def _update_line_limits(self, line):
1778:         '''
1779:         Figures out the data limit of the given line, updating self.dataLim.
1780:         '''
1781:         path = line.get_path()
1782:         if path.vertices.size == 0:
1783:             return
1784: 
1785:         line_trans = line.get_transform()
1786: 
1787:         if line_trans == self.transData:
1788:             data_path = path
1789: 
1790:         elif any(line_trans.contains_branch_seperately(self.transData)):
1791:             # identify the transform to go from line's coordinates
1792:             # to data coordinates
1793:             trans_to_data = line_trans - self.transData
1794: 
1795:             # if transData is affine we can use the cached non-affine component
1796:             # of line's path. (since the non-affine part of line_trans is
1797:             # entirely encapsulated in trans_to_data).
1798:             if self.transData.is_affine:
1799:                 line_trans_path = line._get_transformed_path()
1800:                 na_path, _ = line_trans_path.get_transformed_path_and_affine()
1801:                 data_path = trans_to_data.transform_path_affine(na_path)
1802:             else:
1803:                 data_path = trans_to_data.transform_path(path)
1804:         else:
1805:             # for backwards compatibility we update the dataLim with the
1806:             # coordinate range of the given path, even though the coordinate
1807:             # systems are completely different. This may occur in situations
1808:             # such as when ax.transAxes is passed through for absolute
1809:             # positioning.
1810:             data_path = path
1811: 
1812:         if data_path.vertices.size > 0:
1813:             updatex, updatey = line_trans.contains_branch_seperately(
1814:                 self.transData)
1815:             self.dataLim.update_from_path(data_path,
1816:                                           self.ignore_existing_data_limits,
1817:                                           updatex=updatex,
1818:                                           updatey=updatey)
1819:             self.ignore_existing_data_limits = False
1820: 
1821:     def add_patch(self, p):
1822:         '''
1823:         Add a :class:`~matplotlib.patches.Patch` *p* to the list of
1824:         axes patches; the clipbox will be set to the Axes clipping
1825:         box.  If the transform is not set, it will be set to
1826:         :attr:`transData`.
1827: 
1828:         Returns the patch.
1829:         '''
1830: 
1831:         self._set_artist_props(p)
1832:         if p.get_clip_path() is None:
1833:             p.set_clip_path(self.patch)
1834:         self._update_patch_limits(p)
1835:         self.patches.append(p)
1836:         p._remove_method = lambda h: self.patches.remove(h)
1837:         return p
1838: 
1839:     def _update_patch_limits(self, patch):
1840:         '''update the data limits for patch *p*'''
1841:         # hist can add zero height Rectangles, which is useful to keep
1842:         # the bins, counts and patches lined up, but it throws off log
1843:         # scaling.  We'll ignore rects with zero height or width in
1844:         # the auto-scaling
1845: 
1846:         # cannot check for '==0' since unitized data may not compare to zero
1847:         # issue #2150 - we update the limits if patch has non zero width
1848:         # or height.
1849:         if (isinstance(patch, mpatches.Rectangle) and
1850:                 ((not patch.get_width()) and (not patch.get_height()))):
1851:             return
1852:         vertices = patch.get_path().vertices
1853:         if vertices.size > 0:
1854:             xys = patch.get_patch_transform().transform(vertices)
1855:             if patch.get_data_transform() != self.transData:
1856:                 patch_to_data = (patch.get_data_transform() -
1857:                                  self.transData)
1858:                 xys = patch_to_data.transform(xys)
1859: 
1860:             updatex, updatey = patch.get_transform().\
1861:                 contains_branch_seperately(self.transData)
1862:             self.update_datalim(xys, updatex=updatex,
1863:                                 updatey=updatey)
1864: 
1865:     def add_table(self, tab):
1866:         '''
1867:         Add a :class:`~matplotlib.tables.Table` instance to the
1868:         list of axes tables
1869: 
1870:         Returns the table.
1871:         '''
1872:         self._set_artist_props(tab)
1873:         self.tables.append(tab)
1874:         tab.set_clip_path(self.patch)
1875:         tab._remove_method = lambda h: self.tables.remove(h)
1876:         return tab
1877: 
1878:     def add_container(self, container):
1879:         '''
1880:         Add a :class:`~matplotlib.container.Container` instance
1881:         to the axes.
1882: 
1883:         Returns the collection.
1884:         '''
1885:         label = container.get_label()
1886:         if not label:
1887:             container.set_label('_container%d' % len(self.containers))
1888:         self.containers.append(container)
1889:         container.set_remove_method(lambda h: self.containers.remove(h))
1890:         return container
1891: 
1892:     def _on_units_changed(self, scalex=False, scaley=False):
1893:         '''
1894:         Callback for processing changes to axis units.
1895: 
1896:         Currently forces updates of data limits and view limits.
1897:         '''
1898:         self.relim()
1899:         self.autoscale_view(scalex=scalex, scaley=scaley)
1900: 
1901:     def relim(self, visible_only=False):
1902:         '''
1903:         Recompute the data limits based on current artists. If you want to
1904:         exclude invisible artists from the calculation, set
1905:         ``visible_only=True``
1906: 
1907:         At present, :class:`~matplotlib.collections.Collection`
1908:         instances are not supported.
1909:         '''
1910:         # Collections are deliberately not supported (yet); see
1911:         # the TODO note in artists.py.
1912:         self.dataLim.ignore(True)
1913:         self.dataLim.set_points(mtransforms.Bbox.null().get_points())
1914:         self.ignore_existing_data_limits = True
1915: 
1916:         for line in self.lines:
1917:             if not visible_only or line.get_visible():
1918:                 self._update_line_limits(line)
1919: 
1920:         for p in self.patches:
1921:             if not visible_only or p.get_visible():
1922:                 self._update_patch_limits(p)
1923: 
1924:     def update_datalim(self, xys, updatex=True, updatey=True):
1925:         '''
1926:         Update the data lim bbox with seq of xy tups or equiv. 2-D array
1927:         '''
1928:         # if no data is set currently, the bbox will ignore its
1929:         # limits and set the bound to be the bounds of the xydata.
1930:         # Otherwise, it will compute the bounds of it's current data
1931:         # and the data in xydata
1932:         xys = np.asarray(xys)
1933:         if not len(xys):
1934:             return
1935:         self.dataLim.update_from_data_xy(xys, self.ignore_existing_data_limits,
1936:                                          updatex=updatex, updatey=updatey)
1937:         self.ignore_existing_data_limits = False
1938: 
1939:     @cbook.deprecated('2.0', alternative='update_datalim')
1940:     def update_datalim_numerix(self, x, y):
1941:         '''
1942:         Update the data lim bbox with seq of xy tups
1943:         '''
1944:         # if no data is set currently, the bbox will ignore it's
1945:         # limits and set the bound to be the bounds of the xydata.
1946:         # Otherwise, it will compute the bounds of it's current data
1947:         # and the data in xydata
1948:         if iterable(x) and not len(x):
1949:             return
1950:         self.dataLim.update_from_data(x, y, self.ignore_existing_data_limits)
1951:         self.ignore_existing_data_limits = False
1952: 
1953:     def update_datalim_bounds(self, bounds):
1954:         '''
1955:         Update the datalim to include the given
1956:         :class:`~matplotlib.transforms.Bbox` *bounds*
1957:         '''
1958:         self.dataLim.set(mtransforms.Bbox.union([self.dataLim, bounds]))
1959: 
1960:     def _process_unit_info(self, xdata=None, ydata=None, kwargs=None):
1961:         '''Look for unit *kwargs* and update the axis instances as necessary'''
1962: 
1963:         if self.xaxis is None or self.yaxis is None:
1964:             return
1965: 
1966:         if xdata is not None:
1967:             # we only need to update if there is nothing set yet.
1968:             if not self.xaxis.have_units():
1969:                 self.xaxis.update_units(xdata)
1970: 
1971:         if ydata is not None:
1972:             # we only need to update if there is nothing set yet.
1973:             if not self.yaxis.have_units():
1974:                 self.yaxis.update_units(ydata)
1975: 
1976:         # process kwargs 2nd since these will override default units
1977:         if kwargs is not None:
1978:             xunits = kwargs.pop('xunits', self.xaxis.units)
1979:             if self.name == 'polar':
1980:                 xunits = kwargs.pop('thetaunits', xunits)
1981:             if xunits != self.xaxis.units:
1982:                 self.xaxis.set_units(xunits)
1983:                 # If the units being set imply a different converter,
1984:                 # we need to update.
1985:                 if xdata is not None:
1986:                     self.xaxis.update_units(xdata)
1987: 
1988:             yunits = kwargs.pop('yunits', self.yaxis.units)
1989:             if self.name == 'polar':
1990:                 yunits = kwargs.pop('runits', yunits)
1991:             if yunits != self.yaxis.units:
1992:                 self.yaxis.set_units(yunits)
1993:                 # If the units being set imply a different converter,
1994:                 # we need to update.
1995:                 if ydata is not None:
1996:                     self.yaxis.update_units(ydata)
1997:         return kwargs
1998: 
1999:     def in_axes(self, mouseevent):
2000:         '''
2001:         Return *True* if the given *mouseevent* (in display coords)
2002:         is in the Axes
2003:         '''
2004:         return self.patch.contains(mouseevent)[0]
2005: 
2006:     def get_autoscale_on(self):
2007:         '''
2008:         Get whether autoscaling is applied for both axes on plot commands
2009:         '''
2010:         return self._autoscaleXon and self._autoscaleYon
2011: 
2012:     def get_autoscalex_on(self):
2013:         '''
2014:         Get whether autoscaling for the x-axis is applied on plot commands
2015:         '''
2016:         return self._autoscaleXon
2017: 
2018:     def get_autoscaley_on(self):
2019:         '''
2020:         Get whether autoscaling for the y-axis is applied on plot commands
2021:         '''
2022:         return self._autoscaleYon
2023: 
2024:     def set_autoscale_on(self, b):
2025:         '''
2026:         Set whether autoscaling is applied on plot commands
2027: 
2028:         accepts: [ *True* | *False* ]
2029:         '''
2030:         self._autoscaleXon = b
2031:         self._autoscaleYon = b
2032: 
2033:     def set_autoscalex_on(self, b):
2034:         '''
2035:         Set whether autoscaling for the x-axis is applied on plot commands
2036: 
2037:         accepts: [ *True* | *False* ]
2038:         '''
2039:         self._autoscaleXon = b
2040: 
2041:     def set_autoscaley_on(self, b):
2042:         '''
2043:         Set whether autoscaling for the y-axis is applied on plot commands
2044: 
2045:         accepts: [ *True* | *False* ]
2046:         '''
2047:         self._autoscaleYon = b
2048: 
2049:     @property
2050:     def use_sticky_edges(self):
2051:         '''
2052:         When autoscaling, whether to obey all `Artist.sticky_edges`.
2053: 
2054:         Default is ``True``.
2055: 
2056:         Setting this to ``False`` ensures that the specified margins
2057:         will be applied, even if the plot includes an image, for
2058:         example, which would otherwise force a view limit to coincide
2059:         with its data limit.
2060: 
2061:         The changing this property does not change the plot until
2062:         `autoscale` or `autoscale_view` is called.
2063:         '''
2064:         return self._use_sticky_edges
2065: 
2066:     @use_sticky_edges.setter
2067:     def use_sticky_edges(self, b):
2068:         self._use_sticky_edges = bool(b)
2069:         # No effect until next autoscaling, which will mark the axes as stale.
2070: 
2071:     def set_xmargin(self, m):
2072:         '''
2073:         Set padding of X data limits prior to autoscaling.
2074: 
2075:         *m* times the data interval will be added to each
2076:         end of that interval before it is used in autoscaling.
2077: 
2078:         accepts: float in range 0 to 1
2079:         '''
2080:         if m < 0 or m > 1:
2081:             raise ValueError("margin must be in range 0 to 1")
2082:         self._xmargin = m
2083:         self.stale = True
2084: 
2085:     def set_ymargin(self, m):
2086:         '''
2087:         Set padding of Y data limits prior to autoscaling.
2088: 
2089:         *m* times the data interval will be added to each
2090:         end of that interval before it is used in autoscaling.
2091: 
2092:         accepts: float in range 0 to 1
2093:         '''
2094:         if m < 0 or m > 1:
2095:             raise ValueError("margin must be in range 0 to 1")
2096:         self._ymargin = m
2097:         self.stale = True
2098: 
2099:     def margins(self, *args, **kw):
2100:         '''
2101:         Set or retrieve autoscaling margins.
2102: 
2103:         signatures::
2104: 
2105:             margins()
2106: 
2107:         returns xmargin, ymargin
2108: 
2109:         ::
2110: 
2111:             margins(margin)
2112: 
2113:             margins(xmargin, ymargin)
2114: 
2115:             margins(x=xmargin, y=ymargin)
2116: 
2117:             margins(..., tight=False)
2118: 
2119:         All three forms above set the xmargin and ymargin parameters.
2120:         All keyword parameters are optional.  A single argument
2121:         specifies both xmargin and ymargin.  The *tight* parameter
2122:         is passed to :meth:`autoscale_view`, which is executed after
2123:         a margin is changed; the default here is *True*, on the
2124:         assumption that when margins are specified, no additional
2125:         padding to match tick marks is usually desired.  Setting
2126:         *tight* to *None* will preserve the previous setting.
2127: 
2128:         Specifying any margin changes only the autoscaling; for example,
2129:         if *xmargin* is not None, then *xmargin* times the X data
2130:         interval will be added to each end of that interval before
2131:         it is used in autoscaling.
2132: 
2133:         '''
2134:         if not args and not kw:
2135:             return self._xmargin, self._ymargin
2136: 
2137:         tight = kw.pop('tight', True)
2138:         mx = kw.pop('x', None)
2139:         my = kw.pop('y', None)
2140:         if len(args) == 1:
2141:             mx = my = args[0]
2142:         elif len(args) == 2:
2143:             mx, my = args
2144:         elif len(args) > 2:
2145:             raise ValueError("more than two arguments were supplied")
2146:         if mx is not None:
2147:             self.set_xmargin(mx)
2148:         if my is not None:
2149:             self.set_ymargin(my)
2150: 
2151:         scalex = (mx is not None)
2152:         scaley = (my is not None)
2153: 
2154:         self.autoscale_view(tight=tight, scalex=scalex, scaley=scaley)
2155: 
2156:     def set_rasterization_zorder(self, z):
2157:         '''
2158:         Set zorder value below which artists will be rasterized.  Set
2159:         to `None` to disable rasterizing of artists below a particular
2160:         zorder.
2161:         '''
2162:         self._rasterization_zorder = z
2163:         self.stale = True
2164: 
2165:     def get_rasterization_zorder(self):
2166:         '''
2167:         Get zorder value below which artists will be rasterized
2168:         '''
2169:         return self._rasterization_zorder
2170: 
2171:     def autoscale(self, enable=True, axis='both', tight=None):
2172:         '''
2173:         Autoscale the axis view to the data (toggle).
2174: 
2175:         Convenience method for simple axis view autoscaling.
2176:         It turns autoscaling on or off, and then,
2177:         if autoscaling for either axis is on, it performs
2178:         the autoscaling on the specified axis or axes.
2179: 
2180:         *enable*: [True | False | None]
2181:             True (default) turns autoscaling on, False turns it off.
2182:             None leaves the autoscaling state unchanged.
2183: 
2184:         *axis*: ['x' | 'y' | 'both']
2185:             which axis to operate on; default is 'both'
2186: 
2187:         *tight*: [True | False | None]
2188:             If True, set view limits to data limits;
2189:             if False, let the locator and margins expand the view limits;
2190:             if None, use tight scaling if the only artist is an image,
2191:             otherwise treat *tight* as False.
2192:             The *tight* setting is retained for future autoscaling
2193:             until it is explicitly changed.
2194: 
2195: 
2196:         Returns None.
2197:         '''
2198:         if enable is None:
2199:             scalex = True
2200:             scaley = True
2201:         else:
2202:             scalex = False
2203:             scaley = False
2204:             if axis in ['x', 'both']:
2205:                 self._autoscaleXon = bool(enable)
2206:                 scalex = self._autoscaleXon
2207:             if axis in ['y', 'both']:
2208:                 self._autoscaleYon = bool(enable)
2209:                 scaley = self._autoscaleYon
2210:         if tight and scalex:
2211:             self._xmargin = 0
2212:         if tight and scaley:
2213:             self._ymargin = 0
2214:         self.autoscale_view(tight=tight, scalex=scalex, scaley=scaley)
2215: 
2216:     def autoscale_view(self, tight=None, scalex=True, scaley=True):
2217:         '''
2218:         Autoscale the view limits using the data limits. You can
2219:         selectively autoscale only a single axis, e.g., the xaxis by
2220:         setting *scaley* to *False*.  The autoscaling preserves any
2221:         axis direction reversal that has already been done.
2222: 
2223:         If *tight* is *False*, the axis major locator will be used
2224:         to expand the view limits if rcParams['axes.autolimit_mode']
2225:         is 'round_numbers'.  Note that any margins that are in effect
2226:         will be applied first, regardless of whether *tight* is
2227:         *True* or *False*.  Specifying *tight* as *True* or *False*
2228:         saves the setting as a private attribute of the Axes; specifying
2229:         it as *None* (the default) applies the previously saved value.
2230: 
2231:         The data limits are not updated automatically when artist data are
2232:         changed after the artist has been added to an Axes instance.  In that
2233:         case, use :meth:`matplotlib.axes.Axes.relim` prior to calling
2234:         autoscale_view.
2235:         '''
2236:         if tight is not None:
2237:             self._tight = bool(tight)
2238: 
2239:         if self.use_sticky_edges and (self._xmargin or self._ymargin):
2240:             stickies = [artist.sticky_edges for artist in self.get_children()]
2241:             x_stickies = sum([sticky.x for sticky in stickies], [])
2242:             y_stickies = sum([sticky.y for sticky in stickies], [])
2243:             if self.get_xscale().lower() == 'log':
2244:                 x_stickies = [xs for xs in x_stickies if xs > 0]
2245:             if self.get_yscale().lower() == 'log':
2246:                 y_stickies = [ys for ys in y_stickies if ys > 0]
2247:         else:  # Small optimization.
2248:             x_stickies, y_stickies = [], []
2249: 
2250:         def handle_single_axis(scale, autoscaleon, shared_axes, interval,
2251:                                minpos, axis, margin, stickies, set_bound):
2252: 
2253:             if not (scale and autoscaleon):
2254:                 return  # nothing to do...
2255: 
2256:             shared = shared_axes.get_siblings(self)
2257:             dl = [ax.dataLim for ax in shared]
2258:             # ignore non-finite data limits if good limits exist
2259:             finite_dl = [d for d in dl if np.isfinite(d).all()]
2260:             if len(finite_dl):
2261:                 # if finite limits exist for atleast one axis (and the
2262:                 # other is infinite), restore the finite limits
2263:                 x_finite = [d for d in dl
2264:                             if (np.isfinite(d.intervalx).all() and
2265:                                 (d not in finite_dl))]
2266:                 y_finite = [d for d in dl
2267:                             if (np.isfinite(d.intervaly).all() and
2268:                                 (d not in finite_dl))]
2269: 
2270:                 dl = finite_dl
2271:                 dl.extend(x_finite)
2272:                 dl.extend(y_finite)
2273: 
2274:             bb = mtransforms.BboxBase.union(dl)
2275:             x0, x1 = getattr(bb, interval)
2276:             locator = axis.get_major_locator()
2277:             try:
2278:                 # e.g., DateLocator has its own nonsingular()
2279:                 x0, x1 = locator.nonsingular(x0, x1)
2280:             except AttributeError:
2281:                 # Default nonsingular for, e.g., MaxNLocator
2282:                 x0, x1 = mtransforms.nonsingular(
2283:                     x0, x1, increasing=False, expander=0.05)
2284: 
2285:             # Add the margin in figure space and then transform back, to handle
2286:             # non-linear scales.
2287:             minpos = getattr(bb, minpos)
2288:             transform = axis.get_transform()
2289:             inverse_trans = transform.inverted()
2290:             # We cannot use exact equality due to floating point issues e.g.
2291:             # with streamplot.
2292:             do_lower_margin = not np.any(np.isclose(x0, stickies))
2293:             do_upper_margin = not np.any(np.isclose(x1, stickies))
2294:             x0, x1 = axis._scale.limit_range_for_scale(x0, x1, minpos)
2295:             x0t, x1t = transform.transform([x0, x1])
2296:             delta = (x1t - x0t) * margin
2297:             if do_lower_margin:
2298:                 x0t -= delta
2299:             if do_upper_margin:
2300:                 x1t += delta
2301:             x0, x1 = inverse_trans.transform([x0t, x1t])
2302: 
2303:             if not self._tight:
2304:                 x0, x1 = locator.view_limits(x0, x1)
2305:             set_bound(x0, x1)
2306:             # End of definition of internal function 'handle_single_axis'.
2307: 
2308:         handle_single_axis(
2309:             scalex, self._autoscaleXon, self._shared_x_axes, 'intervalx',
2310:             'minposx', self.xaxis, self._xmargin, x_stickies, self.set_xbound)
2311:         handle_single_axis(
2312:             scaley, self._autoscaleYon, self._shared_y_axes, 'intervaly',
2313:             'minposy', self.yaxis, self._ymargin, y_stickies, self.set_ybound)
2314: 
2315:     def _get_axis_list(self):
2316:         return (self.xaxis, self.yaxis)
2317: 
2318:     # Drawing
2319: 
2320:     @allow_rasterization
2321:     def draw(self, renderer=None, inframe=False):
2322:         '''Draw everything (plot lines, axes, labels)'''
2323:         if renderer is None:
2324:             renderer = self._cachedRenderer
2325: 
2326:         if renderer is None:
2327:             raise RuntimeError('No renderer defined')
2328:         if not self.get_visible():
2329:             return
2330:         renderer.open_group('axes')
2331:         # prevent triggering call backs during the draw process
2332:         self._stale = True
2333:         locator = self.get_axes_locator()
2334:         if locator:
2335:             pos = locator(self, renderer)
2336:             self.apply_aspect(pos)
2337:         else:
2338:             self.apply_aspect()
2339: 
2340:         artists = self.get_children()
2341:         artists.remove(self.patch)
2342: 
2343:         # the frame draws the edges around the axes patch -- we
2344:         # decouple these so the patch can be in the background and the
2345:         # frame in the foreground. Do this before drawing the axis
2346:         # objects so that the spine has the opportunity to update them.
2347:         if not (self.axison and self._frameon):
2348:             for spine in six.itervalues(self.spines):
2349:                 artists.remove(spine)
2350: 
2351:         if self.axison and not inframe:
2352:             if self._axisbelow is True:
2353:                 self.xaxis.set_zorder(0.5)
2354:                 self.yaxis.set_zorder(0.5)
2355:             elif self._axisbelow is False:
2356:                 self.xaxis.set_zorder(2.5)
2357:                 self.yaxis.set_zorder(2.5)
2358:             else:
2359:                 # 'line': above patches, below lines
2360:                 self.xaxis.set_zorder(1.5)
2361:                 self.yaxis.set_zorder(1.5)
2362:         else:
2363:             for _axis in self._get_axis_list():
2364:                 artists.remove(_axis)
2365: 
2366:         if inframe:
2367:             artists.remove(self.title)
2368:             artists.remove(self._left_title)
2369:             artists.remove(self._right_title)
2370: 
2371:         if not self.figure.canvas.is_saving():
2372:             artists = [a for a in artists
2373:                        if not a.get_animated() or a in self.images]
2374:         artists = sorted(artists, key=attrgetter('zorder'))
2375: 
2376:         # rasterize artists with negative zorder
2377:         # if the minimum zorder is negative, start rasterization
2378:         rasterization_zorder = self._rasterization_zorder
2379:         if (rasterization_zorder is not None and
2380:                 artists and artists[0].zorder < rasterization_zorder):
2381:             renderer.start_rasterizing()
2382:             artists_rasterized = [a for a in artists
2383:                                   if a.zorder < rasterization_zorder]
2384:             artists = [a for a in artists
2385:                        if a.zorder >= rasterization_zorder]
2386:         else:
2387:             artists_rasterized = []
2388: 
2389:         # the patch draws the background rectangle -- the frame below
2390:         # will draw the edges
2391:         if self.axison and self._frameon:
2392:             self.patch.draw(renderer)
2393: 
2394:         if artists_rasterized:
2395:             for a in artists_rasterized:
2396:                 a.draw(renderer)
2397:             renderer.stop_rasterizing()
2398: 
2399:         mimage._draw_list_compositing_images(renderer, self, artists)
2400: 
2401:         renderer.close_group('axes')
2402:         self._cachedRenderer = renderer
2403:         self.stale = False
2404: 
2405:     def draw_artist(self, a):
2406:         '''
2407:         This method can only be used after an initial draw which
2408:         caches the renderer.  It is used to efficiently update Axes
2409:         data (axis ticks, labels, etc are not updated)
2410:         '''
2411:         if self._cachedRenderer is None:
2412:             msg = ('draw_artist can only be used after an initial draw which'
2413:                    ' caches the render')
2414:             raise AttributeError(msg)
2415:         a.draw(self._cachedRenderer)
2416: 
2417:     def redraw_in_frame(self):
2418:         '''
2419:         This method can only be used after an initial draw which
2420:         caches the renderer.  It is used to efficiently update Axes
2421:         data (axis ticks, labels, etc are not updated)
2422:         '''
2423:         if self._cachedRenderer is None:
2424:             msg = ('redraw_in_frame can only be used after an initial draw'
2425:                    ' which caches the render')
2426:             raise AttributeError(msg)
2427:         self.draw(self._cachedRenderer, inframe=True)
2428: 
2429:     def get_renderer_cache(self):
2430:         return self._cachedRenderer
2431: 
2432:     # Axes rectangle characteristics
2433: 
2434:     def get_frame_on(self):
2435:         '''
2436:         Get whether the axes rectangle patch is drawn
2437:         '''
2438:         return self._frameon
2439: 
2440:     def set_frame_on(self, b):
2441:         '''
2442:         Set whether the axes rectangle patch is drawn
2443: 
2444:         ACCEPTS: [ *True* | *False* ]
2445:         '''
2446:         self._frameon = b
2447:         self.stale = True
2448: 
2449:     def get_axisbelow(self):
2450:         '''
2451:         Get whether axis below is true or not
2452:         '''
2453:         return self._axisbelow
2454: 
2455:     def set_axisbelow(self, b):
2456:         '''
2457:         Set whether the axis ticks and gridlines are above or below most
2458:         artists
2459: 
2460:         ACCEPTS: [ *True* | *False* | 'line' ]
2461:         '''
2462:         self._axisbelow = validate_axisbelow(b)
2463:         self.stale = True
2464: 
2465:     @docstring.dedent_interpd
2466:     def grid(self, b=None, which='major', axis='both', **kwargs):
2467:         '''
2468:         Turn the axes grids on or off.
2469: 
2470:         Set the axes grids on or off; *b* is a boolean.  (For MATLAB
2471:         compatibility, *b* may also be a string, 'on' or 'off'.)
2472: 
2473:         If *b* is *None* and ``len(kwargs)==0``, toggle the grid state.  If
2474:         *kwargs* are supplied, it is assumed that you want a grid and *b*
2475:         is thus set to *True*.
2476: 
2477:         *which* can be 'major' (default), 'minor', or 'both' to control
2478:         whether major tick grids, minor tick grids, or both are affected.
2479: 
2480:         *axis* can be 'both' (default), 'x', or 'y' to control which
2481:         set of gridlines are drawn.
2482: 
2483:         *kwargs* are used to set the grid line properties, e.g.,::
2484: 
2485:            ax.grid(color='r', linestyle='-', linewidth=2)
2486: 
2487:         Valid :class:`~matplotlib.lines.Line2D` kwargs are
2488: 
2489:         %(Line2D)s
2490: 
2491:         '''
2492:         if len(kwargs):
2493:             b = True
2494:         elif b is not None:
2495:             b = _string_to_bool(b)
2496: 
2497:         if axis == 'x' or axis == 'both':
2498:             self.xaxis.grid(b, which=which, **kwargs)
2499:         if axis == 'y' or axis == 'both':
2500:             self.yaxis.grid(b, which=which, **kwargs)
2501: 
2502:     def ticklabel_format(self, **kwargs):
2503:         '''
2504:         Change the `~matplotlib.ticker.ScalarFormatter` used by
2505:         default for linear axes.
2506: 
2507:         Optional keyword arguments:
2508: 
2509:           ==============   =========================================
2510:           Keyword          Description
2511:           ==============   =========================================
2512:           *style*          [ 'sci' (or 'scientific') | 'plain' ]
2513:                            plain turns off scientific notation
2514:           *scilimits*      (m, n), pair of integers; if *style*
2515:                            is 'sci', scientific notation will
2516:                            be used for numbers outside the range
2517:                            10`m`:sup: to 10`n`:sup:.
2518:                            Use (0,0) to include all numbers.
2519:           *useOffset*      [True | False | offset]; if True,
2520:                            the offset will be calculated as needed;
2521:                            if False, no offset will be used; if a
2522:                            numeric offset is specified, it will be
2523:                            used.
2524:           *axis*           [ 'x' | 'y' | 'both' ]
2525:           *useLocale*      If True, format the number according to
2526:                            the current locale.  This affects things
2527:                            such as the character used for the
2528:                            decimal separator.  If False, use
2529:                            C-style (English) formatting.  The
2530:                            default setting is controlled by the
2531:                            axes.formatter.use_locale rcparam.
2532:           *useMathText*    If True, render the offset and scientific
2533:                            notation in mathtext
2534:           ==============   =========================================
2535: 
2536:         Only the major ticks are affected.
2537:         If the method is called when the
2538:         :class:`~matplotlib.ticker.ScalarFormatter` is not the
2539:         :class:`~matplotlib.ticker.Formatter` being used, an
2540:         :exc:`AttributeError` will be raised.
2541: 
2542:         '''
2543:         style = kwargs.pop('style', '').lower()
2544:         scilimits = kwargs.pop('scilimits', None)
2545:         useOffset = kwargs.pop('useOffset', None)
2546:         useLocale = kwargs.pop('useLocale', None)
2547:         useMathText = kwargs.pop('useMathText', None)
2548:         axis = kwargs.pop('axis', 'both').lower()
2549:         if scilimits is not None:
2550:             try:
2551:                 m, n = scilimits
2552:                 m + n + 1  # check that both are numbers
2553:             except (ValueError, TypeError):
2554:                 raise ValueError("scilimits must be a sequence of 2 integers")
2555:         if style[:3] == 'sci':
2556:             sb = True
2557:         elif style == 'plain':
2558:             sb = False
2559:         elif style == 'comma':
2560:             raise NotImplementedError("comma style remains to be added")
2561:         elif style == '':
2562:             sb = None
2563:         else:
2564:             raise ValueError("%s is not a valid style value")
2565:         try:
2566:             if sb is not None:
2567:                 if axis == 'both' or axis == 'x':
2568:                     self.xaxis.major.formatter.set_scientific(sb)
2569:                 if axis == 'both' or axis == 'y':
2570:                     self.yaxis.major.formatter.set_scientific(sb)
2571:             if scilimits is not None:
2572:                 if axis == 'both' or axis == 'x':
2573:                     self.xaxis.major.formatter.set_powerlimits(scilimits)
2574:                 if axis == 'both' or axis == 'y':
2575:                     self.yaxis.major.formatter.set_powerlimits(scilimits)
2576:             if useOffset is not None:
2577:                 if axis == 'both' or axis == 'x':
2578:                     self.xaxis.major.formatter.set_useOffset(useOffset)
2579:                 if axis == 'both' or axis == 'y':
2580:                     self.yaxis.major.formatter.set_useOffset(useOffset)
2581:             if useLocale is not None:
2582:                 if axis == 'both' or axis == 'x':
2583:                     self.xaxis.major.formatter.set_useLocale(useLocale)
2584:                 if axis == 'both' or axis == 'y':
2585:                     self.yaxis.major.formatter.set_useLocale(useLocale)
2586:             if useMathText is not None:
2587:                 if axis == 'both' or axis == 'x':
2588:                     self.xaxis.major.formatter.set_useMathText(useMathText)
2589:                 if axis == 'both' or axis == 'y':
2590:                     self.yaxis.major.formatter.set_useMathText(useMathText)
2591:         except AttributeError:
2592:             raise AttributeError(
2593:                 "This method only works with the ScalarFormatter.")
2594: 
2595:     def locator_params(self, axis='both', tight=None, **kwargs):
2596:         '''
2597:         Control behavior of tick locators.
2598: 
2599:         Keyword arguments:
2600: 
2601:         *axis*
2602:             ['x' | 'y' | 'both']  Axis on which to operate;
2603:             default is 'both'.
2604: 
2605:         *tight*
2606:             [True | False | None] Parameter passed to :meth:`autoscale_view`.
2607:             Default is None, for no change.
2608: 
2609:         Remaining keyword arguments are passed to directly to the
2610:         :meth:`~matplotlib.ticker.MaxNLocator.set_params` method.
2611: 
2612:         Typically one might want to reduce the maximum number
2613:         of ticks and use tight bounds when plotting small
2614:         subplots, for example::
2615: 
2616:             ax.locator_params(tight=True, nbins=4)
2617: 
2618:         Because the locator is involved in autoscaling,
2619:         :meth:`autoscale_view` is called automatically after
2620:         the parameters are changed.
2621: 
2622:         This presently works only for the
2623:         :class:`~matplotlib.ticker.MaxNLocator` used
2624:         by default on linear axes, but it may be generalized.
2625:         '''
2626:         _x = axis in ['x', 'both']
2627:         _y = axis in ['y', 'both']
2628:         if _x:
2629:             self.xaxis.get_major_locator().set_params(**kwargs)
2630:         if _y:
2631:             self.yaxis.get_major_locator().set_params(**kwargs)
2632:         self.autoscale_view(tight=tight, scalex=_x, scaley=_y)
2633: 
2634:     def tick_params(self, axis='both', **kwargs):
2635:         '''Change the appearance of ticks and tick labels.
2636: 
2637:         Parameters
2638:         ----------
2639:         axis : {'x', 'y', 'both'}, optional
2640:             Which axis to apply the parameters to.
2641: 
2642:         Other Parameters
2643:         ----------------
2644: 
2645:         axis : {'x', 'y', 'both'}
2646:             Axis on which to operate; default is 'both'.
2647: 
2648:         reset : bool
2649:             If *True*, set all parameters to defaults
2650:             before processing other keyword arguments.  Default is
2651:             *False*.
2652: 
2653:         which : {'major', 'minor', 'both'}
2654:             Default is 'major'; apply arguments to *which* ticks.
2655: 
2656:         direction : {'in', 'out', 'inout'}
2657:             Puts ticks inside the axes, outside the axes, or both.
2658: 
2659:         length : float
2660:             Tick length in points.
2661: 
2662:         width : float
2663:             Tick width in points.
2664: 
2665:         color : color
2666:             Tick color; accepts any mpl color spec.
2667: 
2668:         pad : float
2669:             Distance in points between tick and label.
2670: 
2671:         labelsize : float or str
2672:             Tick label font size in points or as a string (e.g., 'large').
2673: 
2674:         labelcolor : color
2675:             Tick label color; mpl color spec.
2676: 
2677:         colors : color
2678:             Changes the tick color and the label color to the same value:
2679:             mpl color spec.
2680: 
2681:         zorder : float
2682:             Tick and label zorder.
2683: 
2684:         bottom, top, left, right : bool or  {'on', 'off'}
2685:             controls whether to draw the respective ticks.
2686: 
2687:         labelbottom, labeltop, labelleft, labelright : bool or  {'on', 'off'}
2688:             controls whether to draw the
2689:             respective tick labels.
2690: 
2691:         labelrotation : float
2692:             Tick label rotation
2693: 
2694:         Examples
2695:         --------
2696: 
2697:         Usage ::
2698: 
2699:             ax.tick_params(direction='out', length=6, width=2, colors='r')
2700: 
2701:         This will make all major ticks be red, pointing out of the box,
2702:         and with dimensions 6 points by 2 points.  Tick labels will
2703:         also be red.
2704: 
2705:         '''
2706:         if axis in ['x', 'both']:
2707:             xkw = dict(kwargs)
2708:             xkw.pop('left', None)
2709:             xkw.pop('right', None)
2710:             xkw.pop('labelleft', None)
2711:             xkw.pop('labelright', None)
2712:             self.xaxis.set_tick_params(**xkw)
2713:         if axis in ['y', 'both']:
2714:             ykw = dict(kwargs)
2715:             ykw.pop('top', None)
2716:             ykw.pop('bottom', None)
2717:             ykw.pop('labeltop', None)
2718:             ykw.pop('labelbottom', None)
2719:             self.yaxis.set_tick_params(**ykw)
2720: 
2721:     def set_axis_off(self):
2722:         '''turn off the axis'''
2723:         self.axison = False
2724:         self.stale = True
2725: 
2726:     def set_axis_on(self):
2727:         '''turn on the axis'''
2728:         self.axison = True
2729:         self.stale = True
2730: 
2731:     @cbook.deprecated('2.0', alternative='get_facecolor')
2732:     def get_axis_bgcolor(self):
2733:         '''Return the axis background color'''
2734:         return self.get_facecolor()
2735: 
2736:     @cbook.deprecated('2.0', alternative='set_facecolor')
2737:     def set_axis_bgcolor(self, color):
2738:         '''
2739:         set the axes background color
2740: 
2741:         ACCEPTS: any matplotlib color - see
2742:         :func:`~matplotlib.pyplot.colors`
2743:         '''
2744:         return self.set_facecolor(color)
2745:     # data limits, ticks, tick labels, and formatting
2746: 
2747:     def invert_xaxis(self):
2748:         "Invert the x-axis."
2749:         left, right = self.get_xlim()
2750:         self.set_xlim(right, left, auto=None)
2751: 
2752:     def xaxis_inverted(self):
2753:         '''Returns *True* if the x-axis is inverted.'''
2754:         left, right = self.get_xlim()
2755:         return right < left
2756: 
2757:     def get_xbound(self):
2758:         '''Returns the x-axis numerical bounds
2759: 
2760:         This always returns::
2761: 
2762:           lowerBound < upperBound
2763: 
2764:         Returns
2765:         -------
2766:         lowerBound, upperBound : float
2767: 
2768:         '''
2769:         left, right = self.get_xlim()
2770:         if left < right:
2771:             return left, right
2772:         else:
2773:             return right, left
2774: 
2775:     def set_xbound(self, lower=None, upper=None):
2776:         '''
2777:         Set the lower and upper numerical bounds of the x-axis.
2778:         This method will honor axes inversion regardless of parameter order.
2779:         It will not change the _autoscaleXon attribute.
2780:         '''
2781:         if upper is None and iterable(lower):
2782:             lower, upper = lower
2783: 
2784:         old_lower, old_upper = self.get_xbound()
2785: 
2786:         if lower is None:
2787:             lower = old_lower
2788:         if upper is None:
2789:             upper = old_upper
2790: 
2791:         if self.xaxis_inverted():
2792:             if lower < upper:
2793:                 self.set_xlim(upper, lower, auto=None)
2794:             else:
2795:                 self.set_xlim(lower, upper, auto=None)
2796:         else:
2797:             if lower < upper:
2798:                 self.set_xlim(lower, upper, auto=None)
2799:             else:
2800:                 self.set_xlim(upper, lower, auto=None)
2801: 
2802:     def get_xlim(self):
2803:         '''
2804:         Get the x-axis range
2805: 
2806:         Returns
2807:         -------
2808:         xlimits : tuple
2809:             Returns the current x-axis limits as the tuple
2810:             (`left`, `right`).
2811: 
2812:         Notes
2813:         -----
2814:         The x-axis may be inverted, in which case the `left` value will
2815:         be greater than the `right` value.
2816: 
2817:         '''
2818:         return tuple(self.viewLim.intervalx)
2819: 
2820:     def _validate_converted_limits(self, limit, convert):
2821:         '''
2822:         Raise ValueError if converted limits are non-finite.
2823: 
2824:         Note that this function also accepts None as a limit argument.
2825: 
2826:         Returns
2827:         -------
2828:         The limit value after call to convert(), or None if limit is None.
2829: 
2830:         '''
2831:         if limit is not None:
2832:             converted_limit = convert(limit)
2833:             if (isinstance(converted_limit, float) and
2834:                     (not np.isreal(converted_limit) or
2835:                         not np.isfinite(converted_limit))):
2836:                 raise ValueError("Axis limits cannot be NaN or Inf")
2837:             return converted_limit
2838: 
2839:     def set_xlim(self, left=None, right=None, emit=True, auto=False, **kw):
2840:         '''
2841:         Set the data limits for the x-axis
2842: 
2843:         Parameters
2844:         ----------
2845:         left : scalar, optional
2846:             The left xlim (default: None, which leaves the left limit
2847:             unchanged).
2848: 
2849:         right : scalar, optional
2850:             The right xlim (default: None, which leaves the right limit
2851:             unchanged).
2852: 
2853:         emit : bool, optional
2854:             Whether to notify observers of limit change (default: True).
2855: 
2856:         auto : bool or None, optional
2857:             Whether to turn on autoscaling of the x-axis. True turns on,
2858:             False turns off (default action), None leaves unchanged.
2859: 
2860:         xlimits : tuple, optional
2861:             The left and right xlims may be passed as the tuple
2862:             (`left`, `right`) as the first positional argument (or as
2863:             the `left` keyword argument).
2864: 
2865:         Returns
2866:         -------
2867:         xlimits : tuple
2868:             Returns the new x-axis limits as (`left`, `right`).
2869: 
2870:         Notes
2871:         -----
2872:         The `left` value may be greater than the `right` value, in which
2873:         case the x-axis values will decrease from left to right.
2874: 
2875:         Examples
2876:         --------
2877:         >>> set_xlim(left, right)
2878:         >>> set_xlim((left, right))
2879:         >>> left, right = set_xlim(left, right)
2880: 
2881:         One limit may be left unchanged.
2882: 
2883:         >>> set_xlim(right=right_lim)
2884: 
2885:         Limits may be passed in reverse order to flip the direction of
2886:         the x-axis. For example, suppose `x` represents the number of
2887:         years before present. The x-axis limits might be set like the
2888:         following so 5000 years ago is on the left of the plot and the
2889:         present is on the right.
2890: 
2891:         >>> set_xlim(5000, 0)
2892: 
2893:         '''
2894:         if 'xmin' in kw:
2895:             left = kw.pop('xmin')
2896:         if 'xmax' in kw:
2897:             right = kw.pop('xmax')
2898:         if kw:
2899:             raise ValueError("unrecognized kwargs: %s" % list(kw))
2900: 
2901:         if right is None and iterable(left):
2902:             left, right = left
2903: 
2904:         self._process_unit_info(xdata=(left, right))
2905:         left = self._validate_converted_limits(left, self.convert_xunits)
2906:         right = self._validate_converted_limits(right, self.convert_xunits)
2907: 
2908:         old_left, old_right = self.get_xlim()
2909:         if left is None:
2910:             left = old_left
2911:         if right is None:
2912:             right = old_right
2913: 
2914:         if left == right:
2915:             warnings.warn(
2916:                 ('Attempting to set identical left==right results\n'
2917:                  'in singular transformations; automatically expanding.\n'
2918:                  'left=%s, right=%s') % (left, right))
2919:         left, right = mtransforms.nonsingular(left, right, increasing=False)
2920: 
2921:         if self.get_xscale() == 'log' and (left <= 0.0 or right <= 0.0):
2922:             warnings.warn(
2923:                 'Attempted to set non-positive xlimits for log-scale axis; '
2924:                 'invalid limits will be ignored.')
2925:         left, right = self.xaxis.limit_range_for_scale(left, right)
2926: 
2927:         self.viewLim.intervalx = (left, right)
2928:         if auto is not None:
2929:             self._autoscaleXon = bool(auto)
2930: 
2931:         if emit:
2932:             self.callbacks.process('xlim_changed', self)
2933:             # Call all of the other x-axes that are shared with this one
2934:             for other in self._shared_x_axes.get_siblings(self):
2935:                 if other is not self:
2936:                     other.set_xlim(self.viewLim.intervalx,
2937:                                    emit=False, auto=auto)
2938:                     if (other.figure != self.figure and
2939:                             other.figure.canvas is not None):
2940:                         other.figure.canvas.draw_idle()
2941:         self.stale = True
2942:         return left, right
2943: 
2944:     def get_xscale(self):
2945:         return self.xaxis.get_scale()
2946:     get_xscale.__doc__ = "Return the xaxis scale string: %s''' % (
2947:         ", ".join(mscale.get_scale_names()))
2948: 
2949:     def set_xscale(self, value, **kwargs):
2950:         '''
2951:         Set the x-axis scale
2952: 
2953:         Parameters
2954:         ----------
2955:         value : {"linear", "log", "symlog", "logit"}
2956:             scaling strategy to apply
2957: 
2958:         Notes
2959:         -----
2960:         Different kwargs are accepted, depending on the scale. See
2961:         the `~matplotlib.scale` module for more information.
2962: 
2963:         See also
2964:         --------
2965:         matplotlib.scale.LinearScale : linear transfrom
2966: 
2967:         matplotlib.scale.LogTransform : log transform
2968: 
2969:         matplotlib.scale.SymmetricalLogTransform : symlog transform
2970: 
2971:         matplotlib.scale.LogisticTransform : logit transform
2972:         '''
2973:         # If the scale is being set to log, mask nonposx to prevent headaches
2974:         # around zero
2975:         if value.lower() == 'log' and 'nonposx' not in kwargs:
2976:             kwargs['nonposx'] = 'mask'
2977: 
2978:         g = self.get_shared_x_axes()
2979:         for ax in g.get_siblings(self):
2980:             ax.xaxis._set_scale(value, **kwargs)
2981:             ax._update_transScale()
2982:             ax.stale = True
2983: 
2984:         self.autoscale_view(scaley=False)
2985: 
2986:     def get_xticks(self, minor=False):
2987:         '''Return the x ticks as a list of locations'''
2988:         return self.xaxis.get_ticklocs(minor=minor)
2989: 
2990:     def set_xticks(self, ticks, minor=False):
2991:         '''
2992:         Set the x ticks with list of *ticks*
2993: 
2994:         Parameters
2995:         ----------
2996:         ticks : list
2997:             List of x-axis tick locations
2998: 
2999:         minor : bool, optional
3000:             If ``False`` sets major ticks, if ``True`` sets minor ticks.
3001:             Default is ``False``.
3002:         '''
3003:         ret = self.xaxis.set_ticks(ticks, minor=minor)
3004:         self.stale = True
3005:         return ret
3006: 
3007:     def get_xmajorticklabels(self):
3008:         '''
3009:         Get the xtick major labels
3010: 
3011:         Returns
3012:         -------
3013:         labels : list
3014:             List of :class:`~matplotlib.text.Text` instances
3015:         '''
3016:         return cbook.silent_list('Text xticklabel',
3017:                                  self.xaxis.get_majorticklabels())
3018: 
3019:     def get_xminorticklabels(self):
3020:         '''
3021:         Get the x minor tick labels
3022: 
3023:         Returns
3024:         -------
3025:         labels : list
3026:             List of :class:`~matplotlib.text.Text` instances
3027:         '''
3028:         return cbook.silent_list('Text xticklabel',
3029:                                  self.xaxis.get_minorticklabels())
3030: 
3031:     def get_xticklabels(self, minor=False, which=None):
3032:         '''
3033:         Get the x tick labels as a list of :class:`~matplotlib.text.Text`
3034:         instances.
3035: 
3036:         Parameters
3037:         ----------
3038:         minor : bool, optional
3039:            If True return the minor ticklabels,
3040:            else return the major ticklabels.
3041: 
3042:         which : None, ('minor', 'major', 'both')
3043:            Overrides `minor`.
3044: 
3045:            Selects which ticklabels to return
3046: 
3047:         Returns
3048:         -------
3049:         ret : list
3050:            List of :class:`~matplotlib.text.Text` instances.
3051:         '''
3052:         return cbook.silent_list('Text xticklabel',
3053:                                  self.xaxis.get_ticklabels(minor=minor,
3054:                                                            which=which))
3055: 
3056:     def set_xticklabels(self, labels, fontdict=None, minor=False, **kwargs):
3057:         '''
3058:         Set the xtick labels with list of string labels
3059: 
3060:         Parameters
3061:         ----------
3062:         labels : list of str
3063:             list of string labels
3064: 
3065:         fontdict : dict, optional
3066:             A dictionary controlling the appearance of the ticklabels,
3067:             the default `fontdict` is:
3068: 
3069:                {'fontsize': rcParams['axes.titlesize'],
3070:                 'fontweight' : rcParams['axes.titleweight'],
3071:                 'verticalalignment': 'baseline',
3072:                 'horizontalalignment': loc}
3073: 
3074:         minor : bool, optional
3075:             If True select the minor ticklabels,
3076:             else select the minor ticklabels
3077: 
3078:         Returns
3079:         -------
3080:         A list of `~matplotlib.text.Text` instances
3081: 
3082:         Other Parameters
3083:         -----------------
3084:         **kwargs : `~matplotlib.text.Text` properties.
3085:         '''
3086:         if fontdict is not None:
3087:             kwargs.update(fontdict)
3088:         ret = self.xaxis.set_ticklabels(labels,
3089:                                         minor=minor, **kwargs)
3090:         self.stale = True
3091:         return ret
3092: 
3093:     def invert_yaxis(self):
3094:         '''
3095:         Invert the y-axis.
3096:         '''
3097:         bottom, top = self.get_ylim()
3098:         self.set_ylim(top, bottom, auto=None)
3099: 
3100:     def yaxis_inverted(self):
3101:         '''Returns *True* if the y-axis is inverted.'''
3102:         bottom, top = self.get_ylim()
3103:         return top < bottom
3104: 
3105:     def get_ybound(self):
3106:         '''
3107:         Return y-axis numerical bounds in the form of
3108:         ``lowerBound < upperBound``
3109:         '''
3110:         bottom, top = self.get_ylim()
3111:         if bottom < top:
3112:             return bottom, top
3113:         else:
3114:             return top, bottom
3115: 
3116:     def set_ybound(self, lower=None, upper=None):
3117:         '''
3118:         Set the lower and upper numerical bounds of the y-axis.
3119:         This method will honor axes inversion regardless of parameter order.
3120:         It will not change the _autoscaleYon attribute.
3121:         '''
3122:         if upper is None and iterable(lower):
3123:             lower, upper = lower
3124: 
3125:         old_lower, old_upper = self.get_ybound()
3126: 
3127:         if lower is None:
3128:             lower = old_lower
3129:         if upper is None:
3130:             upper = old_upper
3131: 
3132:         if self.yaxis_inverted():
3133:             if lower < upper:
3134:                 self.set_ylim(upper, lower, auto=None)
3135:             else:
3136:                 self.set_ylim(lower, upper, auto=None)
3137:         else:
3138:             if lower < upper:
3139:                 self.set_ylim(lower, upper, auto=None)
3140:             else:
3141:                 self.set_ylim(upper, lower, auto=None)
3142: 
3143:     def get_ylim(self):
3144:         '''
3145:         Get the y-axis range
3146: 
3147:         Returns
3148:         -------
3149:         ylimits : tuple
3150:             Returns the current y-axis limits as the tuple
3151:             (`bottom`, `top`).
3152: 
3153:         Notes
3154:         -----
3155:         The y-axis may be inverted, in which case the `bottom` value
3156:         will be greater than the `top` value.
3157: 
3158:         '''
3159:         return tuple(self.viewLim.intervaly)
3160: 
3161:     def set_ylim(self, bottom=None, top=None, emit=True, auto=False, **kw):
3162:         '''
3163:         Set the data limits for the y-axis
3164: 
3165:         Parameters
3166:         ----------
3167:         bottom : scalar, optional
3168:             The bottom ylim (default: None, which leaves the bottom
3169:             limit unchanged).
3170: 
3171:         top : scalar, optional
3172:             The top ylim (default: None, which leaves the top limit
3173:             unchanged).
3174: 
3175:         emit : bool, optional
3176:             Whether to notify observers of limit change (default: True).
3177: 
3178:         auto : bool or None, optional
3179:             Whether to turn on autoscaling of the y-axis. True turns on,
3180:             False turns off (default action), None leaves unchanged.
3181: 
3182:         ylimits : tuple, optional
3183:             The bottom and top yxlims may be passed as the tuple
3184:             (`bottom`, `top`) as the first positional argument (or as
3185:             the `bottom` keyword argument).
3186: 
3187:         Returns
3188:         -------
3189:         ylimits : tuple
3190:             Returns the new y-axis limits as (`bottom`, `top`).
3191: 
3192:         Notes
3193:         -----
3194:         The `bottom` value may be greater than the `top` value, in which
3195:         case the y-axis values will decrease from bottom to top.
3196: 
3197:         Examples
3198:         --------
3199:         >>> set_ylim(bottom, top)
3200:         >>> set_ylim((bottom, top))
3201:         >>> bottom, top = set_ylim(bottom, top)
3202: 
3203:         One limit may be left unchanged.
3204: 
3205:         >>> set_ylim(top=top_lim)
3206: 
3207:         Limits may be passed in reverse order to flip the direction of
3208:         the y-axis. For example, suppose `y` represents depth of the
3209:         ocean in m. The y-axis limits might be set like the following
3210:         so 5000 m depth is at the bottom of the plot and the surface,
3211:         0 m, is at the top.
3212: 
3213:         >>> set_ylim(5000, 0)
3214:         '''
3215:         if 'ymin' in kw:
3216:             bottom = kw.pop('ymin')
3217:         if 'ymax' in kw:
3218:             top = kw.pop('ymax')
3219:         if kw:
3220:             raise ValueError("unrecognized kwargs: %s" % list(kw))
3221: 
3222:         if top is None and iterable(bottom):
3223:             bottom, top = bottom
3224: 
3225:         bottom = self._validate_converted_limits(bottom, self.convert_yunits)
3226:         top = self._validate_converted_limits(top, self.convert_yunits)
3227: 
3228:         old_bottom, old_top = self.get_ylim()
3229: 
3230:         if bottom is None:
3231:             bottom = old_bottom
3232:         if top is None:
3233:             top = old_top
3234: 
3235:         if bottom == top:
3236:             warnings.warn(
3237:                 ('Attempting to set identical bottom==top results\n'
3238:                  'in singular transformations; automatically expanding.\n'
3239:                  'bottom=%s, top=%s') % (bottom, top))
3240: 
3241:         bottom, top = mtransforms.nonsingular(bottom, top, increasing=False)
3242: 
3243:         if self.get_yscale() == 'log' and (bottom <= 0.0 or top <= 0.0):
3244:             warnings.warn(
3245:                 'Attempted to set non-positive ylimits for log-scale axis; '
3246:                 'invalid limits will be ignored.')
3247:         bottom, top = self.yaxis.limit_range_for_scale(bottom, top)
3248: 
3249:         self.viewLim.intervaly = (bottom, top)
3250:         if auto is not None:
3251:             self._autoscaleYon = bool(auto)
3252: 
3253:         if emit:
3254:             self.callbacks.process('ylim_changed', self)
3255:             # Call all of the other y-axes that are shared with this one
3256:             for other in self._shared_y_axes.get_siblings(self):
3257:                 if other is not self:
3258:                     other.set_ylim(self.viewLim.intervaly,
3259:                                    emit=False, auto=auto)
3260:                     if (other.figure != self.figure and
3261:                             other.figure.canvas is not None):
3262:                         other.figure.canvas.draw_idle()
3263:         self.stale = True
3264:         return bottom, top
3265: 
3266:     def get_yscale(self):
3267:         return self.yaxis.get_scale()
3268:     get_yscale.__doc__ = "Return the yaxis scale string: %s''' % (
3269:         ", ".join(mscale.get_scale_names()))
3270: 
3271:     def set_yscale(self, value, **kwargs):
3272:         '''
3273:         Set the y-axis scale
3274: 
3275:         Parameters
3276:         ----------
3277:         value : {"linear", "log", "symlog", "logit"}
3278:             scaling strategy to apply
3279: 
3280:         Notes
3281:         -----
3282:         Different kwargs are accepted, depending on the scale. See
3283:         the `~matplotlib.scale` module for more information.
3284: 
3285:         See also
3286:         --------
3287:         matplotlib.scale.LinearScale : linear transfrom
3288: 
3289:         matplotlib.scale.LogTransform : log transform
3290: 
3291:         matplotlib.scale.SymmetricalLogTransform : symlog transform
3292: 
3293:         matplotlib.scale.LogisticTransform : logit transform
3294:         '''
3295:         # If the scale is being set to log, mask nonposy to prevent headaches
3296:         # around zero
3297:         if value.lower() == 'log' and 'nonposy' not in kwargs:
3298:             kwargs['nonposy'] = 'mask'
3299: 
3300:         g = self.get_shared_y_axes()
3301:         for ax in g.get_siblings(self):
3302:             ax.yaxis._set_scale(value, **kwargs)
3303:             ax._update_transScale()
3304:             ax.stale = True
3305:         self.autoscale_view(scalex=False)
3306: 
3307:     def get_yticks(self, minor=False):
3308:         '''Return the y ticks as a list of locations'''
3309:         return self.yaxis.get_ticklocs(minor=minor)
3310: 
3311:     def set_yticks(self, ticks, minor=False):
3312:         '''
3313:         Set the y ticks with list of *ticks*
3314: 
3315:         Parameters
3316:         ----------
3317:         ticks : sequence
3318:             List of y-axis tick locations
3319: 
3320:         minor : bool, optional
3321:             If ``False`` sets major ticks, if ``True`` sets minor ticks.
3322:             Default is ``False``.
3323:         '''
3324:         ret = self.yaxis.set_ticks(ticks, minor=minor)
3325:         return ret
3326: 
3327:     def get_ymajorticklabels(self):
3328:         '''
3329:         Get the major y tick labels
3330: 
3331:         Returns
3332:         -------
3333:         labels : list
3334:             List of :class:`~matplotlib.text.Text` instances
3335:         '''
3336:         return cbook.silent_list('Text yticklabel',
3337:                                  self.yaxis.get_majorticklabels())
3338: 
3339:     def get_yminorticklabels(self):
3340:         '''
3341:         Get the minor y tick labels
3342: 
3343:         Returns
3344:         -------
3345:         labels : list
3346:             List of :class:`~matplotlib.text.Text` instances
3347:         '''
3348:         return cbook.silent_list('Text yticklabel',
3349:                                  self.yaxis.get_minorticklabels())
3350: 
3351:     def get_yticklabels(self, minor=False, which=None):
3352:         '''
3353:         Get the x tick labels as a list of :class:`~matplotlib.text.Text`
3354:         instances.
3355: 
3356:         Parameters
3357:         ----------
3358:         minor : bool
3359:            If True return the minor ticklabels,
3360:            else return the major ticklabels
3361: 
3362:         which : None, ('minor', 'major', 'both')
3363:            Overrides `minor`.
3364: 
3365:            Selects which ticklabels to return
3366: 
3367:         Returns
3368:         -------
3369:         ret : list
3370:            List of :class:`~matplotlib.text.Text` instances.
3371:         '''
3372:         return cbook.silent_list('Text yticklabel',
3373:                                  self.yaxis.get_ticklabels(minor=minor,
3374:                                                            which=which))
3375: 
3376:     def set_yticklabels(self, labels, fontdict=None, minor=False, **kwargs):
3377:         '''
3378:         Set the y-tick labels with list of strings labels
3379: 
3380:         Parameters
3381:         ----------
3382:         labels : list of str
3383:             list of string labels
3384: 
3385:         fontdict : dict, optional
3386:             A dictionary controlling the appearance of the ticklabels,
3387:             the default `fontdict` is::
3388: 
3389:                {'fontsize': rcParams['axes.titlesize'],
3390:                 'fontweight' : rcParams['axes.titleweight'],
3391:                 'verticalalignment': 'baseline',
3392:                 'horizontalalignment': loc}
3393: 
3394:         minor : bool, optional
3395:             If True select the minor ticklabels,
3396:             else select the minor ticklabels
3397: 
3398:         Returns
3399:         -------
3400:         A list of `~matplotlib.text.Text` instances.
3401: 
3402:         Other Parameters
3403:         ----------------
3404:         **kwargs : `~matplotlib.text.Text` properties.
3405:         '''
3406:         if fontdict is not None:
3407:             kwargs.update(fontdict)
3408:         return self.yaxis.set_ticklabels(labels,
3409:                                          minor=minor, **kwargs)
3410: 
3411:     def xaxis_date(self, tz=None):
3412:         '''
3413:         Sets up x-axis ticks and labels that treat the x data as dates.
3414: 
3415:         Parameters
3416:         ----------
3417:         tz : string or :class:`tzinfo` instance, optional
3418:             Timezone string or timezone. Defaults to rc value.
3419:         '''
3420:         # should be enough to inform the unit conversion interface
3421:         # dates are coming in
3422:         self.xaxis.axis_date(tz)
3423: 
3424:     def yaxis_date(self, tz=None):
3425:         '''
3426:         Sets up y-axis ticks and labels that treat the y data as dates.
3427: 
3428:         Parameters
3429:         ----------
3430:         tz : string or :class:`tzinfo` instance, optional
3431:             Timezone string or timezone. Defaults to rc value.
3432:         '''
3433:         self.yaxis.axis_date(tz)
3434: 
3435:     def format_xdata(self, x):
3436:         '''
3437:         Return *x* string formatted.  This function will use the attribute
3438:         self.fmt_xdata if it is callable, else will fall back on the xaxis
3439:         major formatter
3440:         '''
3441:         try:
3442:             return self.fmt_xdata(x)
3443:         except TypeError:
3444:             func = self.xaxis.get_major_formatter().format_data_short
3445:             val = func(x)
3446:             return val
3447: 
3448:     def format_ydata(self, y):
3449:         '''
3450:         Return y string formatted.  This function will use the
3451:         :attr:`fmt_ydata` attribute if it is callable, else will fall
3452:         back on the yaxis major formatter
3453:         '''
3454:         try:
3455:             return self.fmt_ydata(y)
3456:         except TypeError:
3457:             func = self.yaxis.get_major_formatter().format_data_short
3458:             val = func(y)
3459:             return val
3460: 
3461:     def format_coord(self, x, y):
3462:         '''Return a format string formatting the *x*, *y* coord'''
3463:         if x is None:
3464:             xs = '???'
3465:         else:
3466:             xs = self.format_xdata(x)
3467:         if y is None:
3468:             ys = '???'
3469:         else:
3470:             ys = self.format_ydata(y)
3471:         return 'x=%s y=%s' % (xs, ys)
3472: 
3473:     def minorticks_on(self):
3474:         'Add autoscaling minor ticks to the axes.'
3475:         for ax in (self.xaxis, self.yaxis):
3476:             scale = ax.get_scale()
3477:             if scale == 'log':
3478:                 s = ax._scale
3479:                 ax.set_minor_locator(mticker.LogLocator(s.base, s.subs))
3480:             elif scale == 'symlog':
3481:                 s = ax._scale
3482:                 ax.set_minor_locator(
3483:                     mticker.SymmetricalLogLocator(s._transform, s.subs))
3484:             else:
3485:                 ax.set_minor_locator(mticker.AutoMinorLocator())
3486: 
3487:     def minorticks_off(self):
3488:         '''Remove minor ticks from the axes.'''
3489:         self.xaxis.set_minor_locator(mticker.NullLocator())
3490:         self.yaxis.set_minor_locator(mticker.NullLocator())
3491: 
3492:     # Interactive manipulation
3493: 
3494:     def can_zoom(self):
3495:         '''
3496:         Return *True* if this axes supports the zoom box button functionality.
3497:         '''
3498:         return True
3499: 
3500:     def can_pan(self):
3501:         '''
3502:         Return *True* if this axes supports any pan/zoom button functionality.
3503:         '''
3504:         return True
3505: 
3506:     def get_navigate(self):
3507:         '''
3508:         Get whether the axes responds to navigation commands
3509:         '''
3510:         return self._navigate
3511: 
3512:     def set_navigate(self, b):
3513:         '''
3514:         Set whether the axes responds to navigation toolbar commands
3515: 
3516:         ACCEPTS: [ *True* | *False* ]
3517:         '''
3518:         self._navigate = b
3519: 
3520:     def get_navigate_mode(self):
3521:         '''
3522:         Get the navigation toolbar button status: 'PAN', 'ZOOM', or None
3523:         '''
3524:         return self._navigate_mode
3525: 
3526:     def set_navigate_mode(self, b):
3527:         '''
3528:         Set the navigation toolbar button status;
3529: 
3530:         .. warning::
3531:             this is not a user-API function.
3532: 
3533:         '''
3534:         self._navigate_mode = b
3535: 
3536:     def _get_view(self):
3537:         '''
3538:         Save information required to reproduce the current view.
3539: 
3540:         Called before a view is changed, such as during a pan or zoom
3541:         initiated by the user. You may return any information you deem
3542:         necessary to describe the view.
3543: 
3544:         .. note::
3545: 
3546:             Intended to be overridden by new projection types, but if not, the
3547:             default implementation saves the view limits. You *must* implement
3548:             :meth:`_set_view` if you implement this method.
3549:         '''
3550:         xmin, xmax = self.get_xlim()
3551:         ymin, ymax = self.get_ylim()
3552:         return (xmin, xmax, ymin, ymax)
3553: 
3554:     def _set_view(self, view):
3555:         '''
3556:         Apply a previously saved view.
3557: 
3558:         Called when restoring a view, such as with the navigation buttons.
3559: 
3560:         .. note::
3561: 
3562:             Intended to be overridden by new projection types, but if not, the
3563:             default implementation restores the view limits. You *must*
3564:             implement :meth:`_get_view` if you implement this method.
3565:         '''
3566:         xmin, xmax, ymin, ymax = view
3567:         self.set_xlim((xmin, xmax))
3568:         self.set_ylim((ymin, ymax))
3569: 
3570:     def _set_view_from_bbox(self, bbox, direction='in',
3571:                             mode=None, twinx=False, twiny=False):
3572:         '''
3573:         Update view from a selection bbox.
3574: 
3575:         .. note::
3576: 
3577:             Intended to be overridden by new projection types, but if not, the
3578:             default implementation sets the view limits to the bbox directly.
3579: 
3580:         Parameters
3581:         ----------
3582: 
3583:         bbox : 4-tuple or 3 tuple
3584:             * If bbox is a 4 tuple, it is the selected bounding box limits,
3585:                 in *display* coordinates.
3586:             * If bbox is a 3 tuple, it is an (xp, yp, scl) triple, where
3587:                 (xp,yp) is the center of zooming and scl the scale factor to
3588:                 zoom by.
3589: 
3590:         direction : str
3591:             The direction to apply the bounding box.
3592:                 * `'in'` - The bounding box describes the view directly, i.e.,
3593:                            it zooms in.
3594:                 * `'out'` - The bounding box describes the size to make the
3595:                             existing view, i.e., it zooms out.
3596: 
3597:         mode : str or None
3598:             The selection mode, whether to apply the bounding box in only the
3599:             `'x'` direction, `'y'` direction or both (`None`).
3600: 
3601:         twinx : bool
3602:             Whether this axis is twinned in the *x*-direction.
3603: 
3604:         twiny : bool
3605:             Whether this axis is twinned in the *y*-direction.
3606:         '''
3607:         Xmin, Xmax = self.get_xlim()
3608:         Ymin, Ymax = self.get_ylim()
3609: 
3610:         if len(bbox) == 3:
3611:             # Zooming code
3612:             xp, yp, scl = bbox
3613: 
3614:             # Should not happen
3615:             if scl == 0:
3616:                 scl = 1.
3617: 
3618:             # direction = 'in'
3619:             if scl > 1:
3620:                 direction = 'in'
3621:             else:
3622:                 direction = 'out'
3623:                 scl = 1/scl
3624: 
3625:             # get the limits of the axes
3626:             tranD2C = self.transData.transform
3627:             xmin, ymin = tranD2C((Xmin, Ymin))
3628:             xmax, ymax = tranD2C((Xmax, Ymax))
3629: 
3630:             # set the range
3631:             xwidth = xmax - xmin
3632:             ywidth = ymax - ymin
3633:             xcen = (xmax + xmin)*.5
3634:             ycen = (ymax + ymin)*.5
3635:             xzc = (xp*(scl - 1) + xcen)/scl
3636:             yzc = (yp*(scl - 1) + ycen)/scl
3637: 
3638:             bbox = [xzc - xwidth/2./scl, yzc - ywidth/2./scl,
3639:                     xzc + xwidth/2./scl, yzc + ywidth/2./scl]
3640:         elif len(bbox) != 4:
3641:             # should be len 3 or 4 but nothing else
3642:             warnings.warn('Warning in _set_view_from_bbox: bounding box is not a\
3643:                   tuple of length 3 or 4. Ignoring the view change...')
3644:             return
3645: 
3646:         # Just grab bounding box
3647:         lastx, lasty, x, y = bbox
3648: 
3649:         # zoom to rect
3650:         inverse = self.transData.inverted()
3651:         lastx, lasty = inverse.transform_point((lastx, lasty))
3652:         x, y = inverse.transform_point((x, y))
3653: 
3654:         if twinx:
3655:             x0, x1 = Xmin, Xmax
3656:         else:
3657:             if Xmin < Xmax:
3658:                 if x < lastx:
3659:                     x0, x1 = x, lastx
3660:                 else:
3661:                     x0, x1 = lastx, x
3662:                 if x0 < Xmin:
3663:                     x0 = Xmin
3664:                 if x1 > Xmax:
3665:                     x1 = Xmax
3666:             else:
3667:                 if x > lastx:
3668:                     x0, x1 = x, lastx
3669:                 else:
3670:                     x0, x1 = lastx, x
3671:                 if x0 > Xmin:
3672:                     x0 = Xmin
3673:                 if x1 < Xmax:
3674:                     x1 = Xmax
3675: 
3676:         if twiny:
3677:             y0, y1 = Ymin, Ymax
3678:         else:
3679:             if Ymin < Ymax:
3680:                 if y < lasty:
3681:                     y0, y1 = y, lasty
3682:                 else:
3683:                     y0, y1 = lasty, y
3684:                 if y0 < Ymin:
3685:                     y0 = Ymin
3686:                 if y1 > Ymax:
3687:                     y1 = Ymax
3688:             else:
3689:                 if y > lasty:
3690:                     y0, y1 = y, lasty
3691:                 else:
3692:                     y0, y1 = lasty, y
3693:                 if y0 > Ymin:
3694:                     y0 = Ymin
3695:                 if y1 < Ymax:
3696:                     y1 = Ymax
3697: 
3698:         if direction == 'in':
3699:             if mode == 'x':
3700:                 self.set_xlim((x0, x1))
3701:             elif mode == 'y':
3702:                 self.set_ylim((y0, y1))
3703:             else:
3704:                 self.set_xlim((x0, x1))
3705:                 self.set_ylim((y0, y1))
3706:         elif direction == 'out':
3707:             if self.get_xscale() == 'log':
3708:                 alpha = np.log(Xmax / Xmin) / np.log(x1 / x0)
3709:                 rx1 = pow(Xmin / x0, alpha) * Xmin
3710:                 rx2 = pow(Xmax / x0, alpha) * Xmin
3711:             else:
3712:                 alpha = (Xmax - Xmin) / (x1 - x0)
3713:                 rx1 = alpha * (Xmin - x0) + Xmin
3714:                 rx2 = alpha * (Xmax - x0) + Xmin
3715:             if self.get_yscale() == 'log':
3716:                 alpha = np.log(Ymax / Ymin) / np.log(y1 / y0)
3717:                 ry1 = pow(Ymin / y0, alpha) * Ymin
3718:                 ry2 = pow(Ymax / y0, alpha) * Ymin
3719:             else:
3720:                 alpha = (Ymax - Ymin) / (y1 - y0)
3721:                 ry1 = alpha * (Ymin - y0) + Ymin
3722:                 ry2 = alpha * (Ymax - y0) + Ymin
3723: 
3724:             if mode == 'x':
3725:                 self.set_xlim((rx1, rx2))
3726:             elif mode == 'y':
3727:                 self.set_ylim((ry1, ry2))
3728:             else:
3729:                 self.set_xlim((rx1, rx2))
3730:                 self.set_ylim((ry1, ry2))
3731: 
3732:     def start_pan(self, x, y, button):
3733:         '''
3734:         Called when a pan operation has started.
3735: 
3736:         *x*, *y* are the mouse coordinates in display coords.
3737:         button is the mouse button number:
3738: 
3739:         * 1: LEFT
3740:         * 2: MIDDLE
3741:         * 3: RIGHT
3742: 
3743:         .. note::
3744: 
3745:             Intended to be overridden by new projection types.
3746: 
3747:         '''
3748:         self._pan_start = cbook.Bunch(
3749:             lim=self.viewLim.frozen(),
3750:             trans=self.transData.frozen(),
3751:             trans_inverse=self.transData.inverted().frozen(),
3752:             bbox=self.bbox.frozen(),
3753:             x=x,
3754:             y=y)
3755: 
3756:     def end_pan(self):
3757:         '''
3758:         Called when a pan operation completes (when the mouse button
3759:         is up.)
3760: 
3761:         .. note::
3762: 
3763:             Intended to be overridden by new projection types.
3764: 
3765:         '''
3766:         del self._pan_start
3767: 
3768:     def drag_pan(self, button, key, x, y):
3769:         '''
3770:         Called when the mouse moves during a pan operation.
3771: 
3772:         *button* is the mouse button number:
3773: 
3774:         * 1: LEFT
3775:         * 2: MIDDLE
3776:         * 3: RIGHT
3777: 
3778:         *key* is a "shift" key
3779: 
3780:         *x*, *y* are the mouse coordinates in display coords.
3781: 
3782:         .. note::
3783: 
3784:             Intended to be overridden by new projection types.
3785: 
3786:         '''
3787:         def format_deltas(key, dx, dy):
3788:             if key == 'control':
3789:                 if abs(dx) > abs(dy):
3790:                     dy = dx
3791:                 else:
3792:                     dx = dy
3793:             elif key == 'x':
3794:                 dy = 0
3795:             elif key == 'y':
3796:                 dx = 0
3797:             elif key == 'shift':
3798:                 if 2 * abs(dx) < abs(dy):
3799:                     dx = 0
3800:                 elif 2 * abs(dy) < abs(dx):
3801:                     dy = 0
3802:                 elif abs(dx) > abs(dy):
3803:                     dy = dy / abs(dy) * abs(dx)
3804:                 else:
3805:                     dx = dx / abs(dx) * abs(dy)
3806:             return (dx, dy)
3807: 
3808:         p = self._pan_start
3809:         dx = x - p.x
3810:         dy = y - p.y
3811:         if dx == 0 and dy == 0:
3812:             return
3813:         if button == 1:
3814:             dx, dy = format_deltas(key, dx, dy)
3815:             result = p.bbox.translated(-dx, -dy) \
3816:                 .transformed(p.trans_inverse)
3817:         elif button == 3:
3818:             try:
3819:                 dx = -dx / float(self.bbox.width)
3820:                 dy = -dy / float(self.bbox.height)
3821:                 dx, dy = format_deltas(key, dx, dy)
3822:                 if self.get_aspect() != 'auto':
3823:                     dx = 0.5 * (dx + dy)
3824:                     dy = dx
3825: 
3826:                 alpha = np.power(10.0, (dx, dy))
3827:                 start = np.array([p.x, p.y])
3828:                 oldpoints = p.lim.transformed(p.trans)
3829:                 newpoints = start + alpha * (oldpoints - start)
3830:                 result = mtransforms.Bbox(newpoints) \
3831:                     .transformed(p.trans_inverse)
3832:             except OverflowError:
3833:                 warnings.warn('Overflow while panning')
3834:                 return
3835: 
3836:         self.set_xlim(*result.intervalx)
3837:         self.set_ylim(*result.intervaly)
3838: 
3839:     @cbook.deprecated("2.1")
3840:     def get_cursor_props(self):
3841:         '''
3842:         Return the cursor propertiess as a (*linewidth*, *color*)
3843:         tuple, where *linewidth* is a float and *color* is an RGBA
3844:         tuple
3845:         '''
3846:         return self._cursorProps
3847: 
3848:     @cbook.deprecated("2.1")
3849:     def set_cursor_props(self, *args):
3850:         '''Set the cursor property as
3851: 
3852:         Call signature ::
3853: 
3854:           ax.set_cursor_props(linewidth, color)
3855: 
3856:         or::
3857: 
3858:           ax.set_cursor_props((linewidth, color))
3859: 
3860:         ACCEPTS: a (*float*, *color*) tuple
3861:         '''
3862:         if len(args) == 1:
3863:             lw, c = args[0]
3864:         elif len(args) == 2:
3865:             lw, c = args
3866:         else:
3867:             raise ValueError('args must be a (linewidth, color) tuple')
3868:         c = mcolors.to_rgba(c)
3869:         self._cursorProps = lw, c
3870: 
3871:     def get_children(self):
3872:         '''return a list of child artists'''
3873:         children = []
3874:         children.extend(self.collections)
3875:         children.extend(self.patches)
3876:         children.extend(self.lines)
3877:         children.extend(self.texts)
3878:         children.extend(self.artists)
3879:         children.extend(six.itervalues(self.spines))
3880:         children.append(self.xaxis)
3881:         children.append(self.yaxis)
3882:         children.append(self.title)
3883:         children.append(self._left_title)
3884:         children.append(self._right_title)
3885:         children.extend(self.tables)
3886:         children.extend(self.images)
3887:         if self.legend_ is not None:
3888:             children.append(self.legend_)
3889:         children.append(self.patch)
3890:         return children
3891: 
3892:     def contains(self, mouseevent):
3893:         '''
3894:         Test whether the mouse event occurred in the axes.
3895: 
3896:         Returns *True* / *False*, {}
3897:         '''
3898:         if callable(self._contains):
3899:             return self._contains(self, mouseevent)
3900:         return self.patch.contains(mouseevent)
3901: 
3902:     def contains_point(self, point):
3903:         '''
3904:         Returns *True* if the point (tuple of x,y) is inside the axes
3905:         (the area defined by the its patch). A pixel coordinate is
3906:         required.
3907: 
3908:         '''
3909:         return self.patch.contains_point(point, radius=1.0)
3910: 
3911:     def pick(self, *args):
3912:         '''Trigger pick event
3913: 
3914:         Call signature::
3915: 
3916:             pick(mouseevent)
3917: 
3918:         each child artist will fire a pick event if mouseevent is over
3919:         the artist and the artist has picker set
3920:         '''
3921:         martist.Artist.pick(self, args[0])
3922: 
3923:     def get_default_bbox_extra_artists(self):
3924:         return [artist for artist in self.get_children()
3925:                 if artist.get_visible()]
3926: 
3927:     def get_tightbbox(self, renderer, call_axes_locator=True):
3928:         '''
3929:         Return the tight bounding box of the axes.
3930:         The dimension of the Bbox in canvas coordinate.
3931: 
3932:         If *call_axes_locator* is *False*, it does not call the
3933:         _axes_locator attribute, which is necessary to get the correct
3934:         bounding box. ``call_axes_locator==False`` can be used if the
3935:         caller is only intereted in the relative size of the tightbbox
3936:         compared to the axes bbox.
3937:         '''
3938: 
3939:         bb = []
3940: 
3941:         if not self.get_visible():
3942:             return None
3943: 
3944:         locator = self.get_axes_locator()
3945:         if locator and call_axes_locator:
3946:             pos = locator(self, renderer)
3947:             self.apply_aspect(pos)
3948:         else:
3949:             self.apply_aspect()
3950: 
3951:         bb.append(self.get_window_extent(renderer))
3952: 
3953:         if self.title.get_visible():
3954:             bb.append(self.title.get_window_extent(renderer))
3955:         if self._left_title.get_visible():
3956:             bb.append(self._left_title.get_window_extent(renderer))
3957:         if self._right_title.get_visible():
3958:             bb.append(self._right_title.get_window_extent(renderer))
3959: 
3960:         bb_xaxis = self.xaxis.get_tightbbox(renderer)
3961:         if bb_xaxis:
3962:             bb.append(bb_xaxis)
3963: 
3964:         bb_yaxis = self.yaxis.get_tightbbox(renderer)
3965:         if bb_yaxis:
3966:             bb.append(bb_yaxis)
3967: 
3968:         for child in self.get_children():
3969:             if isinstance(child, OffsetBox) and child.get_visible():
3970:                 bb.append(child.get_window_extent(renderer))
3971: 
3972:         _bbox = mtransforms.Bbox.union(
3973:             [b for b in bb if b.width != 0 or b.height != 0])
3974: 
3975:         return _bbox
3976: 
3977:     def _make_twin_axes(self, *kl, **kwargs):
3978:         '''
3979:         make a twinx axes of self. This is used for twinx and twiny.
3980:         '''
3981:         ax2 = self.figure.add_axes(self.get_position(True), *kl, **kwargs)
3982:         return ax2
3983: 
3984:     def twinx(self):
3985:         '''
3986:         Create a twin Axes sharing the xaxis
3987: 
3988:         Create a new Axes instance with an invisible x-axis and an independent
3989:         y-axis positioned opposite to the original one (i.e. at right). The
3990:         x-axis autoscale setting will be inherited from the original Axes.
3991:         To ensure that the tick marks of both y-axes align, see
3992:         `~matplotlib.ticker.LinearLocator`
3993: 
3994:         Returns
3995:         -------
3996:         ax_twin : Axes
3997:             The newly created Axes instance
3998: 
3999:         Notes
4000:         -----
4001:         For those who are 'picking' artists while using twinx, pick
4002:         events are only called for the artists in the top-most axes.
4003:         '''
4004:         ax2 = self._make_twin_axes(sharex=self)
4005:         ax2.yaxis.tick_right()
4006:         ax2.yaxis.set_label_position('right')
4007:         ax2.yaxis.set_offset_position('right')
4008:         ax2.set_autoscalex_on(self.get_autoscalex_on())
4009:         self.yaxis.tick_left()
4010:         ax2.xaxis.set_visible(False)
4011:         ax2.patch.set_visible(False)
4012:         return ax2
4013: 
4014:     def twiny(self):
4015:         '''
4016:         Create a twin Axes sharing the yaxis
4017: 
4018:         Create a new Axes instance with an invisible y-axis and an independent
4019:         x-axis positioned opposite to the original one (i.e. at top). The
4020:         y-axis autoscale setting will be inherited from the original Axes.
4021:         To ensure that the tick marks of both x-axes align, see
4022:         `~matplotlib.ticker.LinearLocator`
4023: 
4024:         Returns
4025:         -------
4026:         ax_twin : Axes
4027:             The newly created Axes instance
4028: 
4029:         Notes
4030:         -----
4031:         For those who are 'picking' artists while using twiny, pick
4032:         events are only called for the artists in the top-most axes.
4033:         '''
4034:         ax2 = self._make_twin_axes(sharey=self)
4035:         ax2.xaxis.tick_top()
4036:         ax2.xaxis.set_label_position('top')
4037:         ax2.set_autoscaley_on(self.get_autoscaley_on())
4038:         self.xaxis.tick_bottom()
4039:         ax2.yaxis.set_visible(False)
4040:         ax2.patch.set_visible(False)
4041:         return ax2
4042: 
4043:     def get_shared_x_axes(self):
4044:         'Return a copy of the shared axes Grouper object for x axes'
4045:         return self._shared_x_axes
4046: 
4047:     def get_shared_y_axes(self):
4048:         'Return a copy of the shared axes Grouper object for y axes'
4049:         return self._shared_y_axes
4050: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 4, 0))

# 'from collections import OrderedDict' statement (line 4)
try:
    from collections import OrderedDict

except:
    OrderedDict = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 4, 0), 'collections', None, module_type_store, ['OrderedDict'], [OrderedDict])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 6, 0))

# 'import six' statement (line 6)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207915 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'six')

if (type(import_207915) is not StypyTypeError):

    if (import_207915 != 'pyd_module'):
        __import__(import_207915)
        sys_modules_207916 = sys.modules[import_207915]
        import_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'six', sys_modules_207916.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 6)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6, 0), 'six', import_207915)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'from six.moves import xrange' statement (line 7)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207917 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six.moves')

if (type(import_207917) is not StypyTypeError):

    if (import_207917 != 'pyd_module'):
        __import__(import_207917)
        sys_modules_207918 = sys.modules[import_207917]
        import_from_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six.moves', sys_modules_207918.module_type_store, module_type_store, ['xrange'])
        nest_module(stypy.reporting.localization.Localization(__file__, 7, 0), __file__, sys_modules_207918, sys_modules_207918.module_type_store, module_type_store)
    else:
        from six.moves import xrange

        import_from_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six.moves', None, module_type_store, ['xrange'], [xrange])

else:
    # Assigning a type to the variable 'six.moves' (line 7)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7, 0), 'six.moves', import_207917)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'import itertools' statement (line 9)
import itertools

import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'itertools', itertools, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'import warnings' statement (line 10)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'import math' statement (line 11)
import math

import_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'math', math, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'from operator import attrgetter' statement (line 12)
try:
    from operator import attrgetter

except:
    attrgetter = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'operator', None, module_type_store, ['attrgetter'], [attrgetter])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'import numpy' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207919 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy')

if (type(import_207919) is not StypyTypeError):

    if (import_207919 != 'pyd_module'):
        __import__(import_207919)
        sys_modules_207920 = sys.modules[import_207919]
        import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'np', sys_modules_207920.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy', import_207919)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'import matplotlib' statement (line 16)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207921 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib')

if (type(import_207921) is not StypyTypeError):

    if (import_207921 != 'pyd_module'):
        __import__(import_207921)
        sys_modules_207922 = sys.modules[import_207921]
        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib', sys_modules_207922.module_type_store, module_type_store)
    else:
        import matplotlib

        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib', matplotlib, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib', import_207921)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'from matplotlib import cbook' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207923 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib')

if (type(import_207923) is not StypyTypeError):

    if (import_207923 != 'pyd_module'):
        __import__(import_207923)
        sys_modules_207924 = sys.modules[import_207923]
        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib', sys_modules_207924.module_type_store, module_type_store, ['cbook'])
        nest_module(stypy.reporting.localization.Localization(__file__, 18, 0), __file__, sys_modules_207924, sys_modules_207924.module_type_store, module_type_store)
    else:
        from matplotlib import cbook

        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib', None, module_type_store, ['cbook'], [cbook])

else:
    # Assigning a type to the variable 'matplotlib' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib', import_207923)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'from matplotlib.cbook import _check_1d, _string_to_bool, iterable, index_of, get_label' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207925 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.cbook')

if (type(import_207925) is not StypyTypeError):

    if (import_207925 != 'pyd_module'):
        __import__(import_207925)
        sys_modules_207926 = sys.modules[import_207925]
        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.cbook', sys_modules_207926.module_type_store, module_type_store, ['_check_1d', '_string_to_bool', 'iterable', 'index_of', 'get_label'])
        nest_module(stypy.reporting.localization.Localization(__file__, 19, 0), __file__, sys_modules_207926, sys_modules_207926.module_type_store, module_type_store)
    else:
        from matplotlib.cbook import _check_1d, _string_to_bool, iterable, index_of, get_label

        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.cbook', None, module_type_store, ['_check_1d', '_string_to_bool', 'iterable', 'index_of', 'get_label'], [_check_1d, _string_to_bool, iterable, index_of, get_label])

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.cbook', import_207925)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'from matplotlib import docstring' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207927 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib')

if (type(import_207927) is not StypyTypeError):

    if (import_207927 != 'pyd_module'):
        __import__(import_207927)
        sys_modules_207928 = sys.modules[import_207927]
        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib', sys_modules_207928.module_type_store, module_type_store, ['docstring'])
        nest_module(stypy.reporting.localization.Localization(__file__, 21, 0), __file__, sys_modules_207928, sys_modules_207928.module_type_store, module_type_store)
    else:
        from matplotlib import docstring

        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib', None, module_type_store, ['docstring'], [docstring])

else:
    # Assigning a type to the variable 'matplotlib' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib', import_207927)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 0))

# 'import matplotlib.colors' statement (line 22)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207929 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.colors')

if (type(import_207929) is not StypyTypeError):

    if (import_207929 != 'pyd_module'):
        __import__(import_207929)
        sys_modules_207930 = sys.modules[import_207929]
        import_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'mcolors', sys_modules_207930.module_type_store, module_type_store)
    else:
        import matplotlib.colors as mcolors

        import_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'mcolors', matplotlib.colors, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.colors' (line 22)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.colors', import_207929)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'import matplotlib.lines' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207931 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.lines')

if (type(import_207931) is not StypyTypeError):

    if (import_207931 != 'pyd_module'):
        __import__(import_207931)
        sys_modules_207932 = sys.modules[import_207931]
        import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'mlines', sys_modules_207932.module_type_store, module_type_store)
    else:
        import matplotlib.lines as mlines

        import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'mlines', matplotlib.lines, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.lines' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.lines', import_207931)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'import matplotlib.patches' statement (line 24)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207933 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.patches')

if (type(import_207933) is not StypyTypeError):

    if (import_207933 != 'pyd_module'):
        __import__(import_207933)
        sys_modules_207934 = sys.modules[import_207933]
        import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'mpatches', sys_modules_207934.module_type_store, module_type_store)
    else:
        import matplotlib.patches as mpatches

        import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'mpatches', matplotlib.patches, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.patches' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.patches', import_207933)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'import matplotlib.artist' statement (line 25)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207935 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.artist')

if (type(import_207935) is not StypyTypeError):

    if (import_207935 != 'pyd_module'):
        __import__(import_207935)
        sys_modules_207936 = sys.modules[import_207935]
        import_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'martist', sys_modules_207936.module_type_store, module_type_store)
    else:
        import matplotlib.artist as martist

        import_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'martist', matplotlib.artist, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 25)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.artist', import_207935)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'import matplotlib.transforms' statement (line 26)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207937 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.transforms')

if (type(import_207937) is not StypyTypeError):

    if (import_207937 != 'pyd_module'):
        __import__(import_207937)
        sys_modules_207938 = sys.modules[import_207937]
        import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'mtransforms', sys_modules_207938.module_type_store, module_type_store)
    else:
        import matplotlib.transforms as mtransforms

        import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'mtransforms', matplotlib.transforms, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 26)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.transforms', import_207937)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'import matplotlib.ticker' statement (line 27)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207939 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.ticker')

if (type(import_207939) is not StypyTypeError):

    if (import_207939 != 'pyd_module'):
        __import__(import_207939)
        sys_modules_207940 = sys.modules[import_207939]
        import_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'mticker', sys_modules_207940.module_type_store, module_type_store)
    else:
        import matplotlib.ticker as mticker

        import_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'mticker', matplotlib.ticker, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.ticker' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.ticker', import_207939)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'import matplotlib.axis' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207941 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib.axis')

if (type(import_207941) is not StypyTypeError):

    if (import_207941 != 'pyd_module'):
        __import__(import_207941)
        sys_modules_207942 = sys.modules[import_207941]
        import_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'maxis', sys_modules_207942.module_type_store, module_type_store)
    else:
        import matplotlib.axis as maxis

        import_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'maxis', matplotlib.axis, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.axis' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib.axis', import_207941)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'import matplotlib.scale' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207943 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.scale')

if (type(import_207943) is not StypyTypeError):

    if (import_207943 != 'pyd_module'):
        __import__(import_207943)
        sys_modules_207944 = sys.modules[import_207943]
        import_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'mscale', sys_modules_207944.module_type_store, module_type_store)
    else:
        import matplotlib.scale as mscale

        import_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'mscale', matplotlib.scale, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.scale' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.scale', import_207943)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'import matplotlib.spines' statement (line 30)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207945 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.spines')

if (type(import_207945) is not StypyTypeError):

    if (import_207945 != 'pyd_module'):
        __import__(import_207945)
        sys_modules_207946 = sys.modules[import_207945]
        import_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'mspines', sys_modules_207946.module_type_store, module_type_store)
    else:
        import matplotlib.spines as mspines

        import_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'mspines', matplotlib.spines, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.spines' (line 30)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.spines', import_207945)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 31, 0))

# 'import matplotlib.font_manager' statement (line 31)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207947 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.font_manager')

if (type(import_207947) is not StypyTypeError):

    if (import_207947 != 'pyd_module'):
        __import__(import_207947)
        sys_modules_207948 = sys.modules[import_207947]
        import_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'font_manager', sys_modules_207948.module_type_store, module_type_store)
    else:
        import matplotlib.font_manager as font_manager

        import_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'font_manager', matplotlib.font_manager, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.font_manager' (line 31)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.font_manager', import_207947)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 0))

# 'import matplotlib.text' statement (line 32)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207949 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.text')

if (type(import_207949) is not StypyTypeError):

    if (import_207949 != 'pyd_module'):
        __import__(import_207949)
        sys_modules_207950 = sys.modules[import_207949]
        import_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'mtext', sys_modules_207950.module_type_store, module_type_store)
    else:
        import matplotlib.text as mtext

        import_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'mtext', matplotlib.text, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.text' (line 32)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.text', import_207949)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 33, 0))

# 'import matplotlib.image' statement (line 33)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207951 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib.image')

if (type(import_207951) is not StypyTypeError):

    if (import_207951 != 'pyd_module'):
        __import__(import_207951)
        sys_modules_207952 = sys.modules[import_207951]
        import_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'mimage', sys_modules_207952.module_type_store, module_type_store)
    else:
        import matplotlib.image as mimage

        import_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'mimage', matplotlib.image, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.image' (line 33)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib.image', import_207951)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 34, 0))

# 'from matplotlib.offsetbox import OffsetBox' statement (line 34)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207953 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.offsetbox')

if (type(import_207953) is not StypyTypeError):

    if (import_207953 != 'pyd_module'):
        __import__(import_207953)
        sys_modules_207954 = sys.modules[import_207953]
        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.offsetbox', sys_modules_207954.module_type_store, module_type_store, ['OffsetBox'])
        nest_module(stypy.reporting.localization.Localization(__file__, 34, 0), __file__, sys_modules_207954, sys_modules_207954.module_type_store, module_type_store)
    else:
        from matplotlib.offsetbox import OffsetBox

        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.offsetbox', None, module_type_store, ['OffsetBox'], [OffsetBox])

else:
    # Assigning a type to the variable 'matplotlib.offsetbox' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.offsetbox', import_207953)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 35, 0))

# 'from matplotlib.artist import allow_rasterization' statement (line 35)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207955 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib.artist')

if (type(import_207955) is not StypyTypeError):

    if (import_207955 != 'pyd_module'):
        __import__(import_207955)
        sys_modules_207956 = sys.modules[import_207955]
        import_from_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib.artist', sys_modules_207956.module_type_store, module_type_store, ['allow_rasterization'])
        nest_module(stypy.reporting.localization.Localization(__file__, 35, 0), __file__, sys_modules_207956, sys_modules_207956.module_type_store, module_type_store)
    else:
        from matplotlib.artist import allow_rasterization

        import_from_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib.artist', None, module_type_store, ['allow_rasterization'], [allow_rasterization])

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 35)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib.artist', import_207955)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 37, 0))

# 'from matplotlib.rcsetup import cycler' statement (line 37)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207957 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.rcsetup')

if (type(import_207957) is not StypyTypeError):

    if (import_207957 != 'pyd_module'):
        __import__(import_207957)
        sys_modules_207958 = sys.modules[import_207957]
        import_from_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.rcsetup', sys_modules_207958.module_type_store, module_type_store, ['cycler'])
        nest_module(stypy.reporting.localization.Localization(__file__, 37, 0), __file__, sys_modules_207958, sys_modules_207958.module_type_store, module_type_store)
    else:
        from matplotlib.rcsetup import cycler

        import_from_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.rcsetup', None, module_type_store, ['cycler'], [cycler])

else:
    # Assigning a type to the variable 'matplotlib.rcsetup' (line 37)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.rcsetup', import_207957)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 38, 0))

# 'from matplotlib.rcsetup import validate_axisbelow' statement (line 38)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/axes/')
import_207959 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.rcsetup')

if (type(import_207959) is not StypyTypeError):

    if (import_207959 != 'pyd_module'):
        __import__(import_207959)
        sys_modules_207960 = sys.modules[import_207959]
        import_from_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.rcsetup', sys_modules_207960.module_type_store, module_type_store, ['validate_axisbelow'])
        nest_module(stypy.reporting.localization.Localization(__file__, 38, 0), __file__, sys_modules_207960, sys_modules_207960.module_type_store, module_type_store)
    else:
        from matplotlib.rcsetup import validate_axisbelow

        import_from_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.rcsetup', None, module_type_store, ['validate_axisbelow'], [validate_axisbelow])

else:
    # Assigning a type to the variable 'matplotlib.rcsetup' (line 38)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.rcsetup', import_207959)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/axes/')


# Assigning a Attribute to a Name (line 40):

# Assigning a Attribute to a Name (line 40):
# Getting the type of 'matplotlib' (line 40)
matplotlib_207961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 11), 'matplotlib')
# Obtaining the member 'rcParams' of a type (line 40)
rcParams_207962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 40, 11), matplotlib_207961, 'rcParams')
# Assigning a type to the variable 'rcParams' (line 40)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'rcParams', rcParams_207962)

# Assigning a Attribute to a Name (line 42):

# Assigning a Attribute to a Name (line 42):
# Getting the type of 'cbook' (line 42)
cbook_207963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 42, 17), 'cbook')
# Obtaining the member 'is_string_like' of a type (line 42)
is_string_like_207964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 42, 17), cbook_207963, 'is_string_like')
# Assigning a type to the variable 'is_string_like' (line 42)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 42, 0), 'is_string_like', is_string_like_207964)

# Assigning a Attribute to a Name (line 43):

# Assigning a Attribute to a Name (line 43):
# Getting the type of 'cbook' (line 43)
cbook_207965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 25), 'cbook')
# Obtaining the member 'is_sequence_of_strings' of a type (line 43)
is_sequence_of_strings_207966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 43, 25), cbook_207965, 'is_sequence_of_strings')
# Assigning a type to the variable 'is_sequence_of_strings' (line 43)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), 'is_sequence_of_strings', is_sequence_of_strings_207966)

# Assigning a Str to a Name (line 45):

# Assigning a Str to a Name (line 45):
unicode_207967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, (-1)), 'unicode', u'axes.hold is deprecated.\n    See the API Changes document (http://matplotlib.org/api/api_changes.html)\n    for more details.')
# Assigning a type to the variable '_hold_msg' (line 45)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 45, 0), '_hold_msg', unicode_207967)

@norecursion
def _process_plot_format(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_process_plot_format'
    module_type_store = module_type_store.open_function_context('_process_plot_format', 50, 0, False)
    
    # Passed parameters checking function
    _process_plot_format.stypy_localization = localization
    _process_plot_format.stypy_type_of_self = None
    _process_plot_format.stypy_type_store = module_type_store
    _process_plot_format.stypy_function_name = '_process_plot_format'
    _process_plot_format.stypy_param_names_list = ['fmt']
    _process_plot_format.stypy_varargs_param_name = None
    _process_plot_format.stypy_kwargs_param_name = None
    _process_plot_format.stypy_call_defaults = defaults
    _process_plot_format.stypy_call_varargs = varargs
    _process_plot_format.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_process_plot_format', ['fmt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_process_plot_format', localization, ['fmt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_process_plot_format(...)' code ##################

    unicode_207968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 66, (-1)), 'unicode', u"\n    Process a MATLAB style color/line style format string.  Return a\n    (*linestyle*, *color*) tuple as a result of the processing.  Default\n    values are ('-', 'b').  Example format strings include:\n\n    * 'ko': black circles\n    * '.b': blue dots\n    * 'r--': red dashed lines\n    * 'C2--': the third color in the color cycle, dashed lines\n\n    .. seealso::\n\n        :func:`~matplotlib.Line2D.lineStyles` and\n        :func:`~matplotlib.pyplot.colors`\n            for all possible styles and color format string.\n    ")
    
    # Assigning a Name to a Name (line 68):
    
    # Assigning a Name to a Name (line 68):
    # Getting the type of 'None' (line 68)
    None_207969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 16), 'None')
    # Assigning a type to the variable 'linestyle' (line 68)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 68, 4), 'linestyle', None_207969)
    
    # Assigning a Name to a Name (line 69):
    
    # Assigning a Name to a Name (line 69):
    # Getting the type of 'None' (line 69)
    None_207970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 13), 'None')
    # Assigning a type to the variable 'marker' (line 69)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 4), 'marker', None_207970)
    
    # Assigning a Name to a Name (line 70):
    
    # Assigning a Name to a Name (line 70):
    # Getting the type of 'None' (line 70)
    None_207971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 12), 'None')
    # Assigning a type to the variable 'color' (line 70)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 4), 'color', None_207971)
    
    
    # SSA begins for try-except statement (line 73)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 74):
    
    # Assigning a Call to a Name (line 74):
    
    # Call to to_rgba(...): (line 74)
    # Processing the call arguments (line 74)
    # Getting the type of 'fmt' (line 74)
    fmt_207974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 32), 'fmt', False)
    # Processing the call keyword arguments (line 74)
    kwargs_207975 = {}
    # Getting the type of 'mcolors' (line 74)
    mcolors_207972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 16), 'mcolors', False)
    # Obtaining the member 'to_rgba' of a type (line 74)
    to_rgba_207973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 74, 16), mcolors_207972, 'to_rgba')
    # Calling to_rgba(args, kwargs) (line 74)
    to_rgba_call_result_207976 = invoke(stypy.reporting.localization.Localization(__file__, 74, 16), to_rgba_207973, *[fmt_207974], **kwargs_207975)
    
    # Assigning a type to the variable 'color' (line 74)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 74, 8), 'color', to_rgba_call_result_207976)
    
    
    # SSA begins for try-except statement (line 77)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 78):
    
    # Assigning a Call to a Name (line 78):
    
    # Call to str(...): (line 78)
    # Processing the call arguments (line 78)
    
    # Call to int(...): (line 78)
    # Processing the call arguments (line 78)
    # Getting the type of 'fmt' (line 78)
    fmt_207979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 29), 'fmt', False)
    # Processing the call keyword arguments (line 78)
    kwargs_207980 = {}
    # Getting the type of 'int' (line 78)
    int_207978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 25), 'int', False)
    # Calling int(args, kwargs) (line 78)
    int_call_result_207981 = invoke(stypy.reporting.localization.Localization(__file__, 78, 25), int_207978, *[fmt_207979], **kwargs_207980)
    
    # Processing the call keyword arguments (line 78)
    kwargs_207982 = {}
    # Getting the type of 'str' (line 78)
    str_207977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 21), 'str', False)
    # Calling str(args, kwargs) (line 78)
    str_call_result_207983 = invoke(stypy.reporting.localization.Localization(__file__, 78, 21), str_207977, *[int_call_result_207981], **kwargs_207982)
    
    # Assigning a type to the variable 'fmtint' (line 78)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 78, 12), 'fmtint', str_call_result_207983)
    # SSA branch for the except part of a try statement (line 77)
    # SSA branch for the except 'ValueError' branch of a try statement (line 77)
    module_type_store.open_ssa_branch('except')
    
    # Obtaining an instance of the builtin type 'tuple' (line 80)
    tuple_207984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 80, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 80)
    # Adding element type (line 80)
    # Getting the type of 'linestyle' (line 80)
    linestyle_207985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 19), 'linestyle')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 80, 19), tuple_207984, linestyle_207985)
    # Adding element type (line 80)
    # Getting the type of 'marker' (line 80)
    marker_207986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 30), 'marker')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 80, 19), tuple_207984, marker_207986)
    # Adding element type (line 80)
    # Getting the type of 'color' (line 80)
    color_207987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 38), 'color')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 80, 19), tuple_207984, color_207987)
    
    # Assigning a type to the variable 'stypy_return_type' (line 80)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 12), 'stypy_return_type', tuple_207984)
    # SSA branch for the else branch of a try statement (line 77)
    module_type_store.open_ssa_branch('except else')
    
    
    # Getting the type of 'fmt' (line 82)
    fmt_207988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 15), 'fmt')
    # Getting the type of 'fmtint' (line 82)
    fmtint_207989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 22), 'fmtint')
    # Applying the binary operator '!=' (line 82)
    result_ne_207990 = python_operator(stypy.reporting.localization.Localization(__file__, 82, 15), '!=', fmt_207988, fmtint_207989)
    
    # Testing the type of an if condition (line 82)
    if_condition_207991 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 82, 12), result_ne_207990)
    # Assigning a type to the variable 'if_condition_207991' (line 82)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 12), 'if_condition_207991', if_condition_207991)
    # SSA begins for if statement (line 82)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 84)
    tuple_207992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 84)
    # Adding element type (line 84)
    # Getting the type of 'linestyle' (line 84)
    linestyle_207993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 23), 'linestyle')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 23), tuple_207992, linestyle_207993)
    # Adding element type (line 84)
    # Getting the type of 'marker' (line 84)
    marker_207994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 34), 'marker')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 23), tuple_207992, marker_207994)
    # Adding element type (line 84)
    # Getting the type of 'color' (line 84)
    color_207995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 42), 'color')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 23), tuple_207992, color_207995)
    
    # Assigning a type to the variable 'stypy_return_type' (line 84)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 16), 'stypy_return_type', tuple_207992)
    # SSA branch for the else part of an if statement (line 82)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 87):
    
    # Assigning a Name to a Name (line 87):
    # Getting the type of 'None' (line 87)
    None_207996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 24), 'None')
    # Assigning a type to the variable 'color' (line 87)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 87, 16), 'color', None_207996)
    # SSA join for if statement (line 82)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for try-except statement (line 77)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 73)
    # SSA branch for the except 'ValueError' branch of a try statement (line 73)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 73)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to find(...): (line 93)
    # Processing the call arguments (line 93)
    unicode_207999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 16), 'unicode', u'--')
    # Processing the call keyword arguments (line 93)
    kwargs_208000 = {}
    # Getting the type of 'fmt' (line 93)
    fmt_207997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 7), 'fmt', False)
    # Obtaining the member 'find' of a type (line 93)
    find_207998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 93, 7), fmt_207997, 'find')
    # Calling find(args, kwargs) (line 93)
    find_call_result_208001 = invoke(stypy.reporting.localization.Localization(__file__, 93, 7), find_207998, *[unicode_207999], **kwargs_208000)
    
    int_208002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 25), 'int')
    # Applying the binary operator '>=' (line 93)
    result_ge_208003 = python_operator(stypy.reporting.localization.Localization(__file__, 93, 7), '>=', find_call_result_208001, int_208002)
    
    # Testing the type of an if condition (line 93)
    if_condition_208004 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 93, 4), result_ge_208003)
    # Assigning a type to the variable 'if_condition_208004' (line 93)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 93, 4), 'if_condition_208004', if_condition_208004)
    # SSA begins for if statement (line 93)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 94):
    
    # Assigning a Str to a Name (line 94):
    unicode_208005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 20), 'unicode', u'--')
    # Assigning a type to the variable 'linestyle' (line 94)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 8), 'linestyle', unicode_208005)
    
    # Assigning a Call to a Name (line 95):
    
    # Assigning a Call to a Name (line 95):
    
    # Call to replace(...): (line 95)
    # Processing the call arguments (line 95)
    unicode_208008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 26), 'unicode', u'--')
    unicode_208009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 32), 'unicode', u'')
    # Processing the call keyword arguments (line 95)
    kwargs_208010 = {}
    # Getting the type of 'fmt' (line 95)
    fmt_208006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 14), 'fmt', False)
    # Obtaining the member 'replace' of a type (line 95)
    replace_208007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 14), fmt_208006, 'replace')
    # Calling replace(args, kwargs) (line 95)
    replace_call_result_208011 = invoke(stypy.reporting.localization.Localization(__file__, 95, 14), replace_208007, *[unicode_208008, unicode_208009], **kwargs_208010)
    
    # Assigning a type to the variable 'fmt' (line 95)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 8), 'fmt', replace_call_result_208011)
    # SSA join for if statement (line 93)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to find(...): (line 96)
    # Processing the call arguments (line 96)
    unicode_208014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 16), 'unicode', u'-.')
    # Processing the call keyword arguments (line 96)
    kwargs_208015 = {}
    # Getting the type of 'fmt' (line 96)
    fmt_208012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 7), 'fmt', False)
    # Obtaining the member 'find' of a type (line 96)
    find_208013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 7), fmt_208012, 'find')
    # Calling find(args, kwargs) (line 96)
    find_call_result_208016 = invoke(stypy.reporting.localization.Localization(__file__, 96, 7), find_208013, *[unicode_208014], **kwargs_208015)
    
    int_208017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 25), 'int')
    # Applying the binary operator '>=' (line 96)
    result_ge_208018 = python_operator(stypy.reporting.localization.Localization(__file__, 96, 7), '>=', find_call_result_208016, int_208017)
    
    # Testing the type of an if condition (line 96)
    if_condition_208019 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 96, 4), result_ge_208018)
    # Assigning a type to the variable 'if_condition_208019' (line 96)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 4), 'if_condition_208019', if_condition_208019)
    # SSA begins for if statement (line 96)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 97):
    
    # Assigning a Str to a Name (line 97):
    unicode_208020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 20), 'unicode', u'-.')
    # Assigning a type to the variable 'linestyle' (line 97)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 8), 'linestyle', unicode_208020)
    
    # Assigning a Call to a Name (line 98):
    
    # Assigning a Call to a Name (line 98):
    
    # Call to replace(...): (line 98)
    # Processing the call arguments (line 98)
    unicode_208023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 26), 'unicode', u'-.')
    unicode_208024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 32), 'unicode', u'')
    # Processing the call keyword arguments (line 98)
    kwargs_208025 = {}
    # Getting the type of 'fmt' (line 98)
    fmt_208021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 14), 'fmt', False)
    # Obtaining the member 'replace' of a type (line 98)
    replace_208022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 98, 14), fmt_208021, 'replace')
    # Calling replace(args, kwargs) (line 98)
    replace_call_result_208026 = invoke(stypy.reporting.localization.Localization(__file__, 98, 14), replace_208022, *[unicode_208023, unicode_208024], **kwargs_208025)
    
    # Assigning a type to the variable 'fmt' (line 98)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 8), 'fmt', replace_call_result_208026)
    # SSA join for if statement (line 96)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to find(...): (line 99)
    # Processing the call arguments (line 99)
    unicode_208029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 16), 'unicode', u' ')
    # Processing the call keyword arguments (line 99)
    kwargs_208030 = {}
    # Getting the type of 'fmt' (line 99)
    fmt_208027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 7), 'fmt', False)
    # Obtaining the member 'find' of a type (line 99)
    find_208028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 99, 7), fmt_208027, 'find')
    # Calling find(args, kwargs) (line 99)
    find_call_result_208031 = invoke(stypy.reporting.localization.Localization(__file__, 99, 7), find_208028, *[unicode_208029], **kwargs_208030)
    
    int_208032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 24), 'int')
    # Applying the binary operator '>=' (line 99)
    result_ge_208033 = python_operator(stypy.reporting.localization.Localization(__file__, 99, 7), '>=', find_call_result_208031, int_208032)
    
    # Testing the type of an if condition (line 99)
    if_condition_208034 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 99, 4), result_ge_208033)
    # Assigning a type to the variable 'if_condition_208034' (line 99)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 99, 4), 'if_condition_208034', if_condition_208034)
    # SSA begins for if statement (line 99)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 100):
    
    # Assigning a Str to a Name (line 100):
    unicode_208035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, 20), 'unicode', u'None')
    # Assigning a type to the variable 'linestyle' (line 100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 100, 8), 'linestyle', unicode_208035)
    
    # Assigning a Call to a Name (line 101):
    
    # Assigning a Call to a Name (line 101):
    
    # Call to replace(...): (line 101)
    # Processing the call arguments (line 101)
    unicode_208038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, 26), 'unicode', u' ')
    unicode_208039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, 31), 'unicode', u'')
    # Processing the call keyword arguments (line 101)
    kwargs_208040 = {}
    # Getting the type of 'fmt' (line 101)
    fmt_208036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 14), 'fmt', False)
    # Obtaining the member 'replace' of a type (line 101)
    replace_208037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 101, 14), fmt_208036, 'replace')
    # Calling replace(args, kwargs) (line 101)
    replace_call_result_208041 = invoke(stypy.reporting.localization.Localization(__file__, 101, 14), replace_208037, *[unicode_208038, unicode_208039], **kwargs_208040)
    
    # Assigning a type to the variable 'fmt' (line 101)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 101, 8), 'fmt', replace_call_result_208041)
    # SSA join for if statement (line 99)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 103):
    
    # Assigning a ListComp to a Name (line 103):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'fmt' (line 103)
    fmt_208043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 24), 'fmt')
    comprehension_208044 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 103, 13), fmt_208043)
    # Assigning a type to the variable 'c' (line 103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 13), 'c', comprehension_208044)
    # Getting the type of 'c' (line 103)
    c_208042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 13), 'c')
    list_208045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 13), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 103, 13), list_208045, c_208042)
    # Assigning a type to the variable 'chars' (line 103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 4), 'chars', list_208045)
    
    # Assigning a Num to a Name (line 105):
    
    # Assigning a Num to a Name (line 105):
    int_208046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 8), 'int')
    # Assigning a type to the variable 'i' (line 105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 4), 'i', int_208046)
    
    
    # Getting the type of 'i' (line 106)
    i_208047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 10), 'i')
    
    # Call to len(...): (line 106)
    # Processing the call arguments (line 106)
    # Getting the type of 'chars' (line 106)
    chars_208049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 18), 'chars', False)
    # Processing the call keyword arguments (line 106)
    kwargs_208050 = {}
    # Getting the type of 'len' (line 106)
    len_208048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 14), 'len', False)
    # Calling len(args, kwargs) (line 106)
    len_call_result_208051 = invoke(stypy.reporting.localization.Localization(__file__, 106, 14), len_208048, *[chars_208049], **kwargs_208050)
    
    # Applying the binary operator '<' (line 106)
    result_lt_208052 = python_operator(stypy.reporting.localization.Localization(__file__, 106, 10), '<', i_208047, len_call_result_208051)
    
    # Testing the type of an if condition (line 106)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 106, 4), result_lt_208052)
    # SSA begins for while statement (line 106)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Subscript to a Name (line 107):
    
    # Assigning a Subscript to a Name (line 107):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 107)
    i_208053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 18), 'i')
    # Getting the type of 'chars' (line 107)
    chars_208054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 12), 'chars')
    # Obtaining the member '__getitem__' of a type (line 107)
    getitem___208055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 107, 12), chars_208054, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 107)
    subscript_call_result_208056 = invoke(stypy.reporting.localization.Localization(__file__, 107, 12), getitem___208055, i_208053)
    
    # Assigning a type to the variable 'c' (line 107)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 8), 'c', subscript_call_result_208056)
    
    
    # Getting the type of 'c' (line 108)
    c_208057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 11), 'c')
    # Getting the type of 'mlines' (line 108)
    mlines_208058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 16), 'mlines')
    # Obtaining the member 'lineStyles' of a type (line 108)
    lineStyles_208059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 108, 16), mlines_208058, 'lineStyles')
    # Applying the binary operator 'in' (line 108)
    result_contains_208060 = python_operator(stypy.reporting.localization.Localization(__file__, 108, 11), 'in', c_208057, lineStyles_208059)
    
    # Testing the type of an if condition (line 108)
    if_condition_208061 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 108, 8), result_contains_208060)
    # Assigning a type to the variable 'if_condition_208061' (line 108)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 108, 8), 'if_condition_208061', if_condition_208061)
    # SSA begins for if statement (line 108)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 109)
    # Getting the type of 'linestyle' (line 109)
    linestyle_208062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 12), 'linestyle')
    # Getting the type of 'None' (line 109)
    None_208063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 32), 'None')
    
    (may_be_208064, more_types_in_union_208065) = may_not_be_none(linestyle_208062, None_208063)

    if may_be_208064:

        if more_types_in_union_208065:
            # Runtime conditional SSA (line 109)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to ValueError(...): (line 110)
        # Processing the call arguments (line 110)
        unicode_208067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 20), 'unicode', u'Illegal format string "%s"; two linestyle symbols')
        # Getting the type of 'fmt' (line 111)
        fmt_208068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 74), 'fmt', False)
        # Applying the binary operator '%' (line 111)
        result_mod_208069 = python_operator(stypy.reporting.localization.Localization(__file__, 111, 20), '%', unicode_208067, fmt_208068)
        
        # Processing the call keyword arguments (line 110)
        kwargs_208070 = {}
        # Getting the type of 'ValueError' (line 110)
        ValueError_208066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 110)
        ValueError_call_result_208071 = invoke(stypy.reporting.localization.Localization(__file__, 110, 22), ValueError_208066, *[result_mod_208069], **kwargs_208070)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 110, 16), ValueError_call_result_208071, 'raise parameter', BaseException)

        if more_types_in_union_208065:
            # SSA join for if statement (line 109)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 112):
    
    # Assigning a Name to a Name (line 112):
    # Getting the type of 'c' (line 112)
    c_208072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 24), 'c')
    # Assigning a type to the variable 'linestyle' (line 112)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 12), 'linestyle', c_208072)
    # SSA branch for the else part of an if statement (line 108)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'c' (line 113)
    c_208073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 13), 'c')
    # Getting the type of 'mlines' (line 113)
    mlines_208074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 18), 'mlines')
    # Obtaining the member 'lineMarkers' of a type (line 113)
    lineMarkers_208075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 18), mlines_208074, 'lineMarkers')
    # Applying the binary operator 'in' (line 113)
    result_contains_208076 = python_operator(stypy.reporting.localization.Localization(__file__, 113, 13), 'in', c_208073, lineMarkers_208075)
    
    # Testing the type of an if condition (line 113)
    if_condition_208077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 113, 13), result_contains_208076)
    # Assigning a type to the variable 'if_condition_208077' (line 113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 13), 'if_condition_208077', if_condition_208077)
    # SSA begins for if statement (line 113)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 114)
    # Getting the type of 'marker' (line 114)
    marker_208078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 12), 'marker')
    # Getting the type of 'None' (line 114)
    None_208079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 29), 'None')
    
    (may_be_208080, more_types_in_union_208081) = may_not_be_none(marker_208078, None_208079)

    if may_be_208080:

        if more_types_in_union_208081:
            # Runtime conditional SSA (line 114)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to ValueError(...): (line 115)
        # Processing the call arguments (line 115)
        unicode_208083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, 20), 'unicode', u'Illegal format string "%s"; two marker symbols')
        # Getting the type of 'fmt' (line 116)
        fmt_208084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 71), 'fmt', False)
        # Applying the binary operator '%' (line 116)
        result_mod_208085 = python_operator(stypy.reporting.localization.Localization(__file__, 116, 20), '%', unicode_208083, fmt_208084)
        
        # Processing the call keyword arguments (line 115)
        kwargs_208086 = {}
        # Getting the type of 'ValueError' (line 115)
        ValueError_208082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 115)
        ValueError_call_result_208087 = invoke(stypy.reporting.localization.Localization(__file__, 115, 22), ValueError_208082, *[result_mod_208085], **kwargs_208086)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 115, 16), ValueError_call_result_208087, 'raise parameter', BaseException)

        if more_types_in_union_208081:
            # SSA join for if statement (line 114)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 117):
    
    # Assigning a Name to a Name (line 117):
    # Getting the type of 'c' (line 117)
    c_208088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 21), 'c')
    # Assigning a type to the variable 'marker' (line 117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 12), 'marker', c_208088)
    # SSA branch for the else part of an if statement (line 113)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'c' (line 118)
    c_208089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 13), 'c')
    
    # Call to get_named_colors_mapping(...): (line 118)
    # Processing the call keyword arguments (line 118)
    kwargs_208092 = {}
    # Getting the type of 'mcolors' (line 118)
    mcolors_208090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 18), 'mcolors', False)
    # Obtaining the member 'get_named_colors_mapping' of a type (line 118)
    get_named_colors_mapping_208091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 118, 18), mcolors_208090, 'get_named_colors_mapping')
    # Calling get_named_colors_mapping(args, kwargs) (line 118)
    get_named_colors_mapping_call_result_208093 = invoke(stypy.reporting.localization.Localization(__file__, 118, 18), get_named_colors_mapping_208091, *[], **kwargs_208092)
    
    # Applying the binary operator 'in' (line 118)
    result_contains_208094 = python_operator(stypy.reporting.localization.Localization(__file__, 118, 13), 'in', c_208089, get_named_colors_mapping_call_result_208093)
    
    # Testing the type of an if condition (line 118)
    if_condition_208095 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 118, 13), result_contains_208094)
    # Assigning a type to the variable 'if_condition_208095' (line 118)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 118, 13), 'if_condition_208095', if_condition_208095)
    # SSA begins for if statement (line 118)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 119)
    # Getting the type of 'color' (line 119)
    color_208096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 12), 'color')
    # Getting the type of 'None' (line 119)
    None_208097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 28), 'None')
    
    (may_be_208098, more_types_in_union_208099) = may_not_be_none(color_208096, None_208097)

    if may_be_208098:

        if more_types_in_union_208099:
            # Runtime conditional SSA (line 119)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to ValueError(...): (line 120)
        # Processing the call arguments (line 120)
        unicode_208101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 20), 'unicode', u'Illegal format string "%s"; two color symbols')
        # Getting the type of 'fmt' (line 121)
        fmt_208102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 70), 'fmt', False)
        # Applying the binary operator '%' (line 121)
        result_mod_208103 = python_operator(stypy.reporting.localization.Localization(__file__, 121, 20), '%', unicode_208101, fmt_208102)
        
        # Processing the call keyword arguments (line 120)
        kwargs_208104 = {}
        # Getting the type of 'ValueError' (line 120)
        ValueError_208100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 120)
        ValueError_call_result_208105 = invoke(stypy.reporting.localization.Localization(__file__, 120, 22), ValueError_208100, *[result_mod_208103], **kwargs_208104)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 120, 16), ValueError_call_result_208105, 'raise parameter', BaseException)

        if more_types_in_union_208099:
            # SSA join for if statement (line 119)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 122):
    
    # Assigning a Name to a Name (line 122):
    # Getting the type of 'c' (line 122)
    c_208106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 20), 'c')
    # Assigning a type to the variable 'color' (line 122)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 12), 'color', c_208106)
    # SSA branch for the else part of an if statement (line 118)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'c' (line 123)
    c_208107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 13), 'c')
    unicode_208108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 18), 'unicode', u'C')
    # Applying the binary operator '==' (line 123)
    result_eq_208109 = python_operator(stypy.reporting.localization.Localization(__file__, 123, 13), '==', c_208107, unicode_208108)
    
    
    # Getting the type of 'i' (line 123)
    i_208110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 26), 'i')
    
    # Call to len(...): (line 123)
    # Processing the call arguments (line 123)
    # Getting the type of 'chars' (line 123)
    chars_208112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 34), 'chars', False)
    # Processing the call keyword arguments (line 123)
    kwargs_208113 = {}
    # Getting the type of 'len' (line 123)
    len_208111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 30), 'len', False)
    # Calling len(args, kwargs) (line 123)
    len_call_result_208114 = invoke(stypy.reporting.localization.Localization(__file__, 123, 30), len_208111, *[chars_208112], **kwargs_208113)
    
    int_208115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 43), 'int')
    # Applying the binary operator '-' (line 123)
    result_sub_208116 = python_operator(stypy.reporting.localization.Localization(__file__, 123, 30), '-', len_call_result_208114, int_208115)
    
    # Applying the binary operator '<' (line 123)
    result_lt_208117 = python_operator(stypy.reporting.localization.Localization(__file__, 123, 26), '<', i_208110, result_sub_208116)
    
    # Applying the binary operator 'and' (line 123)
    result_and_keyword_208118 = python_operator(stypy.reporting.localization.Localization(__file__, 123, 13), 'and', result_eq_208109, result_lt_208117)
    
    # Testing the type of an if condition (line 123)
    if_condition_208119 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 123, 13), result_and_keyword_208118)
    # Assigning a type to the variable 'if_condition_208119' (line 123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 123, 13), 'if_condition_208119', if_condition_208119)
    # SSA begins for if statement (line 123)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 124):
    
    # Assigning a Call to a Name (line 124):
    
    # Call to int(...): (line 124)
    # Processing the call arguments (line 124)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 124)
    i_208121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 43), 'i', False)
    int_208122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 47), 'int')
    # Applying the binary operator '+' (line 124)
    result_add_208123 = python_operator(stypy.reporting.localization.Localization(__file__, 124, 43), '+', i_208121, int_208122)
    
    # Getting the type of 'chars' (line 124)
    chars_208124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 37), 'chars', False)
    # Obtaining the member '__getitem__' of a type (line 124)
    getitem___208125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 124, 37), chars_208124, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 124)
    subscript_call_result_208126 = invoke(stypy.reporting.localization.Localization(__file__, 124, 37), getitem___208125, result_add_208123)
    
    # Processing the call keyword arguments (line 124)
    kwargs_208127 = {}
    # Getting the type of 'int' (line 124)
    int_208120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 33), 'int', False)
    # Calling int(args, kwargs) (line 124)
    int_call_result_208128 = invoke(stypy.reporting.localization.Localization(__file__, 124, 33), int_208120, *[subscript_call_result_208126], **kwargs_208127)
    
    # Assigning a type to the variable 'color_cycle_number' (line 124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 12), 'color_cycle_number', int_call_result_208128)
    
    # Assigning a Call to a Name (line 125):
    
    # Assigning a Call to a Name (line 125):
    
    # Call to to_rgba(...): (line 125)
    # Processing the call arguments (line 125)
    
    # Call to format(...): (line 125)
    # Processing the call arguments (line 125)
    # Getting the type of 'color_cycle_number' (line 125)
    color_cycle_number_208133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 49), 'color_cycle_number', False)
    # Processing the call keyword arguments (line 125)
    kwargs_208134 = {}
    unicode_208131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 36), 'unicode', u'C{}')
    # Obtaining the member 'format' of a type (line 125)
    format_208132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 125, 36), unicode_208131, 'format')
    # Calling format(args, kwargs) (line 125)
    format_call_result_208135 = invoke(stypy.reporting.localization.Localization(__file__, 125, 36), format_208132, *[color_cycle_number_208133], **kwargs_208134)
    
    # Processing the call keyword arguments (line 125)
    kwargs_208136 = {}
    # Getting the type of 'mcolors' (line 125)
    mcolors_208129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 20), 'mcolors', False)
    # Obtaining the member 'to_rgba' of a type (line 125)
    to_rgba_208130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 125, 20), mcolors_208129, 'to_rgba')
    # Calling to_rgba(args, kwargs) (line 125)
    to_rgba_call_result_208137 = invoke(stypy.reporting.localization.Localization(__file__, 125, 20), to_rgba_208130, *[format_call_result_208135], **kwargs_208136)
    
    # Assigning a type to the variable 'color' (line 125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 12), 'color', to_rgba_call_result_208137)
    
    # Getting the type of 'i' (line 126)
    i_208138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 12), 'i')
    int_208139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 17), 'int')
    # Applying the binary operator '+=' (line 126)
    result_iadd_208140 = python_operator(stypy.reporting.localization.Localization(__file__, 126, 12), '+=', i_208138, int_208139)
    # Assigning a type to the variable 'i' (line 126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 12), 'i', result_iadd_208140)
    
    # SSA branch for the else part of an if statement (line 123)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 128)
    # Processing the call arguments (line 128)
    unicode_208142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 16), 'unicode', u'Unrecognized character %c in format string')
    # Getting the type of 'c' (line 129)
    c_208143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 63), 'c', False)
    # Applying the binary operator '%' (line 129)
    result_mod_208144 = python_operator(stypy.reporting.localization.Localization(__file__, 129, 16), '%', unicode_208142, c_208143)
    
    # Processing the call keyword arguments (line 128)
    kwargs_208145 = {}
    # Getting the type of 'ValueError' (line 128)
    ValueError_208141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 128)
    ValueError_call_result_208146 = invoke(stypy.reporting.localization.Localization(__file__, 128, 18), ValueError_208141, *[result_mod_208144], **kwargs_208145)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 128, 12), ValueError_call_result_208146, 'raise parameter', BaseException)
    # SSA join for if statement (line 123)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 118)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 113)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 108)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'i' (line 130)
    i_208147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 8), 'i')
    int_208148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, 13), 'int')
    # Applying the binary operator '+=' (line 130)
    result_iadd_208149 = python_operator(stypy.reporting.localization.Localization(__file__, 130, 8), '+=', i_208147, int_208148)
    # Assigning a type to the variable 'i' (line 130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 8), 'i', result_iadd_208149)
    
    # SSA join for while statement (line 106)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'linestyle' (line 132)
    linestyle_208150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 7), 'linestyle')
    # Getting the type of 'None' (line 132)
    None_208151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 20), 'None')
    # Applying the binary operator 'is' (line 132)
    result_is__208152 = python_operator(stypy.reporting.localization.Localization(__file__, 132, 7), 'is', linestyle_208150, None_208151)
    
    
    # Getting the type of 'marker' (line 132)
    marker_208153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 29), 'marker')
    # Getting the type of 'None' (line 132)
    None_208154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 39), 'None')
    # Applying the binary operator 'is' (line 132)
    result_is__208155 = python_operator(stypy.reporting.localization.Localization(__file__, 132, 29), 'is', marker_208153, None_208154)
    
    # Applying the binary operator 'and' (line 132)
    result_and_keyword_208156 = python_operator(stypy.reporting.localization.Localization(__file__, 132, 7), 'and', result_is__208152, result_is__208155)
    
    # Testing the type of an if condition (line 132)
    if_condition_208157 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 132, 4), result_and_keyword_208156)
    # Assigning a type to the variable 'if_condition_208157' (line 132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 4), 'if_condition_208157', if_condition_208157)
    # SSA begins for if statement (line 132)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 133):
    
    # Assigning a Subscript to a Name (line 133):
    
    # Obtaining the type of the subscript
    unicode_208158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 133, 29), 'unicode', u'lines.linestyle')
    # Getting the type of 'rcParams' (line 133)
    rcParams_208159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 20), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 133)
    getitem___208160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 20), rcParams_208159, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 133)
    subscript_call_result_208161 = invoke(stypy.reporting.localization.Localization(__file__, 133, 20), getitem___208160, unicode_208158)
    
    # Assigning a type to the variable 'linestyle' (line 133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 8), 'linestyle', subscript_call_result_208161)
    # SSA join for if statement (line 132)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 134)
    # Getting the type of 'linestyle' (line 134)
    linestyle_208162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 7), 'linestyle')
    # Getting the type of 'None' (line 134)
    None_208163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 20), 'None')
    
    (may_be_208164, more_types_in_union_208165) = may_be_none(linestyle_208162, None_208163)

    if may_be_208164:

        if more_types_in_union_208165:
            # Runtime conditional SSA (line 134)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Str to a Name (line 135):
        
        # Assigning a Str to a Name (line 135):
        unicode_208166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 135, 20), 'unicode', u'None')
        # Assigning a type to the variable 'linestyle' (line 135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 135, 8), 'linestyle', unicode_208166)

        if more_types_in_union_208165:
            # SSA join for if statement (line 134)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 136)
    # Getting the type of 'marker' (line 136)
    marker_208167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 7), 'marker')
    # Getting the type of 'None' (line 136)
    None_208168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 17), 'None')
    
    (may_be_208169, more_types_in_union_208170) = may_be_none(marker_208167, None_208168)

    if may_be_208169:

        if more_types_in_union_208170:
            # Runtime conditional SSA (line 136)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Str to a Name (line 137):
        
        # Assigning a Str to a Name (line 137):
        unicode_208171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 137, 17), 'unicode', u'None')
        # Assigning a type to the variable 'marker' (line 137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 8), 'marker', unicode_208171)

        if more_types_in_union_208170:
            # SSA join for if statement (line 136)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining an instance of the builtin type 'tuple' (line 139)
    tuple_208172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 139)
    # Adding element type (line 139)
    # Getting the type of 'linestyle' (line 139)
    linestyle_208173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 11), 'linestyle')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_208172, linestyle_208173)
    # Adding element type (line 139)
    # Getting the type of 'marker' (line 139)
    marker_208174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 22), 'marker')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_208172, marker_208174)
    # Adding element type (line 139)
    # Getting the type of 'color' (line 139)
    color_208175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 30), 'color')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 139, 11), tuple_208172, color_208175)
    
    # Assigning a type to the variable 'stypy_return_type' (line 139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 4), 'stypy_return_type', tuple_208172)
    
    # ################# End of '_process_plot_format(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_process_plot_format' in the type store
    # Getting the type of 'stypy_return_type' (line 50)
    stypy_return_type_208176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_208176)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_process_plot_format'
    return stypy_return_type_208176

# Assigning a type to the variable '_process_plot_format' (line 50)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 0), '_process_plot_format', _process_plot_format)
# Declaration of the '_process_plot_var_args' class

class _process_plot_var_args(object, ):
    unicode_208177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 153, (-1)), 'unicode', u"\n    Process variable length arguments to the plot command, so that\n    plot commands like the following are supported::\n\n      plot(t, s)\n      plot(t1, s1, t2, s2)\n      plot(t1, s1, 'ko', t2, s2)\n      plot(t1, s1, 'ko', t2, s2, 'r--', t3, e3)\n\n    an arbitrary number of *x*, *y*, *fmt* are allowed\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_208178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 37), 'unicode', u'plot')
        defaults = [unicode_208178]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 154, 4, False)
        # Assigning a type to the variable 'self' (line 155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_process_plot_var_args.__init__', ['axes', 'command'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['axes', 'command'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 155):
        
        # Assigning a Name to a Attribute (line 155):
        # Getting the type of 'axes' (line 155)
        axes_208179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 20), 'axes')
        # Getting the type of 'self' (line 155)
        self_208180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 8), 'self')
        # Setting the type of the member 'axes' of a type (line 155)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 8), self_208180, 'axes', axes_208179)
        
        # Assigning a Name to a Attribute (line 156):
        
        # Assigning a Name to a Attribute (line 156):
        # Getting the type of 'command' (line 156)
        command_208181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 23), 'command')
        # Getting the type of 'self' (line 156)
        self_208182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 8), 'self')
        # Setting the type of the member 'command' of a type (line 156)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 8), self_208182, 'command', command_208181)
        
        # Call to set_prop_cycle(...): (line 157)
        # Processing the call keyword arguments (line 157)
        kwargs_208185 = {}
        # Getting the type of 'self' (line 157)
        self_208183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 8), 'self', False)
        # Obtaining the member 'set_prop_cycle' of a type (line 157)
        set_prop_cycle_208184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 8), self_208183, 'set_prop_cycle')
        # Calling set_prop_cycle(args, kwargs) (line 157)
        set_prop_cycle_call_result_208186 = invoke(stypy.reporting.localization.Localization(__file__, 157, 8), set_prop_cycle_208184, *[], **kwargs_208185)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __getstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getstate__'
        module_type_store = module_type_store.open_function_context('__getstate__', 159, 4, False)
        # Assigning a type to the variable 'self' (line 160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _process_plot_var_args.__getstate__.__dict__.__setitem__('stypy_localization', localization)
        _process_plot_var_args.__getstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _process_plot_var_args.__getstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _process_plot_var_args.__getstate__.__dict__.__setitem__('stypy_function_name', '_process_plot_var_args.__getstate__')
        _process_plot_var_args.__getstate__.__dict__.__setitem__('stypy_param_names_list', [])
        _process_plot_var_args.__getstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _process_plot_var_args.__getstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _process_plot_var_args.__getstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _process_plot_var_args.__getstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _process_plot_var_args.__getstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _process_plot_var_args.__getstate__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_process_plot_var_args.__getstate__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getstate__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getstate__(...)' code ##################

        
        # Obtaining an instance of the builtin type 'dict' (line 161)
        dict_208187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 161)
        # Adding element type (key, value) (line 161)
        unicode_208188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 16), 'unicode', u'axes')
        # Getting the type of 'self' (line 161)
        self_208189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 24), 'self')
        # Obtaining the member 'axes' of a type (line 161)
        axes_208190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 24), self_208189, 'axes')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 161, 15), dict_208187, (unicode_208188, axes_208190))
        # Adding element type (key, value) (line 161)
        unicode_208191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 35), 'unicode', u'command')
        # Getting the type of 'self' (line 161)
        self_208192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 46), 'self')
        # Obtaining the member 'command' of a type (line 161)
        command_208193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 46), self_208192, 'command')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 161, 15), dict_208187, (unicode_208191, command_208193))
        
        # Assigning a type to the variable 'stypy_return_type' (line 161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'stypy_return_type', dict_208187)
        
        # ################# End of '__getstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 159)
        stypy_return_type_208194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_208194)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getstate__'
        return stypy_return_type_208194


    @norecursion
    def __setstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setstate__'
        module_type_store = module_type_store.open_function_context('__setstate__', 163, 4, False)
        # Assigning a type to the variable 'self' (line 164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _process_plot_var_args.__setstate__.__dict__.__setitem__('stypy_localization', localization)
        _process_plot_var_args.__setstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _process_plot_var_args.__setstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _process_plot_var_args.__setstate__.__dict__.__setitem__('stypy_function_name', '_process_plot_var_args.__setstate__')
        _process_plot_var_args.__setstate__.__dict__.__setitem__('stypy_param_names_list', ['state'])
        _process_plot_var_args.__setstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _process_plot_var_args.__setstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _process_plot_var_args.__setstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _process_plot_var_args.__setstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _process_plot_var_args.__setstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _process_plot_var_args.__setstate__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_process_plot_var_args.__setstate__', ['state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setstate__', localization, ['state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setstate__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 164):
        
        # Assigning a Call to a Attribute (line 164):
        
        # Call to copy(...): (line 164)
        # Processing the call keyword arguments (line 164)
        kwargs_208197 = {}
        # Getting the type of 'state' (line 164)
        state_208195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 24), 'state', False)
        # Obtaining the member 'copy' of a type (line 164)
        copy_208196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 24), state_208195, 'copy')
        # Calling copy(args, kwargs) (line 164)
        copy_call_result_208198 = invoke(stypy.reporting.localization.Localization(__file__, 164, 24), copy_208196, *[], **kwargs_208197)
        
        # Getting the type of 'self' (line 164)
        self_208199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 8), 'self')
        # Setting the type of the member '__dict__' of a type (line 164)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 8), self_208199, '__dict__', copy_call_result_208198)
        
        # Call to set_prop_cycle(...): (line 165)
        # Processing the call keyword arguments (line 165)
        kwargs_208202 = {}
        # Getting the type of 'self' (line 165)
        self_208200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 8), 'self', False)
        # Obtaining the member 'set_prop_cycle' of a type (line 165)
        set_prop_cycle_208201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 8), self_208200, 'set_prop_cycle')
        # Calling set_prop_cycle(args, kwargs) (line 165)
        set_prop_cycle_call_result_208203 = invoke(stypy.reporting.localization.Localization(__file__, 165, 8), set_prop_cycle_208201, *[], **kwargs_208202)
        
        
        # ################# End of '__setstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 163)
        stypy_return_type_208204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_208204)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setstate__'
        return stypy_return_type_208204


    @norecursion
    def set_prop_cycle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_prop_cycle'
        module_type_store = module_type_store.open_function_context('set_prop_cycle', 167, 4, False)
        # Assigning a type to the variable 'self' (line 168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _process_plot_var_args.set_prop_cycle.__dict__.__setitem__('stypy_localization', localization)
        _process_plot_var_args.set_prop_cycle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _process_plot_var_args.set_prop_cycle.__dict__.__setitem__('stypy_type_store', module_type_store)
        _process_plot_var_args.set_prop_cycle.__dict__.__setitem__('stypy_function_name', '_process_plot_var_args.set_prop_cycle')
        _process_plot_var_args.set_prop_cycle.__dict__.__setitem__('stypy_param_names_list', [])
        _process_plot_var_args.set_prop_cycle.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _process_plot_var_args.set_prop_cycle.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _process_plot_var_args.set_prop_cycle.__dict__.__setitem__('stypy_call_defaults', defaults)
        _process_plot_var_args.set_prop_cycle.__dict__.__setitem__('stypy_call_varargs', varargs)
        _process_plot_var_args.set_prop_cycle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _process_plot_var_args.set_prop_cycle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_process_plot_var_args.set_prop_cycle', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_prop_cycle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_prop_cycle(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        
        # Evaluating a boolean operation
        # Getting the type of 'args' (line 168)
        args_208205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 16), 'args')
        # Getting the type of 'kwargs' (line 168)
        kwargs_208206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 24), 'kwargs')
        # Applying the binary operator 'or' (line 168)
        result_or_keyword_208207 = python_operator(stypy.reporting.localization.Localization(__file__, 168, 16), 'or', args_208205, kwargs_208206)
        
        # Applying the 'not' unary operator (line 168)
        result_not__208208 = python_operator(stypy.reporting.localization.Localization(__file__, 168, 11), 'not', result_or_keyword_208207)
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 168)
        # Processing the call arguments (line 168)
        # Getting the type of 'args' (line 168)
        args_208210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 40), 'args', False)
        # Processing the call keyword arguments (line 168)
        kwargs_208211 = {}
        # Getting the type of 'len' (line 168)
        len_208209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 36), 'len', False)
        # Calling len(args, kwargs) (line 168)
        len_call_result_208212 = invoke(stypy.reporting.localization.Localization(__file__, 168, 36), len_208209, *[args_208210], **kwargs_208211)
        
        int_208213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 168, 49), 'int')
        # Applying the binary operator '==' (line 168)
        result_eq_208214 = python_operator(stypy.reporting.localization.Localization(__file__, 168, 36), '==', len_call_result_208212, int_208213)
        
        
        
        # Obtaining the type of the subscript
        int_208215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 168, 60), 'int')
        # Getting the type of 'args' (line 168)
        args_208216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 55), 'args')
        # Obtaining the member '__getitem__' of a type (line 168)
        getitem___208217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 55), args_208216, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 168)
        subscript_call_result_208218 = invoke(stypy.reporting.localization.Localization(__file__, 168, 55), getitem___208217, int_208215)
        
        # Getting the type of 'None' (line 168)
        None_208219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 66), 'None')
        # Applying the binary operator 'is' (line 168)
        result_is__208220 = python_operator(stypy.reporting.localization.Localization(__file__, 168, 55), 'is', subscript_call_result_208218, None_208219)
        
        # Applying the binary operator 'and' (line 168)
        result_and_keyword_208221 = python_operator(stypy.reporting.localization.Localization(__file__, 168, 36), 'and', result_eq_208214, result_is__208220)
        
        # Applying the binary operator 'or' (line 168)
        result_or_keyword_208222 = python_operator(stypy.reporting.localization.Localization(__file__, 168, 11), 'or', result_not__208208, result_and_keyword_208221)
        
        # Testing the type of an if condition (line 168)
        if_condition_208223 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 168, 8), result_or_keyword_208222)
        # Assigning a type to the variable 'if_condition_208223' (line 168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 8), 'if_condition_208223', if_condition_208223)
        # SSA begins for if statement (line 168)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 169):
        
        # Assigning a Subscript to a Name (line 169):
        
        # Obtaining the type of the subscript
        unicode_208224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 35), 'unicode', u'axes.prop_cycle')
        # Getting the type of 'rcParams' (line 169)
        rcParams_208225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 26), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 169)
        getitem___208226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 26), rcParams_208225, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 169)
        subscript_call_result_208227 = invoke(stypy.reporting.localization.Localization(__file__, 169, 26), getitem___208226, unicode_208224)
        
        # Assigning a type to the variable 'prop_cycler' (line 169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 12), 'prop_cycler', subscript_call_result_208227)
        # SSA branch for the else part of an if statement (line 168)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 171):
        
        # Assigning a Call to a Name (line 171):
        
        # Call to cycler(...): (line 171)
        # Getting the type of 'args' (line 171)
        args_208229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 34), 'args', False)
        # Processing the call keyword arguments (line 171)
        # Getting the type of 'kwargs' (line 171)
        kwargs_208230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 42), 'kwargs', False)
        kwargs_208231 = {'kwargs_208230': kwargs_208230}
        # Getting the type of 'cycler' (line 171)
        cycler_208228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 26), 'cycler', False)
        # Calling cycler(args, kwargs) (line 171)
        cycler_call_result_208232 = invoke(stypy.reporting.localization.Localization(__file__, 171, 26), cycler_208228, *[args_208229], **kwargs_208231)
        
        # Assigning a type to the variable 'prop_cycler' (line 171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 12), 'prop_cycler', cycler_call_result_208232)
        # SSA join for if statement (line 168)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 173):
        
        # Assigning a Call to a Attribute (line 173):
        
        # Call to cycle(...): (line 173)
        # Processing the call arguments (line 173)
        # Getting the type of 'prop_cycler' (line 173)
        prop_cycler_208235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 43), 'prop_cycler', False)
        # Processing the call keyword arguments (line 173)
        kwargs_208236 = {}
        # Getting the type of 'itertools' (line 173)
        itertools_208233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 27), 'itertools', False)
        # Obtaining the member 'cycle' of a type (line 173)
        cycle_208234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 27), itertools_208233, 'cycle')
        # Calling cycle(args, kwargs) (line 173)
        cycle_call_result_208237 = invoke(stypy.reporting.localization.Localization(__file__, 173, 27), cycle_208234, *[prop_cycler_208235], **kwargs_208236)
        
        # Getting the type of 'self' (line 173)
        self_208238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 8), 'self')
        # Setting the type of the member 'prop_cycler' of a type (line 173)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 8), self_208238, 'prop_cycler', cycle_call_result_208237)
        
        # Assigning a Attribute to a Attribute (line 175):
        
        # Assigning a Attribute to a Attribute (line 175):
        # Getting the type of 'prop_cycler' (line 175)
        prop_cycler_208239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 26), 'prop_cycler')
        # Obtaining the member 'keys' of a type (line 175)
        keys_208240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 26), prop_cycler_208239, 'keys')
        # Getting the type of 'self' (line 175)
        self_208241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 8), 'self')
        # Setting the type of the member '_prop_keys' of a type (line 175)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 8), self_208241, '_prop_keys', keys_208240)
        
        # ################# End of 'set_prop_cycle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_prop_cycle' in the type store
        # Getting the type of 'stypy_return_type' (line 167)
        stypy_return_type_208242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_208242)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_prop_cycle'
        return stypy_return_type_208242


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 177, 4, False)
        # Assigning a type to the variable 'self' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _process_plot_var_args.__call__.__dict__.__setitem__('stypy_localization', localization)
        _process_plot_var_args.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _process_plot_var_args.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _process_plot_var_args.__call__.__dict__.__setitem__('stypy_function_name', '_process_plot_var_args.__call__')
        _process_plot_var_args.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        _process_plot_var_args.__call__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _process_plot_var_args.__call__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _process_plot_var_args.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _process_plot_var_args.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _process_plot_var_args.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _process_plot_var_args.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_process_plot_var_args.__call__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 178)
        self_208243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 11), 'self')
        # Obtaining the member 'axes' of a type (line 178)
        axes_208244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 11), self_208243, 'axes')
        # Obtaining the member 'xaxis' of a type (line 178)
        xaxis_208245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 11), axes_208244, 'xaxis')
        # Getting the type of 'None' (line 178)
        None_208246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 34), 'None')
        # Applying the binary operator 'isnot' (line 178)
        result_is_not_208247 = python_operator(stypy.reporting.localization.Localization(__file__, 178, 11), 'isnot', xaxis_208245, None_208246)
        
        
        # Getting the type of 'self' (line 178)
        self_208248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 43), 'self')
        # Obtaining the member 'axes' of a type (line 178)
        axes_208249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 43), self_208248, 'axes')
        # Obtaining the member 'yaxis' of a type (line 178)
        yaxis_208250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 43), axes_208249, 'yaxis')
        # Getting the type of 'None' (line 178)
        None_208251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 66), 'None')
        # Applying the binary operator 'isnot' (line 178)
        result_is_not_208252 = python_operator(stypy.reporting.localization.Localization(__file__, 178, 43), 'isnot', yaxis_208250, None_208251)
        
        # Applying the binary operator 'and' (line 178)
        result_and_keyword_208253 = python_operator(stypy.reporting.localization.Localization(__file__, 178, 11), 'and', result_is_not_208247, result_is_not_208252)
        
        # Testing the type of an if condition (line 178)
        if_condition_208254 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 178, 8), result_and_keyword_208253)
        # Assigning a type to the variable 'if_condition_208254' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 8), 'if_condition_208254', if_condition_208254)
        # SSA begins for if statement (line 178)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 179):
        
        # Assigning a Call to a Name (line 179):
        
        # Call to pop(...): (line 179)
        # Processing the call arguments (line 179)
        unicode_208257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 179, 32), 'unicode', u'xunits')
        # Getting the type of 'self' (line 179)
        self_208258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 42), 'self', False)
        # Obtaining the member 'axes' of a type (line 179)
        axes_208259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 42), self_208258, 'axes')
        # Obtaining the member 'xaxis' of a type (line 179)
        xaxis_208260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 42), axes_208259, 'xaxis')
        # Obtaining the member 'units' of a type (line 179)
        units_208261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 42), xaxis_208260, 'units')
        # Processing the call keyword arguments (line 179)
        kwargs_208262 = {}
        # Getting the type of 'kwargs' (line 179)
        kwargs_208255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 21), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 179)
        pop_208256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 21), kwargs_208255, 'pop')
        # Calling pop(args, kwargs) (line 179)
        pop_call_result_208263 = invoke(stypy.reporting.localization.Localization(__file__, 179, 21), pop_208256, *[unicode_208257, units_208261], **kwargs_208262)
        
        # Assigning a type to the variable 'xunits' (line 179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 179, 12), 'xunits', pop_call_result_208263)
        
        
        # Getting the type of 'self' (line 181)
        self_208264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 15), 'self')
        # Obtaining the member 'axes' of a type (line 181)
        axes_208265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 15), self_208264, 'axes')
        # Obtaining the member 'name' of a type (line 181)
        name_208266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 15), axes_208265, 'name')
        unicode_208267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, 33), 'unicode', u'polar')
        # Applying the binary operator '==' (line 181)
        result_eq_208268 = python_operator(stypy.reporting.localization.Localization(__file__, 181, 15), '==', name_208266, unicode_208267)
        
        # Testing the type of an if condition (line 181)
        if_condition_208269 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 181, 12), result_eq_208268)
        # Assigning a type to the variable 'if_condition_208269' (line 181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 12), 'if_condition_208269', if_condition_208269)
        # SSA begins for if statement (line 181)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 182):
        
        # Assigning a Call to a Name (line 182):
        
        # Call to pop(...): (line 182)
        # Processing the call arguments (line 182)
        unicode_208272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 182, 36), 'unicode', u'thetaunits')
        # Getting the type of 'xunits' (line 182)
        xunits_208273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 50), 'xunits', False)
        # Processing the call keyword arguments (line 182)
        kwargs_208274 = {}
        # Getting the type of 'kwargs' (line 182)
        kwargs_208270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 25), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 182)
        pop_208271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 182, 25), kwargs_208270, 'pop')
        # Calling pop(args, kwargs) (line 182)
        pop_call_result_208275 = invoke(stypy.reporting.localization.Localization(__file__, 182, 25), pop_208271, *[unicode_208272, xunits_208273], **kwargs_208274)
        
        # Assigning a type to the variable 'xunits' (line 182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 182, 16), 'xunits', pop_call_result_208275)
        # SSA join for if statement (line 181)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 184):
        
        # Assigning a Call to a Name (line 184):
        
        # Call to pop(...): (line 184)
        # Processing the call arguments (line 184)
        unicode_208278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 32), 'unicode', u'yunits')
        # Getting the type of 'self' (line 184)
        self_208279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 42), 'self', False)
        # Obtaining the member 'axes' of a type (line 184)
        axes_208280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 42), self_208279, 'axes')
        # Obtaining the member 'yaxis' of a type (line 184)
        yaxis_208281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 42), axes_208280, 'yaxis')
        # Obtaining the member 'units' of a type (line 184)
        units_208282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 42), yaxis_208281, 'units')
        # Processing the call keyword arguments (line 184)
        kwargs_208283 = {}
        # Getting the type of 'kwargs' (line 184)
        kwargs_208276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 21), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 184)
        pop_208277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 21), kwargs_208276, 'pop')
        # Calling pop(args, kwargs) (line 184)
        pop_call_result_208284 = invoke(stypy.reporting.localization.Localization(__file__, 184, 21), pop_208277, *[unicode_208278, units_208282], **kwargs_208283)
        
        # Assigning a type to the variable 'yunits' (line 184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 12), 'yunits', pop_call_result_208284)
        
        
        # Getting the type of 'self' (line 186)
        self_208285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 15), 'self')
        # Obtaining the member 'axes' of a type (line 186)
        axes_208286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 15), self_208285, 'axes')
        # Obtaining the member 'name' of a type (line 186)
        name_208287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 15), axes_208286, 'name')
        unicode_208288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 33), 'unicode', u'polar')
        # Applying the binary operator '==' (line 186)
        result_eq_208289 = python_operator(stypy.reporting.localization.Localization(__file__, 186, 15), '==', name_208287, unicode_208288)
        
        # Testing the type of an if condition (line 186)
        if_condition_208290 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 186, 12), result_eq_208289)
        # Assigning a type to the variable 'if_condition_208290' (line 186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 12), 'if_condition_208290', if_condition_208290)
        # SSA begins for if statement (line 186)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 187):
        
        # Assigning a Call to a Name (line 187):
        
        # Call to pop(...): (line 187)
        # Processing the call arguments (line 187)
        unicode_208293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 187, 36), 'unicode', u'runits')
        # Getting the type of 'yunits' (line 187)
        yunits_208294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 46), 'yunits', False)
        # Processing the call keyword arguments (line 187)
        kwargs_208295 = {}
        # Getting the type of 'kwargs' (line 187)
        kwargs_208291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 25), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 187)
        pop_208292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 25), kwargs_208291, 'pop')
        # Calling pop(args, kwargs) (line 187)
        pop_call_result_208296 = invoke(stypy.reporting.localization.Localization(__file__, 187, 25), pop_208292, *[unicode_208293, yunits_208294], **kwargs_208295)
        
        # Assigning a type to the variable 'yunits' (line 187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 16), 'yunits', pop_call_result_208296)
        # SSA join for if statement (line 186)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'xunits' (line 189)
        xunits_208297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 15), 'xunits')
        # Getting the type of 'self' (line 189)
        self_208298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 25), 'self')
        # Obtaining the member 'axes' of a type (line 189)
        axes_208299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 25), self_208298, 'axes')
        # Obtaining the member 'xaxis' of a type (line 189)
        xaxis_208300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 25), axes_208299, 'xaxis')
        # Obtaining the member 'units' of a type (line 189)
        units_208301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 25), xaxis_208300, 'units')
        # Applying the binary operator '!=' (line 189)
        result_ne_208302 = python_operator(stypy.reporting.localization.Localization(__file__, 189, 15), '!=', xunits_208297, units_208301)
        
        # Testing the type of an if condition (line 189)
        if_condition_208303 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 189, 12), result_ne_208302)
        # Assigning a type to the variable 'if_condition_208303' (line 189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 12), 'if_condition_208303', if_condition_208303)
        # SSA begins for if statement (line 189)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_units(...): (line 190)
        # Processing the call arguments (line 190)
        # Getting the type of 'xunits' (line 190)
        xunits_208308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 42), 'xunits', False)
        # Processing the call keyword arguments (line 190)
        kwargs_208309 = {}
        # Getting the type of 'self' (line 190)
        self_208304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 16), 'self', False)
        # Obtaining the member 'axes' of a type (line 190)
        axes_208305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 16), self_208304, 'axes')
        # Obtaining the member 'xaxis' of a type (line 190)
        xaxis_208306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 16), axes_208305, 'xaxis')
        # Obtaining the member 'set_units' of a type (line 190)
        set_units_208307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 16), xaxis_208306, 'set_units')
        # Calling set_units(args, kwargs) (line 190)
        set_units_call_result_208310 = invoke(stypy.reporting.localization.Localization(__file__, 190, 16), set_units_208307, *[xunits_208308], **kwargs_208309)
        
        # SSA join for if statement (line 189)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'yunits' (line 192)
        yunits_208311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 15), 'yunits')
        # Getting the type of 'self' (line 192)
        self_208312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 25), 'self')
        # Obtaining the member 'axes' of a type (line 192)
        axes_208313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 25), self_208312, 'axes')
        # Obtaining the member 'yaxis' of a type (line 192)
        yaxis_208314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 25), axes_208313, 'yaxis')
        # Obtaining the member 'units' of a type (line 192)
        units_208315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 25), yaxis_208314, 'units')
        # Applying the binary operator '!=' (line 192)
        result_ne_208316 = python_operator(stypy.reporting.localization.Localization(__file__, 192, 15), '!=', yunits_208311, units_208315)
        
        # Testing the type of an if condition (line 192)
        if_condition_208317 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 192, 12), result_ne_208316)
        # Assigning a type to the variable 'if_condition_208317' (line 192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 12), 'if_condition_208317', if_condition_208317)
        # SSA begins for if statement (line 192)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_units(...): (line 193)
        # Processing the call arguments (line 193)
        # Getting the type of 'yunits' (line 193)
        yunits_208322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 42), 'yunits', False)
        # Processing the call keyword arguments (line 193)
        kwargs_208323 = {}
        # Getting the type of 'self' (line 193)
        self_208318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 16), 'self', False)
        # Obtaining the member 'axes' of a type (line 193)
        axes_208319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 16), self_208318, 'axes')
        # Obtaining the member 'yaxis' of a type (line 193)
        yaxis_208320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 16), axes_208319, 'yaxis')
        # Obtaining the member 'set_units' of a type (line 193)
        set_units_208321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 16), yaxis_208320, 'set_units')
        # Calling set_units(args, kwargs) (line 193)
        set_units_call_result_208324 = invoke(stypy.reporting.localization.Localization(__file__, 193, 16), set_units_208321, *[yunits_208322], **kwargs_208323)
        
        # SSA join for if statement (line 192)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 178)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 195):
        
        # Assigning a Call to a Name (line 195):
        
        # Call to _grab_next_args(...): (line 195)
        # Getting the type of 'args' (line 195)
        args_208327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 36), 'args', False)
        # Processing the call keyword arguments (line 195)
        # Getting the type of 'kwargs' (line 195)
        kwargs_208328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 44), 'kwargs', False)
        kwargs_208329 = {'kwargs_208328': kwargs_208328}
        # Getting the type of 'self' (line 195)
        self_208325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 14), 'self', False)
        # Obtaining the member '_grab_next_args' of a type (line 195)
        _grab_next_args_208326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 14), self_208325, '_grab_next_args')
        # Calling _grab_next_args(args, kwargs) (line 195)
        _grab_next_args_call_result_208330 = invoke(stypy.reporting.localization.Localization(__file__, 195, 14), _grab_next_args_208326, *[args_208327], **kwargs_208329)
        
        # Assigning a type to the variable 'ret' (line 195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 8), 'ret', _grab_next_args_call_result_208330)
        # Getting the type of 'ret' (line 196)
        ret_208331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 15), 'ret')
        # Assigning a type to the variable 'stypy_return_type' (line 196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 196, 8), 'stypy_return_type', ret_208331)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 177)
        stypy_return_type_208332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_208332)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_208332


    @norecursion
    def get_next_color(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_next_color'
        module_type_store = module_type_store.open_function_context('get_next_color', 198, 4, False)
        # Assigning a type to the variable 'self' (line 199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _process_plot_var_args.get_next_color.__dict__.__setitem__('stypy_localization', localization)
        _process_plot_var_args.get_next_color.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _process_plot_var_args.get_next_color.__dict__.__setitem__('stypy_type_store', module_type_store)
        _process_plot_var_args.get_next_color.__dict__.__setitem__('stypy_function_name', '_process_plot_var_args.get_next_color')
        _process_plot_var_args.get_next_color.__dict__.__setitem__('stypy_param_names_list', [])
        _process_plot_var_args.get_next_color.__dict__.__setitem__('stypy_varargs_param_name', None)
        _process_plot_var_args.get_next_color.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _process_plot_var_args.get_next_color.__dict__.__setitem__('stypy_call_defaults', defaults)
        _process_plot_var_args.get_next_color.__dict__.__setitem__('stypy_call_varargs', varargs)
        _process_plot_var_args.get_next_color.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _process_plot_var_args.get_next_color.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_process_plot_var_args.get_next_color', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_next_color', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_next_color(...)' code ##################

        unicode_208333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, (-1)), 'unicode', u'\n        Return the next color in the cycle.\n        ')
        
        
        unicode_208334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 11), 'unicode', u'color')
        # Getting the type of 'self' (line 202)
        self_208335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 26), 'self')
        # Obtaining the member '_prop_keys' of a type (line 202)
        _prop_keys_208336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 26), self_208335, '_prop_keys')
        # Applying the binary operator 'notin' (line 202)
        result_contains_208337 = python_operator(stypy.reporting.localization.Localization(__file__, 202, 11), 'notin', unicode_208334, _prop_keys_208336)
        
        # Testing the type of an if condition (line 202)
        if_condition_208338 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 202, 8), result_contains_208337)
        # Assigning a type to the variable 'if_condition_208338' (line 202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 8), 'if_condition_208338', if_condition_208338)
        # SSA begins for if statement (line 202)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_208339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 19), 'unicode', u'k')
        # Assigning a type to the variable 'stypy_return_type' (line 203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 203, 12), 'stypy_return_type', unicode_208339)
        # SSA join for if statement (line 202)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining the type of the subscript
        unicode_208340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 42), 'unicode', u'color')
        
        # Call to next(...): (line 204)
        # Processing the call arguments (line 204)
        # Getting the type of 'self' (line 204)
        self_208343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 24), 'self', False)
        # Obtaining the member 'prop_cycler' of a type (line 204)
        prop_cycler_208344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 24), self_208343, 'prop_cycler')
        # Processing the call keyword arguments (line 204)
        kwargs_208345 = {}
        # Getting the type of 'six' (line 204)
        six_208341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 15), 'six', False)
        # Obtaining the member 'next' of a type (line 204)
        next_208342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 15), six_208341, 'next')
        # Calling next(args, kwargs) (line 204)
        next_call_result_208346 = invoke(stypy.reporting.localization.Localization(__file__, 204, 15), next_208342, *[prop_cycler_208344], **kwargs_208345)
        
        # Obtaining the member '__getitem__' of a type (line 204)
        getitem___208347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 15), next_call_result_208346, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 204)
        subscript_call_result_208348 = invoke(stypy.reporting.localization.Localization(__file__, 204, 15), getitem___208347, unicode_208340)
        
        # Assigning a type to the variable 'stypy_return_type' (line 204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 8), 'stypy_return_type', subscript_call_result_208348)
        
        # ################# End of 'get_next_color(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_next_color' in the type store
        # Getting the type of 'stypy_return_type' (line 198)
        stypy_return_type_208349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_208349)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_next_color'
        return stypy_return_type_208349


    @norecursion
    def set_lineprops(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_lineprops'
        module_type_store = module_type_store.open_function_context('set_lineprops', 206, 4, False)
        # Assigning a type to the variable 'self' (line 207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _process_plot_var_args.set_lineprops.__dict__.__setitem__('stypy_localization', localization)
        _process_plot_var_args.set_lineprops.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _process_plot_var_args.set_lineprops.__dict__.__setitem__('stypy_type_store', module_type_store)
        _process_plot_var_args.set_lineprops.__dict__.__setitem__('stypy_function_name', '_process_plot_var_args.set_lineprops')
        _process_plot_var_args.set_lineprops.__dict__.__setitem__('stypy_param_names_list', ['line'])
        _process_plot_var_args.set_lineprops.__dict__.__setitem__('stypy_varargs_param_name', None)
        _process_plot_var_args.set_lineprops.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _process_plot_var_args.set_lineprops.__dict__.__setitem__('stypy_call_defaults', defaults)
        _process_plot_var_args.set_lineprops.__dict__.__setitem__('stypy_call_varargs', varargs)
        _process_plot_var_args.set_lineprops.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _process_plot_var_args.set_lineprops.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_process_plot_var_args.set_lineprops', ['line'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_lineprops', localization, ['line'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_lineprops(...)' code ##################

        # Evaluating assert statement condition
        
        # Getting the type of 'self' (line 207)
        self_208350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 15), 'self')
        # Obtaining the member 'command' of a type (line 207)
        command_208351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 15), self_208350, 'command')
        unicode_208352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 31), 'unicode', u'plot')
        # Applying the binary operator '==' (line 207)
        result_eq_208353 = python_operator(stypy.reporting.localization.Localization(__file__, 207, 15), '==', command_208351, unicode_208352)
        
        
        # Call to set(...): (line 208)
        # Processing the call keyword arguments (line 208)
        # Getting the type of 'kwargs' (line 208)
        kwargs_208356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 19), 'kwargs', False)
        kwargs_208357 = {'kwargs_208356': kwargs_208356}
        # Getting the type of 'line' (line 208)
        line_208354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 8), 'line', False)
        # Obtaining the member 'set' of a type (line 208)
        set_208355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 8), line_208354, 'set')
        # Calling set(args, kwargs) (line 208)
        set_call_result_208358 = invoke(stypy.reporting.localization.Localization(__file__, 208, 8), set_208355, *[], **kwargs_208357)
        
        
        # ################# End of 'set_lineprops(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_lineprops' in the type store
        # Getting the type of 'stypy_return_type' (line 206)
        stypy_return_type_208359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_208359)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_lineprops'
        return stypy_return_type_208359


    @norecursion
    def set_patchprops(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_patchprops'
        module_type_store = module_type_store.open_function_context('set_patchprops', 210, 4, False)
        # Assigning a type to the variable 'self' (line 211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _process_plot_var_args.set_patchprops.__dict__.__setitem__('stypy_localization', localization)
        _process_plot_var_args.set_patchprops.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _process_plot_var_args.set_patchprops.__dict__.__setitem__('stypy_type_store', module_type_store)
        _process_plot_var_args.set_patchprops.__dict__.__setitem__('stypy_function_name', '_process_plot_var_args.set_patchprops')
        _process_plot_var_args.set_patchprops.__dict__.__setitem__('stypy_param_names_list', ['fill_poly'])
        _process_plot_var_args.set_patchprops.__dict__.__setitem__('stypy_varargs_param_name', None)
        _process_plot_var_args.set_patchprops.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _process_plot_var_args.set_patchprops.__dict__.__setitem__('stypy_call_defaults', defaults)
        _process_plot_var_args.set_patchprops.__dict__.__setitem__('stypy_call_varargs', varargs)
        _process_plot_var_args.set_patchprops.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _process_plot_var_args.set_patchprops.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_process_plot_var_args.set_patchprops', ['fill_poly'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_patchprops', localization, ['fill_poly'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_patchprops(...)' code ##################

        # Evaluating assert statement condition
        
        # Getting the type of 'self' (line 211)
        self_208360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 15), 'self')
        # Obtaining the member 'command' of a type (line 211)
        command_208361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 15), self_208360, 'command')
        unicode_208362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 31), 'unicode', u'fill')
        # Applying the binary operator '==' (line 211)
        result_eq_208363 = python_operator(stypy.reporting.localization.Localization(__file__, 211, 15), '==', command_208361, unicode_208362)
        
        
        # Call to set(...): (line 212)
        # Processing the call keyword arguments (line 212)
        # Getting the type of 'kwargs' (line 212)
        kwargs_208366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 24), 'kwargs', False)
        kwargs_208367 = {'kwargs_208366': kwargs_208366}
        # Getting the type of 'fill_poly' (line 212)
        fill_poly_208364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 8), 'fill_poly', False)
        # Obtaining the member 'set' of a type (line 212)
        set_208365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 8), fill_poly_208364, 'set')
        # Calling set(args, kwargs) (line 212)
        set_call_result_208368 = invoke(stypy.reporting.localization.Localization(__file__, 212, 8), set_208365, *[], **kwargs_208367)
        
        
        # ################# End of 'set_patchprops(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_patchprops' in the type store
        # Getting the type of 'stypy_return_type' (line 210)
        stypy_return_type_208369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_208369)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_patchprops'
        return stypy_return_type_208369


    @norecursion
    def _xy_from_xy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_xy_from_xy'
        module_type_store = module_type_store.open_function_context('_xy_from_xy', 214, 4, False)
        # Assigning a type to the variable 'self' (line 215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _process_plot_var_args._xy_from_xy.__dict__.__setitem__('stypy_localization', localization)
        _process_plot_var_args._xy_from_xy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _process_plot_var_args._xy_from_xy.__dict__.__setitem__('stypy_type_store', module_type_store)
        _process_plot_var_args._xy_from_xy.__dict__.__setitem__('stypy_function_name', '_process_plot_var_args._xy_from_xy')
        _process_plot_var_args._xy_from_xy.__dict__.__setitem__('stypy_param_names_list', ['x', 'y'])
        _process_plot_var_args._xy_from_xy.__dict__.__setitem__('stypy_varargs_param_name', None)
        _process_plot_var_args._xy_from_xy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _process_plot_var_args._xy_from_xy.__dict__.__setitem__('stypy_call_defaults', defaults)
        _process_plot_var_args._xy_from_xy.__dict__.__setitem__('stypy_call_varargs', varargs)
        _process_plot_var_args._xy_from_xy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _process_plot_var_args._xy_from_xy.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_process_plot_var_args._xy_from_xy', ['x', 'y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_xy_from_xy', localization, ['x', 'y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_xy_from_xy(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 215)
        self_208370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 11), 'self')
        # Obtaining the member 'axes' of a type (line 215)
        axes_208371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 11), self_208370, 'axes')
        # Obtaining the member 'xaxis' of a type (line 215)
        xaxis_208372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 11), axes_208371, 'xaxis')
        # Getting the type of 'None' (line 215)
        None_208373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 34), 'None')
        # Applying the binary operator 'isnot' (line 215)
        result_is_not_208374 = python_operator(stypy.reporting.localization.Localization(__file__, 215, 11), 'isnot', xaxis_208372, None_208373)
        
        
        # Getting the type of 'self' (line 215)
        self_208375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 43), 'self')
        # Obtaining the member 'axes' of a type (line 215)
        axes_208376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 43), self_208375, 'axes')
        # Obtaining the member 'yaxis' of a type (line 215)
        yaxis_208377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 43), axes_208376, 'yaxis')
        # Getting the type of 'None' (line 215)
        None_208378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 66), 'None')
        # Applying the binary operator 'isnot' (line 215)
        result_is_not_208379 = python_operator(stypy.reporting.localization.Localization(__file__, 215, 43), 'isnot', yaxis_208377, None_208378)
        
        # Applying the binary operator 'and' (line 215)
        result_and_keyword_208380 = python_operator(stypy.reporting.localization.Localization(__file__, 215, 11), 'and', result_is_not_208374, result_is_not_208379)
        
        # Testing the type of an if condition (line 215)
        if_condition_208381 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 215, 8), result_and_keyword_208380)
        # Assigning a type to the variable 'if_condition_208381' (line 215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 8), 'if_condition_208381', if_condition_208381)
        # SSA begins for if statement (line 215)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 216):
        
        # Assigning a Call to a Name (line 216):
        
        # Call to update_units(...): (line 216)
        # Processing the call arguments (line 216)
        # Getting the type of 'x' (line 216)
        x_208386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 46), 'x', False)
        # Processing the call keyword arguments (line 216)
        kwargs_208387 = {}
        # Getting the type of 'self' (line 216)
        self_208382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 17), 'self', False)
        # Obtaining the member 'axes' of a type (line 216)
        axes_208383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 17), self_208382, 'axes')
        # Obtaining the member 'xaxis' of a type (line 216)
        xaxis_208384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 17), axes_208383, 'xaxis')
        # Obtaining the member 'update_units' of a type (line 216)
        update_units_208385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 17), xaxis_208384, 'update_units')
        # Calling update_units(args, kwargs) (line 216)
        update_units_call_result_208388 = invoke(stypy.reporting.localization.Localization(__file__, 216, 17), update_units_208385, *[x_208386], **kwargs_208387)
        
        # Assigning a type to the variable 'bx' (line 216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 12), 'bx', update_units_call_result_208388)
        
        # Assigning a Call to a Name (line 217):
        
        # Assigning a Call to a Name (line 217):
        
        # Call to update_units(...): (line 217)
        # Processing the call arguments (line 217)
        # Getting the type of 'y' (line 217)
        y_208393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 46), 'y', False)
        # Processing the call keyword arguments (line 217)
        kwargs_208394 = {}
        # Getting the type of 'self' (line 217)
        self_208389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 17), 'self', False)
        # Obtaining the member 'axes' of a type (line 217)
        axes_208390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 17), self_208389, 'axes')
        # Obtaining the member 'yaxis' of a type (line 217)
        yaxis_208391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 17), axes_208390, 'yaxis')
        # Obtaining the member 'update_units' of a type (line 217)
        update_units_208392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 17), yaxis_208391, 'update_units')
        # Calling update_units(args, kwargs) (line 217)
        update_units_call_result_208395 = invoke(stypy.reporting.localization.Localization(__file__, 217, 17), update_units_208392, *[y_208393], **kwargs_208394)
        
        # Assigning a type to the variable 'by' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 12), 'by', update_units_call_result_208395)
        
        
        # Getting the type of 'self' (line 219)
        self_208396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 15), 'self')
        # Obtaining the member 'command' of a type (line 219)
        command_208397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 15), self_208396, 'command')
        unicode_208398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 31), 'unicode', u'plot')
        # Applying the binary operator '!=' (line 219)
        result_ne_208399 = python_operator(stypy.reporting.localization.Localization(__file__, 219, 15), '!=', command_208397, unicode_208398)
        
        # Testing the type of an if condition (line 219)
        if_condition_208400 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 219, 12), result_ne_208399)
        # Assigning a type to the variable 'if_condition_208400' (line 219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 12), 'if_condition_208400', if_condition_208400)
        # SSA begins for if statement (line 219)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'bx' (line 232)
        bx_208401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 19), 'bx')
        # Testing the type of an if condition (line 232)
        if_condition_208402 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 232, 16), bx_208401)
        # Assigning a type to the variable 'if_condition_208402' (line 232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 16), 'if_condition_208402', if_condition_208402)
        # SSA begins for if statement (line 232)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 233):
        
        # Assigning a Call to a Name (line 233):
        
        # Call to convert_xunits(...): (line 233)
        # Processing the call arguments (line 233)
        # Getting the type of 'x' (line 233)
        x_208406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 49), 'x', False)
        # Processing the call keyword arguments (line 233)
        kwargs_208407 = {}
        # Getting the type of 'self' (line 233)
        self_208403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 24), 'self', False)
        # Obtaining the member 'axes' of a type (line 233)
        axes_208404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 24), self_208403, 'axes')
        # Obtaining the member 'convert_xunits' of a type (line 233)
        convert_xunits_208405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 24), axes_208404, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 233)
        convert_xunits_call_result_208408 = invoke(stypy.reporting.localization.Localization(__file__, 233, 24), convert_xunits_208405, *[x_208406], **kwargs_208407)
        
        # Assigning a type to the variable 'x' (line 233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 20), 'x', convert_xunits_call_result_208408)
        # SSA join for if statement (line 232)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'by' (line 234)
        by_208409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 19), 'by')
        # Testing the type of an if condition (line 234)
        if_condition_208410 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 234, 16), by_208409)
        # Assigning a type to the variable 'if_condition_208410' (line 234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 16), 'if_condition_208410', if_condition_208410)
        # SSA begins for if statement (line 234)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 235):
        
        # Assigning a Call to a Name (line 235):
        
        # Call to convert_yunits(...): (line 235)
        # Processing the call arguments (line 235)
        # Getting the type of 'y' (line 235)
        y_208414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 49), 'y', False)
        # Processing the call keyword arguments (line 235)
        kwargs_208415 = {}
        # Getting the type of 'self' (line 235)
        self_208411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 24), 'self', False)
        # Obtaining the member 'axes' of a type (line 235)
        axes_208412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 24), self_208411, 'axes')
        # Obtaining the member 'convert_yunits' of a type (line 235)
        convert_yunits_208413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 24), axes_208412, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 235)
        convert_yunits_call_result_208416 = invoke(stypy.reporting.localization.Localization(__file__, 235, 24), convert_yunits_208413, *[y_208414], **kwargs_208415)
        
        # Assigning a type to the variable 'y' (line 235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 235, 20), 'y', convert_yunits_call_result_208416)
        # SSA join for if statement (line 234)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 219)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 215)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 239):
        
        # Assigning a Call to a Name (line 239):
        
        # Call to _check_1d(...): (line 239)
        # Processing the call arguments (line 239)
        # Getting the type of 'x' (line 239)
        x_208418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 22), 'x', False)
        # Processing the call keyword arguments (line 239)
        kwargs_208419 = {}
        # Getting the type of '_check_1d' (line 239)
        _check_1d_208417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 12), '_check_1d', False)
        # Calling _check_1d(args, kwargs) (line 239)
        _check_1d_call_result_208420 = invoke(stypy.reporting.localization.Localization(__file__, 239, 12), _check_1d_208417, *[x_208418], **kwargs_208419)
        
        # Assigning a type to the variable 'x' (line 239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 239, 8), 'x', _check_1d_call_result_208420)
        
        # Assigning a Call to a Name (line 240):
        
        # Assigning a Call to a Name (line 240):
        
        # Call to _check_1d(...): (line 240)
        # Processing the call arguments (line 240)
        # Getting the type of 'y' (line 240)
        y_208422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 22), 'y', False)
        # Processing the call keyword arguments (line 240)
        kwargs_208423 = {}
        # Getting the type of '_check_1d' (line 240)
        _check_1d_208421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 12), '_check_1d', False)
        # Calling _check_1d(args, kwargs) (line 240)
        _check_1d_call_result_208424 = invoke(stypy.reporting.localization.Localization(__file__, 240, 12), _check_1d_208421, *[y_208422], **kwargs_208423)
        
        # Assigning a type to the variable 'y' (line 240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'y', _check_1d_call_result_208424)
        
        
        
        # Obtaining the type of the subscript
        int_208425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, 19), 'int')
        # Getting the type of 'x' (line 241)
        x_208426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 11), 'x')
        # Obtaining the member 'shape' of a type (line 241)
        shape_208427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 11), x_208426, 'shape')
        # Obtaining the member '__getitem__' of a type (line 241)
        getitem___208428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 11), shape_208427, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 241)
        subscript_call_result_208429 = invoke(stypy.reporting.localization.Localization(__file__, 241, 11), getitem___208428, int_208425)
        
        
        # Obtaining the type of the subscript
        int_208430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, 33), 'int')
        # Getting the type of 'y' (line 241)
        y_208431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 25), 'y')
        # Obtaining the member 'shape' of a type (line 241)
        shape_208432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 25), y_208431, 'shape')
        # Obtaining the member '__getitem__' of a type (line 241)
        getitem___208433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 25), shape_208432, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 241)
        subscript_call_result_208434 = invoke(stypy.reporting.localization.Localization(__file__, 241, 25), getitem___208433, int_208430)
        
        # Applying the binary operator '!=' (line 241)
        result_ne_208435 = python_operator(stypy.reporting.localization.Localization(__file__, 241, 11), '!=', subscript_call_result_208429, subscript_call_result_208434)
        
        # Testing the type of an if condition (line 241)
        if_condition_208436 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 241, 8), result_ne_208435)
        # Assigning a type to the variable 'if_condition_208436' (line 241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 8), 'if_condition_208436', if_condition_208436)
        # SSA begins for if statement (line 241)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 242)
        # Processing the call arguments (line 242)
        
        # Call to format(...): (line 242)
        # Processing the call arguments (line 242)
        # Getting the type of 'x' (line 243)
        x_208440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 60), 'x', False)
        # Obtaining the member 'shape' of a type (line 243)
        shape_208441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 60), x_208440, 'shape')
        # Getting the type of 'y' (line 243)
        y_208442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 69), 'y', False)
        # Obtaining the member 'shape' of a type (line 243)
        shape_208443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 69), y_208442, 'shape')
        # Processing the call keyword arguments (line 242)
        kwargs_208444 = {}
        unicode_208438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 242, 29), 'unicode', u'x and y must have same first dimension, but have shapes {} and {}')
        # Obtaining the member 'format' of a type (line 242)
        format_208439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 29), unicode_208438, 'format')
        # Calling format(args, kwargs) (line 242)
        format_call_result_208445 = invoke(stypy.reporting.localization.Localization(__file__, 242, 29), format_208439, *[shape_208441, shape_208443], **kwargs_208444)
        
        # Processing the call keyword arguments (line 242)
        kwargs_208446 = {}
        # Getting the type of 'ValueError' (line 242)
        ValueError_208437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 242)
        ValueError_call_result_208447 = invoke(stypy.reporting.localization.Localization(__file__, 242, 18), ValueError_208437, *[format_call_result_208445], **kwargs_208446)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 242, 12), ValueError_call_result_208447, 'raise parameter', BaseException)
        # SSA join for if statement (line 241)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x' (line 244)
        x_208448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 11), 'x')
        # Obtaining the member 'ndim' of a type (line 244)
        ndim_208449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 11), x_208448, 'ndim')
        int_208450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 20), 'int')
        # Applying the binary operator '>' (line 244)
        result_gt_208451 = python_operator(stypy.reporting.localization.Localization(__file__, 244, 11), '>', ndim_208449, int_208450)
        
        
        # Getting the type of 'y' (line 244)
        y_208452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 25), 'y')
        # Obtaining the member 'ndim' of a type (line 244)
        ndim_208453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 25), y_208452, 'ndim')
        int_208454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 34), 'int')
        # Applying the binary operator '>' (line 244)
        result_gt_208455 = python_operator(stypy.reporting.localization.Localization(__file__, 244, 25), '>', ndim_208453, int_208454)
        
        # Applying the binary operator 'or' (line 244)
        result_or_keyword_208456 = python_operator(stypy.reporting.localization.Localization(__file__, 244, 11), 'or', result_gt_208451, result_gt_208455)
        
        # Testing the type of an if condition (line 244)
        if_condition_208457 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 244, 8), result_or_keyword_208456)
        # Assigning a type to the variable 'if_condition_208457' (line 244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 8), 'if_condition_208457', if_condition_208457)
        # SSA begins for if statement (line 244)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 245)
        # Processing the call arguments (line 245)
        
        # Call to format(...): (line 245)
        # Processing the call arguments (line 245)
        # Getting the type of 'x' (line 246)
        x_208461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 55), 'x', False)
        # Obtaining the member 'shape' of a type (line 246)
        shape_208462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 55), x_208461, 'shape')
        # Getting the type of 'y' (line 246)
        y_208463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 64), 'y', False)
        # Obtaining the member 'shape' of a type (line 246)
        shape_208464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 64), y_208463, 'shape')
        # Processing the call keyword arguments (line 245)
        kwargs_208465 = {}
        unicode_208459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 245, 29), 'unicode', u'x and y can be no greater than 2-D, but have shapes {} and {}')
        # Obtaining the member 'format' of a type (line 245)
        format_208460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 29), unicode_208459, 'format')
        # Calling format(args, kwargs) (line 245)
        format_call_result_208466 = invoke(stypy.reporting.localization.Localization(__file__, 245, 29), format_208460, *[shape_208462, shape_208464], **kwargs_208465)
        
        # Processing the call keyword arguments (line 245)
        kwargs_208467 = {}
        # Getting the type of 'ValueError' (line 245)
        ValueError_208458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 245)
        ValueError_call_result_208468 = invoke(stypy.reporting.localization.Localization(__file__, 245, 18), ValueError_208458, *[format_call_result_208466], **kwargs_208467)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 245, 12), ValueError_call_result_208468, 'raise parameter', BaseException)
        # SSA join for if statement (line 244)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'x' (line 248)
        x_208469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 11), 'x')
        # Obtaining the member 'ndim' of a type (line 248)
        ndim_208470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 11), x_208469, 'ndim')
        int_208471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 21), 'int')
        # Applying the binary operator '==' (line 248)
        result_eq_208472 = python_operator(stypy.reporting.localization.Localization(__file__, 248, 11), '==', ndim_208470, int_208471)
        
        # Testing the type of an if condition (line 248)
        if_condition_208473 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 248, 8), result_eq_208472)
        # Assigning a type to the variable 'if_condition_208473' (line 248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 8), 'if_condition_208473', if_condition_208473)
        # SSA begins for if statement (line 248)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 249):
        
        # Assigning a Subscript to a Name (line 249):
        
        # Obtaining the type of the subscript
        slice_208474 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 249, 16), None, None, None)
        # Getting the type of 'np' (line 249)
        np_208475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 21), 'np')
        # Obtaining the member 'newaxis' of a type (line 249)
        newaxis_208476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 249, 21), np_208475, 'newaxis')
        # Getting the type of 'x' (line 249)
        x_208477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 16), 'x')
        # Obtaining the member '__getitem__' of a type (line 249)
        getitem___208478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 249, 16), x_208477, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 249)
        subscript_call_result_208479 = invoke(stypy.reporting.localization.Localization(__file__, 249, 16), getitem___208478, (slice_208474, newaxis_208476))
        
        # Assigning a type to the variable 'x' (line 249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 12), 'x', subscript_call_result_208479)
        # SSA join for if statement (line 248)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'y' (line 250)
        y_208480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 11), 'y')
        # Obtaining the member 'ndim' of a type (line 250)
        ndim_208481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 250, 11), y_208480, 'ndim')
        int_208482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 250, 21), 'int')
        # Applying the binary operator '==' (line 250)
        result_eq_208483 = python_operator(stypy.reporting.localization.Localization(__file__, 250, 11), '==', ndim_208481, int_208482)
        
        # Testing the type of an if condition (line 250)
        if_condition_208484 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 250, 8), result_eq_208483)
        # Assigning a type to the variable 'if_condition_208484' (line 250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 250, 8), 'if_condition_208484', if_condition_208484)
        # SSA begins for if statement (line 250)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 251):
        
        # Assigning a Subscript to a Name (line 251):
        
        # Obtaining the type of the subscript
        slice_208485 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 251, 16), None, None, None)
        # Getting the type of 'np' (line 251)
        np_208486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 21), 'np')
        # Obtaining the member 'newaxis' of a type (line 251)
        newaxis_208487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 21), np_208486, 'newaxis')
        # Getting the type of 'y' (line 251)
        y_208488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 16), 'y')
        # Obtaining the member '__getitem__' of a type (line 251)
        getitem___208489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 16), y_208488, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 251)
        subscript_call_result_208490 = invoke(stypy.reporting.localization.Localization(__file__, 251, 16), getitem___208489, (slice_208485, newaxis_208487))
        
        # Assigning a type to the variable 'y' (line 251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 12), 'y', subscript_call_result_208490)
        # SSA join for if statement (line 250)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 252)
        tuple_208491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 252)
        # Adding element type (line 252)
        # Getting the type of 'x' (line 252)
        x_208492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 15), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 252, 15), tuple_208491, x_208492)
        # Adding element type (line 252)
        # Getting the type of 'y' (line 252)
        y_208493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 18), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 252, 15), tuple_208491, y_208493)
        
        # Assigning a type to the variable 'stypy_return_type' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 8), 'stypy_return_type', tuple_208491)
        
        # ################# End of '_xy_from_xy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_xy_from_xy' in the type store
        # Getting the type of 'stypy_return_type' (line 214)
        stypy_return_type_208494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_208494)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_xy_from_xy'
        return stypy_return_type_208494


    @norecursion
    def _getdefaults(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_getdefaults'
        module_type_store = module_type_store.open_function_context('_getdefaults', 254, 4, False)
        # Assigning a type to the variable 'self' (line 255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _process_plot_var_args._getdefaults.__dict__.__setitem__('stypy_localization', localization)
        _process_plot_var_args._getdefaults.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _process_plot_var_args._getdefaults.__dict__.__setitem__('stypy_type_store', module_type_store)
        _process_plot_var_args._getdefaults.__dict__.__setitem__('stypy_function_name', '_process_plot_var_args._getdefaults')
        _process_plot_var_args._getdefaults.__dict__.__setitem__('stypy_param_names_list', ['ignore'])
        _process_plot_var_args._getdefaults.__dict__.__setitem__('stypy_varargs_param_name', 'kwargs')
        _process_plot_var_args._getdefaults.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _process_plot_var_args._getdefaults.__dict__.__setitem__('stypy_call_defaults', defaults)
        _process_plot_var_args._getdefaults.__dict__.__setitem__('stypy_call_varargs', varargs)
        _process_plot_var_args._getdefaults.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _process_plot_var_args._getdefaults.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_process_plot_var_args._getdefaults', ['ignore'], 'kwargs', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_getdefaults', localization, ['ignore'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_getdefaults(...)' code ##################

        unicode_208495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, (-1)), 'unicode', u'\n        Only advance the cycler if the cycler has information that\n        is not specified in any of the supplied tuple of dicts.\n        Ignore any keys specified in the `ignore` set.\n\n        Returns a copy of defaults dictionary if there are any\n        keys that are not found in any of the supplied dictionaries.\n        If the supplied dictionaries have non-None values for\n        everything the property cycler has, then just return\n        an empty dictionary. Ignored keys are excluded from the\n        returned dictionary.\n\n        ')
        
        # Assigning a Attribute to a Name (line 268):
        
        # Assigning a Attribute to a Name (line 268):
        # Getting the type of 'self' (line 268)
        self_208496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 20), 'self')
        # Obtaining the member '_prop_keys' of a type (line 268)
        _prop_keys_208497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 20), self_208496, '_prop_keys')
        # Assigning a type to the variable 'prop_keys' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'prop_keys', _prop_keys_208497)
        
        # Type idiom detected: calculating its left and rigth part (line 269)
        # Getting the type of 'ignore' (line 269)
        ignore_208498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 11), 'ignore')
        # Getting the type of 'None' (line 269)
        None_208499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 21), 'None')
        
        (may_be_208500, more_types_in_union_208501) = may_be_none(ignore_208498, None_208499)

        if may_be_208500:

            if more_types_in_union_208501:
                # Runtime conditional SSA (line 269)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 270):
            
            # Assigning a Call to a Name (line 270):
            
            # Call to set(...): (line 270)
            # Processing the call keyword arguments (line 270)
            kwargs_208503 = {}
            # Getting the type of 'set' (line 270)
            set_208502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 21), 'set', False)
            # Calling set(args, kwargs) (line 270)
            set_call_result_208504 = invoke(stypy.reporting.localization.Localization(__file__, 270, 21), set_208502, *[], **kwargs_208503)
            
            # Assigning a type to the variable 'ignore' (line 270)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 12), 'ignore', set_call_result_208504)

            if more_types_in_union_208501:
                # SSA join for if statement (line 269)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a BinOp to a Name (line 271):
        
        # Assigning a BinOp to a Name (line 271):
        # Getting the type of 'prop_keys' (line 271)
        prop_keys_208505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 20), 'prop_keys')
        # Getting the type of 'ignore' (line 271)
        ignore_208506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 32), 'ignore')
        # Applying the binary operator '-' (line 271)
        result_sub_208507 = python_operator(stypy.reporting.localization.Localization(__file__, 271, 20), '-', prop_keys_208505, ignore_208506)
        
        # Assigning a type to the variable 'prop_keys' (line 271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 8), 'prop_keys', result_sub_208507)
        
        
        # Call to any(...): (line 273)
        # Processing the call arguments (line 273)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 273, 15, True)
        # Calculating comprehension expression
        # Getting the type of 'prop_keys' (line 274)
        prop_keys_208523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 24), 'prop_keys', False)
        comprehension_208524 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 273, 15), prop_keys_208523)
        # Assigning a type to the variable 'k' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 15), 'k', comprehension_208524)
        
        # Call to all(...): (line 273)
        # Processing the call arguments (line 273)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 273, 19, True)
        # Calculating comprehension expression
        # Getting the type of 'kwargs' (line 273)
        kwargs_208518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 53), 'kwargs', False)
        comprehension_208519 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 273, 19), kwargs_208518)
        # Assigning a type to the variable 'kw' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 19), 'kw', comprehension_208519)
        
        
        # Call to get(...): (line 273)
        # Processing the call arguments (line 273)
        # Getting the type of 'k' (line 273)
        k_208512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 26), 'k', False)
        # Getting the type of 'None' (line 273)
        None_208513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 29), 'None', False)
        # Processing the call keyword arguments (line 273)
        kwargs_208514 = {}
        # Getting the type of 'kw' (line 273)
        kw_208510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 19), 'kw', False)
        # Obtaining the member 'get' of a type (line 273)
        get_208511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 19), kw_208510, 'get')
        # Calling get(args, kwargs) (line 273)
        get_call_result_208515 = invoke(stypy.reporting.localization.Localization(__file__, 273, 19), get_208511, *[k_208512, None_208513], **kwargs_208514)
        
        # Getting the type of 'None' (line 273)
        None_208516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 38), 'None', False)
        # Applying the binary operator 'is' (line 273)
        result_is__208517 = python_operator(stypy.reporting.localization.Localization(__file__, 273, 19), 'is', get_call_result_208515, None_208516)
        
        list_208520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 19), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 273, 19), list_208520, result_is__208517)
        # Processing the call keyword arguments (line 273)
        kwargs_208521 = {}
        # Getting the type of 'all' (line 273)
        all_208509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 15), 'all', False)
        # Calling all(args, kwargs) (line 273)
        all_call_result_208522 = invoke(stypy.reporting.localization.Localization(__file__, 273, 15), all_208509, *[list_208520], **kwargs_208521)
        
        list_208525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 15), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 273, 15), list_208525, all_call_result_208522)
        # Processing the call keyword arguments (line 273)
        kwargs_208526 = {}
        # Getting the type of 'any' (line 273)
        any_208508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 11), 'any', False)
        # Calling any(args, kwargs) (line 273)
        any_call_result_208527 = invoke(stypy.reporting.localization.Localization(__file__, 273, 11), any_208508, *[list_208525], **kwargs_208526)
        
        # Testing the type of an if condition (line 273)
        if_condition_208528 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 273, 8), any_call_result_208527)
        # Assigning a type to the variable 'if_condition_208528' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'if_condition_208528', if_condition_208528)
        # SSA begins for if statement (line 273)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 277):
        
        # Assigning a Call to a Name (line 277):
        
        # Call to copy(...): (line 277)
        # Processing the call keyword arguments (line 277)
        kwargs_208536 = {}
        
        # Call to next(...): (line 277)
        # Processing the call arguments (line 277)
        # Getting the type of 'self' (line 277)
        self_208531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 36), 'self', False)
        # Obtaining the member 'prop_cycler' of a type (line 277)
        prop_cycler_208532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 36), self_208531, 'prop_cycler')
        # Processing the call keyword arguments (line 277)
        kwargs_208533 = {}
        # Getting the type of 'six' (line 277)
        six_208529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 27), 'six', False)
        # Obtaining the member 'next' of a type (line 277)
        next_208530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 27), six_208529, 'next')
        # Calling next(args, kwargs) (line 277)
        next_call_result_208534 = invoke(stypy.reporting.localization.Localization(__file__, 277, 27), next_208530, *[prop_cycler_208532], **kwargs_208533)
        
        # Obtaining the member 'copy' of a type (line 277)
        copy_208535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 27), next_call_result_208534, 'copy')
        # Calling copy(args, kwargs) (line 277)
        copy_call_result_208537 = invoke(stypy.reporting.localization.Localization(__file__, 277, 27), copy_208535, *[], **kwargs_208536)
        
        # Assigning a type to the variable 'default_dict' (line 277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 12), 'default_dict', copy_call_result_208537)
        
        # Getting the type of 'ignore' (line 278)
        ignore_208538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 21), 'ignore')
        # Testing the type of a for loop iterable (line 278)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 278, 12), ignore_208538)
        # Getting the type of the for loop variable (line 278)
        for_loop_var_208539 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 278, 12), ignore_208538)
        # Assigning a type to the variable 'p' (line 278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 12), 'p', for_loop_var_208539)
        # SSA begins for a for statement (line 278)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to pop(...): (line 279)
        # Processing the call arguments (line 279)
        # Getting the type of 'p' (line 279)
        p_208542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 33), 'p', False)
        # Getting the type of 'None' (line 279)
        None_208543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 36), 'None', False)
        # Processing the call keyword arguments (line 279)
        kwargs_208544 = {}
        # Getting the type of 'default_dict' (line 279)
        default_dict_208540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 16), 'default_dict', False)
        # Obtaining the member 'pop' of a type (line 279)
        pop_208541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 16), default_dict_208540, 'pop')
        # Calling pop(args, kwargs) (line 279)
        pop_call_result_208545 = invoke(stypy.reporting.localization.Localization(__file__, 279, 16), pop_208541, *[p_208542, None_208543], **kwargs_208544)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 273)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Dict to a Name (line 281):
        
        # Assigning a Dict to a Name (line 281):
        
        # Obtaining an instance of the builtin type 'dict' (line 281)
        dict_208546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 27), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 281)
        
        # Assigning a type to the variable 'default_dict' (line 281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 281, 12), 'default_dict', dict_208546)
        # SSA join for if statement (line 273)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'default_dict' (line 282)
        default_dict_208547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 15), 'default_dict')
        # Assigning a type to the variable 'stypy_return_type' (line 282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 8), 'stypy_return_type', default_dict_208547)
        
        # ################# End of '_getdefaults(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_getdefaults' in the type store
        # Getting the type of 'stypy_return_type' (line 254)
        stypy_return_type_208548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_208548)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_getdefaults'
        return stypy_return_type_208548


    @norecursion
    def _setdefaults(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_setdefaults'
        module_type_store = module_type_store.open_function_context('_setdefaults', 284, 4, False)
        # Assigning a type to the variable 'self' (line 285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _process_plot_var_args._setdefaults.__dict__.__setitem__('stypy_localization', localization)
        _process_plot_var_args._setdefaults.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _process_plot_var_args._setdefaults.__dict__.__setitem__('stypy_type_store', module_type_store)
        _process_plot_var_args._setdefaults.__dict__.__setitem__('stypy_function_name', '_process_plot_var_args._setdefaults')
        _process_plot_var_args._setdefaults.__dict__.__setitem__('stypy_param_names_list', ['defaults'])
        _process_plot_var_args._setdefaults.__dict__.__setitem__('stypy_varargs_param_name', 'kwargs')
        _process_plot_var_args._setdefaults.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _process_plot_var_args._setdefaults.__dict__.__setitem__('stypy_call_defaults', defaults)
        _process_plot_var_args._setdefaults.__dict__.__setitem__('stypy_call_varargs', varargs)
        _process_plot_var_args._setdefaults.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _process_plot_var_args._setdefaults.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_process_plot_var_args._setdefaults', ['defaults'], 'kwargs', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_setdefaults', localization, ['defaults'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_setdefaults(...)' code ##################

        unicode_208549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, (-1)), 'unicode', u'\n        Given a defaults dictionary, and any other dictionaries,\n        update those other dictionaries with information in defaults if\n        none of the other dictionaries contains that information.\n\n        ')
        
        # Getting the type of 'defaults' (line 291)
        defaults_208550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 17), 'defaults')
        # Testing the type of a for loop iterable (line 291)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 291, 8), defaults_208550)
        # Getting the type of the for loop variable (line 291)
        for_loop_var_208551 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 291, 8), defaults_208550)
        # Assigning a type to the variable 'k' (line 291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 8), 'k', for_loop_var_208551)
        # SSA begins for a for statement (line 291)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to all(...): (line 292)
        # Processing the call arguments (line 292)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 292, 19, True)
        # Calculating comprehension expression
        # Getting the type of 'kwargs' (line 292)
        kwargs_208561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 53), 'kwargs', False)
        comprehension_208562 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 19), kwargs_208561)
        # Assigning a type to the variable 'kw' (line 292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 19), 'kw', comprehension_208562)
        
        
        # Call to get(...): (line 292)
        # Processing the call arguments (line 292)
        # Getting the type of 'k' (line 292)
        k_208555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 26), 'k', False)
        # Getting the type of 'None' (line 292)
        None_208556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 29), 'None', False)
        # Processing the call keyword arguments (line 292)
        kwargs_208557 = {}
        # Getting the type of 'kw' (line 292)
        kw_208553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 19), 'kw', False)
        # Obtaining the member 'get' of a type (line 292)
        get_208554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 19), kw_208553, 'get')
        # Calling get(args, kwargs) (line 292)
        get_call_result_208558 = invoke(stypy.reporting.localization.Localization(__file__, 292, 19), get_208554, *[k_208555, None_208556], **kwargs_208557)
        
        # Getting the type of 'None' (line 292)
        None_208559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 38), 'None', False)
        # Applying the binary operator 'is' (line 292)
        result_is__208560 = python_operator(stypy.reporting.localization.Localization(__file__, 292, 19), 'is', get_call_result_208558, None_208559)
        
        list_208563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 19), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 19), list_208563, result_is__208560)
        # Processing the call keyword arguments (line 292)
        kwargs_208564 = {}
        # Getting the type of 'all' (line 292)
        all_208552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 15), 'all', False)
        # Calling all(args, kwargs) (line 292)
        all_call_result_208565 = invoke(stypy.reporting.localization.Localization(__file__, 292, 15), all_208552, *[list_208563], **kwargs_208564)
        
        # Testing the type of an if condition (line 292)
        if_condition_208566 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 292, 12), all_call_result_208565)
        # Assigning a type to the variable 'if_condition_208566' (line 292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 12), 'if_condition_208566', if_condition_208566)
        # SSA begins for if statement (line 292)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'kwargs' (line 293)
        kwargs_208567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 26), 'kwargs')
        # Testing the type of a for loop iterable (line 293)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 293, 16), kwargs_208567)
        # Getting the type of the for loop variable (line 293)
        for_loop_var_208568 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 293, 16), kwargs_208567)
        # Assigning a type to the variable 'kw' (line 293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 293, 16), 'kw', for_loop_var_208568)
        # SSA begins for a for statement (line 293)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Subscript (line 294):
        
        # Assigning a Subscript to a Subscript (line 294):
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 294)
        k_208569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 37), 'k')
        # Getting the type of 'defaults' (line 294)
        defaults_208570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 28), 'defaults')
        # Obtaining the member '__getitem__' of a type (line 294)
        getitem___208571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 294, 28), defaults_208570, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 294)
        subscript_call_result_208572 = invoke(stypy.reporting.localization.Localization(__file__, 294, 28), getitem___208571, k_208569)
        
        # Getting the type of 'kw' (line 294)
        kw_208573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 20), 'kw')
        # Getting the type of 'k' (line 294)
        k_208574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 23), 'k')
        # Storing an element on a container (line 294)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 294, 20), kw_208573, (k_208574, subscript_call_result_208572))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 292)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_setdefaults(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_setdefaults' in the type store
        # Getting the type of 'stypy_return_type' (line 284)
        stypy_return_type_208575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_208575)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_setdefaults'
        return stypy_return_type_208575


    @norecursion
    def _makeline(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_makeline'
        module_type_store = module_type_store.open_function_context('_makeline', 296, 4, False)
        # Assigning a type to the variable 'self' (line 297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _process_plot_var_args._makeline.__dict__.__setitem__('stypy_localization', localization)
        _process_plot_var_args._makeline.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _process_plot_var_args._makeline.__dict__.__setitem__('stypy_type_store', module_type_store)
        _process_plot_var_args._makeline.__dict__.__setitem__('stypy_function_name', '_process_plot_var_args._makeline')
        _process_plot_var_args._makeline.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'kw', 'kwargs'])
        _process_plot_var_args._makeline.__dict__.__setitem__('stypy_varargs_param_name', None)
        _process_plot_var_args._makeline.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _process_plot_var_args._makeline.__dict__.__setitem__('stypy_call_defaults', defaults)
        _process_plot_var_args._makeline.__dict__.__setitem__('stypy_call_varargs', varargs)
        _process_plot_var_args._makeline.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _process_plot_var_args._makeline.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_process_plot_var_args._makeline', ['x', 'y', 'kw', 'kwargs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_makeline', localization, ['x', 'y', 'kw', 'kwargs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_makeline(...)' code ##################

        
        # Assigning a Call to a Name (line 297):
        
        # Assigning a Call to a Name (line 297):
        
        # Call to copy(...): (line 297)
        # Processing the call keyword arguments (line 297)
        kwargs_208578 = {}
        # Getting the type of 'kw' (line 297)
        kw_208576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 13), 'kw', False)
        # Obtaining the member 'copy' of a type (line 297)
        copy_208577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 13), kw_208576, 'copy')
        # Calling copy(args, kwargs) (line 297)
        copy_call_result_208579 = invoke(stypy.reporting.localization.Localization(__file__, 297, 13), copy_208577, *[], **kwargs_208578)
        
        # Assigning a type to the variable 'kw' (line 297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'kw', copy_call_result_208579)
        
        # Call to update(...): (line 298)
        # Processing the call arguments (line 298)
        # Getting the type of 'kwargs' (line 298)
        kwargs_208582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 18), 'kwargs', False)
        # Processing the call keyword arguments (line 298)
        kwargs_208583 = {}
        # Getting the type of 'kw' (line 298)
        kw_208580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 8), 'kw', False)
        # Obtaining the member 'update' of a type (line 298)
        update_208581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 8), kw_208580, 'update')
        # Calling update(args, kwargs) (line 298)
        update_call_result_208584 = invoke(stypy.reporting.localization.Localization(__file__, 298, 8), update_208581, *[kwargs_208582], **kwargs_208583)
        
        
        # Assigning a Call to a Name (line 299):
        
        # Assigning a Call to a Name (line 299):
        
        # Call to _getdefaults(...): (line 299)
        # Processing the call arguments (line 299)
        # Getting the type of 'None' (line 299)
        None_208587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 41), 'None', False)
        # Getting the type of 'kw' (line 299)
        kw_208588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 47), 'kw', False)
        # Processing the call keyword arguments (line 299)
        kwargs_208589 = {}
        # Getting the type of 'self' (line 299)
        self_208585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 23), 'self', False)
        # Obtaining the member '_getdefaults' of a type (line 299)
        _getdefaults_208586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 23), self_208585, '_getdefaults')
        # Calling _getdefaults(args, kwargs) (line 299)
        _getdefaults_call_result_208590 = invoke(stypy.reporting.localization.Localization(__file__, 299, 23), _getdefaults_208586, *[None_208587, kw_208588], **kwargs_208589)
        
        # Assigning a type to the variable 'default_dict' (line 299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 8), 'default_dict', _getdefaults_call_result_208590)
        
        # Call to _setdefaults(...): (line 300)
        # Processing the call arguments (line 300)
        # Getting the type of 'default_dict' (line 300)
        default_dict_208593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 26), 'default_dict', False)
        # Getting the type of 'kw' (line 300)
        kw_208594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 40), 'kw', False)
        # Processing the call keyword arguments (line 300)
        kwargs_208595 = {}
        # Getting the type of 'self' (line 300)
        self_208591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 8), 'self', False)
        # Obtaining the member '_setdefaults' of a type (line 300)
        _setdefaults_208592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 300, 8), self_208591, '_setdefaults')
        # Calling _setdefaults(args, kwargs) (line 300)
        _setdefaults_call_result_208596 = invoke(stypy.reporting.localization.Localization(__file__, 300, 8), _setdefaults_208592, *[default_dict_208593, kw_208594], **kwargs_208595)
        
        
        # Assigning a Call to a Name (line 301):
        
        # Assigning a Call to a Name (line 301):
        
        # Call to Line2D(...): (line 301)
        # Processing the call arguments (line 301)
        # Getting the type of 'x' (line 301)
        x_208599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 28), 'x', False)
        # Getting the type of 'y' (line 301)
        y_208600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 31), 'y', False)
        # Processing the call keyword arguments (line 301)
        # Getting the type of 'kw' (line 301)
        kw_208601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 36), 'kw', False)
        kwargs_208602 = {'kw_208601': kw_208601}
        # Getting the type of 'mlines' (line 301)
        mlines_208597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 14), 'mlines', False)
        # Obtaining the member 'Line2D' of a type (line 301)
        Line2D_208598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 14), mlines_208597, 'Line2D')
        # Calling Line2D(args, kwargs) (line 301)
        Line2D_call_result_208603 = invoke(stypy.reporting.localization.Localization(__file__, 301, 14), Line2D_208598, *[x_208599, y_208600], **kwargs_208602)
        
        # Assigning a type to the variable 'seg' (line 301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 8), 'seg', Line2D_call_result_208603)
        # Getting the type of 'seg' (line 302)
        seg_208604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 15), 'seg')
        # Assigning a type to the variable 'stypy_return_type' (line 302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 302, 8), 'stypy_return_type', seg_208604)
        
        # ################# End of '_makeline(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_makeline' in the type store
        # Getting the type of 'stypy_return_type' (line 296)
        stypy_return_type_208605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_208605)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_makeline'
        return stypy_return_type_208605


    @norecursion
    def _makefill(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_makefill'
        module_type_store = module_type_store.open_function_context('_makefill', 304, 4, False)
        # Assigning a type to the variable 'self' (line 305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _process_plot_var_args._makefill.__dict__.__setitem__('stypy_localization', localization)
        _process_plot_var_args._makefill.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _process_plot_var_args._makefill.__dict__.__setitem__('stypy_type_store', module_type_store)
        _process_plot_var_args._makefill.__dict__.__setitem__('stypy_function_name', '_process_plot_var_args._makefill')
        _process_plot_var_args._makefill.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'kw', 'kwargs'])
        _process_plot_var_args._makefill.__dict__.__setitem__('stypy_varargs_param_name', None)
        _process_plot_var_args._makefill.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _process_plot_var_args._makefill.__dict__.__setitem__('stypy_call_defaults', defaults)
        _process_plot_var_args._makefill.__dict__.__setitem__('stypy_call_varargs', varargs)
        _process_plot_var_args._makefill.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _process_plot_var_args._makefill.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_process_plot_var_args._makefill', ['x', 'y', 'kw', 'kwargs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_makefill', localization, ['x', 'y', 'kw', 'kwargs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_makefill(...)' code ##################

        
        # Assigning a Call to a Name (line 305):
        
        # Assigning a Call to a Name (line 305):
        
        # Call to copy(...): (line 305)
        # Processing the call keyword arguments (line 305)
        kwargs_208608 = {}
        # Getting the type of 'kw' (line 305)
        kw_208606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 13), 'kw', False)
        # Obtaining the member 'copy' of a type (line 305)
        copy_208607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 13), kw_208606, 'copy')
        # Calling copy(args, kwargs) (line 305)
        copy_call_result_208609 = invoke(stypy.reporting.localization.Localization(__file__, 305, 13), copy_208607, *[], **kwargs_208608)
        
        # Assigning a type to the variable 'kw' (line 305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 8), 'kw', copy_call_result_208609)
        
        # Assigning a Call to a Name (line 306):
        
        # Assigning a Call to a Name (line 306):
        
        # Call to copy(...): (line 306)
        # Processing the call keyword arguments (line 306)
        kwargs_208612 = {}
        # Getting the type of 'kwargs' (line 306)
        kwargs_208610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 17), 'kwargs', False)
        # Obtaining the member 'copy' of a type (line 306)
        copy_208611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 17), kwargs_208610, 'copy')
        # Calling copy(args, kwargs) (line 306)
        copy_call_result_208613 = invoke(stypy.reporting.localization.Localization(__file__, 306, 17), copy_208611, *[], **kwargs_208612)
        
        # Assigning a type to the variable 'kwargs' (line 306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 8), 'kwargs', copy_call_result_208613)
        
        # Assigning a Set to a Name (line 316):
        
        # Assigning a Set to a Name (line 316):
        
        # Obtaining an instance of the builtin type 'set' (line 316)
        set_208614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 18), 'set')
        # Adding type elements to the builtin type 'set' instance (line 316)
        # Adding element type (line 316)
        unicode_208615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 19), 'unicode', u'marker')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 316, 18), set_208614, unicode_208615)
        # Adding element type (line 316)
        unicode_208616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 29), 'unicode', u'markersize')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 316, 18), set_208614, unicode_208616)
        # Adding element type (line 316)
        unicode_208617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 43), 'unicode', u'markeredgecolor')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 316, 18), set_208614, unicode_208617)
        # Adding element type (line 316)
        unicode_208618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 19), 'unicode', u'markerfacecolor')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 316, 18), set_208614, unicode_208618)
        # Adding element type (line 316)
        unicode_208619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 38), 'unicode', u'markeredgewidth')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 316, 18), set_208614, unicode_208619)
        
        # Assigning a type to the variable 'ignores' (line 316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 316, 8), 'ignores', set_208614)
        
        
        # Call to iteritems(...): (line 319)
        # Processing the call arguments (line 319)
        # Getting the type of 'kwargs' (line 319)
        kwargs_208622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 34), 'kwargs', False)
        # Processing the call keyword arguments (line 319)
        kwargs_208623 = {}
        # Getting the type of 'six' (line 319)
        six_208620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 20), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 319)
        iteritems_208621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 20), six_208620, 'iteritems')
        # Calling iteritems(args, kwargs) (line 319)
        iteritems_call_result_208624 = invoke(stypy.reporting.localization.Localization(__file__, 319, 20), iteritems_208621, *[kwargs_208622], **kwargs_208623)
        
        # Testing the type of a for loop iterable (line 319)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 319, 8), iteritems_call_result_208624)
        # Getting the type of the for loop variable (line 319)
        for_loop_var_208625 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 319, 8), iteritems_call_result_208624)
        # Assigning a type to the variable 'k' (line 319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 319, 8), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 8), for_loop_var_208625))
        # Assigning a type to the variable 'v' (line 319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 319, 8), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 8), for_loop_var_208625))
        # SSA begins for a for statement (line 319)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Type idiom detected: calculating its left and rigth part (line 320)
        # Getting the type of 'v' (line 320)
        v_208626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 12), 'v')
        # Getting the type of 'None' (line 320)
        None_208627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 24), 'None')
        
        (may_be_208628, more_types_in_union_208629) = may_not_be_none(v_208626, None_208627)

        if may_be_208628:

            if more_types_in_union_208629:
                # Runtime conditional SSA (line 320)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to add(...): (line 321)
            # Processing the call arguments (line 321)
            # Getting the type of 'k' (line 321)
            k_208632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 28), 'k', False)
            # Processing the call keyword arguments (line 321)
            kwargs_208633 = {}
            # Getting the type of 'ignores' (line 321)
            ignores_208630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 16), 'ignores', False)
            # Obtaining the member 'add' of a type (line 321)
            add_208631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 16), ignores_208630, 'add')
            # Calling add(args, kwargs) (line 321)
            add_call_result_208634 = invoke(stypy.reporting.localization.Localization(__file__, 321, 16), add_208631, *[k_208632], **kwargs_208633)
            

            if more_types_in_union_208629:
                # SSA join for if statement (line 320)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 327):
        
        # Assigning a Call to a Name (line 327):
        
        # Call to _getdefaults(...): (line 327)
        # Processing the call arguments (line 327)
        # Getting the type of 'ignores' (line 327)
        ignores_208637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 41), 'ignores', False)
        # Getting the type of 'kw' (line 327)
        kw_208638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 50), 'kw', False)
        # Processing the call keyword arguments (line 327)
        kwargs_208639 = {}
        # Getting the type of 'self' (line 327)
        self_208635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 23), 'self', False)
        # Obtaining the member '_getdefaults' of a type (line 327)
        _getdefaults_208636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 23), self_208635, '_getdefaults')
        # Calling _getdefaults(args, kwargs) (line 327)
        _getdefaults_call_result_208640 = invoke(stypy.reporting.localization.Localization(__file__, 327, 23), _getdefaults_208636, *[ignores_208637, kw_208638], **kwargs_208639)
        
        # Assigning a type to the variable 'default_dict' (line 327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'default_dict', _getdefaults_call_result_208640)
        
        # Call to _setdefaults(...): (line 328)
        # Processing the call arguments (line 328)
        # Getting the type of 'default_dict' (line 328)
        default_dict_208643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 26), 'default_dict', False)
        # Getting the type of 'kw' (line 328)
        kw_208644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 40), 'kw', False)
        # Processing the call keyword arguments (line 328)
        kwargs_208645 = {}
        # Getting the type of 'self' (line 328)
        self_208641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 8), 'self', False)
        # Obtaining the member '_setdefaults' of a type (line 328)
        _setdefaults_208642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 328, 8), self_208641, '_setdefaults')
        # Calling _setdefaults(args, kwargs) (line 328)
        _setdefaults_call_result_208646 = invoke(stypy.reporting.localization.Localization(__file__, 328, 8), _setdefaults_208642, *[default_dict_208643, kw_208644], **kwargs_208645)
        
        
        # Assigning a Call to a Name (line 336):
        
        # Assigning a Call to a Name (line 336):
        
        # Call to get(...): (line 336)
        # Processing the call arguments (line 336)
        unicode_208649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 336, 27), 'unicode', u'color')
        # Getting the type of 'None' (line 336)
        None_208650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 36), 'None', False)
        # Processing the call keyword arguments (line 336)
        kwargs_208651 = {}
        # Getting the type of 'kw' (line 336)
        kw_208647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 20), 'kw', False)
        # Obtaining the member 'get' of a type (line 336)
        get_208648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 336, 20), kw_208647, 'get')
        # Calling get(args, kwargs) (line 336)
        get_call_result_208652 = invoke(stypy.reporting.localization.Localization(__file__, 336, 20), get_208648, *[unicode_208649, None_208650], **kwargs_208651)
        
        # Assigning a type to the variable 'facecolor' (line 336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 8), 'facecolor', get_call_result_208652)
        
        # Call to pop(...): (line 339)
        # Processing the call arguments (line 339)
        unicode_208655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 339, 25), 'unicode', u'color')
        # Getting the type of 'None' (line 339)
        None_208656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 34), 'None', False)
        # Processing the call keyword arguments (line 339)
        kwargs_208657 = {}
        # Getting the type of 'default_dict' (line 339)
        default_dict_208653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 8), 'default_dict', False)
        # Obtaining the member 'pop' of a type (line 339)
        pop_208654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 8), default_dict_208653, 'pop')
        # Calling pop(args, kwargs) (line 339)
        pop_call_result_208658 = invoke(stypy.reporting.localization.Localization(__file__, 339, 8), pop_208654, *[unicode_208655, None_208656], **kwargs_208657)
        
        
        # Call to _setdefaults(...): (line 343)
        # Processing the call arguments (line 343)
        # Getting the type of 'default_dict' (line 343)
        default_dict_208661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 26), 'default_dict', False)
        # Getting the type of 'kwargs' (line 343)
        kwargs_208662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 40), 'kwargs', False)
        # Processing the call keyword arguments (line 343)
        kwargs_208663 = {}
        # Getting the type of 'self' (line 343)
        self_208659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'self', False)
        # Obtaining the member '_setdefaults' of a type (line 343)
        _setdefaults_208660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 8), self_208659, '_setdefaults')
        # Calling _setdefaults(args, kwargs) (line 343)
        _setdefaults_call_result_208664 = invoke(stypy.reporting.localization.Localization(__file__, 343, 8), _setdefaults_208660, *[default_dict_208661, kwargs_208662], **kwargs_208663)
        
        
        # Assigning a Call to a Name (line 345):
        
        # Assigning a Call to a Name (line 345):
        
        # Call to Polygon(...): (line 345)
        # Processing the call arguments (line 345)
        
        # Call to hstack(...): (line 345)
        # Processing the call arguments (line 345)
        
        # Obtaining an instance of the builtin type 'tuple' (line 345)
        tuple_208669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 345, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 345)
        # Adding element type (line 345)
        
        # Obtaining the type of the subscript
        slice_208670 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 345, 42), None, None, None)
        # Getting the type of 'np' (line 345)
        np_208671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 47), 'np', False)
        # Obtaining the member 'newaxis' of a type (line 345)
        newaxis_208672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 47), np_208671, 'newaxis')
        # Getting the type of 'x' (line 345)
        x_208673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 42), 'x', False)
        # Obtaining the member '__getitem__' of a type (line 345)
        getitem___208674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 42), x_208673, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 345)
        subscript_call_result_208675 = invoke(stypy.reporting.localization.Localization(__file__, 345, 42), getitem___208674, (slice_208670, newaxis_208672))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 345, 42), tuple_208669, subscript_call_result_208675)
        # Adding element type (line 345)
        
        # Obtaining the type of the subscript
        slice_208676 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 346, 42), None, None, None)
        # Getting the type of 'np' (line 346)
        np_208677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 47), 'np', False)
        # Obtaining the member 'newaxis' of a type (line 346)
        newaxis_208678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 47), np_208677, 'newaxis')
        # Getting the type of 'y' (line 346)
        y_208679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 42), 'y', False)
        # Obtaining the member '__getitem__' of a type (line 346)
        getitem___208680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 42), y_208679, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 346)
        subscript_call_result_208681 = invoke(stypy.reporting.localization.Localization(__file__, 346, 42), getitem___208680, (slice_208676, newaxis_208678))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 345, 42), tuple_208669, subscript_call_result_208681)
        
        # Processing the call keyword arguments (line 345)
        kwargs_208682 = {}
        # Getting the type of 'np' (line 345)
        np_208667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 31), 'np', False)
        # Obtaining the member 'hstack' of a type (line 345)
        hstack_208668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 31), np_208667, 'hstack')
        # Calling hstack(args, kwargs) (line 345)
        hstack_call_result_208683 = invoke(stypy.reporting.localization.Localization(__file__, 345, 31), hstack_208668, *[tuple_208669], **kwargs_208682)
        
        # Processing the call keyword arguments (line 345)
        # Getting the type of 'facecolor' (line 347)
        facecolor_208684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 41), 'facecolor', False)
        keyword_208685 = facecolor_208684
        
        # Call to get(...): (line 348)
        # Processing the call arguments (line 348)
        unicode_208688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 348, 47), 'unicode', u'fill')
        # Getting the type of 'True' (line 348)
        True_208689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 55), 'True', False)
        # Processing the call keyword arguments (line 348)
        kwargs_208690 = {}
        # Getting the type of 'kwargs' (line 348)
        kwargs_208686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 36), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 348)
        get_208687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 36), kwargs_208686, 'get')
        # Calling get(args, kwargs) (line 348)
        get_call_result_208691 = invoke(stypy.reporting.localization.Localization(__file__, 348, 36), get_208687, *[unicode_208688, True_208689], **kwargs_208690)
        
        keyword_208692 = get_call_result_208691
        
        # Obtaining the type of the subscript
        unicode_208693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 349, 41), 'unicode', u'closed')
        # Getting the type of 'kw' (line 349)
        kw_208694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 38), 'kw', False)
        # Obtaining the member '__getitem__' of a type (line 349)
        getitem___208695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 38), kw_208694, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 349)
        subscript_call_result_208696 = invoke(stypy.reporting.localization.Localization(__file__, 349, 38), getitem___208695, unicode_208693)
        
        keyword_208697 = subscript_call_result_208696
        kwargs_208698 = {'facecolor': keyword_208685, 'closed': keyword_208697, 'fill': keyword_208692}
        # Getting the type of 'mpatches' (line 345)
        mpatches_208665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 14), 'mpatches', False)
        # Obtaining the member 'Polygon' of a type (line 345)
        Polygon_208666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 14), mpatches_208665, 'Polygon')
        # Calling Polygon(args, kwargs) (line 345)
        Polygon_call_result_208699 = invoke(stypy.reporting.localization.Localization(__file__, 345, 14), Polygon_208666, *[hstack_call_result_208683], **kwargs_208698)
        
        # Assigning a type to the variable 'seg' (line 345)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'seg', Polygon_call_result_208699)
        
        # Call to set_patchprops(...): (line 350)
        # Processing the call arguments (line 350)
        # Getting the type of 'seg' (line 350)
        seg_208702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 28), 'seg', False)
        # Processing the call keyword arguments (line 350)
        # Getting the type of 'kwargs' (line 350)
        kwargs_208703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 35), 'kwargs', False)
        kwargs_208704 = {'kwargs_208703': kwargs_208703}
        # Getting the type of 'self' (line 350)
        self_208700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 8), 'self', False)
        # Obtaining the member 'set_patchprops' of a type (line 350)
        set_patchprops_208701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 8), self_208700, 'set_patchprops')
        # Calling set_patchprops(args, kwargs) (line 350)
        set_patchprops_call_result_208705 = invoke(stypy.reporting.localization.Localization(__file__, 350, 8), set_patchprops_208701, *[seg_208702], **kwargs_208704)
        
        # Getting the type of 'seg' (line 351)
        seg_208706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 15), 'seg')
        # Assigning a type to the variable 'stypy_return_type' (line 351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 351, 8), 'stypy_return_type', seg_208706)
        
        # ################# End of '_makefill(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_makefill' in the type store
        # Getting the type of 'stypy_return_type' (line 304)
        stypy_return_type_208707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_208707)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_makefill'
        return stypy_return_type_208707


    @norecursion
    def _plot_args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_plot_args'
        module_type_store = module_type_store.open_function_context('_plot_args', 353, 4, False)
        # Assigning a type to the variable 'self' (line 354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _process_plot_var_args._plot_args.__dict__.__setitem__('stypy_localization', localization)
        _process_plot_var_args._plot_args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _process_plot_var_args._plot_args.__dict__.__setitem__('stypy_type_store', module_type_store)
        _process_plot_var_args._plot_args.__dict__.__setitem__('stypy_function_name', '_process_plot_var_args._plot_args')
        _process_plot_var_args._plot_args.__dict__.__setitem__('stypy_param_names_list', ['tup', 'kwargs'])
        _process_plot_var_args._plot_args.__dict__.__setitem__('stypy_varargs_param_name', None)
        _process_plot_var_args._plot_args.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _process_plot_var_args._plot_args.__dict__.__setitem__('stypy_call_defaults', defaults)
        _process_plot_var_args._plot_args.__dict__.__setitem__('stypy_call_varargs', varargs)
        _process_plot_var_args._plot_args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _process_plot_var_args._plot_args.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_process_plot_var_args._plot_args', ['tup', 'kwargs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_plot_args', localization, ['tup', 'kwargs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_plot_args(...)' code ##################

        
        # Assigning a List to a Name (line 354):
        
        # Assigning a List to a Name (line 354):
        
        # Obtaining an instance of the builtin type 'list' (line 354)
        list_208708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, 14), 'list')
        # Adding type elements to the builtin type 'list' instance (line 354)
        
        # Assigning a type to the variable 'ret' (line 354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 8), 'ret', list_208708)
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 355)
        # Processing the call arguments (line 355)
        # Getting the type of 'tup' (line 355)
        tup_208710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 15), 'tup', False)
        # Processing the call keyword arguments (line 355)
        kwargs_208711 = {}
        # Getting the type of 'len' (line 355)
        len_208709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 11), 'len', False)
        # Calling len(args, kwargs) (line 355)
        len_call_result_208712 = invoke(stypy.reporting.localization.Localization(__file__, 355, 11), len_208709, *[tup_208710], **kwargs_208711)
        
        int_208713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 22), 'int')
        # Applying the binary operator '>' (line 355)
        result_gt_208714 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 11), '>', len_call_result_208712, int_208713)
        
        
        # Call to isinstance(...): (line 355)
        # Processing the call arguments (line 355)
        
        # Obtaining the type of the subscript
        int_208716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 43), 'int')
        # Getting the type of 'tup' (line 355)
        tup_208717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 39), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 355)
        getitem___208718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 39), tup_208717, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 355)
        subscript_call_result_208719 = invoke(stypy.reporting.localization.Localization(__file__, 355, 39), getitem___208718, int_208716)
        
        # Getting the type of 'six' (line 355)
        six_208720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 48), 'six', False)
        # Obtaining the member 'string_types' of a type (line 355)
        string_types_208721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 48), six_208720, 'string_types')
        # Processing the call keyword arguments (line 355)
        kwargs_208722 = {}
        # Getting the type of 'isinstance' (line 355)
        isinstance_208715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 28), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 355)
        isinstance_call_result_208723 = invoke(stypy.reporting.localization.Localization(__file__, 355, 28), isinstance_208715, *[subscript_call_result_208719, string_types_208721], **kwargs_208722)
        
        # Applying the binary operator 'and' (line 355)
        result_and_keyword_208724 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 11), 'and', result_gt_208714, isinstance_call_result_208723)
        
        # Testing the type of an if condition (line 355)
        if_condition_208725 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 355, 8), result_and_keyword_208724)
        # Assigning a type to the variable 'if_condition_208725' (line 355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 8), 'if_condition_208725', if_condition_208725)
        # SSA begins for if statement (line 355)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 356):
        
        # Assigning a Call to a Name:
        
        # Call to _process_plot_format(...): (line 356)
        # Processing the call arguments (line 356)
        
        # Obtaining the type of the subscript
        int_208727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 64), 'int')
        # Getting the type of 'tup' (line 356)
        tup_208728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 60), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 356)
        getitem___208729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 60), tup_208728, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 356)
        subscript_call_result_208730 = invoke(stypy.reporting.localization.Localization(__file__, 356, 60), getitem___208729, int_208727)
        
        # Processing the call keyword arguments (line 356)
        kwargs_208731 = {}
        # Getting the type of '_process_plot_format' (line 356)
        _process_plot_format_208726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 39), '_process_plot_format', False)
        # Calling _process_plot_format(args, kwargs) (line 356)
        _process_plot_format_call_result_208732 = invoke(stypy.reporting.localization.Localization(__file__, 356, 39), _process_plot_format_208726, *[subscript_call_result_208730], **kwargs_208731)
        
        # Assigning a type to the variable 'call_assignment_207692' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 12), 'call_assignment_207692', _process_plot_format_call_result_208732)
        
        # Assigning a Call to a Name (line 356):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_208735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 12), 'int')
        # Processing the call keyword arguments
        kwargs_208736 = {}
        # Getting the type of 'call_assignment_207692' (line 356)
        call_assignment_207692_208733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 12), 'call_assignment_207692', False)
        # Obtaining the member '__getitem__' of a type (line 356)
        getitem___208734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 12), call_assignment_207692_208733, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_208737 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___208734, *[int_208735], **kwargs_208736)
        
        # Assigning a type to the variable 'call_assignment_207693' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 12), 'call_assignment_207693', getitem___call_result_208737)
        
        # Assigning a Name to a Name (line 356):
        # Getting the type of 'call_assignment_207693' (line 356)
        call_assignment_207693_208738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 12), 'call_assignment_207693')
        # Assigning a type to the variable 'linestyle' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 12), 'linestyle', call_assignment_207693_208738)
        
        # Assigning a Call to a Name (line 356):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_208741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 12), 'int')
        # Processing the call keyword arguments
        kwargs_208742 = {}
        # Getting the type of 'call_assignment_207692' (line 356)
        call_assignment_207692_208739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 12), 'call_assignment_207692', False)
        # Obtaining the member '__getitem__' of a type (line 356)
        getitem___208740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 12), call_assignment_207692_208739, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_208743 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___208740, *[int_208741], **kwargs_208742)
        
        # Assigning a type to the variable 'call_assignment_207694' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 12), 'call_assignment_207694', getitem___call_result_208743)
        
        # Assigning a Name to a Name (line 356):
        # Getting the type of 'call_assignment_207694' (line 356)
        call_assignment_207694_208744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 12), 'call_assignment_207694')
        # Assigning a type to the variable 'marker' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 23), 'marker', call_assignment_207694_208744)
        
        # Assigning a Call to a Name (line 356):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_208747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 12), 'int')
        # Processing the call keyword arguments
        kwargs_208748 = {}
        # Getting the type of 'call_assignment_207692' (line 356)
        call_assignment_207692_208745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 12), 'call_assignment_207692', False)
        # Obtaining the member '__getitem__' of a type (line 356)
        getitem___208746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 12), call_assignment_207692_208745, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_208749 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___208746, *[int_208747], **kwargs_208748)
        
        # Assigning a type to the variable 'call_assignment_207695' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 12), 'call_assignment_207695', getitem___call_result_208749)
        
        # Assigning a Name to a Name (line 356):
        # Getting the type of 'call_assignment_207695' (line 356)
        call_assignment_207695_208750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 12), 'call_assignment_207695')
        # Assigning a type to the variable 'color' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 31), 'color', call_assignment_207695_208750)
        
        # Assigning a Subscript to a Name (line 357):
        
        # Assigning a Subscript to a Name (line 357):
        
        # Obtaining the type of the subscript
        int_208751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 357, 23), 'int')
        slice_208752 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 357, 18), None, int_208751, None)
        # Getting the type of 'tup' (line 357)
        tup_208753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 18), 'tup')
        # Obtaining the member '__getitem__' of a type (line 357)
        getitem___208754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 357, 18), tup_208753, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 357)
        subscript_call_result_208755 = invoke(stypy.reporting.localization.Localization(__file__, 357, 18), getitem___208754, slice_208752)
        
        # Assigning a type to the variable 'tup' (line 357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 357, 12), 'tup', subscript_call_result_208755)
        # SSA branch for the else part of an if statement (line 355)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to len(...): (line 358)
        # Processing the call arguments (line 358)
        # Getting the type of 'tup' (line 358)
        tup_208757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 17), 'tup', False)
        # Processing the call keyword arguments (line 358)
        kwargs_208758 = {}
        # Getting the type of 'len' (line 358)
        len_208756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 13), 'len', False)
        # Calling len(args, kwargs) (line 358)
        len_call_result_208759 = invoke(stypy.reporting.localization.Localization(__file__, 358, 13), len_208756, *[tup_208757], **kwargs_208758)
        
        int_208760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 25), 'int')
        # Applying the binary operator '==' (line 358)
        result_eq_208761 = python_operator(stypy.reporting.localization.Localization(__file__, 358, 13), '==', len_call_result_208759, int_208760)
        
        # Testing the type of an if condition (line 358)
        if_condition_208762 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 358, 13), result_eq_208761)
        # Assigning a type to the variable 'if_condition_208762' (line 358)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 358, 13), 'if_condition_208762', if_condition_208762)
        # SSA begins for if statement (line 358)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 359)
        # Processing the call arguments (line 359)
        unicode_208764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 29), 'unicode', u'third arg must be a format string')
        # Processing the call keyword arguments (line 359)
        kwargs_208765 = {}
        # Getting the type of 'ValueError' (line 359)
        ValueError_208763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 359)
        ValueError_call_result_208766 = invoke(stypy.reporting.localization.Localization(__file__, 359, 18), ValueError_208763, *[unicode_208764], **kwargs_208765)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 359, 12), ValueError_call_result_208766, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 358)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Tuple (line 361):
        
        # Assigning a Name to a Name (line 361):
        # Getting the type of 'None' (line 361)
        None_208767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 39), 'None')
        # Assigning a type to the variable 'tuple_assignment_207696' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'tuple_assignment_207696', None_208767)
        
        # Assigning a Name to a Name (line 361):
        # Getting the type of 'None' (line 361)
        None_208768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 45), 'None')
        # Assigning a type to the variable 'tuple_assignment_207697' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'tuple_assignment_207697', None_208768)
        
        # Assigning a Name to a Name (line 361):
        # Getting the type of 'None' (line 361)
        None_208769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 51), 'None')
        # Assigning a type to the variable 'tuple_assignment_207698' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'tuple_assignment_207698', None_208769)
        
        # Assigning a Name to a Name (line 361):
        # Getting the type of 'tuple_assignment_207696' (line 361)
        tuple_assignment_207696_208770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'tuple_assignment_207696')
        # Assigning a type to the variable 'linestyle' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'linestyle', tuple_assignment_207696_208770)
        
        # Assigning a Name to a Name (line 361):
        # Getting the type of 'tuple_assignment_207697' (line 361)
        tuple_assignment_207697_208771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'tuple_assignment_207697')
        # Assigning a type to the variable 'marker' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 23), 'marker', tuple_assignment_207697_208771)
        
        # Assigning a Name to a Name (line 361):
        # Getting the type of 'tuple_assignment_207698' (line 361)
        tuple_assignment_207698_208772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'tuple_assignment_207698')
        # Assigning a type to the variable 'color' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 31), 'color', tuple_assignment_207698_208772)
        # SSA join for if statement (line 358)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 355)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to any(...): (line 366)
        # Processing the call arguments (line 366)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 366, 15, True)
        # Calculating comprehension expression
        # Getting the type of 'tup' (line 366)
        tup_208777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 34), 'tup', False)
        comprehension_208778 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 366, 15), tup_208777)
        # Assigning a type to the variable 'v' (line 366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 15), 'v', comprehension_208778)
        
        # Getting the type of 'v' (line 366)
        v_208774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 15), 'v', False)
        # Getting the type of 'None' (line 366)
        None_208775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 20), 'None', False)
        # Applying the binary operator 'is' (line 366)
        result_is__208776 = python_operator(stypy.reporting.localization.Localization(__file__, 366, 15), 'is', v_208774, None_208775)
        
        list_208779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 366, 15), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 366, 15), list_208779, result_is__208776)
        # Processing the call keyword arguments (line 366)
        kwargs_208780 = {}
        # Getting the type of 'any' (line 366)
        any_208773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 11), 'any', False)
        # Calling any(args, kwargs) (line 366)
        any_call_result_208781 = invoke(stypy.reporting.localization.Localization(__file__, 366, 11), any_208773, *[list_208779], **kwargs_208780)
        
        # Testing the type of an if condition (line 366)
        if_condition_208782 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 366, 8), any_call_result_208781)
        # Assigning a type to the variable 'if_condition_208782' (line 366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 8), 'if_condition_208782', if_condition_208782)
        # SSA begins for if statement (line 366)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 367)
        # Processing the call arguments (line 367)
        unicode_208784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 29), 'unicode', u'x and y must not be None')
        # Processing the call keyword arguments (line 367)
        kwargs_208785 = {}
        # Getting the type of 'ValueError' (line 367)
        ValueError_208783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 367)
        ValueError_call_result_208786 = invoke(stypy.reporting.localization.Localization(__file__, 367, 18), ValueError_208783, *[unicode_208784], **kwargs_208785)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 367, 12), ValueError_call_result_208786, 'raise parameter', BaseException)
        # SSA join for if statement (line 366)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Dict to a Name (line 369):
        
        # Assigning a Dict to a Name (line 369):
        
        # Obtaining an instance of the builtin type 'dict' (line 369)
        dict_208787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 13), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 369)
        
        # Assigning a type to the variable 'kw' (line 369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 369, 8), 'kw', dict_208787)
        
        
        # Call to zip(...): (line 370)
        # Processing the call arguments (line 370)
        
        # Obtaining an instance of the builtin type 'tuple' (line 370)
        tuple_208789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 370)
        # Adding element type (line 370)
        unicode_208790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 25), 'unicode', u'linestyle')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 370, 25), tuple_208789, unicode_208790)
        # Adding element type (line 370)
        unicode_208791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 38), 'unicode', u'marker')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 370, 25), tuple_208789, unicode_208791)
        # Adding element type (line 370)
        unicode_208792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 48), 'unicode', u'color')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 370, 25), tuple_208789, unicode_208792)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 371)
        tuple_208793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 371, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 371)
        # Adding element type (line 371)
        # Getting the type of 'linestyle' (line 371)
        linestyle_208794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 25), 'linestyle', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 371, 25), tuple_208793, linestyle_208794)
        # Adding element type (line 371)
        # Getting the type of 'marker' (line 371)
        marker_208795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 36), 'marker', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 371, 25), tuple_208793, marker_208795)
        # Adding element type (line 371)
        # Getting the type of 'color' (line 371)
        color_208796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 44), 'color', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 371, 25), tuple_208793, color_208796)
        
        # Processing the call keyword arguments (line 370)
        kwargs_208797 = {}
        # Getting the type of 'zip' (line 370)
        zip_208788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 20), 'zip', False)
        # Calling zip(args, kwargs) (line 370)
        zip_call_result_208798 = invoke(stypy.reporting.localization.Localization(__file__, 370, 20), zip_208788, *[tuple_208789, tuple_208793], **kwargs_208797)
        
        # Testing the type of a for loop iterable (line 370)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 370, 8), zip_call_result_208798)
        # Getting the type of the for loop variable (line 370)
        for_loop_var_208799 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 370, 8), zip_call_result_208798)
        # Assigning a type to the variable 'k' (line 370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 8), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 370, 8), for_loop_var_208799))
        # Assigning a type to the variable 'v' (line 370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 8), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 370, 8), for_loop_var_208799))
        # SSA begins for a for statement (line 370)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Type idiom detected: calculating its left and rigth part (line 372)
        # Getting the type of 'v' (line 372)
        v_208800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 12), 'v')
        # Getting the type of 'None' (line 372)
        None_208801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 24), 'None')
        
        (may_be_208802, more_types_in_union_208803) = may_not_be_none(v_208800, None_208801)

        if may_be_208802:

            if more_types_in_union_208803:
                # Runtime conditional SSA (line 372)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Subscript (line 373):
            
            # Assigning a Name to a Subscript (line 373):
            # Getting the type of 'v' (line 373)
            v_208804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 24), 'v')
            # Getting the type of 'kw' (line 373)
            kw_208805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 16), 'kw')
            # Getting the type of 'k' (line 373)
            k_208806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 19), 'k')
            # Storing an element on a container (line 373)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 373, 16), kw_208805, (k_208806, v_208804))

            if more_types_in_union_208803:
                # SSA join for if statement (line 372)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        unicode_208807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 11), 'unicode', u'label')
        # Getting the type of 'kwargs' (line 375)
        kwargs_208808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 26), 'kwargs')
        # Applying the binary operator 'notin' (line 375)
        result_contains_208809 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 11), 'notin', unicode_208807, kwargs_208808)
        
        
        
        # Obtaining the type of the subscript
        unicode_208810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 43), 'unicode', u'label')
        # Getting the type of 'kwargs' (line 375)
        kwargs_208811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 36), 'kwargs')
        # Obtaining the member '__getitem__' of a type (line 375)
        getitem___208812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 36), kwargs_208811, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 375)
        subscript_call_result_208813 = invoke(stypy.reporting.localization.Localization(__file__, 375, 36), getitem___208812, unicode_208810)
        
        # Getting the type of 'None' (line 375)
        None_208814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 55), 'None')
        # Applying the binary operator 'is' (line 375)
        result_is__208815 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 36), 'is', subscript_call_result_208813, None_208814)
        
        # Applying the binary operator 'or' (line 375)
        result_or_keyword_208816 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 11), 'or', result_contains_208809, result_is__208815)
        
        # Testing the type of an if condition (line 375)
        if_condition_208817 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 375, 8), result_or_keyword_208816)
        # Assigning a type to the variable 'if_condition_208817' (line 375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 8), 'if_condition_208817', if_condition_208817)
        # SSA begins for if statement (line 375)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 376):
        
        # Assigning a Call to a Subscript (line 376):
        
        # Call to get_label(...): (line 376)
        # Processing the call arguments (line 376)
        
        # Obtaining the type of the subscript
        int_208819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 44), 'int')
        # Getting the type of 'tup' (line 376)
        tup_208820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 40), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 376)
        getitem___208821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 40), tup_208820, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 376)
        subscript_call_result_208822 = invoke(stypy.reporting.localization.Localization(__file__, 376, 40), getitem___208821, int_208819)
        
        # Getting the type of 'None' (line 376)
        None_208823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 49), 'None', False)
        # Processing the call keyword arguments (line 376)
        kwargs_208824 = {}
        # Getting the type of 'get_label' (line 376)
        get_label_208818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 30), 'get_label', False)
        # Calling get_label(args, kwargs) (line 376)
        get_label_call_result_208825 = invoke(stypy.reporting.localization.Localization(__file__, 376, 30), get_label_208818, *[subscript_call_result_208822, None_208823], **kwargs_208824)
        
        # Getting the type of 'kwargs' (line 376)
        kwargs_208826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 12), 'kwargs')
        unicode_208827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 19), 'unicode', u'label')
        # Storing an element on a container (line 376)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 376, 12), kwargs_208826, (unicode_208827, get_label_call_result_208825))
        # SSA join for if statement (line 375)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 378)
        # Processing the call arguments (line 378)
        # Getting the type of 'tup' (line 378)
        tup_208829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 15), 'tup', False)
        # Processing the call keyword arguments (line 378)
        kwargs_208830 = {}
        # Getting the type of 'len' (line 378)
        len_208828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 11), 'len', False)
        # Calling len(args, kwargs) (line 378)
        len_call_result_208831 = invoke(stypy.reporting.localization.Localization(__file__, 378, 11), len_208828, *[tup_208829], **kwargs_208830)
        
        int_208832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 378, 23), 'int')
        # Applying the binary operator '==' (line 378)
        result_eq_208833 = python_operator(stypy.reporting.localization.Localization(__file__, 378, 11), '==', len_call_result_208831, int_208832)
        
        # Testing the type of an if condition (line 378)
        if_condition_208834 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 378, 8), result_eq_208833)
        # Assigning a type to the variable 'if_condition_208834' (line 378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 8), 'if_condition_208834', if_condition_208834)
        # SSA begins for if statement (line 378)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 379):
        
        # Assigning a Call to a Name (line 379):
        
        # Call to _check_1d(...): (line 379)
        # Processing the call arguments (line 379)
        
        # Obtaining the type of the subscript
        int_208836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 30), 'int')
        # Getting the type of 'tup' (line 379)
        tup_208837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 26), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 379)
        getitem___208838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 26), tup_208837, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 379)
        subscript_call_result_208839 = invoke(stypy.reporting.localization.Localization(__file__, 379, 26), getitem___208838, int_208836)
        
        # Processing the call keyword arguments (line 379)
        kwargs_208840 = {}
        # Getting the type of '_check_1d' (line 379)
        _check_1d_208835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 16), '_check_1d', False)
        # Calling _check_1d(args, kwargs) (line 379)
        _check_1d_call_result_208841 = invoke(stypy.reporting.localization.Localization(__file__, 379, 16), _check_1d_208835, *[subscript_call_result_208839], **kwargs_208840)
        
        # Assigning a type to the variable 'x' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 12), 'x', _check_1d_call_result_208841)
        
        # Assigning a Call to a Name (line 380):
        
        # Assigning a Call to a Name (line 380):
        
        # Call to _check_1d(...): (line 380)
        # Processing the call arguments (line 380)
        
        # Obtaining the type of the subscript
        int_208843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 380, 30), 'int')
        # Getting the type of 'tup' (line 380)
        tup_208844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 26), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 380)
        getitem___208845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 380, 26), tup_208844, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 380)
        subscript_call_result_208846 = invoke(stypy.reporting.localization.Localization(__file__, 380, 26), getitem___208845, int_208843)
        
        # Processing the call keyword arguments (line 380)
        kwargs_208847 = {}
        # Getting the type of '_check_1d' (line 380)
        _check_1d_208842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 16), '_check_1d', False)
        # Calling _check_1d(args, kwargs) (line 380)
        _check_1d_call_result_208848 = invoke(stypy.reporting.localization.Localization(__file__, 380, 16), _check_1d_208842, *[subscript_call_result_208846], **kwargs_208847)
        
        # Assigning a type to the variable 'y' (line 380)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 12), 'y', _check_1d_call_result_208848)
        # SSA branch for the else part of an if statement (line 378)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 382):
        
        # Assigning a Call to a Name:
        
        # Call to index_of(...): (line 382)
        # Processing the call arguments (line 382)
        
        # Obtaining the type of the subscript
        int_208850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, 32), 'int')
        # Getting the type of 'tup' (line 382)
        tup_208851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 28), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 382)
        getitem___208852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 382, 28), tup_208851, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 382)
        subscript_call_result_208853 = invoke(stypy.reporting.localization.Localization(__file__, 382, 28), getitem___208852, int_208850)
        
        # Processing the call keyword arguments (line 382)
        kwargs_208854 = {}
        # Getting the type of 'index_of' (line 382)
        index_of_208849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 19), 'index_of', False)
        # Calling index_of(args, kwargs) (line 382)
        index_of_call_result_208855 = invoke(stypy.reporting.localization.Localization(__file__, 382, 19), index_of_208849, *[subscript_call_result_208853], **kwargs_208854)
        
        # Assigning a type to the variable 'call_assignment_207699' (line 382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 12), 'call_assignment_207699', index_of_call_result_208855)
        
        # Assigning a Call to a Name (line 382):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_208858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, 12), 'int')
        # Processing the call keyword arguments
        kwargs_208859 = {}
        # Getting the type of 'call_assignment_207699' (line 382)
        call_assignment_207699_208856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 12), 'call_assignment_207699', False)
        # Obtaining the member '__getitem__' of a type (line 382)
        getitem___208857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 382, 12), call_assignment_207699_208856, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_208860 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___208857, *[int_208858], **kwargs_208859)
        
        # Assigning a type to the variable 'call_assignment_207700' (line 382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 12), 'call_assignment_207700', getitem___call_result_208860)
        
        # Assigning a Name to a Name (line 382):
        # Getting the type of 'call_assignment_207700' (line 382)
        call_assignment_207700_208861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 12), 'call_assignment_207700')
        # Assigning a type to the variable 'x' (line 382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 12), 'x', call_assignment_207700_208861)
        
        # Assigning a Call to a Name (line 382):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_208864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, 12), 'int')
        # Processing the call keyword arguments
        kwargs_208865 = {}
        # Getting the type of 'call_assignment_207699' (line 382)
        call_assignment_207699_208862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 12), 'call_assignment_207699', False)
        # Obtaining the member '__getitem__' of a type (line 382)
        getitem___208863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 382, 12), call_assignment_207699_208862, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_208866 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___208863, *[int_208864], **kwargs_208865)
        
        # Assigning a type to the variable 'call_assignment_207701' (line 382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 12), 'call_assignment_207701', getitem___call_result_208866)
        
        # Assigning a Name to a Name (line 382):
        # Getting the type of 'call_assignment_207701' (line 382)
        call_assignment_207701_208867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 12), 'call_assignment_207701')
        # Assigning a type to the variable 'y' (line 382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 15), 'y', call_assignment_207701_208867)
        # SSA join for if statement (line 378)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 384):
        
        # Assigning a Call to a Name:
        
        # Call to _xy_from_xy(...): (line 384)
        # Processing the call arguments (line 384)
        # Getting the type of 'x' (line 384)
        x_208870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 32), 'x', False)
        # Getting the type of 'y' (line 384)
        y_208871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 35), 'y', False)
        # Processing the call keyword arguments (line 384)
        kwargs_208872 = {}
        # Getting the type of 'self' (line 384)
        self_208868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 15), 'self', False)
        # Obtaining the member '_xy_from_xy' of a type (line 384)
        _xy_from_xy_208869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 15), self_208868, '_xy_from_xy')
        # Calling _xy_from_xy(args, kwargs) (line 384)
        _xy_from_xy_call_result_208873 = invoke(stypy.reporting.localization.Localization(__file__, 384, 15), _xy_from_xy_208869, *[x_208870, y_208871], **kwargs_208872)
        
        # Assigning a type to the variable 'call_assignment_207702' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'call_assignment_207702', _xy_from_xy_call_result_208873)
        
        # Assigning a Call to a Name (line 384):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_208876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 8), 'int')
        # Processing the call keyword arguments
        kwargs_208877 = {}
        # Getting the type of 'call_assignment_207702' (line 384)
        call_assignment_207702_208874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'call_assignment_207702', False)
        # Obtaining the member '__getitem__' of a type (line 384)
        getitem___208875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 8), call_assignment_207702_208874, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_208878 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___208875, *[int_208876], **kwargs_208877)
        
        # Assigning a type to the variable 'call_assignment_207703' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'call_assignment_207703', getitem___call_result_208878)
        
        # Assigning a Name to a Name (line 384):
        # Getting the type of 'call_assignment_207703' (line 384)
        call_assignment_207703_208879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'call_assignment_207703')
        # Assigning a type to the variable 'x' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'x', call_assignment_207703_208879)
        
        # Assigning a Call to a Name (line 384):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_208882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 8), 'int')
        # Processing the call keyword arguments
        kwargs_208883 = {}
        # Getting the type of 'call_assignment_207702' (line 384)
        call_assignment_207702_208880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'call_assignment_207702', False)
        # Obtaining the member '__getitem__' of a type (line 384)
        getitem___208881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 8), call_assignment_207702_208880, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_208884 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___208881, *[int_208882], **kwargs_208883)
        
        # Assigning a type to the variable 'call_assignment_207704' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'call_assignment_207704', getitem___call_result_208884)
        
        # Assigning a Name to a Name (line 384):
        # Getting the type of 'call_assignment_207704' (line 384)
        call_assignment_207704_208885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'call_assignment_207704')
        # Assigning a type to the variable 'y' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 11), 'y', call_assignment_207704_208885)
        
        
        # Getting the type of 'self' (line 386)
        self_208886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 11), 'self')
        # Obtaining the member 'command' of a type (line 386)
        command_208887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 11), self_208886, 'command')
        unicode_208888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 27), 'unicode', u'plot')
        # Applying the binary operator '==' (line 386)
        result_eq_208889 = python_operator(stypy.reporting.localization.Localization(__file__, 386, 11), '==', command_208887, unicode_208888)
        
        # Testing the type of an if condition (line 386)
        if_condition_208890 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 386, 8), result_eq_208889)
        # Assigning a type to the variable 'if_condition_208890' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 8), 'if_condition_208890', if_condition_208890)
        # SSA begins for if statement (line 386)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 387):
        
        # Assigning a Attribute to a Name (line 387):
        # Getting the type of 'self' (line 387)
        self_208891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 19), 'self')
        # Obtaining the member '_makeline' of a type (line 387)
        _makeline_208892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 19), self_208891, '_makeline')
        # Assigning a type to the variable 'func' (line 387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 12), 'func', _makeline_208892)
        # SSA branch for the else part of an if statement (line 386)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Subscript (line 389):
        
        # Assigning a Call to a Subscript (line 389):
        
        # Call to get(...): (line 389)
        # Processing the call arguments (line 389)
        unicode_208895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 38), 'unicode', u'closed')
        # Getting the type of 'True' (line 389)
        True_208896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 48), 'True', False)
        # Processing the call keyword arguments (line 389)
        kwargs_208897 = {}
        # Getting the type of 'kwargs' (line 389)
        kwargs_208893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 27), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 389)
        get_208894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 27), kwargs_208893, 'get')
        # Calling get(args, kwargs) (line 389)
        get_call_result_208898 = invoke(stypy.reporting.localization.Localization(__file__, 389, 27), get_208894, *[unicode_208895, True_208896], **kwargs_208897)
        
        # Getting the type of 'kw' (line 389)
        kw_208899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 12), 'kw')
        unicode_208900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 15), 'unicode', u'closed')
        # Storing an element on a container (line 389)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 389, 12), kw_208899, (unicode_208900, get_call_result_208898))
        
        # Assigning a Attribute to a Name (line 390):
        
        # Assigning a Attribute to a Name (line 390):
        # Getting the type of 'self' (line 390)
        self_208901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 19), 'self')
        # Obtaining the member '_makefill' of a type (line 390)
        _makefill_208902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 19), self_208901, '_makefill')
        # Assigning a type to the variable 'func' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 12), 'func', _makefill_208902)
        # SSA join for if statement (line 386)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 392):
        
        # Assigning a Subscript to a Name (line 392):
        
        # Obtaining the type of the subscript
        int_208903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 27), 'int')
        # Getting the type of 'x' (line 392)
        x_208904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 19), 'x')
        # Obtaining the member 'shape' of a type (line 392)
        shape_208905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 19), x_208904, 'shape')
        # Obtaining the member '__getitem__' of a type (line 392)
        getitem___208906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 19), shape_208905, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 392)
        subscript_call_result_208907 = invoke(stypy.reporting.localization.Localization(__file__, 392, 19), getitem___208906, int_208903)
        
        # Assigning a type to the variable 'tuple_assignment_207705' (line 392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 8), 'tuple_assignment_207705', subscript_call_result_208907)
        
        # Assigning a Subscript to a Name (line 392):
        
        # Obtaining the type of the subscript
        int_208908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 39), 'int')
        # Getting the type of 'y' (line 392)
        y_208909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 31), 'y')
        # Obtaining the member 'shape' of a type (line 392)
        shape_208910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 31), y_208909, 'shape')
        # Obtaining the member '__getitem__' of a type (line 392)
        getitem___208911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 31), shape_208910, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 392)
        subscript_call_result_208912 = invoke(stypy.reporting.localization.Localization(__file__, 392, 31), getitem___208911, int_208908)
        
        # Assigning a type to the variable 'tuple_assignment_207706' (line 392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 8), 'tuple_assignment_207706', subscript_call_result_208912)
        
        # Assigning a Name to a Name (line 392):
        # Getting the type of 'tuple_assignment_207705' (line 392)
        tuple_assignment_207705_208913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 8), 'tuple_assignment_207705')
        # Assigning a type to the variable 'ncx' (line 392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 8), 'ncx', tuple_assignment_207705_208913)
        
        # Assigning a Name to a Name (line 392):
        # Getting the type of 'tuple_assignment_207706' (line 392)
        tuple_assignment_207706_208914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 8), 'tuple_assignment_207706')
        # Assigning a type to the variable 'ncy' (line 392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 13), 'ncy', tuple_assignment_207706_208914)
        
        
        # Call to xrange(...): (line 393)
        # Processing the call arguments (line 393)
        
        # Call to max(...): (line 393)
        # Processing the call arguments (line 393)
        # Getting the type of 'ncx' (line 393)
        ncx_208917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 28), 'ncx', False)
        # Getting the type of 'ncy' (line 393)
        ncy_208918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 33), 'ncy', False)
        # Processing the call keyword arguments (line 393)
        kwargs_208919 = {}
        # Getting the type of 'max' (line 393)
        max_208916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 24), 'max', False)
        # Calling max(args, kwargs) (line 393)
        max_call_result_208920 = invoke(stypy.reporting.localization.Localization(__file__, 393, 24), max_208916, *[ncx_208917, ncy_208918], **kwargs_208919)
        
        # Processing the call keyword arguments (line 393)
        kwargs_208921 = {}
        # Getting the type of 'xrange' (line 393)
        xrange_208915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 17), 'xrange', False)
        # Calling xrange(args, kwargs) (line 393)
        xrange_call_result_208922 = invoke(stypy.reporting.localization.Localization(__file__, 393, 17), xrange_208915, *[max_call_result_208920], **kwargs_208921)
        
        # Testing the type of a for loop iterable (line 393)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 393, 8), xrange_call_result_208922)
        # Getting the type of the for loop variable (line 393)
        for_loop_var_208923 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 393, 8), xrange_call_result_208922)
        # Assigning a type to the variable 'j' (line 393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'j', for_loop_var_208923)
        # SSA begins for a for statement (line 393)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 394):
        
        # Assigning a Call to a Name (line 394):
        
        # Call to func(...): (line 394)
        # Processing the call arguments (line 394)
        
        # Obtaining the type of the subscript
        slice_208925 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 394, 23), None, None, None)
        # Getting the type of 'j' (line 394)
        j_208926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 28), 'j', False)
        # Getting the type of 'ncx' (line 394)
        ncx_208927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 32), 'ncx', False)
        # Applying the binary operator '%' (line 394)
        result_mod_208928 = python_operator(stypy.reporting.localization.Localization(__file__, 394, 28), '%', j_208926, ncx_208927)
        
        # Getting the type of 'x' (line 394)
        x_208929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 23), 'x', False)
        # Obtaining the member '__getitem__' of a type (line 394)
        getitem___208930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 23), x_208929, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 394)
        subscript_call_result_208931 = invoke(stypy.reporting.localization.Localization(__file__, 394, 23), getitem___208930, (slice_208925, result_mod_208928))
        
        
        # Obtaining the type of the subscript
        slice_208932 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 394, 38), None, None, None)
        # Getting the type of 'j' (line 394)
        j_208933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 43), 'j', False)
        # Getting the type of 'ncy' (line 394)
        ncy_208934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 47), 'ncy', False)
        # Applying the binary operator '%' (line 394)
        result_mod_208935 = python_operator(stypy.reporting.localization.Localization(__file__, 394, 43), '%', j_208933, ncy_208934)
        
        # Getting the type of 'y' (line 394)
        y_208936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 38), 'y', False)
        # Obtaining the member '__getitem__' of a type (line 394)
        getitem___208937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 38), y_208936, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 394)
        subscript_call_result_208938 = invoke(stypy.reporting.localization.Localization(__file__, 394, 38), getitem___208937, (slice_208932, result_mod_208935))
        
        # Getting the type of 'kw' (line 394)
        kw_208939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 53), 'kw', False)
        # Getting the type of 'kwargs' (line 394)
        kwargs_208940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 57), 'kwargs', False)
        # Processing the call keyword arguments (line 394)
        kwargs_208941 = {}
        # Getting the type of 'func' (line 394)
        func_208924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 18), 'func', False)
        # Calling func(args, kwargs) (line 394)
        func_call_result_208942 = invoke(stypy.reporting.localization.Localization(__file__, 394, 18), func_208924, *[subscript_call_result_208931, subscript_call_result_208938, kw_208939, kwargs_208940], **kwargs_208941)
        
        # Assigning a type to the variable 'seg' (line 394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 12), 'seg', func_call_result_208942)
        
        # Call to append(...): (line 395)
        # Processing the call arguments (line 395)
        # Getting the type of 'seg' (line 395)
        seg_208945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 23), 'seg', False)
        # Processing the call keyword arguments (line 395)
        kwargs_208946 = {}
        # Getting the type of 'ret' (line 395)
        ret_208943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 12), 'ret', False)
        # Obtaining the member 'append' of a type (line 395)
        append_208944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 395, 12), ret_208943, 'append')
        # Calling append(args, kwargs) (line 395)
        append_call_result_208947 = invoke(stypy.reporting.localization.Localization(__file__, 395, 12), append_208944, *[seg_208945], **kwargs_208946)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'ret' (line 396)
        ret_208948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 15), 'ret')
        # Assigning a type to the variable 'stypy_return_type' (line 396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 8), 'stypy_return_type', ret_208948)
        
        # ################# End of '_plot_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_plot_args' in the type store
        # Getting the type of 'stypy_return_type' (line 353)
        stypy_return_type_208949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_208949)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_plot_args'
        return stypy_return_type_208949


    @norecursion
    def _grab_next_args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_grab_next_args'
        module_type_store = module_type_store.open_function_context('_grab_next_args', 398, 4, False)
        # Assigning a type to the variable 'self' (line 399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 399, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _process_plot_var_args._grab_next_args.__dict__.__setitem__('stypy_localization', localization)
        _process_plot_var_args._grab_next_args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _process_plot_var_args._grab_next_args.__dict__.__setitem__('stypy_type_store', module_type_store)
        _process_plot_var_args._grab_next_args.__dict__.__setitem__('stypy_function_name', '_process_plot_var_args._grab_next_args')
        _process_plot_var_args._grab_next_args.__dict__.__setitem__('stypy_param_names_list', [])
        _process_plot_var_args._grab_next_args.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _process_plot_var_args._grab_next_args.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _process_plot_var_args._grab_next_args.__dict__.__setitem__('stypy_call_defaults', defaults)
        _process_plot_var_args._grab_next_args.__dict__.__setitem__('stypy_call_varargs', varargs)
        _process_plot_var_args._grab_next_args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _process_plot_var_args._grab_next_args.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_process_plot_var_args._grab_next_args', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_grab_next_args', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_grab_next_args(...)' code ##################

        
        # Getting the type of 'args' (line 399)
        args_208950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 14), 'args')
        # Testing the type of an if condition (line 399)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 399, 8), args_208950)
        # SSA begins for while statement (line 399)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Assigning a Tuple to a Tuple (line 400):
        
        # Assigning a Subscript to a Name (line 400):
        
        # Obtaining the type of the subscript
        int_208951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 31), 'int')
        slice_208952 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 400, 25), None, int_208951, None)
        # Getting the type of 'args' (line 400)
        args_208953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 400)
        getitem___208954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 25), args_208953, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 400)
        subscript_call_result_208955 = invoke(stypy.reporting.localization.Localization(__file__, 400, 25), getitem___208954, slice_208952)
        
        # Assigning a type to the variable 'tuple_assignment_207707' (line 400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 12), 'tuple_assignment_207707', subscript_call_result_208955)
        
        # Assigning a Subscript to a Name (line 400):
        
        # Obtaining the type of the subscript
        int_208956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 40), 'int')
        slice_208957 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 400, 35), int_208956, None, None)
        # Getting the type of 'args' (line 400)
        args_208958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 35), 'args')
        # Obtaining the member '__getitem__' of a type (line 400)
        getitem___208959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 35), args_208958, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 400)
        subscript_call_result_208960 = invoke(stypy.reporting.localization.Localization(__file__, 400, 35), getitem___208959, slice_208957)
        
        # Assigning a type to the variable 'tuple_assignment_207708' (line 400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 12), 'tuple_assignment_207708', subscript_call_result_208960)
        
        # Assigning a Name to a Name (line 400):
        # Getting the type of 'tuple_assignment_207707' (line 400)
        tuple_assignment_207707_208961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 12), 'tuple_assignment_207707')
        # Assigning a type to the variable 'this' (line 400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 12), 'this', tuple_assignment_207707_208961)
        
        # Assigning a Name to a Name (line 400):
        # Getting the type of 'tuple_assignment_207708' (line 400)
        tuple_assignment_207708_208962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 12), 'tuple_assignment_207708')
        # Assigning a type to the variable 'args' (line 400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 18), 'args', tuple_assignment_207708_208962)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'args' (line 401)
        args_208963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 15), 'args')
        
        # Call to isinstance(...): (line 401)
        # Processing the call arguments (line 401)
        
        # Obtaining the type of the subscript
        int_208965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, 40), 'int')
        # Getting the type of 'args' (line 401)
        args_208966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 35), 'args', False)
        # Obtaining the member '__getitem__' of a type (line 401)
        getitem___208967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 35), args_208966, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 401)
        subscript_call_result_208968 = invoke(stypy.reporting.localization.Localization(__file__, 401, 35), getitem___208967, int_208965)
        
        # Getting the type of 'six' (line 401)
        six_208969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 44), 'six', False)
        # Obtaining the member 'string_types' of a type (line 401)
        string_types_208970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 44), six_208969, 'string_types')
        # Processing the call keyword arguments (line 401)
        kwargs_208971 = {}
        # Getting the type of 'isinstance' (line 401)
        isinstance_208964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 24), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 401)
        isinstance_call_result_208972 = invoke(stypy.reporting.localization.Localization(__file__, 401, 24), isinstance_208964, *[subscript_call_result_208968, string_types_208970], **kwargs_208971)
        
        # Applying the binary operator 'and' (line 401)
        result_and_keyword_208973 = python_operator(stypy.reporting.localization.Localization(__file__, 401, 15), 'and', args_208963, isinstance_call_result_208972)
        
        # Testing the type of an if condition (line 401)
        if_condition_208974 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 401, 12), result_and_keyword_208973)
        # Assigning a type to the variable 'if_condition_208974' (line 401)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 401, 12), 'if_condition_208974', if_condition_208974)
        # SSA begins for if statement (line 401)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'this' (line 402)
        this_208975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 16), 'this')
        
        # Obtaining an instance of the builtin type 'tuple' (line 402)
        tuple_208976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 402, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 402)
        # Adding element type (line 402)
        
        # Obtaining the type of the subscript
        int_208977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 402, 29), 'int')
        # Getting the type of 'args' (line 402)
        args_208978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 24), 'args')
        # Obtaining the member '__getitem__' of a type (line 402)
        getitem___208979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 24), args_208978, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 402)
        subscript_call_result_208980 = invoke(stypy.reporting.localization.Localization(__file__, 402, 24), getitem___208979, int_208977)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 402, 24), tuple_208976, subscript_call_result_208980)
        
        # Applying the binary operator '+=' (line 402)
        result_iadd_208981 = python_operator(stypy.reporting.localization.Localization(__file__, 402, 16), '+=', this_208975, tuple_208976)
        # Assigning a type to the variable 'this' (line 402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 16), 'this', result_iadd_208981)
        
        
        # Assigning a Subscript to a Name (line 403):
        
        # Assigning a Subscript to a Name (line 403):
        
        # Obtaining the type of the subscript
        int_208982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 28), 'int')
        slice_208983 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 403, 23), int_208982, None, None)
        # Getting the type of 'args' (line 403)
        args_208984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 23), 'args')
        # Obtaining the member '__getitem__' of a type (line 403)
        getitem___208985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 23), args_208984, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 403)
        subscript_call_result_208986 = invoke(stypy.reporting.localization.Localization(__file__, 403, 23), getitem___208985, slice_208983)
        
        # Assigning a type to the variable 'args' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 16), 'args', subscript_call_result_208986)
        # SSA join for if statement (line 401)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to _plot_args(...): (line 404)
        # Processing the call arguments (line 404)
        # Getting the type of 'this' (line 404)
        this_208989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 39), 'this', False)
        # Getting the type of 'kwargs' (line 404)
        kwargs_208990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 45), 'kwargs', False)
        # Processing the call keyword arguments (line 404)
        kwargs_208991 = {}
        # Getting the type of 'self' (line 404)
        self_208987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 23), 'self', False)
        # Obtaining the member '_plot_args' of a type (line 404)
        _plot_args_208988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 23), self_208987, '_plot_args')
        # Calling _plot_args(args, kwargs) (line 404)
        _plot_args_call_result_208992 = invoke(stypy.reporting.localization.Localization(__file__, 404, 23), _plot_args_208988, *[this_208989, kwargs_208990], **kwargs_208991)
        
        # Testing the type of a for loop iterable (line 404)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 404, 12), _plot_args_call_result_208992)
        # Getting the type of the for loop variable (line 404)
        for_loop_var_208993 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 404, 12), _plot_args_call_result_208992)
        # Assigning a type to the variable 'seg' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 12), 'seg', for_loop_var_208993)
        # SSA begins for a for statement (line 404)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        # Creating a generator
        # Getting the type of 'seg' (line 405)
        seg_208994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 22), 'seg')
        GeneratorType_208995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 405, 16), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 405, 16), GeneratorType_208995, seg_208994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 16), 'stypy_return_type', GeneratorType_208995)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for while statement (line 399)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_grab_next_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_grab_next_args' in the type store
        # Getting the type of 'stypy_return_type' (line 398)
        stypy_return_type_208996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_208996)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_grab_next_args'
        return stypy_return_type_208996


# Assigning a type to the variable '_process_plot_var_args' (line 142)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 0), '_process_plot_var_args', _process_plot_var_args)
# Declaration of the '_AxesBase' class
# Getting the type of 'martist' (line 408)
martist_208997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 16), 'martist')
# Obtaining the member 'Artist' of a type (line 408)
Artist_208998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 16), martist_208997, 'Artist')

class _AxesBase(Artist_208998, ):
    unicode_208999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, (-1)), 'unicode', u'\n    ')
    
    # Assigning a Str to a Name (line 411):
    
    # Assigning a Call to a Name (line 413):
    
    # Assigning a Call to a Name (line 414):

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 416, 4, False)
        # Assigning a type to the variable 'self' (line 417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.stypy__str__.__dict__.__setitem__('stypy_function_name', '_AxesBase.stypy__str__')
        _AxesBase.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        
        # Call to format(...): (line 417)
        # Processing the call arguments (line 417)
        
        # Call to type(...): (line 418)
        # Processing the call arguments (line 418)
        # Getting the type of 'self' (line 418)
        self_209003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 17), 'self', False)
        # Processing the call keyword arguments (line 418)
        kwargs_209004 = {}
        # Getting the type of 'type' (line 418)
        type_209002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 12), 'type', False)
        # Calling type(args, kwargs) (line 418)
        type_call_result_209005 = invoke(stypy.reporting.localization.Localization(__file__, 418, 12), type_209002, *[self_209003], **kwargs_209004)
        
        # Obtaining the member '__name__' of a type (line 418)
        name___209006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 12), type_call_result_209005, '__name__')
        # Getting the type of 'self' (line 418)
        self_209007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 33), 'self', False)
        # Obtaining the member '_position' of a type (line 418)
        _position_209008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 33), self_209007, '_position')
        # Obtaining the member 'bounds' of a type (line 418)
        bounds_209009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 33), _position_209008, 'bounds')
        # Processing the call keyword arguments (line 417)
        kwargs_209010 = {}
        unicode_209000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 15), 'unicode', u'{0}({1[0]:g},{1[1]:g};{1[2]:g}x{1[3]:g})')
        # Obtaining the member 'format' of a type (line 417)
        format_209001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 15), unicode_209000, 'format')
        # Calling format(args, kwargs) (line 417)
        format_call_result_209011 = invoke(stypy.reporting.localization.Localization(__file__, 417, 15), format_209001, *[name___209006, bounds_209009], **kwargs_209010)
        
        # Assigning a type to the variable 'stypy_return_type' (line 417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 8), 'stypy_return_type', format_call_result_209011)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 416)
        stypy_return_type_209012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209012)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_209012


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 421)
        None_209013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 27), 'None')
        # Getting the type of 'True' (line 422)
        True_209014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 25), 'True')
        # Getting the type of 'None' (line 423)
        None_209015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 24), 'None')
        # Getting the type of 'None' (line 424)
        None_209016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 24), 'None')
        unicode_209017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 425, 23), 'unicode', u'')
        # Getting the type of 'None' (line 426)
        None_209018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 24), 'None')
        # Getting the type of 'None' (line 427)
        None_209019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 24), 'None')
        # Getting the type of 'None' (line 428)
        None_209020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 24), 'None')
        defaults = [None_209013, True_209014, None_209015, None_209016, unicode_209017, None_209018, None_209019, None_209020]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 420, 4, False)
        # Assigning a type to the variable 'self' (line 421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 421, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.__init__', ['fig', 'rect', 'facecolor', 'frameon', 'sharex', 'sharey', 'label', 'xscale', 'yscale', 'axisbg'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fig', 'rect', 'facecolor', 'frameon', 'sharex', 'sharey', 'label', 'xscale', 'yscale', 'axisbg'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_209021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, (-1)), 'unicode', u"\n        Build an :class:`Axes` instance in\n        :class:`~matplotlib.figure.Figure` *fig* with\n        *rect=[left, bottom, width, height]* in\n        :class:`~matplotlib.figure.Figure` coordinates\n\n        Optional keyword arguments:\n\n          ================   =========================================\n          Keyword            Description\n          ================   =========================================\n          *adjustable*       [ 'box' | 'datalim' | 'box-forced']\n          *alpha*            float: the alpha transparency (can be None)\n          *anchor*           [ 'C', 'SW', 'S', 'SE', 'E', 'NE', 'N',\n                               'NW', 'W' ]\n          *aspect*           [ 'auto' | 'equal' | aspect_ratio ]\n          *autoscale_on*     [ *True* | *False* ] whether or not to\n                             autoscale the *viewlim*\n          *axisbelow*        [ *True* | *False* | 'line'] draw the grids\n                             and ticks below or above most other artists,\n                             or below lines but above patches\n          *cursor_props*     a (*float*, *color*) tuple\n          *figure*           a :class:`~matplotlib.figure.Figure`\n                             instance\n          *frame_on*         a boolean - draw the axes frame\n          *label*            the axes label\n          *navigate*         [ *True* | *False* ]\n          *navigate_mode*    [ 'PAN' | 'ZOOM' | None ] the navigation\n                             toolbar button status\n          *position*         [left, bottom, width, height] in\n                             class:`~matplotlib.figure.Figure` coords\n          *sharex*           an class:`~matplotlib.axes.Axes` instance\n                             to share the x-axis with\n          *sharey*           an class:`~matplotlib.axes.Axes` instance\n                             to share the y-axis with\n          *title*            the title string\n          *visible*          [ *True* | *False* ] whether the axes is\n                             visible\n          *xlabel*           the xlabel\n          *xlim*             (*xmin*, *xmax*) view limits\n          *xscale*           [%(scale)s]\n          *xticklabels*      sequence of strings\n          *xticks*           sequence of floats\n          *ylabel*           the ylabel strings\n          *ylim*             (*ymin*, *ymax*) view limits\n          *yscale*           [%(scale)s]\n          *yticklabels*      sequence of strings\n          *yticks*           sequence of floats\n          ================   =========================================\n        ")
        
        # Obtaining an instance of the builtin type 'dict' (line 480)
        dict_209022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 14), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 480)
        # Adding element type (key, value) (line 480)
        unicode_209023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 15), 'unicode', u'scale')
        
        # Call to join(...): (line 480)
        # Processing the call arguments (line 480)
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to get_scale_names(...): (line 481)
        # Processing the call keyword arguments (line 481)
        kwargs_209032 = {}
        # Getting the type of 'mscale' (line 481)
        mscale_209030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 30), 'mscale', False)
        # Obtaining the member 'get_scale_names' of a type (line 481)
        get_scale_names_209031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 481, 30), mscale_209030, 'get_scale_names')
        # Calling get_scale_names(args, kwargs) (line 481)
        get_scale_names_call_result_209033 = invoke(stypy.reporting.localization.Localization(__file__, 481, 30), get_scale_names_209031, *[], **kwargs_209032)
        
        comprehension_209034 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 481, 13), get_scale_names_call_result_209033)
        # Assigning a type to the variable 'x' (line 481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 13), 'x', comprehension_209034)
        
        # Call to repr(...): (line 481)
        # Processing the call arguments (line 481)
        # Getting the type of 'x' (line 481)
        x_209027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 18), 'x', False)
        # Processing the call keyword arguments (line 481)
        kwargs_209028 = {}
        # Getting the type of 'repr' (line 481)
        repr_209026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 13), 'repr', False)
        # Calling repr(args, kwargs) (line 481)
        repr_call_result_209029 = invoke(stypy.reporting.localization.Localization(__file__, 481, 13), repr_209026, *[x_209027], **kwargs_209028)
        
        list_209035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 13), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 481, 13), list_209035, repr_call_result_209029)
        # Processing the call keyword arguments (line 480)
        kwargs_209036 = {}
        unicode_209024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 24), 'unicode', u' | ')
        # Obtaining the member 'join' of a type (line 480)
        join_209025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 24), unicode_209024, 'join')
        # Calling join(args, kwargs) (line 480)
        join_call_result_209037 = invoke(stypy.reporting.localization.Localization(__file__, 480, 24), join_209025, *[list_209035], **kwargs_209036)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 480, 14), dict_209022, (unicode_209023, join_call_result_209037))
        
        # Applying the binary operator '%' (line 480)
        result_mod_209038 = python_operator(stypy.reporting.localization.Localization(__file__, 480, (-1)), '%', unicode_209021, dict_209022)
        
        
        # Call to __init__(...): (line 482)
        # Processing the call arguments (line 482)
        # Getting the type of 'self' (line 482)
        self_209042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 32), 'self', False)
        # Processing the call keyword arguments (line 482)
        kwargs_209043 = {}
        # Getting the type of 'martist' (line 482)
        martist_209039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 8), 'martist', False)
        # Obtaining the member 'Artist' of a type (line 482)
        Artist_209040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 8), martist_209039, 'Artist')
        # Obtaining the member '__init__' of a type (line 482)
        init___209041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 8), Artist_209040, '__init__')
        # Calling __init__(args, kwargs) (line 482)
        init___call_result_209044 = invoke(stypy.reporting.localization.Localization(__file__, 482, 8), init___209041, *[self_209042], **kwargs_209043)
        
        
        
        # Call to isinstance(...): (line 483)
        # Processing the call arguments (line 483)
        # Getting the type of 'rect' (line 483)
        rect_209046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 22), 'rect', False)
        # Getting the type of 'mtransforms' (line 483)
        mtransforms_209047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 28), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 483)
        Bbox_209048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 28), mtransforms_209047, 'Bbox')
        # Processing the call keyword arguments (line 483)
        kwargs_209049 = {}
        # Getting the type of 'isinstance' (line 483)
        isinstance_209045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 483)
        isinstance_call_result_209050 = invoke(stypy.reporting.localization.Localization(__file__, 483, 11), isinstance_209045, *[rect_209046, Bbox_209048], **kwargs_209049)
        
        # Testing the type of an if condition (line 483)
        if_condition_209051 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 483, 8), isinstance_call_result_209050)
        # Assigning a type to the variable 'if_condition_209051' (line 483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'if_condition_209051', if_condition_209051)
        # SSA begins for if statement (line 483)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 484):
        
        # Assigning a Name to a Attribute (line 484):
        # Getting the type of 'rect' (line 484)
        rect_209052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 29), 'rect')
        # Getting the type of 'self' (line 484)
        self_209053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 12), 'self')
        # Setting the type of the member '_position' of a type (line 484)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 12), self_209053, '_position', rect_209052)
        # SSA branch for the else part of an if statement (line 483)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 486):
        
        # Assigning a Call to a Attribute (line 486):
        
        # Call to from_bounds(...): (line 486)
        # Getting the type of 'rect' (line 486)
        rect_209057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 59), 'rect', False)
        # Processing the call keyword arguments (line 486)
        kwargs_209058 = {}
        # Getting the type of 'mtransforms' (line 486)
        mtransforms_209054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 29), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 486)
        Bbox_209055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 29), mtransforms_209054, 'Bbox')
        # Obtaining the member 'from_bounds' of a type (line 486)
        from_bounds_209056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 29), Bbox_209055, 'from_bounds')
        # Calling from_bounds(args, kwargs) (line 486)
        from_bounds_call_result_209059 = invoke(stypy.reporting.localization.Localization(__file__, 486, 29), from_bounds_209056, *[rect_209057], **kwargs_209058)
        
        # Getting the type of 'self' (line 486)
        self_209060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 12), 'self')
        # Setting the type of the member '_position' of a type (line 486)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 12), self_209060, '_position', from_bounds_call_result_209059)
        # SSA join for if statement (line 483)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 487)
        self_209061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 11), 'self')
        # Obtaining the member '_position' of a type (line 487)
        _position_209062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 11), self_209061, '_position')
        # Obtaining the member 'width' of a type (line 487)
        width_209063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 11), _position_209062, 'width')
        int_209064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 34), 'int')
        # Applying the binary operator '<' (line 487)
        result_lt_209065 = python_operator(stypy.reporting.localization.Localization(__file__, 487, 11), '<', width_209063, int_209064)
        
        
        # Getting the type of 'self' (line 487)
        self_209066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 39), 'self')
        # Obtaining the member '_position' of a type (line 487)
        _position_209067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 39), self_209066, '_position')
        # Obtaining the member 'height' of a type (line 487)
        height_209068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 39), _position_209067, 'height')
        int_209069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 63), 'int')
        # Applying the binary operator '<' (line 487)
        result_lt_209070 = python_operator(stypy.reporting.localization.Localization(__file__, 487, 39), '<', height_209068, int_209069)
        
        # Applying the binary operator 'or' (line 487)
        result_or_keyword_209071 = python_operator(stypy.reporting.localization.Localization(__file__, 487, 11), 'or', result_lt_209065, result_lt_209070)
        
        # Testing the type of an if condition (line 487)
        if_condition_209072 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 487, 8), result_or_keyword_209071)
        # Assigning a type to the variable 'if_condition_209072' (line 487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 8), 'if_condition_209072', if_condition_209072)
        # SSA begins for if statement (line 487)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 488)
        # Processing the call arguments (line 488)
        unicode_209074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 488, 29), 'unicode', u'Width and height specified must be non-negative')
        # Processing the call keyword arguments (line 488)
        kwargs_209075 = {}
        # Getting the type of 'ValueError' (line 488)
        ValueError_209073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 488)
        ValueError_call_result_209076 = invoke(stypy.reporting.localization.Localization(__file__, 488, 18), ValueError_209073, *[unicode_209074], **kwargs_209075)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 488, 12), ValueError_call_result_209076, 'raise parameter', BaseException)
        # SSA join for if statement (line 487)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 489):
        
        # Assigning a Call to a Attribute (line 489):
        
        # Call to frozen(...): (line 489)
        # Processing the call keyword arguments (line 489)
        kwargs_209080 = {}
        # Getting the type of 'self' (line 489)
        self_209077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 33), 'self', False)
        # Obtaining the member '_position' of a type (line 489)
        _position_209078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 33), self_209077, '_position')
        # Obtaining the member 'frozen' of a type (line 489)
        frozen_209079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 33), _position_209078, 'frozen')
        # Calling frozen(args, kwargs) (line 489)
        frozen_call_result_209081 = invoke(stypy.reporting.localization.Localization(__file__, 489, 33), frozen_209079, *[], **kwargs_209080)
        
        # Getting the type of 'self' (line 489)
        self_209082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'self')
        # Setting the type of the member '_originalPosition' of a type (line 489)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 8), self_209082, '_originalPosition', frozen_call_result_209081)
        
        # Assigning a Name to a Attribute (line 491):
        
        # Assigning a Name to a Attribute (line 491):
        # Getting the type of 'self' (line 491)
        self_209083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 20), 'self')
        # Getting the type of 'self' (line 491)
        self_209084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 8), 'self')
        # Setting the type of the member 'axes' of a type (line 491)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 8), self_209084, 'axes', self_209083)
        
        # Call to set_aspect(...): (line 492)
        # Processing the call arguments (line 492)
        unicode_209087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, 24), 'unicode', u'auto')
        # Processing the call keyword arguments (line 492)
        kwargs_209088 = {}
        # Getting the type of 'self' (line 492)
        self_209085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'self', False)
        # Obtaining the member 'set_aspect' of a type (line 492)
        set_aspect_209086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 8), self_209085, 'set_aspect')
        # Calling set_aspect(args, kwargs) (line 492)
        set_aspect_call_result_209089 = invoke(stypy.reporting.localization.Localization(__file__, 492, 8), set_aspect_209086, *[unicode_209087], **kwargs_209088)
        
        
        # Assigning a Str to a Attribute (line 493):
        
        # Assigning a Str to a Attribute (line 493):
        unicode_209090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, 27), 'unicode', u'box')
        # Getting the type of 'self' (line 493)
        self_209091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'self')
        # Setting the type of the member '_adjustable' of a type (line 493)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 8), self_209091, '_adjustable', unicode_209090)
        
        # Call to set_anchor(...): (line 494)
        # Processing the call arguments (line 494)
        unicode_209094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, 24), 'unicode', u'C')
        # Processing the call keyword arguments (line 494)
        kwargs_209095 = {}
        # Getting the type of 'self' (line 494)
        self_209092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 8), 'self', False)
        # Obtaining the member 'set_anchor' of a type (line 494)
        set_anchor_209093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 8), self_209092, 'set_anchor')
        # Calling set_anchor(args, kwargs) (line 494)
        set_anchor_call_result_209096 = invoke(stypy.reporting.localization.Localization(__file__, 494, 8), set_anchor_209093, *[unicode_209094], **kwargs_209095)
        
        
        # Assigning a Name to a Attribute (line 495):
        
        # Assigning a Name to a Attribute (line 495):
        # Getting the type of 'sharex' (line 495)
        sharex_209097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 23), 'sharex')
        # Getting the type of 'self' (line 495)
        self_209098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 8), 'self')
        # Setting the type of the member '_sharex' of a type (line 495)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 8), self_209098, '_sharex', sharex_209097)
        
        # Assigning a Name to a Attribute (line 496):
        
        # Assigning a Name to a Attribute (line 496):
        # Getting the type of 'sharey' (line 496)
        sharey_209099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 23), 'sharey')
        # Getting the type of 'self' (line 496)
        self_209100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), 'self')
        # Setting the type of the member '_sharey' of a type (line 496)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 8), self_209100, '_sharey', sharey_209099)
        
        # Type idiom detected: calculating its left and rigth part (line 497)
        # Getting the type of 'sharex' (line 497)
        sharex_209101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 8), 'sharex')
        # Getting the type of 'None' (line 497)
        None_209102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 25), 'None')
        
        (may_be_209103, more_types_in_union_209104) = may_not_be_none(sharex_209101, None_209102)

        if may_be_209103:

            if more_types_in_union_209104:
                # Runtime conditional SSA (line 497)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to join(...): (line 498)
            # Processing the call arguments (line 498)
            # Getting the type of 'self' (line 498)
            self_209108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 37), 'self', False)
            # Getting the type of 'sharex' (line 498)
            sharex_209109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 43), 'sharex', False)
            # Processing the call keyword arguments (line 498)
            kwargs_209110 = {}
            # Getting the type of 'self' (line 498)
            self_209105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 12), 'self', False)
            # Obtaining the member '_shared_x_axes' of a type (line 498)
            _shared_x_axes_209106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 12), self_209105, '_shared_x_axes')
            # Obtaining the member 'join' of a type (line 498)
            join_209107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 12), _shared_x_axes_209106, 'join')
            # Calling join(args, kwargs) (line 498)
            join_call_result_209111 = invoke(stypy.reporting.localization.Localization(__file__, 498, 12), join_209107, *[self_209108, sharex_209109], **kwargs_209110)
            
            
            
            # Getting the type of 'sharex' (line 499)
            sharex_209112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 15), 'sharex')
            # Obtaining the member '_adjustable' of a type (line 499)
            _adjustable_209113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 15), sharex_209112, '_adjustable')
            unicode_209114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 499, 37), 'unicode', u'box')
            # Applying the binary operator '==' (line 499)
            result_eq_209115 = python_operator(stypy.reporting.localization.Localization(__file__, 499, 15), '==', _adjustable_209113, unicode_209114)
            
            # Testing the type of an if condition (line 499)
            if_condition_209116 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 499, 12), result_eq_209115)
            # Assigning a type to the variable 'if_condition_209116' (line 499)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 12), 'if_condition_209116', if_condition_209116)
            # SSA begins for if statement (line 499)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Str to a Attribute (line 500):
            
            # Assigning a Str to a Attribute (line 500):
            unicode_209117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 500, 37), 'unicode', u'datalim')
            # Getting the type of 'sharex' (line 500)
            sharex_209118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 16), 'sharex')
            # Setting the type of the member '_adjustable' of a type (line 500)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 500, 16), sharex_209118, '_adjustable', unicode_209117)
            # SSA join for if statement (line 499)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Str to a Attribute (line 503):
            
            # Assigning a Str to a Attribute (line 503):
            unicode_209119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 31), 'unicode', u'datalim')
            # Getting the type of 'self' (line 503)
            self_209120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 12), 'self')
            # Setting the type of the member '_adjustable' of a type (line 503)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 12), self_209120, '_adjustable', unicode_209119)

            if more_types_in_union_209104:
                # SSA join for if statement (line 497)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 504)
        # Getting the type of 'sharey' (line 504)
        sharey_209121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 8), 'sharey')
        # Getting the type of 'None' (line 504)
        None_209122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 25), 'None')
        
        (may_be_209123, more_types_in_union_209124) = may_not_be_none(sharey_209121, None_209122)

        if may_be_209123:

            if more_types_in_union_209124:
                # Runtime conditional SSA (line 504)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to join(...): (line 505)
            # Processing the call arguments (line 505)
            # Getting the type of 'self' (line 505)
            self_209128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 37), 'self', False)
            # Getting the type of 'sharey' (line 505)
            sharey_209129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 43), 'sharey', False)
            # Processing the call keyword arguments (line 505)
            kwargs_209130 = {}
            # Getting the type of 'self' (line 505)
            self_209125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 12), 'self', False)
            # Obtaining the member '_shared_y_axes' of a type (line 505)
            _shared_y_axes_209126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 505, 12), self_209125, '_shared_y_axes')
            # Obtaining the member 'join' of a type (line 505)
            join_209127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 505, 12), _shared_y_axes_209126, 'join')
            # Calling join(args, kwargs) (line 505)
            join_call_result_209131 = invoke(stypy.reporting.localization.Localization(__file__, 505, 12), join_209127, *[self_209128, sharey_209129], **kwargs_209130)
            
            
            
            # Getting the type of 'sharey' (line 506)
            sharey_209132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 15), 'sharey')
            # Obtaining the member '_adjustable' of a type (line 506)
            _adjustable_209133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 15), sharey_209132, '_adjustable')
            unicode_209134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 506, 37), 'unicode', u'box')
            # Applying the binary operator '==' (line 506)
            result_eq_209135 = python_operator(stypy.reporting.localization.Localization(__file__, 506, 15), '==', _adjustable_209133, unicode_209134)
            
            # Testing the type of an if condition (line 506)
            if_condition_209136 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 506, 12), result_eq_209135)
            # Assigning a type to the variable 'if_condition_209136' (line 506)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 506, 12), 'if_condition_209136', if_condition_209136)
            # SSA begins for if statement (line 506)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Str to a Attribute (line 507):
            
            # Assigning a Str to a Attribute (line 507):
            unicode_209137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 507, 37), 'unicode', u'datalim')
            # Getting the type of 'sharey' (line 507)
            sharey_209138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 16), 'sharey')
            # Setting the type of the member '_adjustable' of a type (line 507)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 507, 16), sharey_209138, '_adjustable', unicode_209137)
            # SSA join for if statement (line 506)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Str to a Attribute (line 510):
            
            # Assigning a Str to a Attribute (line 510):
            unicode_209139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 31), 'unicode', u'datalim')
            # Getting the type of 'self' (line 510)
            self_209140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 12), 'self')
            # Setting the type of the member '_adjustable' of a type (line 510)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 12), self_209140, '_adjustable', unicode_209139)

            if more_types_in_union_209124:
                # SSA join for if statement (line 504)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to set_label(...): (line 511)
        # Processing the call arguments (line 511)
        # Getting the type of 'label' (line 511)
        label_209143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 23), 'label', False)
        # Processing the call keyword arguments (line 511)
        kwargs_209144 = {}
        # Getting the type of 'self' (line 511)
        self_209141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'self', False)
        # Obtaining the member 'set_label' of a type (line 511)
        set_label_209142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 8), self_209141, 'set_label')
        # Calling set_label(args, kwargs) (line 511)
        set_label_call_result_209145 = invoke(stypy.reporting.localization.Localization(__file__, 511, 8), set_label_209142, *[label_209143], **kwargs_209144)
        
        
        # Call to set_figure(...): (line 512)
        # Processing the call arguments (line 512)
        # Getting the type of 'fig' (line 512)
        fig_209148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 24), 'fig', False)
        # Processing the call keyword arguments (line 512)
        kwargs_209149 = {}
        # Getting the type of 'self' (line 512)
        self_209146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 8), 'self', False)
        # Obtaining the member 'set_figure' of a type (line 512)
        set_figure_209147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 8), self_209146, 'set_figure')
        # Calling set_figure(args, kwargs) (line 512)
        set_figure_call_result_209150 = invoke(stypy.reporting.localization.Localization(__file__, 512, 8), set_figure_209147, *[fig_209148], **kwargs_209149)
        
        
        # Call to set_axes_locator(...): (line 514)
        # Processing the call arguments (line 514)
        
        # Call to get(...): (line 514)
        # Processing the call arguments (line 514)
        unicode_209155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 41), 'unicode', u'axes_locator')
        # Getting the type of 'None' (line 514)
        None_209156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 57), 'None', False)
        # Processing the call keyword arguments (line 514)
        kwargs_209157 = {}
        # Getting the type of 'kwargs' (line 514)
        kwargs_209153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 30), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 514)
        get_209154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 30), kwargs_209153, 'get')
        # Calling get(args, kwargs) (line 514)
        get_call_result_209158 = invoke(stypy.reporting.localization.Localization(__file__, 514, 30), get_209154, *[unicode_209155, None_209156], **kwargs_209157)
        
        # Processing the call keyword arguments (line 514)
        kwargs_209159 = {}
        # Getting the type of 'self' (line 514)
        self_209151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 8), 'self', False)
        # Obtaining the member 'set_axes_locator' of a type (line 514)
        set_axes_locator_209152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 8), self_209151, 'set_axes_locator')
        # Calling set_axes_locator(args, kwargs) (line 514)
        set_axes_locator_call_result_209160 = invoke(stypy.reporting.localization.Localization(__file__, 514, 8), set_axes_locator_209152, *[get_call_result_209158], **kwargs_209159)
        
        
        # Assigning a Call to a Attribute (line 516):
        
        # Assigning a Call to a Attribute (line 516):
        
        # Call to _gen_axes_spines(...): (line 516)
        # Processing the call keyword arguments (line 516)
        kwargs_209163 = {}
        # Getting the type of 'self' (line 516)
        self_209161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 22), 'self', False)
        # Obtaining the member '_gen_axes_spines' of a type (line 516)
        _gen_axes_spines_209162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 22), self_209161, '_gen_axes_spines')
        # Calling _gen_axes_spines(args, kwargs) (line 516)
        _gen_axes_spines_call_result_209164 = invoke(stypy.reporting.localization.Localization(__file__, 516, 22), _gen_axes_spines_209162, *[], **kwargs_209163)
        
        # Getting the type of 'self' (line 516)
        self_209165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 8), 'self')
        # Setting the type of the member 'spines' of a type (line 516)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 8), self_209165, 'spines', _gen_axes_spines_call_result_209164)
        
        # Call to _init_axis(...): (line 519)
        # Processing the call keyword arguments (line 519)
        kwargs_209168 = {}
        # Getting the type of 'self' (line 519)
        self_209166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 8), 'self', False)
        # Obtaining the member '_init_axis' of a type (line 519)
        _init_axis_209167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 8), self_209166, '_init_axis')
        # Calling _init_axis(args, kwargs) (line 519)
        _init_axis_call_result_209169 = invoke(stypy.reporting.localization.Localization(__file__, 519, 8), _init_axis_209167, *[], **kwargs_209168)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'axisbg' (line 520)
        axisbg_209170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 11), 'axisbg')
        # Getting the type of 'None' (line 520)
        None_209171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 25), 'None')
        # Applying the binary operator 'isnot' (line 520)
        result_is_not_209172 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 11), 'isnot', axisbg_209170, None_209171)
        
        
        # Getting the type of 'facecolor' (line 520)
        facecolor_209173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 34), 'facecolor')
        # Getting the type of 'None' (line 520)
        None_209174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 51), 'None')
        # Applying the binary operator 'isnot' (line 520)
        result_is_not_209175 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 34), 'isnot', facecolor_209173, None_209174)
        
        # Applying the binary operator 'and' (line 520)
        result_and_keyword_209176 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 11), 'and', result_is_not_209172, result_is_not_209175)
        
        # Testing the type of an if condition (line 520)
        if_condition_209177 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 520, 8), result_and_keyword_209176)
        # Assigning a type to the variable 'if_condition_209177' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 8), 'if_condition_209177', if_condition_209177)
        # SSA begins for if statement (line 520)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 521)
        # Processing the call arguments (line 521)
        unicode_209179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, 28), 'unicode', u'Both axisbg and facecolor are not None. These keywords are aliases, only one may be provided.')
        # Processing the call keyword arguments (line 521)
        kwargs_209180 = {}
        # Getting the type of 'TypeError' (line 521)
        TypeError_209178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 521)
        TypeError_call_result_209181 = invoke(stypy.reporting.localization.Localization(__file__, 521, 18), TypeError_209178, *[unicode_209179], **kwargs_209180)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 521, 12), TypeError_call_result_209181, 'raise parameter', BaseException)
        # SSA join for if statement (line 520)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 524)
        # Getting the type of 'axisbg' (line 524)
        axisbg_209182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 8), 'axisbg')
        # Getting the type of 'None' (line 524)
        None_209183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 25), 'None')
        
        (may_be_209184, more_types_in_union_209185) = may_not_be_none(axisbg_209182, None_209183)

        if may_be_209184:

            if more_types_in_union_209185:
                # Runtime conditional SSA (line 524)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to warn_deprecated(...): (line 525)
            # Processing the call arguments (line 525)
            unicode_209188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 16), 'unicode', u'2.0')
            # Processing the call keyword arguments (line 525)
            unicode_209189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 28), 'unicode', u'axisbg')
            keyword_209190 = unicode_209189
            unicode_209191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 50), 'unicode', u'facecolor')
            keyword_209192 = unicode_209191
            kwargs_209193 = {'alternative': keyword_209192, 'name': keyword_209190}
            # Getting the type of 'cbook' (line 525)
            cbook_209186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 12), 'cbook', False)
            # Obtaining the member 'warn_deprecated' of a type (line 525)
            warn_deprecated_209187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 525, 12), cbook_209186, 'warn_deprecated')
            # Calling warn_deprecated(args, kwargs) (line 525)
            warn_deprecated_call_result_209194 = invoke(stypy.reporting.localization.Localization(__file__, 525, 12), warn_deprecated_209187, *[unicode_209188], **kwargs_209193)
            
            
            # Assigning a Name to a Name (line 527):
            
            # Assigning a Name to a Name (line 527):
            # Getting the type of 'axisbg' (line 527)
            axisbg_209195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 24), 'axisbg')
            # Assigning a type to the variable 'facecolor' (line 527)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 527, 12), 'facecolor', axisbg_209195)

            if more_types_in_union_209185:
                # SSA join for if statement (line 524)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 528)
        # Getting the type of 'facecolor' (line 528)
        facecolor_209196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 11), 'facecolor')
        # Getting the type of 'None' (line 528)
        None_209197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 24), 'None')
        
        (may_be_209198, more_types_in_union_209199) = may_be_none(facecolor_209196, None_209197)

        if may_be_209198:

            if more_types_in_union_209199:
                # Runtime conditional SSA (line 528)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 529):
            
            # Assigning a Subscript to a Name (line 529):
            
            # Obtaining the type of the subscript
            unicode_209200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 33), 'unicode', u'axes.facecolor')
            # Getting the type of 'rcParams' (line 529)
            rcParams_209201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 24), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 529)
            getitem___209202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 24), rcParams_209201, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 529)
            subscript_call_result_209203 = invoke(stypy.reporting.localization.Localization(__file__, 529, 24), getitem___209202, unicode_209200)
            
            # Assigning a type to the variable 'facecolor' (line 529)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 12), 'facecolor', subscript_call_result_209203)

            if more_types_in_union_209199:
                # SSA join for if statement (line 528)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 530):
        
        # Assigning a Name to a Attribute (line 530):
        # Getting the type of 'facecolor' (line 530)
        facecolor_209204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 26), 'facecolor')
        # Getting the type of 'self' (line 530)
        self_209205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 8), 'self')
        # Setting the type of the member '_facecolor' of a type (line 530)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 8), self_209205, '_facecolor', facecolor_209204)
        
        # Assigning a Name to a Attribute (line 531):
        
        # Assigning a Name to a Attribute (line 531):
        # Getting the type of 'frameon' (line 531)
        frameon_209206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 24), 'frameon')
        # Getting the type of 'self' (line 531)
        self_209207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'self')
        # Setting the type of the member '_frameon' of a type (line 531)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 8), self_209207, '_frameon', frameon_209206)
        
        # Assigning a Subscript to a Attribute (line 532):
        
        # Assigning a Subscript to a Attribute (line 532):
        
        # Obtaining the type of the subscript
        unicode_209208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, 35), 'unicode', u'axes.axisbelow')
        # Getting the type of 'rcParams' (line 532)
        rcParams_209209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 26), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 532)
        getitem___209210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 26), rcParams_209209, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 532)
        subscript_call_result_209211 = invoke(stypy.reporting.localization.Localization(__file__, 532, 26), getitem___209210, unicode_209208)
        
        # Getting the type of 'self' (line 532)
        self_209212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 8), 'self')
        # Setting the type of the member '_axisbelow' of a type (line 532)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 8), self_209212, '_axisbelow', subscript_call_result_209211)
        
        # Assigning a Name to a Attribute (line 534):
        
        # Assigning a Name to a Attribute (line 534):
        # Getting the type of 'None' (line 534)
        None_209213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 37), 'None')
        # Getting the type of 'self' (line 534)
        self_209214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'self')
        # Setting the type of the member '_rasterization_zorder' of a type (line 534)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 8), self_209214, '_rasterization_zorder', None_209213)
        
        # Assigning a Subscript to a Attribute (line 536):
        
        # Assigning a Subscript to a Attribute (line 536):
        
        # Obtaining the type of the subscript
        unicode_209215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 536, 30), 'unicode', u'axes.hold')
        # Getting the type of 'rcParams' (line 536)
        rcParams_209216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 21), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 536)
        getitem___209217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 536, 21), rcParams_209216, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 536)
        subscript_call_result_209218 = invoke(stypy.reporting.localization.Localization(__file__, 536, 21), getitem___209217, unicode_209215)
        
        # Getting the type of 'self' (line 536)
        self_209219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 8), 'self')
        # Setting the type of the member '_hold' of a type (line 536)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 536, 8), self_209219, '_hold', subscript_call_result_209218)
        
        # Type idiom detected: calculating its left and rigth part (line 537)
        # Getting the type of 'self' (line 537)
        self_209220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 11), 'self')
        # Obtaining the member '_hold' of a type (line 537)
        _hold_209221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 11), self_209220, '_hold')
        # Getting the type of 'None' (line 537)
        None_209222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 25), 'None')
        
        (may_be_209223, more_types_in_union_209224) = may_be_none(_hold_209221, None_209222)

        if may_be_209223:

            if more_types_in_union_209224:
                # Runtime conditional SSA (line 537)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 538):
            
            # Assigning a Name to a Attribute (line 538):
            # Getting the type of 'True' (line 538)
            True_209225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 25), 'True')
            # Getting the type of 'self' (line 538)
            self_209226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 12), 'self')
            # Setting the type of the member '_hold' of a type (line 538)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 12), self_209226, '_hold', True_209225)

            if more_types_in_union_209224:
                # SSA join for if statement (line 537)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Dict to a Attribute (line 540):
        
        # Assigning a Dict to a Attribute (line 540):
        
        # Obtaining an instance of the builtin type 'dict' (line 540)
        dict_209227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 26), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 540)
        
        # Getting the type of 'self' (line 540)
        self_209228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 8), 'self')
        # Setting the type of the member '_connected' of a type (line 540)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 8), self_209228, '_connected', dict_209227)
        
        # Call to cla(...): (line 541)
        # Processing the call keyword arguments (line 541)
        kwargs_209231 = {}
        # Getting the type of 'self' (line 541)
        self_209229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'self', False)
        # Obtaining the member 'cla' of a type (line 541)
        cla_209230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 8), self_209229, 'cla')
        # Calling cla(args, kwargs) (line 541)
        cla_call_result_209232 = invoke(stypy.reporting.localization.Localization(__file__, 541, 8), cla_209230, *[], **kwargs_209231)
        
        
        # Assigning a Name to a Attribute (line 543):
        
        # Assigning a Name to a Attribute (line 543):
        # Getting the type of 'None' (line 543)
        None_209233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 25), 'None')
        # Getting the type of 'self' (line 543)
        self_209234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 8), 'self')
        # Setting the type of the member 'fmt_xdata' of a type (line 543)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 8), self_209234, 'fmt_xdata', None_209233)
        
        # Assigning a Name to a Attribute (line 544):
        
        # Assigning a Name to a Attribute (line 544):
        # Getting the type of 'None' (line 544)
        None_209235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 25), 'None')
        # Getting the type of 'self' (line 544)
        self_209236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 8), 'self')
        # Setting the type of the member 'fmt_ydata' of a type (line 544)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 8), self_209236, 'fmt_ydata', None_209235)
        
        # Assigning a Name to a Attribute (line 546):
        
        # Assigning a Name to a Attribute (line 546):
        # Getting the type of 'None' (line 546)
        None_209237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 31), 'None')
        # Getting the type of 'self' (line 546)
        self_209238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'self')
        # Setting the type of the member '_cachedRenderer' of a type (line 546)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 8), self_209238, '_cachedRenderer', None_209237)
        
        # Call to set_navigate(...): (line 547)
        # Processing the call arguments (line 547)
        # Getting the type of 'True' (line 547)
        True_209241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 26), 'True', False)
        # Processing the call keyword arguments (line 547)
        kwargs_209242 = {}
        # Getting the type of 'self' (line 547)
        self_209239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 8), 'self', False)
        # Obtaining the member 'set_navigate' of a type (line 547)
        set_navigate_209240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 8), self_209239, 'set_navigate')
        # Calling set_navigate(args, kwargs) (line 547)
        set_navigate_call_result_209243 = invoke(stypy.reporting.localization.Localization(__file__, 547, 8), set_navigate_209240, *[True_209241], **kwargs_209242)
        
        
        # Call to set_navigate_mode(...): (line 548)
        # Processing the call arguments (line 548)
        # Getting the type of 'None' (line 548)
        None_209246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 31), 'None', False)
        # Processing the call keyword arguments (line 548)
        kwargs_209247 = {}
        # Getting the type of 'self' (line 548)
        self_209244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 8), 'self', False)
        # Obtaining the member 'set_navigate_mode' of a type (line 548)
        set_navigate_mode_209245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 8), self_209244, 'set_navigate_mode')
        # Calling set_navigate_mode(args, kwargs) (line 548)
        set_navigate_mode_call_result_209248 = invoke(stypy.reporting.localization.Localization(__file__, 548, 8), set_navigate_mode_209245, *[None_209246], **kwargs_209247)
        
        
        # Getting the type of 'xscale' (line 550)
        xscale_209249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 11), 'xscale')
        # Testing the type of an if condition (line 550)
        if_condition_209250 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 550, 8), xscale_209249)
        # Assigning a type to the variable 'if_condition_209250' (line 550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 8), 'if_condition_209250', if_condition_209250)
        # SSA begins for if statement (line 550)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_xscale(...): (line 551)
        # Processing the call arguments (line 551)
        # Getting the type of 'xscale' (line 551)
        xscale_209253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 28), 'xscale', False)
        # Processing the call keyword arguments (line 551)
        kwargs_209254 = {}
        # Getting the type of 'self' (line 551)
        self_209251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 12), 'self', False)
        # Obtaining the member 'set_xscale' of a type (line 551)
        set_xscale_209252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 12), self_209251, 'set_xscale')
        # Calling set_xscale(args, kwargs) (line 551)
        set_xscale_call_result_209255 = invoke(stypy.reporting.localization.Localization(__file__, 551, 12), set_xscale_209252, *[xscale_209253], **kwargs_209254)
        
        # SSA join for if statement (line 550)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'yscale' (line 552)
        yscale_209256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 11), 'yscale')
        # Testing the type of an if condition (line 552)
        if_condition_209257 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 552, 8), yscale_209256)
        # Assigning a type to the variable 'if_condition_209257' (line 552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 8), 'if_condition_209257', if_condition_209257)
        # SSA begins for if statement (line 552)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_yscale(...): (line 553)
        # Processing the call arguments (line 553)
        # Getting the type of 'yscale' (line 553)
        yscale_209260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 28), 'yscale', False)
        # Processing the call keyword arguments (line 553)
        kwargs_209261 = {}
        # Getting the type of 'self' (line 553)
        self_209258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'self', False)
        # Obtaining the member 'set_yscale' of a type (line 553)
        set_yscale_209259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 12), self_209258, 'set_yscale')
        # Calling set_yscale(args, kwargs) (line 553)
        set_yscale_call_result_209262 = invoke(stypy.reporting.localization.Localization(__file__, 553, 12), set_yscale_209259, *[yscale_209260], **kwargs_209261)
        
        # SSA join for if statement (line 552)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to len(...): (line 555)
        # Processing the call arguments (line 555)
        # Getting the type of 'kwargs' (line 555)
        kwargs_209264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 15), 'kwargs', False)
        # Processing the call keyword arguments (line 555)
        kwargs_209265 = {}
        # Getting the type of 'len' (line 555)
        len_209263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 11), 'len', False)
        # Calling len(args, kwargs) (line 555)
        len_call_result_209266 = invoke(stypy.reporting.localization.Localization(__file__, 555, 11), len_209263, *[kwargs_209264], **kwargs_209265)
        
        # Testing the type of an if condition (line 555)
        if_condition_209267 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 555, 8), len_call_result_209266)
        # Assigning a type to the variable 'if_condition_209267' (line 555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 8), 'if_condition_209267', if_condition_209267)
        # SSA begins for if statement (line 555)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update(...): (line 556)
        # Processing the call arguments (line 556)
        # Getting the type of 'kwargs' (line 556)
        kwargs_209270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 24), 'kwargs', False)
        # Processing the call keyword arguments (line 556)
        kwargs_209271 = {}
        # Getting the type of 'self' (line 556)
        self_209268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 12), 'self', False)
        # Obtaining the member 'update' of a type (line 556)
        update_209269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 12), self_209268, 'update')
        # Calling update(args, kwargs) (line 556)
        update_call_result_209272 = invoke(stypy.reporting.localization.Localization(__file__, 556, 12), update_209269, *[kwargs_209270], **kwargs_209271)
        
        # SSA join for if statement (line 555)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 558)
        self_209273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 11), 'self')
        # Obtaining the member 'xaxis' of a type (line 558)
        xaxis_209274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 558, 11), self_209273, 'xaxis')
        # Getting the type of 'None' (line 558)
        None_209275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 29), 'None')
        # Applying the binary operator 'isnot' (line 558)
        result_is_not_209276 = python_operator(stypy.reporting.localization.Localization(__file__, 558, 11), 'isnot', xaxis_209274, None_209275)
        
        # Testing the type of an if condition (line 558)
        if_condition_209277 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 558, 8), result_is_not_209276)
        # Assigning a type to the variable 'if_condition_209277' (line 558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 558, 8), 'if_condition_209277', if_condition_209277)
        # SSA begins for if statement (line 558)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 559):
        
        # Assigning a Call to a Attribute (line 559):
        
        # Call to connect(...): (line 559)
        # Processing the call arguments (line 559)
        unicode_209282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 16), 'unicode', u'units finalize')

        @norecursion
        def _stypy_temp_lambda_90(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_90'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_90', 560, 34, True)
            # Passed parameters checking function
            _stypy_temp_lambda_90.stypy_localization = localization
            _stypy_temp_lambda_90.stypy_type_of_self = None
            _stypy_temp_lambda_90.stypy_type_store = module_type_store
            _stypy_temp_lambda_90.stypy_function_name = '_stypy_temp_lambda_90'
            _stypy_temp_lambda_90.stypy_param_names_list = []
            _stypy_temp_lambda_90.stypy_varargs_param_name = None
            _stypy_temp_lambda_90.stypy_kwargs_param_name = None
            _stypy_temp_lambda_90.stypy_call_defaults = defaults
            _stypy_temp_lambda_90.stypy_call_varargs = varargs
            _stypy_temp_lambda_90.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_90', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_90', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to _on_units_changed(...): (line 560)
            # Processing the call keyword arguments (line 560)
            # Getting the type of 'True' (line 560)
            True_209285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 72), 'True', False)
            keyword_209286 = True_209285
            kwargs_209287 = {'scalex': keyword_209286}
            # Getting the type of 'self' (line 560)
            self_209283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 42), 'self', False)
            # Obtaining the member '_on_units_changed' of a type (line 560)
            _on_units_changed_209284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 42), self_209283, '_on_units_changed')
            # Calling _on_units_changed(args, kwargs) (line 560)
            _on_units_changed_call_result_209288 = invoke(stypy.reporting.localization.Localization(__file__, 560, 42), _on_units_changed_209284, *[], **kwargs_209287)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 560)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 34), 'stypy_return_type', _on_units_changed_call_result_209288)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_90' in the type store
            # Getting the type of 'stypy_return_type' (line 560)
            stypy_return_type_209289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 34), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_209289)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_90'
            return stypy_return_type_209289

        # Assigning a type to the variable '_stypy_temp_lambda_90' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 34), '_stypy_temp_lambda_90', _stypy_temp_lambda_90)
        # Getting the type of '_stypy_temp_lambda_90' (line 560)
        _stypy_temp_lambda_90_209290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 34), '_stypy_temp_lambda_90')
        # Processing the call keyword arguments (line 559)
        kwargs_209291 = {}
        # Getting the type of 'self' (line 559)
        self_209278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 25), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 559)
        xaxis_209279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 25), self_209278, 'xaxis')
        # Obtaining the member 'callbacks' of a type (line 559)
        callbacks_209280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 25), xaxis_209279, 'callbacks')
        # Obtaining the member 'connect' of a type (line 559)
        connect_209281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 25), callbacks_209280, 'connect')
        # Calling connect(args, kwargs) (line 559)
        connect_call_result_209292 = invoke(stypy.reporting.localization.Localization(__file__, 559, 25), connect_209281, *[unicode_209282, _stypy_temp_lambda_90_209290], **kwargs_209291)
        
        # Getting the type of 'self' (line 559)
        self_209293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 12), 'self')
        # Setting the type of the member '_xcid' of a type (line 559)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 12), self_209293, '_xcid', connect_call_result_209292)
        # SSA join for if statement (line 558)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 562)
        self_209294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 11), 'self')
        # Obtaining the member 'yaxis' of a type (line 562)
        yaxis_209295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 11), self_209294, 'yaxis')
        # Getting the type of 'None' (line 562)
        None_209296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 29), 'None')
        # Applying the binary operator 'isnot' (line 562)
        result_is_not_209297 = python_operator(stypy.reporting.localization.Localization(__file__, 562, 11), 'isnot', yaxis_209295, None_209296)
        
        # Testing the type of an if condition (line 562)
        if_condition_209298 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 562, 8), result_is_not_209297)
        # Assigning a type to the variable 'if_condition_209298' (line 562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 8), 'if_condition_209298', if_condition_209298)
        # SSA begins for if statement (line 562)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 563):
        
        # Assigning a Call to a Attribute (line 563):
        
        # Call to connect(...): (line 563)
        # Processing the call arguments (line 563)
        unicode_209303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 564, 16), 'unicode', u'units finalize')

        @norecursion
        def _stypy_temp_lambda_91(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_91'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_91', 564, 34, True)
            # Passed parameters checking function
            _stypy_temp_lambda_91.stypy_localization = localization
            _stypy_temp_lambda_91.stypy_type_of_self = None
            _stypy_temp_lambda_91.stypy_type_store = module_type_store
            _stypy_temp_lambda_91.stypy_function_name = '_stypy_temp_lambda_91'
            _stypy_temp_lambda_91.stypy_param_names_list = []
            _stypy_temp_lambda_91.stypy_varargs_param_name = None
            _stypy_temp_lambda_91.stypy_kwargs_param_name = None
            _stypy_temp_lambda_91.stypy_call_defaults = defaults
            _stypy_temp_lambda_91.stypy_call_varargs = varargs
            _stypy_temp_lambda_91.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_91', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_91', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to _on_units_changed(...): (line 564)
            # Processing the call keyword arguments (line 564)
            # Getting the type of 'True' (line 564)
            True_209306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 72), 'True', False)
            keyword_209307 = True_209306
            kwargs_209308 = {'scaley': keyword_209307}
            # Getting the type of 'self' (line 564)
            self_209304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 42), 'self', False)
            # Obtaining the member '_on_units_changed' of a type (line 564)
            _on_units_changed_209305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 42), self_209304, '_on_units_changed')
            # Calling _on_units_changed(args, kwargs) (line 564)
            _on_units_changed_call_result_209309 = invoke(stypy.reporting.localization.Localization(__file__, 564, 42), _on_units_changed_209305, *[], **kwargs_209308)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 564)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 34), 'stypy_return_type', _on_units_changed_call_result_209309)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_91' in the type store
            # Getting the type of 'stypy_return_type' (line 564)
            stypy_return_type_209310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 34), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_209310)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_91'
            return stypy_return_type_209310

        # Assigning a type to the variable '_stypy_temp_lambda_91' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 34), '_stypy_temp_lambda_91', _stypy_temp_lambda_91)
        # Getting the type of '_stypy_temp_lambda_91' (line 564)
        _stypy_temp_lambda_91_209311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 34), '_stypy_temp_lambda_91')
        # Processing the call keyword arguments (line 563)
        kwargs_209312 = {}
        # Getting the type of 'self' (line 563)
        self_209299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 25), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 563)
        yaxis_209300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 25), self_209299, 'yaxis')
        # Obtaining the member 'callbacks' of a type (line 563)
        callbacks_209301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 25), yaxis_209300, 'callbacks')
        # Obtaining the member 'connect' of a type (line 563)
        connect_209302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 25), callbacks_209301, 'connect')
        # Calling connect(args, kwargs) (line 563)
        connect_call_result_209313 = invoke(stypy.reporting.localization.Localization(__file__, 563, 25), connect_209302, *[unicode_209303, _stypy_temp_lambda_91_209311], **kwargs_209312)
        
        # Getting the type of 'self' (line 563)
        self_209314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 12), 'self')
        # Setting the type of the member '_ycid' of a type (line 563)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 12), self_209314, '_ycid', connect_call_result_209313)
        # SSA join for if statement (line 562)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to tick_params(...): (line 566)
        # Processing the call keyword arguments (line 566)
        
        # Evaluating a boolean operation
        
        # Obtaining the type of the subscript
        unicode_209317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 25), 'unicode', u'xtick.top')
        # Getting the type of 'rcParams' (line 567)
        rcParams_209318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 16), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 567)
        getitem___209319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 16), rcParams_209318, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 567)
        subscript_call_result_209320 = invoke(stypy.reporting.localization.Localization(__file__, 567, 16), getitem___209319, unicode_209317)
        
        
        # Obtaining the type of the subscript
        unicode_209321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 51), 'unicode', u'xtick.minor.top')
        # Getting the type of 'rcParams' (line 567)
        rcParams_209322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 42), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 567)
        getitem___209323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 42), rcParams_209322, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 567)
        subscript_call_result_209324 = invoke(stypy.reporting.localization.Localization(__file__, 567, 42), getitem___209323, unicode_209321)
        
        # Applying the binary operator 'and' (line 567)
        result_and_keyword_209325 = python_operator(stypy.reporting.localization.Localization(__file__, 567, 16), 'and', subscript_call_result_209320, subscript_call_result_209324)
        
        keyword_209326 = result_and_keyword_209325
        
        # Evaluating a boolean operation
        
        # Obtaining the type of the subscript
        unicode_209327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 28), 'unicode', u'xtick.bottom')
        # Getting the type of 'rcParams' (line 568)
        rcParams_209328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 19), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 568)
        getitem___209329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 19), rcParams_209328, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 568)
        subscript_call_result_209330 = invoke(stypy.reporting.localization.Localization(__file__, 568, 19), getitem___209329, unicode_209327)
        
        
        # Obtaining the type of the subscript
        unicode_209331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 57), 'unicode', u'xtick.minor.bottom')
        # Getting the type of 'rcParams' (line 568)
        rcParams_209332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 48), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 568)
        getitem___209333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 48), rcParams_209332, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 568)
        subscript_call_result_209334 = invoke(stypy.reporting.localization.Localization(__file__, 568, 48), getitem___209333, unicode_209331)
        
        # Applying the binary operator 'and' (line 568)
        result_and_keyword_209335 = python_operator(stypy.reporting.localization.Localization(__file__, 568, 19), 'and', subscript_call_result_209330, subscript_call_result_209334)
        
        keyword_209336 = result_and_keyword_209335
        
        # Evaluating a boolean operation
        
        # Obtaining the type of the subscript
        unicode_209337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, 26), 'unicode', u'ytick.left')
        # Getting the type of 'rcParams' (line 569)
        rcParams_209338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 17), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 569)
        getitem___209339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 17), rcParams_209338, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 569)
        subscript_call_result_209340 = invoke(stypy.reporting.localization.Localization(__file__, 569, 17), getitem___209339, unicode_209337)
        
        
        # Obtaining the type of the subscript
        unicode_209341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, 53), 'unicode', u'ytick.minor.left')
        # Getting the type of 'rcParams' (line 569)
        rcParams_209342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 44), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 569)
        getitem___209343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 44), rcParams_209342, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 569)
        subscript_call_result_209344 = invoke(stypy.reporting.localization.Localization(__file__, 569, 44), getitem___209343, unicode_209341)
        
        # Applying the binary operator 'and' (line 569)
        result_and_keyword_209345 = python_operator(stypy.reporting.localization.Localization(__file__, 569, 17), 'and', subscript_call_result_209340, subscript_call_result_209344)
        
        keyword_209346 = result_and_keyword_209345
        
        # Evaluating a boolean operation
        
        # Obtaining the type of the subscript
        unicode_209347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 27), 'unicode', u'ytick.right')
        # Getting the type of 'rcParams' (line 570)
        rcParams_209348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 18), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 570)
        getitem___209349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 18), rcParams_209348, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 570)
        subscript_call_result_209350 = invoke(stypy.reporting.localization.Localization(__file__, 570, 18), getitem___209349, unicode_209347)
        
        
        # Obtaining the type of the subscript
        unicode_209351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 55), 'unicode', u'ytick.minor.right')
        # Getting the type of 'rcParams' (line 570)
        rcParams_209352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 46), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 570)
        getitem___209353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 46), rcParams_209352, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 570)
        subscript_call_result_209354 = invoke(stypy.reporting.localization.Localization(__file__, 570, 46), getitem___209353, unicode_209351)
        
        # Applying the binary operator 'and' (line 570)
        result_and_keyword_209355 = python_operator(stypy.reporting.localization.Localization(__file__, 570, 18), 'and', subscript_call_result_209350, subscript_call_result_209354)
        
        keyword_209356 = result_and_keyword_209355
        unicode_209357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 571, 18), 'unicode', u'minor')
        keyword_209358 = unicode_209357
        kwargs_209359 = {'top': keyword_209326, 'left': keyword_209346, 'right': keyword_209356, 'which': keyword_209358, 'bottom': keyword_209336}
        # Getting the type of 'self' (line 566)
        self_209315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 8), 'self', False)
        # Obtaining the member 'tick_params' of a type (line 566)
        tick_params_209316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 8), self_209315, 'tick_params')
        # Calling tick_params(args, kwargs) (line 566)
        tick_params_call_result_209360 = invoke(stypy.reporting.localization.Localization(__file__, 566, 8), tick_params_209316, *[], **kwargs_209359)
        
        
        # Call to tick_params(...): (line 573)
        # Processing the call keyword arguments (line 573)
        
        # Evaluating a boolean operation
        
        # Obtaining the type of the subscript
        unicode_209363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 574, 25), 'unicode', u'xtick.top')
        # Getting the type of 'rcParams' (line 574)
        rcParams_209364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 16), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 574)
        getitem___209365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 16), rcParams_209364, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 574)
        subscript_call_result_209366 = invoke(stypy.reporting.localization.Localization(__file__, 574, 16), getitem___209365, unicode_209363)
        
        
        # Obtaining the type of the subscript
        unicode_209367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 574, 51), 'unicode', u'xtick.major.top')
        # Getting the type of 'rcParams' (line 574)
        rcParams_209368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 42), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 574)
        getitem___209369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 42), rcParams_209368, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 574)
        subscript_call_result_209370 = invoke(stypy.reporting.localization.Localization(__file__, 574, 42), getitem___209369, unicode_209367)
        
        # Applying the binary operator 'and' (line 574)
        result_and_keyword_209371 = python_operator(stypy.reporting.localization.Localization(__file__, 574, 16), 'and', subscript_call_result_209366, subscript_call_result_209370)
        
        keyword_209372 = result_and_keyword_209371
        
        # Evaluating a boolean operation
        
        # Obtaining the type of the subscript
        unicode_209373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 575, 28), 'unicode', u'xtick.bottom')
        # Getting the type of 'rcParams' (line 575)
        rcParams_209374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 19), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 575)
        getitem___209375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 19), rcParams_209374, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 575)
        subscript_call_result_209376 = invoke(stypy.reporting.localization.Localization(__file__, 575, 19), getitem___209375, unicode_209373)
        
        
        # Obtaining the type of the subscript
        unicode_209377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 575, 57), 'unicode', u'xtick.major.bottom')
        # Getting the type of 'rcParams' (line 575)
        rcParams_209378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 48), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 575)
        getitem___209379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 48), rcParams_209378, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 575)
        subscript_call_result_209380 = invoke(stypy.reporting.localization.Localization(__file__, 575, 48), getitem___209379, unicode_209377)
        
        # Applying the binary operator 'and' (line 575)
        result_and_keyword_209381 = python_operator(stypy.reporting.localization.Localization(__file__, 575, 19), 'and', subscript_call_result_209376, subscript_call_result_209380)
        
        keyword_209382 = result_and_keyword_209381
        
        # Evaluating a boolean operation
        
        # Obtaining the type of the subscript
        unicode_209383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 26), 'unicode', u'ytick.left')
        # Getting the type of 'rcParams' (line 576)
        rcParams_209384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 17), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 576)
        getitem___209385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 17), rcParams_209384, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 576)
        subscript_call_result_209386 = invoke(stypy.reporting.localization.Localization(__file__, 576, 17), getitem___209385, unicode_209383)
        
        
        # Obtaining the type of the subscript
        unicode_209387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 53), 'unicode', u'ytick.major.left')
        # Getting the type of 'rcParams' (line 576)
        rcParams_209388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 44), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 576)
        getitem___209389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 44), rcParams_209388, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 576)
        subscript_call_result_209390 = invoke(stypy.reporting.localization.Localization(__file__, 576, 44), getitem___209389, unicode_209387)
        
        # Applying the binary operator 'and' (line 576)
        result_and_keyword_209391 = python_operator(stypy.reporting.localization.Localization(__file__, 576, 17), 'and', subscript_call_result_209386, subscript_call_result_209390)
        
        keyword_209392 = result_and_keyword_209391
        
        # Evaluating a boolean operation
        
        # Obtaining the type of the subscript
        unicode_209393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 27), 'unicode', u'ytick.right')
        # Getting the type of 'rcParams' (line 577)
        rcParams_209394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 18), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 577)
        getitem___209395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 18), rcParams_209394, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 577)
        subscript_call_result_209396 = invoke(stypy.reporting.localization.Localization(__file__, 577, 18), getitem___209395, unicode_209393)
        
        
        # Obtaining the type of the subscript
        unicode_209397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 55), 'unicode', u'ytick.major.right')
        # Getting the type of 'rcParams' (line 577)
        rcParams_209398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 46), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 577)
        getitem___209399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 46), rcParams_209398, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 577)
        subscript_call_result_209400 = invoke(stypy.reporting.localization.Localization(__file__, 577, 46), getitem___209399, unicode_209397)
        
        # Applying the binary operator 'and' (line 577)
        result_and_keyword_209401 = python_operator(stypy.reporting.localization.Localization(__file__, 577, 18), 'and', subscript_call_result_209396, subscript_call_result_209400)
        
        keyword_209402 = result_and_keyword_209401
        unicode_209403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 18), 'unicode', u'major')
        keyword_209404 = unicode_209403
        kwargs_209405 = {'top': keyword_209372, 'left': keyword_209392, 'right': keyword_209402, 'which': keyword_209404, 'bottom': keyword_209382}
        # Getting the type of 'self' (line 573)
        self_209361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 8), 'self', False)
        # Obtaining the member 'tick_params' of a type (line 573)
        tick_params_209362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 8), self_209361, 'tick_params')
        # Calling tick_params(args, kwargs) (line 573)
        tick_params_call_result_209406 = invoke(stypy.reporting.localization.Localization(__file__, 573, 8), tick_params_209362, *[], **kwargs_209405)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __getstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getstate__'
        module_type_store = module_type_store.open_function_context('__getstate__', 580, 4, False)
        # Assigning a type to the variable 'self' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.__getstate__.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.__getstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.__getstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.__getstate__.__dict__.__setitem__('stypy_function_name', '_AxesBase.__getstate__')
        _AxesBase.__getstate__.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.__getstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.__getstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.__getstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.__getstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.__getstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.__getstate__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.__getstate__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getstate__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getstate__(...)' code ##################

        
        # Assigning a Call to a Name (line 583):
        
        # Assigning a Call to a Name (line 583):
        
        # Call to __getstate__(...): (line 583)
        # Processing the call keyword arguments (line 583)
        kwargs_209413 = {}
        
        # Call to super(...): (line 583)
        # Processing the call arguments (line 583)
        # Getting the type of '_AxesBase' (line 583)
        _AxesBase_209408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 22), '_AxesBase', False)
        # Getting the type of 'self' (line 583)
        self_209409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 33), 'self', False)
        # Processing the call keyword arguments (line 583)
        kwargs_209410 = {}
        # Getting the type of 'super' (line 583)
        super_209407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 16), 'super', False)
        # Calling super(args, kwargs) (line 583)
        super_call_result_209411 = invoke(stypy.reporting.localization.Localization(__file__, 583, 16), super_209407, *[_AxesBase_209408, self_209409], **kwargs_209410)
        
        # Obtaining the member '__getstate__' of a type (line 583)
        getstate___209412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 16), super_call_result_209411, '__getstate__')
        # Calling __getstate__(args, kwargs) (line 583)
        getstate___call_result_209414 = invoke(stypy.reporting.localization.Localization(__file__, 583, 16), getstate___209412, *[], **kwargs_209413)
        
        # Assigning a type to the variable 'state' (line 583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 583, 8), 'state', getstate___call_result_209414)
        
        # Assigning a Name to a Subscript (line 584):
        
        # Assigning a Name to a Subscript (line 584):
        # Getting the type of 'None' (line 584)
        None_209415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 35), 'None')
        # Getting the type of 'state' (line 584)
        state_209416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 8), 'state')
        unicode_209417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 14), 'unicode', u'_cachedRenderer')
        # Storing an element on a container (line 584)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 584, 8), state_209416, (unicode_209417, None_209415))
        # Getting the type of 'state' (line 585)
        state_209418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 15), 'state')
        # Assigning a type to the variable 'stypy_return_type' (line 585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 8), 'stypy_return_type', state_209418)
        
        # ################# End of '__getstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 580)
        stypy_return_type_209419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209419)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getstate__'
        return stypy_return_type_209419


    @norecursion
    def __setstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setstate__'
        module_type_store = module_type_store.open_function_context('__setstate__', 587, 4, False)
        # Assigning a type to the variable 'self' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.__setstate__.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.__setstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.__setstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.__setstate__.__dict__.__setitem__('stypy_function_name', '_AxesBase.__setstate__')
        _AxesBase.__setstate__.__dict__.__setitem__('stypy_param_names_list', ['state'])
        _AxesBase.__setstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.__setstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.__setstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.__setstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.__setstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.__setstate__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.__setstate__', ['state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setstate__', localization, ['state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setstate__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 588):
        
        # Assigning a Name to a Attribute (line 588):
        # Getting the type of 'state' (line 588)
        state_209420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 24), 'state')
        # Getting the type of 'self' (line 588)
        self_209421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 8), 'self')
        # Setting the type of the member '__dict__' of a type (line 588)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 8), self_209421, '__dict__', state_209420)
        
        
        # Obtaining an instance of the builtin type 'list' (line 590)
        list_209422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 590)
        # Adding element type (line 590)
        unicode_209423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 31), 'unicode', u'lines')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 30), list_209422, unicode_209423)
        # Adding element type (line 590)
        unicode_209424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 40), 'unicode', u'collections')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 30), list_209422, unicode_209424)
        # Adding element type (line 590)
        unicode_209425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 55), 'unicode', u'tables')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 30), list_209422, unicode_209425)
        # Adding element type (line 590)
        unicode_209426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 65), 'unicode', u'patches')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 30), list_209422, unicode_209426)
        # Adding element type (line 590)
        unicode_209427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 31), 'unicode', u'texts')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 30), list_209422, unicode_209427)
        # Adding element type (line 590)
        unicode_209428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 40), 'unicode', u'images')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 30), list_209422, unicode_209428)
        
        # Testing the type of a for loop iterable (line 590)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 590, 8), list_209422)
        # Getting the type of the for loop variable (line 590)
        for_loop_var_209429 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 590, 8), list_209422)
        # Assigning a type to the variable 'container_name' (line 590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 8), 'container_name', for_loop_var_209429)
        # SSA begins for a for statement (line 590)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 592):
        
        # Assigning a Call to a Name (line 592):
        
        # Call to getattr(...): (line 592)
        # Processing the call arguments (line 592)
        # Getting the type of 'self' (line 592)
        self_209431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 32), 'self', False)
        # Getting the type of 'container_name' (line 592)
        container_name_209432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 38), 'container_name', False)
        # Processing the call keyword arguments (line 592)
        kwargs_209433 = {}
        # Getting the type of 'getattr' (line 592)
        getattr_209430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 24), 'getattr', False)
        # Calling getattr(args, kwargs) (line 592)
        getattr_call_result_209434 = invoke(stypy.reporting.localization.Localization(__file__, 592, 24), getattr_209430, *[self_209431, container_name_209432], **kwargs_209433)
        
        # Assigning a type to the variable 'container' (line 592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 12), 'container', getattr_call_result_209434)
        
        # Getting the type of 'container' (line 593)
        container_209435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 26), 'container')
        # Testing the type of a for loop iterable (line 593)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 593, 12), container_209435)
        # Getting the type of the for loop variable (line 593)
        for_loop_var_209436 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 593, 12), container_209435)
        # Assigning a type to the variable 'artist' (line 593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 12), 'artist', for_loop_var_209436)
        # SSA begins for a for statement (line 593)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Attribute to a Attribute (line 594):
        
        # Assigning a Attribute to a Attribute (line 594):
        # Getting the type of 'container' (line 594)
        container_209437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 40), 'container')
        # Obtaining the member 'remove' of a type (line 594)
        remove_209438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 40), container_209437, 'remove')
        # Getting the type of 'artist' (line 594)
        artist_209439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 16), 'artist')
        # Setting the type of the member '_remove_method' of a type (line 594)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 16), artist_209439, '_remove_method', remove_209438)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 595):
        
        # Assigning a Name to a Attribute (line 595):
        # Getting the type of 'True' (line 595)
        True_209440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 22), 'True')
        # Getting the type of 'self' (line 595)
        self_209441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 8), 'self')
        # Setting the type of the member '_stale' of a type (line 595)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 8), self_209441, '_stale', True_209440)
        
        # ################# End of '__setstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 587)
        stypy_return_type_209442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209442)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setstate__'
        return stypy_return_type_209442


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 597, 4, False)
        # Assigning a type to the variable 'self' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_window_extent.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_window_extent')
        _AxesBase.get_window_extent.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _AxesBase.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _AxesBase.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_window_extent', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        unicode_209443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, (-1)), 'unicode', u'\n        get the axes bounding box in display space; *args* and\n        *kwargs* are empty\n        ')
        
        # Assigning a Attribute to a Name (line 602):
        
        # Assigning a Attribute to a Name (line 602):
        # Getting the type of 'self' (line 602)
        self_209444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 15), 'self')
        # Obtaining the member 'bbox' of a type (line 602)
        bbox_209445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 15), self_209444, 'bbox')
        # Assigning a type to the variable 'bbox' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 8), 'bbox', bbox_209445)
        
        # Assigning a Call to a Name (line 603):
        
        # Assigning a Call to a Name (line 603):
        
        # Call to get_tick_padding(...): (line 603)
        # Processing the call keyword arguments (line 603)
        kwargs_209449 = {}
        # Getting the type of 'self' (line 603)
        self_209446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 16), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 603)
        xaxis_209447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 16), self_209446, 'xaxis')
        # Obtaining the member 'get_tick_padding' of a type (line 603)
        get_tick_padding_209448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 16), xaxis_209447, 'get_tick_padding')
        # Calling get_tick_padding(args, kwargs) (line 603)
        get_tick_padding_call_result_209450 = invoke(stypy.reporting.localization.Localization(__file__, 603, 16), get_tick_padding_209448, *[], **kwargs_209449)
        
        # Assigning a type to the variable 'x_pad' (line 603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 8), 'x_pad', get_tick_padding_call_result_209450)
        
        # Assigning a Call to a Name (line 604):
        
        # Assigning a Call to a Name (line 604):
        
        # Call to get_tick_padding(...): (line 604)
        # Processing the call keyword arguments (line 604)
        kwargs_209454 = {}
        # Getting the type of 'self' (line 604)
        self_209451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 16), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 604)
        yaxis_209452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 16), self_209451, 'yaxis')
        # Obtaining the member 'get_tick_padding' of a type (line 604)
        get_tick_padding_209453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 16), yaxis_209452, 'get_tick_padding')
        # Calling get_tick_padding(args, kwargs) (line 604)
        get_tick_padding_call_result_209455 = invoke(stypy.reporting.localization.Localization(__file__, 604, 16), get_tick_padding_209453, *[], **kwargs_209454)
        
        # Assigning a type to the variable 'y_pad' (line 604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 8), 'y_pad', get_tick_padding_call_result_209455)
        
        # Call to Bbox(...): (line 605)
        # Processing the call arguments (line 605)
        
        # Obtaining an instance of the builtin type 'list' (line 605)
        list_209458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 605)
        # Adding element type (line 605)
        
        # Obtaining an instance of the builtin type 'list' (line 605)
        list_209459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 605)
        # Adding element type (line 605)
        # Getting the type of 'bbox' (line 605)
        bbox_209460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 34), 'bbox', False)
        # Obtaining the member 'x0' of a type (line 605)
        x0_209461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 34), bbox_209460, 'x0')
        # Getting the type of 'x_pad' (line 605)
        x_pad_209462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 44), 'x_pad', False)
        # Applying the binary operator '-' (line 605)
        result_sub_209463 = python_operator(stypy.reporting.localization.Localization(__file__, 605, 34), '-', x0_209461, x_pad_209462)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 33), list_209459, result_sub_209463)
        # Adding element type (line 605)
        # Getting the type of 'bbox' (line 605)
        bbox_209464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 51), 'bbox', False)
        # Obtaining the member 'y0' of a type (line 605)
        y0_209465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 51), bbox_209464, 'y0')
        # Getting the type of 'y_pad' (line 605)
        y_pad_209466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 61), 'y_pad', False)
        # Applying the binary operator '-' (line 605)
        result_sub_209467 = python_operator(stypy.reporting.localization.Localization(__file__, 605, 51), '-', y0_209465, y_pad_209466)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 33), list_209459, result_sub_209467)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 32), list_209458, list_209459)
        # Adding element type (line 605)
        
        # Obtaining an instance of the builtin type 'list' (line 606)
        list_209468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 606)
        # Adding element type (line 606)
        # Getting the type of 'bbox' (line 606)
        bbox_209469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 34), 'bbox', False)
        # Obtaining the member 'x1' of a type (line 606)
        x1_209470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 34), bbox_209469, 'x1')
        # Getting the type of 'x_pad' (line 606)
        x_pad_209471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 44), 'x_pad', False)
        # Applying the binary operator '+' (line 606)
        result_add_209472 = python_operator(stypy.reporting.localization.Localization(__file__, 606, 34), '+', x1_209470, x_pad_209471)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 606, 33), list_209468, result_add_209472)
        # Adding element type (line 606)
        # Getting the type of 'bbox' (line 606)
        bbox_209473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 51), 'bbox', False)
        # Obtaining the member 'y1' of a type (line 606)
        y1_209474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 51), bbox_209473, 'y1')
        # Getting the type of 'y_pad' (line 606)
        y_pad_209475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 61), 'y_pad', False)
        # Applying the binary operator '+' (line 606)
        result_add_209476 = python_operator(stypy.reporting.localization.Localization(__file__, 606, 51), '+', y1_209474, y_pad_209475)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 606, 33), list_209468, result_add_209476)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 32), list_209458, list_209468)
        
        # Processing the call keyword arguments (line 605)
        kwargs_209477 = {}
        # Getting the type of 'mtransforms' (line 605)
        mtransforms_209456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 15), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 605)
        Bbox_209457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 15), mtransforms_209456, 'Bbox')
        # Calling Bbox(args, kwargs) (line 605)
        Bbox_call_result_209478 = invoke(stypy.reporting.localization.Localization(__file__, 605, 15), Bbox_209457, *[list_209458], **kwargs_209477)
        
        # Assigning a type to the variable 'stypy_return_type' (line 605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'stypy_return_type', Bbox_call_result_209478)
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 597)
        stypy_return_type_209479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209479)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_209479


    @norecursion
    def _init_axis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_init_axis'
        module_type_store = module_type_store.open_function_context('_init_axis', 608, 4, False)
        # Assigning a type to the variable 'self' (line 609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._init_axis.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._init_axis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._init_axis.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._init_axis.__dict__.__setitem__('stypy_function_name', '_AxesBase._init_axis')
        _AxesBase._init_axis.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase._init_axis.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._init_axis.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._init_axis.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._init_axis.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._init_axis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._init_axis.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._init_axis', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_init_axis', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_init_axis(...)' code ##################

        unicode_209480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 8), 'unicode', u"move this out of __init__ because non-separable axes don't use it")
        
        # Assigning a Call to a Attribute (line 610):
        
        # Assigning a Call to a Attribute (line 610):
        
        # Call to XAxis(...): (line 610)
        # Processing the call arguments (line 610)
        # Getting the type of 'self' (line 610)
        self_209483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 33), 'self', False)
        # Processing the call keyword arguments (line 610)
        kwargs_209484 = {}
        # Getting the type of 'maxis' (line 610)
        maxis_209481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 21), 'maxis', False)
        # Obtaining the member 'XAxis' of a type (line 610)
        XAxis_209482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 21), maxis_209481, 'XAxis')
        # Calling XAxis(args, kwargs) (line 610)
        XAxis_call_result_209485 = invoke(stypy.reporting.localization.Localization(__file__, 610, 21), XAxis_209482, *[self_209483], **kwargs_209484)
        
        # Getting the type of 'self' (line 610)
        self_209486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 8), 'self')
        # Setting the type of the member 'xaxis' of a type (line 610)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 8), self_209486, 'xaxis', XAxis_call_result_209485)
        
        # Call to register_axis(...): (line 611)
        # Processing the call arguments (line 611)
        # Getting the type of 'self' (line 611)
        self_209493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 44), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 611)
        xaxis_209494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 44), self_209493, 'xaxis')
        # Processing the call keyword arguments (line 611)
        kwargs_209495 = {}
        
        # Obtaining the type of the subscript
        unicode_209487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, 20), 'unicode', u'bottom')
        # Getting the type of 'self' (line 611)
        self_209488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 8), 'self', False)
        # Obtaining the member 'spines' of a type (line 611)
        spines_209489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 8), self_209488, 'spines')
        # Obtaining the member '__getitem__' of a type (line 611)
        getitem___209490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 8), spines_209489, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 611)
        subscript_call_result_209491 = invoke(stypy.reporting.localization.Localization(__file__, 611, 8), getitem___209490, unicode_209487)
        
        # Obtaining the member 'register_axis' of a type (line 611)
        register_axis_209492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 8), subscript_call_result_209491, 'register_axis')
        # Calling register_axis(args, kwargs) (line 611)
        register_axis_call_result_209496 = invoke(stypy.reporting.localization.Localization(__file__, 611, 8), register_axis_209492, *[xaxis_209494], **kwargs_209495)
        
        
        # Call to register_axis(...): (line 612)
        # Processing the call arguments (line 612)
        # Getting the type of 'self' (line 612)
        self_209503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 41), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 612)
        xaxis_209504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 41), self_209503, 'xaxis')
        # Processing the call keyword arguments (line 612)
        kwargs_209505 = {}
        
        # Obtaining the type of the subscript
        unicode_209497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 20), 'unicode', u'top')
        # Getting the type of 'self' (line 612)
        self_209498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'self', False)
        # Obtaining the member 'spines' of a type (line 612)
        spines_209499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 8), self_209498, 'spines')
        # Obtaining the member '__getitem__' of a type (line 612)
        getitem___209500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 8), spines_209499, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 612)
        subscript_call_result_209501 = invoke(stypy.reporting.localization.Localization(__file__, 612, 8), getitem___209500, unicode_209497)
        
        # Obtaining the member 'register_axis' of a type (line 612)
        register_axis_209502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 8), subscript_call_result_209501, 'register_axis')
        # Calling register_axis(args, kwargs) (line 612)
        register_axis_call_result_209506 = invoke(stypy.reporting.localization.Localization(__file__, 612, 8), register_axis_209502, *[xaxis_209504], **kwargs_209505)
        
        
        # Assigning a Call to a Attribute (line 613):
        
        # Assigning a Call to a Attribute (line 613):
        
        # Call to YAxis(...): (line 613)
        # Processing the call arguments (line 613)
        # Getting the type of 'self' (line 613)
        self_209509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 33), 'self', False)
        # Processing the call keyword arguments (line 613)
        kwargs_209510 = {}
        # Getting the type of 'maxis' (line 613)
        maxis_209507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 21), 'maxis', False)
        # Obtaining the member 'YAxis' of a type (line 613)
        YAxis_209508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 21), maxis_209507, 'YAxis')
        # Calling YAxis(args, kwargs) (line 613)
        YAxis_call_result_209511 = invoke(stypy.reporting.localization.Localization(__file__, 613, 21), YAxis_209508, *[self_209509], **kwargs_209510)
        
        # Getting the type of 'self' (line 613)
        self_209512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 8), 'self')
        # Setting the type of the member 'yaxis' of a type (line 613)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 8), self_209512, 'yaxis', YAxis_call_result_209511)
        
        # Call to register_axis(...): (line 614)
        # Processing the call arguments (line 614)
        # Getting the type of 'self' (line 614)
        self_209519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 42), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 614)
        yaxis_209520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 42), self_209519, 'yaxis')
        # Processing the call keyword arguments (line 614)
        kwargs_209521 = {}
        
        # Obtaining the type of the subscript
        unicode_209513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 20), 'unicode', u'left')
        # Getting the type of 'self' (line 614)
        self_209514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 8), 'self', False)
        # Obtaining the member 'spines' of a type (line 614)
        spines_209515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 8), self_209514, 'spines')
        # Obtaining the member '__getitem__' of a type (line 614)
        getitem___209516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 8), spines_209515, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 614)
        subscript_call_result_209517 = invoke(stypy.reporting.localization.Localization(__file__, 614, 8), getitem___209516, unicode_209513)
        
        # Obtaining the member 'register_axis' of a type (line 614)
        register_axis_209518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 8), subscript_call_result_209517, 'register_axis')
        # Calling register_axis(args, kwargs) (line 614)
        register_axis_call_result_209522 = invoke(stypy.reporting.localization.Localization(__file__, 614, 8), register_axis_209518, *[yaxis_209520], **kwargs_209521)
        
        
        # Call to register_axis(...): (line 615)
        # Processing the call arguments (line 615)
        # Getting the type of 'self' (line 615)
        self_209529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 43), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 615)
        yaxis_209530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 43), self_209529, 'yaxis')
        # Processing the call keyword arguments (line 615)
        kwargs_209531 = {}
        
        # Obtaining the type of the subscript
        unicode_209523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 20), 'unicode', u'right')
        # Getting the type of 'self' (line 615)
        self_209524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 8), 'self', False)
        # Obtaining the member 'spines' of a type (line 615)
        spines_209525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 8), self_209524, 'spines')
        # Obtaining the member '__getitem__' of a type (line 615)
        getitem___209526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 8), spines_209525, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 615)
        subscript_call_result_209527 = invoke(stypy.reporting.localization.Localization(__file__, 615, 8), getitem___209526, unicode_209523)
        
        # Obtaining the member 'register_axis' of a type (line 615)
        register_axis_209528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 8), subscript_call_result_209527, 'register_axis')
        # Calling register_axis(args, kwargs) (line 615)
        register_axis_call_result_209532 = invoke(stypy.reporting.localization.Localization(__file__, 615, 8), register_axis_209528, *[yaxis_209530], **kwargs_209531)
        
        
        # Call to _update_transScale(...): (line 616)
        # Processing the call keyword arguments (line 616)
        kwargs_209535 = {}
        # Getting the type of 'self' (line 616)
        self_209533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'self', False)
        # Obtaining the member '_update_transScale' of a type (line 616)
        _update_transScale_209534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 8), self_209533, '_update_transScale')
        # Calling _update_transScale(args, kwargs) (line 616)
        _update_transScale_call_result_209536 = invoke(stypy.reporting.localization.Localization(__file__, 616, 8), _update_transScale_209534, *[], **kwargs_209535)
        
        
        # ################# End of '_init_axis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_init_axis' in the type store
        # Getting the type of 'stypy_return_type' (line 608)
        stypy_return_type_209537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209537)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_init_axis'
        return stypy_return_type_209537


    @norecursion
    def set_figure(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_figure'
        module_type_store = module_type_store.open_function_context('set_figure', 618, 4, False)
        # Assigning a type to the variable 'self' (line 619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_figure.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_figure.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_figure.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_figure.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_figure')
        _AxesBase.set_figure.__dict__.__setitem__('stypy_param_names_list', ['fig'])
        _AxesBase.set_figure.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_figure.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_figure.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_figure.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_figure.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_figure.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_figure', ['fig'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_figure', localization, ['fig'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_figure(...)' code ##################

        unicode_209538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 623, (-1)), 'unicode', u'\n        Set the class:`~matplotlib.axes.Axes` figure\n\n        accepts a class:`~matplotlib.figure.Figure` instance\n        ')
        
        # Call to set_figure(...): (line 624)
        # Processing the call arguments (line 624)
        # Getting the type of 'self' (line 624)
        self_209542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 34), 'self', False)
        # Getting the type of 'fig' (line 624)
        fig_209543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 40), 'fig', False)
        # Processing the call keyword arguments (line 624)
        kwargs_209544 = {}
        # Getting the type of 'martist' (line 624)
        martist_209539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 8), 'martist', False)
        # Obtaining the member 'Artist' of a type (line 624)
        Artist_209540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 8), martist_209539, 'Artist')
        # Obtaining the member 'set_figure' of a type (line 624)
        set_figure_209541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 8), Artist_209540, 'set_figure')
        # Calling set_figure(args, kwargs) (line 624)
        set_figure_call_result_209545 = invoke(stypy.reporting.localization.Localization(__file__, 624, 8), set_figure_209541, *[self_209542, fig_209543], **kwargs_209544)
        
        
        # Assigning a Call to a Attribute (line 626):
        
        # Assigning a Call to a Attribute (line 626):
        
        # Call to TransformedBbox(...): (line 626)
        # Processing the call arguments (line 626)
        # Getting the type of 'self' (line 626)
        self_209548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 48), 'self', False)
        # Obtaining the member '_position' of a type (line 626)
        _position_209549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 48), self_209548, '_position')
        # Getting the type of 'fig' (line 627)
        fig_209550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 48), 'fig', False)
        # Obtaining the member 'transFigure' of a type (line 627)
        transFigure_209551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 48), fig_209550, 'transFigure')
        # Processing the call keyword arguments (line 626)
        kwargs_209552 = {}
        # Getting the type of 'mtransforms' (line 626)
        mtransforms_209546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 20), 'mtransforms', False)
        # Obtaining the member 'TransformedBbox' of a type (line 626)
        TransformedBbox_209547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 20), mtransforms_209546, 'TransformedBbox')
        # Calling TransformedBbox(args, kwargs) (line 626)
        TransformedBbox_call_result_209553 = invoke(stypy.reporting.localization.Localization(__file__, 626, 20), TransformedBbox_209547, *[_position_209549, transFigure_209551], **kwargs_209552)
        
        # Getting the type of 'self' (line 626)
        self_209554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 8), 'self')
        # Setting the type of the member 'bbox' of a type (line 626)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 8), self_209554, 'bbox', TransformedBbox_call_result_209553)
        
        # Assigning a Call to a Attribute (line 629):
        
        # Assigning a Call to a Attribute (line 629):
        
        # Call to null(...): (line 629)
        # Processing the call keyword arguments (line 629)
        kwargs_209558 = {}
        # Getting the type of 'mtransforms' (line 629)
        mtransforms_209555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 23), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 629)
        Bbox_209556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 23), mtransforms_209555, 'Bbox')
        # Obtaining the member 'null' of a type (line 629)
        null_209557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 23), Bbox_209556, 'null')
        # Calling null(args, kwargs) (line 629)
        null_call_result_209559 = invoke(stypy.reporting.localization.Localization(__file__, 629, 23), null_209557, *[], **kwargs_209558)
        
        # Getting the type of 'self' (line 629)
        self_209560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 8), 'self')
        # Setting the type of the member 'dataLim' of a type (line 629)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 8), self_209560, 'dataLim', null_call_result_209559)
        
        # Assigning a Call to a Attribute (line 630):
        
        # Assigning a Call to a Attribute (line 630):
        
        # Call to unit(...): (line 630)
        # Processing the call keyword arguments (line 630)
        kwargs_209564 = {}
        # Getting the type of 'mtransforms' (line 630)
        mtransforms_209561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 23), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 630)
        Bbox_209562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 23), mtransforms_209561, 'Bbox')
        # Obtaining the member 'unit' of a type (line 630)
        unit_209563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 23), Bbox_209562, 'unit')
        # Calling unit(args, kwargs) (line 630)
        unit_call_result_209565 = invoke(stypy.reporting.localization.Localization(__file__, 630, 23), unit_209563, *[], **kwargs_209564)
        
        # Getting the type of 'self' (line 630)
        self_209566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 8), 'self')
        # Setting the type of the member 'viewLim' of a type (line 630)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 8), self_209566, 'viewLim', unit_call_result_209565)
        
        # Assigning a Call to a Attribute (line 631):
        
        # Assigning a Call to a Attribute (line 631):
        
        # Call to TransformWrapper(...): (line 631)
        # Processing the call arguments (line 631)
        
        # Call to IdentityTransform(...): (line 632)
        # Processing the call keyword arguments (line 632)
        kwargs_209571 = {}
        # Getting the type of 'mtransforms' (line 632)
        mtransforms_209569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 12), 'mtransforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 632)
        IdentityTransform_209570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 632, 12), mtransforms_209569, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 632)
        IdentityTransform_call_result_209572 = invoke(stypy.reporting.localization.Localization(__file__, 632, 12), IdentityTransform_209570, *[], **kwargs_209571)
        
        # Processing the call keyword arguments (line 631)
        kwargs_209573 = {}
        # Getting the type of 'mtransforms' (line 631)
        mtransforms_209567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 26), 'mtransforms', False)
        # Obtaining the member 'TransformWrapper' of a type (line 631)
        TransformWrapper_209568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 631, 26), mtransforms_209567, 'TransformWrapper')
        # Calling TransformWrapper(args, kwargs) (line 631)
        TransformWrapper_call_result_209574 = invoke(stypy.reporting.localization.Localization(__file__, 631, 26), TransformWrapper_209568, *[IdentityTransform_call_result_209572], **kwargs_209573)
        
        # Getting the type of 'self' (line 631)
        self_209575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 8), 'self')
        # Setting the type of the member 'transScale' of a type (line 631)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 631, 8), self_209575, 'transScale', TransformWrapper_call_result_209574)
        
        # Call to _set_lim_and_transforms(...): (line 634)
        # Processing the call keyword arguments (line 634)
        kwargs_209578 = {}
        # Getting the type of 'self' (line 634)
        self_209576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'self', False)
        # Obtaining the member '_set_lim_and_transforms' of a type (line 634)
        _set_lim_and_transforms_209577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 8), self_209576, '_set_lim_and_transforms')
        # Calling _set_lim_and_transforms(args, kwargs) (line 634)
        _set_lim_and_transforms_call_result_209579 = invoke(stypy.reporting.localization.Localization(__file__, 634, 8), _set_lim_and_transforms_209577, *[], **kwargs_209578)
        
        
        # ################# End of 'set_figure(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_figure' in the type store
        # Getting the type of 'stypy_return_type' (line 618)
        stypy_return_type_209580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209580)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_figure'
        return stypy_return_type_209580


    @norecursion
    def _set_lim_and_transforms(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_lim_and_transforms'
        module_type_store = module_type_store.open_function_context('_set_lim_and_transforms', 636, 4, False)
        # Assigning a type to the variable 'self' (line 637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 637, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._set_lim_and_transforms.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._set_lim_and_transforms.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._set_lim_and_transforms.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._set_lim_and_transforms.__dict__.__setitem__('stypy_function_name', '_AxesBase._set_lim_and_transforms')
        _AxesBase._set_lim_and_transforms.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase._set_lim_and_transforms.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._set_lim_and_transforms.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._set_lim_and_transforms.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._set_lim_and_transforms.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._set_lim_and_transforms.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._set_lim_and_transforms.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._set_lim_and_transforms', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_lim_and_transforms', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_lim_and_transforms(...)' code ##################

        unicode_209581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 652, (-1)), 'unicode', u'\n        set the *dataLim* and *viewLim*\n        :class:`~matplotlib.transforms.Bbox` attributes and the\n        *transScale*, *transData*, *transLimits* and *transAxes*\n        transformations.\n\n        .. note::\n\n            This method is primarily used by rectilinear projections\n            of the :class:`~matplotlib.axes.Axes` class, and is meant\n            to be overridden by new kinds of projection axes that need\n            different transformations and limits. (See\n            :class:`~matplotlib.projections.polar.PolarAxes` for an\n            example.\n\n        ')
        
        # Assigning a Call to a Attribute (line 653):
        
        # Assigning a Call to a Attribute (line 653):
        
        # Call to BboxTransformTo(...): (line 653)
        # Processing the call arguments (line 653)
        # Getting the type of 'self' (line 653)
        self_209584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 53), 'self', False)
        # Obtaining the member 'bbox' of a type (line 653)
        bbox_209585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 53), self_209584, 'bbox')
        # Processing the call keyword arguments (line 653)
        kwargs_209586 = {}
        # Getting the type of 'mtransforms' (line 653)
        mtransforms_209582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 25), 'mtransforms', False)
        # Obtaining the member 'BboxTransformTo' of a type (line 653)
        BboxTransformTo_209583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 25), mtransforms_209582, 'BboxTransformTo')
        # Calling BboxTransformTo(args, kwargs) (line 653)
        BboxTransformTo_call_result_209587 = invoke(stypy.reporting.localization.Localization(__file__, 653, 25), BboxTransformTo_209583, *[bbox_209585], **kwargs_209586)
        
        # Getting the type of 'self' (line 653)
        self_209588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 8), 'self')
        # Setting the type of the member 'transAxes' of a type (line 653)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 8), self_209588, 'transAxes', BboxTransformTo_call_result_209587)
        
        # Assigning a Call to a Attribute (line 658):
        
        # Assigning a Call to a Attribute (line 658):
        
        # Call to TransformWrapper(...): (line 658)
        # Processing the call arguments (line 658)
        
        # Call to IdentityTransform(...): (line 659)
        # Processing the call keyword arguments (line 659)
        kwargs_209593 = {}
        # Getting the type of 'mtransforms' (line 659)
        mtransforms_209591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 12), 'mtransforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 659)
        IdentityTransform_209592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 12), mtransforms_209591, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 659)
        IdentityTransform_call_result_209594 = invoke(stypy.reporting.localization.Localization(__file__, 659, 12), IdentityTransform_209592, *[], **kwargs_209593)
        
        # Processing the call keyword arguments (line 658)
        kwargs_209595 = {}
        # Getting the type of 'mtransforms' (line 658)
        mtransforms_209589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 26), 'mtransforms', False)
        # Obtaining the member 'TransformWrapper' of a type (line 658)
        TransformWrapper_209590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 26), mtransforms_209589, 'TransformWrapper')
        # Calling TransformWrapper(args, kwargs) (line 658)
        TransformWrapper_call_result_209596 = invoke(stypy.reporting.localization.Localization(__file__, 658, 26), TransformWrapper_209590, *[IdentityTransform_call_result_209594], **kwargs_209595)
        
        # Getting the type of 'self' (line 658)
        self_209597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 8), 'self')
        # Setting the type of the member 'transScale' of a type (line 658)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 8), self_209597, 'transScale', TransformWrapper_call_result_209596)
        
        # Assigning a Call to a Attribute (line 663):
        
        # Assigning a Call to a Attribute (line 663):
        
        # Call to BboxTransformFrom(...): (line 663)
        # Processing the call arguments (line 663)
        
        # Call to TransformedBbox(...): (line 664)
        # Processing the call arguments (line 664)
        # Getting the type of 'self' (line 664)
        self_209602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 40), 'self', False)
        # Obtaining the member 'viewLim' of a type (line 664)
        viewLim_209603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 40), self_209602, 'viewLim')
        # Getting the type of 'self' (line 664)
        self_209604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 54), 'self', False)
        # Obtaining the member 'transScale' of a type (line 664)
        transScale_209605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 54), self_209604, 'transScale')
        # Processing the call keyword arguments (line 664)
        kwargs_209606 = {}
        # Getting the type of 'mtransforms' (line 664)
        mtransforms_209600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 12), 'mtransforms', False)
        # Obtaining the member 'TransformedBbox' of a type (line 664)
        TransformedBbox_209601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 12), mtransforms_209600, 'TransformedBbox')
        # Calling TransformedBbox(args, kwargs) (line 664)
        TransformedBbox_call_result_209607 = invoke(stypy.reporting.localization.Localization(__file__, 664, 12), TransformedBbox_209601, *[viewLim_209603, transScale_209605], **kwargs_209606)
        
        # Processing the call keyword arguments (line 663)
        kwargs_209608 = {}
        # Getting the type of 'mtransforms' (line 663)
        mtransforms_209598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 27), 'mtransforms', False)
        # Obtaining the member 'BboxTransformFrom' of a type (line 663)
        BboxTransformFrom_209599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 663, 27), mtransforms_209598, 'BboxTransformFrom')
        # Calling BboxTransformFrom(args, kwargs) (line 663)
        BboxTransformFrom_call_result_209609 = invoke(stypy.reporting.localization.Localization(__file__, 663, 27), BboxTransformFrom_209599, *[TransformedBbox_call_result_209607], **kwargs_209608)
        
        # Getting the type of 'self' (line 663)
        self_209610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 8), 'self')
        # Setting the type of the member 'transLimits' of a type (line 663)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 663, 8), self_209610, 'transLimits', BboxTransformFrom_call_result_209609)
        
        # Assigning a BinOp to a Attribute (line 669):
        
        # Assigning a BinOp to a Attribute (line 669):
        # Getting the type of 'self' (line 669)
        self_209611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 25), 'self')
        # Obtaining the member 'transScale' of a type (line 669)
        transScale_209612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 25), self_209611, 'transScale')
        # Getting the type of 'self' (line 669)
        self_209613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 44), 'self')
        # Obtaining the member 'transLimits' of a type (line 669)
        transLimits_209614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 44), self_209613, 'transLimits')
        # Getting the type of 'self' (line 669)
        self_209615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 63), 'self')
        # Obtaining the member 'transAxes' of a type (line 669)
        transAxes_209616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 63), self_209615, 'transAxes')
        # Applying the binary operator '+' (line 669)
        result_add_209617 = python_operator(stypy.reporting.localization.Localization(__file__, 669, 44), '+', transLimits_209614, transAxes_209616)
        
        # Applying the binary operator '+' (line 669)
        result_add_209618 = python_operator(stypy.reporting.localization.Localization(__file__, 669, 25), '+', transScale_209612, result_add_209617)
        
        # Getting the type of 'self' (line 669)
        self_209619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 8), 'self')
        # Setting the type of the member 'transData' of a type (line 669)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 8), self_209619, 'transData', result_add_209618)
        
        # Assigning a Call to a Attribute (line 671):
        
        # Assigning a Call to a Attribute (line 671):
        
        # Call to blended_transform_factory(...): (line 671)
        # Processing the call arguments (line 671)
        # Getting the type of 'self' (line 672)
        self_209622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 12), 'self', False)
        # Obtaining the member 'transData' of a type (line 672)
        transData_209623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 12), self_209622, 'transData')
        # Getting the type of 'self' (line 672)
        self_209624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 28), 'self', False)
        # Obtaining the member 'transAxes' of a type (line 672)
        transAxes_209625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 28), self_209624, 'transAxes')
        # Processing the call keyword arguments (line 671)
        kwargs_209626 = {}
        # Getting the type of 'mtransforms' (line 671)
        mtransforms_209620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 32), 'mtransforms', False)
        # Obtaining the member 'blended_transform_factory' of a type (line 671)
        blended_transform_factory_209621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 32), mtransforms_209620, 'blended_transform_factory')
        # Calling blended_transform_factory(args, kwargs) (line 671)
        blended_transform_factory_call_result_209627 = invoke(stypy.reporting.localization.Localization(__file__, 671, 32), blended_transform_factory_209621, *[transData_209623, transAxes_209625], **kwargs_209626)
        
        # Getting the type of 'self' (line 671)
        self_209628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 8), 'self')
        # Setting the type of the member '_xaxis_transform' of a type (line 671)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 8), self_209628, '_xaxis_transform', blended_transform_factory_call_result_209627)
        
        # Assigning a Call to a Attribute (line 673):
        
        # Assigning a Call to a Attribute (line 673):
        
        # Call to blended_transform_factory(...): (line 673)
        # Processing the call arguments (line 673)
        # Getting the type of 'self' (line 674)
        self_209631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 12), 'self', False)
        # Obtaining the member 'transAxes' of a type (line 674)
        transAxes_209632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 12), self_209631, 'transAxes')
        # Getting the type of 'self' (line 674)
        self_209633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 28), 'self', False)
        # Obtaining the member 'transData' of a type (line 674)
        transData_209634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 28), self_209633, 'transData')
        # Processing the call keyword arguments (line 673)
        kwargs_209635 = {}
        # Getting the type of 'mtransforms' (line 673)
        mtransforms_209629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 32), 'mtransforms', False)
        # Obtaining the member 'blended_transform_factory' of a type (line 673)
        blended_transform_factory_209630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 32), mtransforms_209629, 'blended_transform_factory')
        # Calling blended_transform_factory(args, kwargs) (line 673)
        blended_transform_factory_call_result_209636 = invoke(stypy.reporting.localization.Localization(__file__, 673, 32), blended_transform_factory_209630, *[transAxes_209632, transData_209634], **kwargs_209635)
        
        # Getting the type of 'self' (line 673)
        self_209637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 8), 'self')
        # Setting the type of the member '_yaxis_transform' of a type (line 673)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 8), self_209637, '_yaxis_transform', blended_transform_factory_call_result_209636)
        
        # ################# End of '_set_lim_and_transforms(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_lim_and_transforms' in the type store
        # Getting the type of 'stypy_return_type' (line 636)
        stypy_return_type_209638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209638)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_lim_and_transforms'
        return stypy_return_type_209638


    @norecursion
    def get_xaxis_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_209639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 40), 'unicode', u'grid')
        defaults = [unicode_209639]
        # Create a new context for function 'get_xaxis_transform'
        module_type_store = module_type_store.open_function_context('get_xaxis_transform', 676, 4, False)
        # Assigning a type to the variable 'self' (line 677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_xaxis_transform.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_xaxis_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_xaxis_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_xaxis_transform.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_xaxis_transform')
        _AxesBase.get_xaxis_transform.__dict__.__setitem__('stypy_param_names_list', ['which'])
        _AxesBase.get_xaxis_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_xaxis_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_xaxis_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_xaxis_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_xaxis_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_xaxis_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_xaxis_transform', ['which'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xaxis_transform', localization, ['which'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xaxis_transform(...)' code ##################

        unicode_209640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 689, (-1)), 'unicode', u'\n        Get the transformation used for drawing x-axis labels, ticks\n        and gridlines.  The x-direction is in data coordinates and the\n        y-direction is in axis coordinates.\n\n        .. note::\n\n            This transformation is primarily used by the\n            :class:`~matplotlib.axis.Axis` class, and is meant to be\n            overridden by new kinds of projections that may need to\n            place axis elements in different locations.\n\n        ')
        
        
        # Getting the type of 'which' (line 690)
        which_209641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 11), 'which')
        unicode_209642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 690, 20), 'unicode', u'grid')
        # Applying the binary operator '==' (line 690)
        result_eq_209643 = python_operator(stypy.reporting.localization.Localization(__file__, 690, 11), '==', which_209641, unicode_209642)
        
        # Testing the type of an if condition (line 690)
        if_condition_209644 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 690, 8), result_eq_209643)
        # Assigning a type to the variable 'if_condition_209644' (line 690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 8), 'if_condition_209644', if_condition_209644)
        # SSA begins for if statement (line 690)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 691)
        self_209645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 19), 'self')
        # Obtaining the member '_xaxis_transform' of a type (line 691)
        _xaxis_transform_209646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 19), self_209645, '_xaxis_transform')
        # Assigning a type to the variable 'stypy_return_type' (line 691)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 12), 'stypy_return_type', _xaxis_transform_209646)
        # SSA branch for the else part of an if statement (line 690)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'which' (line 692)
        which_209647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 13), 'which')
        unicode_209648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 22), 'unicode', u'tick1')
        # Applying the binary operator '==' (line 692)
        result_eq_209649 = python_operator(stypy.reporting.localization.Localization(__file__, 692, 13), '==', which_209647, unicode_209648)
        
        # Testing the type of an if condition (line 692)
        if_condition_209650 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 692, 13), result_eq_209649)
        # Assigning a type to the variable 'if_condition_209650' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 13), 'if_condition_209650', if_condition_209650)
        # SSA begins for if statement (line 692)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to get_spine_transform(...): (line 694)
        # Processing the call keyword arguments (line 694)
        kwargs_209657 = {}
        
        # Obtaining the type of the subscript
        unicode_209651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 694, 31), 'unicode', u'bottom')
        # Getting the type of 'self' (line 694)
        self_209652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 19), 'self', False)
        # Obtaining the member 'spines' of a type (line 694)
        spines_209653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 19), self_209652, 'spines')
        # Obtaining the member '__getitem__' of a type (line 694)
        getitem___209654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 19), spines_209653, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 694)
        subscript_call_result_209655 = invoke(stypy.reporting.localization.Localization(__file__, 694, 19), getitem___209654, unicode_209651)
        
        # Obtaining the member 'get_spine_transform' of a type (line 694)
        get_spine_transform_209656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 19), subscript_call_result_209655, 'get_spine_transform')
        # Calling get_spine_transform(args, kwargs) (line 694)
        get_spine_transform_call_result_209658 = invoke(stypy.reporting.localization.Localization(__file__, 694, 19), get_spine_transform_209656, *[], **kwargs_209657)
        
        # Assigning a type to the variable 'stypy_return_type' (line 694)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 12), 'stypy_return_type', get_spine_transform_call_result_209658)
        # SSA branch for the else part of an if statement (line 692)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'which' (line 695)
        which_209659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 13), 'which')
        unicode_209660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 695, 22), 'unicode', u'tick2')
        # Applying the binary operator '==' (line 695)
        result_eq_209661 = python_operator(stypy.reporting.localization.Localization(__file__, 695, 13), '==', which_209659, unicode_209660)
        
        # Testing the type of an if condition (line 695)
        if_condition_209662 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 695, 13), result_eq_209661)
        # Assigning a type to the variable 'if_condition_209662' (line 695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 695, 13), 'if_condition_209662', if_condition_209662)
        # SSA begins for if statement (line 695)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to get_spine_transform(...): (line 697)
        # Processing the call keyword arguments (line 697)
        kwargs_209669 = {}
        
        # Obtaining the type of the subscript
        unicode_209663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 31), 'unicode', u'top')
        # Getting the type of 'self' (line 697)
        self_209664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 19), 'self', False)
        # Obtaining the member 'spines' of a type (line 697)
        spines_209665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 19), self_209664, 'spines')
        # Obtaining the member '__getitem__' of a type (line 697)
        getitem___209666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 19), spines_209665, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 697)
        subscript_call_result_209667 = invoke(stypy.reporting.localization.Localization(__file__, 697, 19), getitem___209666, unicode_209663)
        
        # Obtaining the member 'get_spine_transform' of a type (line 697)
        get_spine_transform_209668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 19), subscript_call_result_209667, 'get_spine_transform')
        # Calling get_spine_transform(args, kwargs) (line 697)
        get_spine_transform_call_result_209670 = invoke(stypy.reporting.localization.Localization(__file__, 697, 19), get_spine_transform_209668, *[], **kwargs_209669)
        
        # Assigning a type to the variable 'stypy_return_type' (line 697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 697, 12), 'stypy_return_type', get_spine_transform_call_result_209670)
        # SSA branch for the else part of an if statement (line 695)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 699)
        # Processing the call arguments (line 699)
        unicode_209672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 29), 'unicode', u'unknown value for which')
        # Processing the call keyword arguments (line 699)
        kwargs_209673 = {}
        # Getting the type of 'ValueError' (line 699)
        ValueError_209671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 699)
        ValueError_call_result_209674 = invoke(stypy.reporting.localization.Localization(__file__, 699, 18), ValueError_209671, *[unicode_209672], **kwargs_209673)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 699, 12), ValueError_call_result_209674, 'raise parameter', BaseException)
        # SSA join for if statement (line 695)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 692)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 690)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_xaxis_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xaxis_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 676)
        stypy_return_type_209675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209675)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xaxis_transform'
        return stypy_return_type_209675


    @norecursion
    def get_xaxis_text1_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_xaxis_text1_transform'
        module_type_store = module_type_store.open_function_context('get_xaxis_text1_transform', 701, 4, False)
        # Assigning a type to the variable 'self' (line 702)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 702, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_xaxis_text1_transform.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_xaxis_text1_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_xaxis_text1_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_xaxis_text1_transform.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_xaxis_text1_transform')
        _AxesBase.get_xaxis_text1_transform.__dict__.__setitem__('stypy_param_names_list', ['pad_points'])
        _AxesBase.get_xaxis_text1_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_xaxis_text1_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_xaxis_text1_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_xaxis_text1_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_xaxis_text1_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_xaxis_text1_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_xaxis_text1_transform', ['pad_points'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xaxis_text1_transform', localization, ['pad_points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xaxis_text1_transform(...)' code ##################

        unicode_209676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, (-1)), 'unicode', u'\n        Get the transformation used for drawing x-axis labels, which\n        will add the given amount of padding (in points) between the\n        axes and the label.  The x-direction is in data coordinates\n        and the y-direction is in axis coordinates.  Returns a\n        3-tuple of the form::\n\n          (transform, valign, halign)\n\n        where *valign* and *halign* are requested alignments for the\n        text.\n\n        .. note::\n\n            This transformation is primarily used by the\n            :class:`~matplotlib.axis.Axis` class, and is meant to be\n            overridden by new kinds of projections that may need to\n            place axis elements in different locations.\n\n        ')
        
        # Assigning a Subscript to a Name (line 722):
        
        # Assigning a Subscript to a Name (line 722):
        
        # Obtaining the type of the subscript
        unicode_209677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, 43), 'unicode', u'xtick.alignment')
        # Getting the type of 'matplotlib' (line 722)
        matplotlib_209678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 23), 'matplotlib')
        # Obtaining the member 'rcParams' of a type (line 722)
        rcParams_209679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 23), matplotlib_209678, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 722)
        getitem___209680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 23), rcParams_209679, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 722)
        subscript_call_result_209681 = invoke(stypy.reporting.localization.Localization(__file__, 722, 23), getitem___209680, unicode_209677)
        
        # Assigning a type to the variable 'labels_align' (line 722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 722, 8), 'labels_align', subscript_call_result_209681)
        
        # Obtaining an instance of the builtin type 'tuple' (line 724)
        tuple_209682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 724, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 724)
        # Adding element type (line 724)
        
        # Call to get_xaxis_transform(...): (line 724)
        # Processing the call keyword arguments (line 724)
        unicode_209685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 724, 47), 'unicode', u'tick1')
        keyword_209686 = unicode_209685
        kwargs_209687 = {'which': keyword_209686}
        # Getting the type of 'self' (line 724)
        self_209683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 16), 'self', False)
        # Obtaining the member 'get_xaxis_transform' of a type (line 724)
        get_xaxis_transform_209684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 724, 16), self_209683, 'get_xaxis_transform')
        # Calling get_xaxis_transform(args, kwargs) (line 724)
        get_xaxis_transform_call_result_209688 = invoke(stypy.reporting.localization.Localization(__file__, 724, 16), get_xaxis_transform_209684, *[], **kwargs_209687)
        
        
        # Call to ScaledTranslation(...): (line 725)
        # Processing the call arguments (line 725)
        int_209691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 46), 'int')
        int_209692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 49), 'int')
        # Getting the type of 'pad_points' (line 725)
        pad_points_209693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 54), 'pad_points', False)
        # Applying the binary operator '*' (line 725)
        result_mul_209694 = python_operator(stypy.reporting.localization.Localization(__file__, 725, 49), '*', int_209692, pad_points_209693)
        
        float_209695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 67), 'float')
        # Applying the binary operator 'div' (line 725)
        result_div_209696 = python_operator(stypy.reporting.localization.Localization(__file__, 725, 65), 'div', result_mul_209694, float_209695)
        
        # Getting the type of 'self' (line 726)
        self_209697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 46), 'self', False)
        # Obtaining the member 'figure' of a type (line 726)
        figure_209698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 46), self_209697, 'figure')
        # Obtaining the member 'dpi_scale_trans' of a type (line 726)
        dpi_scale_trans_209699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 46), figure_209698, 'dpi_scale_trans')
        # Processing the call keyword arguments (line 725)
        kwargs_209700 = {}
        # Getting the type of 'mtransforms' (line 725)
        mtransforms_209689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 16), 'mtransforms', False)
        # Obtaining the member 'ScaledTranslation' of a type (line 725)
        ScaledTranslation_209690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 16), mtransforms_209689, 'ScaledTranslation')
        # Calling ScaledTranslation(args, kwargs) (line 725)
        ScaledTranslation_call_result_209701 = invoke(stypy.reporting.localization.Localization(__file__, 725, 16), ScaledTranslation_209690, *[int_209691, result_div_209696, dpi_scale_trans_209699], **kwargs_209700)
        
        # Applying the binary operator '+' (line 724)
        result_add_209702 = python_operator(stypy.reporting.localization.Localization(__file__, 724, 16), '+', get_xaxis_transform_call_result_209688, ScaledTranslation_call_result_209701)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 724, 16), tuple_209682, result_add_209702)
        # Adding element type (line 724)
        unicode_209703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 16), 'unicode', u'top')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 724, 16), tuple_209682, unicode_209703)
        # Adding element type (line 724)
        # Getting the type of 'labels_align' (line 727)
        labels_align_209704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 23), 'labels_align')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 724, 16), tuple_209682, labels_align_209704)
        
        # Assigning a type to the variable 'stypy_return_type' (line 724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 724, 8), 'stypy_return_type', tuple_209682)
        
        # ################# End of 'get_xaxis_text1_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xaxis_text1_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 701)
        stypy_return_type_209705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209705)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xaxis_text1_transform'
        return stypy_return_type_209705


    @norecursion
    def get_xaxis_text2_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_xaxis_text2_transform'
        module_type_store = module_type_store.open_function_context('get_xaxis_text2_transform', 729, 4, False)
        # Assigning a type to the variable 'self' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_xaxis_text2_transform.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_xaxis_text2_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_xaxis_text2_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_xaxis_text2_transform.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_xaxis_text2_transform')
        _AxesBase.get_xaxis_text2_transform.__dict__.__setitem__('stypy_param_names_list', ['pad_points'])
        _AxesBase.get_xaxis_text2_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_xaxis_text2_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_xaxis_text2_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_xaxis_text2_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_xaxis_text2_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_xaxis_text2_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_xaxis_text2_transform', ['pad_points'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xaxis_text2_transform', localization, ['pad_points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xaxis_text2_transform(...)' code ##################

        unicode_209706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 749, (-1)), 'unicode', u'\n        Get the transformation used for drawing the secondary x-axis\n        labels, which will add the given amount of padding (in points)\n        between the axes and the label.  The x-direction is in data\n        coordinates and the y-direction is in axis coordinates.\n        Returns a 3-tuple of the form::\n\n          (transform, valign, halign)\n\n        where *valign* and *halign* are requested alignments for the\n        text.\n\n        .. note::\n\n            This transformation is primarily used by the\n            :class:`~matplotlib.axis.Axis` class, and is meant to be\n            overridden by new kinds of projections that may need to\n            place axis elements in different locations.\n\n        ')
        
        # Assigning a Subscript to a Name (line 750):
        
        # Assigning a Subscript to a Name (line 750):
        
        # Obtaining the type of the subscript
        unicode_209707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 750, 43), 'unicode', u'xtick.alignment')
        # Getting the type of 'matplotlib' (line 750)
        matplotlib_209708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 23), 'matplotlib')
        # Obtaining the member 'rcParams' of a type (line 750)
        rcParams_209709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 23), matplotlib_209708, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 750)
        getitem___209710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 23), rcParams_209709, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 750)
        subscript_call_result_209711 = invoke(stypy.reporting.localization.Localization(__file__, 750, 23), getitem___209710, unicode_209707)
        
        # Assigning a type to the variable 'labels_align' (line 750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 8), 'labels_align', subscript_call_result_209711)
        
        # Obtaining an instance of the builtin type 'tuple' (line 751)
        tuple_209712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 751)
        # Adding element type (line 751)
        
        # Call to get_xaxis_transform(...): (line 751)
        # Processing the call keyword arguments (line 751)
        unicode_209715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 47), 'unicode', u'tick2')
        keyword_209716 = unicode_209715
        kwargs_209717 = {'which': keyword_209716}
        # Getting the type of 'self' (line 751)
        self_209713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 16), 'self', False)
        # Obtaining the member 'get_xaxis_transform' of a type (line 751)
        get_xaxis_transform_209714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 16), self_209713, 'get_xaxis_transform')
        # Calling get_xaxis_transform(args, kwargs) (line 751)
        get_xaxis_transform_call_result_209718 = invoke(stypy.reporting.localization.Localization(__file__, 751, 16), get_xaxis_transform_209714, *[], **kwargs_209717)
        
        
        # Call to ScaledTranslation(...): (line 752)
        # Processing the call arguments (line 752)
        int_209721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 46), 'int')
        # Getting the type of 'pad_points' (line 752)
        pad_points_209722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 49), 'pad_points', False)
        float_209723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 62), 'float')
        # Applying the binary operator 'div' (line 752)
        result_div_209724 = python_operator(stypy.reporting.localization.Localization(__file__, 752, 49), 'div', pad_points_209722, float_209723)
        
        # Getting the type of 'self' (line 753)
        self_209725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 46), 'self', False)
        # Obtaining the member 'figure' of a type (line 753)
        figure_209726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 46), self_209725, 'figure')
        # Obtaining the member 'dpi_scale_trans' of a type (line 753)
        dpi_scale_trans_209727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 46), figure_209726, 'dpi_scale_trans')
        # Processing the call keyword arguments (line 752)
        kwargs_209728 = {}
        # Getting the type of 'mtransforms' (line 752)
        mtransforms_209719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 16), 'mtransforms', False)
        # Obtaining the member 'ScaledTranslation' of a type (line 752)
        ScaledTranslation_209720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 16), mtransforms_209719, 'ScaledTranslation')
        # Calling ScaledTranslation(args, kwargs) (line 752)
        ScaledTranslation_call_result_209729 = invoke(stypy.reporting.localization.Localization(__file__, 752, 16), ScaledTranslation_209720, *[int_209721, result_div_209724, dpi_scale_trans_209727], **kwargs_209728)
        
        # Applying the binary operator '+' (line 751)
        result_add_209730 = python_operator(stypy.reporting.localization.Localization(__file__, 751, 16), '+', get_xaxis_transform_call_result_209718, ScaledTranslation_call_result_209729)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 751, 16), tuple_209712, result_add_209730)
        # Adding element type (line 751)
        unicode_209731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 754, 16), 'unicode', u'bottom')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 751, 16), tuple_209712, unicode_209731)
        # Adding element type (line 751)
        # Getting the type of 'labels_align' (line 754)
        labels_align_209732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 26), 'labels_align')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 751, 16), tuple_209712, labels_align_209732)
        
        # Assigning a type to the variable 'stypy_return_type' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'stypy_return_type', tuple_209712)
        
        # ################# End of 'get_xaxis_text2_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xaxis_text2_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 729)
        stypy_return_type_209733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209733)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xaxis_text2_transform'
        return stypy_return_type_209733


    @norecursion
    def get_yaxis_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_209734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 40), 'unicode', u'grid')
        defaults = [unicode_209734]
        # Create a new context for function 'get_yaxis_transform'
        module_type_store = module_type_store.open_function_context('get_yaxis_transform', 756, 4, False)
        # Assigning a type to the variable 'self' (line 757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_yaxis_transform.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_yaxis_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_yaxis_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_yaxis_transform.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_yaxis_transform')
        _AxesBase.get_yaxis_transform.__dict__.__setitem__('stypy_param_names_list', ['which'])
        _AxesBase.get_yaxis_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_yaxis_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_yaxis_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_yaxis_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_yaxis_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_yaxis_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_yaxis_transform', ['which'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_yaxis_transform', localization, ['which'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_yaxis_transform(...)' code ##################

        unicode_209735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, (-1)), 'unicode', u'\n        Get the transformation used for drawing y-axis labels, ticks\n        and gridlines.  The x-direction is in axis coordinates and the\n        y-direction is in data coordinates.\n\n        .. note::\n\n            This transformation is primarily used by the\n            :class:`~matplotlib.axis.Axis` class, and is meant to be\n            overridden by new kinds of projections that may need to\n            place axis elements in different locations.\n\n        ')
        
        
        # Getting the type of 'which' (line 770)
        which_209736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 11), 'which')
        unicode_209737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 20), 'unicode', u'grid')
        # Applying the binary operator '==' (line 770)
        result_eq_209738 = python_operator(stypy.reporting.localization.Localization(__file__, 770, 11), '==', which_209736, unicode_209737)
        
        # Testing the type of an if condition (line 770)
        if_condition_209739 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 770, 8), result_eq_209738)
        # Assigning a type to the variable 'if_condition_209739' (line 770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 8), 'if_condition_209739', if_condition_209739)
        # SSA begins for if statement (line 770)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 771)
        self_209740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 19), 'self')
        # Obtaining the member '_yaxis_transform' of a type (line 771)
        _yaxis_transform_209741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 19), self_209740, '_yaxis_transform')
        # Assigning a type to the variable 'stypy_return_type' (line 771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 771, 12), 'stypy_return_type', _yaxis_transform_209741)
        # SSA branch for the else part of an if statement (line 770)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'which' (line 772)
        which_209742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 13), 'which')
        unicode_209743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 772, 22), 'unicode', u'tick1')
        # Applying the binary operator '==' (line 772)
        result_eq_209744 = python_operator(stypy.reporting.localization.Localization(__file__, 772, 13), '==', which_209742, unicode_209743)
        
        # Testing the type of an if condition (line 772)
        if_condition_209745 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 772, 13), result_eq_209744)
        # Assigning a type to the variable 'if_condition_209745' (line 772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 13), 'if_condition_209745', if_condition_209745)
        # SSA begins for if statement (line 772)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to get_spine_transform(...): (line 774)
        # Processing the call keyword arguments (line 774)
        kwargs_209752 = {}
        
        # Obtaining the type of the subscript
        unicode_209746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 31), 'unicode', u'left')
        # Getting the type of 'self' (line 774)
        self_209747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 19), 'self', False)
        # Obtaining the member 'spines' of a type (line 774)
        spines_209748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 19), self_209747, 'spines')
        # Obtaining the member '__getitem__' of a type (line 774)
        getitem___209749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 19), spines_209748, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 774)
        subscript_call_result_209750 = invoke(stypy.reporting.localization.Localization(__file__, 774, 19), getitem___209749, unicode_209746)
        
        # Obtaining the member 'get_spine_transform' of a type (line 774)
        get_spine_transform_209751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 19), subscript_call_result_209750, 'get_spine_transform')
        # Calling get_spine_transform(args, kwargs) (line 774)
        get_spine_transform_call_result_209753 = invoke(stypy.reporting.localization.Localization(__file__, 774, 19), get_spine_transform_209751, *[], **kwargs_209752)
        
        # Assigning a type to the variable 'stypy_return_type' (line 774)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 12), 'stypy_return_type', get_spine_transform_call_result_209753)
        # SSA branch for the else part of an if statement (line 772)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'which' (line 775)
        which_209754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 13), 'which')
        unicode_209755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 775, 22), 'unicode', u'tick2')
        # Applying the binary operator '==' (line 775)
        result_eq_209756 = python_operator(stypy.reporting.localization.Localization(__file__, 775, 13), '==', which_209754, unicode_209755)
        
        # Testing the type of an if condition (line 775)
        if_condition_209757 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 775, 13), result_eq_209756)
        # Assigning a type to the variable 'if_condition_209757' (line 775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 775, 13), 'if_condition_209757', if_condition_209757)
        # SSA begins for if statement (line 775)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to get_spine_transform(...): (line 777)
        # Processing the call keyword arguments (line 777)
        kwargs_209764 = {}
        
        # Obtaining the type of the subscript
        unicode_209758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 777, 31), 'unicode', u'right')
        # Getting the type of 'self' (line 777)
        self_209759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 19), 'self', False)
        # Obtaining the member 'spines' of a type (line 777)
        spines_209760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 19), self_209759, 'spines')
        # Obtaining the member '__getitem__' of a type (line 777)
        getitem___209761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 19), spines_209760, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 777)
        subscript_call_result_209762 = invoke(stypy.reporting.localization.Localization(__file__, 777, 19), getitem___209761, unicode_209758)
        
        # Obtaining the member 'get_spine_transform' of a type (line 777)
        get_spine_transform_209763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 19), subscript_call_result_209762, 'get_spine_transform')
        # Calling get_spine_transform(args, kwargs) (line 777)
        get_spine_transform_call_result_209765 = invoke(stypy.reporting.localization.Localization(__file__, 777, 19), get_spine_transform_209763, *[], **kwargs_209764)
        
        # Assigning a type to the variable 'stypy_return_type' (line 777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 12), 'stypy_return_type', get_spine_transform_call_result_209765)
        # SSA branch for the else part of an if statement (line 775)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 779)
        # Processing the call arguments (line 779)
        unicode_209767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 779, 29), 'unicode', u'unknown value for which')
        # Processing the call keyword arguments (line 779)
        kwargs_209768 = {}
        # Getting the type of 'ValueError' (line 779)
        ValueError_209766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 779)
        ValueError_call_result_209769 = invoke(stypy.reporting.localization.Localization(__file__, 779, 18), ValueError_209766, *[unicode_209767], **kwargs_209768)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 779, 12), ValueError_call_result_209769, 'raise parameter', BaseException)
        # SSA join for if statement (line 775)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 772)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 770)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_yaxis_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_yaxis_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 756)
        stypy_return_type_209770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209770)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_yaxis_transform'
        return stypy_return_type_209770


    @norecursion
    def get_yaxis_text1_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_yaxis_text1_transform'
        module_type_store = module_type_store.open_function_context('get_yaxis_text1_transform', 781, 4, False)
        # Assigning a type to the variable 'self' (line 782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_yaxis_text1_transform.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_yaxis_text1_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_yaxis_text1_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_yaxis_text1_transform.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_yaxis_text1_transform')
        _AxesBase.get_yaxis_text1_transform.__dict__.__setitem__('stypy_param_names_list', ['pad_points'])
        _AxesBase.get_yaxis_text1_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_yaxis_text1_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_yaxis_text1_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_yaxis_text1_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_yaxis_text1_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_yaxis_text1_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_yaxis_text1_transform', ['pad_points'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_yaxis_text1_transform', localization, ['pad_points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_yaxis_text1_transform(...)' code ##################

        unicode_209771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 801, (-1)), 'unicode', u'\n        Get the transformation used for drawing y-axis labels, which\n        will add the given amount of padding (in points) between the\n        axes and the label.  The x-direction is in axis coordinates\n        and the y-direction is in data coordinates.  Returns a 3-tuple\n        of the form::\n\n          (transform, valign, halign)\n\n        where *valign* and *halign* are requested alignments for the\n        text.\n\n        .. note::\n\n            This transformation is primarily used by the\n            :class:`~matplotlib.axis.Axis` class, and is meant to be\n            overridden by new kinds of projections that may need to\n            place axis elements in different locations.\n\n        ')
        
        # Assigning a Subscript to a Name (line 802):
        
        # Assigning a Subscript to a Name (line 802):
        
        # Obtaining the type of the subscript
        unicode_209772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 43), 'unicode', u'ytick.alignment')
        # Getting the type of 'matplotlib' (line 802)
        matplotlib_209773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 23), 'matplotlib')
        # Obtaining the member 'rcParams' of a type (line 802)
        rcParams_209774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 23), matplotlib_209773, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 802)
        getitem___209775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 23), rcParams_209774, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 802)
        subscript_call_result_209776 = invoke(stypy.reporting.localization.Localization(__file__, 802, 23), getitem___209775, unicode_209772)
        
        # Assigning a type to the variable 'labels_align' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'labels_align', subscript_call_result_209776)
        
        # Obtaining an instance of the builtin type 'tuple' (line 803)
        tuple_209777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 803)
        # Adding element type (line 803)
        
        # Call to get_yaxis_transform(...): (line 803)
        # Processing the call keyword arguments (line 803)
        unicode_209780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 47), 'unicode', u'tick1')
        keyword_209781 = unicode_209780
        kwargs_209782 = {'which': keyword_209781}
        # Getting the type of 'self' (line 803)
        self_209778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 16), 'self', False)
        # Obtaining the member 'get_yaxis_transform' of a type (line 803)
        get_yaxis_transform_209779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 16), self_209778, 'get_yaxis_transform')
        # Calling get_yaxis_transform(args, kwargs) (line 803)
        get_yaxis_transform_call_result_209783 = invoke(stypy.reporting.localization.Localization(__file__, 803, 16), get_yaxis_transform_209779, *[], **kwargs_209782)
        
        
        # Call to ScaledTranslation(...): (line 804)
        # Processing the call arguments (line 804)
        int_209786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 46), 'int')
        # Getting the type of 'pad_points' (line 804)
        pad_points_209787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 51), 'pad_points', False)
        # Applying the binary operator '*' (line 804)
        result_mul_209788 = python_operator(stypy.reporting.localization.Localization(__file__, 804, 46), '*', int_209786, pad_points_209787)
        
        float_209789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 64), 'float')
        # Applying the binary operator 'div' (line 804)
        result_div_209790 = python_operator(stypy.reporting.localization.Localization(__file__, 804, 62), 'div', result_mul_209788, float_209789)
        
        int_209791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 70), 'int')
        # Getting the type of 'self' (line 805)
        self_209792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 46), 'self', False)
        # Obtaining the member 'figure' of a type (line 805)
        figure_209793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 46), self_209792, 'figure')
        # Obtaining the member 'dpi_scale_trans' of a type (line 805)
        dpi_scale_trans_209794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 46), figure_209793, 'dpi_scale_trans')
        # Processing the call keyword arguments (line 804)
        kwargs_209795 = {}
        # Getting the type of 'mtransforms' (line 804)
        mtransforms_209784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 16), 'mtransforms', False)
        # Obtaining the member 'ScaledTranslation' of a type (line 804)
        ScaledTranslation_209785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 16), mtransforms_209784, 'ScaledTranslation')
        # Calling ScaledTranslation(args, kwargs) (line 804)
        ScaledTranslation_call_result_209796 = invoke(stypy.reporting.localization.Localization(__file__, 804, 16), ScaledTranslation_209785, *[result_div_209790, int_209791, dpi_scale_trans_209794], **kwargs_209795)
        
        # Applying the binary operator '+' (line 803)
        result_add_209797 = python_operator(stypy.reporting.localization.Localization(__file__, 803, 16), '+', get_yaxis_transform_call_result_209783, ScaledTranslation_call_result_209796)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 803, 16), tuple_209777, result_add_209797)
        # Adding element type (line 803)
        # Getting the type of 'labels_align' (line 806)
        labels_align_209798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 16), 'labels_align')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 803, 16), tuple_209777, labels_align_209798)
        # Adding element type (line 803)
        unicode_209799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 806, 30), 'unicode', u'right')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 803, 16), tuple_209777, unicode_209799)
        
        # Assigning a type to the variable 'stypy_return_type' (line 803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 8), 'stypy_return_type', tuple_209777)
        
        # ################# End of 'get_yaxis_text1_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_yaxis_text1_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 781)
        stypy_return_type_209800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209800)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_yaxis_text1_transform'
        return stypy_return_type_209800


    @norecursion
    def get_yaxis_text2_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_yaxis_text2_transform'
        module_type_store = module_type_store.open_function_context('get_yaxis_text2_transform', 808, 4, False)
        # Assigning a type to the variable 'self' (line 809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 809, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_yaxis_text2_transform.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_yaxis_text2_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_yaxis_text2_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_yaxis_text2_transform.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_yaxis_text2_transform')
        _AxesBase.get_yaxis_text2_transform.__dict__.__setitem__('stypy_param_names_list', ['pad_points'])
        _AxesBase.get_yaxis_text2_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_yaxis_text2_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_yaxis_text2_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_yaxis_text2_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_yaxis_text2_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_yaxis_text2_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_yaxis_text2_transform', ['pad_points'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_yaxis_text2_transform', localization, ['pad_points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_yaxis_text2_transform(...)' code ##################

        unicode_209801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, (-1)), 'unicode', u'\n        Get the transformation used for drawing the secondary y-axis\n        labels, which will add the given amount of padding (in points)\n        between the axes and the label.  The x-direction is in axis\n        coordinates and the y-direction is in data coordinates.\n        Returns a 3-tuple of the form::\n\n          (transform, valign, halign)\n\n        where *valign* and *halign* are requested alignments for the\n        text.\n\n        .. note::\n\n            This transformation is primarily used by the\n            :class:`~matplotlib.axis.Axis` class, and is meant to be\n            overridden by new kinds of projections that may need to\n            place axis elements in different locations.\n\n        ')
        
        # Assigning a Subscript to a Name (line 829):
        
        # Assigning a Subscript to a Name (line 829):
        
        # Obtaining the type of the subscript
        unicode_209802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 43), 'unicode', u'ytick.alignment')
        # Getting the type of 'matplotlib' (line 829)
        matplotlib_209803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 23), 'matplotlib')
        # Obtaining the member 'rcParams' of a type (line 829)
        rcParams_209804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 23), matplotlib_209803, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 829)
        getitem___209805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 23), rcParams_209804, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 829)
        subscript_call_result_209806 = invoke(stypy.reporting.localization.Localization(__file__, 829, 23), getitem___209805, unicode_209802)
        
        # Assigning a type to the variable 'labels_align' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'labels_align', subscript_call_result_209806)
        
        # Obtaining an instance of the builtin type 'tuple' (line 831)
        tuple_209807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 831)
        # Adding element type (line 831)
        
        # Call to get_yaxis_transform(...): (line 831)
        # Processing the call keyword arguments (line 831)
        unicode_209810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 47), 'unicode', u'tick2')
        keyword_209811 = unicode_209810
        kwargs_209812 = {'which': keyword_209811}
        # Getting the type of 'self' (line 831)
        self_209808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 16), 'self', False)
        # Obtaining the member 'get_yaxis_transform' of a type (line 831)
        get_yaxis_transform_209809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 16), self_209808, 'get_yaxis_transform')
        # Calling get_yaxis_transform(args, kwargs) (line 831)
        get_yaxis_transform_call_result_209813 = invoke(stypy.reporting.localization.Localization(__file__, 831, 16), get_yaxis_transform_209809, *[], **kwargs_209812)
        
        
        # Call to ScaledTranslation(...): (line 832)
        # Processing the call arguments (line 832)
        # Getting the type of 'pad_points' (line 832)
        pad_points_209816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 46), 'pad_points', False)
        float_209817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 59), 'float')
        # Applying the binary operator 'div' (line 832)
        result_div_209818 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 46), 'div', pad_points_209816, float_209817)
        
        int_209819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 65), 'int')
        # Getting the type of 'self' (line 833)
        self_209820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 46), 'self', False)
        # Obtaining the member 'figure' of a type (line 833)
        figure_209821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 46), self_209820, 'figure')
        # Obtaining the member 'dpi_scale_trans' of a type (line 833)
        dpi_scale_trans_209822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 46), figure_209821, 'dpi_scale_trans')
        # Processing the call keyword arguments (line 832)
        kwargs_209823 = {}
        # Getting the type of 'mtransforms' (line 832)
        mtransforms_209814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 16), 'mtransforms', False)
        # Obtaining the member 'ScaledTranslation' of a type (line 832)
        ScaledTranslation_209815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 832, 16), mtransforms_209814, 'ScaledTranslation')
        # Calling ScaledTranslation(args, kwargs) (line 832)
        ScaledTranslation_call_result_209824 = invoke(stypy.reporting.localization.Localization(__file__, 832, 16), ScaledTranslation_209815, *[result_div_209818, int_209819, dpi_scale_trans_209822], **kwargs_209823)
        
        # Applying the binary operator '+' (line 831)
        result_add_209825 = python_operator(stypy.reporting.localization.Localization(__file__, 831, 16), '+', get_yaxis_transform_call_result_209813, ScaledTranslation_call_result_209824)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 831, 16), tuple_209807, result_add_209825)
        # Adding element type (line 831)
        # Getting the type of 'labels_align' (line 834)
        labels_align_209826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 16), 'labels_align')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 831, 16), tuple_209807, labels_align_209826)
        # Adding element type (line 831)
        unicode_209827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 834, 30), 'unicode', u'left')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 831, 16), tuple_209807, unicode_209827)
        
        # Assigning a type to the variable 'stypy_return_type' (line 831)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 831, 8), 'stypy_return_type', tuple_209807)
        
        # ################# End of 'get_yaxis_text2_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_yaxis_text2_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 808)
        stypy_return_type_209828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209828)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_yaxis_text2_transform'
        return stypy_return_type_209828


    @norecursion
    def _update_transScale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_transScale'
        module_type_store = module_type_store.open_function_context('_update_transScale', 836, 4, False)
        # Assigning a type to the variable 'self' (line 837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 837, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._update_transScale.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._update_transScale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._update_transScale.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._update_transScale.__dict__.__setitem__('stypy_function_name', '_AxesBase._update_transScale')
        _AxesBase._update_transScale.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase._update_transScale.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._update_transScale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._update_transScale.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._update_transScale.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._update_transScale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._update_transScale.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._update_transScale', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_transScale', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_transScale(...)' code ##################

        
        # Call to set(...): (line 837)
        # Processing the call arguments (line 837)
        
        # Call to blended_transform_factory(...): (line 838)
        # Processing the call arguments (line 838)
        
        # Call to get_transform(...): (line 839)
        # Processing the call keyword arguments (line 839)
        kwargs_209837 = {}
        # Getting the type of 'self' (line 839)
        self_209834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 16), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 839)
        xaxis_209835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 16), self_209834, 'xaxis')
        # Obtaining the member 'get_transform' of a type (line 839)
        get_transform_209836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 16), xaxis_209835, 'get_transform')
        # Calling get_transform(args, kwargs) (line 839)
        get_transform_call_result_209838 = invoke(stypy.reporting.localization.Localization(__file__, 839, 16), get_transform_209836, *[], **kwargs_209837)
        
        
        # Call to get_transform(...): (line 839)
        # Processing the call keyword arguments (line 839)
        kwargs_209842 = {}
        # Getting the type of 'self' (line 839)
        self_209839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 44), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 839)
        yaxis_209840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 44), self_209839, 'yaxis')
        # Obtaining the member 'get_transform' of a type (line 839)
        get_transform_209841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 44), yaxis_209840, 'get_transform')
        # Calling get_transform(args, kwargs) (line 839)
        get_transform_call_result_209843 = invoke(stypy.reporting.localization.Localization(__file__, 839, 44), get_transform_209841, *[], **kwargs_209842)
        
        # Processing the call keyword arguments (line 838)
        kwargs_209844 = {}
        # Getting the type of 'mtransforms' (line 838)
        mtransforms_209832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 12), 'mtransforms', False)
        # Obtaining the member 'blended_transform_factory' of a type (line 838)
        blended_transform_factory_209833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 12), mtransforms_209832, 'blended_transform_factory')
        # Calling blended_transform_factory(args, kwargs) (line 838)
        blended_transform_factory_call_result_209845 = invoke(stypy.reporting.localization.Localization(__file__, 838, 12), blended_transform_factory_209833, *[get_transform_call_result_209838, get_transform_call_result_209843], **kwargs_209844)
        
        # Processing the call keyword arguments (line 837)
        kwargs_209846 = {}
        # Getting the type of 'self' (line 837)
        self_209829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 8), 'self', False)
        # Obtaining the member 'transScale' of a type (line 837)
        transScale_209830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 8), self_209829, 'transScale')
        # Obtaining the member 'set' of a type (line 837)
        set_209831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 8), transScale_209830, 'set')
        # Calling set(args, kwargs) (line 837)
        set_call_result_209847 = invoke(stypy.reporting.localization.Localization(__file__, 837, 8), set_209831, *[blended_transform_factory_call_result_209845], **kwargs_209846)
        
        
        # Type idiom detected: calculating its left and rigth part (line 840)
        unicode_209848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 25), 'unicode', u'lines')
        # Getting the type of 'self' (line 840)
        self_209849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 19), 'self')
        
        (may_be_209850, more_types_in_union_209851) = may_provide_member(unicode_209848, self_209849)

        if may_be_209850:

            if more_types_in_union_209851:
                # Runtime conditional SSA (line 840)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 840)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 8), 'self', remove_not_member_provider_from_union(self_209849, u'lines'))
            
            # Getting the type of 'self' (line 841)
            self_209852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 24), 'self')
            # Obtaining the member 'lines' of a type (line 841)
            lines_209853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 24), self_209852, 'lines')
            # Testing the type of a for loop iterable (line 841)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 841, 12), lines_209853)
            # Getting the type of the for loop variable (line 841)
            for_loop_var_209854 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 841, 12), lines_209853)
            # Assigning a type to the variable 'line' (line 841)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 841, 12), 'line', for_loop_var_209854)
            # SSA begins for a for statement (line 841)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            # SSA begins for try-except statement (line 842)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Call to invalidate(...): (line 843)
            # Processing the call keyword arguments (line 843)
            kwargs_209858 = {}
            # Getting the type of 'line' (line 843)
            line_209855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 20), 'line', False)
            # Obtaining the member '_transformed_path' of a type (line 843)
            _transformed_path_209856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 843, 20), line_209855, '_transformed_path')
            # Obtaining the member 'invalidate' of a type (line 843)
            invalidate_209857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 843, 20), _transformed_path_209856, 'invalidate')
            # Calling invalidate(args, kwargs) (line 843)
            invalidate_call_result_209859 = invoke(stypy.reporting.localization.Localization(__file__, 843, 20), invalidate_209857, *[], **kwargs_209858)
            
            # SSA branch for the except part of a try statement (line 842)
            # SSA branch for the except 'AttributeError' branch of a try statement (line 842)
            module_type_store.open_ssa_branch('except')
            pass
            # SSA join for try-except statement (line 842)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_209851:
                # SSA join for if statement (line 840)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '_update_transScale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_transScale' in the type store
        # Getting the type of 'stypy_return_type' (line 836)
        stypy_return_type_209860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209860)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_transScale'
        return stypy_return_type_209860


    @norecursion
    def get_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 847)
        False_209861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 36), 'False')
        defaults = [False_209861]
        # Create a new context for function 'get_position'
        module_type_store = module_type_store.open_function_context('get_position', 847, 4, False)
        # Assigning a type to the variable 'self' (line 848)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_position.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_position.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_position')
        _AxesBase.get_position.__dict__.__setitem__('stypy_param_names_list', ['original'])
        _AxesBase.get_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_position', ['original'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_position', localization, ['original'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_position(...)' code ##################

        unicode_209862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 848, 8), 'unicode', u'Return the a copy of the axes rectangle as a Bbox')
        
        # Getting the type of 'original' (line 849)
        original_209863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 11), 'original')
        # Testing the type of an if condition (line 849)
        if_condition_209864 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 849, 8), original_209863)
        # Assigning a type to the variable 'if_condition_209864' (line 849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 849, 8), 'if_condition_209864', if_condition_209864)
        # SSA begins for if statement (line 849)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to frozen(...): (line 850)
        # Processing the call keyword arguments (line 850)
        kwargs_209868 = {}
        # Getting the type of 'self' (line 850)
        self_209865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 19), 'self', False)
        # Obtaining the member '_originalPosition' of a type (line 850)
        _originalPosition_209866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 850, 19), self_209865, '_originalPosition')
        # Obtaining the member 'frozen' of a type (line 850)
        frozen_209867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 850, 19), _originalPosition_209866, 'frozen')
        # Calling frozen(args, kwargs) (line 850)
        frozen_call_result_209869 = invoke(stypy.reporting.localization.Localization(__file__, 850, 19), frozen_209867, *[], **kwargs_209868)
        
        # Assigning a type to the variable 'stypy_return_type' (line 850)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 850, 12), 'stypy_return_type', frozen_call_result_209869)
        # SSA branch for the else part of an if statement (line 849)
        module_type_store.open_ssa_branch('else')
        
        # Call to frozen(...): (line 852)
        # Processing the call keyword arguments (line 852)
        kwargs_209873 = {}
        # Getting the type of 'self' (line 852)
        self_209870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 19), 'self', False)
        # Obtaining the member '_position' of a type (line 852)
        _position_209871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 19), self_209870, '_position')
        # Obtaining the member 'frozen' of a type (line 852)
        frozen_209872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 19), _position_209871, 'frozen')
        # Calling frozen(args, kwargs) (line 852)
        frozen_call_result_209874 = invoke(stypy.reporting.localization.Localization(__file__, 852, 19), frozen_209872, *[], **kwargs_209873)
        
        # Assigning a type to the variable 'stypy_return_type' (line 852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 12), 'stypy_return_type', frozen_call_result_209874)
        # SSA join for if statement (line 849)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_position' in the type store
        # Getting the type of 'stypy_return_type' (line 847)
        stypy_return_type_209875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209875)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_position'
        return stypy_return_type_209875


    @norecursion
    def set_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_209876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 854, 38), 'unicode', u'both')
        defaults = [unicode_209876]
        # Create a new context for function 'set_position'
        module_type_store = module_type_store.open_function_context('set_position', 854, 4, False)
        # Assigning a type to the variable 'self' (line 855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 855, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_position.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_position.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_position')
        _AxesBase.set_position.__dict__.__setitem__('stypy_param_names_list', ['pos', 'which'])
        _AxesBase.set_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_position.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_position', ['pos', 'which'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_position', localization, ['pos', 'which'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_position(...)' code ##################

        unicode_209877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, (-1)), 'unicode', u"Set the axes position\n\n        The expected shape of ``pos`` is::\n\n          pos = [left, bottom, width, height]\n\n        in relative 0,1 coords, or *pos* can be a\n        :class:`~matplotlib.transforms.Bbox`\n\n        There are two position variables: one which is ultimately\n        used, but which may be modified by :meth:`apply_aspect`, and a\n        second which is the starting point for :meth:`apply_aspect`.\n\n\n        Optional keyword arguments:\n          *which*\n\n            ==========   ====================\n            value        description\n            ==========   ====================\n            'active'     to change the first\n            'original'   to change the second\n            'both'       to change both\n            ==========   ====================\n\n        ")
        
        
        
        # Call to isinstance(...): (line 881)
        # Processing the call arguments (line 881)
        # Getting the type of 'pos' (line 881)
        pos_209879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 26), 'pos', False)
        # Getting the type of 'mtransforms' (line 881)
        mtransforms_209880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 31), 'mtransforms', False)
        # Obtaining the member 'BboxBase' of a type (line 881)
        BboxBase_209881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 31), mtransforms_209880, 'BboxBase')
        # Processing the call keyword arguments (line 881)
        kwargs_209882 = {}
        # Getting the type of 'isinstance' (line 881)
        isinstance_209878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 881)
        isinstance_call_result_209883 = invoke(stypy.reporting.localization.Localization(__file__, 881, 15), isinstance_209878, *[pos_209879, BboxBase_209881], **kwargs_209882)
        
        # Applying the 'not' unary operator (line 881)
        result_not__209884 = python_operator(stypy.reporting.localization.Localization(__file__, 881, 11), 'not', isinstance_call_result_209883)
        
        # Testing the type of an if condition (line 881)
        if_condition_209885 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 881, 8), result_not__209884)
        # Assigning a type to the variable 'if_condition_209885' (line 881)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 881, 8), 'if_condition_209885', if_condition_209885)
        # SSA begins for if statement (line 881)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 882):
        
        # Assigning a Call to a Name (line 882):
        
        # Call to from_bounds(...): (line 882)
        # Getting the type of 'pos' (line 882)
        pos_209889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 48), 'pos', False)
        # Processing the call keyword arguments (line 882)
        kwargs_209890 = {}
        # Getting the type of 'mtransforms' (line 882)
        mtransforms_209886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 18), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 882)
        Bbox_209887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 18), mtransforms_209886, 'Bbox')
        # Obtaining the member 'from_bounds' of a type (line 882)
        from_bounds_209888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 18), Bbox_209887, 'from_bounds')
        # Calling from_bounds(args, kwargs) (line 882)
        from_bounds_call_result_209891 = invoke(stypy.reporting.localization.Localization(__file__, 882, 18), from_bounds_209888, *[pos_209889], **kwargs_209890)
        
        # Assigning a type to the variable 'pos' (line 882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 12), 'pos', from_bounds_call_result_209891)
        # SSA join for if statement (line 881)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'which' (line 883)
        which_209892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 11), 'which')
        
        # Obtaining an instance of the builtin type 'tuple' (line 883)
        tuple_209893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 883)
        # Adding element type (line 883)
        unicode_209894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 21), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 883, 21), tuple_209893, unicode_209894)
        # Adding element type (line 883)
        unicode_209895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 29), 'unicode', u'active')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 883, 21), tuple_209893, unicode_209895)
        
        # Applying the binary operator 'in' (line 883)
        result_contains_209896 = python_operator(stypy.reporting.localization.Localization(__file__, 883, 11), 'in', which_209892, tuple_209893)
        
        # Testing the type of an if condition (line 883)
        if_condition_209897 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 883, 8), result_contains_209896)
        # Assigning a type to the variable 'if_condition_209897' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'if_condition_209897', if_condition_209897)
        # SSA begins for if statement (line 883)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set(...): (line 884)
        # Processing the call arguments (line 884)
        # Getting the type of 'pos' (line 884)
        pos_209901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 31), 'pos', False)
        # Processing the call keyword arguments (line 884)
        kwargs_209902 = {}
        # Getting the type of 'self' (line 884)
        self_209898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 12), 'self', False)
        # Obtaining the member '_position' of a type (line 884)
        _position_209899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 12), self_209898, '_position')
        # Obtaining the member 'set' of a type (line 884)
        set_209900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 12), _position_209899, 'set')
        # Calling set(args, kwargs) (line 884)
        set_call_result_209903 = invoke(stypy.reporting.localization.Localization(__file__, 884, 12), set_209900, *[pos_209901], **kwargs_209902)
        
        # SSA join for if statement (line 883)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'which' (line 885)
        which_209904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 11), 'which')
        
        # Obtaining an instance of the builtin type 'tuple' (line 885)
        tuple_209905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 885)
        # Adding element type (line 885)
        unicode_209906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 21), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 885, 21), tuple_209905, unicode_209906)
        # Adding element type (line 885)
        unicode_209907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 29), 'unicode', u'original')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 885, 21), tuple_209905, unicode_209907)
        
        # Applying the binary operator 'in' (line 885)
        result_contains_209908 = python_operator(stypy.reporting.localization.Localization(__file__, 885, 11), 'in', which_209904, tuple_209905)
        
        # Testing the type of an if condition (line 885)
        if_condition_209909 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 885, 8), result_contains_209908)
        # Assigning a type to the variable 'if_condition_209909' (line 885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 8), 'if_condition_209909', if_condition_209909)
        # SSA begins for if statement (line 885)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set(...): (line 886)
        # Processing the call arguments (line 886)
        # Getting the type of 'pos' (line 886)
        pos_209913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 39), 'pos', False)
        # Processing the call keyword arguments (line 886)
        kwargs_209914 = {}
        # Getting the type of 'self' (line 886)
        self_209910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 12), 'self', False)
        # Obtaining the member '_originalPosition' of a type (line 886)
        _originalPosition_209911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 12), self_209910, '_originalPosition')
        # Obtaining the member 'set' of a type (line 886)
        set_209912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 12), _originalPosition_209911, 'set')
        # Calling set(args, kwargs) (line 886)
        set_call_result_209915 = invoke(stypy.reporting.localization.Localization(__file__, 886, 12), set_209912, *[pos_209913], **kwargs_209914)
        
        # SSA join for if statement (line 885)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 887):
        
        # Assigning a Name to a Attribute (line 887):
        # Getting the type of 'True' (line 887)
        True_209916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 21), 'True')
        # Getting the type of 'self' (line 887)
        self_209917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 887)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 8), self_209917, 'stale', True_209916)
        
        # ################# End of 'set_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_position' in the type store
        # Getting the type of 'stypy_return_type' (line 854)
        stypy_return_type_209918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209918)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_position'
        return stypy_return_type_209918


    @norecursion
    def reset_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'reset_position'
        module_type_store = module_type_store.open_function_context('reset_position', 889, 4, False)
        # Assigning a type to the variable 'self' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.reset_position.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.reset_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.reset_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.reset_position.__dict__.__setitem__('stypy_function_name', '_AxesBase.reset_position')
        _AxesBase.reset_position.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.reset_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.reset_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.reset_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.reset_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.reset_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.reset_position.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.reset_position', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'reset_position', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'reset_position(...)' code ##################

        unicode_209919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 890, 8), 'unicode', u'Make the original position the active position')
        
        # Assigning a Call to a Name (line 891):
        
        # Assigning a Call to a Name (line 891):
        
        # Call to get_position(...): (line 891)
        # Processing the call keyword arguments (line 891)
        # Getting the type of 'True' (line 891)
        True_209922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 41), 'True', False)
        keyword_209923 = True_209922
        kwargs_209924 = {'original': keyword_209923}
        # Getting the type of 'self' (line 891)
        self_209920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 14), 'self', False)
        # Obtaining the member 'get_position' of a type (line 891)
        get_position_209921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 14), self_209920, 'get_position')
        # Calling get_position(args, kwargs) (line 891)
        get_position_call_result_209925 = invoke(stypy.reporting.localization.Localization(__file__, 891, 14), get_position_209921, *[], **kwargs_209924)
        
        # Assigning a type to the variable 'pos' (line 891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 8), 'pos', get_position_call_result_209925)
        
        # Call to set_position(...): (line 892)
        # Processing the call arguments (line 892)
        # Getting the type of 'pos' (line 892)
        pos_209928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 26), 'pos', False)
        # Processing the call keyword arguments (line 892)
        unicode_209929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 37), 'unicode', u'active')
        keyword_209930 = unicode_209929
        kwargs_209931 = {'which': keyword_209930}
        # Getting the type of 'self' (line 892)
        self_209926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 8), 'self', False)
        # Obtaining the member 'set_position' of a type (line 892)
        set_position_209927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 8), self_209926, 'set_position')
        # Calling set_position(args, kwargs) (line 892)
        set_position_call_result_209932 = invoke(stypy.reporting.localization.Localization(__file__, 892, 8), set_position_209927, *[pos_209928], **kwargs_209931)
        
        
        # ################# End of 'reset_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'reset_position' in the type store
        # Getting the type of 'stypy_return_type' (line 889)
        stypy_return_type_209933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209933)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'reset_position'
        return stypy_return_type_209933


    @norecursion
    def set_axes_locator(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_axes_locator'
        module_type_store = module_type_store.open_function_context('set_axes_locator', 894, 4, False)
        # Assigning a type to the variable 'self' (line 895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_axes_locator.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_axes_locator.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_axes_locator.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_axes_locator.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_axes_locator')
        _AxesBase.set_axes_locator.__dict__.__setitem__('stypy_param_names_list', ['locator'])
        _AxesBase.set_axes_locator.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_axes_locator.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_axes_locator.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_axes_locator.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_axes_locator.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_axes_locator.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_axes_locator', ['locator'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_axes_locator', localization, ['locator'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_axes_locator(...)' code ##################

        unicode_209934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 900, (-1)), 'unicode', u'\n        set axes_locator\n\n        ACCEPT: a callable object which takes an axes instance and renderer and\n                 returns a bbox.\n        ')
        
        # Assigning a Name to a Attribute (line 901):
        
        # Assigning a Name to a Attribute (line 901):
        # Getting the type of 'locator' (line 901)
        locator_209935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 29), 'locator')
        # Getting the type of 'self' (line 901)
        self_209936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 8), 'self')
        # Setting the type of the member '_axes_locator' of a type (line 901)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 901, 8), self_209936, '_axes_locator', locator_209935)
        
        # Assigning a Name to a Attribute (line 902):
        
        # Assigning a Name to a Attribute (line 902):
        # Getting the type of 'True' (line 902)
        True_209937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 21), 'True')
        # Getting the type of 'self' (line 902)
        self_209938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 902)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 8), self_209938, 'stale', True_209937)
        
        # ################# End of 'set_axes_locator(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_axes_locator' in the type store
        # Getting the type of 'stypy_return_type' (line 894)
        stypy_return_type_209939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209939)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_axes_locator'
        return stypy_return_type_209939


    @norecursion
    def get_axes_locator(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_axes_locator'
        module_type_store = module_type_store.open_function_context('get_axes_locator', 904, 4, False)
        # Assigning a type to the variable 'self' (line 905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_axes_locator.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_axes_locator.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_axes_locator.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_axes_locator.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_axes_locator')
        _AxesBase.get_axes_locator.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_axes_locator.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_axes_locator.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_axes_locator.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_axes_locator.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_axes_locator.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_axes_locator.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_axes_locator', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_axes_locator', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_axes_locator(...)' code ##################

        unicode_209940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, (-1)), 'unicode', u'\n        return axes_locator\n        ')
        # Getting the type of 'self' (line 908)
        self_209941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 15), 'self')
        # Obtaining the member '_axes_locator' of a type (line 908)
        _axes_locator_209942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 908, 15), self_209941, '_axes_locator')
        # Assigning a type to the variable 'stypy_return_type' (line 908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 8), 'stypy_return_type', _axes_locator_209942)
        
        # ################# End of 'get_axes_locator(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_axes_locator' in the type store
        # Getting the type of 'stypy_return_type' (line 904)
        stypy_return_type_209943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209943)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_axes_locator'
        return stypy_return_type_209943


    @norecursion
    def _set_artist_props(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_artist_props'
        module_type_store = module_type_store.open_function_context('_set_artist_props', 910, 4, False)
        # Assigning a type to the variable 'self' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._set_artist_props.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._set_artist_props.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._set_artist_props.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._set_artist_props.__dict__.__setitem__('stypy_function_name', '_AxesBase._set_artist_props')
        _AxesBase._set_artist_props.__dict__.__setitem__('stypy_param_names_list', ['a'])
        _AxesBase._set_artist_props.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._set_artist_props.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._set_artist_props.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._set_artist_props.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._set_artist_props.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._set_artist_props.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._set_artist_props', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_artist_props', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_artist_props(...)' code ##################

        unicode_209944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 8), 'unicode', u'set the boilerplate props for artists added to axes')
        
        # Call to set_figure(...): (line 912)
        # Processing the call arguments (line 912)
        # Getting the type of 'self' (line 912)
        self_209947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 21), 'self', False)
        # Obtaining the member 'figure' of a type (line 912)
        figure_209948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 21), self_209947, 'figure')
        # Processing the call keyword arguments (line 912)
        kwargs_209949 = {}
        # Getting the type of 'a' (line 912)
        a_209945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 8), 'a', False)
        # Obtaining the member 'set_figure' of a type (line 912)
        set_figure_209946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 8), a_209945, 'set_figure')
        # Calling set_figure(args, kwargs) (line 912)
        set_figure_call_result_209950 = invoke(stypy.reporting.localization.Localization(__file__, 912, 8), set_figure_209946, *[figure_209948], **kwargs_209949)
        
        
        
        
        # Call to is_transform_set(...): (line 913)
        # Processing the call keyword arguments (line 913)
        kwargs_209953 = {}
        # Getting the type of 'a' (line 913)
        a_209951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 15), 'a', False)
        # Obtaining the member 'is_transform_set' of a type (line 913)
        is_transform_set_209952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 15), a_209951, 'is_transform_set')
        # Calling is_transform_set(args, kwargs) (line 913)
        is_transform_set_call_result_209954 = invoke(stypy.reporting.localization.Localization(__file__, 913, 15), is_transform_set_209952, *[], **kwargs_209953)
        
        # Applying the 'not' unary operator (line 913)
        result_not__209955 = python_operator(stypy.reporting.localization.Localization(__file__, 913, 11), 'not', is_transform_set_call_result_209954)
        
        # Testing the type of an if condition (line 913)
        if_condition_209956 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 913, 8), result_not__209955)
        # Assigning a type to the variable 'if_condition_209956' (line 913)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 913, 8), 'if_condition_209956', if_condition_209956)
        # SSA begins for if statement (line 913)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_transform(...): (line 914)
        # Processing the call arguments (line 914)
        # Getting the type of 'self' (line 914)
        self_209959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 28), 'self', False)
        # Obtaining the member 'transData' of a type (line 914)
        transData_209960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 28), self_209959, 'transData')
        # Processing the call keyword arguments (line 914)
        kwargs_209961 = {}
        # Getting the type of 'a' (line 914)
        a_209957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 12), 'a', False)
        # Obtaining the member 'set_transform' of a type (line 914)
        set_transform_209958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 12), a_209957, 'set_transform')
        # Calling set_transform(args, kwargs) (line 914)
        set_transform_call_result_209962 = invoke(stypy.reporting.localization.Localization(__file__, 914, 12), set_transform_209958, *[transData_209960], **kwargs_209961)
        
        # SSA join for if statement (line 913)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 916):
        
        # Assigning a Name to a Attribute (line 916):
        # Getting the type of 'self' (line 916)
        self_209963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 17), 'self')
        # Getting the type of 'a' (line 916)
        a_209964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 8), 'a')
        # Setting the type of the member 'axes' of a type (line 916)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 8), a_209964, 'axes', self_209963)
        
        # Getting the type of 'a' (line 917)
        a_209965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 11), 'a')
        # Obtaining the member 'mouseover' of a type (line 917)
        mouseover_209966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 11), a_209965, 'mouseover')
        # Testing the type of an if condition (line 917)
        if_condition_209967 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 917, 8), mouseover_209966)
        # Assigning a type to the variable 'if_condition_209967' (line 917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 8), 'if_condition_209967', if_condition_209967)
        # SSA begins for if statement (line 917)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to add(...): (line 918)
        # Processing the call arguments (line 918)
        # Getting the type of 'a' (line 918)
        a_209971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 35), 'a', False)
        # Processing the call keyword arguments (line 918)
        kwargs_209972 = {}
        # Getting the type of 'self' (line 918)
        self_209968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 12), 'self', False)
        # Obtaining the member 'mouseover_set' of a type (line 918)
        mouseover_set_209969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 12), self_209968, 'mouseover_set')
        # Obtaining the member 'add' of a type (line 918)
        add_209970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 12), mouseover_set_209969, 'add')
        # Calling add(args, kwargs) (line 918)
        add_call_result_209973 = invoke(stypy.reporting.localization.Localization(__file__, 918, 12), add_209970, *[a_209971], **kwargs_209972)
        
        # SSA join for if statement (line 917)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_set_artist_props(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_artist_props' in the type store
        # Getting the type of 'stypy_return_type' (line 910)
        stypy_return_type_209974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209974)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_artist_props'
        return stypy_return_type_209974


    @norecursion
    def _gen_axes_patch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_gen_axes_patch'
        module_type_store = module_type_store.open_function_context('_gen_axes_patch', 920, 4, False)
        # Assigning a type to the variable 'self' (line 921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._gen_axes_patch.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._gen_axes_patch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._gen_axes_patch.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._gen_axes_patch.__dict__.__setitem__('stypy_function_name', '_AxesBase._gen_axes_patch')
        _AxesBase._gen_axes_patch.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase._gen_axes_patch.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._gen_axes_patch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._gen_axes_patch.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._gen_axes_patch.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._gen_axes_patch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._gen_axes_patch.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._gen_axes_patch', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_gen_axes_patch', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_gen_axes_patch(...)' code ##################

        unicode_209975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 933, (-1)), 'unicode', u'\n        Returns the patch used to draw the background of the axes.  It\n        is also used as the clipping path for any data elements on the\n        axes.\n\n        In the standard axes, this is a rectangle, but in other\n        projections it may not be.\n\n        .. note::\n\n            Intended to be overridden by new projection types.\n\n        ')
        
        # Call to Rectangle(...): (line 934)
        # Processing the call arguments (line 934)
        
        # Obtaining an instance of the builtin type 'tuple' (line 934)
        tuple_209978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 934)
        # Adding element type (line 934)
        float_209979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, 35), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 934, 35), tuple_209978, float_209979)
        # Adding element type (line 934)
        float_209980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, 40), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 934, 35), tuple_209978, float_209980)
        
        float_209981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, 46), 'float')
        float_209982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, 51), 'float')
        # Processing the call keyword arguments (line 934)
        kwargs_209983 = {}
        # Getting the type of 'mpatches' (line 934)
        mpatches_209976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 15), 'mpatches', False)
        # Obtaining the member 'Rectangle' of a type (line 934)
        Rectangle_209977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 15), mpatches_209976, 'Rectangle')
        # Calling Rectangle(args, kwargs) (line 934)
        Rectangle_call_result_209984 = invoke(stypy.reporting.localization.Localization(__file__, 934, 15), Rectangle_209977, *[tuple_209978, float_209981, float_209982], **kwargs_209983)
        
        # Assigning a type to the variable 'stypy_return_type' (line 934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'stypy_return_type', Rectangle_call_result_209984)
        
        # ################# End of '_gen_axes_patch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_gen_axes_patch' in the type store
        # Getting the type of 'stypy_return_type' (line 920)
        stypy_return_type_209985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_209985)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_gen_axes_patch'
        return stypy_return_type_209985


    @norecursion
    def _gen_axes_spines(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 936)
        None_209986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 41), 'None')
        float_209987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 54), 'float')
        unicode_209988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 65), 'unicode', u'inches')
        defaults = [None_209986, float_209987, unicode_209988]
        # Create a new context for function '_gen_axes_spines'
        module_type_store = module_type_store.open_function_context('_gen_axes_spines', 936, 4, False)
        # Assigning a type to the variable 'self' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._gen_axes_spines.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._gen_axes_spines.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._gen_axes_spines.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._gen_axes_spines.__dict__.__setitem__('stypy_function_name', '_AxesBase._gen_axes_spines')
        _AxesBase._gen_axes_spines.__dict__.__setitem__('stypy_param_names_list', ['locations', 'offset', 'units'])
        _AxesBase._gen_axes_spines.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._gen_axes_spines.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._gen_axes_spines.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._gen_axes_spines.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._gen_axes_spines.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._gen_axes_spines.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._gen_axes_spines', ['locations', 'offset', 'units'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_gen_axes_spines', localization, ['locations', 'offset', 'units'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_gen_axes_spines(...)' code ##################

        unicode_209989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, (-1)), 'unicode', u'\n        Returns a dict whose keys are spine names and values are\n        Line2D or Patch instances. Each element is used to draw a\n        spine of the axes.\n\n        In the standard axes, this is a single line segment, but in\n        other projections it may not be.\n\n        .. note::\n\n            Intended to be overridden by new projection types.\n\n        ')
        
        # Call to OrderedDict(...): (line 950)
        # Processing the call arguments (line 950)
        
        # Obtaining an instance of the builtin type 'list' (line 950)
        list_209991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 950)
        # Adding element type (line 950)
        
        # Obtaining an instance of the builtin type 'tuple' (line 951)
        tuple_209992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 951, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 951)
        # Adding element type (line 951)
        unicode_209993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 951, 13), 'unicode', u'left')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 951, 13), tuple_209992, unicode_209993)
        # Adding element type (line 951)
        
        # Call to linear_spine(...): (line 951)
        # Processing the call arguments (line 951)
        # Getting the type of 'self' (line 951)
        self_209997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 48), 'self', False)
        unicode_209998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 951, 54), 'unicode', u'left')
        # Processing the call keyword arguments (line 951)
        kwargs_209999 = {}
        # Getting the type of 'mspines' (line 951)
        mspines_209994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 21), 'mspines', False)
        # Obtaining the member 'Spine' of a type (line 951)
        Spine_209995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 21), mspines_209994, 'Spine')
        # Obtaining the member 'linear_spine' of a type (line 951)
        linear_spine_209996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 21), Spine_209995, 'linear_spine')
        # Calling linear_spine(args, kwargs) (line 951)
        linear_spine_call_result_210000 = invoke(stypy.reporting.localization.Localization(__file__, 951, 21), linear_spine_209996, *[self_209997, unicode_209998], **kwargs_209999)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 951, 13), tuple_209992, linear_spine_call_result_210000)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 950, 27), list_209991, tuple_209992)
        # Adding element type (line 950)
        
        # Obtaining an instance of the builtin type 'tuple' (line 952)
        tuple_210001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 952)
        # Adding element type (line 952)
        unicode_210002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 13), 'unicode', u'right')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 952, 13), tuple_210001, unicode_210002)
        # Adding element type (line 952)
        
        # Call to linear_spine(...): (line 952)
        # Processing the call arguments (line 952)
        # Getting the type of 'self' (line 952)
        self_210006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 49), 'self', False)
        unicode_210007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 55), 'unicode', u'right')
        # Processing the call keyword arguments (line 952)
        kwargs_210008 = {}
        # Getting the type of 'mspines' (line 952)
        mspines_210003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 22), 'mspines', False)
        # Obtaining the member 'Spine' of a type (line 952)
        Spine_210004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 22), mspines_210003, 'Spine')
        # Obtaining the member 'linear_spine' of a type (line 952)
        linear_spine_210005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 22), Spine_210004, 'linear_spine')
        # Calling linear_spine(args, kwargs) (line 952)
        linear_spine_call_result_210009 = invoke(stypy.reporting.localization.Localization(__file__, 952, 22), linear_spine_210005, *[self_210006, unicode_210007], **kwargs_210008)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 952, 13), tuple_210001, linear_spine_call_result_210009)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 950, 27), list_209991, tuple_210001)
        # Adding element type (line 950)
        
        # Obtaining an instance of the builtin type 'tuple' (line 953)
        tuple_210010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 953, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 953)
        # Adding element type (line 953)
        unicode_210011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 953, 13), 'unicode', u'bottom')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 953, 13), tuple_210010, unicode_210011)
        # Adding element type (line 953)
        
        # Call to linear_spine(...): (line 953)
        # Processing the call arguments (line 953)
        # Getting the type of 'self' (line 953)
        self_210015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 50), 'self', False)
        unicode_210016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 953, 56), 'unicode', u'bottom')
        # Processing the call keyword arguments (line 953)
        kwargs_210017 = {}
        # Getting the type of 'mspines' (line 953)
        mspines_210012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 23), 'mspines', False)
        # Obtaining the member 'Spine' of a type (line 953)
        Spine_210013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 23), mspines_210012, 'Spine')
        # Obtaining the member 'linear_spine' of a type (line 953)
        linear_spine_210014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 23), Spine_210013, 'linear_spine')
        # Calling linear_spine(args, kwargs) (line 953)
        linear_spine_call_result_210018 = invoke(stypy.reporting.localization.Localization(__file__, 953, 23), linear_spine_210014, *[self_210015, unicode_210016], **kwargs_210017)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 953, 13), tuple_210010, linear_spine_call_result_210018)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 950, 27), list_209991, tuple_210010)
        # Adding element type (line 950)
        
        # Obtaining an instance of the builtin type 'tuple' (line 954)
        tuple_210019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 954)
        # Adding element type (line 954)
        unicode_210020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 13), 'unicode', u'top')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 954, 13), tuple_210019, unicode_210020)
        # Adding element type (line 954)
        
        # Call to linear_spine(...): (line 954)
        # Processing the call arguments (line 954)
        # Getting the type of 'self' (line 954)
        self_210024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 47), 'self', False)
        unicode_210025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 53), 'unicode', u'top')
        # Processing the call keyword arguments (line 954)
        kwargs_210026 = {}
        # Getting the type of 'mspines' (line 954)
        mspines_210021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 20), 'mspines', False)
        # Obtaining the member 'Spine' of a type (line 954)
        Spine_210022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 20), mspines_210021, 'Spine')
        # Obtaining the member 'linear_spine' of a type (line 954)
        linear_spine_210023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 20), Spine_210022, 'linear_spine')
        # Calling linear_spine(args, kwargs) (line 954)
        linear_spine_call_result_210027 = invoke(stypy.reporting.localization.Localization(__file__, 954, 20), linear_spine_210023, *[self_210024, unicode_210025], **kwargs_210026)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 954, 13), tuple_210019, linear_spine_call_result_210027)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 950, 27), list_209991, tuple_210019)
        
        # Processing the call keyword arguments (line 950)
        kwargs_210028 = {}
        # Getting the type of 'OrderedDict' (line 950)
        OrderedDict_209990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 15), 'OrderedDict', False)
        # Calling OrderedDict(args, kwargs) (line 950)
        OrderedDict_call_result_210029 = invoke(stypy.reporting.localization.Localization(__file__, 950, 15), OrderedDict_209990, *[list_209991], **kwargs_210028)
        
        # Assigning a type to the variable 'stypy_return_type' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'stypy_return_type', OrderedDict_call_result_210029)
        
        # ################# End of '_gen_axes_spines(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_gen_axes_spines' in the type store
        # Getting the type of 'stypy_return_type' (line 936)
        stypy_return_type_210030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210030)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_gen_axes_spines'
        return stypy_return_type_210030


    @norecursion
    def cla(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'cla'
        module_type_store = module_type_store.open_function_context('cla', 956, 4, False)
        # Assigning a type to the variable 'self' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.cla.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.cla.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.cla.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.cla.__dict__.__setitem__('stypy_function_name', '_AxesBase.cla')
        _AxesBase.cla.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.cla.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.cla.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.cla.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.cla.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.cla.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.cla.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.cla', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cla', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cla(...)' code ##################

        unicode_210031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 8), 'unicode', u'Clear the current axes.')
        
        # Type idiom detected: calculating its left and rigth part (line 961)
        unicode_210032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 961, 25), 'unicode', u'patch')
        # Getting the type of 'self' (line 961)
        self_210033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 19), 'self')
        
        (may_be_210034, more_types_in_union_210035) = may_provide_member(unicode_210032, self_210033)

        if may_be_210034:

            if more_types_in_union_210035:
                # Runtime conditional SSA (line 961)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 961)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 8), 'self', remove_not_member_provider_from_union(self_210033, u'patch'))
            
            # Assigning a Call to a Name (line 962):
            
            # Assigning a Call to a Name (line 962):
            
            # Call to get_visible(...): (line 962)
            # Processing the call keyword arguments (line 962)
            kwargs_210039 = {}
            # Getting the type of 'self' (line 962)
            self_210036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 28), 'self', False)
            # Obtaining the member 'patch' of a type (line 962)
            patch_210037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 28), self_210036, 'patch')
            # Obtaining the member 'get_visible' of a type (line 962)
            get_visible_210038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 28), patch_210037, 'get_visible')
            # Calling get_visible(args, kwargs) (line 962)
            get_visible_call_result_210040 = invoke(stypy.reporting.localization.Localization(__file__, 962, 28), get_visible_210038, *[], **kwargs_210039)
            
            # Assigning a type to the variable 'patch_visible' (line 962)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'patch_visible', get_visible_call_result_210040)

            if more_types_in_union_210035:
                # Runtime conditional SSA for else branch (line 961)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_210034) or more_types_in_union_210035):
            # Assigning a type to the variable 'self' (line 961)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 8), 'self', remove_member_provider_from_union(self_210033, u'patch'))
            
            # Assigning a Name to a Name (line 964):
            
            # Assigning a Name to a Name (line 964):
            # Getting the type of 'True' (line 964)
            True_210041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 28), 'True')
            # Assigning a type to the variable 'patch_visible' (line 964)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 964, 12), 'patch_visible', True_210041)

            if (may_be_210034 and more_types_in_union_210035):
                # SSA join for if statement (line 961)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 966):
        
        # Assigning a Call to a Name (line 966):
        
        # Call to get_visible(...): (line 966)
        # Processing the call keyword arguments (line 966)
        kwargs_210045 = {}
        # Getting the type of 'self' (line 966)
        self_210042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 24), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 966)
        xaxis_210043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 24), self_210042, 'xaxis')
        # Obtaining the member 'get_visible' of a type (line 966)
        get_visible_210044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 24), xaxis_210043, 'get_visible')
        # Calling get_visible(args, kwargs) (line 966)
        get_visible_call_result_210046 = invoke(stypy.reporting.localization.Localization(__file__, 966, 24), get_visible_210044, *[], **kwargs_210045)
        
        # Assigning a type to the variable 'xaxis_visible' (line 966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'xaxis_visible', get_visible_call_result_210046)
        
        # Assigning a Call to a Name (line 967):
        
        # Assigning a Call to a Name (line 967):
        
        # Call to get_visible(...): (line 967)
        # Processing the call keyword arguments (line 967)
        kwargs_210050 = {}
        # Getting the type of 'self' (line 967)
        self_210047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 24), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 967)
        yaxis_210048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 24), self_210047, 'yaxis')
        # Obtaining the member 'get_visible' of a type (line 967)
        get_visible_210049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 24), yaxis_210048, 'get_visible')
        # Calling get_visible(args, kwargs) (line 967)
        get_visible_call_result_210051 = invoke(stypy.reporting.localization.Localization(__file__, 967, 24), get_visible_210049, *[], **kwargs_210050)
        
        # Assigning a type to the variable 'yaxis_visible' (line 967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 8), 'yaxis_visible', get_visible_call_result_210051)
        
        # Call to cla(...): (line 969)
        # Processing the call keyword arguments (line 969)
        kwargs_210055 = {}
        # Getting the type of 'self' (line 969)
        self_210052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 8), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 969)
        xaxis_210053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 969, 8), self_210052, 'xaxis')
        # Obtaining the member 'cla' of a type (line 969)
        cla_210054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 969, 8), xaxis_210053, 'cla')
        # Calling cla(args, kwargs) (line 969)
        cla_call_result_210056 = invoke(stypy.reporting.localization.Localization(__file__, 969, 8), cla_210054, *[], **kwargs_210055)
        
        
        # Call to cla(...): (line 970)
        # Processing the call keyword arguments (line 970)
        kwargs_210060 = {}
        # Getting the type of 'self' (line 970)
        self_210057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 970)
        yaxis_210058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 8), self_210057, 'yaxis')
        # Obtaining the member 'cla' of a type (line 970)
        cla_210059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 8), yaxis_210058, 'cla')
        # Calling cla(args, kwargs) (line 970)
        cla_call_result_210061 = invoke(stypy.reporting.localization.Localization(__file__, 970, 8), cla_210059, *[], **kwargs_210060)
        
        
        
        # Call to iteritems(...): (line 971)
        # Processing the call arguments (line 971)
        # Getting the type of 'self' (line 971)
        self_210064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 41), 'self', False)
        # Obtaining the member 'spines' of a type (line 971)
        spines_210065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 41), self_210064, 'spines')
        # Processing the call keyword arguments (line 971)
        kwargs_210066 = {}
        # Getting the type of 'six' (line 971)
        six_210062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 27), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 971)
        iteritems_210063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 27), six_210062, 'iteritems')
        # Calling iteritems(args, kwargs) (line 971)
        iteritems_call_result_210067 = invoke(stypy.reporting.localization.Localization(__file__, 971, 27), iteritems_210063, *[spines_210065], **kwargs_210066)
        
        # Testing the type of a for loop iterable (line 971)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 971, 8), iteritems_call_result_210067)
        # Getting the type of the for loop variable (line 971)
        for_loop_var_210068 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 971, 8), iteritems_call_result_210067)
        # Assigning a type to the variable 'name' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 971, 8), for_loop_var_210068))
        # Assigning a type to the variable 'spine' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'spine', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 971, 8), for_loop_var_210068))
        # SSA begins for a for statement (line 971)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to cla(...): (line 972)
        # Processing the call keyword arguments (line 972)
        kwargs_210071 = {}
        # Getting the type of 'spine' (line 972)
        spine_210069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 12), 'spine', False)
        # Obtaining the member 'cla' of a type (line 972)
        cla_210070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 972, 12), spine_210069, 'cla')
        # Calling cla(args, kwargs) (line 972)
        cla_call_result_210072 = invoke(stypy.reporting.localization.Localization(__file__, 972, 12), cla_210070, *[], **kwargs_210071)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 974):
        
        # Assigning a Name to a Attribute (line 974):
        # Getting the type of 'True' (line 974)
        True_210073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 43), 'True')
        # Getting the type of 'self' (line 974)
        self_210074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 8), 'self')
        # Setting the type of the member 'ignore_existing_data_limits' of a type (line 974)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 8), self_210074, 'ignore_existing_data_limits', True_210073)
        
        # Assigning a Call to a Attribute (line 975):
        
        # Assigning a Call to a Attribute (line 975):
        
        # Call to CallbackRegistry(...): (line 975)
        # Processing the call keyword arguments (line 975)
        kwargs_210077 = {}
        # Getting the type of 'cbook' (line 975)
        cbook_210075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 25), 'cbook', False)
        # Obtaining the member 'CallbackRegistry' of a type (line 975)
        CallbackRegistry_210076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 25), cbook_210075, 'CallbackRegistry')
        # Calling CallbackRegistry(args, kwargs) (line 975)
        CallbackRegistry_call_result_210078 = invoke(stypy.reporting.localization.Localization(__file__, 975, 25), CallbackRegistry_210076, *[], **kwargs_210077)
        
        # Getting the type of 'self' (line 975)
        self_210079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 8), 'self')
        # Setting the type of the member 'callbacks' of a type (line 975)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 8), self_210079, 'callbacks', CallbackRegistry_call_result_210078)
        
        
        # Getting the type of 'self' (line 977)
        self_210080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 11), 'self')
        # Obtaining the member '_sharex' of a type (line 977)
        _sharex_210081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 11), self_210080, '_sharex')
        # Getting the type of 'None' (line 977)
        None_210082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 31), 'None')
        # Applying the binary operator 'isnot' (line 977)
        result_is_not_210083 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 11), 'isnot', _sharex_210081, None_210082)
        
        # Testing the type of an if condition (line 977)
        if_condition_210084 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 977, 8), result_is_not_210083)
        # Assigning a type to the variable 'if_condition_210084' (line 977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 8), 'if_condition_210084', if_condition_210084)
        # SSA begins for if statement (line 977)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 980):
        
        # Assigning a Attribute to a Attribute (line 980):
        # Getting the type of 'self' (line 980)
        self_210085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 31), 'self')
        # Obtaining the member '_sharex' of a type (line 980)
        _sharex_210086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 31), self_210085, '_sharex')
        # Obtaining the member 'xaxis' of a type (line 980)
        xaxis_210087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 31), _sharex_210086, 'xaxis')
        # Obtaining the member 'major' of a type (line 980)
        major_210088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 31), xaxis_210087, 'major')
        # Getting the type of 'self' (line 980)
        self_210089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 12), 'self')
        # Obtaining the member 'xaxis' of a type (line 980)
        xaxis_210090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 12), self_210089, 'xaxis')
        # Setting the type of the member 'major' of a type (line 980)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 12), xaxis_210090, 'major', major_210088)
        
        # Assigning a Attribute to a Attribute (line 981):
        
        # Assigning a Attribute to a Attribute (line 981):
        # Getting the type of 'self' (line 981)
        self_210091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 31), 'self')
        # Obtaining the member '_sharex' of a type (line 981)
        _sharex_210092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 31), self_210091, '_sharex')
        # Obtaining the member 'xaxis' of a type (line 981)
        xaxis_210093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 31), _sharex_210092, 'xaxis')
        # Obtaining the member 'minor' of a type (line 981)
        minor_210094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 31), xaxis_210093, 'minor')
        # Getting the type of 'self' (line 981)
        self_210095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 12), 'self')
        # Obtaining the member 'xaxis' of a type (line 981)
        xaxis_210096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 12), self_210095, 'xaxis')
        # Setting the type of the member 'minor' of a type (line 981)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 12), xaxis_210096, 'minor', minor_210094)
        
        # Assigning a Call to a Tuple (line 982):
        
        # Assigning a Call to a Name:
        
        # Call to get_xlim(...): (line 982)
        # Processing the call keyword arguments (line 982)
        kwargs_210100 = {}
        # Getting the type of 'self' (line 982)
        self_210097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 21), 'self', False)
        # Obtaining the member '_sharex' of a type (line 982)
        _sharex_210098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 21), self_210097, '_sharex')
        # Obtaining the member 'get_xlim' of a type (line 982)
        get_xlim_210099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 21), _sharex_210098, 'get_xlim')
        # Calling get_xlim(args, kwargs) (line 982)
        get_xlim_call_result_210101 = invoke(stypy.reporting.localization.Localization(__file__, 982, 21), get_xlim_210099, *[], **kwargs_210100)
        
        # Assigning a type to the variable 'call_assignment_207709' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 12), 'call_assignment_207709', get_xlim_call_result_210101)
        
        # Assigning a Call to a Name (line 982):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_210104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 982, 12), 'int')
        # Processing the call keyword arguments
        kwargs_210105 = {}
        # Getting the type of 'call_assignment_207709' (line 982)
        call_assignment_207709_210102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 12), 'call_assignment_207709', False)
        # Obtaining the member '__getitem__' of a type (line 982)
        getitem___210103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 12), call_assignment_207709_210102, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_210106 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___210103, *[int_210104], **kwargs_210105)
        
        # Assigning a type to the variable 'call_assignment_207710' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 12), 'call_assignment_207710', getitem___call_result_210106)
        
        # Assigning a Name to a Name (line 982):
        # Getting the type of 'call_assignment_207710' (line 982)
        call_assignment_207710_210107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 12), 'call_assignment_207710')
        # Assigning a type to the variable 'x0' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 12), 'x0', call_assignment_207710_210107)
        
        # Assigning a Call to a Name (line 982):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_210110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 982, 12), 'int')
        # Processing the call keyword arguments
        kwargs_210111 = {}
        # Getting the type of 'call_assignment_207709' (line 982)
        call_assignment_207709_210108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 12), 'call_assignment_207709', False)
        # Obtaining the member '__getitem__' of a type (line 982)
        getitem___210109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 12), call_assignment_207709_210108, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_210112 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___210109, *[int_210110], **kwargs_210111)
        
        # Assigning a type to the variable 'call_assignment_207711' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 12), 'call_assignment_207711', getitem___call_result_210112)
        
        # Assigning a Name to a Name (line 982):
        # Getting the type of 'call_assignment_207711' (line 982)
        call_assignment_207711_210113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 12), 'call_assignment_207711')
        # Assigning a type to the variable 'x1' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 16), 'x1', call_assignment_207711_210113)
        
        # Call to set_xlim(...): (line 983)
        # Processing the call arguments (line 983)
        # Getting the type of 'x0' (line 983)
        x0_210116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 26), 'x0', False)
        # Getting the type of 'x1' (line 983)
        x1_210117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 30), 'x1', False)
        # Processing the call keyword arguments (line 983)
        # Getting the type of 'False' (line 983)
        False_210118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 39), 'False', False)
        keyword_210119 = False_210118
        # Getting the type of 'None' (line 983)
        None_210120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 51), 'None', False)
        keyword_210121 = None_210120
        kwargs_210122 = {'auto': keyword_210121, 'emit': keyword_210119}
        # Getting the type of 'self' (line 983)
        self_210114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 12), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 983)
        set_xlim_210115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 983, 12), self_210114, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 983)
        set_xlim_call_result_210123 = invoke(stypy.reporting.localization.Localization(__file__, 983, 12), set_xlim_210115, *[x0_210116, x1_210117], **kwargs_210122)
        
        
        # Assigning a Call to a Attribute (line 984):
        
        # Assigning a Call to a Attribute (line 984):
        
        # Call to scale_factory(...): (line 984)
        # Processing the call arguments (line 984)
        
        # Call to get_scale(...): (line 985)
        # Processing the call keyword arguments (line 985)
        kwargs_210130 = {}
        # Getting the type of 'self' (line 985)
        self_210126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 20), 'self', False)
        # Obtaining the member '_sharex' of a type (line 985)
        _sharex_210127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 985, 20), self_210126, '_sharex')
        # Obtaining the member 'xaxis' of a type (line 985)
        xaxis_210128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 985, 20), _sharex_210127, 'xaxis')
        # Obtaining the member 'get_scale' of a type (line 985)
        get_scale_210129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 985, 20), xaxis_210128, 'get_scale')
        # Calling get_scale(args, kwargs) (line 985)
        get_scale_call_result_210131 = invoke(stypy.reporting.localization.Localization(__file__, 985, 20), get_scale_210129, *[], **kwargs_210130)
        
        # Getting the type of 'self' (line 985)
        self_210132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 52), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 985)
        xaxis_210133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 985, 52), self_210132, 'xaxis')
        # Processing the call keyword arguments (line 984)
        kwargs_210134 = {}
        # Getting the type of 'mscale' (line 984)
        mscale_210124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 32), 'mscale', False)
        # Obtaining the member 'scale_factory' of a type (line 984)
        scale_factory_210125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 32), mscale_210124, 'scale_factory')
        # Calling scale_factory(args, kwargs) (line 984)
        scale_factory_call_result_210135 = invoke(stypy.reporting.localization.Localization(__file__, 984, 32), scale_factory_210125, *[get_scale_call_result_210131, xaxis_210133], **kwargs_210134)
        
        # Getting the type of 'self' (line 984)
        self_210136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 12), 'self')
        # Obtaining the member 'xaxis' of a type (line 984)
        xaxis_210137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 12), self_210136, 'xaxis')
        # Setting the type of the member '_scale' of a type (line 984)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 12), xaxis_210137, '_scale', scale_factory_call_result_210135)
        # SSA branch for the else part of an if statement (line 977)
        module_type_store.open_ssa_branch('else')
        
        # Call to _set_scale(...): (line 987)
        # Processing the call arguments (line 987)
        unicode_210141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 987, 34), 'unicode', u'linear')
        # Processing the call keyword arguments (line 987)
        kwargs_210142 = {}
        # Getting the type of 'self' (line 987)
        self_210138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 12), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 987)
        xaxis_210139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 12), self_210138, 'xaxis')
        # Obtaining the member '_set_scale' of a type (line 987)
        _set_scale_210140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 12), xaxis_210139, '_set_scale')
        # Calling _set_scale(args, kwargs) (line 987)
        _set_scale_call_result_210143 = invoke(stypy.reporting.localization.Localization(__file__, 987, 12), _set_scale_210140, *[unicode_210141], **kwargs_210142)
        
        
        
        # SSA begins for try-except statement (line 988)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to set_xlim(...): (line 989)
        # Processing the call arguments (line 989)
        int_210146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 30), 'int')
        int_210147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 33), 'int')
        # Processing the call keyword arguments (line 989)
        kwargs_210148 = {}
        # Getting the type of 'self' (line 989)
        self_210144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 16), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 989)
        set_xlim_210145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 989, 16), self_210144, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 989)
        set_xlim_call_result_210149 = invoke(stypy.reporting.localization.Localization(__file__, 989, 16), set_xlim_210145, *[int_210146, int_210147], **kwargs_210148)
        
        # SSA branch for the except part of a try statement (line 988)
        # SSA branch for the except 'TypeError' branch of a try statement (line 988)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 988)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 977)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 993)
        self_210150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 11), 'self')
        # Obtaining the member '_sharey' of a type (line 993)
        _sharey_210151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 11), self_210150, '_sharey')
        # Getting the type of 'None' (line 993)
        None_210152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 31), 'None')
        # Applying the binary operator 'isnot' (line 993)
        result_is_not_210153 = python_operator(stypy.reporting.localization.Localization(__file__, 993, 11), 'isnot', _sharey_210151, None_210152)
        
        # Testing the type of an if condition (line 993)
        if_condition_210154 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 993, 8), result_is_not_210153)
        # Assigning a type to the variable 'if_condition_210154' (line 993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 8), 'if_condition_210154', if_condition_210154)
        # SSA begins for if statement (line 993)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 994):
        
        # Assigning a Attribute to a Attribute (line 994):
        # Getting the type of 'self' (line 994)
        self_210155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 31), 'self')
        # Obtaining the member '_sharey' of a type (line 994)
        _sharey_210156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 31), self_210155, '_sharey')
        # Obtaining the member 'yaxis' of a type (line 994)
        yaxis_210157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 31), _sharey_210156, 'yaxis')
        # Obtaining the member 'major' of a type (line 994)
        major_210158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 31), yaxis_210157, 'major')
        # Getting the type of 'self' (line 994)
        self_210159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 12), 'self')
        # Obtaining the member 'yaxis' of a type (line 994)
        yaxis_210160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 12), self_210159, 'yaxis')
        # Setting the type of the member 'major' of a type (line 994)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 12), yaxis_210160, 'major', major_210158)
        
        # Assigning a Attribute to a Attribute (line 995):
        
        # Assigning a Attribute to a Attribute (line 995):
        # Getting the type of 'self' (line 995)
        self_210161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 31), 'self')
        # Obtaining the member '_sharey' of a type (line 995)
        _sharey_210162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 31), self_210161, '_sharey')
        # Obtaining the member 'yaxis' of a type (line 995)
        yaxis_210163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 31), _sharey_210162, 'yaxis')
        # Obtaining the member 'minor' of a type (line 995)
        minor_210164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 31), yaxis_210163, 'minor')
        # Getting the type of 'self' (line 995)
        self_210165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 12), 'self')
        # Obtaining the member 'yaxis' of a type (line 995)
        yaxis_210166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 12), self_210165, 'yaxis')
        # Setting the type of the member 'minor' of a type (line 995)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 12), yaxis_210166, 'minor', minor_210164)
        
        # Assigning a Call to a Tuple (line 996):
        
        # Assigning a Call to a Name:
        
        # Call to get_ylim(...): (line 996)
        # Processing the call keyword arguments (line 996)
        kwargs_210170 = {}
        # Getting the type of 'self' (line 996)
        self_210167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 21), 'self', False)
        # Obtaining the member '_sharey' of a type (line 996)
        _sharey_210168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 21), self_210167, '_sharey')
        # Obtaining the member 'get_ylim' of a type (line 996)
        get_ylim_210169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 21), _sharey_210168, 'get_ylim')
        # Calling get_ylim(args, kwargs) (line 996)
        get_ylim_call_result_210171 = invoke(stypy.reporting.localization.Localization(__file__, 996, 21), get_ylim_210169, *[], **kwargs_210170)
        
        # Assigning a type to the variable 'call_assignment_207712' (line 996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 12), 'call_assignment_207712', get_ylim_call_result_210171)
        
        # Assigning a Call to a Name (line 996):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_210174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, 12), 'int')
        # Processing the call keyword arguments
        kwargs_210175 = {}
        # Getting the type of 'call_assignment_207712' (line 996)
        call_assignment_207712_210172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 12), 'call_assignment_207712', False)
        # Obtaining the member '__getitem__' of a type (line 996)
        getitem___210173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 12), call_assignment_207712_210172, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_210176 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___210173, *[int_210174], **kwargs_210175)
        
        # Assigning a type to the variable 'call_assignment_207713' (line 996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 12), 'call_assignment_207713', getitem___call_result_210176)
        
        # Assigning a Name to a Name (line 996):
        # Getting the type of 'call_assignment_207713' (line 996)
        call_assignment_207713_210177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 12), 'call_assignment_207713')
        # Assigning a type to the variable 'y0' (line 996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 12), 'y0', call_assignment_207713_210177)
        
        # Assigning a Call to a Name (line 996):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_210180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, 12), 'int')
        # Processing the call keyword arguments
        kwargs_210181 = {}
        # Getting the type of 'call_assignment_207712' (line 996)
        call_assignment_207712_210178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 12), 'call_assignment_207712', False)
        # Obtaining the member '__getitem__' of a type (line 996)
        getitem___210179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 12), call_assignment_207712_210178, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_210182 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___210179, *[int_210180], **kwargs_210181)
        
        # Assigning a type to the variable 'call_assignment_207714' (line 996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 12), 'call_assignment_207714', getitem___call_result_210182)
        
        # Assigning a Name to a Name (line 996):
        # Getting the type of 'call_assignment_207714' (line 996)
        call_assignment_207714_210183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 12), 'call_assignment_207714')
        # Assigning a type to the variable 'y1' (line 996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 16), 'y1', call_assignment_207714_210183)
        
        # Call to set_ylim(...): (line 997)
        # Processing the call arguments (line 997)
        # Getting the type of 'y0' (line 997)
        y0_210186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 26), 'y0', False)
        # Getting the type of 'y1' (line 997)
        y1_210187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 30), 'y1', False)
        # Processing the call keyword arguments (line 997)
        # Getting the type of 'False' (line 997)
        False_210188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 39), 'False', False)
        keyword_210189 = False_210188
        # Getting the type of 'None' (line 997)
        None_210190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 51), 'None', False)
        keyword_210191 = None_210190
        kwargs_210192 = {'auto': keyword_210191, 'emit': keyword_210189}
        # Getting the type of 'self' (line 997)
        self_210184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 12), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 997)
        set_ylim_210185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 12), self_210184, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 997)
        set_ylim_call_result_210193 = invoke(stypy.reporting.localization.Localization(__file__, 997, 12), set_ylim_210185, *[y0_210186, y1_210187], **kwargs_210192)
        
        
        # Assigning a Call to a Attribute (line 998):
        
        # Assigning a Call to a Attribute (line 998):
        
        # Call to scale_factory(...): (line 998)
        # Processing the call arguments (line 998)
        
        # Call to get_scale(...): (line 999)
        # Processing the call keyword arguments (line 999)
        kwargs_210200 = {}
        # Getting the type of 'self' (line 999)
        self_210196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 20), 'self', False)
        # Obtaining the member '_sharey' of a type (line 999)
        _sharey_210197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 999, 20), self_210196, '_sharey')
        # Obtaining the member 'yaxis' of a type (line 999)
        yaxis_210198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 999, 20), _sharey_210197, 'yaxis')
        # Obtaining the member 'get_scale' of a type (line 999)
        get_scale_210199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 999, 20), yaxis_210198, 'get_scale')
        # Calling get_scale(args, kwargs) (line 999)
        get_scale_call_result_210201 = invoke(stypy.reporting.localization.Localization(__file__, 999, 20), get_scale_210199, *[], **kwargs_210200)
        
        # Getting the type of 'self' (line 999)
        self_210202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 52), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 999)
        yaxis_210203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 999, 52), self_210202, 'yaxis')
        # Processing the call keyword arguments (line 998)
        kwargs_210204 = {}
        # Getting the type of 'mscale' (line 998)
        mscale_210194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 32), 'mscale', False)
        # Obtaining the member 'scale_factory' of a type (line 998)
        scale_factory_210195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 32), mscale_210194, 'scale_factory')
        # Calling scale_factory(args, kwargs) (line 998)
        scale_factory_call_result_210205 = invoke(stypy.reporting.localization.Localization(__file__, 998, 32), scale_factory_210195, *[get_scale_call_result_210201, yaxis_210203], **kwargs_210204)
        
        # Getting the type of 'self' (line 998)
        self_210206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 12), 'self')
        # Obtaining the member 'yaxis' of a type (line 998)
        yaxis_210207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 12), self_210206, 'yaxis')
        # Setting the type of the member '_scale' of a type (line 998)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 12), yaxis_210207, '_scale', scale_factory_call_result_210205)
        # SSA branch for the else part of an if statement (line 993)
        module_type_store.open_ssa_branch('else')
        
        # Call to _set_scale(...): (line 1001)
        # Processing the call arguments (line 1001)
        unicode_210211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1001, 34), 'unicode', u'linear')
        # Processing the call keyword arguments (line 1001)
        kwargs_210212 = {}
        # Getting the type of 'self' (line 1001)
        self_210208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 12), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 1001)
        yaxis_210209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 12), self_210208, 'yaxis')
        # Obtaining the member '_set_scale' of a type (line 1001)
        _set_scale_210210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 12), yaxis_210209, '_set_scale')
        # Calling _set_scale(args, kwargs) (line 1001)
        _set_scale_call_result_210213 = invoke(stypy.reporting.localization.Localization(__file__, 1001, 12), _set_scale_210210, *[unicode_210211], **kwargs_210212)
        
        
        
        # SSA begins for try-except statement (line 1002)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to set_ylim(...): (line 1003)
        # Processing the call arguments (line 1003)
        int_210216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1003, 30), 'int')
        int_210217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1003, 33), 'int')
        # Processing the call keyword arguments (line 1003)
        kwargs_210218 = {}
        # Getting the type of 'self' (line 1003)
        self_210214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 16), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 1003)
        set_ylim_210215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 16), self_210214, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 1003)
        set_ylim_call_result_210219 = invoke(stypy.reporting.localization.Localization(__file__, 1003, 16), set_ylim_210215, *[int_210216, int_210217], **kwargs_210218)
        
        # SSA branch for the except part of a try statement (line 1002)
        # SSA branch for the except 'TypeError' branch of a try statement (line 1002)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1002)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 993)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Obtaining the type of the subscript
        unicode_210220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1008, 21), 'unicode', u'xtick.minor.visible')
        # Getting the type of 'rcParams' (line 1008)
        rcParams_210221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 12), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1008)
        getitem___210222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1008, 12), rcParams_210221, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1008)
        subscript_call_result_210223 = invoke(stypy.reporting.localization.Localization(__file__, 1008, 12), getitem___210222, unicode_210220)
        
        # Testing the type of an if condition (line 1008)
        if_condition_210224 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1008, 8), subscript_call_result_210223)
        # Assigning a type to the variable 'if_condition_210224' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 8), 'if_condition_210224', if_condition_210224)
        # SSA begins for if statement (line 1008)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_minor_locator(...): (line 1009)
        # Processing the call arguments (line 1009)
        
        # Call to AutoMinorLocator(...): (line 1009)
        # Processing the call keyword arguments (line 1009)
        kwargs_210230 = {}
        # Getting the type of 'mticker' (line 1009)
        mticker_210228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 41), 'mticker', False)
        # Obtaining the member 'AutoMinorLocator' of a type (line 1009)
        AutoMinorLocator_210229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 41), mticker_210228, 'AutoMinorLocator')
        # Calling AutoMinorLocator(args, kwargs) (line 1009)
        AutoMinorLocator_call_result_210231 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 41), AutoMinorLocator_210229, *[], **kwargs_210230)
        
        # Processing the call keyword arguments (line 1009)
        kwargs_210232 = {}
        # Getting the type of 'self' (line 1009)
        self_210225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 12), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 1009)
        xaxis_210226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 12), self_210225, 'xaxis')
        # Obtaining the member 'set_minor_locator' of a type (line 1009)
        set_minor_locator_210227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 12), xaxis_210226, 'set_minor_locator')
        # Calling set_minor_locator(args, kwargs) (line 1009)
        set_minor_locator_call_result_210233 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 12), set_minor_locator_210227, *[AutoMinorLocator_call_result_210231], **kwargs_210232)
        
        # SSA join for if statement (line 1008)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Obtaining the type of the subscript
        unicode_210234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1011, 21), 'unicode', u'ytick.minor.visible')
        # Getting the type of 'rcParams' (line 1011)
        rcParams_210235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 12), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1011)
        getitem___210236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1011, 12), rcParams_210235, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1011)
        subscript_call_result_210237 = invoke(stypy.reporting.localization.Localization(__file__, 1011, 12), getitem___210236, unicode_210234)
        
        # Testing the type of an if condition (line 1011)
        if_condition_210238 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1011, 8), subscript_call_result_210237)
        # Assigning a type to the variable 'if_condition_210238' (line 1011)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1011, 8), 'if_condition_210238', if_condition_210238)
        # SSA begins for if statement (line 1011)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_minor_locator(...): (line 1012)
        # Processing the call arguments (line 1012)
        
        # Call to AutoMinorLocator(...): (line 1012)
        # Processing the call keyword arguments (line 1012)
        kwargs_210244 = {}
        # Getting the type of 'mticker' (line 1012)
        mticker_210242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 41), 'mticker', False)
        # Obtaining the member 'AutoMinorLocator' of a type (line 1012)
        AutoMinorLocator_210243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1012, 41), mticker_210242, 'AutoMinorLocator')
        # Calling AutoMinorLocator(args, kwargs) (line 1012)
        AutoMinorLocator_call_result_210245 = invoke(stypy.reporting.localization.Localization(__file__, 1012, 41), AutoMinorLocator_210243, *[], **kwargs_210244)
        
        # Processing the call keyword arguments (line 1012)
        kwargs_210246 = {}
        # Getting the type of 'self' (line 1012)
        self_210239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 12), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 1012)
        yaxis_210240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1012, 12), self_210239, 'yaxis')
        # Obtaining the member 'set_minor_locator' of a type (line 1012)
        set_minor_locator_210241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1012, 12), yaxis_210240, 'set_minor_locator')
        # Calling set_minor_locator(args, kwargs) (line 1012)
        set_minor_locator_call_result_210247 = invoke(stypy.reporting.localization.Localization(__file__, 1012, 12), set_minor_locator_210241, *[AutoMinorLocator_call_result_210245], **kwargs_210246)
        
        # SSA join for if statement (line 1011)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1014):
        
        # Assigning a Name to a Attribute (line 1014):
        # Getting the type of 'True' (line 1014)
        True_210248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 29), 'True')
        # Getting the type of 'self' (line 1014)
        self_210249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 8), 'self')
        # Setting the type of the member '_autoscaleXon' of a type (line 1014)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1014, 8), self_210249, '_autoscaleXon', True_210248)
        
        # Assigning a Name to a Attribute (line 1015):
        
        # Assigning a Name to a Attribute (line 1015):
        # Getting the type of 'True' (line 1015)
        True_210250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 29), 'True')
        # Getting the type of 'self' (line 1015)
        self_210251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 8), 'self')
        # Setting the type of the member '_autoscaleYon' of a type (line 1015)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1015, 8), self_210251, '_autoscaleYon', True_210250)
        
        # Assigning a Subscript to a Attribute (line 1016):
        
        # Assigning a Subscript to a Attribute (line 1016):
        
        # Obtaining the type of the subscript
        unicode_210252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1016, 33), 'unicode', u'axes.xmargin')
        # Getting the type of 'rcParams' (line 1016)
        rcParams_210253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 24), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1016)
        getitem___210254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1016, 24), rcParams_210253, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1016)
        subscript_call_result_210255 = invoke(stypy.reporting.localization.Localization(__file__, 1016, 24), getitem___210254, unicode_210252)
        
        # Getting the type of 'self' (line 1016)
        self_210256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 8), 'self')
        # Setting the type of the member '_xmargin' of a type (line 1016)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1016, 8), self_210256, '_xmargin', subscript_call_result_210255)
        
        # Assigning a Subscript to a Attribute (line 1017):
        
        # Assigning a Subscript to a Attribute (line 1017):
        
        # Obtaining the type of the subscript
        unicode_210257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 33), 'unicode', u'axes.ymargin')
        # Getting the type of 'rcParams' (line 1017)
        rcParams_210258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 24), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1017)
        getitem___210259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 24), rcParams_210258, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1017)
        subscript_call_result_210260 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 24), getitem___210259, unicode_210257)
        
        # Getting the type of 'self' (line 1017)
        self_210261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 8), 'self')
        # Setting the type of the member '_ymargin' of a type (line 1017)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 8), self_210261, '_ymargin', subscript_call_result_210260)
        
        # Assigning a Name to a Attribute (line 1018):
        
        # Assigning a Name to a Attribute (line 1018):
        # Getting the type of 'None' (line 1018)
        None_210262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 22), 'None')
        # Getting the type of 'self' (line 1018)
        self_210263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 8), 'self')
        # Setting the type of the member '_tight' of a type (line 1018)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1018, 8), self_210263, '_tight', None_210262)
        
        # Assigning a Name to a Attribute (line 1019):
        
        # Assigning a Name to a Attribute (line 1019):
        # Getting the type of 'True' (line 1019)
        True_210264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 33), 'True')
        # Getting the type of 'self' (line 1019)
        self_210265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 8), 'self')
        # Setting the type of the member '_use_sticky_edges' of a type (line 1019)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1019, 8), self_210265, '_use_sticky_edges', True_210264)
        
        # Call to _update_transScale(...): (line 1020)
        # Processing the call keyword arguments (line 1020)
        kwargs_210268 = {}
        # Getting the type of 'self' (line 1020)
        self_210266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 8), 'self', False)
        # Obtaining the member '_update_transScale' of a type (line 1020)
        _update_transScale_210267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 8), self_210266, '_update_transScale')
        # Calling _update_transScale(args, kwargs) (line 1020)
        _update_transScale_call_result_210269 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 8), _update_transScale_210267, *[], **kwargs_210268)
        
        
        # Assigning a Call to a Attribute (line 1022):
        
        # Assigning a Call to a Attribute (line 1022):
        
        # Call to _process_plot_var_args(...): (line 1022)
        # Processing the call arguments (line 1022)
        # Getting the type of 'self' (line 1022)
        self_210271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 49), 'self', False)
        # Processing the call keyword arguments (line 1022)
        kwargs_210272 = {}
        # Getting the type of '_process_plot_var_args' (line 1022)
        _process_plot_var_args_210270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 26), '_process_plot_var_args', False)
        # Calling _process_plot_var_args(args, kwargs) (line 1022)
        _process_plot_var_args_call_result_210273 = invoke(stypy.reporting.localization.Localization(__file__, 1022, 26), _process_plot_var_args_210270, *[self_210271], **kwargs_210272)
        
        # Getting the type of 'self' (line 1022)
        self_210274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 8), 'self')
        # Setting the type of the member '_get_lines' of a type (line 1022)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1022, 8), self_210274, '_get_lines', _process_plot_var_args_call_result_210273)
        
        # Assigning a Call to a Attribute (line 1023):
        
        # Assigning a Call to a Attribute (line 1023):
        
        # Call to _process_plot_var_args(...): (line 1023)
        # Processing the call arguments (line 1023)
        # Getting the type of 'self' (line 1023)
        self_210276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 60), 'self', False)
        unicode_210277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1023, 66), 'unicode', u'fill')
        # Processing the call keyword arguments (line 1023)
        kwargs_210278 = {}
        # Getting the type of '_process_plot_var_args' (line 1023)
        _process_plot_var_args_210275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 37), '_process_plot_var_args', False)
        # Calling _process_plot_var_args(args, kwargs) (line 1023)
        _process_plot_var_args_call_result_210279 = invoke(stypy.reporting.localization.Localization(__file__, 1023, 37), _process_plot_var_args_210275, *[self_210276, unicode_210277], **kwargs_210278)
        
        # Getting the type of 'self' (line 1023)
        self_210280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 8), 'self')
        # Setting the type of the member '_get_patches_for_fill' of a type (line 1023)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 8), self_210280, '_get_patches_for_fill', _process_plot_var_args_call_result_210279)
        
        # Assigning a Subscript to a Attribute (line 1025):
        
        # Assigning a Subscript to a Attribute (line 1025):
        
        # Obtaining the type of the subscript
        unicode_210281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1025, 32), 'unicode', u'axes.grid')
        # Getting the type of 'rcParams' (line 1025)
        rcParams_210282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 23), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1025)
        getitem___210283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1025, 23), rcParams_210282, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1025)
        subscript_call_result_210284 = invoke(stypy.reporting.localization.Localization(__file__, 1025, 23), getitem___210283, unicode_210281)
        
        # Getting the type of 'self' (line 1025)
        self_210285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 8), 'self')
        # Setting the type of the member '_gridOn' of a type (line 1025)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1025, 8), self_210285, '_gridOn', subscript_call_result_210284)
        
        # Assigning a List to a Attribute (line 1026):
        
        # Assigning a List to a Attribute (line 1026):
        
        # Obtaining an instance of the builtin type 'list' (line 1026)
        list_210286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1026, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1026)
        
        # Getting the type of 'self' (line 1026)
        self_210287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 8), 'self')
        # Setting the type of the member 'lines' of a type (line 1026)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 8), self_210287, 'lines', list_210286)
        
        # Assigning a List to a Attribute (line 1027):
        
        # Assigning a List to a Attribute (line 1027):
        
        # Obtaining an instance of the builtin type 'list' (line 1027)
        list_210288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1027)
        
        # Getting the type of 'self' (line 1027)
        self_210289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 8), 'self')
        # Setting the type of the member 'patches' of a type (line 1027)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 8), self_210289, 'patches', list_210288)
        
        # Assigning a List to a Attribute (line 1028):
        
        # Assigning a List to a Attribute (line 1028):
        
        # Obtaining an instance of the builtin type 'list' (line 1028)
        list_210290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1028)
        
        # Getting the type of 'self' (line 1028)
        self_210291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 8), 'self')
        # Setting the type of the member 'texts' of a type (line 1028)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 8), self_210291, 'texts', list_210290)
        
        # Assigning a List to a Attribute (line 1029):
        
        # Assigning a List to a Attribute (line 1029):
        
        # Obtaining an instance of the builtin type 'list' (line 1029)
        list_210292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1029)
        
        # Getting the type of 'self' (line 1029)
        self_210293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 8), 'self')
        # Setting the type of the member 'tables' of a type (line 1029)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 8), self_210293, 'tables', list_210292)
        
        # Assigning a List to a Attribute (line 1030):
        
        # Assigning a List to a Attribute (line 1030):
        
        # Obtaining an instance of the builtin type 'list' (line 1030)
        list_210294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1030)
        
        # Getting the type of 'self' (line 1030)
        self_210295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 8), 'self')
        # Setting the type of the member 'artists' of a type (line 1030)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1030, 8), self_210295, 'artists', list_210294)
        
        # Assigning a List to a Attribute (line 1031):
        
        # Assigning a List to a Attribute (line 1031):
        
        # Obtaining an instance of the builtin type 'list' (line 1031)
        list_210296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1031, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1031)
        
        # Getting the type of 'self' (line 1031)
        self_210297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 8), 'self')
        # Setting the type of the member 'images' of a type (line 1031)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1031, 8), self_210297, 'images', list_210296)
        
        # Assigning a Call to a Attribute (line 1032):
        
        # Assigning a Call to a Attribute (line 1032):
        
        # Call to set(...): (line 1032)
        # Processing the call keyword arguments (line 1032)
        kwargs_210299 = {}
        # Getting the type of 'set' (line 1032)
        set_210298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 29), 'set', False)
        # Calling set(args, kwargs) (line 1032)
        set_call_result_210300 = invoke(stypy.reporting.localization.Localization(__file__, 1032, 29), set_210298, *[], **kwargs_210299)
        
        # Getting the type of 'self' (line 1032)
        self_210301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 8), 'self')
        # Setting the type of the member 'mouseover_set' of a type (line 1032)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 8), self_210301, 'mouseover_set', set_call_result_210300)
        
        # Assigning a Name to a Attribute (line 1033):
        
        # Assigning a Name to a Attribute (line 1033):
        # Getting the type of 'None' (line 1033)
        None_210302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 30), 'None')
        # Getting the type of 'self' (line 1033)
        self_210303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 8), 'self')
        # Setting the type of the member '_current_image' of a type (line 1033)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1033, 8), self_210303, '_current_image', None_210302)
        
        # Assigning a Name to a Attribute (line 1034):
        
        # Assigning a Name to a Attribute (line 1034):
        # Getting the type of 'None' (line 1034)
        None_210304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 23), 'None')
        # Getting the type of 'self' (line 1034)
        self_210305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 8), 'self')
        # Setting the type of the member 'legend_' of a type (line 1034)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 8), self_210305, 'legend_', None_210304)
        
        # Assigning a List to a Attribute (line 1035):
        
        # Assigning a List to a Attribute (line 1035):
        
        # Obtaining an instance of the builtin type 'list' (line 1035)
        list_210306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1035, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1035)
        
        # Getting the type of 'self' (line 1035)
        self_210307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 8), 'self')
        # Setting the type of the member 'collections' of a type (line 1035)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1035, 8), self_210307, 'collections', list_210306)
        
        # Assigning a List to a Attribute (line 1036):
        
        # Assigning a List to a Attribute (line 1036):
        
        # Obtaining an instance of the builtin type 'list' (line 1036)
        list_210308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1036, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1036)
        
        # Getting the type of 'self' (line 1036)
        self_210309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 8), 'self')
        # Setting the type of the member 'containers' of a type (line 1036)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 8), self_210309, 'containers', list_210308)
        
        # Call to grid(...): (line 1038)
        # Processing the call arguments (line 1038)
        # Getting the type of 'False' (line 1038)
        False_210312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 18), 'False', False)
        # Processing the call keyword arguments (line 1038)
        kwargs_210313 = {}
        # Getting the type of 'self' (line 1038)
        self_210310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'self', False)
        # Obtaining the member 'grid' of a type (line 1038)
        grid_210311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 8), self_210310, 'grid')
        # Calling grid(args, kwargs) (line 1038)
        grid_call_result_210314 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 8), grid_210311, *[False_210312], **kwargs_210313)
        
        
        # Call to grid(...): (line 1039)
        # Processing the call arguments (line 1039)
        # Getting the type of 'self' (line 1039)
        self_210317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 18), 'self', False)
        # Obtaining the member '_gridOn' of a type (line 1039)
        _gridOn_210318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 18), self_210317, '_gridOn')
        # Processing the call keyword arguments (line 1039)
        
        # Obtaining the type of the subscript
        unicode_210319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 47), 'unicode', u'axes.grid.which')
        # Getting the type of 'rcParams' (line 1039)
        rcParams_210320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 38), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 1039)
        getitem___210321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 38), rcParams_210320, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1039)
        subscript_call_result_210322 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 38), getitem___210321, unicode_210319)
        
        keyword_210323 = subscript_call_result_210322
        
        # Obtaining the type of the subscript
        unicode_210324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 32), 'unicode', u'axes.grid.axis')
        # Getting the type of 'rcParams' (line 1040)
        rcParams_210325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 23), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 1040)
        getitem___210326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 23), rcParams_210325, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1040)
        subscript_call_result_210327 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 23), getitem___210326, unicode_210324)
        
        keyword_210328 = subscript_call_result_210327
        kwargs_210329 = {'which': keyword_210323, 'axis': keyword_210328}
        # Getting the type of 'self' (line 1039)
        self_210315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 8), 'self', False)
        # Obtaining the member 'grid' of a type (line 1039)
        grid_210316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 8), self_210315, 'grid')
        # Calling grid(args, kwargs) (line 1039)
        grid_call_result_210330 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 8), grid_210316, *[_gridOn_210318], **kwargs_210329)
        
        
        # Assigning a Call to a Name (line 1041):
        
        # Assigning a Call to a Name (line 1041):
        
        # Call to FontProperties(...): (line 1041)
        # Processing the call keyword arguments (line 1041)
        
        # Obtaining the type of the subscript
        unicode_210333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 26), 'unicode', u'axes.titlesize')
        # Getting the type of 'rcParams' (line 1042)
        rcParams_210334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 17), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 1042)
        getitem___210335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 17), rcParams_210334, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1042)
        subscript_call_result_210336 = invoke(stypy.reporting.localization.Localization(__file__, 1042, 17), getitem___210335, unicode_210333)
        
        keyword_210337 = subscript_call_result_210336
        
        # Obtaining the type of the subscript
        unicode_210338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 28), 'unicode', u'axes.titleweight')
        # Getting the type of 'rcParams' (line 1043)
        rcParams_210339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 19), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 1043)
        getitem___210340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 19), rcParams_210339, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1043)
        subscript_call_result_210341 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 19), getitem___210340, unicode_210338)
        
        keyword_210342 = subscript_call_result_210341
        kwargs_210343 = {'weight': keyword_210342, 'size': keyword_210337}
        # Getting the type of 'font_manager' (line 1041)
        font_manager_210331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 16), 'font_manager', False)
        # Obtaining the member 'FontProperties' of a type (line 1041)
        FontProperties_210332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 16), font_manager_210331, 'FontProperties')
        # Calling FontProperties(args, kwargs) (line 1041)
        FontProperties_call_result_210344 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 16), FontProperties_210332, *[], **kwargs_210343)
        
        # Assigning a type to the variable 'props' (line 1041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 8), 'props', FontProperties_call_result_210344)
        
        # Assigning a Subscript to a Name (line 1045):
        
        # Assigning a Subscript to a Name (line 1045):
        
        # Obtaining the type of the subscript
        unicode_210345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 39), 'unicode', u'axes.titlepad')
        # Getting the type of 'rcParams' (line 1045)
        rcParams_210346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 30), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1045)
        getitem___210347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 30), rcParams_210346, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1045)
        subscript_call_result_210348 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 30), getitem___210347, unicode_210345)
        
        # Assigning a type to the variable 'title_offset_points' (line 1045)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1045, 8), 'title_offset_points', subscript_call_result_210348)
        
        # Assigning a Call to a Attribute (line 1046):
        
        # Assigning a Call to a Attribute (line 1046):
        
        # Call to ScaledTranslation(...): (line 1046)
        # Processing the call arguments (line 1046)
        float_210351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 12), 'float')
        # Getting the type of 'title_offset_points' (line 1047)
        title_offset_points_210352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 17), 'title_offset_points', False)
        float_210353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 39), 'float')
        # Applying the binary operator 'div' (line 1047)
        result_div_210354 = python_operator(stypy.reporting.localization.Localization(__file__, 1047, 17), 'div', title_offset_points_210352, float_210353)
        
        # Getting the type of 'self' (line 1048)
        self_210355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 12), 'self', False)
        # Obtaining the member 'figure' of a type (line 1048)
        figure_210356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 12), self_210355, 'figure')
        # Obtaining the member 'dpi_scale_trans' of a type (line 1048)
        dpi_scale_trans_210357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 12), figure_210356, 'dpi_scale_trans')
        # Processing the call keyword arguments (line 1046)
        kwargs_210358 = {}
        # Getting the type of 'mtransforms' (line 1046)
        mtransforms_210349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 32), 'mtransforms', False)
        # Obtaining the member 'ScaledTranslation' of a type (line 1046)
        ScaledTranslation_210350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 32), mtransforms_210349, 'ScaledTranslation')
        # Calling ScaledTranslation(args, kwargs) (line 1046)
        ScaledTranslation_call_result_210359 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 32), ScaledTranslation_210350, *[float_210351, result_div_210354, dpi_scale_trans_210357], **kwargs_210358)
        
        # Getting the type of 'self' (line 1046)
        self_210360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 8), 'self')
        # Setting the type of the member 'titleOffsetTrans' of a type (line 1046)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 8), self_210360, 'titleOffsetTrans', ScaledTranslation_call_result_210359)
        
        # Assigning a Call to a Attribute (line 1049):
        
        # Assigning a Call to a Attribute (line 1049):
        
        # Call to Text(...): (line 1049)
        # Processing the call keyword arguments (line 1049)
        float_210363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 14), 'float')
        keyword_210364 = float_210363
        float_210365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 21), 'float')
        keyword_210366 = float_210365
        unicode_210367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 31), 'unicode', u'')
        keyword_210368 = unicode_210367
        # Getting the type of 'props' (line 1051)
        props_210369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 27), 'props', False)
        keyword_210370 = props_210369
        unicode_210371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 30), 'unicode', u'baseline')
        keyword_210372 = unicode_210371
        unicode_210373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1053, 32), 'unicode', u'center')
        keyword_210374 = unicode_210373
        kwargs_210375 = {'text': keyword_210368, 'fontproperties': keyword_210370, 'verticalalignment': keyword_210372, 'y': keyword_210366, 'x': keyword_210364, 'horizontalalignment': keyword_210374}
        # Getting the type of 'mtext' (line 1049)
        mtext_210361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 21), 'mtext', False)
        # Obtaining the member 'Text' of a type (line 1049)
        Text_210362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 21), mtext_210361, 'Text')
        # Calling Text(args, kwargs) (line 1049)
        Text_call_result_210376 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 21), Text_210362, *[], **kwargs_210375)
        
        # Getting the type of 'self' (line 1049)
        self_210377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 8), 'self')
        # Setting the type of the member 'title' of a type (line 1049)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 8), self_210377, 'title', Text_call_result_210376)
        
        # Assigning a Call to a Attribute (line 1055):
        
        # Assigning a Call to a Attribute (line 1055):
        
        # Call to Text(...): (line 1055)
        # Processing the call keyword arguments (line 1055)
        float_210380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1056, 14), 'float')
        keyword_210381 = float_210380
        float_210382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1056, 21), 'float')
        keyword_210383 = float_210382
        unicode_210384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1056, 31), 'unicode', u'')
        keyword_210385 = unicode_210384
        
        # Call to copy(...): (line 1057)
        # Processing the call keyword arguments (line 1057)
        kwargs_210388 = {}
        # Getting the type of 'props' (line 1057)
        props_210386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 27), 'props', False)
        # Obtaining the member 'copy' of a type (line 1057)
        copy_210387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 27), props_210386, 'copy')
        # Calling copy(args, kwargs) (line 1057)
        copy_call_result_210389 = invoke(stypy.reporting.localization.Localization(__file__, 1057, 27), copy_210387, *[], **kwargs_210388)
        
        keyword_210390 = copy_call_result_210389
        unicode_210391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1058, 30), 'unicode', u'baseline')
        keyword_210392 = unicode_210391
        unicode_210393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1059, 32), 'unicode', u'left')
        keyword_210394 = unicode_210393
        kwargs_210395 = {'text': keyword_210385, 'fontproperties': keyword_210390, 'verticalalignment': keyword_210392, 'y': keyword_210383, 'x': keyword_210381, 'horizontalalignment': keyword_210394}
        # Getting the type of 'mtext' (line 1055)
        mtext_210378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 27), 'mtext', False)
        # Obtaining the member 'Text' of a type (line 1055)
        Text_210379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1055, 27), mtext_210378, 'Text')
        # Calling Text(args, kwargs) (line 1055)
        Text_call_result_210396 = invoke(stypy.reporting.localization.Localization(__file__, 1055, 27), Text_210379, *[], **kwargs_210395)
        
        # Getting the type of 'self' (line 1055)
        self_210397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 8), 'self')
        # Setting the type of the member '_left_title' of a type (line 1055)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1055, 8), self_210397, '_left_title', Text_call_result_210396)
        
        # Assigning a Call to a Attribute (line 1060):
        
        # Assigning a Call to a Attribute (line 1060):
        
        # Call to Text(...): (line 1060)
        # Processing the call keyword arguments (line 1060)
        float_210400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1061, 14), 'float')
        keyword_210401 = float_210400
        float_210402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1061, 21), 'float')
        keyword_210403 = float_210402
        unicode_210404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1061, 31), 'unicode', u'')
        keyword_210405 = unicode_210404
        
        # Call to copy(...): (line 1062)
        # Processing the call keyword arguments (line 1062)
        kwargs_210408 = {}
        # Getting the type of 'props' (line 1062)
        props_210406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 27), 'props', False)
        # Obtaining the member 'copy' of a type (line 1062)
        copy_210407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 27), props_210406, 'copy')
        # Calling copy(args, kwargs) (line 1062)
        copy_call_result_210409 = invoke(stypy.reporting.localization.Localization(__file__, 1062, 27), copy_210407, *[], **kwargs_210408)
        
        keyword_210410 = copy_call_result_210409
        unicode_210411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1063, 30), 'unicode', u'baseline')
        keyword_210412 = unicode_210411
        unicode_210413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1064, 32), 'unicode', u'right')
        keyword_210414 = unicode_210413
        kwargs_210415 = {'text': keyword_210405, 'fontproperties': keyword_210410, 'verticalalignment': keyword_210412, 'y': keyword_210403, 'x': keyword_210401, 'horizontalalignment': keyword_210414}
        # Getting the type of 'mtext' (line 1060)
        mtext_210398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 28), 'mtext', False)
        # Obtaining the member 'Text' of a type (line 1060)
        Text_210399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 28), mtext_210398, 'Text')
        # Calling Text(args, kwargs) (line 1060)
        Text_call_result_210416 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 28), Text_210399, *[], **kwargs_210415)
        
        # Getting the type of 'self' (line 1060)
        self_210417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 8), 'self')
        # Setting the type of the member '_right_title' of a type (line 1060)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 8), self_210417, '_right_title', Text_call_result_210416)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1067)
        tuple_210418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1067)
        # Adding element type (line 1067)
        # Getting the type of 'self' (line 1067)
        self_210419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 23), 'self')
        # Obtaining the member 'title' of a type (line 1067)
        title_210420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 23), self_210419, 'title')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1067, 23), tuple_210418, title_210420)
        # Adding element type (line 1067)
        # Getting the type of 'self' (line 1067)
        self_210421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 35), 'self')
        # Obtaining the member '_left_title' of a type (line 1067)
        _left_title_210422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 35), self_210421, '_left_title')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1067, 23), tuple_210418, _left_title_210422)
        # Adding element type (line 1067)
        # Getting the type of 'self' (line 1067)
        self_210423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 53), 'self')
        # Obtaining the member '_right_title' of a type (line 1067)
        _right_title_210424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 53), self_210423, '_right_title')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1067, 23), tuple_210418, _right_title_210424)
        
        # Testing the type of a for loop iterable (line 1067)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1067, 8), tuple_210418)
        # Getting the type of the for loop variable (line 1067)
        for_loop_var_210425 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1067, 8), tuple_210418)
        # Assigning a type to the variable '_title' (line 1067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 8), '_title', for_loop_var_210425)
        # SSA begins for a for statement (line 1067)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_transform(...): (line 1068)
        # Processing the call arguments (line 1068)
        # Getting the type of 'self' (line 1068)
        self_210428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 33), 'self', False)
        # Obtaining the member 'transAxes' of a type (line 1068)
        transAxes_210429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 33), self_210428, 'transAxes')
        # Getting the type of 'self' (line 1068)
        self_210430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 50), 'self', False)
        # Obtaining the member 'titleOffsetTrans' of a type (line 1068)
        titleOffsetTrans_210431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 50), self_210430, 'titleOffsetTrans')
        # Applying the binary operator '+' (line 1068)
        result_add_210432 = python_operator(stypy.reporting.localization.Localization(__file__, 1068, 33), '+', transAxes_210429, titleOffsetTrans_210431)
        
        # Processing the call keyword arguments (line 1068)
        kwargs_210433 = {}
        # Getting the type of '_title' (line 1068)
        _title_210426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 12), '_title', False)
        # Obtaining the member 'set_transform' of a type (line 1068)
        set_transform_210427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 12), _title_210426, 'set_transform')
        # Calling set_transform(args, kwargs) (line 1068)
        set_transform_call_result_210434 = invoke(stypy.reporting.localization.Localization(__file__, 1068, 12), set_transform_210427, *[result_add_210432], **kwargs_210433)
        
        
        # Call to set_clip_box(...): (line 1069)
        # Processing the call arguments (line 1069)
        # Getting the type of 'None' (line 1069)
        None_210437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 32), 'None', False)
        # Processing the call keyword arguments (line 1069)
        kwargs_210438 = {}
        # Getting the type of '_title' (line 1069)
        _title_210435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 12), '_title', False)
        # Obtaining the member 'set_clip_box' of a type (line 1069)
        set_clip_box_210436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1069, 12), _title_210435, 'set_clip_box')
        # Calling set_clip_box(args, kwargs) (line 1069)
        set_clip_box_call_result_210439 = invoke(stypy.reporting.localization.Localization(__file__, 1069, 12), set_clip_box_210436, *[None_210437], **kwargs_210438)
        
        
        # Call to _set_artist_props(...): (line 1070)
        # Processing the call arguments (line 1070)
        # Getting the type of '_title' (line 1070)
        _title_210442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 35), '_title', False)
        # Processing the call keyword arguments (line 1070)
        kwargs_210443 = {}
        # Getting the type of 'self' (line 1070)
        self_210440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 12), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 1070)
        _set_artist_props_210441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 12), self_210440, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 1070)
        _set_artist_props_call_result_210444 = invoke(stypy.reporting.localization.Localization(__file__, 1070, 12), _set_artist_props_210441, *[_title_210442], **kwargs_210443)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1075):
        
        # Assigning a Call to a Attribute (line 1075):
        
        # Call to _gen_axes_patch(...): (line 1075)
        # Processing the call keyword arguments (line 1075)
        kwargs_210447 = {}
        # Getting the type of 'self' (line 1075)
        self_210445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 21), 'self', False)
        # Obtaining the member '_gen_axes_patch' of a type (line 1075)
        _gen_axes_patch_210446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1075, 21), self_210445, '_gen_axes_patch')
        # Calling _gen_axes_patch(args, kwargs) (line 1075)
        _gen_axes_patch_call_result_210448 = invoke(stypy.reporting.localization.Localization(__file__, 1075, 21), _gen_axes_patch_210446, *[], **kwargs_210447)
        
        # Getting the type of 'self' (line 1075)
        self_210449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 8), 'self')
        # Setting the type of the member 'patch' of a type (line 1075)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1075, 8), self_210449, 'patch', _gen_axes_patch_call_result_210448)
        
        # Call to set_figure(...): (line 1076)
        # Processing the call arguments (line 1076)
        # Getting the type of 'self' (line 1076)
        self_210453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 30), 'self', False)
        # Obtaining the member 'figure' of a type (line 1076)
        figure_210454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 30), self_210453, 'figure')
        # Processing the call keyword arguments (line 1076)
        kwargs_210455 = {}
        # Getting the type of 'self' (line 1076)
        self_210450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 8), 'self', False)
        # Obtaining the member 'patch' of a type (line 1076)
        patch_210451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 8), self_210450, 'patch')
        # Obtaining the member 'set_figure' of a type (line 1076)
        set_figure_210452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 8), patch_210451, 'set_figure')
        # Calling set_figure(args, kwargs) (line 1076)
        set_figure_call_result_210456 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 8), set_figure_210452, *[figure_210454], **kwargs_210455)
        
        
        # Call to set_facecolor(...): (line 1077)
        # Processing the call arguments (line 1077)
        # Getting the type of 'self' (line 1077)
        self_210460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 33), 'self', False)
        # Obtaining the member '_facecolor' of a type (line 1077)
        _facecolor_210461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 33), self_210460, '_facecolor')
        # Processing the call keyword arguments (line 1077)
        kwargs_210462 = {}
        # Getting the type of 'self' (line 1077)
        self_210457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 8), 'self', False)
        # Obtaining the member 'patch' of a type (line 1077)
        patch_210458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 8), self_210457, 'patch')
        # Obtaining the member 'set_facecolor' of a type (line 1077)
        set_facecolor_210459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 8), patch_210458, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 1077)
        set_facecolor_call_result_210463 = invoke(stypy.reporting.localization.Localization(__file__, 1077, 8), set_facecolor_210459, *[_facecolor_210461], **kwargs_210462)
        
        
        # Call to set_edgecolor(...): (line 1078)
        # Processing the call arguments (line 1078)
        unicode_210467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1078, 33), 'unicode', u'None')
        # Processing the call keyword arguments (line 1078)
        kwargs_210468 = {}
        # Getting the type of 'self' (line 1078)
        self_210464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 8), 'self', False)
        # Obtaining the member 'patch' of a type (line 1078)
        patch_210465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 8), self_210464, 'patch')
        # Obtaining the member 'set_edgecolor' of a type (line 1078)
        set_edgecolor_210466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 8), patch_210465, 'set_edgecolor')
        # Calling set_edgecolor(args, kwargs) (line 1078)
        set_edgecolor_call_result_210469 = invoke(stypy.reporting.localization.Localization(__file__, 1078, 8), set_edgecolor_210466, *[unicode_210467], **kwargs_210468)
        
        
        # Call to set_linewidth(...): (line 1079)
        # Processing the call arguments (line 1079)
        int_210473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1079, 33), 'int')
        # Processing the call keyword arguments (line 1079)
        kwargs_210474 = {}
        # Getting the type of 'self' (line 1079)
        self_210470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 8), 'self', False)
        # Obtaining the member 'patch' of a type (line 1079)
        patch_210471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1079, 8), self_210470, 'patch')
        # Obtaining the member 'set_linewidth' of a type (line 1079)
        set_linewidth_210472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1079, 8), patch_210471, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 1079)
        set_linewidth_call_result_210475 = invoke(stypy.reporting.localization.Localization(__file__, 1079, 8), set_linewidth_210472, *[int_210473], **kwargs_210474)
        
        
        # Call to set_transform(...): (line 1080)
        # Processing the call arguments (line 1080)
        # Getting the type of 'self' (line 1080)
        self_210479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 33), 'self', False)
        # Obtaining the member 'transAxes' of a type (line 1080)
        transAxes_210480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 33), self_210479, 'transAxes')
        # Processing the call keyword arguments (line 1080)
        kwargs_210481 = {}
        # Getting the type of 'self' (line 1080)
        self_210476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 8), 'self', False)
        # Obtaining the member 'patch' of a type (line 1080)
        patch_210477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 8), self_210476, 'patch')
        # Obtaining the member 'set_transform' of a type (line 1080)
        set_transform_210478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 8), patch_210477, 'set_transform')
        # Calling set_transform(args, kwargs) (line 1080)
        set_transform_call_result_210482 = invoke(stypy.reporting.localization.Localization(__file__, 1080, 8), set_transform_210478, *[transAxes_210480], **kwargs_210481)
        
        
        # Call to set_axis_on(...): (line 1082)
        # Processing the call keyword arguments (line 1082)
        kwargs_210485 = {}
        # Getting the type of 'self' (line 1082)
        self_210483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 8), 'self', False)
        # Obtaining the member 'set_axis_on' of a type (line 1082)
        set_axis_on_210484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1082, 8), self_210483, 'set_axis_on')
        # Calling set_axis_on(args, kwargs) (line 1082)
        set_axis_on_call_result_210486 = invoke(stypy.reporting.localization.Localization(__file__, 1082, 8), set_axis_on_210484, *[], **kwargs_210485)
        
        
        # Call to set_clip_path(...): (line 1084)
        # Processing the call arguments (line 1084)
        # Getting the type of 'self' (line 1084)
        self_210490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 33), 'self', False)
        # Obtaining the member 'patch' of a type (line 1084)
        patch_210491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1084, 33), self_210490, 'patch')
        # Processing the call keyword arguments (line 1084)
        kwargs_210492 = {}
        # Getting the type of 'self' (line 1084)
        self_210487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 8), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 1084)
        xaxis_210488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1084, 8), self_210487, 'xaxis')
        # Obtaining the member 'set_clip_path' of a type (line 1084)
        set_clip_path_210489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1084, 8), xaxis_210488, 'set_clip_path')
        # Calling set_clip_path(args, kwargs) (line 1084)
        set_clip_path_call_result_210493 = invoke(stypy.reporting.localization.Localization(__file__, 1084, 8), set_clip_path_210489, *[patch_210491], **kwargs_210492)
        
        
        # Call to set_clip_path(...): (line 1085)
        # Processing the call arguments (line 1085)
        # Getting the type of 'self' (line 1085)
        self_210497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 33), 'self', False)
        # Obtaining the member 'patch' of a type (line 1085)
        patch_210498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 33), self_210497, 'patch')
        # Processing the call keyword arguments (line 1085)
        kwargs_210499 = {}
        # Getting the type of 'self' (line 1085)
        self_210494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 8), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 1085)
        yaxis_210495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 8), self_210494, 'yaxis')
        # Obtaining the member 'set_clip_path' of a type (line 1085)
        set_clip_path_210496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 8), yaxis_210495, 'set_clip_path')
        # Calling set_clip_path(args, kwargs) (line 1085)
        set_clip_path_call_result_210500 = invoke(stypy.reporting.localization.Localization(__file__, 1085, 8), set_clip_path_210496, *[patch_210498], **kwargs_210499)
        
        
        # Call to clean(...): (line 1087)
        # Processing the call keyword arguments (line 1087)
        kwargs_210504 = {}
        # Getting the type of 'self' (line 1087)
        self_210501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 8), 'self', False)
        # Obtaining the member '_shared_x_axes' of a type (line 1087)
        _shared_x_axes_210502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 8), self_210501, '_shared_x_axes')
        # Obtaining the member 'clean' of a type (line 1087)
        clean_210503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 8), _shared_x_axes_210502, 'clean')
        # Calling clean(args, kwargs) (line 1087)
        clean_call_result_210505 = invoke(stypy.reporting.localization.Localization(__file__, 1087, 8), clean_210503, *[], **kwargs_210504)
        
        
        # Call to clean(...): (line 1088)
        # Processing the call keyword arguments (line 1088)
        kwargs_210509 = {}
        # Getting the type of 'self' (line 1088)
        self_210506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 8), 'self', False)
        # Obtaining the member '_shared_y_axes' of a type (line 1088)
        _shared_y_axes_210507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 8), self_210506, '_shared_y_axes')
        # Obtaining the member 'clean' of a type (line 1088)
        clean_210508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 8), _shared_y_axes_210507, 'clean')
        # Calling clean(args, kwargs) (line 1088)
        clean_call_result_210510 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 8), clean_210508, *[], **kwargs_210509)
        
        
        # Getting the type of 'self' (line 1089)
        self_210511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 11), 'self')
        # Obtaining the member '_sharex' of a type (line 1089)
        _sharex_210512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1089, 11), self_210511, '_sharex')
        # Testing the type of an if condition (line 1089)
        if_condition_210513 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1089, 8), _sharex_210512)
        # Assigning a type to the variable 'if_condition_210513' (line 1089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'if_condition_210513', if_condition_210513)
        # SSA begins for if statement (line 1089)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_visible(...): (line 1090)
        # Processing the call arguments (line 1090)
        # Getting the type of 'xaxis_visible' (line 1090)
        xaxis_visible_210517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 35), 'xaxis_visible', False)
        # Processing the call keyword arguments (line 1090)
        kwargs_210518 = {}
        # Getting the type of 'self' (line 1090)
        self_210514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 12), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 1090)
        xaxis_210515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 12), self_210514, 'xaxis')
        # Obtaining the member 'set_visible' of a type (line 1090)
        set_visible_210516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 12), xaxis_210515, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1090)
        set_visible_call_result_210519 = invoke(stypy.reporting.localization.Localization(__file__, 1090, 12), set_visible_210516, *[xaxis_visible_210517], **kwargs_210518)
        
        
        # Call to set_visible(...): (line 1091)
        # Processing the call arguments (line 1091)
        # Getting the type of 'patch_visible' (line 1091)
        patch_visible_210523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 35), 'patch_visible', False)
        # Processing the call keyword arguments (line 1091)
        kwargs_210524 = {}
        # Getting the type of 'self' (line 1091)
        self_210520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 12), 'self', False)
        # Obtaining the member 'patch' of a type (line 1091)
        patch_210521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 12), self_210520, 'patch')
        # Obtaining the member 'set_visible' of a type (line 1091)
        set_visible_210522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 12), patch_210521, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1091)
        set_visible_call_result_210525 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 12), set_visible_210522, *[patch_visible_210523], **kwargs_210524)
        
        # SSA join for if statement (line 1089)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1093)
        self_210526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 11), 'self')
        # Obtaining the member '_sharey' of a type (line 1093)
        _sharey_210527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 11), self_210526, '_sharey')
        # Testing the type of an if condition (line 1093)
        if_condition_210528 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1093, 8), _sharey_210527)
        # Assigning a type to the variable 'if_condition_210528' (line 1093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1093, 8), 'if_condition_210528', if_condition_210528)
        # SSA begins for if statement (line 1093)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_visible(...): (line 1094)
        # Processing the call arguments (line 1094)
        # Getting the type of 'yaxis_visible' (line 1094)
        yaxis_visible_210532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 35), 'yaxis_visible', False)
        # Processing the call keyword arguments (line 1094)
        kwargs_210533 = {}
        # Getting the type of 'self' (line 1094)
        self_210529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 12), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 1094)
        yaxis_210530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 12), self_210529, 'yaxis')
        # Obtaining the member 'set_visible' of a type (line 1094)
        set_visible_210531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 12), yaxis_210530, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1094)
        set_visible_call_result_210534 = invoke(stypy.reporting.localization.Localization(__file__, 1094, 12), set_visible_210531, *[yaxis_visible_210532], **kwargs_210533)
        
        
        # Call to set_visible(...): (line 1095)
        # Processing the call arguments (line 1095)
        # Getting the type of 'patch_visible' (line 1095)
        patch_visible_210538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 35), 'patch_visible', False)
        # Processing the call keyword arguments (line 1095)
        kwargs_210539 = {}
        # Getting the type of 'self' (line 1095)
        self_210535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 12), 'self', False)
        # Obtaining the member 'patch' of a type (line 1095)
        patch_210536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 12), self_210535, 'patch')
        # Obtaining the member 'set_visible' of a type (line 1095)
        set_visible_210537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 12), patch_210536, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1095)
        set_visible_call_result_210540 = invoke(stypy.reporting.localization.Localization(__file__, 1095, 12), set_visible_210537, *[patch_visible_210538], **kwargs_210539)
        
        # SSA join for if statement (line 1093)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1097):
        
        # Assigning a Name to a Attribute (line 1097):
        # Getting the type of 'True' (line 1097)
        True_210541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 21), 'True')
        # Getting the type of 'self' (line 1097)
        self_210542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1097)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 8), self_210542, 'stale', True_210541)
        
        # ################# End of 'cla(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cla' in the type store
        # Getting the type of 'stypy_return_type' (line 956)
        stypy_return_type_210543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210543)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cla'
        return stypy_return_type_210543


    @norecursion
    def axesPatch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'axesPatch'
        module_type_store = module_type_store.open_function_context('axesPatch', 1099, 4, False)
        # Assigning a type to the variable 'self' (line 1100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1100, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.axesPatch.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.axesPatch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.axesPatch.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.axesPatch.__dict__.__setitem__('stypy_function_name', '_AxesBase.axesPatch')
        _AxesBase.axesPatch.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.axesPatch.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.axesPatch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.axesPatch.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.axesPatch.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.axesPatch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.axesPatch.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.axesPatch', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'axesPatch', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'axesPatch(...)' code ##################

        # Getting the type of 'self' (line 1102)
        self_210544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 15), 'self')
        # Obtaining the member 'patch' of a type (line 1102)
        patch_210545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 15), self_210544, 'patch')
        # Assigning a type to the variable 'stypy_return_type' (line 1102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1102, 8), 'stypy_return_type', patch_210545)
        
        # ################# End of 'axesPatch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'axesPatch' in the type store
        # Getting the type of 'stypy_return_type' (line 1099)
        stypy_return_type_210546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210546)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'axesPatch'
        return stypy_return_type_210546


    @norecursion
    def clear(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'clear'
        module_type_store = module_type_store.open_function_context('clear', 1104, 4, False)
        # Assigning a type to the variable 'self' (line 1105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1105, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.clear.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.clear.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.clear.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.clear.__dict__.__setitem__('stypy_function_name', '_AxesBase.clear')
        _AxesBase.clear.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.clear.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.clear.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.clear.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.clear.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.clear.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.clear.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.clear', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'clear', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'clear(...)' code ##################

        unicode_210547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1105, 8), 'unicode', u'clear the axes')
        
        # Call to cla(...): (line 1106)
        # Processing the call keyword arguments (line 1106)
        kwargs_210550 = {}
        # Getting the type of 'self' (line 1106)
        self_210548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 8), 'self', False)
        # Obtaining the member 'cla' of a type (line 1106)
        cla_210549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1106, 8), self_210548, 'cla')
        # Calling cla(args, kwargs) (line 1106)
        cla_call_result_210551 = invoke(stypy.reporting.localization.Localization(__file__, 1106, 8), cla_210549, *[], **kwargs_210550)
        
        
        # ################# End of 'clear(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'clear' in the type store
        # Getting the type of 'stypy_return_type' (line 1104)
        stypy_return_type_210552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210552)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'clear'
        return stypy_return_type_210552


    @norecursion
    def get_facecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_facecolor'
        module_type_store = module_type_store.open_function_context('get_facecolor', 1108, 4, False)
        # Assigning a type to the variable 'self' (line 1109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1109, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_facecolor.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_facecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_facecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_facecolor.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_facecolor')
        _AxesBase.get_facecolor.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_facecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_facecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_facecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_facecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_facecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_facecolor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_facecolor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_facecolor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_facecolor(...)' code ##################

        
        # Call to get_facecolor(...): (line 1109)
        # Processing the call keyword arguments (line 1109)
        kwargs_210556 = {}
        # Getting the type of 'self' (line 1109)
        self_210553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 15), 'self', False)
        # Obtaining the member 'patch' of a type (line 1109)
        patch_210554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 15), self_210553, 'patch')
        # Obtaining the member 'get_facecolor' of a type (line 1109)
        get_facecolor_210555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 15), patch_210554, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 1109)
        get_facecolor_call_result_210557 = invoke(stypy.reporting.localization.Localization(__file__, 1109, 15), get_facecolor_210555, *[], **kwargs_210556)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1109, 8), 'stypy_return_type', get_facecolor_call_result_210557)
        
        # ################# End of 'get_facecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_facecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 1108)
        stypy_return_type_210558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210558)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_facecolor'
        return stypy_return_type_210558

    
    # Assigning a Name to a Name (line 1110):

    @norecursion
    def set_facecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_facecolor'
        module_type_store = module_type_store.open_function_context('set_facecolor', 1112, 4, False)
        # Assigning a type to the variable 'self' (line 1113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_facecolor.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_facecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_facecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_facecolor.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_facecolor')
        _AxesBase.set_facecolor.__dict__.__setitem__('stypy_param_names_list', ['color'])
        _AxesBase.set_facecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_facecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_facecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_facecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_facecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_facecolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_facecolor', ['color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_facecolor', localization, ['color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_facecolor(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1113):
        
        # Assigning a Name to a Attribute (line 1113):
        # Getting the type of 'color' (line 1113)
        color_210559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 26), 'color')
        # Getting the type of 'self' (line 1113)
        self_210560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 8), 'self')
        # Setting the type of the member '_facecolor' of a type (line 1113)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1113, 8), self_210560, '_facecolor', color_210559)
        
        # Call to set_facecolor(...): (line 1114)
        # Processing the call arguments (line 1114)
        # Getting the type of 'color' (line 1114)
        color_210564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 40), 'color', False)
        # Processing the call keyword arguments (line 1114)
        kwargs_210565 = {}
        # Getting the type of 'self' (line 1114)
        self_210561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 15), 'self', False)
        # Obtaining the member 'patch' of a type (line 1114)
        patch_210562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 15), self_210561, 'patch')
        # Obtaining the member 'set_facecolor' of a type (line 1114)
        set_facecolor_210563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 15), patch_210562, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 1114)
        set_facecolor_call_result_210566 = invoke(stypy.reporting.localization.Localization(__file__, 1114, 15), set_facecolor_210563, *[color_210564], **kwargs_210565)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'stypy_return_type', set_facecolor_call_result_210566)
        
        # ################# End of 'set_facecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_facecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 1112)
        stypy_return_type_210567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210567)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_facecolor'
        return stypy_return_type_210567

    
    # Assigning a Name to a Name (line 1115):

    @norecursion
    def set_prop_cycle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_prop_cycle'
        module_type_store = module_type_store.open_function_context('set_prop_cycle', 1117, 4, False)
        # Assigning a type to the variable 'self' (line 1118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_prop_cycle.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_prop_cycle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_prop_cycle.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_prop_cycle.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_prop_cycle')
        _AxesBase.set_prop_cycle.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.set_prop_cycle.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _AxesBase.set_prop_cycle.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _AxesBase.set_prop_cycle.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_prop_cycle.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_prop_cycle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_prop_cycle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_prop_cycle', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_prop_cycle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_prop_cycle(...)' code ##################

        unicode_210568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1154, (-1)), 'unicode', u"\n        Set the property cycle for any future plot commands on this Axes.\n\n        set_prop_cycle(arg)\n        set_prop_cycle(label, itr)\n        set_prop_cycle(label1=itr1[, label2=itr2[, ...]])\n\n        Form 1 simply sets given `Cycler` object.\n\n        Form 2 creates and sets  a `Cycler` from a label and an iterable.\n\n        Form 3 composes and sets  a `Cycler` as an inner product of the\n        pairs of keyword arguments. In other words, all of the\n        iterables are cycled simultaneously, as if through zip().\n\n        Parameters\n        ----------\n        arg : Cycler\n            Set the given Cycler.\n            Can also be `None` to reset to the cycle defined by the\n            current style.\n\n        label : str\n            The property key. Must be a valid `Artist` property.\n            For example, 'color' or 'linestyle'. Aliases are allowed,\n            such as 'c' for 'color' and 'lw' for 'linewidth'.\n\n        itr : iterable\n            Finite-length iterable of the property values. These values\n            are validated and will raise a ValueError if invalid.\n\n        See Also\n        --------\n            :func:`cycler`      Convenience function for creating your\n                                own cyclers.\n\n        ")
        
        
        # Evaluating a boolean operation
        # Getting the type of 'args' (line 1155)
        args_210569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 11), 'args')
        # Getting the type of 'kwargs' (line 1155)
        kwargs_210570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 20), 'kwargs')
        # Applying the binary operator 'and' (line 1155)
        result_and_keyword_210571 = python_operator(stypy.reporting.localization.Localization(__file__, 1155, 11), 'and', args_210569, kwargs_210570)
        
        # Testing the type of an if condition (line 1155)
        if_condition_210572 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1155, 8), result_and_keyword_210571)
        # Assigning a type to the variable 'if_condition_210572' (line 1155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 8), 'if_condition_210572', if_condition_210572)
        # SSA begins for if statement (line 1155)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 1156)
        # Processing the call arguments (line 1156)
        unicode_210574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1156, 28), 'unicode', u'Cannot supply both positional and keyword arguments to this method.')
        # Processing the call keyword arguments (line 1156)
        kwargs_210575 = {}
        # Getting the type of 'TypeError' (line 1156)
        TypeError_210573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1156)
        TypeError_call_result_210576 = invoke(stypy.reporting.localization.Localization(__file__, 1156, 18), TypeError_210573, *[unicode_210574], **kwargs_210575)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1156, 12), TypeError_call_result_210576, 'raise parameter', BaseException)
        # SSA join for if statement (line 1155)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 1158)
        # Processing the call arguments (line 1158)
        # Getting the type of 'args' (line 1158)
        args_210578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 15), 'args', False)
        # Processing the call keyword arguments (line 1158)
        kwargs_210579 = {}
        # Getting the type of 'len' (line 1158)
        len_210577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 11), 'len', False)
        # Calling len(args, kwargs) (line 1158)
        len_call_result_210580 = invoke(stypy.reporting.localization.Localization(__file__, 1158, 11), len_210577, *[args_210578], **kwargs_210579)
        
        int_210581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1158, 24), 'int')
        # Applying the binary operator '==' (line 1158)
        result_eq_210582 = python_operator(stypy.reporting.localization.Localization(__file__, 1158, 11), '==', len_call_result_210580, int_210581)
        
        
        
        # Obtaining the type of the subscript
        int_210583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1158, 35), 'int')
        # Getting the type of 'args' (line 1158)
        args_210584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 30), 'args')
        # Obtaining the member '__getitem__' of a type (line 1158)
        getitem___210585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1158, 30), args_210584, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1158)
        subscript_call_result_210586 = invoke(stypy.reporting.localization.Localization(__file__, 1158, 30), getitem___210585, int_210583)
        
        # Getting the type of 'None' (line 1158)
        None_210587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 41), 'None')
        # Applying the binary operator 'is' (line 1158)
        result_is__210588 = python_operator(stypy.reporting.localization.Localization(__file__, 1158, 30), 'is', subscript_call_result_210586, None_210587)
        
        # Applying the binary operator 'and' (line 1158)
        result_and_keyword_210589 = python_operator(stypy.reporting.localization.Localization(__file__, 1158, 11), 'and', result_eq_210582, result_is__210588)
        
        # Testing the type of an if condition (line 1158)
        if_condition_210590 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1158, 8), result_and_keyword_210589)
        # Assigning a type to the variable 'if_condition_210590' (line 1158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1158, 8), 'if_condition_210590', if_condition_210590)
        # SSA begins for if statement (line 1158)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1159):
        
        # Assigning a Name to a Name (line 1159):
        # Getting the type of 'None' (line 1159)
        None_210591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 25), 'None')
        # Assigning a type to the variable 'prop_cycle' (line 1159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 12), 'prop_cycle', None_210591)
        # SSA branch for the else part of an if statement (line 1158)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1161):
        
        # Assigning a Call to a Name (line 1161):
        
        # Call to cycler(...): (line 1161)
        # Getting the type of 'args' (line 1161)
        args_210593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 33), 'args', False)
        # Processing the call keyword arguments (line 1161)
        # Getting the type of 'kwargs' (line 1161)
        kwargs_210594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 41), 'kwargs', False)
        kwargs_210595 = {'kwargs_210594': kwargs_210594}
        # Getting the type of 'cycler' (line 1161)
        cycler_210592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 25), 'cycler', False)
        # Calling cycler(args, kwargs) (line 1161)
        cycler_call_result_210596 = invoke(stypy.reporting.localization.Localization(__file__, 1161, 25), cycler_210592, *[args_210593], **kwargs_210595)
        
        # Assigning a type to the variable 'prop_cycle' (line 1161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1161, 12), 'prop_cycle', cycler_call_result_210596)
        # SSA join for if statement (line 1158)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_prop_cycle(...): (line 1162)
        # Processing the call arguments (line 1162)
        # Getting the type of 'prop_cycle' (line 1162)
        prop_cycle_210600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 39), 'prop_cycle', False)
        # Processing the call keyword arguments (line 1162)
        kwargs_210601 = {}
        # Getting the type of 'self' (line 1162)
        self_210597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 8), 'self', False)
        # Obtaining the member '_get_lines' of a type (line 1162)
        _get_lines_210598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1162, 8), self_210597, '_get_lines')
        # Obtaining the member 'set_prop_cycle' of a type (line 1162)
        set_prop_cycle_210599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1162, 8), _get_lines_210598, 'set_prop_cycle')
        # Calling set_prop_cycle(args, kwargs) (line 1162)
        set_prop_cycle_call_result_210602 = invoke(stypy.reporting.localization.Localization(__file__, 1162, 8), set_prop_cycle_210599, *[prop_cycle_210600], **kwargs_210601)
        
        
        # Call to set_prop_cycle(...): (line 1163)
        # Processing the call arguments (line 1163)
        # Getting the type of 'prop_cycle' (line 1163)
        prop_cycle_210606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 50), 'prop_cycle', False)
        # Processing the call keyword arguments (line 1163)
        kwargs_210607 = {}
        # Getting the type of 'self' (line 1163)
        self_210603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'self', False)
        # Obtaining the member '_get_patches_for_fill' of a type (line 1163)
        _get_patches_for_fill_210604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 8), self_210603, '_get_patches_for_fill')
        # Obtaining the member 'set_prop_cycle' of a type (line 1163)
        set_prop_cycle_210605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 8), _get_patches_for_fill_210604, 'set_prop_cycle')
        # Calling set_prop_cycle(args, kwargs) (line 1163)
        set_prop_cycle_call_result_210608 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 8), set_prop_cycle_210605, *[prop_cycle_210606], **kwargs_210607)
        
        
        # ################# End of 'set_prop_cycle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_prop_cycle' in the type store
        # Getting the type of 'stypy_return_type' (line 1117)
        stypy_return_type_210609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210609)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_prop_cycle'
        return stypy_return_type_210609


    @norecursion
    def set_color_cycle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_color_cycle'
        module_type_store = module_type_store.open_function_context('set_color_cycle', 1165, 4, False)
        # Assigning a type to the variable 'self' (line 1166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_color_cycle.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_color_cycle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_color_cycle.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_color_cycle.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_color_cycle')
        _AxesBase.set_color_cycle.__dict__.__setitem__('stypy_param_names_list', ['clist'])
        _AxesBase.set_color_cycle.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_color_cycle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_color_cycle.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_color_cycle.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_color_cycle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_color_cycle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_color_cycle', ['clist'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_color_cycle', localization, ['clist'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_color_cycle(...)' code ##################

        unicode_210610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1172, (-1)), 'unicode', u'\n        Set the color cycle for any future plot commands on this Axes.\n\n        *clist* is a list of mpl color specifiers.\n\n        .. deprecated:: 1.5\n        ')
        
        # Call to warn_deprecated(...): (line 1173)
        # Processing the call arguments (line 1173)
        unicode_210613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1174, 12), 'unicode', u'1.5')
        # Processing the call keyword arguments (line 1173)
        unicode_210614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1174, 24), 'unicode', u'set_color_cycle')
        keyword_210615 = unicode_210614
        unicode_210616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1174, 55), 'unicode', u'set_prop_cycle')
        keyword_210617 = unicode_210616
        kwargs_210618 = {'alternative': keyword_210617, 'name': keyword_210615}
        # Getting the type of 'cbook' (line 1173)
        cbook_210611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 8), 'cbook', False)
        # Obtaining the member 'warn_deprecated' of a type (line 1173)
        warn_deprecated_210612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1173, 8), cbook_210611, 'warn_deprecated')
        # Calling warn_deprecated(args, kwargs) (line 1173)
        warn_deprecated_call_result_210619 = invoke(stypy.reporting.localization.Localization(__file__, 1173, 8), warn_deprecated_210612, *[unicode_210613], **kwargs_210618)
        
        
        # Type idiom detected: calculating its left and rigth part (line 1175)
        # Getting the type of 'clist' (line 1175)
        clist_210620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 11), 'clist')
        # Getting the type of 'None' (line 1175)
        None_210621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 20), 'None')
        
        (may_be_210622, more_types_in_union_210623) = may_be_none(clist_210620, None_210621)

        if may_be_210622:

            if more_types_in_union_210623:
                # Runtime conditional SSA (line 1175)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_prop_cycle(...): (line 1179)
            # Processing the call arguments (line 1179)
            # Getting the type of 'None' (line 1179)
            None_210626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 32), 'None', False)
            # Processing the call keyword arguments (line 1179)
            kwargs_210627 = {}
            # Getting the type of 'self' (line 1179)
            self_210624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 12), 'self', False)
            # Obtaining the member 'set_prop_cycle' of a type (line 1179)
            set_prop_cycle_210625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 12), self_210624, 'set_prop_cycle')
            # Calling set_prop_cycle(args, kwargs) (line 1179)
            set_prop_cycle_call_result_210628 = invoke(stypy.reporting.localization.Localization(__file__, 1179, 12), set_prop_cycle_210625, *[None_210626], **kwargs_210627)
            

            if more_types_in_union_210623:
                # Runtime conditional SSA for else branch (line 1175)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_210622) or more_types_in_union_210623):
            
            # Call to set_prop_cycle(...): (line 1181)
            # Processing the call arguments (line 1181)
            unicode_210631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1181, 32), 'unicode', u'color')
            # Getting the type of 'clist' (line 1181)
            clist_210632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 41), 'clist', False)
            # Processing the call keyword arguments (line 1181)
            kwargs_210633 = {}
            # Getting the type of 'self' (line 1181)
            self_210629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 12), 'self', False)
            # Obtaining the member 'set_prop_cycle' of a type (line 1181)
            set_prop_cycle_210630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 12), self_210629, 'set_prop_cycle')
            # Calling set_prop_cycle(args, kwargs) (line 1181)
            set_prop_cycle_call_result_210634 = invoke(stypy.reporting.localization.Localization(__file__, 1181, 12), set_prop_cycle_210630, *[unicode_210631, clist_210632], **kwargs_210633)
            

            if (may_be_210622 and more_types_in_union_210623):
                # SSA join for if statement (line 1175)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'set_color_cycle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_color_cycle' in the type store
        # Getting the type of 'stypy_return_type' (line 1165)
        stypy_return_type_210635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210635)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_color_cycle'
        return stypy_return_type_210635


    @norecursion
    def ishold(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ishold'
        module_type_store = module_type_store.open_function_context('ishold', 1183, 4, False)
        # Assigning a type to the variable 'self' (line 1184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1184, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.ishold.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.ishold.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.ishold.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.ishold.__dict__.__setitem__('stypy_function_name', '_AxesBase.ishold')
        _AxesBase.ishold.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.ishold.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.ishold.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.ishold.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.ishold.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.ishold.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.ishold.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.ishold', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ishold', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ishold(...)' code ##################

        unicode_210636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, (-1)), 'unicode', u'return the HOLD status of the axes\n\n        The `hold` mechanism is deprecated and will be removed in\n        v3.0.\n        ')
        # Getting the type of 'self' (line 1191)
        self_210637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 15), 'self')
        # Obtaining the member '_hold' of a type (line 1191)
        _hold_210638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 15), self_210637, '_hold')
        # Assigning a type to the variable 'stypy_return_type' (line 1191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 8), 'stypy_return_type', _hold_210638)
        
        # ################# End of 'ishold(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ishold' in the type store
        # Getting the type of 'stypy_return_type' (line 1183)
        stypy_return_type_210639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210639)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ishold'
        return stypy_return_type_210639


    @norecursion
    def hold(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1194)
        None_210640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 21), 'None')
        defaults = [None_210640]
        # Create a new context for function 'hold'
        module_type_store = module_type_store.open_function_context('hold', 1193, 4, False)
        # Assigning a type to the variable 'self' (line 1194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.hold.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.hold.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.hold.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.hold.__dict__.__setitem__('stypy_function_name', '_AxesBase.hold')
        _AxesBase.hold.__dict__.__setitem__('stypy_param_names_list', ['b'])
        _AxesBase.hold.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.hold.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.hold.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.hold.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.hold.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.hold.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.hold', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'hold', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'hold(...)' code ##################

        unicode_210641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1220, (-1)), 'unicode', u'\n        Set the hold state\n\n        The ``hold`` mechanism is deprecated and will be removed in\n        v3.0.  The behavior will remain consistent with the\n        long-time default value of True.\n\n        If *hold* is *None* (default), toggle the *hold* state.  Else\n        set the *hold* state to boolean value *b*.\n\n        Examples::\n\n          # toggle hold\n          hold()\n\n          # turn hold on\n          hold(True)\n\n          # turn hold off\n          hold(False)\n\n        When hold is *True*, subsequent plot commands will be added to\n        the current axes.  When hold is *False*, the current axes and\n        figure will be cleared on the next plot command\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1221)
        # Getting the type of 'b' (line 1221)
        b_210642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 11), 'b')
        # Getting the type of 'None' (line 1221)
        None_210643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 16), 'None')
        
        (may_be_210644, more_types_in_union_210645) = may_be_none(b_210642, None_210643)

        if may_be_210644:

            if more_types_in_union_210645:
                # Runtime conditional SSA (line 1221)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a UnaryOp to a Attribute (line 1222):
            
            # Assigning a UnaryOp to a Attribute (line 1222):
            
            # Getting the type of 'self' (line 1222)
            self_210646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 29), 'self')
            # Obtaining the member '_hold' of a type (line 1222)
            _hold_210647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 29), self_210646, '_hold')
            # Applying the 'not' unary operator (line 1222)
            result_not__210648 = python_operator(stypy.reporting.localization.Localization(__file__, 1222, 25), 'not', _hold_210647)
            
            # Getting the type of 'self' (line 1222)
            self_210649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 12), 'self')
            # Setting the type of the member '_hold' of a type (line 1222)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 12), self_210649, '_hold', result_not__210648)

            if more_types_in_union_210645:
                # Runtime conditional SSA for else branch (line 1221)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_210644) or more_types_in_union_210645):
            
            # Assigning a Name to a Attribute (line 1224):
            
            # Assigning a Name to a Attribute (line 1224):
            # Getting the type of 'b' (line 1224)
            b_210650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 25), 'b')
            # Getting the type of 'self' (line 1224)
            self_210651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 12), 'self')
            # Setting the type of the member '_hold' of a type (line 1224)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 12), self_210651, '_hold', b_210650)

            if (may_be_210644 and more_types_in_union_210645):
                # SSA join for if statement (line 1221)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'hold(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'hold' in the type store
        # Getting the type of 'stypy_return_type' (line 1193)
        stypy_return_type_210652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210652)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'hold'
        return stypy_return_type_210652


    @norecursion
    def get_aspect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_aspect'
        module_type_store = module_type_store.open_function_context('get_aspect', 1226, 4, False)
        # Assigning a type to the variable 'self' (line 1227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1227, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_aspect.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_aspect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_aspect.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_aspect.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_aspect')
        _AxesBase.get_aspect.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_aspect.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_aspect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_aspect.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_aspect.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_aspect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_aspect.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_aspect', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_aspect', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_aspect(...)' code ##################

        # Getting the type of 'self' (line 1227)
        self_210653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 15), 'self')
        # Obtaining the member '_aspect' of a type (line 1227)
        _aspect_210654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1227, 15), self_210653, '_aspect')
        # Assigning a type to the variable 'stypy_return_type' (line 1227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1227, 8), 'stypy_return_type', _aspect_210654)
        
        # ################# End of 'get_aspect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_aspect' in the type store
        # Getting the type of 'stypy_return_type' (line 1226)
        stypy_return_type_210655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210655)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_aspect'
        return stypy_return_type_210655


    @norecursion
    def set_aspect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1229)
        None_210656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 44), 'None')
        # Getting the type of 'None' (line 1229)
        None_210657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 57), 'None')
        defaults = [None_210656, None_210657]
        # Create a new context for function 'set_aspect'
        module_type_store = module_type_store.open_function_context('set_aspect', 1229, 4, False)
        # Assigning a type to the variable 'self' (line 1230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1230, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_aspect.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_aspect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_aspect.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_aspect.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_aspect')
        _AxesBase.set_aspect.__dict__.__setitem__('stypy_param_names_list', ['aspect', 'adjustable', 'anchor'])
        _AxesBase.set_aspect.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_aspect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_aspect.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_aspect.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_aspect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_aspect.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_aspect', ['aspect', 'adjustable', 'anchor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_aspect', localization, ['aspect', 'adjustable', 'anchor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_aspect(...)' code ##################

        unicode_210658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1268, (-1)), 'unicode', u"\n        *aspect*\n\n          ========   ================================================\n          value      description\n          ========   ================================================\n          'auto'     automatic; fill position rectangle with data\n          'equal'    same scaling from data to plot units for x and y\n           num       a circle will be stretched such that the height\n                     is num times the width. aspect=1 is the same as\n                     aspect='equal'.\n          ========   ================================================\n\n        *adjustable*\n\n          ============   =====================================\n          value          description\n          ============   =====================================\n          'box'          change physical size of axes\n          'datalim'      change xlim or ylim\n          'box-forced'   same as 'box', but axes can be shared\n          ============   =====================================\n\n        'box' does not allow axes sharing, as this can cause\n        unintended side effect. For cases when sharing axes is\n        fine, use 'box-forced'.\n\n        *anchor*\n\n          =====   =====================\n          value   description\n          =====   =====================\n          'C'     centered\n          'SW'    lower left corner\n          'S'     middle of bottom edge\n          'SE'    lower right corner\n          etc.\n          =====   =====================\n        ")
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 1269)
        # Processing the call arguments (line 1269)
        # Getting the type of 'aspect' (line 1269)
        aspect_210660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 23), 'aspect', False)
        # Getting the type of 'six' (line 1269)
        six_210661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 31), 'six', False)
        # Obtaining the member 'string_types' of a type (line 1269)
        string_types_210662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1269, 31), six_210661, 'string_types')
        # Processing the call keyword arguments (line 1269)
        kwargs_210663 = {}
        # Getting the type of 'isinstance' (line 1269)
        isinstance_210659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 12), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1269)
        isinstance_call_result_210664 = invoke(stypy.reporting.localization.Localization(__file__, 1269, 12), isinstance_210659, *[aspect_210660, string_types_210662], **kwargs_210663)
        
        
        # Getting the type of 'aspect' (line 1270)
        aspect_210665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 20), 'aspect')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1270)
        tuple_210666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1270, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1270)
        # Adding element type (line 1270)
        unicode_210667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1270, 31), 'unicode', u'equal')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1270, 31), tuple_210666, unicode_210667)
        # Adding element type (line 1270)
        unicode_210668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1270, 40), 'unicode', u'auto')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1270, 31), tuple_210666, unicode_210668)
        
        # Applying the binary operator 'in' (line 1270)
        result_contains_210669 = python_operator(stypy.reporting.localization.Localization(__file__, 1270, 20), 'in', aspect_210665, tuple_210666)
        
        # Applying the binary operator 'and' (line 1269)
        result_and_keyword_210670 = python_operator(stypy.reporting.localization.Localization(__file__, 1269, 12), 'and', isinstance_call_result_210664, result_contains_210669)
        
        # Testing the type of an if condition (line 1269)
        if_condition_210671 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1269, 8), result_and_keyword_210670)
        # Assigning a type to the variable 'if_condition_210671' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 8), 'if_condition_210671', if_condition_210671)
        # SSA begins for if statement (line 1269)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1271):
        
        # Assigning a Name to a Attribute (line 1271):
        # Getting the type of 'aspect' (line 1271)
        aspect_210672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 27), 'aspect')
        # Getting the type of 'self' (line 1271)
        self_210673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 12), 'self')
        # Setting the type of the member '_aspect' of a type (line 1271)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1271, 12), self_210673, '_aspect', aspect_210672)
        # SSA branch for the else part of an if statement (line 1269)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 1273):
        
        # Assigning a Call to a Attribute (line 1273):
        
        # Call to float(...): (line 1273)
        # Processing the call arguments (line 1273)
        # Getting the type of 'aspect' (line 1273)
        aspect_210675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 33), 'aspect', False)
        # Processing the call keyword arguments (line 1273)
        kwargs_210676 = {}
        # Getting the type of 'float' (line 1273)
        float_210674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 27), 'float', False)
        # Calling float(args, kwargs) (line 1273)
        float_call_result_210677 = invoke(stypy.reporting.localization.Localization(__file__, 1273, 27), float_210674, *[aspect_210675], **kwargs_210676)
        
        # Getting the type of 'self' (line 1273)
        self_210678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 12), 'self')
        # Setting the type of the member '_aspect' of a type (line 1273)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1273, 12), self_210678, '_aspect', float_call_result_210677)
        # SSA join for if statement (line 1269)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1275)
        # Getting the type of 'adjustable' (line 1275)
        adjustable_210679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 8), 'adjustable')
        # Getting the type of 'None' (line 1275)
        None_210680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 29), 'None')
        
        (may_be_210681, more_types_in_union_210682) = may_not_be_none(adjustable_210679, None_210680)

        if may_be_210681:

            if more_types_in_union_210682:
                # Runtime conditional SSA (line 1275)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_adjustable(...): (line 1276)
            # Processing the call arguments (line 1276)
            # Getting the type of 'adjustable' (line 1276)
            adjustable_210685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 32), 'adjustable', False)
            # Processing the call keyword arguments (line 1276)
            kwargs_210686 = {}
            # Getting the type of 'self' (line 1276)
            self_210683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 12), 'self', False)
            # Obtaining the member 'set_adjustable' of a type (line 1276)
            set_adjustable_210684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1276, 12), self_210683, 'set_adjustable')
            # Calling set_adjustable(args, kwargs) (line 1276)
            set_adjustable_call_result_210687 = invoke(stypy.reporting.localization.Localization(__file__, 1276, 12), set_adjustable_210684, *[adjustable_210685], **kwargs_210686)
            

            if more_types_in_union_210682:
                # SSA join for if statement (line 1275)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1277)
        # Getting the type of 'anchor' (line 1277)
        anchor_210688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 8), 'anchor')
        # Getting the type of 'None' (line 1277)
        None_210689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 25), 'None')
        
        (may_be_210690, more_types_in_union_210691) = may_not_be_none(anchor_210688, None_210689)

        if may_be_210690:

            if more_types_in_union_210691:
                # Runtime conditional SSA (line 1277)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_anchor(...): (line 1278)
            # Processing the call arguments (line 1278)
            # Getting the type of 'anchor' (line 1278)
            anchor_210694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 28), 'anchor', False)
            # Processing the call keyword arguments (line 1278)
            kwargs_210695 = {}
            # Getting the type of 'self' (line 1278)
            self_210692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 12), 'self', False)
            # Obtaining the member 'set_anchor' of a type (line 1278)
            set_anchor_210693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1278, 12), self_210692, 'set_anchor')
            # Calling set_anchor(args, kwargs) (line 1278)
            set_anchor_call_result_210696 = invoke(stypy.reporting.localization.Localization(__file__, 1278, 12), set_anchor_210693, *[anchor_210694], **kwargs_210695)
            

            if more_types_in_union_210691:
                # SSA join for if statement (line 1277)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 1279):
        
        # Assigning a Name to a Attribute (line 1279):
        # Getting the type of 'True' (line 1279)
        True_210697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 21), 'True')
        # Getting the type of 'self' (line 1279)
        self_210698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1279)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1279, 8), self_210698, 'stale', True_210697)
        
        # ################# End of 'set_aspect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_aspect' in the type store
        # Getting the type of 'stypy_return_type' (line 1229)
        stypy_return_type_210699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210699)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_aspect'
        return stypy_return_type_210699


    @norecursion
    def get_adjustable(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_adjustable'
        module_type_store = module_type_store.open_function_context('get_adjustable', 1281, 4, False)
        # Assigning a type to the variable 'self' (line 1282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1282, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_adjustable.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_adjustable.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_adjustable.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_adjustable.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_adjustable')
        _AxesBase.get_adjustable.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_adjustable.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_adjustable.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_adjustable.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_adjustable.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_adjustable.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_adjustable.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_adjustable', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_adjustable', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_adjustable(...)' code ##################

        # Getting the type of 'self' (line 1282)
        self_210700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 15), 'self')
        # Obtaining the member '_adjustable' of a type (line 1282)
        _adjustable_210701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 15), self_210700, '_adjustable')
        # Assigning a type to the variable 'stypy_return_type' (line 1282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1282, 8), 'stypy_return_type', _adjustable_210701)
        
        # ################# End of 'get_adjustable(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_adjustable' in the type store
        # Getting the type of 'stypy_return_type' (line 1281)
        stypy_return_type_210702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210702)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_adjustable'
        return stypy_return_type_210702


    @norecursion
    def set_adjustable(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_adjustable'
        module_type_store = module_type_store.open_function_context('set_adjustable', 1284, 4, False)
        # Assigning a type to the variable 'self' (line 1285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1285, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_adjustable.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_adjustable.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_adjustable.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_adjustable.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_adjustable')
        _AxesBase.set_adjustable.__dict__.__setitem__('stypy_param_names_list', ['adjustable'])
        _AxesBase.set_adjustable.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_adjustable.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_adjustable.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_adjustable.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_adjustable.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_adjustable.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_adjustable', ['adjustable'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_adjustable', localization, ['adjustable'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_adjustable(...)' code ##################

        unicode_210703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, (-1)), 'unicode', u"\n        ACCEPTS: [ 'box' | 'datalim' | 'box-forced']\n        ")
        
        
        # Getting the type of 'adjustable' (line 1288)
        adjustable_210704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 11), 'adjustable')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1288)
        tuple_210705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1288, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1288)
        # Adding element type (line 1288)
        unicode_210706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1288, 26), 'unicode', u'box')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1288, 26), tuple_210705, unicode_210706)
        # Adding element type (line 1288)
        unicode_210707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1288, 33), 'unicode', u'datalim')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1288, 26), tuple_210705, unicode_210707)
        # Adding element type (line 1288)
        unicode_210708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1288, 44), 'unicode', u'box-forced')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1288, 26), tuple_210705, unicode_210708)
        
        # Applying the binary operator 'in' (line 1288)
        result_contains_210709 = python_operator(stypy.reporting.localization.Localization(__file__, 1288, 11), 'in', adjustable_210704, tuple_210705)
        
        # Testing the type of an if condition (line 1288)
        if_condition_210710 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1288, 8), result_contains_210709)
        # Assigning a type to the variable 'if_condition_210710' (line 1288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1288, 8), 'if_condition_210710', if_condition_210710)
        # SSA begins for if statement (line 1288)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1289)
        self_210711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 15), 'self')
        # Getting the type of 'self' (line 1289)
        self_210712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 23), 'self')
        # Obtaining the member '_shared_x_axes' of a type (line 1289)
        _shared_x_axes_210713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1289, 23), self_210712, '_shared_x_axes')
        # Applying the binary operator 'in' (line 1289)
        result_contains_210714 = python_operator(stypy.reporting.localization.Localization(__file__, 1289, 15), 'in', self_210711, _shared_x_axes_210713)
        
        
        # Getting the type of 'self' (line 1289)
        self_210715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 46), 'self')
        # Getting the type of 'self' (line 1289)
        self_210716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 54), 'self')
        # Obtaining the member '_shared_y_axes' of a type (line 1289)
        _shared_y_axes_210717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1289, 54), self_210716, '_shared_y_axes')
        # Applying the binary operator 'in' (line 1289)
        result_contains_210718 = python_operator(stypy.reporting.localization.Localization(__file__, 1289, 46), 'in', self_210715, _shared_y_axes_210717)
        
        # Applying the binary operator 'or' (line 1289)
        result_or_keyword_210719 = python_operator(stypy.reporting.localization.Localization(__file__, 1289, 15), 'or', result_contains_210714, result_contains_210718)
        
        # Testing the type of an if condition (line 1289)
        if_condition_210720 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1289, 12), result_or_keyword_210719)
        # Assigning a type to the variable 'if_condition_210720' (line 1289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 12), 'if_condition_210720', if_condition_210720)
        # SSA begins for if statement (line 1289)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'adjustable' (line 1290)
        adjustable_210721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 19), 'adjustable')
        unicode_210722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1290, 33), 'unicode', u'box')
        # Applying the binary operator '==' (line 1290)
        result_eq_210723 = python_operator(stypy.reporting.localization.Localization(__file__, 1290, 19), '==', adjustable_210721, unicode_210722)
        
        # Testing the type of an if condition (line 1290)
        if_condition_210724 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1290, 16), result_eq_210723)
        # Assigning a type to the variable 'if_condition_210724' (line 1290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 16), 'if_condition_210724', if_condition_210724)
        # SSA begins for if statement (line 1290)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1291)
        # Processing the call arguments (line 1291)
        unicode_210726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1292, 24), 'unicode', u'adjustable must be "datalim" for shared axes')
        # Processing the call keyword arguments (line 1291)
        kwargs_210727 = {}
        # Getting the type of 'ValueError' (line 1291)
        ValueError_210725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1291)
        ValueError_call_result_210728 = invoke(stypy.reporting.localization.Localization(__file__, 1291, 26), ValueError_210725, *[unicode_210726], **kwargs_210727)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1291, 20), ValueError_call_result_210728, 'raise parameter', BaseException)
        # SSA join for if statement (line 1290)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1289)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1293):
        
        # Assigning a Name to a Attribute (line 1293):
        # Getting the type of 'adjustable' (line 1293)
        adjustable_210729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 31), 'adjustable')
        # Getting the type of 'self' (line 1293)
        self_210730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 12), 'self')
        # Setting the type of the member '_adjustable' of a type (line 1293)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 12), self_210730, '_adjustable', adjustable_210729)
        # SSA branch for the else part of an if statement (line 1288)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1295)
        # Processing the call arguments (line 1295)
        unicode_210732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1295, 29), 'unicode', u'argument must be "box", or "datalim"')
        # Processing the call keyword arguments (line 1295)
        kwargs_210733 = {}
        # Getting the type of 'ValueError' (line 1295)
        ValueError_210731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1295)
        ValueError_call_result_210734 = invoke(stypy.reporting.localization.Localization(__file__, 1295, 18), ValueError_210731, *[unicode_210732], **kwargs_210733)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1295, 12), ValueError_call_result_210734, 'raise parameter', BaseException)
        # SSA join for if statement (line 1288)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1296):
        
        # Assigning a Name to a Attribute (line 1296):
        # Getting the type of 'True' (line 1296)
        True_210735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 21), 'True')
        # Getting the type of 'self' (line 1296)
        self_210736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1296)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 8), self_210736, 'stale', True_210735)
        
        # ################# End of 'set_adjustable(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_adjustable' in the type store
        # Getting the type of 'stypy_return_type' (line 1284)
        stypy_return_type_210737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210737)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_adjustable'
        return stypy_return_type_210737


    @norecursion
    def get_anchor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_anchor'
        module_type_store = module_type_store.open_function_context('get_anchor', 1298, 4, False)
        # Assigning a type to the variable 'self' (line 1299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_anchor.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_anchor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_anchor.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_anchor.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_anchor')
        _AxesBase.get_anchor.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_anchor.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_anchor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_anchor.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_anchor.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_anchor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_anchor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_anchor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_anchor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_anchor(...)' code ##################

        # Getting the type of 'self' (line 1299)
        self_210738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 15), 'self')
        # Obtaining the member '_anchor' of a type (line 1299)
        _anchor_210739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 15), self_210738, '_anchor')
        # Assigning a type to the variable 'stypy_return_type' (line 1299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 8), 'stypy_return_type', _anchor_210739)
        
        # ################# End of 'get_anchor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_anchor' in the type store
        # Getting the type of 'stypy_return_type' (line 1298)
        stypy_return_type_210740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210740)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_anchor'
        return stypy_return_type_210740


    @norecursion
    def set_anchor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_anchor'
        module_type_store = module_type_store.open_function_context('set_anchor', 1301, 4, False)
        # Assigning a type to the variable 'self' (line 1302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_anchor.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_anchor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_anchor.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_anchor.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_anchor')
        _AxesBase.set_anchor.__dict__.__setitem__('stypy_param_names_list', ['anchor'])
        _AxesBase.set_anchor.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_anchor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_anchor.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_anchor.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_anchor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_anchor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_anchor', ['anchor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_anchor', localization, ['anchor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_anchor(...)' code ##################

        unicode_210741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1319, (-1)), 'unicode', u"\n        *anchor*\n\n          =====  ============\n          value  description\n          =====  ============\n          'C'    Center\n          'SW'   bottom left\n          'S'    bottom\n          'SE'   bottom right\n          'E'    right\n          'NE'   top right\n          'N'    top\n          'NW'   top left\n          'W'    left\n          =====  ============\n\n        ")
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'anchor' (line 1320)
        anchor_210742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 11), 'anchor')
        # Getting the type of 'mtransforms' (line 1320)
        mtransforms_210743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 21), 'mtransforms')
        # Obtaining the member 'Bbox' of a type (line 1320)
        Bbox_210744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 21), mtransforms_210743, 'Bbox')
        # Obtaining the member 'coefs' of a type (line 1320)
        coefs_210745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 21), Bbox_210744, 'coefs')
        # Applying the binary operator 'in' (line 1320)
        result_contains_210746 = python_operator(stypy.reporting.localization.Localization(__file__, 1320, 11), 'in', anchor_210742, coefs_210745)
        
        
        
        # Call to len(...): (line 1320)
        # Processing the call arguments (line 1320)
        # Getting the type of 'anchor' (line 1320)
        anchor_210748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 51), 'anchor', False)
        # Processing the call keyword arguments (line 1320)
        kwargs_210749 = {}
        # Getting the type of 'len' (line 1320)
        len_210747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 47), 'len', False)
        # Calling len(args, kwargs) (line 1320)
        len_call_result_210750 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 47), len_210747, *[anchor_210748], **kwargs_210749)
        
        int_210751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 62), 'int')
        # Applying the binary operator '==' (line 1320)
        result_eq_210752 = python_operator(stypy.reporting.localization.Localization(__file__, 1320, 47), '==', len_call_result_210750, int_210751)
        
        # Applying the binary operator 'or' (line 1320)
        result_or_keyword_210753 = python_operator(stypy.reporting.localization.Localization(__file__, 1320, 11), 'or', result_contains_210746, result_eq_210752)
        
        # Testing the type of an if condition (line 1320)
        if_condition_210754 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1320, 8), result_or_keyword_210753)
        # Assigning a type to the variable 'if_condition_210754' (line 1320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 8), 'if_condition_210754', if_condition_210754)
        # SSA begins for if statement (line 1320)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1321):
        
        # Assigning a Name to a Attribute (line 1321):
        # Getting the type of 'anchor' (line 1321)
        anchor_210755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 27), 'anchor')
        # Getting the type of 'self' (line 1321)
        self_210756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 12), 'self')
        # Setting the type of the member '_anchor' of a type (line 1321)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1321, 12), self_210756, '_anchor', anchor_210755)
        # SSA branch for the else part of an if statement (line 1320)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1323)
        # Processing the call arguments (line 1323)
        unicode_210758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1323, 29), 'unicode', u'argument must be among %s')
        
        # Call to join(...): (line 1324)
        # Processing the call arguments (line 1324)
        # Getting the type of 'mtransforms' (line 1324)
        mtransforms_210761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 39), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 1324)
        Bbox_210762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1324, 39), mtransforms_210761, 'Bbox')
        # Obtaining the member 'coefs' of a type (line 1324)
        coefs_210763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1324, 39), Bbox_210762, 'coefs')
        # Processing the call keyword arguments (line 1324)
        kwargs_210764 = {}
        unicode_210759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1324, 29), 'unicode', u', ')
        # Obtaining the member 'join' of a type (line 1324)
        join_210760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1324, 29), unicode_210759, 'join')
        # Calling join(args, kwargs) (line 1324)
        join_call_result_210765 = invoke(stypy.reporting.localization.Localization(__file__, 1324, 29), join_210760, *[coefs_210763], **kwargs_210764)
        
        # Applying the binary operator '%' (line 1323)
        result_mod_210766 = python_operator(stypy.reporting.localization.Localization(__file__, 1323, 29), '%', unicode_210758, join_call_result_210765)
        
        # Processing the call keyword arguments (line 1323)
        kwargs_210767 = {}
        # Getting the type of 'ValueError' (line 1323)
        ValueError_210757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1323)
        ValueError_call_result_210768 = invoke(stypy.reporting.localization.Localization(__file__, 1323, 18), ValueError_210757, *[result_mod_210766], **kwargs_210767)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1323, 12), ValueError_call_result_210768, 'raise parameter', BaseException)
        # SSA join for if statement (line 1320)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1325):
        
        # Assigning a Name to a Attribute (line 1325):
        # Getting the type of 'True' (line 1325)
        True_210769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 21), 'True')
        # Getting the type of 'self' (line 1325)
        self_210770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1325)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1325, 8), self_210770, 'stale', True_210769)
        
        # ################# End of 'set_anchor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_anchor' in the type store
        # Getting the type of 'stypy_return_type' (line 1301)
        stypy_return_type_210771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210771)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_anchor'
        return stypy_return_type_210771


    @norecursion
    def get_data_ratio(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_data_ratio'
        module_type_store = module_type_store.open_function_context('get_data_ratio', 1327, 4, False)
        # Assigning a type to the variable 'self' (line 1328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_data_ratio.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_data_ratio.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_data_ratio.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_data_ratio.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_data_ratio')
        _AxesBase.get_data_ratio.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_data_ratio.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_data_ratio.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_data_ratio.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_data_ratio.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_data_ratio.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_data_ratio.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_data_ratio', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_data_ratio', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_data_ratio(...)' code ##################

        unicode_210772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1333, (-1)), 'unicode', u'\n        Returns the aspect ratio of the raw data.\n\n        This method is intended to be overridden by new projection\n        types.\n        ')
        
        # Assigning a Call to a Tuple (line 1334):
        
        # Assigning a Call to a Name:
        
        # Call to get_xbound(...): (line 1334)
        # Processing the call keyword arguments (line 1334)
        kwargs_210775 = {}
        # Getting the type of 'self' (line 1334)
        self_210773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 21), 'self', False)
        # Obtaining the member 'get_xbound' of a type (line 1334)
        get_xbound_210774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 21), self_210773, 'get_xbound')
        # Calling get_xbound(args, kwargs) (line 1334)
        get_xbound_call_result_210776 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 21), get_xbound_210774, *[], **kwargs_210775)
        
        # Assigning a type to the variable 'call_assignment_207715' (line 1334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1334, 8), 'call_assignment_207715', get_xbound_call_result_210776)
        
        # Assigning a Call to a Name (line 1334):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_210779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1334, 8), 'int')
        # Processing the call keyword arguments
        kwargs_210780 = {}
        # Getting the type of 'call_assignment_207715' (line 1334)
        call_assignment_207715_210777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 8), 'call_assignment_207715', False)
        # Obtaining the member '__getitem__' of a type (line 1334)
        getitem___210778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 8), call_assignment_207715_210777, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_210781 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___210778, *[int_210779], **kwargs_210780)
        
        # Assigning a type to the variable 'call_assignment_207716' (line 1334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1334, 8), 'call_assignment_207716', getitem___call_result_210781)
        
        # Assigning a Name to a Name (line 1334):
        # Getting the type of 'call_assignment_207716' (line 1334)
        call_assignment_207716_210782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 8), 'call_assignment_207716')
        # Assigning a type to the variable 'xmin' (line 1334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1334, 8), 'xmin', call_assignment_207716_210782)
        
        # Assigning a Call to a Name (line 1334):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_210785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1334, 8), 'int')
        # Processing the call keyword arguments
        kwargs_210786 = {}
        # Getting the type of 'call_assignment_207715' (line 1334)
        call_assignment_207715_210783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 8), 'call_assignment_207715', False)
        # Obtaining the member '__getitem__' of a type (line 1334)
        getitem___210784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 8), call_assignment_207715_210783, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_210787 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___210784, *[int_210785], **kwargs_210786)
        
        # Assigning a type to the variable 'call_assignment_207717' (line 1334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1334, 8), 'call_assignment_207717', getitem___call_result_210787)
        
        # Assigning a Name to a Name (line 1334):
        # Getting the type of 'call_assignment_207717' (line 1334)
        call_assignment_207717_210788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 8), 'call_assignment_207717')
        # Assigning a type to the variable 'xmax' (line 1334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1334, 14), 'xmax', call_assignment_207717_210788)
        
        # Assigning a Call to a Tuple (line 1335):
        
        # Assigning a Call to a Name:
        
        # Call to get_ybound(...): (line 1335)
        # Processing the call keyword arguments (line 1335)
        kwargs_210791 = {}
        # Getting the type of 'self' (line 1335)
        self_210789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 21), 'self', False)
        # Obtaining the member 'get_ybound' of a type (line 1335)
        get_ybound_210790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 21), self_210789, 'get_ybound')
        # Calling get_ybound(args, kwargs) (line 1335)
        get_ybound_call_result_210792 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 21), get_ybound_210790, *[], **kwargs_210791)
        
        # Assigning a type to the variable 'call_assignment_207718' (line 1335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1335, 8), 'call_assignment_207718', get_ybound_call_result_210792)
        
        # Assigning a Call to a Name (line 1335):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_210795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1335, 8), 'int')
        # Processing the call keyword arguments
        kwargs_210796 = {}
        # Getting the type of 'call_assignment_207718' (line 1335)
        call_assignment_207718_210793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 8), 'call_assignment_207718', False)
        # Obtaining the member '__getitem__' of a type (line 1335)
        getitem___210794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 8), call_assignment_207718_210793, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_210797 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___210794, *[int_210795], **kwargs_210796)
        
        # Assigning a type to the variable 'call_assignment_207719' (line 1335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1335, 8), 'call_assignment_207719', getitem___call_result_210797)
        
        # Assigning a Name to a Name (line 1335):
        # Getting the type of 'call_assignment_207719' (line 1335)
        call_assignment_207719_210798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 8), 'call_assignment_207719')
        # Assigning a type to the variable 'ymin' (line 1335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1335, 8), 'ymin', call_assignment_207719_210798)
        
        # Assigning a Call to a Name (line 1335):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_210801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1335, 8), 'int')
        # Processing the call keyword arguments
        kwargs_210802 = {}
        # Getting the type of 'call_assignment_207718' (line 1335)
        call_assignment_207718_210799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 8), 'call_assignment_207718', False)
        # Obtaining the member '__getitem__' of a type (line 1335)
        getitem___210800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 8), call_assignment_207718_210799, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_210803 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___210800, *[int_210801], **kwargs_210802)
        
        # Assigning a type to the variable 'call_assignment_207720' (line 1335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1335, 8), 'call_assignment_207720', getitem___call_result_210803)
        
        # Assigning a Name to a Name (line 1335):
        # Getting the type of 'call_assignment_207720' (line 1335)
        call_assignment_207720_210804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 8), 'call_assignment_207720')
        # Assigning a type to the variable 'ymax' (line 1335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1335, 14), 'ymax', call_assignment_207720_210804)
        
        # Assigning a Call to a Name (line 1337):
        
        # Assigning a Call to a Name (line 1337):
        
        # Call to max(...): (line 1337)
        # Processing the call arguments (line 1337)
        
        # Call to abs(...): (line 1337)
        # Processing the call arguments (line 1337)
        # Getting the type of 'xmax' (line 1337)
        xmax_210807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 24), 'xmax', False)
        # Getting the type of 'xmin' (line 1337)
        xmin_210808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 31), 'xmin', False)
        # Applying the binary operator '-' (line 1337)
        result_sub_210809 = python_operator(stypy.reporting.localization.Localization(__file__, 1337, 24), '-', xmax_210807, xmin_210808)
        
        # Processing the call keyword arguments (line 1337)
        kwargs_210810 = {}
        # Getting the type of 'abs' (line 1337)
        abs_210806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 20), 'abs', False)
        # Calling abs(args, kwargs) (line 1337)
        abs_call_result_210811 = invoke(stypy.reporting.localization.Localization(__file__, 1337, 20), abs_210806, *[result_sub_210809], **kwargs_210810)
        
        float_210812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1337, 38), 'float')
        # Processing the call keyword arguments (line 1337)
        kwargs_210813 = {}
        # Getting the type of 'max' (line 1337)
        max_210805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 16), 'max', False)
        # Calling max(args, kwargs) (line 1337)
        max_call_result_210814 = invoke(stypy.reporting.localization.Localization(__file__, 1337, 16), max_210805, *[abs_call_result_210811, float_210812], **kwargs_210813)
        
        # Assigning a type to the variable 'xsize' (line 1337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 8), 'xsize', max_call_result_210814)
        
        # Assigning a Call to a Name (line 1338):
        
        # Assigning a Call to a Name (line 1338):
        
        # Call to max(...): (line 1338)
        # Processing the call arguments (line 1338)
        
        # Call to abs(...): (line 1338)
        # Processing the call arguments (line 1338)
        # Getting the type of 'ymax' (line 1338)
        ymax_210817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 24), 'ymax', False)
        # Getting the type of 'ymin' (line 1338)
        ymin_210818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 31), 'ymin', False)
        # Applying the binary operator '-' (line 1338)
        result_sub_210819 = python_operator(stypy.reporting.localization.Localization(__file__, 1338, 24), '-', ymax_210817, ymin_210818)
        
        # Processing the call keyword arguments (line 1338)
        kwargs_210820 = {}
        # Getting the type of 'abs' (line 1338)
        abs_210816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 20), 'abs', False)
        # Calling abs(args, kwargs) (line 1338)
        abs_call_result_210821 = invoke(stypy.reporting.localization.Localization(__file__, 1338, 20), abs_210816, *[result_sub_210819], **kwargs_210820)
        
        float_210822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1338, 38), 'float')
        # Processing the call keyword arguments (line 1338)
        kwargs_210823 = {}
        # Getting the type of 'max' (line 1338)
        max_210815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 16), 'max', False)
        # Calling max(args, kwargs) (line 1338)
        max_call_result_210824 = invoke(stypy.reporting.localization.Localization(__file__, 1338, 16), max_210815, *[abs_call_result_210821, float_210822], **kwargs_210823)
        
        # Assigning a type to the variable 'ysize' (line 1338)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1338, 8), 'ysize', max_call_result_210824)
        # Getting the type of 'ysize' (line 1340)
        ysize_210825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 15), 'ysize')
        # Getting the type of 'xsize' (line 1340)
        xsize_210826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 23), 'xsize')
        # Applying the binary operator 'div' (line 1340)
        result_div_210827 = python_operator(stypy.reporting.localization.Localization(__file__, 1340, 15), 'div', ysize_210825, xsize_210826)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 8), 'stypy_return_type', result_div_210827)
        
        # ################# End of 'get_data_ratio(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_data_ratio' in the type store
        # Getting the type of 'stypy_return_type' (line 1327)
        stypy_return_type_210828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210828)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_data_ratio'
        return stypy_return_type_210828


    @norecursion
    def get_data_ratio_log(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_data_ratio_log'
        module_type_store = module_type_store.open_function_context('get_data_ratio_log', 1342, 4, False)
        # Assigning a type to the variable 'self' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_data_ratio_log.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_data_ratio_log.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_data_ratio_log.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_data_ratio_log.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_data_ratio_log')
        _AxesBase.get_data_ratio_log.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_data_ratio_log.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_data_ratio_log.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_data_ratio_log.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_data_ratio_log.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_data_ratio_log.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_data_ratio_log.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_data_ratio_log', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_data_ratio_log', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_data_ratio_log(...)' code ##################

        unicode_210829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1346, (-1)), 'unicode', u'\n        Returns the aspect ratio of the raw data in log scale.\n        Will be used when both axis scales are in log.\n        ')
        
        # Assigning a Call to a Tuple (line 1347):
        
        # Assigning a Call to a Name:
        
        # Call to get_xbound(...): (line 1347)
        # Processing the call keyword arguments (line 1347)
        kwargs_210832 = {}
        # Getting the type of 'self' (line 1347)
        self_210830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 21), 'self', False)
        # Obtaining the member 'get_xbound' of a type (line 1347)
        get_xbound_210831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1347, 21), self_210830, 'get_xbound')
        # Calling get_xbound(args, kwargs) (line 1347)
        get_xbound_call_result_210833 = invoke(stypy.reporting.localization.Localization(__file__, 1347, 21), get_xbound_210831, *[], **kwargs_210832)
        
        # Assigning a type to the variable 'call_assignment_207721' (line 1347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'call_assignment_207721', get_xbound_call_result_210833)
        
        # Assigning a Call to a Name (line 1347):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_210836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1347, 8), 'int')
        # Processing the call keyword arguments
        kwargs_210837 = {}
        # Getting the type of 'call_assignment_207721' (line 1347)
        call_assignment_207721_210834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'call_assignment_207721', False)
        # Obtaining the member '__getitem__' of a type (line 1347)
        getitem___210835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1347, 8), call_assignment_207721_210834, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_210838 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___210835, *[int_210836], **kwargs_210837)
        
        # Assigning a type to the variable 'call_assignment_207722' (line 1347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'call_assignment_207722', getitem___call_result_210838)
        
        # Assigning a Name to a Name (line 1347):
        # Getting the type of 'call_assignment_207722' (line 1347)
        call_assignment_207722_210839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'call_assignment_207722')
        # Assigning a type to the variable 'xmin' (line 1347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'xmin', call_assignment_207722_210839)
        
        # Assigning a Call to a Name (line 1347):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_210842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1347, 8), 'int')
        # Processing the call keyword arguments
        kwargs_210843 = {}
        # Getting the type of 'call_assignment_207721' (line 1347)
        call_assignment_207721_210840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'call_assignment_207721', False)
        # Obtaining the member '__getitem__' of a type (line 1347)
        getitem___210841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1347, 8), call_assignment_207721_210840, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_210844 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___210841, *[int_210842], **kwargs_210843)
        
        # Assigning a type to the variable 'call_assignment_207723' (line 1347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'call_assignment_207723', getitem___call_result_210844)
        
        # Assigning a Name to a Name (line 1347):
        # Getting the type of 'call_assignment_207723' (line 1347)
        call_assignment_207723_210845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'call_assignment_207723')
        # Assigning a type to the variable 'xmax' (line 1347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1347, 14), 'xmax', call_assignment_207723_210845)
        
        # Assigning a Call to a Tuple (line 1348):
        
        # Assigning a Call to a Name:
        
        # Call to get_ybound(...): (line 1348)
        # Processing the call keyword arguments (line 1348)
        kwargs_210848 = {}
        # Getting the type of 'self' (line 1348)
        self_210846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 21), 'self', False)
        # Obtaining the member 'get_ybound' of a type (line 1348)
        get_ybound_210847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 21), self_210846, 'get_ybound')
        # Calling get_ybound(args, kwargs) (line 1348)
        get_ybound_call_result_210849 = invoke(stypy.reporting.localization.Localization(__file__, 1348, 21), get_ybound_210847, *[], **kwargs_210848)
        
        # Assigning a type to the variable 'call_assignment_207724' (line 1348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 8), 'call_assignment_207724', get_ybound_call_result_210849)
        
        # Assigning a Call to a Name (line 1348):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_210852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1348, 8), 'int')
        # Processing the call keyword arguments
        kwargs_210853 = {}
        # Getting the type of 'call_assignment_207724' (line 1348)
        call_assignment_207724_210850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 8), 'call_assignment_207724', False)
        # Obtaining the member '__getitem__' of a type (line 1348)
        getitem___210851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 8), call_assignment_207724_210850, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_210854 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___210851, *[int_210852], **kwargs_210853)
        
        # Assigning a type to the variable 'call_assignment_207725' (line 1348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 8), 'call_assignment_207725', getitem___call_result_210854)
        
        # Assigning a Name to a Name (line 1348):
        # Getting the type of 'call_assignment_207725' (line 1348)
        call_assignment_207725_210855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 8), 'call_assignment_207725')
        # Assigning a type to the variable 'ymin' (line 1348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 8), 'ymin', call_assignment_207725_210855)
        
        # Assigning a Call to a Name (line 1348):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_210858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1348, 8), 'int')
        # Processing the call keyword arguments
        kwargs_210859 = {}
        # Getting the type of 'call_assignment_207724' (line 1348)
        call_assignment_207724_210856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 8), 'call_assignment_207724', False)
        # Obtaining the member '__getitem__' of a type (line 1348)
        getitem___210857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 8), call_assignment_207724_210856, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_210860 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___210857, *[int_210858], **kwargs_210859)
        
        # Assigning a type to the variable 'call_assignment_207726' (line 1348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 8), 'call_assignment_207726', getitem___call_result_210860)
        
        # Assigning a Name to a Name (line 1348):
        # Getting the type of 'call_assignment_207726' (line 1348)
        call_assignment_207726_210861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 8), 'call_assignment_207726')
        # Assigning a type to the variable 'ymax' (line 1348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 14), 'ymax', call_assignment_207726_210861)
        
        # Assigning a Call to a Name (line 1350):
        
        # Assigning a Call to a Name (line 1350):
        
        # Call to max(...): (line 1350)
        # Processing the call arguments (line 1350)
        
        # Call to abs(...): (line 1350)
        # Processing the call arguments (line 1350)
        
        # Call to log10(...): (line 1350)
        # Processing the call arguments (line 1350)
        # Getting the type of 'xmax' (line 1350)
        xmax_210866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 35), 'xmax', False)
        # Processing the call keyword arguments (line 1350)
        kwargs_210867 = {}
        # Getting the type of 'math' (line 1350)
        math_210864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 24), 'math', False)
        # Obtaining the member 'log10' of a type (line 1350)
        log10_210865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1350, 24), math_210864, 'log10')
        # Calling log10(args, kwargs) (line 1350)
        log10_call_result_210868 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 24), log10_210865, *[xmax_210866], **kwargs_210867)
        
        
        # Call to log10(...): (line 1350)
        # Processing the call arguments (line 1350)
        # Getting the type of 'xmin' (line 1350)
        xmin_210871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 54), 'xmin', False)
        # Processing the call keyword arguments (line 1350)
        kwargs_210872 = {}
        # Getting the type of 'math' (line 1350)
        math_210869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 43), 'math', False)
        # Obtaining the member 'log10' of a type (line 1350)
        log10_210870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1350, 43), math_210869, 'log10')
        # Calling log10(args, kwargs) (line 1350)
        log10_call_result_210873 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 43), log10_210870, *[xmin_210871], **kwargs_210872)
        
        # Applying the binary operator '-' (line 1350)
        result_sub_210874 = python_operator(stypy.reporting.localization.Localization(__file__, 1350, 24), '-', log10_call_result_210868, log10_call_result_210873)
        
        # Processing the call keyword arguments (line 1350)
        kwargs_210875 = {}
        # Getting the type of 'abs' (line 1350)
        abs_210863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 20), 'abs', False)
        # Calling abs(args, kwargs) (line 1350)
        abs_call_result_210876 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 20), abs_210863, *[result_sub_210874], **kwargs_210875)
        
        float_210877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1350, 62), 'float')
        # Processing the call keyword arguments (line 1350)
        kwargs_210878 = {}
        # Getting the type of 'max' (line 1350)
        max_210862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 16), 'max', False)
        # Calling max(args, kwargs) (line 1350)
        max_call_result_210879 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 16), max_210862, *[abs_call_result_210876, float_210877], **kwargs_210878)
        
        # Assigning a type to the variable 'xsize' (line 1350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 8), 'xsize', max_call_result_210879)
        
        # Assigning a Call to a Name (line 1351):
        
        # Assigning a Call to a Name (line 1351):
        
        # Call to max(...): (line 1351)
        # Processing the call arguments (line 1351)
        
        # Call to abs(...): (line 1351)
        # Processing the call arguments (line 1351)
        
        # Call to log10(...): (line 1351)
        # Processing the call arguments (line 1351)
        # Getting the type of 'ymax' (line 1351)
        ymax_210884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 35), 'ymax', False)
        # Processing the call keyword arguments (line 1351)
        kwargs_210885 = {}
        # Getting the type of 'math' (line 1351)
        math_210882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 24), 'math', False)
        # Obtaining the member 'log10' of a type (line 1351)
        log10_210883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1351, 24), math_210882, 'log10')
        # Calling log10(args, kwargs) (line 1351)
        log10_call_result_210886 = invoke(stypy.reporting.localization.Localization(__file__, 1351, 24), log10_210883, *[ymax_210884], **kwargs_210885)
        
        
        # Call to log10(...): (line 1351)
        # Processing the call arguments (line 1351)
        # Getting the type of 'ymin' (line 1351)
        ymin_210889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 54), 'ymin', False)
        # Processing the call keyword arguments (line 1351)
        kwargs_210890 = {}
        # Getting the type of 'math' (line 1351)
        math_210887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 43), 'math', False)
        # Obtaining the member 'log10' of a type (line 1351)
        log10_210888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1351, 43), math_210887, 'log10')
        # Calling log10(args, kwargs) (line 1351)
        log10_call_result_210891 = invoke(stypy.reporting.localization.Localization(__file__, 1351, 43), log10_210888, *[ymin_210889], **kwargs_210890)
        
        # Applying the binary operator '-' (line 1351)
        result_sub_210892 = python_operator(stypy.reporting.localization.Localization(__file__, 1351, 24), '-', log10_call_result_210886, log10_call_result_210891)
        
        # Processing the call keyword arguments (line 1351)
        kwargs_210893 = {}
        # Getting the type of 'abs' (line 1351)
        abs_210881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 20), 'abs', False)
        # Calling abs(args, kwargs) (line 1351)
        abs_call_result_210894 = invoke(stypy.reporting.localization.Localization(__file__, 1351, 20), abs_210881, *[result_sub_210892], **kwargs_210893)
        
        float_210895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1351, 62), 'float')
        # Processing the call keyword arguments (line 1351)
        kwargs_210896 = {}
        # Getting the type of 'max' (line 1351)
        max_210880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 16), 'max', False)
        # Calling max(args, kwargs) (line 1351)
        max_call_result_210897 = invoke(stypy.reporting.localization.Localization(__file__, 1351, 16), max_210880, *[abs_call_result_210894, float_210895], **kwargs_210896)
        
        # Assigning a type to the variable 'ysize' (line 1351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 8), 'ysize', max_call_result_210897)
        # Getting the type of 'ysize' (line 1353)
        ysize_210898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 15), 'ysize')
        # Getting the type of 'xsize' (line 1353)
        xsize_210899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 23), 'xsize')
        # Applying the binary operator 'div' (line 1353)
        result_div_210900 = python_operator(stypy.reporting.localization.Localization(__file__, 1353, 15), 'div', ysize_210898, xsize_210899)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1353, 8), 'stypy_return_type', result_div_210900)
        
        # ################# End of 'get_data_ratio_log(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_data_ratio_log' in the type store
        # Getting the type of 'stypy_return_type' (line 1342)
        stypy_return_type_210901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_210901)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_data_ratio_log'
        return stypy_return_type_210901


    @norecursion
    def apply_aspect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1355)
        None_210902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 36), 'None')
        defaults = [None_210902]
        # Create a new context for function 'apply_aspect'
        module_type_store = module_type_store.open_function_context('apply_aspect', 1355, 4, False)
        # Assigning a type to the variable 'self' (line 1356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1356, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.apply_aspect.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.apply_aspect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.apply_aspect.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.apply_aspect.__dict__.__setitem__('stypy_function_name', '_AxesBase.apply_aspect')
        _AxesBase.apply_aspect.__dict__.__setitem__('stypy_param_names_list', ['position'])
        _AxesBase.apply_aspect.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.apply_aspect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.apply_aspect.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.apply_aspect.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.apply_aspect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.apply_aspect.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.apply_aspect', ['position'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'apply_aspect', localization, ['position'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'apply_aspect(...)' code ##################

        unicode_210903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, (-1)), 'unicode', u'\n        Use :meth:`_aspect` and :meth:`_adjustable` to modify the\n        axes box or the view limits.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1360)
        # Getting the type of 'position' (line 1360)
        position_210904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 11), 'position')
        # Getting the type of 'None' (line 1360)
        None_210905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 23), 'None')
        
        (may_be_210906, more_types_in_union_210907) = may_be_none(position_210904, None_210905)

        if may_be_210906:

            if more_types_in_union_210907:
                # Runtime conditional SSA (line 1360)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1361):
            
            # Assigning a Call to a Name (line 1361):
            
            # Call to get_position(...): (line 1361)
            # Processing the call keyword arguments (line 1361)
            # Getting the type of 'True' (line 1361)
            True_210910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 50), 'True', False)
            keyword_210911 = True_210910
            kwargs_210912 = {'original': keyword_210911}
            # Getting the type of 'self' (line 1361)
            self_210908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 23), 'self', False)
            # Obtaining the member 'get_position' of a type (line 1361)
            get_position_210909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1361, 23), self_210908, 'get_position')
            # Calling get_position(args, kwargs) (line 1361)
            get_position_call_result_210913 = invoke(stypy.reporting.localization.Localization(__file__, 1361, 23), get_position_210909, *[], **kwargs_210912)
            
            # Assigning a type to the variable 'position' (line 1361)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 12), 'position', get_position_call_result_210913)

            if more_types_in_union_210907:
                # SSA join for if statement (line 1360)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1363):
        
        # Assigning a Call to a Name (line 1363):
        
        # Call to get_aspect(...): (line 1363)
        # Processing the call keyword arguments (line 1363)
        kwargs_210916 = {}
        # Getting the type of 'self' (line 1363)
        self_210914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 17), 'self', False)
        # Obtaining the member 'get_aspect' of a type (line 1363)
        get_aspect_210915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1363, 17), self_210914, 'get_aspect')
        # Calling get_aspect(args, kwargs) (line 1363)
        get_aspect_call_result_210917 = invoke(stypy.reporting.localization.Localization(__file__, 1363, 17), get_aspect_210915, *[], **kwargs_210916)
        
        # Assigning a type to the variable 'aspect' (line 1363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1363, 8), 'aspect', get_aspect_call_result_210917)
        
        
        # Getting the type of 'self' (line 1365)
        self_210918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 11), 'self')
        # Obtaining the member 'name' of a type (line 1365)
        name_210919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 11), self_210918, 'name')
        unicode_210920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1365, 24), 'unicode', u'polar')
        # Applying the binary operator '!=' (line 1365)
        result_ne_210921 = python_operator(stypy.reporting.localization.Localization(__file__, 1365, 11), '!=', name_210919, unicode_210920)
        
        # Testing the type of an if condition (line 1365)
        if_condition_210922 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1365, 8), result_ne_210921)
        # Assigning a type to the variable 'if_condition_210922' (line 1365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 8), 'if_condition_210922', if_condition_210922)
        # SSA begins for if statement (line 1365)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1366):
        
        # Assigning a Call to a Name (line 1366):
        
        # Call to get_xscale(...): (line 1366)
        # Processing the call keyword arguments (line 1366)
        kwargs_210925 = {}
        # Getting the type of 'self' (line 1366)
        self_210923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 29), 'self', False)
        # Obtaining the member 'get_xscale' of a type (line 1366)
        get_xscale_210924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 29), self_210923, 'get_xscale')
        # Calling get_xscale(args, kwargs) (line 1366)
        get_xscale_call_result_210926 = invoke(stypy.reporting.localization.Localization(__file__, 1366, 29), get_xscale_210924, *[], **kwargs_210925)
        
        # Assigning a type to the variable 'tuple_assignment_207727' (line 1366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 12), 'tuple_assignment_207727', get_xscale_call_result_210926)
        
        # Assigning a Call to a Name (line 1366):
        
        # Call to get_yscale(...): (line 1366)
        # Processing the call keyword arguments (line 1366)
        kwargs_210929 = {}
        # Getting the type of 'self' (line 1366)
        self_210927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 48), 'self', False)
        # Obtaining the member 'get_yscale' of a type (line 1366)
        get_yscale_210928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 48), self_210927, 'get_yscale')
        # Calling get_yscale(args, kwargs) (line 1366)
        get_yscale_call_result_210930 = invoke(stypy.reporting.localization.Localization(__file__, 1366, 48), get_yscale_210928, *[], **kwargs_210929)
        
        # Assigning a type to the variable 'tuple_assignment_207728' (line 1366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 12), 'tuple_assignment_207728', get_yscale_call_result_210930)
        
        # Assigning a Name to a Name (line 1366):
        # Getting the type of 'tuple_assignment_207727' (line 1366)
        tuple_assignment_207727_210931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 12), 'tuple_assignment_207727')
        # Assigning a type to the variable 'xscale' (line 1366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 12), 'xscale', tuple_assignment_207727_210931)
        
        # Assigning a Name to a Name (line 1366):
        # Getting the type of 'tuple_assignment_207728' (line 1366)
        tuple_assignment_207728_210932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 12), 'tuple_assignment_207728')
        # Assigning a type to the variable 'yscale' (line 1366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 20), 'yscale', tuple_assignment_207728_210932)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'xscale' (line 1367)
        xscale_210933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 15), 'xscale')
        unicode_210934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1367, 25), 'unicode', u'linear')
        # Applying the binary operator '==' (line 1367)
        result_eq_210935 = python_operator(stypy.reporting.localization.Localization(__file__, 1367, 15), '==', xscale_210933, unicode_210934)
        
        
        # Getting the type of 'yscale' (line 1367)
        yscale_210936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 38), 'yscale')
        unicode_210937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1367, 48), 'unicode', u'linear')
        # Applying the binary operator '==' (line 1367)
        result_eq_210938 = python_operator(stypy.reporting.localization.Localization(__file__, 1367, 38), '==', yscale_210936, unicode_210937)
        
        # Applying the binary operator 'and' (line 1367)
        result_and_keyword_210939 = python_operator(stypy.reporting.localization.Localization(__file__, 1367, 15), 'and', result_eq_210935, result_eq_210938)
        
        # Testing the type of an if condition (line 1367)
        if_condition_210940 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1367, 12), result_and_keyword_210939)
        # Assigning a type to the variable 'if_condition_210940' (line 1367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1367, 12), 'if_condition_210940', if_condition_210940)
        # SSA begins for if statement (line 1367)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1368):
        
        # Assigning a Str to a Name (line 1368):
        unicode_210941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1368, 36), 'unicode', u'linear')
        # Assigning a type to the variable 'aspect_scale_mode' (line 1368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 16), 'aspect_scale_mode', unicode_210941)
        # SSA branch for the else part of an if statement (line 1367)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'xscale' (line 1369)
        xscale_210942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 17), 'xscale')
        unicode_210943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1369, 27), 'unicode', u'log')
        # Applying the binary operator '==' (line 1369)
        result_eq_210944 = python_operator(stypy.reporting.localization.Localization(__file__, 1369, 17), '==', xscale_210942, unicode_210943)
        
        
        # Getting the type of 'yscale' (line 1369)
        yscale_210945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 37), 'yscale')
        unicode_210946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1369, 47), 'unicode', u'log')
        # Applying the binary operator '==' (line 1369)
        result_eq_210947 = python_operator(stypy.reporting.localization.Localization(__file__, 1369, 37), '==', yscale_210945, unicode_210946)
        
        # Applying the binary operator 'and' (line 1369)
        result_and_keyword_210948 = python_operator(stypy.reporting.localization.Localization(__file__, 1369, 17), 'and', result_eq_210944, result_eq_210947)
        
        # Testing the type of an if condition (line 1369)
        if_condition_210949 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1369, 17), result_and_keyword_210948)
        # Assigning a type to the variable 'if_condition_210949' (line 1369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1369, 17), 'if_condition_210949', if_condition_210949)
        # SSA begins for if statement (line 1369)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1370):
        
        # Assigning a Str to a Name (line 1370):
        unicode_210950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1370, 36), 'unicode', u'log')
        # Assigning a type to the variable 'aspect_scale_mode' (line 1370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 16), 'aspect_scale_mode', unicode_210950)
        # SSA branch for the else part of an if statement (line 1369)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        # Getting the type of 'xscale' (line 1371)
        xscale_210951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 19), 'xscale')
        unicode_210952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 29), 'unicode', u'linear')
        # Applying the binary operator '==' (line 1371)
        result_eq_210953 = python_operator(stypy.reporting.localization.Localization(__file__, 1371, 19), '==', xscale_210951, unicode_210952)
        
        
        # Getting the type of 'yscale' (line 1371)
        yscale_210954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 42), 'yscale')
        unicode_210955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 52), 'unicode', u'log')
        # Applying the binary operator '==' (line 1371)
        result_eq_210956 = python_operator(stypy.reporting.localization.Localization(__file__, 1371, 42), '==', yscale_210954, unicode_210955)
        
        # Applying the binary operator 'and' (line 1371)
        result_and_keyword_210957 = python_operator(stypy.reporting.localization.Localization(__file__, 1371, 19), 'and', result_eq_210953, result_eq_210956)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'xscale' (line 1372)
        xscale_210958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 19), 'xscale')
        unicode_210959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1372, 29), 'unicode', u'log')
        # Applying the binary operator '==' (line 1372)
        result_eq_210960 = python_operator(stypy.reporting.localization.Localization(__file__, 1372, 19), '==', xscale_210958, unicode_210959)
        
        
        # Getting the type of 'yscale' (line 1372)
        yscale_210961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 39), 'yscale')
        unicode_210962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1372, 49), 'unicode', u'linear')
        # Applying the binary operator '==' (line 1372)
        result_eq_210963 = python_operator(stypy.reporting.localization.Localization(__file__, 1372, 39), '==', yscale_210961, unicode_210962)
        
        # Applying the binary operator 'and' (line 1372)
        result_and_keyword_210964 = python_operator(stypy.reporting.localization.Localization(__file__, 1372, 19), 'and', result_eq_210960, result_eq_210963)
        
        # Applying the binary operator 'or' (line 1371)
        result_or_keyword_210965 = python_operator(stypy.reporting.localization.Localization(__file__, 1371, 18), 'or', result_and_keyword_210957, result_and_keyword_210964)
        
        # Testing the type of an if condition (line 1371)
        if_condition_210966 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1371, 17), result_or_keyword_210965)
        # Assigning a type to the variable 'if_condition_210966' (line 1371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 17), 'if_condition_210966', if_condition_210966)
        # SSA begins for if statement (line 1371)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'aspect' (line 1373)
        aspect_210967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 19), 'aspect')
        unicode_210968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1373, 29), 'unicode', u'auto')
        # Applying the binary operator '!=' (line 1373)
        result_ne_210969 = python_operator(stypy.reporting.localization.Localization(__file__, 1373, 19), '!=', aspect_210967, unicode_210968)
        
        # Testing the type of an if condition (line 1373)
        if_condition_210970 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1373, 16), result_ne_210969)
        # Assigning a type to the variable 'if_condition_210970' (line 1373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1373, 16), 'if_condition_210970', if_condition_210970)
        # SSA begins for if statement (line 1373)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1374)
        # Processing the call arguments (line 1374)
        unicode_210973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 24), 'unicode', u'aspect is not supported for Axes with xscale=%s, yscale=%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1376)
        tuple_210974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1376, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1376)
        # Adding element type (line 1376)
        # Getting the type of 'xscale' (line 1376)
        xscale_210975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 39), 'xscale', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1376, 39), tuple_210974, xscale_210975)
        # Adding element type (line 1376)
        # Getting the type of 'yscale' (line 1376)
        yscale_210976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 47), 'yscale', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1376, 39), tuple_210974, yscale_210976)
        
        # Applying the binary operator '%' (line 1375)
        result_mod_210977 = python_operator(stypy.reporting.localization.Localization(__file__, 1375, 24), '%', unicode_210973, tuple_210974)
        
        # Processing the call keyword arguments (line 1374)
        kwargs_210978 = {}
        # Getting the type of 'warnings' (line 1374)
        warnings_210971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 20), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1374)
        warn_210972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1374, 20), warnings_210971, 'warn')
        # Calling warn(args, kwargs) (line 1374)
        warn_call_result_210979 = invoke(stypy.reporting.localization.Localization(__file__, 1374, 20), warn_210972, *[result_mod_210977], **kwargs_210978)
        
        
        # Assigning a Str to a Name (line 1377):
        
        # Assigning a Str to a Name (line 1377):
        unicode_210980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1377, 29), 'unicode', u'auto')
        # Assigning a type to the variable 'aspect' (line 1377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1377, 20), 'aspect', unicode_210980)
        # SSA join for if statement (line 1373)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1371)
        module_type_store.open_ssa_branch('else')
        pass
        # SSA join for if statement (line 1371)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1369)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1367)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1365)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 1381):
        
        # Assigning a Str to a Name (line 1381):
        unicode_210981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1381, 32), 'unicode', u'linear')
        # Assigning a type to the variable 'aspect_scale_mode' (line 1381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 12), 'aspect_scale_mode', unicode_210981)
        # SSA join for if statement (line 1365)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'aspect' (line 1383)
        aspect_210982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 11), 'aspect')
        unicode_210983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1383, 21), 'unicode', u'auto')
        # Applying the binary operator '==' (line 1383)
        result_eq_210984 = python_operator(stypy.reporting.localization.Localization(__file__, 1383, 11), '==', aspect_210982, unicode_210983)
        
        # Testing the type of an if condition (line 1383)
        if_condition_210985 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1383, 8), result_eq_210984)
        # Assigning a type to the variable 'if_condition_210985' (line 1383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1383, 8), 'if_condition_210985', if_condition_210985)
        # SSA begins for if statement (line 1383)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_position(...): (line 1384)
        # Processing the call arguments (line 1384)
        # Getting the type of 'position' (line 1384)
        position_210988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 30), 'position', False)
        # Processing the call keyword arguments (line 1384)
        unicode_210989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1384, 46), 'unicode', u'active')
        keyword_210990 = unicode_210989
        kwargs_210991 = {'which': keyword_210990}
        # Getting the type of 'self' (line 1384)
        self_210986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 12), 'self', False)
        # Obtaining the member 'set_position' of a type (line 1384)
        set_position_210987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 12), self_210986, 'set_position')
        # Calling set_position(args, kwargs) (line 1384)
        set_position_call_result_210992 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 12), set_position_210987, *[position_210988], **kwargs_210991)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1385, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1383)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'aspect' (line 1387)
        aspect_210993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 11), 'aspect')
        unicode_210994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1387, 21), 'unicode', u'equal')
        # Applying the binary operator '==' (line 1387)
        result_eq_210995 = python_operator(stypy.reporting.localization.Localization(__file__, 1387, 11), '==', aspect_210993, unicode_210994)
        
        # Testing the type of an if condition (line 1387)
        if_condition_210996 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1387, 8), result_eq_210995)
        # Assigning a type to the variable 'if_condition_210996' (line 1387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 8), 'if_condition_210996', if_condition_210996)
        # SSA begins for if statement (line 1387)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 1388):
        
        # Assigning a Num to a Name (line 1388):
        int_210997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 16), 'int')
        # Assigning a type to the variable 'A' (line 1388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 12), 'A', int_210997)
        # SSA branch for the else part of an if statement (line 1387)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1390):
        
        # Assigning a Name to a Name (line 1390):
        # Getting the type of 'aspect' (line 1390)
        aspect_210998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 16), 'aspect')
        # Assigning a type to the variable 'A' (line 1390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1390, 12), 'A', aspect_210998)
        # SSA join for if statement (line 1387)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1394)
        self_210999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 11), 'self')
        # Getting the type of 'self' (line 1394)
        self_211000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 19), 'self')
        # Obtaining the member '_shared_x_axes' of a type (line 1394)
        _shared_x_axes_211001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1394, 19), self_211000, '_shared_x_axes')
        # Applying the binary operator 'in' (line 1394)
        result_contains_211002 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 11), 'in', self_210999, _shared_x_axes_211001)
        
        
        # Getting the type of 'self' (line 1394)
        self_211003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 42), 'self')
        # Getting the type of 'self' (line 1394)
        self_211004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 50), 'self')
        # Obtaining the member '_shared_y_axes' of a type (line 1394)
        _shared_y_axes_211005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1394, 50), self_211004, '_shared_y_axes')
        # Applying the binary operator 'in' (line 1394)
        result_contains_211006 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 42), 'in', self_211003, _shared_y_axes_211005)
        
        # Applying the binary operator 'or' (line 1394)
        result_or_keyword_211007 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 11), 'or', result_contains_211002, result_contains_211006)
        
        # Testing the type of an if condition (line 1394)
        if_condition_211008 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1394, 8), result_or_keyword_211007)
        # Assigning a type to the variable 'if_condition_211008' (line 1394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 8), 'if_condition_211008', if_condition_211008)
        # SSA begins for if statement (line 1394)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 1395)
        self_211009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 15), 'self')
        # Obtaining the member '_adjustable' of a type (line 1395)
        _adjustable_211010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1395, 15), self_211009, '_adjustable')
        unicode_211011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1395, 35), 'unicode', u'box')
        # Applying the binary operator '==' (line 1395)
        result_eq_211012 = python_operator(stypy.reporting.localization.Localization(__file__, 1395, 15), '==', _adjustable_211010, unicode_211011)
        
        # Testing the type of an if condition (line 1395)
        if_condition_211013 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1395, 12), result_eq_211012)
        # Assigning a type to the variable 'if_condition_211013' (line 1395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 12), 'if_condition_211013', if_condition_211013)
        # SSA begins for if statement (line 1395)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Attribute (line 1396):
        
        # Assigning a Str to a Attribute (line 1396):
        unicode_211014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1396, 35), 'unicode', u'datalim')
        # Getting the type of 'self' (line 1396)
        self_211015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 16), 'self')
        # Setting the type of the member '_adjustable' of a type (line 1396)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1396, 16), self_211015, '_adjustable', unicode_211014)
        
        # Call to warn(...): (line 1397)
        # Processing the call arguments (line 1397)
        unicode_211018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, 20), 'unicode', u'shared axes: "adjustable" is being changed to "datalim"')
        # Processing the call keyword arguments (line 1397)
        kwargs_211019 = {}
        # Getting the type of 'warnings' (line 1397)
        warnings_211016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1397)
        warn_211017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1397, 16), warnings_211016, 'warn')
        # Calling warn(args, kwargs) (line 1397)
        warn_call_result_211020 = invoke(stypy.reporting.localization.Localization(__file__, 1397, 16), warn_211017, *[unicode_211018], **kwargs_211019)
        
        # SSA join for if statement (line 1395)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1394)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1400):
        
        # Assigning a Call to a Name:
        
        # Call to get_size_inches(...): (line 1400)
        # Processing the call keyword arguments (line 1400)
        kwargs_211026 = {}
        
        # Call to get_figure(...): (line 1400)
        # Processing the call keyword arguments (line 1400)
        kwargs_211023 = {}
        # Getting the type of 'self' (line 1400)
        self_211021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 21), 'self', False)
        # Obtaining the member 'get_figure' of a type (line 1400)
        get_figure_211022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 21), self_211021, 'get_figure')
        # Calling get_figure(args, kwargs) (line 1400)
        get_figure_call_result_211024 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 21), get_figure_211022, *[], **kwargs_211023)
        
        # Obtaining the member 'get_size_inches' of a type (line 1400)
        get_size_inches_211025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 21), get_figure_call_result_211024, 'get_size_inches')
        # Calling get_size_inches(args, kwargs) (line 1400)
        get_size_inches_call_result_211027 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 21), get_size_inches_211025, *[], **kwargs_211026)
        
        # Assigning a type to the variable 'call_assignment_207729' (line 1400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 8), 'call_assignment_207729', get_size_inches_call_result_211027)
        
        # Assigning a Call to a Name (line 1400):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 8), 'int')
        # Processing the call keyword arguments
        kwargs_211031 = {}
        # Getting the type of 'call_assignment_207729' (line 1400)
        call_assignment_207729_211028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 8), 'call_assignment_207729', False)
        # Obtaining the member '__getitem__' of a type (line 1400)
        getitem___211029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 8), call_assignment_207729_211028, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211032 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211029, *[int_211030], **kwargs_211031)
        
        # Assigning a type to the variable 'call_assignment_207730' (line 1400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 8), 'call_assignment_207730', getitem___call_result_211032)
        
        # Assigning a Name to a Name (line 1400):
        # Getting the type of 'call_assignment_207730' (line 1400)
        call_assignment_207730_211033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 8), 'call_assignment_207730')
        # Assigning a type to the variable 'figW' (line 1400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 8), 'figW', call_assignment_207730_211033)
        
        # Assigning a Call to a Name (line 1400):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 8), 'int')
        # Processing the call keyword arguments
        kwargs_211037 = {}
        # Getting the type of 'call_assignment_207729' (line 1400)
        call_assignment_207729_211034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 8), 'call_assignment_207729', False)
        # Obtaining the member '__getitem__' of a type (line 1400)
        getitem___211035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 8), call_assignment_207729_211034, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211038 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211035, *[int_211036], **kwargs_211037)
        
        # Assigning a type to the variable 'call_assignment_207731' (line 1400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 8), 'call_assignment_207731', getitem___call_result_211038)
        
        # Assigning a Name to a Name (line 1400):
        # Getting the type of 'call_assignment_207731' (line 1400)
        call_assignment_207731_211039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 8), 'call_assignment_207731')
        # Assigning a type to the variable 'figH' (line 1400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 14), 'figH', call_assignment_207731_211039)
        
        # Assigning a BinOp to a Name (line 1401):
        
        # Assigning a BinOp to a Name (line 1401):
        # Getting the type of 'figH' (line 1401)
        figH_211040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 21), 'figH')
        # Getting the type of 'figW' (line 1401)
        figW_211041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 28), 'figW')
        # Applying the binary operator 'div' (line 1401)
        result_div_211042 = python_operator(stypy.reporting.localization.Localization(__file__, 1401, 21), 'div', figH_211040, figW_211041)
        
        # Assigning a type to the variable 'fig_aspect' (line 1401)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1401, 8), 'fig_aspect', result_div_211042)
        
        
        # Getting the type of 'self' (line 1402)
        self_211043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 11), 'self')
        # Obtaining the member '_adjustable' of a type (line 1402)
        _adjustable_211044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1402, 11), self_211043, '_adjustable')
        
        # Obtaining an instance of the builtin type 'list' (line 1402)
        list_211045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1402, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1402)
        # Adding element type (line 1402)
        unicode_211046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1402, 32), 'unicode', u'box')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1402, 31), list_211045, unicode_211046)
        # Adding element type (line 1402)
        unicode_211047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1402, 39), 'unicode', u'box-forced')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1402, 31), list_211045, unicode_211047)
        
        # Applying the binary operator 'in' (line 1402)
        result_contains_211048 = python_operator(stypy.reporting.localization.Localization(__file__, 1402, 11), 'in', _adjustable_211044, list_211045)
        
        # Testing the type of an if condition (line 1402)
        if_condition_211049 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1402, 8), result_contains_211048)
        # Assigning a type to the variable 'if_condition_211049' (line 1402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1402, 8), 'if_condition_211049', if_condition_211049)
        # SSA begins for if statement (line 1402)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'aspect_scale_mode' (line 1403)
        aspect_scale_mode_211050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 15), 'aspect_scale_mode')
        unicode_211051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1403, 36), 'unicode', u'log')
        # Applying the binary operator '==' (line 1403)
        result_eq_211052 = python_operator(stypy.reporting.localization.Localization(__file__, 1403, 15), '==', aspect_scale_mode_211050, unicode_211051)
        
        # Testing the type of an if condition (line 1403)
        if_condition_211053 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1403, 12), result_eq_211052)
        # Assigning a type to the variable 'if_condition_211053' (line 1403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1403, 12), 'if_condition_211053', if_condition_211053)
        # SSA begins for if statement (line 1403)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1404):
        
        # Assigning a BinOp to a Name (line 1404):
        # Getting the type of 'A' (line 1404)
        A_211054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 29), 'A')
        
        # Call to get_data_ratio_log(...): (line 1404)
        # Processing the call keyword arguments (line 1404)
        kwargs_211057 = {}
        # Getting the type of 'self' (line 1404)
        self_211055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 33), 'self', False)
        # Obtaining the member 'get_data_ratio_log' of a type (line 1404)
        get_data_ratio_log_211056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 33), self_211055, 'get_data_ratio_log')
        # Calling get_data_ratio_log(args, kwargs) (line 1404)
        get_data_ratio_log_call_result_211058 = invoke(stypy.reporting.localization.Localization(__file__, 1404, 33), get_data_ratio_log_211056, *[], **kwargs_211057)
        
        # Applying the binary operator '*' (line 1404)
        result_mul_211059 = python_operator(stypy.reporting.localization.Localization(__file__, 1404, 29), '*', A_211054, get_data_ratio_log_call_result_211058)
        
        # Assigning a type to the variable 'box_aspect' (line 1404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 16), 'box_aspect', result_mul_211059)
        # SSA branch for the else part of an if statement (line 1403)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1406):
        
        # Assigning a BinOp to a Name (line 1406):
        # Getting the type of 'A' (line 1406)
        A_211060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 29), 'A')
        
        # Call to get_data_ratio(...): (line 1406)
        # Processing the call keyword arguments (line 1406)
        kwargs_211063 = {}
        # Getting the type of 'self' (line 1406)
        self_211061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 33), 'self', False)
        # Obtaining the member 'get_data_ratio' of a type (line 1406)
        get_data_ratio_211062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1406, 33), self_211061, 'get_data_ratio')
        # Calling get_data_ratio(args, kwargs) (line 1406)
        get_data_ratio_call_result_211064 = invoke(stypy.reporting.localization.Localization(__file__, 1406, 33), get_data_ratio_211062, *[], **kwargs_211063)
        
        # Applying the binary operator '*' (line 1406)
        result_mul_211065 = python_operator(stypy.reporting.localization.Localization(__file__, 1406, 29), '*', A_211060, get_data_ratio_call_result_211064)
        
        # Assigning a type to the variable 'box_aspect' (line 1406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1406, 16), 'box_aspect', result_mul_211065)
        # SSA join for if statement (line 1403)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1407):
        
        # Assigning a Call to a Name (line 1407):
        
        # Call to frozen(...): (line 1407)
        # Processing the call keyword arguments (line 1407)
        kwargs_211068 = {}
        # Getting the type of 'position' (line 1407)
        position_211066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 17), 'position', False)
        # Obtaining the member 'frozen' of a type (line 1407)
        frozen_211067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 17), position_211066, 'frozen')
        # Calling frozen(args, kwargs) (line 1407)
        frozen_call_result_211069 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 17), frozen_211067, *[], **kwargs_211068)
        
        # Assigning a type to the variable 'pb' (line 1407)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 12), 'pb', frozen_call_result_211069)
        
        # Assigning a Call to a Name (line 1408):
        
        # Assigning a Call to a Name (line 1408):
        
        # Call to shrunk_to_aspect(...): (line 1408)
        # Processing the call arguments (line 1408)
        # Getting the type of 'box_aspect' (line 1408)
        box_aspect_211072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 38), 'box_aspect', False)
        # Getting the type of 'pb' (line 1408)
        pb_211073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 50), 'pb', False)
        # Getting the type of 'fig_aspect' (line 1408)
        fig_aspect_211074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 54), 'fig_aspect', False)
        # Processing the call keyword arguments (line 1408)
        kwargs_211075 = {}
        # Getting the type of 'pb' (line 1408)
        pb_211070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 18), 'pb', False)
        # Obtaining the member 'shrunk_to_aspect' of a type (line 1408)
        shrunk_to_aspect_211071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 18), pb_211070, 'shrunk_to_aspect')
        # Calling shrunk_to_aspect(args, kwargs) (line 1408)
        shrunk_to_aspect_call_result_211076 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 18), shrunk_to_aspect_211071, *[box_aspect_211072, pb_211073, fig_aspect_211074], **kwargs_211075)
        
        # Assigning a type to the variable 'pb1' (line 1408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 12), 'pb1', shrunk_to_aspect_call_result_211076)
        
        # Call to set_position(...): (line 1409)
        # Processing the call arguments (line 1409)
        
        # Call to anchored(...): (line 1409)
        # Processing the call arguments (line 1409)
        
        # Call to get_anchor(...): (line 1409)
        # Processing the call keyword arguments (line 1409)
        kwargs_211083 = {}
        # Getting the type of 'self' (line 1409)
        self_211081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 43), 'self', False)
        # Obtaining the member 'get_anchor' of a type (line 1409)
        get_anchor_211082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 43), self_211081, 'get_anchor')
        # Calling get_anchor(args, kwargs) (line 1409)
        get_anchor_call_result_211084 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 43), get_anchor_211082, *[], **kwargs_211083)
        
        # Getting the type of 'pb' (line 1409)
        pb_211085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 62), 'pb', False)
        # Processing the call keyword arguments (line 1409)
        kwargs_211086 = {}
        # Getting the type of 'pb1' (line 1409)
        pb1_211079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 30), 'pb1', False)
        # Obtaining the member 'anchored' of a type (line 1409)
        anchored_211080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 30), pb1_211079, 'anchored')
        # Calling anchored(args, kwargs) (line 1409)
        anchored_call_result_211087 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 30), anchored_211080, *[get_anchor_call_result_211084, pb_211085], **kwargs_211086)
        
        unicode_211088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1409, 67), 'unicode', u'active')
        # Processing the call keyword arguments (line 1409)
        kwargs_211089 = {}
        # Getting the type of 'self' (line 1409)
        self_211077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 12), 'self', False)
        # Obtaining the member 'set_position' of a type (line 1409)
        set_position_211078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 12), self_211077, 'set_position')
        # Calling set_position(args, kwargs) (line 1409)
        set_position_call_result_211090 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 12), set_position_211078, *[anchored_call_result_211087, unicode_211088], **kwargs_211089)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1410, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1402)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_position(...): (line 1414)
        # Processing the call arguments (line 1414)
        # Getting the type of 'position' (line 1414)
        position_211093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 26), 'position', False)
        # Processing the call keyword arguments (line 1414)
        unicode_211094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1414, 42), 'unicode', u'active')
        keyword_211095 = unicode_211094
        kwargs_211096 = {'which': keyword_211095}
        # Getting the type of 'self' (line 1414)
        self_211091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 8), 'self', False)
        # Obtaining the member 'set_position' of a type (line 1414)
        set_position_211092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1414, 8), self_211091, 'set_position')
        # Calling set_position(args, kwargs) (line 1414)
        set_position_call_result_211097 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 8), set_position_211092, *[position_211093], **kwargs_211096)
        
        
        # Assigning a Call to a Tuple (line 1416):
        
        # Assigning a Call to a Name:
        
        # Call to get_xbound(...): (line 1416)
        # Processing the call keyword arguments (line 1416)
        kwargs_211100 = {}
        # Getting the type of 'self' (line 1416)
        self_211098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 21), 'self', False)
        # Obtaining the member 'get_xbound' of a type (line 1416)
        get_xbound_211099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 21), self_211098, 'get_xbound')
        # Calling get_xbound(args, kwargs) (line 1416)
        get_xbound_call_result_211101 = invoke(stypy.reporting.localization.Localization(__file__, 1416, 21), get_xbound_211099, *[], **kwargs_211100)
        
        # Assigning a type to the variable 'call_assignment_207732' (line 1416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 8), 'call_assignment_207732', get_xbound_call_result_211101)
        
        # Assigning a Call to a Name (line 1416):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1416, 8), 'int')
        # Processing the call keyword arguments
        kwargs_211105 = {}
        # Getting the type of 'call_assignment_207732' (line 1416)
        call_assignment_207732_211102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 8), 'call_assignment_207732', False)
        # Obtaining the member '__getitem__' of a type (line 1416)
        getitem___211103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 8), call_assignment_207732_211102, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211106 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211103, *[int_211104], **kwargs_211105)
        
        # Assigning a type to the variable 'call_assignment_207733' (line 1416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 8), 'call_assignment_207733', getitem___call_result_211106)
        
        # Assigning a Name to a Name (line 1416):
        # Getting the type of 'call_assignment_207733' (line 1416)
        call_assignment_207733_211107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 8), 'call_assignment_207733')
        # Assigning a type to the variable 'xmin' (line 1416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 8), 'xmin', call_assignment_207733_211107)
        
        # Assigning a Call to a Name (line 1416):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1416, 8), 'int')
        # Processing the call keyword arguments
        kwargs_211111 = {}
        # Getting the type of 'call_assignment_207732' (line 1416)
        call_assignment_207732_211108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 8), 'call_assignment_207732', False)
        # Obtaining the member '__getitem__' of a type (line 1416)
        getitem___211109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 8), call_assignment_207732_211108, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211112 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211109, *[int_211110], **kwargs_211111)
        
        # Assigning a type to the variable 'call_assignment_207734' (line 1416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 8), 'call_assignment_207734', getitem___call_result_211112)
        
        # Assigning a Name to a Name (line 1416):
        # Getting the type of 'call_assignment_207734' (line 1416)
        call_assignment_207734_211113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 8), 'call_assignment_207734')
        # Assigning a type to the variable 'xmax' (line 1416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 14), 'xmax', call_assignment_207734_211113)
        
        # Assigning a Call to a Tuple (line 1417):
        
        # Assigning a Call to a Name:
        
        # Call to get_ybound(...): (line 1417)
        # Processing the call keyword arguments (line 1417)
        kwargs_211116 = {}
        # Getting the type of 'self' (line 1417)
        self_211114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 21), 'self', False)
        # Obtaining the member 'get_ybound' of a type (line 1417)
        get_ybound_211115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 21), self_211114, 'get_ybound')
        # Calling get_ybound(args, kwargs) (line 1417)
        get_ybound_call_result_211117 = invoke(stypy.reporting.localization.Localization(__file__, 1417, 21), get_ybound_211115, *[], **kwargs_211116)
        
        # Assigning a type to the variable 'call_assignment_207735' (line 1417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'call_assignment_207735', get_ybound_call_result_211117)
        
        # Assigning a Call to a Name (line 1417):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1417, 8), 'int')
        # Processing the call keyword arguments
        kwargs_211121 = {}
        # Getting the type of 'call_assignment_207735' (line 1417)
        call_assignment_207735_211118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'call_assignment_207735', False)
        # Obtaining the member '__getitem__' of a type (line 1417)
        getitem___211119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 8), call_assignment_207735_211118, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211122 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211119, *[int_211120], **kwargs_211121)
        
        # Assigning a type to the variable 'call_assignment_207736' (line 1417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'call_assignment_207736', getitem___call_result_211122)
        
        # Assigning a Name to a Name (line 1417):
        # Getting the type of 'call_assignment_207736' (line 1417)
        call_assignment_207736_211123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'call_assignment_207736')
        # Assigning a type to the variable 'ymin' (line 1417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'ymin', call_assignment_207736_211123)
        
        # Assigning a Call to a Name (line 1417):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1417, 8), 'int')
        # Processing the call keyword arguments
        kwargs_211127 = {}
        # Getting the type of 'call_assignment_207735' (line 1417)
        call_assignment_207735_211124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'call_assignment_207735', False)
        # Obtaining the member '__getitem__' of a type (line 1417)
        getitem___211125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 8), call_assignment_207735_211124, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211128 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211125, *[int_211126], **kwargs_211127)
        
        # Assigning a type to the variable 'call_assignment_207737' (line 1417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'call_assignment_207737', getitem___call_result_211128)
        
        # Assigning a Name to a Name (line 1417):
        # Getting the type of 'call_assignment_207737' (line 1417)
        call_assignment_207737_211129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'call_assignment_207737')
        # Assigning a type to the variable 'ymax' (line 1417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 14), 'ymax', call_assignment_207737_211129)
        
        
        # Getting the type of 'aspect_scale_mode' (line 1419)
        aspect_scale_mode_211130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 11), 'aspect_scale_mode')
        unicode_211131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1419, 32), 'unicode', u'log')
        # Applying the binary operator '==' (line 1419)
        result_eq_211132 = python_operator(stypy.reporting.localization.Localization(__file__, 1419, 11), '==', aspect_scale_mode_211130, unicode_211131)
        
        # Testing the type of an if condition (line 1419)
        if_condition_211133 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1419, 8), result_eq_211132)
        # Assigning a type to the variable 'if_condition_211133' (line 1419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1419, 8), 'if_condition_211133', if_condition_211133)
        # SSA begins for if statement (line 1419)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1420):
        
        # Assigning a Call to a Name (line 1420):
        
        # Call to log10(...): (line 1420)
        # Processing the call arguments (line 1420)
        # Getting the type of 'xmin' (line 1420)
        xmin_211136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 36), 'xmin', False)
        # Processing the call keyword arguments (line 1420)
        kwargs_211137 = {}
        # Getting the type of 'math' (line 1420)
        math_211134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 25), 'math', False)
        # Obtaining the member 'log10' of a type (line 1420)
        log10_211135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 25), math_211134, 'log10')
        # Calling log10(args, kwargs) (line 1420)
        log10_call_result_211138 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 25), log10_211135, *[xmin_211136], **kwargs_211137)
        
        # Assigning a type to the variable 'tuple_assignment_207738' (line 1420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1420, 12), 'tuple_assignment_207738', log10_call_result_211138)
        
        # Assigning a Call to a Name (line 1420):
        
        # Call to log10(...): (line 1420)
        # Processing the call arguments (line 1420)
        # Getting the type of 'xmax' (line 1420)
        xmax_211141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 54), 'xmax', False)
        # Processing the call keyword arguments (line 1420)
        kwargs_211142 = {}
        # Getting the type of 'math' (line 1420)
        math_211139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 43), 'math', False)
        # Obtaining the member 'log10' of a type (line 1420)
        log10_211140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 43), math_211139, 'log10')
        # Calling log10(args, kwargs) (line 1420)
        log10_call_result_211143 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 43), log10_211140, *[xmax_211141], **kwargs_211142)
        
        # Assigning a type to the variable 'tuple_assignment_207739' (line 1420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1420, 12), 'tuple_assignment_207739', log10_call_result_211143)
        
        # Assigning a Name to a Name (line 1420):
        # Getting the type of 'tuple_assignment_207738' (line 1420)
        tuple_assignment_207738_211144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 12), 'tuple_assignment_207738')
        # Assigning a type to the variable 'xmin' (line 1420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1420, 12), 'xmin', tuple_assignment_207738_211144)
        
        # Assigning a Name to a Name (line 1420):
        # Getting the type of 'tuple_assignment_207739' (line 1420)
        tuple_assignment_207739_211145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 12), 'tuple_assignment_207739')
        # Assigning a type to the variable 'xmax' (line 1420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1420, 18), 'xmax', tuple_assignment_207739_211145)
        
        # Assigning a Tuple to a Tuple (line 1421):
        
        # Assigning a Call to a Name (line 1421):
        
        # Call to log10(...): (line 1421)
        # Processing the call arguments (line 1421)
        # Getting the type of 'ymin' (line 1421)
        ymin_211148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 36), 'ymin', False)
        # Processing the call keyword arguments (line 1421)
        kwargs_211149 = {}
        # Getting the type of 'math' (line 1421)
        math_211146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 25), 'math', False)
        # Obtaining the member 'log10' of a type (line 1421)
        log10_211147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1421, 25), math_211146, 'log10')
        # Calling log10(args, kwargs) (line 1421)
        log10_call_result_211150 = invoke(stypy.reporting.localization.Localization(__file__, 1421, 25), log10_211147, *[ymin_211148], **kwargs_211149)
        
        # Assigning a type to the variable 'tuple_assignment_207740' (line 1421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 12), 'tuple_assignment_207740', log10_call_result_211150)
        
        # Assigning a Call to a Name (line 1421):
        
        # Call to log10(...): (line 1421)
        # Processing the call arguments (line 1421)
        # Getting the type of 'ymax' (line 1421)
        ymax_211153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 54), 'ymax', False)
        # Processing the call keyword arguments (line 1421)
        kwargs_211154 = {}
        # Getting the type of 'math' (line 1421)
        math_211151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 43), 'math', False)
        # Obtaining the member 'log10' of a type (line 1421)
        log10_211152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1421, 43), math_211151, 'log10')
        # Calling log10(args, kwargs) (line 1421)
        log10_call_result_211155 = invoke(stypy.reporting.localization.Localization(__file__, 1421, 43), log10_211152, *[ymax_211153], **kwargs_211154)
        
        # Assigning a type to the variable 'tuple_assignment_207741' (line 1421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 12), 'tuple_assignment_207741', log10_call_result_211155)
        
        # Assigning a Name to a Name (line 1421):
        # Getting the type of 'tuple_assignment_207740' (line 1421)
        tuple_assignment_207740_211156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 12), 'tuple_assignment_207740')
        # Assigning a type to the variable 'ymin' (line 1421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 12), 'ymin', tuple_assignment_207740_211156)
        
        # Assigning a Name to a Name (line 1421):
        # Getting the type of 'tuple_assignment_207741' (line 1421)
        tuple_assignment_207741_211157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 12), 'tuple_assignment_207741')
        # Assigning a type to the variable 'ymax' (line 1421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 18), 'ymax', tuple_assignment_207741_211157)
        # SSA join for if statement (line 1419)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1423):
        
        # Assigning a Call to a Name (line 1423):
        
        # Call to max(...): (line 1423)
        # Processing the call arguments (line 1423)
        
        # Call to abs(...): (line 1423)
        # Processing the call arguments (line 1423)
        # Getting the type of 'xmax' (line 1423)
        xmax_211160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 24), 'xmax', False)
        # Getting the type of 'xmin' (line 1423)
        xmin_211161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 31), 'xmin', False)
        # Applying the binary operator '-' (line 1423)
        result_sub_211162 = python_operator(stypy.reporting.localization.Localization(__file__, 1423, 24), '-', xmax_211160, xmin_211161)
        
        # Processing the call keyword arguments (line 1423)
        kwargs_211163 = {}
        # Getting the type of 'abs' (line 1423)
        abs_211159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 20), 'abs', False)
        # Calling abs(args, kwargs) (line 1423)
        abs_call_result_211164 = invoke(stypy.reporting.localization.Localization(__file__, 1423, 20), abs_211159, *[result_sub_211162], **kwargs_211163)
        
        float_211165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1423, 38), 'float')
        # Processing the call keyword arguments (line 1423)
        kwargs_211166 = {}
        # Getting the type of 'max' (line 1423)
        max_211158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 16), 'max', False)
        # Calling max(args, kwargs) (line 1423)
        max_call_result_211167 = invoke(stypy.reporting.localization.Localization(__file__, 1423, 16), max_211158, *[abs_call_result_211164, float_211165], **kwargs_211166)
        
        # Assigning a type to the variable 'xsize' (line 1423)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1423, 8), 'xsize', max_call_result_211167)
        
        # Assigning a Call to a Name (line 1424):
        
        # Assigning a Call to a Name (line 1424):
        
        # Call to max(...): (line 1424)
        # Processing the call arguments (line 1424)
        
        # Call to abs(...): (line 1424)
        # Processing the call arguments (line 1424)
        # Getting the type of 'ymax' (line 1424)
        ymax_211170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 24), 'ymax', False)
        # Getting the type of 'ymin' (line 1424)
        ymin_211171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 31), 'ymin', False)
        # Applying the binary operator '-' (line 1424)
        result_sub_211172 = python_operator(stypy.reporting.localization.Localization(__file__, 1424, 24), '-', ymax_211170, ymin_211171)
        
        # Processing the call keyword arguments (line 1424)
        kwargs_211173 = {}
        # Getting the type of 'abs' (line 1424)
        abs_211169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 20), 'abs', False)
        # Calling abs(args, kwargs) (line 1424)
        abs_call_result_211174 = invoke(stypy.reporting.localization.Localization(__file__, 1424, 20), abs_211169, *[result_sub_211172], **kwargs_211173)
        
        float_211175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1424, 38), 'float')
        # Processing the call keyword arguments (line 1424)
        kwargs_211176 = {}
        # Getting the type of 'max' (line 1424)
        max_211168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 16), 'max', False)
        # Calling max(args, kwargs) (line 1424)
        max_call_result_211177 = invoke(stypy.reporting.localization.Localization(__file__, 1424, 16), max_211168, *[abs_call_result_211174, float_211175], **kwargs_211176)
        
        # Assigning a type to the variable 'ysize' (line 1424)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1424, 8), 'ysize', max_call_result_211177)
        
        # Assigning a Attribute to a Tuple (line 1426):
        
        # Assigning a Subscript to a Name (line 1426):
        
        # Obtaining the type of the subscript
        int_211178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1426, 8), 'int')
        # Getting the type of 'position' (line 1426)
        position_211179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 21), 'position')
        # Obtaining the member 'bounds' of a type (line 1426)
        bounds_211180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 21), position_211179, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1426)
        getitem___211181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 8), bounds_211180, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1426)
        subscript_call_result_211182 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 8), getitem___211181, int_211178)
        
        # Assigning a type to the variable 'tuple_var_assignment_207742' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'tuple_var_assignment_207742', subscript_call_result_211182)
        
        # Assigning a Subscript to a Name (line 1426):
        
        # Obtaining the type of the subscript
        int_211183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1426, 8), 'int')
        # Getting the type of 'position' (line 1426)
        position_211184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 21), 'position')
        # Obtaining the member 'bounds' of a type (line 1426)
        bounds_211185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 21), position_211184, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1426)
        getitem___211186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 8), bounds_211185, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1426)
        subscript_call_result_211187 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 8), getitem___211186, int_211183)
        
        # Assigning a type to the variable 'tuple_var_assignment_207743' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'tuple_var_assignment_207743', subscript_call_result_211187)
        
        # Assigning a Subscript to a Name (line 1426):
        
        # Obtaining the type of the subscript
        int_211188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1426, 8), 'int')
        # Getting the type of 'position' (line 1426)
        position_211189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 21), 'position')
        # Obtaining the member 'bounds' of a type (line 1426)
        bounds_211190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 21), position_211189, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1426)
        getitem___211191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 8), bounds_211190, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1426)
        subscript_call_result_211192 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 8), getitem___211191, int_211188)
        
        # Assigning a type to the variable 'tuple_var_assignment_207744' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'tuple_var_assignment_207744', subscript_call_result_211192)
        
        # Assigning a Subscript to a Name (line 1426):
        
        # Obtaining the type of the subscript
        int_211193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1426, 8), 'int')
        # Getting the type of 'position' (line 1426)
        position_211194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 21), 'position')
        # Obtaining the member 'bounds' of a type (line 1426)
        bounds_211195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 21), position_211194, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1426)
        getitem___211196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 8), bounds_211195, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1426)
        subscript_call_result_211197 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 8), getitem___211196, int_211193)
        
        # Assigning a type to the variable 'tuple_var_assignment_207745' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'tuple_var_assignment_207745', subscript_call_result_211197)
        
        # Assigning a Name to a Name (line 1426):
        # Getting the type of 'tuple_var_assignment_207742' (line 1426)
        tuple_var_assignment_207742_211198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'tuple_var_assignment_207742')
        # Assigning a type to the variable 'l' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'l', tuple_var_assignment_207742_211198)
        
        # Assigning a Name to a Name (line 1426):
        # Getting the type of 'tuple_var_assignment_207743' (line 1426)
        tuple_var_assignment_207743_211199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'tuple_var_assignment_207743')
        # Assigning a type to the variable 'b' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 11), 'b', tuple_var_assignment_207743_211199)
        
        # Assigning a Name to a Name (line 1426):
        # Getting the type of 'tuple_var_assignment_207744' (line 1426)
        tuple_var_assignment_207744_211200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'tuple_var_assignment_207744')
        # Assigning a type to the variable 'w' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 14), 'w', tuple_var_assignment_207744_211200)
        
        # Assigning a Name to a Name (line 1426):
        # Getting the type of 'tuple_var_assignment_207745' (line 1426)
        tuple_var_assignment_207745_211201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'tuple_var_assignment_207745')
        # Assigning a type to the variable 'h' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 17), 'h', tuple_var_assignment_207745_211201)
        
        # Assigning a BinOp to a Name (line 1427):
        
        # Assigning a BinOp to a Name (line 1427):
        # Getting the type of 'fig_aspect' (line 1427)
        fig_aspect_211202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 21), 'fig_aspect')
        # Getting the type of 'h' (line 1427)
        h_211203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 35), 'h')
        # Getting the type of 'w' (line 1427)
        w_211204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 39), 'w')
        # Applying the binary operator 'div' (line 1427)
        result_div_211205 = python_operator(stypy.reporting.localization.Localization(__file__, 1427, 35), 'div', h_211203, w_211204)
        
        # Applying the binary operator '*' (line 1427)
        result_mul_211206 = python_operator(stypy.reporting.localization.Localization(__file__, 1427, 21), '*', fig_aspect_211202, result_div_211205)
        
        # Assigning a type to the variable 'box_aspect' (line 1427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1427, 8), 'box_aspect', result_mul_211206)
        
        # Assigning a BinOp to a Name (line 1428):
        
        # Assigning a BinOp to a Name (line 1428):
        # Getting the type of 'box_aspect' (line 1428)
        box_aspect_211207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 21), 'box_aspect')
        # Getting the type of 'A' (line 1428)
        A_211208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 34), 'A')
        # Applying the binary operator 'div' (line 1428)
        result_div_211209 = python_operator(stypy.reporting.localization.Localization(__file__, 1428, 21), 'div', box_aspect_211207, A_211208)
        
        # Assigning a type to the variable 'data_ratio' (line 1428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1428, 8), 'data_ratio', result_div_211209)
        
        # Assigning a BinOp to a Name (line 1430):
        
        # Assigning a BinOp to a Name (line 1430):
        # Getting the type of 'data_ratio' (line 1430)
        data_ratio_211210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 22), 'data_ratio')
        # Getting the type of 'xsize' (line 1430)
        xsize_211211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 35), 'xsize')
        # Applying the binary operator '*' (line 1430)
        result_mul_211212 = python_operator(stypy.reporting.localization.Localization(__file__, 1430, 22), '*', data_ratio_211210, xsize_211211)
        
        # Getting the type of 'ysize' (line 1430)
        ysize_211213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 43), 'ysize')
        # Applying the binary operator 'div' (line 1430)
        result_div_211214 = python_operator(stypy.reporting.localization.Localization(__file__, 1430, 41), 'div', result_mul_211212, ysize_211213)
        
        float_211215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, 51), 'float')
        # Applying the binary operator '-' (line 1430)
        result_sub_211216 = python_operator(stypy.reporting.localization.Localization(__file__, 1430, 22), '-', result_div_211214, float_211215)
        
        # Assigning a type to the variable 'y_expander' (line 1430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1430, 8), 'y_expander', result_sub_211216)
        
        
        
        # Call to abs(...): (line 1432)
        # Processing the call arguments (line 1432)
        # Getting the type of 'y_expander' (line 1432)
        y_expander_211218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 15), 'y_expander', False)
        # Processing the call keyword arguments (line 1432)
        kwargs_211219 = {}
        # Getting the type of 'abs' (line 1432)
        abs_211217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 11), 'abs', False)
        # Calling abs(args, kwargs) (line 1432)
        abs_call_result_211220 = invoke(stypy.reporting.localization.Localization(__file__, 1432, 11), abs_211217, *[y_expander_211218], **kwargs_211219)
        
        float_211221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1432, 29), 'float')
        # Applying the binary operator '<' (line 1432)
        result_lt_211222 = python_operator(stypy.reporting.localization.Localization(__file__, 1432, 11), '<', abs_call_result_211220, float_211221)
        
        # Testing the type of an if condition (line 1432)
        if_condition_211223 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1432, 8), result_lt_211222)
        # Assigning a type to the variable 'if_condition_211223' (line 1432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1432, 8), 'if_condition_211223', if_condition_211223)
        # SSA begins for if statement (line 1432)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1432)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'aspect_scale_mode' (line 1435)
        aspect_scale_mode_211224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 11), 'aspect_scale_mode')
        unicode_211225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1435, 32), 'unicode', u'log')
        # Applying the binary operator '==' (line 1435)
        result_eq_211226 = python_operator(stypy.reporting.localization.Localization(__file__, 1435, 11), '==', aspect_scale_mode_211224, unicode_211225)
        
        # Testing the type of an if condition (line 1435)
        if_condition_211227 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1435, 8), result_eq_211226)
        # Assigning a type to the variable 'if_condition_211227' (line 1435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1435, 8), 'if_condition_211227', if_condition_211227)
        # SSA begins for if statement (line 1435)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1436):
        
        # Assigning a Attribute to a Name (line 1436):
        # Getting the type of 'self' (line 1436)
        self_211228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 17), 'self')
        # Obtaining the member 'dataLim' of a type (line 1436)
        dataLim_211229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1436, 17), self_211228, 'dataLim')
        # Assigning a type to the variable 'dL' (line 1436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1436, 12), 'dL', dataLim_211229)
        
        # Assigning a BinOp to a Name (line 1437):
        
        # Assigning a BinOp to a Name (line 1437):
        
        # Call to log10(...): (line 1437)
        # Processing the call arguments (line 1437)
        # Getting the type of 'dL' (line 1437)
        dL_211232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 34), 'dL', False)
        # Obtaining the member 'x1' of a type (line 1437)
        x1_211233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 34), dL_211232, 'x1')
        # Processing the call keyword arguments (line 1437)
        kwargs_211234 = {}
        # Getting the type of 'math' (line 1437)
        math_211230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 23), 'math', False)
        # Obtaining the member 'log10' of a type (line 1437)
        log10_211231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 23), math_211230, 'log10')
        # Calling log10(args, kwargs) (line 1437)
        log10_call_result_211235 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 23), log10_211231, *[x1_211233], **kwargs_211234)
        
        
        # Call to log10(...): (line 1437)
        # Processing the call arguments (line 1437)
        # Getting the type of 'dL' (line 1437)
        dL_211238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 54), 'dL', False)
        # Obtaining the member 'x0' of a type (line 1437)
        x0_211239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 54), dL_211238, 'x0')
        # Processing the call keyword arguments (line 1437)
        kwargs_211240 = {}
        # Getting the type of 'math' (line 1437)
        math_211236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 43), 'math', False)
        # Obtaining the member 'log10' of a type (line 1437)
        log10_211237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 43), math_211236, 'log10')
        # Calling log10(args, kwargs) (line 1437)
        log10_call_result_211241 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 43), log10_211237, *[x0_211239], **kwargs_211240)
        
        # Applying the binary operator '-' (line 1437)
        result_sub_211242 = python_operator(stypy.reporting.localization.Localization(__file__, 1437, 23), '-', log10_call_result_211235, log10_call_result_211241)
        
        # Assigning a type to the variable 'dL_width' (line 1437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 12), 'dL_width', result_sub_211242)
        
        # Assigning a BinOp to a Name (line 1438):
        
        # Assigning a BinOp to a Name (line 1438):
        
        # Call to log10(...): (line 1438)
        # Processing the call arguments (line 1438)
        # Getting the type of 'dL' (line 1438)
        dL_211245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 35), 'dL', False)
        # Obtaining the member 'y1' of a type (line 1438)
        y1_211246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1438, 35), dL_211245, 'y1')
        # Processing the call keyword arguments (line 1438)
        kwargs_211247 = {}
        # Getting the type of 'math' (line 1438)
        math_211243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 24), 'math', False)
        # Obtaining the member 'log10' of a type (line 1438)
        log10_211244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1438, 24), math_211243, 'log10')
        # Calling log10(args, kwargs) (line 1438)
        log10_call_result_211248 = invoke(stypy.reporting.localization.Localization(__file__, 1438, 24), log10_211244, *[y1_211246], **kwargs_211247)
        
        
        # Call to log10(...): (line 1438)
        # Processing the call arguments (line 1438)
        # Getting the type of 'dL' (line 1438)
        dL_211251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 55), 'dL', False)
        # Obtaining the member 'y0' of a type (line 1438)
        y0_211252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1438, 55), dL_211251, 'y0')
        # Processing the call keyword arguments (line 1438)
        kwargs_211253 = {}
        # Getting the type of 'math' (line 1438)
        math_211249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 44), 'math', False)
        # Obtaining the member 'log10' of a type (line 1438)
        log10_211250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1438, 44), math_211249, 'log10')
        # Calling log10(args, kwargs) (line 1438)
        log10_call_result_211254 = invoke(stypy.reporting.localization.Localization(__file__, 1438, 44), log10_211250, *[y0_211252], **kwargs_211253)
        
        # Applying the binary operator '-' (line 1438)
        result_sub_211255 = python_operator(stypy.reporting.localization.Localization(__file__, 1438, 24), '-', log10_call_result_211248, log10_call_result_211254)
        
        # Assigning a type to the variable 'dL_height' (line 1438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1438, 12), 'dL_height', result_sub_211255)
        
        # Assigning a BinOp to a Name (line 1439):
        
        # Assigning a BinOp to a Name (line 1439):
        float_211256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1439, 17), 'float')
        # Getting the type of 'dL_width' (line 1439)
        dL_width_211257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 24), 'dL_width')
        # Applying the binary operator '*' (line 1439)
        result_mul_211258 = python_operator(stypy.reporting.localization.Localization(__file__, 1439, 17), '*', float_211256, dL_width_211257)
        
        # Assigning a type to the variable 'xr' (line 1439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 12), 'xr', result_mul_211258)
        
        # Assigning a BinOp to a Name (line 1440):
        
        # Assigning a BinOp to a Name (line 1440):
        float_211259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1440, 17), 'float')
        # Getting the type of 'dL_height' (line 1440)
        dL_height_211260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 24), 'dL_height')
        # Applying the binary operator '*' (line 1440)
        result_mul_211261 = python_operator(stypy.reporting.localization.Localization(__file__, 1440, 17), '*', float_211259, dL_height_211260)
        
        # Assigning a type to the variable 'yr' (line 1440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 12), 'yr', result_mul_211261)
        # SSA branch for the else part of an if statement (line 1435)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 1442):
        
        # Assigning a Attribute to a Name (line 1442):
        # Getting the type of 'self' (line 1442)
        self_211262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 17), 'self')
        # Obtaining the member 'dataLim' of a type (line 1442)
        dataLim_211263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1442, 17), self_211262, 'dataLim')
        # Assigning a type to the variable 'dL' (line 1442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1442, 12), 'dL', dataLim_211263)
        
        # Assigning a BinOp to a Name (line 1443):
        
        # Assigning a BinOp to a Name (line 1443):
        float_211264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1443, 17), 'float')
        # Getting the type of 'dL' (line 1443)
        dL_211265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 24), 'dL')
        # Obtaining the member 'width' of a type (line 1443)
        width_211266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1443, 24), dL_211265, 'width')
        # Applying the binary operator '*' (line 1443)
        result_mul_211267 = python_operator(stypy.reporting.localization.Localization(__file__, 1443, 17), '*', float_211264, width_211266)
        
        # Assigning a type to the variable 'xr' (line 1443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1443, 12), 'xr', result_mul_211267)
        
        # Assigning a BinOp to a Name (line 1444):
        
        # Assigning a BinOp to a Name (line 1444):
        float_211268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1444, 17), 'float')
        # Getting the type of 'dL' (line 1444)
        dL_211269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 24), 'dL')
        # Obtaining the member 'height' of a type (line 1444)
        height_211270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 24), dL_211269, 'height')
        # Applying the binary operator '*' (line 1444)
        result_mul_211271 = python_operator(stypy.reporting.localization.Localization(__file__, 1444, 17), '*', float_211268, height_211270)
        
        # Assigning a type to the variable 'yr' (line 1444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 12), 'yr', result_mul_211271)
        # SSA join for if statement (line 1435)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1446):
        
        # Assigning a BinOp to a Name (line 1446):
        # Getting the type of 'xsize' (line 1446)
        xsize_211272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 16), 'xsize')
        # Getting the type of 'xr' (line 1446)
        xr_211273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 24), 'xr')
        # Applying the binary operator '-' (line 1446)
        result_sub_211274 = python_operator(stypy.reporting.localization.Localization(__file__, 1446, 16), '-', xsize_211272, xr_211273)
        
        # Assigning a type to the variable 'xmarg' (line 1446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 8), 'xmarg', result_sub_211274)
        
        # Assigning a BinOp to a Name (line 1447):
        
        # Assigning a BinOp to a Name (line 1447):
        # Getting the type of 'ysize' (line 1447)
        ysize_211275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 16), 'ysize')
        # Getting the type of 'yr' (line 1447)
        yr_211276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 24), 'yr')
        # Applying the binary operator '-' (line 1447)
        result_sub_211277 = python_operator(stypy.reporting.localization.Localization(__file__, 1447, 16), '-', ysize_211275, yr_211276)
        
        # Assigning a type to the variable 'ymarg' (line 1447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 8), 'ymarg', result_sub_211277)
        
        # Assigning a BinOp to a Name (line 1448):
        
        # Assigning a BinOp to a Name (line 1448):
        # Getting the type of 'data_ratio' (line 1448)
        data_ratio_211278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 16), 'data_ratio')
        # Getting the type of 'xsize' (line 1448)
        xsize_211279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 29), 'xsize')
        # Applying the binary operator '*' (line 1448)
        result_mul_211280 = python_operator(stypy.reporting.localization.Localization(__file__, 1448, 16), '*', data_ratio_211278, xsize_211279)
        
        # Assigning a type to the variable 'Ysize' (line 1448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 8), 'Ysize', result_mul_211280)
        
        # Assigning a BinOp to a Name (line 1449):
        
        # Assigning a BinOp to a Name (line 1449):
        # Getting the type of 'ysize' (line 1449)
        ysize_211281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 16), 'ysize')
        # Getting the type of 'data_ratio' (line 1449)
        data_ratio_211282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 24), 'data_ratio')
        # Applying the binary operator 'div' (line 1449)
        result_div_211283 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 16), 'div', ysize_211281, data_ratio_211282)
        
        # Assigning a type to the variable 'Xsize' (line 1449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1449, 8), 'Xsize', result_div_211283)
        
        # Assigning a BinOp to a Name (line 1450):
        
        # Assigning a BinOp to a Name (line 1450):
        # Getting the type of 'Xsize' (line 1450)
        Xsize_211284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 16), 'Xsize')
        # Getting the type of 'xr' (line 1450)
        xr_211285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 24), 'xr')
        # Applying the binary operator '-' (line 1450)
        result_sub_211286 = python_operator(stypy.reporting.localization.Localization(__file__, 1450, 16), '-', Xsize_211284, xr_211285)
        
        # Assigning a type to the variable 'Xmarg' (line 1450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1450, 8), 'Xmarg', result_sub_211286)
        
        # Assigning a BinOp to a Name (line 1451):
        
        # Assigning a BinOp to a Name (line 1451):
        # Getting the type of 'Ysize' (line 1451)
        Ysize_211287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 16), 'Ysize')
        # Getting the type of 'yr' (line 1451)
        yr_211288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 24), 'yr')
        # Applying the binary operator '-' (line 1451)
        result_sub_211289 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 16), '-', Ysize_211287, yr_211288)
        
        # Assigning a type to the variable 'Ymarg' (line 1451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1451, 8), 'Ymarg', result_sub_211289)
        
        # Assigning a Num to a Name (line 1454):
        
        # Assigning a Num to a Name (line 1454):
        int_211290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1454, 13), 'int')
        # Assigning a type to the variable 'xm' (line 1454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1454, 8), 'xm', int_211290)
        
        # Assigning a Num to a Name (line 1455):
        
        # Assigning a Num to a Name (line 1455):
        int_211291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1455, 13), 'int')
        # Assigning a type to the variable 'ym' (line 1455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 8), 'ym', int_211291)
        
        # Assigning a BoolOp to a Name (line 1457):
        
        # Assigning a BoolOp to a Name (line 1457):
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1457)
        self_211292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 19), 'self')
        # Getting the type of 'self' (line 1457)
        self_211293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 27), 'self')
        # Obtaining the member '_shared_y_axes' of a type (line 1457)
        _shared_y_axes_211294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1457, 27), self_211293, '_shared_y_axes')
        # Applying the binary operator 'in' (line 1457)
        result_contains_211295 = python_operator(stypy.reporting.localization.Localization(__file__, 1457, 19), 'in', self_211292, _shared_y_axes_211294)
        
        
        # Getting the type of 'self' (line 1458)
        self_211296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 19), 'self')
        # Getting the type of 'self' (line 1458)
        self_211297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 31), 'self')
        # Obtaining the member '_shared_x_axes' of a type (line 1458)
        _shared_x_axes_211298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 31), self_211297, '_shared_x_axes')
        # Applying the binary operator 'notin' (line 1458)
        result_contains_211299 = python_operator(stypy.reporting.localization.Localization(__file__, 1458, 19), 'notin', self_211296, _shared_x_axes_211298)
        
        # Applying the binary operator 'and' (line 1457)
        result_and_keyword_211300 = python_operator(stypy.reporting.localization.Localization(__file__, 1457, 19), 'and', result_contains_211295, result_contains_211299)
        
        # Assigning a type to the variable 'changex' (line 1457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1457, 8), 'changex', result_and_keyword_211300)
        
        # Assigning a BoolOp to a Name (line 1459):
        
        # Assigning a BoolOp to a Name (line 1459):
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1459)
        self_211301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 19), 'self')
        # Getting the type of 'self' (line 1459)
        self_211302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 27), 'self')
        # Obtaining the member '_shared_x_axes' of a type (line 1459)
        _shared_x_axes_211303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 27), self_211302, '_shared_x_axes')
        # Applying the binary operator 'in' (line 1459)
        result_contains_211304 = python_operator(stypy.reporting.localization.Localization(__file__, 1459, 19), 'in', self_211301, _shared_x_axes_211303)
        
        
        # Getting the type of 'self' (line 1460)
        self_211305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 19), 'self')
        # Getting the type of 'self' (line 1460)
        self_211306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 31), 'self')
        # Obtaining the member '_shared_y_axes' of a type (line 1460)
        _shared_y_axes_211307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 31), self_211306, '_shared_y_axes')
        # Applying the binary operator 'notin' (line 1460)
        result_contains_211308 = python_operator(stypy.reporting.localization.Localization(__file__, 1460, 19), 'notin', self_211305, _shared_y_axes_211307)
        
        # Applying the binary operator 'and' (line 1459)
        result_and_keyword_211309 = python_operator(stypy.reporting.localization.Localization(__file__, 1459, 19), 'and', result_contains_211304, result_contains_211308)
        
        # Assigning a type to the variable 'changey' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'changey', result_and_keyword_211309)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'changex' (line 1461)
        changex_211310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 11), 'changex')
        # Getting the type of 'changey' (line 1461)
        changey_211311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 23), 'changey')
        # Applying the binary operator 'and' (line 1461)
        result_and_keyword_211312 = python_operator(stypy.reporting.localization.Localization(__file__, 1461, 11), 'and', changex_211310, changey_211311)
        
        # Testing the type of an if condition (line 1461)
        if_condition_211313 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1461, 8), result_and_keyword_211312)
        # Assigning a type to the variable 'if_condition_211313' (line 1461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1461, 8), 'if_condition_211313', if_condition_211313)
        # SSA begins for if statement (line 1461)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1462)
        # Processing the call arguments (line 1462)
        unicode_211316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1462, 26), 'unicode', u"adjustable='datalim' cannot work with shared x and y axes")
        # Processing the call keyword arguments (line 1462)
        kwargs_211317 = {}
        # Getting the type of 'warnings' (line 1462)
        warnings_211314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1462)
        warn_211315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1462, 12), warnings_211314, 'warn')
        # Calling warn(args, kwargs) (line 1462)
        warn_call_result_211318 = invoke(stypy.reporting.localization.Localization(__file__, 1462, 12), warn_211315, *[unicode_211316], **kwargs_211317)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1464, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1461)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'changex' (line 1465)
        changex_211319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 11), 'changex')
        # Testing the type of an if condition (line 1465)
        if_condition_211320 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1465, 8), changex_211319)
        # Assigning a type to the variable 'if_condition_211320' (line 1465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1465, 8), 'if_condition_211320', if_condition_211320)
        # SSA begins for if statement (line 1465)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1466):
        
        # Assigning a Name to a Name (line 1466):
        # Getting the type of 'False' (line 1466)
        False_211321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 23), 'False')
        # Assigning a type to the variable 'adjust_y' (line 1466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1466, 12), 'adjust_y', False_211321)
        # SSA branch for the else part of an if statement (line 1465)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'xmarg' (line 1468)
        xmarg_211322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 15), 'xmarg')
        # Getting the type of 'xm' (line 1468)
        xm_211323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 23), 'xm')
        # Applying the binary operator '>' (line 1468)
        result_gt_211324 = python_operator(stypy.reporting.localization.Localization(__file__, 1468, 15), '>', xmarg_211322, xm_211323)
        
        
        # Getting the type of 'ymarg' (line 1468)
        ymarg_211325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 30), 'ymarg')
        # Getting the type of 'ym' (line 1468)
        ym_211326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 38), 'ym')
        # Applying the binary operator '>' (line 1468)
        result_gt_211327 = python_operator(stypy.reporting.localization.Localization(__file__, 1468, 30), '>', ymarg_211325, ym_211326)
        
        # Applying the binary operator 'and' (line 1468)
        result_and_keyword_211328 = python_operator(stypy.reporting.localization.Localization(__file__, 1468, 15), 'and', result_gt_211324, result_gt_211327)
        
        # Testing the type of an if condition (line 1468)
        if_condition_211329 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1468, 12), result_and_keyword_211328)
        # Assigning a type to the variable 'if_condition_211329' (line 1468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1468, 12), 'if_condition_211329', if_condition_211329)
        # SSA begins for if statement (line 1468)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BoolOp to a Name (line 1469):
        
        # Assigning a BoolOp to a Name (line 1469):
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        # Getting the type of 'Ymarg' (line 1469)
        Ymarg_211330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 25), 'Ymarg')
        int_211331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 33), 'int')
        # Applying the binary operator '>' (line 1469)
        result_gt_211332 = python_operator(stypy.reporting.localization.Localization(__file__, 1469, 25), '>', Ymarg_211330, int_211331)
        
        
        # Getting the type of 'y_expander' (line 1469)
        y_expander_211333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 39), 'y_expander')
        int_211334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 52), 'int')
        # Applying the binary operator '<' (line 1469)
        result_lt_211335 = python_operator(stypy.reporting.localization.Localization(__file__, 1469, 39), '<', y_expander_211333, int_211334)
        
        # Applying the binary operator 'and' (line 1469)
        result_and_keyword_211336 = python_operator(stypy.reporting.localization.Localization(__file__, 1469, 25), 'and', result_gt_211332, result_lt_211335)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'Xmarg' (line 1470)
        Xmarg_211337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 25), 'Xmarg')
        int_211338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 33), 'int')
        # Applying the binary operator '<' (line 1470)
        result_lt_211339 = python_operator(stypy.reporting.localization.Localization(__file__, 1470, 25), '<', Xmarg_211337, int_211338)
        
        
        # Getting the type of 'y_expander' (line 1470)
        y_expander_211340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 39), 'y_expander')
        int_211341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 52), 'int')
        # Applying the binary operator '>' (line 1470)
        result_gt_211342 = python_operator(stypy.reporting.localization.Localization(__file__, 1470, 39), '>', y_expander_211340, int_211341)
        
        # Applying the binary operator 'and' (line 1470)
        result_and_keyword_211343 = python_operator(stypy.reporting.localization.Localization(__file__, 1470, 25), 'and', result_lt_211339, result_gt_211342)
        
        # Applying the binary operator 'or' (line 1469)
        result_or_keyword_211344 = python_operator(stypy.reporting.localization.Localization(__file__, 1469, 24), 'or', result_and_keyword_211336, result_and_keyword_211343)
        
        # Assigning a type to the variable 'adjy' (line 1469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1469, 16), 'adjy', result_or_keyword_211344)
        # SSA branch for the else part of an if statement (line 1468)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Compare to a Name (line 1472):
        
        # Assigning a Compare to a Name (line 1472):
        
        # Getting the type of 'y_expander' (line 1472)
        y_expander_211345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 23), 'y_expander')
        int_211346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 36), 'int')
        # Applying the binary operator '>' (line 1472)
        result_gt_211347 = python_operator(stypy.reporting.localization.Localization(__file__, 1472, 23), '>', y_expander_211345, int_211346)
        
        # Assigning a type to the variable 'adjy' (line 1472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 16), 'adjy', result_gt_211347)
        # SSA join for if statement (line 1468)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BoolOp to a Name (line 1473):
        
        # Assigning a BoolOp to a Name (line 1473):
        
        # Evaluating a boolean operation
        # Getting the type of 'changey' (line 1473)
        changey_211348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 23), 'changey')
        # Getting the type of 'adjy' (line 1473)
        adjy_211349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 34), 'adjy')
        # Applying the binary operator 'or' (line 1473)
        result_or_keyword_211350 = python_operator(stypy.reporting.localization.Localization(__file__, 1473, 23), 'or', changey_211348, adjy_211349)
        
        # Assigning a type to the variable 'adjust_y' (line 1473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 12), 'adjust_y', result_or_keyword_211350)
        # SSA join for if statement (line 1465)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'adjust_y' (line 1474)
        adjust_y_211351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 11), 'adjust_y')
        # Testing the type of an if condition (line 1474)
        if_condition_211352 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1474, 8), adjust_y_211351)
        # Assigning a type to the variable 'if_condition_211352' (line 1474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1474, 8), 'if_condition_211352', if_condition_211352)
        # SSA begins for if statement (line 1474)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1475):
        
        # Assigning a BinOp to a Name (line 1475):
        float_211353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1475, 17), 'float')
        # Getting the type of 'ymin' (line 1475)
        ymin_211354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 24), 'ymin')
        # Getting the type of 'ymax' (line 1475)
        ymax_211355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 31), 'ymax')
        # Applying the binary operator '+' (line 1475)
        result_add_211356 = python_operator(stypy.reporting.localization.Localization(__file__, 1475, 24), '+', ymin_211354, ymax_211355)
        
        # Applying the binary operator '*' (line 1475)
        result_mul_211357 = python_operator(stypy.reporting.localization.Localization(__file__, 1475, 17), '*', float_211353, result_add_211356)
        
        # Assigning a type to the variable 'yc' (line 1475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1475, 12), 'yc', result_mul_211357)
        
        # Assigning a BinOp to a Name (line 1476):
        
        # Assigning a BinOp to a Name (line 1476):
        # Getting the type of 'yc' (line 1476)
        yc_211358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 17), 'yc')
        # Getting the type of 'Ysize' (line 1476)
        Ysize_211359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 22), 'Ysize')
        float_211360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1476, 30), 'float')
        # Applying the binary operator 'div' (line 1476)
        result_div_211361 = python_operator(stypy.reporting.localization.Localization(__file__, 1476, 22), 'div', Ysize_211359, float_211360)
        
        # Applying the binary operator '-' (line 1476)
        result_sub_211362 = python_operator(stypy.reporting.localization.Localization(__file__, 1476, 17), '-', yc_211358, result_div_211361)
        
        # Assigning a type to the variable 'y0' (line 1476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1476, 12), 'y0', result_sub_211362)
        
        # Assigning a BinOp to a Name (line 1477):
        
        # Assigning a BinOp to a Name (line 1477):
        # Getting the type of 'yc' (line 1477)
        yc_211363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 17), 'yc')
        # Getting the type of 'Ysize' (line 1477)
        Ysize_211364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 22), 'Ysize')
        float_211365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1477, 30), 'float')
        # Applying the binary operator 'div' (line 1477)
        result_div_211366 = python_operator(stypy.reporting.localization.Localization(__file__, 1477, 22), 'div', Ysize_211364, float_211365)
        
        # Applying the binary operator '+' (line 1477)
        result_add_211367 = python_operator(stypy.reporting.localization.Localization(__file__, 1477, 17), '+', yc_211363, result_div_211366)
        
        # Assigning a type to the variable 'y1' (line 1477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 12), 'y1', result_add_211367)
        
        
        # Getting the type of 'aspect_scale_mode' (line 1478)
        aspect_scale_mode_211368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 15), 'aspect_scale_mode')
        unicode_211369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1478, 36), 'unicode', u'log')
        # Applying the binary operator '==' (line 1478)
        result_eq_211370 = python_operator(stypy.reporting.localization.Localization(__file__, 1478, 15), '==', aspect_scale_mode_211368, unicode_211369)
        
        # Testing the type of an if condition (line 1478)
        if_condition_211371 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1478, 12), result_eq_211370)
        # Assigning a type to the variable 'if_condition_211371' (line 1478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1478, 12), 'if_condition_211371', if_condition_211371)
        # SSA begins for if statement (line 1478)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_ybound(...): (line 1479)
        # Processing the call arguments (line 1479)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1479)
        tuple_211374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1479)
        # Adding element type (line 1479)
        float_211375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 33), 'float')
        # Getting the type of 'y0' (line 1479)
        y0_211376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 40), 'y0', False)
        # Applying the binary operator '**' (line 1479)
        result_pow_211377 = python_operator(stypy.reporting.localization.Localization(__file__, 1479, 33), '**', float_211375, y0_211376)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1479, 33), tuple_211374, result_pow_211377)
        # Adding element type (line 1479)
        float_211378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 44), 'float')
        # Getting the type of 'y1' (line 1479)
        y1_211379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 51), 'y1', False)
        # Applying the binary operator '**' (line 1479)
        result_pow_211380 = python_operator(stypy.reporting.localization.Localization(__file__, 1479, 44), '**', float_211378, y1_211379)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1479, 33), tuple_211374, result_pow_211380)
        
        # Processing the call keyword arguments (line 1479)
        kwargs_211381 = {}
        # Getting the type of 'self' (line 1479)
        self_211372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 16), 'self', False)
        # Obtaining the member 'set_ybound' of a type (line 1479)
        set_ybound_211373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 16), self_211372, 'set_ybound')
        # Calling set_ybound(args, kwargs) (line 1479)
        set_ybound_call_result_211382 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 16), set_ybound_211373, *[tuple_211374], **kwargs_211381)
        
        # SSA branch for the else part of an if statement (line 1478)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_ybound(...): (line 1481)
        # Processing the call arguments (line 1481)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1481)
        tuple_211385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1481, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1481)
        # Adding element type (line 1481)
        # Getting the type of 'y0' (line 1481)
        y0_211386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 33), 'y0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1481, 33), tuple_211385, y0_211386)
        # Adding element type (line 1481)
        # Getting the type of 'y1' (line 1481)
        y1_211387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 37), 'y1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1481, 33), tuple_211385, y1_211387)
        
        # Processing the call keyword arguments (line 1481)
        kwargs_211388 = {}
        # Getting the type of 'self' (line 1481)
        self_211383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 16), 'self', False)
        # Obtaining the member 'set_ybound' of a type (line 1481)
        set_ybound_211384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 16), self_211383, 'set_ybound')
        # Calling set_ybound(args, kwargs) (line 1481)
        set_ybound_call_result_211389 = invoke(stypy.reporting.localization.Localization(__file__, 1481, 16), set_ybound_211384, *[tuple_211385], **kwargs_211388)
        
        # SSA join for if statement (line 1478)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1474)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1483):
        
        # Assigning a BinOp to a Name (line 1483):
        float_211390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, 17), 'float')
        # Getting the type of 'xmin' (line 1483)
        xmin_211391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 24), 'xmin')
        # Getting the type of 'xmax' (line 1483)
        xmax_211392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 31), 'xmax')
        # Applying the binary operator '+' (line 1483)
        result_add_211393 = python_operator(stypy.reporting.localization.Localization(__file__, 1483, 24), '+', xmin_211391, xmax_211392)
        
        # Applying the binary operator '*' (line 1483)
        result_mul_211394 = python_operator(stypy.reporting.localization.Localization(__file__, 1483, 17), '*', float_211390, result_add_211393)
        
        # Assigning a type to the variable 'xc' (line 1483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 12), 'xc', result_mul_211394)
        
        # Assigning a BinOp to a Name (line 1484):
        
        # Assigning a BinOp to a Name (line 1484):
        # Getting the type of 'xc' (line 1484)
        xc_211395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 17), 'xc')
        # Getting the type of 'Xsize' (line 1484)
        Xsize_211396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 22), 'Xsize')
        float_211397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1484, 30), 'float')
        # Applying the binary operator 'div' (line 1484)
        result_div_211398 = python_operator(stypy.reporting.localization.Localization(__file__, 1484, 22), 'div', Xsize_211396, float_211397)
        
        # Applying the binary operator '-' (line 1484)
        result_sub_211399 = python_operator(stypy.reporting.localization.Localization(__file__, 1484, 17), '-', xc_211395, result_div_211398)
        
        # Assigning a type to the variable 'x0' (line 1484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1484, 12), 'x0', result_sub_211399)
        
        # Assigning a BinOp to a Name (line 1485):
        
        # Assigning a BinOp to a Name (line 1485):
        # Getting the type of 'xc' (line 1485)
        xc_211400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 17), 'xc')
        # Getting the type of 'Xsize' (line 1485)
        Xsize_211401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 22), 'Xsize')
        float_211402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1485, 30), 'float')
        # Applying the binary operator 'div' (line 1485)
        result_div_211403 = python_operator(stypy.reporting.localization.Localization(__file__, 1485, 22), 'div', Xsize_211401, float_211402)
        
        # Applying the binary operator '+' (line 1485)
        result_add_211404 = python_operator(stypy.reporting.localization.Localization(__file__, 1485, 17), '+', xc_211400, result_div_211403)
        
        # Assigning a type to the variable 'x1' (line 1485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 12), 'x1', result_add_211404)
        
        
        # Getting the type of 'aspect_scale_mode' (line 1486)
        aspect_scale_mode_211405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 15), 'aspect_scale_mode')
        unicode_211406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1486, 36), 'unicode', u'log')
        # Applying the binary operator '==' (line 1486)
        result_eq_211407 = python_operator(stypy.reporting.localization.Localization(__file__, 1486, 15), '==', aspect_scale_mode_211405, unicode_211406)
        
        # Testing the type of an if condition (line 1486)
        if_condition_211408 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1486, 12), result_eq_211407)
        # Assigning a type to the variable 'if_condition_211408' (line 1486)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1486, 12), 'if_condition_211408', if_condition_211408)
        # SSA begins for if statement (line 1486)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_xbound(...): (line 1487)
        # Processing the call arguments (line 1487)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1487)
        tuple_211411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1487, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1487)
        # Adding element type (line 1487)
        float_211412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1487, 33), 'float')
        # Getting the type of 'x0' (line 1487)
        x0_211413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 40), 'x0', False)
        # Applying the binary operator '**' (line 1487)
        result_pow_211414 = python_operator(stypy.reporting.localization.Localization(__file__, 1487, 33), '**', float_211412, x0_211413)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1487, 33), tuple_211411, result_pow_211414)
        # Adding element type (line 1487)
        float_211415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1487, 44), 'float')
        # Getting the type of 'x1' (line 1487)
        x1_211416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 51), 'x1', False)
        # Applying the binary operator '**' (line 1487)
        result_pow_211417 = python_operator(stypy.reporting.localization.Localization(__file__, 1487, 44), '**', float_211415, x1_211416)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1487, 33), tuple_211411, result_pow_211417)
        
        # Processing the call keyword arguments (line 1487)
        kwargs_211418 = {}
        # Getting the type of 'self' (line 1487)
        self_211409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 16), 'self', False)
        # Obtaining the member 'set_xbound' of a type (line 1487)
        set_xbound_211410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1487, 16), self_211409, 'set_xbound')
        # Calling set_xbound(args, kwargs) (line 1487)
        set_xbound_call_result_211419 = invoke(stypy.reporting.localization.Localization(__file__, 1487, 16), set_xbound_211410, *[tuple_211411], **kwargs_211418)
        
        # SSA branch for the else part of an if statement (line 1486)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_xbound(...): (line 1489)
        # Processing the call arguments (line 1489)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1489)
        tuple_211422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1489, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1489)
        # Adding element type (line 1489)
        # Getting the type of 'x0' (line 1489)
        x0_211423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 33), 'x0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1489, 33), tuple_211422, x0_211423)
        # Adding element type (line 1489)
        # Getting the type of 'x1' (line 1489)
        x1_211424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 37), 'x1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1489, 33), tuple_211422, x1_211424)
        
        # Processing the call keyword arguments (line 1489)
        kwargs_211425 = {}
        # Getting the type of 'self' (line 1489)
        self_211420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 16), 'self', False)
        # Obtaining the member 'set_xbound' of a type (line 1489)
        set_xbound_211421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1489, 16), self_211420, 'set_xbound')
        # Calling set_xbound(args, kwargs) (line 1489)
        set_xbound_call_result_211426 = invoke(stypy.reporting.localization.Localization(__file__, 1489, 16), set_xbound_211421, *[tuple_211422], **kwargs_211425)
        
        # SSA join for if statement (line 1486)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1474)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'apply_aspect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'apply_aspect' in the type store
        # Getting the type of 'stypy_return_type' (line 1355)
        stypy_return_type_211427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_211427)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'apply_aspect'
        return stypy_return_type_211427


    @norecursion
    def axis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'axis'
        module_type_store = module_type_store.open_function_context('axis', 1491, 4, False)
        # Assigning a type to the variable 'self' (line 1492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.axis.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.axis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.axis.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.axis.__dict__.__setitem__('stypy_function_name', '_AxesBase.axis')
        _AxesBase.axis.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.axis.__dict__.__setitem__('stypy_varargs_param_name', 'v')
        _AxesBase.axis.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _AxesBase.axis.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.axis.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.axis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.axis.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.axis', [], 'v', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'axis', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'axis(...)' code ##################

        unicode_211428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, (-1)), 'unicode', u"Set axis properties.\n\n        Valid signatures::\n\n          xmin, xmax, ymin, ymax = axis()\n          xmin, xmax, ymin, ymax = axis(list_arg)\n          xmin, xmax, ymin, ymax = axis(string_arg)\n          xmin, xmax, ymin, ymax = axis(**kwargs)\n\n        Parameters\n        ----------\n        v : list of float or {'on', 'off', 'equal', 'tight', 'scaled',            'normal', 'auto', 'image', 'square'}\n            Optional positional argument\n\n            Axis data limits set from a list; or a command relating to axes:\n\n                ========== ================================================\n                Value      Description\n                ========== ================================================\n                'on'       Toggle axis lines and labels on\n                'off'      Toggle axis lines and labels off\n                'equal'    Equal scaling by changing limits\n                'scaled'   Equal scaling by changing box dimensions\n                'tight'    Limits set such that all data is shown\n                'auto'     Automatic scaling, fill rectangle with data\n                'normal'   Same as 'auto'; deprecated\n                'image'    'scaled' with axis limits equal to data limits\n                'square'   Square plot; similar to 'scaled', but initially                           forcing xmax-xmin = ymax-ymin\n                ========== ================================================\n\n        emit : bool, optional\n            Passed to set_{x,y}lim functions, if observers\n            are notified of axis limit change\n\n        xmin, ymin, xmax, ymax : float, optional\n            The axis limits to be set\n\n        Returns\n        -------\n        xmin, xmax, ymin, ymax : float\n            The axis limits\n\n        ")
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 1538)
        # Processing the call arguments (line 1538)
        # Getting the type of 'v' (line 1538)
        v_211430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 15), 'v', False)
        # Processing the call keyword arguments (line 1538)
        kwargs_211431 = {}
        # Getting the type of 'len' (line 1538)
        len_211429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 11), 'len', False)
        # Calling len(args, kwargs) (line 1538)
        len_call_result_211432 = invoke(stypy.reporting.localization.Localization(__file__, 1538, 11), len_211429, *[v_211430], **kwargs_211431)
        
        int_211433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1538, 21), 'int')
        # Applying the binary operator '==' (line 1538)
        result_eq_211434 = python_operator(stypy.reporting.localization.Localization(__file__, 1538, 11), '==', len_call_result_211432, int_211433)
        
        
        
        # Call to len(...): (line 1538)
        # Processing the call arguments (line 1538)
        # Getting the type of 'kwargs' (line 1538)
        kwargs_211436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 31), 'kwargs', False)
        # Processing the call keyword arguments (line 1538)
        kwargs_211437 = {}
        # Getting the type of 'len' (line 1538)
        len_211435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 27), 'len', False)
        # Calling len(args, kwargs) (line 1538)
        len_call_result_211438 = invoke(stypy.reporting.localization.Localization(__file__, 1538, 27), len_211435, *[kwargs_211436], **kwargs_211437)
        
        int_211439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1538, 42), 'int')
        # Applying the binary operator '==' (line 1538)
        result_eq_211440 = python_operator(stypy.reporting.localization.Localization(__file__, 1538, 27), '==', len_call_result_211438, int_211439)
        
        # Applying the binary operator 'and' (line 1538)
        result_and_keyword_211441 = python_operator(stypy.reporting.localization.Localization(__file__, 1538, 11), 'and', result_eq_211434, result_eq_211440)
        
        # Testing the type of an if condition (line 1538)
        if_condition_211442 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1538, 8), result_and_keyword_211441)
        # Assigning a type to the variable 'if_condition_211442' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 8), 'if_condition_211442', if_condition_211442)
        # SSA begins for if statement (line 1538)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1539):
        
        # Assigning a Call to a Name:
        
        # Call to get_xlim(...): (line 1539)
        # Processing the call keyword arguments (line 1539)
        kwargs_211445 = {}
        # Getting the type of 'self' (line 1539)
        self_211443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 25), 'self', False)
        # Obtaining the member 'get_xlim' of a type (line 1539)
        get_xlim_211444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 25), self_211443, 'get_xlim')
        # Calling get_xlim(args, kwargs) (line 1539)
        get_xlim_call_result_211446 = invoke(stypy.reporting.localization.Localization(__file__, 1539, 25), get_xlim_211444, *[], **kwargs_211445)
        
        # Assigning a type to the variable 'call_assignment_207746' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'call_assignment_207746', get_xlim_call_result_211446)
        
        # Assigning a Call to a Name (line 1539):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 12), 'int')
        # Processing the call keyword arguments
        kwargs_211450 = {}
        # Getting the type of 'call_assignment_207746' (line 1539)
        call_assignment_207746_211447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'call_assignment_207746', False)
        # Obtaining the member '__getitem__' of a type (line 1539)
        getitem___211448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 12), call_assignment_207746_211447, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211451 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211448, *[int_211449], **kwargs_211450)
        
        # Assigning a type to the variable 'call_assignment_207747' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'call_assignment_207747', getitem___call_result_211451)
        
        # Assigning a Name to a Name (line 1539):
        # Getting the type of 'call_assignment_207747' (line 1539)
        call_assignment_207747_211452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'call_assignment_207747')
        # Assigning a type to the variable 'xmin' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'xmin', call_assignment_207747_211452)
        
        # Assigning a Call to a Name (line 1539):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 12), 'int')
        # Processing the call keyword arguments
        kwargs_211456 = {}
        # Getting the type of 'call_assignment_207746' (line 1539)
        call_assignment_207746_211453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'call_assignment_207746', False)
        # Obtaining the member '__getitem__' of a type (line 1539)
        getitem___211454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 12), call_assignment_207746_211453, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211457 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211454, *[int_211455], **kwargs_211456)
        
        # Assigning a type to the variable 'call_assignment_207748' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'call_assignment_207748', getitem___call_result_211457)
        
        # Assigning a Name to a Name (line 1539):
        # Getting the type of 'call_assignment_207748' (line 1539)
        call_assignment_207748_211458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'call_assignment_207748')
        # Assigning a type to the variable 'xmax' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 18), 'xmax', call_assignment_207748_211458)
        
        # Assigning a Call to a Tuple (line 1540):
        
        # Assigning a Call to a Name:
        
        # Call to get_ylim(...): (line 1540)
        # Processing the call keyword arguments (line 1540)
        kwargs_211461 = {}
        # Getting the type of 'self' (line 1540)
        self_211459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 25), 'self', False)
        # Obtaining the member 'get_ylim' of a type (line 1540)
        get_ylim_211460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1540, 25), self_211459, 'get_ylim')
        # Calling get_ylim(args, kwargs) (line 1540)
        get_ylim_call_result_211462 = invoke(stypy.reporting.localization.Localization(__file__, 1540, 25), get_ylim_211460, *[], **kwargs_211461)
        
        # Assigning a type to the variable 'call_assignment_207749' (line 1540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 12), 'call_assignment_207749', get_ylim_call_result_211462)
        
        # Assigning a Call to a Name (line 1540):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1540, 12), 'int')
        # Processing the call keyword arguments
        kwargs_211466 = {}
        # Getting the type of 'call_assignment_207749' (line 1540)
        call_assignment_207749_211463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 12), 'call_assignment_207749', False)
        # Obtaining the member '__getitem__' of a type (line 1540)
        getitem___211464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1540, 12), call_assignment_207749_211463, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211467 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211464, *[int_211465], **kwargs_211466)
        
        # Assigning a type to the variable 'call_assignment_207750' (line 1540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 12), 'call_assignment_207750', getitem___call_result_211467)
        
        # Assigning a Name to a Name (line 1540):
        # Getting the type of 'call_assignment_207750' (line 1540)
        call_assignment_207750_211468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 12), 'call_assignment_207750')
        # Assigning a type to the variable 'ymin' (line 1540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 12), 'ymin', call_assignment_207750_211468)
        
        # Assigning a Call to a Name (line 1540):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1540, 12), 'int')
        # Processing the call keyword arguments
        kwargs_211472 = {}
        # Getting the type of 'call_assignment_207749' (line 1540)
        call_assignment_207749_211469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 12), 'call_assignment_207749', False)
        # Obtaining the member '__getitem__' of a type (line 1540)
        getitem___211470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1540, 12), call_assignment_207749_211469, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211473 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211470, *[int_211471], **kwargs_211472)
        
        # Assigning a type to the variable 'call_assignment_207751' (line 1540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 12), 'call_assignment_207751', getitem___call_result_211473)
        
        # Assigning a Name to a Name (line 1540):
        # Getting the type of 'call_assignment_207751' (line 1540)
        call_assignment_207751_211474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 12), 'call_assignment_207751')
        # Assigning a type to the variable 'ymax' (line 1540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 18), 'ymax', call_assignment_207751_211474)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1541)
        tuple_211475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1541, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1541)
        # Adding element type (line 1541)
        # Getting the type of 'xmin' (line 1541)
        xmin_211476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 19), 'xmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1541, 19), tuple_211475, xmin_211476)
        # Adding element type (line 1541)
        # Getting the type of 'xmax' (line 1541)
        xmax_211477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 25), 'xmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1541, 19), tuple_211475, xmax_211477)
        # Adding element type (line 1541)
        # Getting the type of 'ymin' (line 1541)
        ymin_211478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 31), 'ymin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1541, 19), tuple_211475, ymin_211478)
        # Adding element type (line 1541)
        # Getting the type of 'ymax' (line 1541)
        ymax_211479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 37), 'ymax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1541, 19), tuple_211475, ymax_211479)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1541, 12), 'stypy_return_type', tuple_211475)
        # SSA join for if statement (line 1538)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1543):
        
        # Assigning a Call to a Name (line 1543):
        
        # Call to get(...): (line 1543)
        # Processing the call arguments (line 1543)
        unicode_211482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1543, 26), 'unicode', u'emit')
        # Getting the type of 'True' (line 1543)
        True_211483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 34), 'True', False)
        # Processing the call keyword arguments (line 1543)
        kwargs_211484 = {}
        # Getting the type of 'kwargs' (line 1543)
        kwargs_211480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 15), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 1543)
        get_211481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 15), kwargs_211480, 'get')
        # Calling get(args, kwargs) (line 1543)
        get_call_result_211485 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 15), get_211481, *[unicode_211482, True_211483], **kwargs_211484)
        
        # Assigning a type to the variable 'emit' (line 1543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 8), 'emit', get_call_result_211485)
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 1545)
        # Processing the call arguments (line 1545)
        # Getting the type of 'v' (line 1545)
        v_211487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 15), 'v', False)
        # Processing the call keyword arguments (line 1545)
        kwargs_211488 = {}
        # Getting the type of 'len' (line 1545)
        len_211486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 11), 'len', False)
        # Calling len(args, kwargs) (line 1545)
        len_call_result_211489 = invoke(stypy.reporting.localization.Localization(__file__, 1545, 11), len_211486, *[v_211487], **kwargs_211488)
        
        int_211490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1545, 21), 'int')
        # Applying the binary operator '==' (line 1545)
        result_eq_211491 = python_operator(stypy.reporting.localization.Localization(__file__, 1545, 11), '==', len_call_result_211489, int_211490)
        
        
        # Call to isinstance(...): (line 1545)
        # Processing the call arguments (line 1545)
        
        # Obtaining the type of the subscript
        int_211493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1545, 40), 'int')
        # Getting the type of 'v' (line 1545)
        v_211494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 38), 'v', False)
        # Obtaining the member '__getitem__' of a type (line 1545)
        getitem___211495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 38), v_211494, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1545)
        subscript_call_result_211496 = invoke(stypy.reporting.localization.Localization(__file__, 1545, 38), getitem___211495, int_211493)
        
        # Getting the type of 'six' (line 1545)
        six_211497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 44), 'six', False)
        # Obtaining the member 'string_types' of a type (line 1545)
        string_types_211498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 44), six_211497, 'string_types')
        # Processing the call keyword arguments (line 1545)
        kwargs_211499 = {}
        # Getting the type of 'isinstance' (line 1545)
        isinstance_211492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 27), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1545)
        isinstance_call_result_211500 = invoke(stypy.reporting.localization.Localization(__file__, 1545, 27), isinstance_211492, *[subscript_call_result_211496, string_types_211498], **kwargs_211499)
        
        # Applying the binary operator 'and' (line 1545)
        result_and_keyword_211501 = python_operator(stypy.reporting.localization.Localization(__file__, 1545, 11), 'and', result_eq_211491, isinstance_call_result_211500)
        
        # Testing the type of an if condition (line 1545)
        if_condition_211502 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1545, 8), result_and_keyword_211501)
        # Assigning a type to the variable 'if_condition_211502' (line 1545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1545, 8), 'if_condition_211502', if_condition_211502)
        # SSA begins for if statement (line 1545)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1546):
        
        # Assigning a Call to a Name (line 1546):
        
        # Call to lower(...): (line 1546)
        # Processing the call keyword arguments (line 1546)
        kwargs_211508 = {}
        
        # Obtaining the type of the subscript
        int_211503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1546, 18), 'int')
        # Getting the type of 'v' (line 1546)
        v_211504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 16), 'v', False)
        # Obtaining the member '__getitem__' of a type (line 1546)
        getitem___211505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1546, 16), v_211504, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1546)
        subscript_call_result_211506 = invoke(stypy.reporting.localization.Localization(__file__, 1546, 16), getitem___211505, int_211503)
        
        # Obtaining the member 'lower' of a type (line 1546)
        lower_211507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1546, 16), subscript_call_result_211506, 'lower')
        # Calling lower(args, kwargs) (line 1546)
        lower_call_result_211509 = invoke(stypy.reporting.localization.Localization(__file__, 1546, 16), lower_211507, *[], **kwargs_211508)
        
        # Assigning a type to the variable 's' (line 1546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 12), 's', lower_call_result_211509)
        
        
        # Getting the type of 's' (line 1547)
        s_211510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 15), 's')
        unicode_211511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1547, 20), 'unicode', u'on')
        # Applying the binary operator '==' (line 1547)
        result_eq_211512 = python_operator(stypy.reporting.localization.Localization(__file__, 1547, 15), '==', s_211510, unicode_211511)
        
        # Testing the type of an if condition (line 1547)
        if_condition_211513 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1547, 12), result_eq_211512)
        # Assigning a type to the variable 'if_condition_211513' (line 1547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1547, 12), 'if_condition_211513', if_condition_211513)
        # SSA begins for if statement (line 1547)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_axis_on(...): (line 1548)
        # Processing the call keyword arguments (line 1548)
        kwargs_211516 = {}
        # Getting the type of 'self' (line 1548)
        self_211514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 16), 'self', False)
        # Obtaining the member 'set_axis_on' of a type (line 1548)
        set_axis_on_211515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1548, 16), self_211514, 'set_axis_on')
        # Calling set_axis_on(args, kwargs) (line 1548)
        set_axis_on_call_result_211517 = invoke(stypy.reporting.localization.Localization(__file__, 1548, 16), set_axis_on_211515, *[], **kwargs_211516)
        
        # SSA branch for the else part of an if statement (line 1547)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 's' (line 1549)
        s_211518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 17), 's')
        unicode_211519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1549, 22), 'unicode', u'off')
        # Applying the binary operator '==' (line 1549)
        result_eq_211520 = python_operator(stypy.reporting.localization.Localization(__file__, 1549, 17), '==', s_211518, unicode_211519)
        
        # Testing the type of an if condition (line 1549)
        if_condition_211521 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1549, 17), result_eq_211520)
        # Assigning a type to the variable 'if_condition_211521' (line 1549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1549, 17), 'if_condition_211521', if_condition_211521)
        # SSA begins for if statement (line 1549)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_axis_off(...): (line 1550)
        # Processing the call keyword arguments (line 1550)
        kwargs_211524 = {}
        # Getting the type of 'self' (line 1550)
        self_211522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 16), 'self', False)
        # Obtaining the member 'set_axis_off' of a type (line 1550)
        set_axis_off_211523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1550, 16), self_211522, 'set_axis_off')
        # Calling set_axis_off(args, kwargs) (line 1550)
        set_axis_off_call_result_211525 = invoke(stypy.reporting.localization.Localization(__file__, 1550, 16), set_axis_off_211523, *[], **kwargs_211524)
        
        # SSA branch for the else part of an if statement (line 1549)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 's' (line 1551)
        s_211526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 17), 's')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1551)
        tuple_211527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1551)
        # Adding element type (line 1551)
        unicode_211528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 23), 'unicode', u'equal')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1551, 23), tuple_211527, unicode_211528)
        # Adding element type (line 1551)
        unicode_211529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 32), 'unicode', u'tight')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1551, 23), tuple_211527, unicode_211529)
        # Adding element type (line 1551)
        unicode_211530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 41), 'unicode', u'scaled')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1551, 23), tuple_211527, unicode_211530)
        # Adding element type (line 1551)
        unicode_211531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 51), 'unicode', u'normal')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1551, 23), tuple_211527, unicode_211531)
        # Adding element type (line 1551)
        unicode_211532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1552, 23), 'unicode', u'auto')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1551, 23), tuple_211527, unicode_211532)
        # Adding element type (line 1551)
        unicode_211533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1552, 31), 'unicode', u'image')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1551, 23), tuple_211527, unicode_211533)
        # Adding element type (line 1551)
        unicode_211534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1552, 40), 'unicode', u'square')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1551, 23), tuple_211527, unicode_211534)
        
        # Applying the binary operator 'in' (line 1551)
        result_contains_211535 = python_operator(stypy.reporting.localization.Localization(__file__, 1551, 17), 'in', s_211526, tuple_211527)
        
        # Testing the type of an if condition (line 1551)
        if_condition_211536 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1551, 17), result_contains_211535)
        # Assigning a type to the variable 'if_condition_211536' (line 1551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 17), 'if_condition_211536', if_condition_211536)
        # SSA begins for if statement (line 1551)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_autoscale_on(...): (line 1553)
        # Processing the call arguments (line 1553)
        # Getting the type of 'True' (line 1553)
        True_211539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 38), 'True', False)
        # Processing the call keyword arguments (line 1553)
        kwargs_211540 = {}
        # Getting the type of 'self' (line 1553)
        self_211537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 16), 'self', False)
        # Obtaining the member 'set_autoscale_on' of a type (line 1553)
        set_autoscale_on_211538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1553, 16), self_211537, 'set_autoscale_on')
        # Calling set_autoscale_on(args, kwargs) (line 1553)
        set_autoscale_on_call_result_211541 = invoke(stypy.reporting.localization.Localization(__file__, 1553, 16), set_autoscale_on_211538, *[True_211539], **kwargs_211540)
        
        
        # Call to set_aspect(...): (line 1554)
        # Processing the call arguments (line 1554)
        unicode_211544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1554, 32), 'unicode', u'auto')
        # Processing the call keyword arguments (line 1554)
        kwargs_211545 = {}
        # Getting the type of 'self' (line 1554)
        self_211542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 16), 'self', False)
        # Obtaining the member 'set_aspect' of a type (line 1554)
        set_aspect_211543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1554, 16), self_211542, 'set_aspect')
        # Calling set_aspect(args, kwargs) (line 1554)
        set_aspect_call_result_211546 = invoke(stypy.reporting.localization.Localization(__file__, 1554, 16), set_aspect_211543, *[unicode_211544], **kwargs_211545)
        
        
        # Call to autoscale_view(...): (line 1555)
        # Processing the call keyword arguments (line 1555)
        # Getting the type of 'False' (line 1555)
        False_211549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 42), 'False', False)
        keyword_211550 = False_211549
        kwargs_211551 = {'tight': keyword_211550}
        # Getting the type of 'self' (line 1555)
        self_211547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 16), 'self', False)
        # Obtaining the member 'autoscale_view' of a type (line 1555)
        autoscale_view_211548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1555, 16), self_211547, 'autoscale_view')
        # Calling autoscale_view(args, kwargs) (line 1555)
        autoscale_view_call_result_211552 = invoke(stypy.reporting.localization.Localization(__file__, 1555, 16), autoscale_view_211548, *[], **kwargs_211551)
        
        
        
        # Getting the type of 's' (line 1557)
        s_211553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 19), 's')
        unicode_211554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1557, 24), 'unicode', u'equal')
        # Applying the binary operator '==' (line 1557)
        result_eq_211555 = python_operator(stypy.reporting.localization.Localization(__file__, 1557, 19), '==', s_211553, unicode_211554)
        
        # Testing the type of an if condition (line 1557)
        if_condition_211556 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1557, 16), result_eq_211555)
        # Assigning a type to the variable 'if_condition_211556' (line 1557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1557, 16), 'if_condition_211556', if_condition_211556)
        # SSA begins for if statement (line 1557)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_aspect(...): (line 1558)
        # Processing the call arguments (line 1558)
        unicode_211559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1558, 36), 'unicode', u'equal')
        # Processing the call keyword arguments (line 1558)
        unicode_211560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1558, 56), 'unicode', u'datalim')
        keyword_211561 = unicode_211560
        kwargs_211562 = {'adjustable': keyword_211561}
        # Getting the type of 'self' (line 1558)
        self_211557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 20), 'self', False)
        # Obtaining the member 'set_aspect' of a type (line 1558)
        set_aspect_211558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1558, 20), self_211557, 'set_aspect')
        # Calling set_aspect(args, kwargs) (line 1558)
        set_aspect_call_result_211563 = invoke(stypy.reporting.localization.Localization(__file__, 1558, 20), set_aspect_211558, *[unicode_211559], **kwargs_211562)
        
        # SSA branch for the else part of an if statement (line 1557)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 's' (line 1559)
        s_211564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 21), 's')
        unicode_211565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1559, 26), 'unicode', u'scaled')
        # Applying the binary operator '==' (line 1559)
        result_eq_211566 = python_operator(stypy.reporting.localization.Localization(__file__, 1559, 21), '==', s_211564, unicode_211565)
        
        # Testing the type of an if condition (line 1559)
        if_condition_211567 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1559, 21), result_eq_211566)
        # Assigning a type to the variable 'if_condition_211567' (line 1559)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1559, 21), 'if_condition_211567', if_condition_211567)
        # SSA begins for if statement (line 1559)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_aspect(...): (line 1560)
        # Processing the call arguments (line 1560)
        unicode_211570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1560, 36), 'unicode', u'equal')
        # Processing the call keyword arguments (line 1560)
        unicode_211571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1560, 56), 'unicode', u'box')
        keyword_211572 = unicode_211571
        unicode_211573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1560, 70), 'unicode', u'C')
        keyword_211574 = unicode_211573
        kwargs_211575 = {'adjustable': keyword_211572, 'anchor': keyword_211574}
        # Getting the type of 'self' (line 1560)
        self_211568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 20), 'self', False)
        # Obtaining the member 'set_aspect' of a type (line 1560)
        set_aspect_211569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1560, 20), self_211568, 'set_aspect')
        # Calling set_aspect(args, kwargs) (line 1560)
        set_aspect_call_result_211576 = invoke(stypy.reporting.localization.Localization(__file__, 1560, 20), set_aspect_211569, *[unicode_211570], **kwargs_211575)
        
        
        # Call to set_autoscale_on(...): (line 1561)
        # Processing the call arguments (line 1561)
        # Getting the type of 'False' (line 1561)
        False_211579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 42), 'False', False)
        # Processing the call keyword arguments (line 1561)
        kwargs_211580 = {}
        # Getting the type of 'self' (line 1561)
        self_211577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 20), 'self', False)
        # Obtaining the member 'set_autoscale_on' of a type (line 1561)
        set_autoscale_on_211578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1561, 20), self_211577, 'set_autoscale_on')
        # Calling set_autoscale_on(args, kwargs) (line 1561)
        set_autoscale_on_call_result_211581 = invoke(stypy.reporting.localization.Localization(__file__, 1561, 20), set_autoscale_on_211578, *[False_211579], **kwargs_211580)
        
        # SSA branch for the else part of an if statement (line 1559)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 's' (line 1562)
        s_211582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 21), 's')
        unicode_211583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1562, 26), 'unicode', u'tight')
        # Applying the binary operator '==' (line 1562)
        result_eq_211584 = python_operator(stypy.reporting.localization.Localization(__file__, 1562, 21), '==', s_211582, unicode_211583)
        
        # Testing the type of an if condition (line 1562)
        if_condition_211585 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1562, 21), result_eq_211584)
        # Assigning a type to the variable 'if_condition_211585' (line 1562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1562, 21), 'if_condition_211585', if_condition_211585)
        # SSA begins for if statement (line 1562)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to autoscale_view(...): (line 1563)
        # Processing the call keyword arguments (line 1563)
        # Getting the type of 'True' (line 1563)
        True_211588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 46), 'True', False)
        keyword_211589 = True_211588
        kwargs_211590 = {'tight': keyword_211589}
        # Getting the type of 'self' (line 1563)
        self_211586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 20), 'self', False)
        # Obtaining the member 'autoscale_view' of a type (line 1563)
        autoscale_view_211587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1563, 20), self_211586, 'autoscale_view')
        # Calling autoscale_view(args, kwargs) (line 1563)
        autoscale_view_call_result_211591 = invoke(stypy.reporting.localization.Localization(__file__, 1563, 20), autoscale_view_211587, *[], **kwargs_211590)
        
        
        # Call to set_autoscale_on(...): (line 1564)
        # Processing the call arguments (line 1564)
        # Getting the type of 'False' (line 1564)
        False_211594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 42), 'False', False)
        # Processing the call keyword arguments (line 1564)
        kwargs_211595 = {}
        # Getting the type of 'self' (line 1564)
        self_211592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 20), 'self', False)
        # Obtaining the member 'set_autoscale_on' of a type (line 1564)
        set_autoscale_on_211593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1564, 20), self_211592, 'set_autoscale_on')
        # Calling set_autoscale_on(args, kwargs) (line 1564)
        set_autoscale_on_call_result_211596 = invoke(stypy.reporting.localization.Localization(__file__, 1564, 20), set_autoscale_on_211593, *[False_211594], **kwargs_211595)
        
        # SSA branch for the else part of an if statement (line 1562)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 's' (line 1565)
        s_211597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 21), 's')
        unicode_211598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1565, 26), 'unicode', u'image')
        # Applying the binary operator '==' (line 1565)
        result_eq_211599 = python_operator(stypy.reporting.localization.Localization(__file__, 1565, 21), '==', s_211597, unicode_211598)
        
        # Testing the type of an if condition (line 1565)
        if_condition_211600 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1565, 21), result_eq_211599)
        # Assigning a type to the variable 'if_condition_211600' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 21), 'if_condition_211600', if_condition_211600)
        # SSA begins for if statement (line 1565)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to autoscale_view(...): (line 1566)
        # Processing the call keyword arguments (line 1566)
        # Getting the type of 'True' (line 1566)
        True_211603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 46), 'True', False)
        keyword_211604 = True_211603
        kwargs_211605 = {'tight': keyword_211604}
        # Getting the type of 'self' (line 1566)
        self_211601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 20), 'self', False)
        # Obtaining the member 'autoscale_view' of a type (line 1566)
        autoscale_view_211602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 20), self_211601, 'autoscale_view')
        # Calling autoscale_view(args, kwargs) (line 1566)
        autoscale_view_call_result_211606 = invoke(stypy.reporting.localization.Localization(__file__, 1566, 20), autoscale_view_211602, *[], **kwargs_211605)
        
        
        # Call to set_autoscale_on(...): (line 1567)
        # Processing the call arguments (line 1567)
        # Getting the type of 'False' (line 1567)
        False_211609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 42), 'False', False)
        # Processing the call keyword arguments (line 1567)
        kwargs_211610 = {}
        # Getting the type of 'self' (line 1567)
        self_211607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 20), 'self', False)
        # Obtaining the member 'set_autoscale_on' of a type (line 1567)
        set_autoscale_on_211608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 20), self_211607, 'set_autoscale_on')
        # Calling set_autoscale_on(args, kwargs) (line 1567)
        set_autoscale_on_call_result_211611 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 20), set_autoscale_on_211608, *[False_211609], **kwargs_211610)
        
        
        # Call to set_aspect(...): (line 1568)
        # Processing the call arguments (line 1568)
        unicode_211614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1568, 36), 'unicode', u'equal')
        # Processing the call keyword arguments (line 1568)
        unicode_211615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1568, 56), 'unicode', u'box')
        keyword_211616 = unicode_211615
        unicode_211617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1568, 70), 'unicode', u'C')
        keyword_211618 = unicode_211617
        kwargs_211619 = {'adjustable': keyword_211616, 'anchor': keyword_211618}
        # Getting the type of 'self' (line 1568)
        self_211612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 20), 'self', False)
        # Obtaining the member 'set_aspect' of a type (line 1568)
        set_aspect_211613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1568, 20), self_211612, 'set_aspect')
        # Calling set_aspect(args, kwargs) (line 1568)
        set_aspect_call_result_211620 = invoke(stypy.reporting.localization.Localization(__file__, 1568, 20), set_aspect_211613, *[unicode_211614], **kwargs_211619)
        
        # SSA branch for the else part of an if statement (line 1565)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 's' (line 1569)
        s_211621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 21), 's')
        unicode_211622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1569, 26), 'unicode', u'square')
        # Applying the binary operator '==' (line 1569)
        result_eq_211623 = python_operator(stypy.reporting.localization.Localization(__file__, 1569, 21), '==', s_211621, unicode_211622)
        
        # Testing the type of an if condition (line 1569)
        if_condition_211624 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1569, 21), result_eq_211623)
        # Assigning a type to the variable 'if_condition_211624' (line 1569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1569, 21), 'if_condition_211624', if_condition_211624)
        # SSA begins for if statement (line 1569)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_aspect(...): (line 1570)
        # Processing the call arguments (line 1570)
        unicode_211627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 36), 'unicode', u'equal')
        # Processing the call keyword arguments (line 1570)
        unicode_211628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 56), 'unicode', u'box')
        keyword_211629 = unicode_211628
        unicode_211630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 70), 'unicode', u'C')
        keyword_211631 = unicode_211630
        kwargs_211632 = {'adjustable': keyword_211629, 'anchor': keyword_211631}
        # Getting the type of 'self' (line 1570)
        self_211625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 20), 'self', False)
        # Obtaining the member 'set_aspect' of a type (line 1570)
        set_aspect_211626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1570, 20), self_211625, 'set_aspect')
        # Calling set_aspect(args, kwargs) (line 1570)
        set_aspect_call_result_211633 = invoke(stypy.reporting.localization.Localization(__file__, 1570, 20), set_aspect_211626, *[unicode_211627], **kwargs_211632)
        
        
        # Call to set_autoscale_on(...): (line 1571)
        # Processing the call arguments (line 1571)
        # Getting the type of 'False' (line 1571)
        False_211636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 42), 'False', False)
        # Processing the call keyword arguments (line 1571)
        kwargs_211637 = {}
        # Getting the type of 'self' (line 1571)
        self_211634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 20), 'self', False)
        # Obtaining the member 'set_autoscale_on' of a type (line 1571)
        set_autoscale_on_211635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 20), self_211634, 'set_autoscale_on')
        # Calling set_autoscale_on(args, kwargs) (line 1571)
        set_autoscale_on_call_result_211638 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 20), set_autoscale_on_211635, *[False_211636], **kwargs_211637)
        
        
        # Assigning a Call to a Name (line 1572):
        
        # Assigning a Call to a Name (line 1572):
        
        # Call to get_xlim(...): (line 1572)
        # Processing the call keyword arguments (line 1572)
        kwargs_211641 = {}
        # Getting the type of 'self' (line 1572)
        self_211639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 27), 'self', False)
        # Obtaining the member 'get_xlim' of a type (line 1572)
        get_xlim_211640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1572, 27), self_211639, 'get_xlim')
        # Calling get_xlim(args, kwargs) (line 1572)
        get_xlim_call_result_211642 = invoke(stypy.reporting.localization.Localization(__file__, 1572, 27), get_xlim_211640, *[], **kwargs_211641)
        
        # Assigning a type to the variable 'xlim' (line 1572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1572, 20), 'xlim', get_xlim_call_result_211642)
        
        # Assigning a Call to a Name (line 1573):
        
        # Assigning a Call to a Name (line 1573):
        
        # Call to get_ylim(...): (line 1573)
        # Processing the call keyword arguments (line 1573)
        kwargs_211645 = {}
        # Getting the type of 'self' (line 1573)
        self_211643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 27), 'self', False)
        # Obtaining the member 'get_ylim' of a type (line 1573)
        get_ylim_211644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 27), self_211643, 'get_ylim')
        # Calling get_ylim(args, kwargs) (line 1573)
        get_ylim_call_result_211646 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 27), get_ylim_211644, *[], **kwargs_211645)
        
        # Assigning a type to the variable 'ylim' (line 1573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 20), 'ylim', get_ylim_call_result_211646)
        
        # Assigning a Call to a Name (line 1574):
        
        # Assigning a Call to a Name (line 1574):
        
        # Call to max(...): (line 1574)
        # Processing the call arguments (line 1574)
        
        # Call to diff(...): (line 1574)
        # Processing the call arguments (line 1574)
        # Getting the type of 'xlim' (line 1574)
        xlim_211650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 44), 'xlim', False)
        # Processing the call keyword arguments (line 1574)
        kwargs_211651 = {}
        # Getting the type of 'np' (line 1574)
        np_211648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 36), 'np', False)
        # Obtaining the member 'diff' of a type (line 1574)
        diff_211649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1574, 36), np_211648, 'diff')
        # Calling diff(args, kwargs) (line 1574)
        diff_call_result_211652 = invoke(stypy.reporting.localization.Localization(__file__, 1574, 36), diff_211649, *[xlim_211650], **kwargs_211651)
        
        
        # Call to diff(...): (line 1574)
        # Processing the call arguments (line 1574)
        # Getting the type of 'ylim' (line 1574)
        ylim_211655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 59), 'ylim', False)
        # Processing the call keyword arguments (line 1574)
        kwargs_211656 = {}
        # Getting the type of 'np' (line 1574)
        np_211653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 51), 'np', False)
        # Obtaining the member 'diff' of a type (line 1574)
        diff_211654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1574, 51), np_211653, 'diff')
        # Calling diff(args, kwargs) (line 1574)
        diff_call_result_211657 = invoke(stypy.reporting.localization.Localization(__file__, 1574, 51), diff_211654, *[ylim_211655], **kwargs_211656)
        
        # Processing the call keyword arguments (line 1574)
        kwargs_211658 = {}
        # Getting the type of 'max' (line 1574)
        max_211647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 32), 'max', False)
        # Calling max(args, kwargs) (line 1574)
        max_call_result_211659 = invoke(stypy.reporting.localization.Localization(__file__, 1574, 32), max_211647, *[diff_call_result_211652, diff_call_result_211657], **kwargs_211658)
        
        # Assigning a type to the variable 'edge_size' (line 1574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1574, 20), 'edge_size', max_call_result_211659)
        
        # Call to set_xlim(...): (line 1575)
        # Processing the call arguments (line 1575)
        
        # Obtaining an instance of the builtin type 'list' (line 1575)
        list_211662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1575, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1575)
        # Adding element type (line 1575)
        
        # Obtaining the type of the subscript
        int_211663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1575, 40), 'int')
        # Getting the type of 'xlim' (line 1575)
        xlim_211664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 35), 'xlim', False)
        # Obtaining the member '__getitem__' of a type (line 1575)
        getitem___211665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 35), xlim_211664, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1575)
        subscript_call_result_211666 = invoke(stypy.reporting.localization.Localization(__file__, 1575, 35), getitem___211665, int_211663)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1575, 34), list_211662, subscript_call_result_211666)
        # Adding element type (line 1575)
        
        # Obtaining the type of the subscript
        int_211667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1575, 49), 'int')
        # Getting the type of 'xlim' (line 1575)
        xlim_211668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 44), 'xlim', False)
        # Obtaining the member '__getitem__' of a type (line 1575)
        getitem___211669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 44), xlim_211668, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1575)
        subscript_call_result_211670 = invoke(stypy.reporting.localization.Localization(__file__, 1575, 44), getitem___211669, int_211667)
        
        # Getting the type of 'edge_size' (line 1575)
        edge_size_211671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 54), 'edge_size', False)
        # Applying the binary operator '+' (line 1575)
        result_add_211672 = python_operator(stypy.reporting.localization.Localization(__file__, 1575, 44), '+', subscript_call_result_211670, edge_size_211671)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1575, 34), list_211662, result_add_211672)
        
        # Processing the call keyword arguments (line 1575)
        # Getting the type of 'emit' (line 1576)
        emit_211673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 39), 'emit', False)
        keyword_211674 = emit_211673
        # Getting the type of 'False' (line 1576)
        False_211675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 50), 'False', False)
        keyword_211676 = False_211675
        kwargs_211677 = {'auto': keyword_211676, 'emit': keyword_211674}
        # Getting the type of 'self' (line 1575)
        self_211660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 20), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 1575)
        set_xlim_211661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 20), self_211660, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 1575)
        set_xlim_call_result_211678 = invoke(stypy.reporting.localization.Localization(__file__, 1575, 20), set_xlim_211661, *[list_211662], **kwargs_211677)
        
        
        # Call to set_ylim(...): (line 1577)
        # Processing the call arguments (line 1577)
        
        # Obtaining an instance of the builtin type 'list' (line 1577)
        list_211681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1577, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1577)
        # Adding element type (line 1577)
        
        # Obtaining the type of the subscript
        int_211682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1577, 40), 'int')
        # Getting the type of 'ylim' (line 1577)
        ylim_211683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 35), 'ylim', False)
        # Obtaining the member '__getitem__' of a type (line 1577)
        getitem___211684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 35), ylim_211683, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1577)
        subscript_call_result_211685 = invoke(stypy.reporting.localization.Localization(__file__, 1577, 35), getitem___211684, int_211682)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1577, 34), list_211681, subscript_call_result_211685)
        # Adding element type (line 1577)
        
        # Obtaining the type of the subscript
        int_211686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1577, 49), 'int')
        # Getting the type of 'ylim' (line 1577)
        ylim_211687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 44), 'ylim', False)
        # Obtaining the member '__getitem__' of a type (line 1577)
        getitem___211688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 44), ylim_211687, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1577)
        subscript_call_result_211689 = invoke(stypy.reporting.localization.Localization(__file__, 1577, 44), getitem___211688, int_211686)
        
        # Getting the type of 'edge_size' (line 1577)
        edge_size_211690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 54), 'edge_size', False)
        # Applying the binary operator '+' (line 1577)
        result_add_211691 = python_operator(stypy.reporting.localization.Localization(__file__, 1577, 44), '+', subscript_call_result_211689, edge_size_211690)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1577, 34), list_211681, result_add_211691)
        
        # Processing the call keyword arguments (line 1577)
        # Getting the type of 'emit' (line 1578)
        emit_211692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 39), 'emit', False)
        keyword_211693 = emit_211692
        # Getting the type of 'False' (line 1578)
        False_211694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 50), 'False', False)
        keyword_211695 = False_211694
        kwargs_211696 = {'auto': keyword_211695, 'emit': keyword_211693}
        # Getting the type of 'self' (line 1577)
        self_211679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 20), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 1577)
        set_ylim_211680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 20), self_211679, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 1577)
        set_ylim_call_result_211697 = invoke(stypy.reporting.localization.Localization(__file__, 1577, 20), set_ylim_211680, *[list_211681], **kwargs_211696)
        
        # SSA join for if statement (line 1569)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1565)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1562)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1559)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1557)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1551)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1580)
        # Processing the call arguments (line 1580)
        unicode_211699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1580, 33), 'unicode', u'Unrecognized string %s to axis; try on or off')
        # Getting the type of 's' (line 1581)
        s_211700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 51), 's', False)
        # Applying the binary operator '%' (line 1580)
        result_mod_211701 = python_operator(stypy.reporting.localization.Localization(__file__, 1580, 33), '%', unicode_211699, s_211700)
        
        # Processing the call keyword arguments (line 1580)
        kwargs_211702 = {}
        # Getting the type of 'ValueError' (line 1580)
        ValueError_211698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1580)
        ValueError_call_result_211703 = invoke(stypy.reporting.localization.Localization(__file__, 1580, 22), ValueError_211698, *[result_mod_211701], **kwargs_211702)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1580, 16), ValueError_call_result_211703, 'raise parameter', BaseException)
        # SSA join for if statement (line 1551)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1549)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1547)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1582):
        
        # Assigning a Call to a Name:
        
        # Call to get_xlim(...): (line 1582)
        # Processing the call keyword arguments (line 1582)
        kwargs_211706 = {}
        # Getting the type of 'self' (line 1582)
        self_211704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 25), 'self', False)
        # Obtaining the member 'get_xlim' of a type (line 1582)
        get_xlim_211705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1582, 25), self_211704, 'get_xlim')
        # Calling get_xlim(args, kwargs) (line 1582)
        get_xlim_call_result_211707 = invoke(stypy.reporting.localization.Localization(__file__, 1582, 25), get_xlim_211705, *[], **kwargs_211706)
        
        # Assigning a type to the variable 'call_assignment_207752' (line 1582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1582, 12), 'call_assignment_207752', get_xlim_call_result_211707)
        
        # Assigning a Call to a Name (line 1582):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1582, 12), 'int')
        # Processing the call keyword arguments
        kwargs_211711 = {}
        # Getting the type of 'call_assignment_207752' (line 1582)
        call_assignment_207752_211708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 12), 'call_assignment_207752', False)
        # Obtaining the member '__getitem__' of a type (line 1582)
        getitem___211709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1582, 12), call_assignment_207752_211708, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211712 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211709, *[int_211710], **kwargs_211711)
        
        # Assigning a type to the variable 'call_assignment_207753' (line 1582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1582, 12), 'call_assignment_207753', getitem___call_result_211712)
        
        # Assigning a Name to a Name (line 1582):
        # Getting the type of 'call_assignment_207753' (line 1582)
        call_assignment_207753_211713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 12), 'call_assignment_207753')
        # Assigning a type to the variable 'xmin' (line 1582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1582, 12), 'xmin', call_assignment_207753_211713)
        
        # Assigning a Call to a Name (line 1582):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1582, 12), 'int')
        # Processing the call keyword arguments
        kwargs_211717 = {}
        # Getting the type of 'call_assignment_207752' (line 1582)
        call_assignment_207752_211714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 12), 'call_assignment_207752', False)
        # Obtaining the member '__getitem__' of a type (line 1582)
        getitem___211715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1582, 12), call_assignment_207752_211714, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211718 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211715, *[int_211716], **kwargs_211717)
        
        # Assigning a type to the variable 'call_assignment_207754' (line 1582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1582, 12), 'call_assignment_207754', getitem___call_result_211718)
        
        # Assigning a Name to a Name (line 1582):
        # Getting the type of 'call_assignment_207754' (line 1582)
        call_assignment_207754_211719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 12), 'call_assignment_207754')
        # Assigning a type to the variable 'xmax' (line 1582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1582, 18), 'xmax', call_assignment_207754_211719)
        
        # Assigning a Call to a Tuple (line 1583):
        
        # Assigning a Call to a Name:
        
        # Call to get_ylim(...): (line 1583)
        # Processing the call keyword arguments (line 1583)
        kwargs_211722 = {}
        # Getting the type of 'self' (line 1583)
        self_211720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 25), 'self', False)
        # Obtaining the member 'get_ylim' of a type (line 1583)
        get_ylim_211721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 25), self_211720, 'get_ylim')
        # Calling get_ylim(args, kwargs) (line 1583)
        get_ylim_call_result_211723 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 25), get_ylim_211721, *[], **kwargs_211722)
        
        # Assigning a type to the variable 'call_assignment_207755' (line 1583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 12), 'call_assignment_207755', get_ylim_call_result_211723)
        
        # Assigning a Call to a Name (line 1583):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1583, 12), 'int')
        # Processing the call keyword arguments
        kwargs_211727 = {}
        # Getting the type of 'call_assignment_207755' (line 1583)
        call_assignment_207755_211724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 12), 'call_assignment_207755', False)
        # Obtaining the member '__getitem__' of a type (line 1583)
        getitem___211725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 12), call_assignment_207755_211724, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211728 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211725, *[int_211726], **kwargs_211727)
        
        # Assigning a type to the variable 'call_assignment_207756' (line 1583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 12), 'call_assignment_207756', getitem___call_result_211728)
        
        # Assigning a Name to a Name (line 1583):
        # Getting the type of 'call_assignment_207756' (line 1583)
        call_assignment_207756_211729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 12), 'call_assignment_207756')
        # Assigning a type to the variable 'ymin' (line 1583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 12), 'ymin', call_assignment_207756_211729)
        
        # Assigning a Call to a Name (line 1583):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1583, 12), 'int')
        # Processing the call keyword arguments
        kwargs_211733 = {}
        # Getting the type of 'call_assignment_207755' (line 1583)
        call_assignment_207755_211730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 12), 'call_assignment_207755', False)
        # Obtaining the member '__getitem__' of a type (line 1583)
        getitem___211731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 12), call_assignment_207755_211730, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211734 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211731, *[int_211732], **kwargs_211733)
        
        # Assigning a type to the variable 'call_assignment_207757' (line 1583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 12), 'call_assignment_207757', getitem___call_result_211734)
        
        # Assigning a Name to a Name (line 1583):
        # Getting the type of 'call_assignment_207757' (line 1583)
        call_assignment_207757_211735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 12), 'call_assignment_207757')
        # Assigning a type to the variable 'ymax' (line 1583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 18), 'ymax', call_assignment_207757_211735)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1584)
        tuple_211736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1584, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1584)
        # Adding element type (line 1584)
        # Getting the type of 'xmin' (line 1584)
        xmin_211737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 19), 'xmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1584, 19), tuple_211736, xmin_211737)
        # Adding element type (line 1584)
        # Getting the type of 'xmax' (line 1584)
        xmax_211738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 25), 'xmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1584, 19), tuple_211736, xmax_211738)
        # Adding element type (line 1584)
        # Getting the type of 'ymin' (line 1584)
        ymin_211739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 31), 'ymin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1584, 19), tuple_211736, ymin_211739)
        # Adding element type (line 1584)
        # Getting the type of 'ymax' (line 1584)
        ymax_211740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 37), 'ymax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1584, 19), tuple_211736, ymax_211740)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1584, 12), 'stypy_return_type', tuple_211736)
        # SSA join for if statement (line 1545)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 1586)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Obtaining the type of the subscript
        int_211741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1587, 14), 'int')
        # Getting the type of 'v' (line 1587)
        v_211742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 12), 'v')
        # Obtaining the member '__getitem__' of a type (line 1587)
        getitem___211743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1587, 12), v_211742, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1587)
        subscript_call_result_211744 = invoke(stypy.reporting.localization.Localization(__file__, 1587, 12), getitem___211743, int_211741)
        
        # SSA branch for the except part of a try statement (line 1586)
        # SSA branch for the except 'IndexError' branch of a try statement (line 1586)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 1589):
        
        # Assigning a Call to a Name (line 1589):
        
        # Call to get(...): (line 1589)
        # Processing the call arguments (line 1589)
        unicode_211747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1589, 30), 'unicode', u'xmin')
        # Getting the type of 'None' (line 1589)
        None_211748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 38), 'None', False)
        # Processing the call keyword arguments (line 1589)
        kwargs_211749 = {}
        # Getting the type of 'kwargs' (line 1589)
        kwargs_211745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 19), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 1589)
        get_211746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1589, 19), kwargs_211745, 'get')
        # Calling get(args, kwargs) (line 1589)
        get_call_result_211750 = invoke(stypy.reporting.localization.Localization(__file__, 1589, 19), get_211746, *[unicode_211747, None_211748], **kwargs_211749)
        
        # Assigning a type to the variable 'xmin' (line 1589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1589, 12), 'xmin', get_call_result_211750)
        
        # Assigning a Call to a Name (line 1590):
        
        # Assigning a Call to a Name (line 1590):
        
        # Call to get(...): (line 1590)
        # Processing the call arguments (line 1590)
        unicode_211753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1590, 30), 'unicode', u'xmax')
        # Getting the type of 'None' (line 1590)
        None_211754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 38), 'None', False)
        # Processing the call keyword arguments (line 1590)
        kwargs_211755 = {}
        # Getting the type of 'kwargs' (line 1590)
        kwargs_211751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 19), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 1590)
        get_211752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1590, 19), kwargs_211751, 'get')
        # Calling get(args, kwargs) (line 1590)
        get_call_result_211756 = invoke(stypy.reporting.localization.Localization(__file__, 1590, 19), get_211752, *[unicode_211753, None_211754], **kwargs_211755)
        
        # Assigning a type to the variable 'xmax' (line 1590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1590, 12), 'xmax', get_call_result_211756)
        
        # Assigning a Name to a Name (line 1591):
        
        # Assigning a Name to a Name (line 1591):
        # Getting the type of 'False' (line 1591)
        False_211757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 19), 'False')
        # Assigning a type to the variable 'auto' (line 1591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1591, 12), 'auto', False_211757)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'xmin' (line 1592)
        xmin_211758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 15), 'xmin')
        # Getting the type of 'None' (line 1592)
        None_211759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 23), 'None')
        # Applying the binary operator 'is' (line 1592)
        result_is__211760 = python_operator(stypy.reporting.localization.Localization(__file__, 1592, 15), 'is', xmin_211758, None_211759)
        
        
        # Getting the type of 'xmax' (line 1592)
        xmax_211761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 32), 'xmax')
        # Getting the type of 'None' (line 1592)
        None_211762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 40), 'None')
        # Applying the binary operator 'is' (line 1592)
        result_is__211763 = python_operator(stypy.reporting.localization.Localization(__file__, 1592, 32), 'is', xmax_211761, None_211762)
        
        # Applying the binary operator 'and' (line 1592)
        result_and_keyword_211764 = python_operator(stypy.reporting.localization.Localization(__file__, 1592, 15), 'and', result_is__211760, result_is__211763)
        
        # Testing the type of an if condition (line 1592)
        if_condition_211765 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1592, 12), result_and_keyword_211764)
        # Assigning a type to the variable 'if_condition_211765' (line 1592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1592, 12), 'if_condition_211765', if_condition_211765)
        # SSA begins for if statement (line 1592)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1593):
        
        # Assigning a Name to a Name (line 1593):
        # Getting the type of 'None' (line 1593)
        None_211766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 23), 'None')
        # Assigning a type to the variable 'auto' (line 1593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 16), 'auto', None_211766)
        # SSA join for if statement (line 1592)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1594):
        
        # Assigning a Call to a Name:
        
        # Call to set_xlim(...): (line 1594)
        # Processing the call arguments (line 1594)
        # Getting the type of 'xmin' (line 1594)
        xmin_211769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 39), 'xmin', False)
        # Getting the type of 'xmax' (line 1594)
        xmax_211770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 45), 'xmax', False)
        # Processing the call keyword arguments (line 1594)
        # Getting the type of 'emit' (line 1594)
        emit_211771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 56), 'emit', False)
        keyword_211772 = emit_211771
        # Getting the type of 'auto' (line 1594)
        auto_211773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 67), 'auto', False)
        keyword_211774 = auto_211773
        kwargs_211775 = {'auto': keyword_211774, 'emit': keyword_211772}
        # Getting the type of 'self' (line 1594)
        self_211767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 25), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 1594)
        set_xlim_211768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1594, 25), self_211767, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 1594)
        set_xlim_call_result_211776 = invoke(stypy.reporting.localization.Localization(__file__, 1594, 25), set_xlim_211768, *[xmin_211769, xmax_211770], **kwargs_211775)
        
        # Assigning a type to the variable 'call_assignment_207758' (line 1594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 12), 'call_assignment_207758', set_xlim_call_result_211776)
        
        # Assigning a Call to a Name (line 1594):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1594, 12), 'int')
        # Processing the call keyword arguments
        kwargs_211780 = {}
        # Getting the type of 'call_assignment_207758' (line 1594)
        call_assignment_207758_211777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 12), 'call_assignment_207758', False)
        # Obtaining the member '__getitem__' of a type (line 1594)
        getitem___211778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1594, 12), call_assignment_207758_211777, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211781 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211778, *[int_211779], **kwargs_211780)
        
        # Assigning a type to the variable 'call_assignment_207759' (line 1594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 12), 'call_assignment_207759', getitem___call_result_211781)
        
        # Assigning a Name to a Name (line 1594):
        # Getting the type of 'call_assignment_207759' (line 1594)
        call_assignment_207759_211782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 12), 'call_assignment_207759')
        # Assigning a type to the variable 'xmin' (line 1594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 12), 'xmin', call_assignment_207759_211782)
        
        # Assigning a Call to a Name (line 1594):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1594, 12), 'int')
        # Processing the call keyword arguments
        kwargs_211786 = {}
        # Getting the type of 'call_assignment_207758' (line 1594)
        call_assignment_207758_211783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 12), 'call_assignment_207758', False)
        # Obtaining the member '__getitem__' of a type (line 1594)
        getitem___211784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1594, 12), call_assignment_207758_211783, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211787 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211784, *[int_211785], **kwargs_211786)
        
        # Assigning a type to the variable 'call_assignment_207760' (line 1594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 12), 'call_assignment_207760', getitem___call_result_211787)
        
        # Assigning a Name to a Name (line 1594):
        # Getting the type of 'call_assignment_207760' (line 1594)
        call_assignment_207760_211788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 12), 'call_assignment_207760')
        # Assigning a type to the variable 'xmax' (line 1594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 18), 'xmax', call_assignment_207760_211788)
        
        # Assigning a Call to a Name (line 1596):
        
        # Assigning a Call to a Name (line 1596):
        
        # Call to get(...): (line 1596)
        # Processing the call arguments (line 1596)
        unicode_211791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1596, 30), 'unicode', u'ymin')
        # Getting the type of 'None' (line 1596)
        None_211792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 38), 'None', False)
        # Processing the call keyword arguments (line 1596)
        kwargs_211793 = {}
        # Getting the type of 'kwargs' (line 1596)
        kwargs_211789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 19), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 1596)
        get_211790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1596, 19), kwargs_211789, 'get')
        # Calling get(args, kwargs) (line 1596)
        get_call_result_211794 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 19), get_211790, *[unicode_211791, None_211792], **kwargs_211793)
        
        # Assigning a type to the variable 'ymin' (line 1596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 12), 'ymin', get_call_result_211794)
        
        # Assigning a Call to a Name (line 1597):
        
        # Assigning a Call to a Name (line 1597):
        
        # Call to get(...): (line 1597)
        # Processing the call arguments (line 1597)
        unicode_211797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1597, 30), 'unicode', u'ymax')
        # Getting the type of 'None' (line 1597)
        None_211798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 38), 'None', False)
        # Processing the call keyword arguments (line 1597)
        kwargs_211799 = {}
        # Getting the type of 'kwargs' (line 1597)
        kwargs_211795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 19), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 1597)
        get_211796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1597, 19), kwargs_211795, 'get')
        # Calling get(args, kwargs) (line 1597)
        get_call_result_211800 = invoke(stypy.reporting.localization.Localization(__file__, 1597, 19), get_211796, *[unicode_211797, None_211798], **kwargs_211799)
        
        # Assigning a type to the variable 'ymax' (line 1597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1597, 12), 'ymax', get_call_result_211800)
        
        # Assigning a Name to a Name (line 1598):
        
        # Assigning a Name to a Name (line 1598):
        # Getting the type of 'False' (line 1598)
        False_211801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 19), 'False')
        # Assigning a type to the variable 'auto' (line 1598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1598, 12), 'auto', False_211801)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'ymin' (line 1599)
        ymin_211802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 15), 'ymin')
        # Getting the type of 'None' (line 1599)
        None_211803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 23), 'None')
        # Applying the binary operator 'is' (line 1599)
        result_is__211804 = python_operator(stypy.reporting.localization.Localization(__file__, 1599, 15), 'is', ymin_211802, None_211803)
        
        
        # Getting the type of 'ymax' (line 1599)
        ymax_211805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 32), 'ymax')
        # Getting the type of 'None' (line 1599)
        None_211806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 40), 'None')
        # Applying the binary operator 'is' (line 1599)
        result_is__211807 = python_operator(stypy.reporting.localization.Localization(__file__, 1599, 32), 'is', ymax_211805, None_211806)
        
        # Applying the binary operator 'and' (line 1599)
        result_and_keyword_211808 = python_operator(stypy.reporting.localization.Localization(__file__, 1599, 15), 'and', result_is__211804, result_is__211807)
        
        # Testing the type of an if condition (line 1599)
        if_condition_211809 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1599, 12), result_and_keyword_211808)
        # Assigning a type to the variable 'if_condition_211809' (line 1599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 12), 'if_condition_211809', if_condition_211809)
        # SSA begins for if statement (line 1599)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1600):
        
        # Assigning a Name to a Name (line 1600):
        # Getting the type of 'None' (line 1600)
        None_211810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 23), 'None')
        # Assigning a type to the variable 'auto' (line 1600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1600, 16), 'auto', None_211810)
        # SSA join for if statement (line 1599)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1601):
        
        # Assigning a Call to a Name:
        
        # Call to set_ylim(...): (line 1601)
        # Processing the call arguments (line 1601)
        # Getting the type of 'ymin' (line 1601)
        ymin_211813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 39), 'ymin', False)
        # Getting the type of 'ymax' (line 1601)
        ymax_211814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 45), 'ymax', False)
        # Processing the call keyword arguments (line 1601)
        # Getting the type of 'emit' (line 1601)
        emit_211815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 56), 'emit', False)
        keyword_211816 = emit_211815
        # Getting the type of 'auto' (line 1601)
        auto_211817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 67), 'auto', False)
        keyword_211818 = auto_211817
        kwargs_211819 = {'auto': keyword_211818, 'emit': keyword_211816}
        # Getting the type of 'self' (line 1601)
        self_211811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 25), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 1601)
        set_ylim_211812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1601, 25), self_211811, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 1601)
        set_ylim_call_result_211820 = invoke(stypy.reporting.localization.Localization(__file__, 1601, 25), set_ylim_211812, *[ymin_211813, ymax_211814], **kwargs_211819)
        
        # Assigning a type to the variable 'call_assignment_207761' (line 1601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 12), 'call_assignment_207761', set_ylim_call_result_211820)
        
        # Assigning a Call to a Name (line 1601):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1601, 12), 'int')
        # Processing the call keyword arguments
        kwargs_211824 = {}
        # Getting the type of 'call_assignment_207761' (line 1601)
        call_assignment_207761_211821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 12), 'call_assignment_207761', False)
        # Obtaining the member '__getitem__' of a type (line 1601)
        getitem___211822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1601, 12), call_assignment_207761_211821, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211825 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211822, *[int_211823], **kwargs_211824)
        
        # Assigning a type to the variable 'call_assignment_207762' (line 1601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 12), 'call_assignment_207762', getitem___call_result_211825)
        
        # Assigning a Name to a Name (line 1601):
        # Getting the type of 'call_assignment_207762' (line 1601)
        call_assignment_207762_211826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 12), 'call_assignment_207762')
        # Assigning a type to the variable 'ymin' (line 1601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 12), 'ymin', call_assignment_207762_211826)
        
        # Assigning a Call to a Name (line 1601):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_211829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1601, 12), 'int')
        # Processing the call keyword arguments
        kwargs_211830 = {}
        # Getting the type of 'call_assignment_207761' (line 1601)
        call_assignment_207761_211827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 12), 'call_assignment_207761', False)
        # Obtaining the member '__getitem__' of a type (line 1601)
        getitem___211828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1601, 12), call_assignment_207761_211827, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_211831 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___211828, *[int_211829], **kwargs_211830)
        
        # Assigning a type to the variable 'call_assignment_207763' (line 1601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 12), 'call_assignment_207763', getitem___call_result_211831)
        
        # Assigning a Name to a Name (line 1601):
        # Getting the type of 'call_assignment_207763' (line 1601)
        call_assignment_207763_211832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 12), 'call_assignment_207763')
        # Assigning a type to the variable 'ymax' (line 1601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 18), 'ymax', call_assignment_207763_211832)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1602)
        tuple_211833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1602, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1602)
        # Adding element type (line 1602)
        # Getting the type of 'xmin' (line 1602)
        xmin_211834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 19), 'xmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1602, 19), tuple_211833, xmin_211834)
        # Adding element type (line 1602)
        # Getting the type of 'xmax' (line 1602)
        xmax_211835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 25), 'xmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1602, 19), tuple_211833, xmax_211835)
        # Adding element type (line 1602)
        # Getting the type of 'ymin' (line 1602)
        ymin_211836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 31), 'ymin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1602, 19), tuple_211833, ymin_211836)
        # Adding element type (line 1602)
        # Getting the type of 'ymax' (line 1602)
        ymax_211837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 37), 'ymax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1602, 19), tuple_211833, ymax_211837)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1602, 12), 'stypy_return_type', tuple_211833)
        # SSA join for try-except statement (line 1586)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 1604):
        
        # Assigning a Subscript to a Name (line 1604):
        
        # Obtaining the type of the subscript
        int_211838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1604, 14), 'int')
        # Getting the type of 'v' (line 1604)
        v_211839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 12), 'v')
        # Obtaining the member '__getitem__' of a type (line 1604)
        getitem___211840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1604, 12), v_211839, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1604)
        subscript_call_result_211841 = invoke(stypy.reporting.localization.Localization(__file__, 1604, 12), getitem___211840, int_211838)
        
        # Assigning a type to the variable 'v' (line 1604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1604, 8), 'v', subscript_call_result_211841)
        
        
        
        # Call to len(...): (line 1605)
        # Processing the call arguments (line 1605)
        # Getting the type of 'v' (line 1605)
        v_211843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 15), 'v', False)
        # Processing the call keyword arguments (line 1605)
        kwargs_211844 = {}
        # Getting the type of 'len' (line 1605)
        len_211842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 11), 'len', False)
        # Calling len(args, kwargs) (line 1605)
        len_call_result_211845 = invoke(stypy.reporting.localization.Localization(__file__, 1605, 11), len_211842, *[v_211843], **kwargs_211844)
        
        int_211846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1605, 21), 'int')
        # Applying the binary operator '!=' (line 1605)
        result_ne_211847 = python_operator(stypy.reporting.localization.Localization(__file__, 1605, 11), '!=', len_call_result_211845, int_211846)
        
        # Testing the type of an if condition (line 1605)
        if_condition_211848 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1605, 8), result_ne_211847)
        # Assigning a type to the variable 'if_condition_211848' (line 1605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 8), 'if_condition_211848', if_condition_211848)
        # SSA begins for if statement (line 1605)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1606)
        # Processing the call arguments (line 1606)
        unicode_211850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1606, 29), 'unicode', u'v must contain [xmin xmax ymin ymax]')
        # Processing the call keyword arguments (line 1606)
        kwargs_211851 = {}
        # Getting the type of 'ValueError' (line 1606)
        ValueError_211849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1606)
        ValueError_call_result_211852 = invoke(stypy.reporting.localization.Localization(__file__, 1606, 18), ValueError_211849, *[unicode_211850], **kwargs_211851)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1606, 12), ValueError_call_result_211852, 'raise parameter', BaseException)
        # SSA join for if statement (line 1605)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_xlim(...): (line 1608)
        # Processing the call arguments (line 1608)
        
        # Obtaining an instance of the builtin type 'list' (line 1608)
        list_211855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1608, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1608)
        # Adding element type (line 1608)
        
        # Obtaining the type of the subscript
        int_211856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1608, 25), 'int')
        # Getting the type of 'v' (line 1608)
        v_211857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 23), 'v', False)
        # Obtaining the member '__getitem__' of a type (line 1608)
        getitem___211858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1608, 23), v_211857, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1608)
        subscript_call_result_211859 = invoke(stypy.reporting.localization.Localization(__file__, 1608, 23), getitem___211858, int_211856)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1608, 22), list_211855, subscript_call_result_211859)
        # Adding element type (line 1608)
        
        # Obtaining the type of the subscript
        int_211860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1608, 31), 'int')
        # Getting the type of 'v' (line 1608)
        v_211861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 29), 'v', False)
        # Obtaining the member '__getitem__' of a type (line 1608)
        getitem___211862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1608, 29), v_211861, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1608)
        subscript_call_result_211863 = invoke(stypy.reporting.localization.Localization(__file__, 1608, 29), getitem___211862, int_211860)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1608, 22), list_211855, subscript_call_result_211863)
        
        # Processing the call keyword arguments (line 1608)
        # Getting the type of 'emit' (line 1608)
        emit_211864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 41), 'emit', False)
        keyword_211865 = emit_211864
        # Getting the type of 'False' (line 1608)
        False_211866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 52), 'False', False)
        keyword_211867 = False_211866
        kwargs_211868 = {'auto': keyword_211867, 'emit': keyword_211865}
        # Getting the type of 'self' (line 1608)
        self_211853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 8), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 1608)
        set_xlim_211854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1608, 8), self_211853, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 1608)
        set_xlim_call_result_211869 = invoke(stypy.reporting.localization.Localization(__file__, 1608, 8), set_xlim_211854, *[list_211855], **kwargs_211868)
        
        
        # Call to set_ylim(...): (line 1609)
        # Processing the call arguments (line 1609)
        
        # Obtaining an instance of the builtin type 'list' (line 1609)
        list_211872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1609, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1609)
        # Adding element type (line 1609)
        
        # Obtaining the type of the subscript
        int_211873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1609, 25), 'int')
        # Getting the type of 'v' (line 1609)
        v_211874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 23), 'v', False)
        # Obtaining the member '__getitem__' of a type (line 1609)
        getitem___211875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1609, 23), v_211874, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1609)
        subscript_call_result_211876 = invoke(stypy.reporting.localization.Localization(__file__, 1609, 23), getitem___211875, int_211873)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1609, 22), list_211872, subscript_call_result_211876)
        # Adding element type (line 1609)
        
        # Obtaining the type of the subscript
        int_211877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1609, 31), 'int')
        # Getting the type of 'v' (line 1609)
        v_211878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 29), 'v', False)
        # Obtaining the member '__getitem__' of a type (line 1609)
        getitem___211879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1609, 29), v_211878, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1609)
        subscript_call_result_211880 = invoke(stypy.reporting.localization.Localization(__file__, 1609, 29), getitem___211879, int_211877)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1609, 22), list_211872, subscript_call_result_211880)
        
        # Processing the call keyword arguments (line 1609)
        # Getting the type of 'emit' (line 1609)
        emit_211881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 41), 'emit', False)
        keyword_211882 = emit_211881
        # Getting the type of 'False' (line 1609)
        False_211883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 52), 'False', False)
        keyword_211884 = False_211883
        kwargs_211885 = {'auto': keyword_211884, 'emit': keyword_211882}
        # Getting the type of 'self' (line 1609)
        self_211870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 8), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 1609)
        set_ylim_211871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1609, 8), self_211870, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 1609)
        set_ylim_call_result_211886 = invoke(stypy.reporting.localization.Localization(__file__, 1609, 8), set_ylim_211871, *[list_211872], **kwargs_211885)
        
        # Getting the type of 'v' (line 1611)
        v_211887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 15), 'v')
        # Assigning a type to the variable 'stypy_return_type' (line 1611)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1611, 8), 'stypy_return_type', v_211887)
        
        # ################# End of 'axis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'axis' in the type store
        # Getting the type of 'stypy_return_type' (line 1491)
        stypy_return_type_211888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_211888)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'axis'
        return stypy_return_type_211888


    @norecursion
    def get_legend(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_legend'
        module_type_store = module_type_store.open_function_context('get_legend', 1613, 4, False)
        # Assigning a type to the variable 'self' (line 1614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1614, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_legend.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_legend.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_legend.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_legend.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_legend')
        _AxesBase.get_legend.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_legend.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_legend.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_legend.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_legend.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_legend.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_legend.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_legend', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_legend', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_legend(...)' code ##################

        unicode_211889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1616, (-1)), 'unicode', u'\n        Return the legend.Legend instance, or None if no legend is defined\n        ')
        # Getting the type of 'self' (line 1617)
        self_211890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 15), 'self')
        # Obtaining the member 'legend_' of a type (line 1617)
        legend__211891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1617, 15), self_211890, 'legend_')
        # Assigning a type to the variable 'stypy_return_type' (line 1617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 8), 'stypy_return_type', legend__211891)
        
        # ################# End of 'get_legend(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_legend' in the type store
        # Getting the type of 'stypy_return_type' (line 1613)
        stypy_return_type_211892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_211892)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_legend'
        return stypy_return_type_211892


    @norecursion
    def get_images(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_images'
        module_type_store = module_type_store.open_function_context('get_images', 1619, 4, False)
        # Assigning a type to the variable 'self' (line 1620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_images.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_images.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_images.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_images.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_images')
        _AxesBase.get_images.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_images.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_images.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_images.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_images.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_images.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_images.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_images', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_images', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_images(...)' code ##################

        unicode_211893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1620, 8), 'unicode', u'return a list of Axes images contained by the Axes')
        
        # Call to silent_list(...): (line 1621)
        # Processing the call arguments (line 1621)
        unicode_211896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1621, 33), 'unicode', u'AxesImage')
        # Getting the type of 'self' (line 1621)
        self_211897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 46), 'self', False)
        # Obtaining the member 'images' of a type (line 1621)
        images_211898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1621, 46), self_211897, 'images')
        # Processing the call keyword arguments (line 1621)
        kwargs_211899 = {}
        # Getting the type of 'cbook' (line 1621)
        cbook_211894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 1621)
        silent_list_211895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1621, 15), cbook_211894, 'silent_list')
        # Calling silent_list(args, kwargs) (line 1621)
        silent_list_call_result_211900 = invoke(stypy.reporting.localization.Localization(__file__, 1621, 15), silent_list_211895, *[unicode_211896, images_211898], **kwargs_211899)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1621, 8), 'stypy_return_type', silent_list_call_result_211900)
        
        # ################# End of 'get_images(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_images' in the type store
        # Getting the type of 'stypy_return_type' (line 1619)
        stypy_return_type_211901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_211901)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_images'
        return stypy_return_type_211901


    @norecursion
    def get_lines(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_lines'
        module_type_store = module_type_store.open_function_context('get_lines', 1623, 4, False)
        # Assigning a type to the variable 'self' (line 1624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1624, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_lines.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_lines.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_lines.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_lines.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_lines')
        _AxesBase.get_lines.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_lines.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_lines.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_lines.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_lines.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_lines.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_lines.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_lines', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_lines', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_lines(...)' code ##################

        unicode_211902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1624, 8), 'unicode', u'Return a list of lines contained by the Axes')
        
        # Call to silent_list(...): (line 1625)
        # Processing the call arguments (line 1625)
        unicode_211905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1625, 33), 'unicode', u'Line2D')
        # Getting the type of 'self' (line 1625)
        self_211906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 43), 'self', False)
        # Obtaining the member 'lines' of a type (line 1625)
        lines_211907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1625, 43), self_211906, 'lines')
        # Processing the call keyword arguments (line 1625)
        kwargs_211908 = {}
        # Getting the type of 'cbook' (line 1625)
        cbook_211903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 1625)
        silent_list_211904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1625, 15), cbook_211903, 'silent_list')
        # Calling silent_list(args, kwargs) (line 1625)
        silent_list_call_result_211909 = invoke(stypy.reporting.localization.Localization(__file__, 1625, 15), silent_list_211904, *[unicode_211905, lines_211907], **kwargs_211908)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1625, 8), 'stypy_return_type', silent_list_call_result_211909)
        
        # ################# End of 'get_lines(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_lines' in the type store
        # Getting the type of 'stypy_return_type' (line 1623)
        stypy_return_type_211910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_211910)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_lines'
        return stypy_return_type_211910


    @norecursion
    def get_xaxis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_xaxis'
        module_type_store = module_type_store.open_function_context('get_xaxis', 1627, 4, False)
        # Assigning a type to the variable 'self' (line 1628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_xaxis.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_xaxis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_xaxis.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_xaxis.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_xaxis')
        _AxesBase.get_xaxis.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_xaxis.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_xaxis.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_xaxis.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_xaxis.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_xaxis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_xaxis.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_xaxis', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xaxis', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xaxis(...)' code ##################

        unicode_211911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1628, 8), 'unicode', u'Return the XAxis instance')
        # Getting the type of 'self' (line 1629)
        self_211912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 15), 'self')
        # Obtaining the member 'xaxis' of a type (line 1629)
        xaxis_211913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1629, 15), self_211912, 'xaxis')
        # Assigning a type to the variable 'stypy_return_type' (line 1629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1629, 8), 'stypy_return_type', xaxis_211913)
        
        # ################# End of 'get_xaxis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xaxis' in the type store
        # Getting the type of 'stypy_return_type' (line 1627)
        stypy_return_type_211914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_211914)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xaxis'
        return stypy_return_type_211914


    @norecursion
    def get_xgridlines(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_xgridlines'
        module_type_store = module_type_store.open_function_context('get_xgridlines', 1631, 4, False)
        # Assigning a type to the variable 'self' (line 1632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1632, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_xgridlines.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_xgridlines.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_xgridlines.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_xgridlines.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_xgridlines')
        _AxesBase.get_xgridlines.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_xgridlines.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_xgridlines.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_xgridlines.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_xgridlines.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_xgridlines.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_xgridlines.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_xgridlines', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xgridlines', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xgridlines(...)' code ##################

        unicode_211915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1632, 8), 'unicode', u'Get the x grid lines as a list of Line2D instances')
        
        # Call to silent_list(...): (line 1633)
        # Processing the call arguments (line 1633)
        unicode_211918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1633, 33), 'unicode', u'Line2D xgridline')
        
        # Call to get_gridlines(...): (line 1634)
        # Processing the call keyword arguments (line 1634)
        kwargs_211922 = {}
        # Getting the type of 'self' (line 1634)
        self_211919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 33), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 1634)
        xaxis_211920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1634, 33), self_211919, 'xaxis')
        # Obtaining the member 'get_gridlines' of a type (line 1634)
        get_gridlines_211921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1634, 33), xaxis_211920, 'get_gridlines')
        # Calling get_gridlines(args, kwargs) (line 1634)
        get_gridlines_call_result_211923 = invoke(stypy.reporting.localization.Localization(__file__, 1634, 33), get_gridlines_211921, *[], **kwargs_211922)
        
        # Processing the call keyword arguments (line 1633)
        kwargs_211924 = {}
        # Getting the type of 'cbook' (line 1633)
        cbook_211916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1633, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 1633)
        silent_list_211917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1633, 15), cbook_211916, 'silent_list')
        # Calling silent_list(args, kwargs) (line 1633)
        silent_list_call_result_211925 = invoke(stypy.reporting.localization.Localization(__file__, 1633, 15), silent_list_211917, *[unicode_211918, get_gridlines_call_result_211923], **kwargs_211924)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1633, 8), 'stypy_return_type', silent_list_call_result_211925)
        
        # ################# End of 'get_xgridlines(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xgridlines' in the type store
        # Getting the type of 'stypy_return_type' (line 1631)
        stypy_return_type_211926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_211926)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xgridlines'
        return stypy_return_type_211926


    @norecursion
    def get_xticklines(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_xticklines'
        module_type_store = module_type_store.open_function_context('get_xticklines', 1636, 4, False)
        # Assigning a type to the variable 'self' (line 1637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_xticklines.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_xticklines.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_xticklines.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_xticklines.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_xticklines')
        _AxesBase.get_xticklines.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_xticklines.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_xticklines.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_xticklines.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_xticklines.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_xticklines.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_xticklines.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_xticklines', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xticklines', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xticklines(...)' code ##################

        unicode_211927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1637, 8), 'unicode', u'Get the xtick lines as a list of Line2D instances')
        
        # Call to silent_list(...): (line 1638)
        # Processing the call arguments (line 1638)
        unicode_211930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1638, 33), 'unicode', u'Text xtickline')
        
        # Call to get_ticklines(...): (line 1639)
        # Processing the call keyword arguments (line 1639)
        kwargs_211934 = {}
        # Getting the type of 'self' (line 1639)
        self_211931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 33), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 1639)
        xaxis_211932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1639, 33), self_211931, 'xaxis')
        # Obtaining the member 'get_ticklines' of a type (line 1639)
        get_ticklines_211933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1639, 33), xaxis_211932, 'get_ticklines')
        # Calling get_ticklines(args, kwargs) (line 1639)
        get_ticklines_call_result_211935 = invoke(stypy.reporting.localization.Localization(__file__, 1639, 33), get_ticklines_211933, *[], **kwargs_211934)
        
        # Processing the call keyword arguments (line 1638)
        kwargs_211936 = {}
        # Getting the type of 'cbook' (line 1638)
        cbook_211928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 1638)
        silent_list_211929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 15), cbook_211928, 'silent_list')
        # Calling silent_list(args, kwargs) (line 1638)
        silent_list_call_result_211937 = invoke(stypy.reporting.localization.Localization(__file__, 1638, 15), silent_list_211929, *[unicode_211930, get_ticklines_call_result_211935], **kwargs_211936)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1638, 8), 'stypy_return_type', silent_list_call_result_211937)
        
        # ################# End of 'get_xticklines(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xticklines' in the type store
        # Getting the type of 'stypy_return_type' (line 1636)
        stypy_return_type_211938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_211938)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xticklines'
        return stypy_return_type_211938


    @norecursion
    def get_yaxis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_yaxis'
        module_type_store = module_type_store.open_function_context('get_yaxis', 1641, 4, False)
        # Assigning a type to the variable 'self' (line 1642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1642, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_yaxis.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_yaxis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_yaxis.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_yaxis.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_yaxis')
        _AxesBase.get_yaxis.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_yaxis.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_yaxis.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_yaxis.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_yaxis.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_yaxis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_yaxis.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_yaxis', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_yaxis', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_yaxis(...)' code ##################

        unicode_211939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1642, 8), 'unicode', u'Return the YAxis instance')
        # Getting the type of 'self' (line 1643)
        self_211940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 15), 'self')
        # Obtaining the member 'yaxis' of a type (line 1643)
        yaxis_211941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1643, 15), self_211940, 'yaxis')
        # Assigning a type to the variable 'stypy_return_type' (line 1643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1643, 8), 'stypy_return_type', yaxis_211941)
        
        # ################# End of 'get_yaxis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_yaxis' in the type store
        # Getting the type of 'stypy_return_type' (line 1641)
        stypy_return_type_211942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_211942)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_yaxis'
        return stypy_return_type_211942


    @norecursion
    def get_ygridlines(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_ygridlines'
        module_type_store = module_type_store.open_function_context('get_ygridlines', 1645, 4, False)
        # Assigning a type to the variable 'self' (line 1646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_ygridlines.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_ygridlines.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_ygridlines.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_ygridlines.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_ygridlines')
        _AxesBase.get_ygridlines.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_ygridlines.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_ygridlines.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_ygridlines.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_ygridlines.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_ygridlines.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_ygridlines.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_ygridlines', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ygridlines', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ygridlines(...)' code ##################

        unicode_211943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1646, 8), 'unicode', u'Get the y grid lines as a list of Line2D instances')
        
        # Call to silent_list(...): (line 1647)
        # Processing the call arguments (line 1647)
        unicode_211946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1647, 33), 'unicode', u'Line2D ygridline')
        
        # Call to get_gridlines(...): (line 1648)
        # Processing the call keyword arguments (line 1648)
        kwargs_211950 = {}
        # Getting the type of 'self' (line 1648)
        self_211947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 33), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 1648)
        yaxis_211948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 33), self_211947, 'yaxis')
        # Obtaining the member 'get_gridlines' of a type (line 1648)
        get_gridlines_211949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 33), yaxis_211948, 'get_gridlines')
        # Calling get_gridlines(args, kwargs) (line 1648)
        get_gridlines_call_result_211951 = invoke(stypy.reporting.localization.Localization(__file__, 1648, 33), get_gridlines_211949, *[], **kwargs_211950)
        
        # Processing the call keyword arguments (line 1647)
        kwargs_211952 = {}
        # Getting the type of 'cbook' (line 1647)
        cbook_211944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 1647)
        silent_list_211945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1647, 15), cbook_211944, 'silent_list')
        # Calling silent_list(args, kwargs) (line 1647)
        silent_list_call_result_211953 = invoke(stypy.reporting.localization.Localization(__file__, 1647, 15), silent_list_211945, *[unicode_211946, get_gridlines_call_result_211951], **kwargs_211952)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1647, 8), 'stypy_return_type', silent_list_call_result_211953)
        
        # ################# End of 'get_ygridlines(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ygridlines' in the type store
        # Getting the type of 'stypy_return_type' (line 1645)
        stypy_return_type_211954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_211954)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ygridlines'
        return stypy_return_type_211954


    @norecursion
    def get_yticklines(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_yticklines'
        module_type_store = module_type_store.open_function_context('get_yticklines', 1650, 4, False)
        # Assigning a type to the variable 'self' (line 1651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1651, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_yticklines.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_yticklines.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_yticklines.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_yticklines.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_yticklines')
        _AxesBase.get_yticklines.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_yticklines.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_yticklines.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_yticklines.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_yticklines.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_yticklines.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_yticklines.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_yticklines', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_yticklines', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_yticklines(...)' code ##################

        unicode_211955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1651, 8), 'unicode', u'Get the ytick lines as a list of Line2D instances')
        
        # Call to silent_list(...): (line 1652)
        # Processing the call arguments (line 1652)
        unicode_211958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1652, 33), 'unicode', u'Line2D ytickline')
        
        # Call to get_ticklines(...): (line 1653)
        # Processing the call keyword arguments (line 1653)
        kwargs_211962 = {}
        # Getting the type of 'self' (line 1653)
        self_211959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 33), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 1653)
        yaxis_211960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1653, 33), self_211959, 'yaxis')
        # Obtaining the member 'get_ticklines' of a type (line 1653)
        get_ticklines_211961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1653, 33), yaxis_211960, 'get_ticklines')
        # Calling get_ticklines(args, kwargs) (line 1653)
        get_ticklines_call_result_211963 = invoke(stypy.reporting.localization.Localization(__file__, 1653, 33), get_ticklines_211961, *[], **kwargs_211962)
        
        # Processing the call keyword arguments (line 1652)
        kwargs_211964 = {}
        # Getting the type of 'cbook' (line 1652)
        cbook_211956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 1652)
        silent_list_211957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 15), cbook_211956, 'silent_list')
        # Calling silent_list(args, kwargs) (line 1652)
        silent_list_call_result_211965 = invoke(stypy.reporting.localization.Localization(__file__, 1652, 15), silent_list_211957, *[unicode_211958, get_ticklines_call_result_211963], **kwargs_211964)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1652, 8), 'stypy_return_type', silent_list_call_result_211965)
        
        # ################# End of 'get_yticklines(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_yticklines' in the type store
        # Getting the type of 'stypy_return_type' (line 1650)
        stypy_return_type_211966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_211966)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_yticklines'
        return stypy_return_type_211966


    @norecursion
    def _sci(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_sci'
        module_type_store = module_type_store.open_function_context('_sci', 1657, 4, False)
        # Assigning a type to the variable 'self' (line 1658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1658, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._sci.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._sci.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._sci.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._sci.__dict__.__setitem__('stypy_function_name', '_AxesBase._sci')
        _AxesBase._sci.__dict__.__setitem__('stypy_param_names_list', ['im'])
        _AxesBase._sci.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._sci.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._sci.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._sci.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._sci.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._sci.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._sci', ['im'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_sci', localization, ['im'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_sci(...)' code ##################

        unicode_211967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, (-1)), 'unicode', u'\n        helper for :func:`~matplotlib.pyplot.sci`;\n        do not use elsewhere.\n        ')
        
        
        # Call to isinstance(...): (line 1662)
        # Processing the call arguments (line 1662)
        # Getting the type of 'im' (line 1662)
        im_211969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 22), 'im', False)
        # Getting the type of 'matplotlib' (line 1662)
        matplotlib_211970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 26), 'matplotlib', False)
        # Obtaining the member 'contour' of a type (line 1662)
        contour_211971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1662, 26), matplotlib_211970, 'contour')
        # Obtaining the member 'ContourSet' of a type (line 1662)
        ContourSet_211972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1662, 26), contour_211971, 'ContourSet')
        # Processing the call keyword arguments (line 1662)
        kwargs_211973 = {}
        # Getting the type of 'isinstance' (line 1662)
        isinstance_211968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1662)
        isinstance_call_result_211974 = invoke(stypy.reporting.localization.Localization(__file__, 1662, 11), isinstance_211968, *[im_211969, ContourSet_211972], **kwargs_211973)
        
        # Testing the type of an if condition (line 1662)
        if_condition_211975 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1662, 8), isinstance_call_result_211974)
        # Assigning a type to the variable 'if_condition_211975' (line 1662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1662, 8), 'if_condition_211975', if_condition_211975)
        # SSA begins for if statement (line 1662)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Obtaining the type of the subscript
        int_211976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1663, 30), 'int')
        # Getting the type of 'im' (line 1663)
        im_211977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 15), 'im')
        # Obtaining the member 'collections' of a type (line 1663)
        collections_211978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1663, 15), im_211977, 'collections')
        # Obtaining the member '__getitem__' of a type (line 1663)
        getitem___211979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1663, 15), collections_211978, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1663)
        subscript_call_result_211980 = invoke(stypy.reporting.localization.Localization(__file__, 1663, 15), getitem___211979, int_211976)
        
        # Getting the type of 'self' (line 1663)
        self_211981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 40), 'self')
        # Obtaining the member 'collections' of a type (line 1663)
        collections_211982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1663, 40), self_211981, 'collections')
        # Applying the binary operator 'notin' (line 1663)
        result_contains_211983 = python_operator(stypy.reporting.localization.Localization(__file__, 1663, 15), 'notin', subscript_call_result_211980, collections_211982)
        
        # Testing the type of an if condition (line 1663)
        if_condition_211984 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1663, 12), result_contains_211983)
        # Assigning a type to the variable 'if_condition_211984' (line 1663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1663, 12), 'if_condition_211984', if_condition_211984)
        # SSA begins for if statement (line 1663)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1664)
        # Processing the call arguments (line 1664)
        unicode_211986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1665, 20), 'unicode', u'ContourSet must be in current Axes')
        # Processing the call keyword arguments (line 1664)
        kwargs_211987 = {}
        # Getting the type of 'ValueError' (line 1664)
        ValueError_211985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1664)
        ValueError_call_result_211988 = invoke(stypy.reporting.localization.Localization(__file__, 1664, 22), ValueError_211985, *[unicode_211986], **kwargs_211987)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1664, 16), ValueError_call_result_211988, 'raise parameter', BaseException)
        # SSA join for if statement (line 1663)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1662)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'im' (line 1666)
        im_211989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 13), 'im')
        # Getting the type of 'self' (line 1666)
        self_211990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 23), 'self')
        # Obtaining the member 'images' of a type (line 1666)
        images_211991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1666, 23), self_211990, 'images')
        # Applying the binary operator 'notin' (line 1666)
        result_contains_211992 = python_operator(stypy.reporting.localization.Localization(__file__, 1666, 13), 'notin', im_211989, images_211991)
        
        
        # Getting the type of 'im' (line 1666)
        im_211993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 39), 'im')
        # Getting the type of 'self' (line 1666)
        self_211994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 49), 'self')
        # Obtaining the member 'collections' of a type (line 1666)
        collections_211995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1666, 49), self_211994, 'collections')
        # Applying the binary operator 'notin' (line 1666)
        result_contains_211996 = python_operator(stypy.reporting.localization.Localization(__file__, 1666, 39), 'notin', im_211993, collections_211995)
        
        # Applying the binary operator 'and' (line 1666)
        result_and_keyword_211997 = python_operator(stypy.reporting.localization.Localization(__file__, 1666, 13), 'and', result_contains_211992, result_contains_211996)
        
        # Testing the type of an if condition (line 1666)
        if_condition_211998 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1666, 13), result_and_keyword_211997)
        # Assigning a type to the variable 'if_condition_211998' (line 1666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1666, 13), 'if_condition_211998', if_condition_211998)
        # SSA begins for if statement (line 1666)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1667)
        # Processing the call arguments (line 1667)
        unicode_212000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1668, 16), 'unicode', u'Argument must be an image, collection, or ContourSet in this Axes')
        # Processing the call keyword arguments (line 1667)
        kwargs_212001 = {}
        # Getting the type of 'ValueError' (line 1667)
        ValueError_211999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1667)
        ValueError_call_result_212002 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 18), ValueError_211999, *[unicode_212000], **kwargs_212001)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1667, 12), ValueError_call_result_212002, 'raise parameter', BaseException)
        # SSA join for if statement (line 1666)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1662)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1670):
        
        # Assigning a Name to a Attribute (line 1670):
        # Getting the type of 'im' (line 1670)
        im_212003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 30), 'im')
        # Getting the type of 'self' (line 1670)
        self_212004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'self')
        # Setting the type of the member '_current_image' of a type (line 1670)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 8), self_212004, '_current_image', im_212003)
        
        # ################# End of '_sci(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_sci' in the type store
        # Getting the type of 'stypy_return_type' (line 1657)
        stypy_return_type_212005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212005)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_sci'
        return stypy_return_type_212005


    @norecursion
    def _gci(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_gci'
        module_type_store = module_type_store.open_function_context('_gci', 1672, 4, False)
        # Assigning a type to the variable 'self' (line 1673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1673, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._gci.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._gci.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._gci.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._gci.__dict__.__setitem__('stypy_function_name', '_AxesBase._gci')
        _AxesBase._gci.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase._gci.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._gci.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._gci.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._gci.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._gci.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._gci.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._gci', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_gci', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_gci(...)' code ##################

        unicode_212006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, (-1)), 'unicode', u'\n        Helper for :func:`~matplotlib.pyplot.gci`;\n        do not use elsewhere.\n        ')
        # Getting the type of 'self' (line 1677)
        self_212007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 15), 'self')
        # Obtaining the member '_current_image' of a type (line 1677)
        _current_image_212008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 15), self_212007, '_current_image')
        # Assigning a type to the variable 'stypy_return_type' (line 1677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 8), 'stypy_return_type', _current_image_212008)
        
        # ################# End of '_gci(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_gci' in the type store
        # Getting the type of 'stypy_return_type' (line 1672)
        stypy_return_type_212009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212009)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_gci'
        return stypy_return_type_212009


    @norecursion
    def has_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'has_data'
        module_type_store = module_type_store.open_function_context('has_data', 1679, 4, False)
        # Assigning a type to the variable 'self' (line 1680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1680, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.has_data.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.has_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.has_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.has_data.__dict__.__setitem__('stypy_function_name', '_AxesBase.has_data')
        _AxesBase.has_data.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.has_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.has_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.has_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.has_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.has_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.has_data.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.has_data', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'has_data', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'has_data(...)' code ##################

        unicode_212010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, (-1)), 'unicode', u'\n        Return *True* if any artists have been added to axes.\n\n        This should not be used to determine whether the *dataLim*\n        need to be updated, and may not actually be useful for\n        anything.\n        ')
        
        
        # Call to len(...): (line 1688)
        # Processing the call arguments (line 1688)
        # Getting the type of 'self' (line 1688)
        self_212012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 16), 'self', False)
        # Obtaining the member 'collections' of a type (line 1688)
        collections_212013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1688, 16), self_212012, 'collections')
        # Processing the call keyword arguments (line 1688)
        kwargs_212014 = {}
        # Getting the type of 'len' (line 1688)
        len_212011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 12), 'len', False)
        # Calling len(args, kwargs) (line 1688)
        len_call_result_212015 = invoke(stypy.reporting.localization.Localization(__file__, 1688, 12), len_212011, *[collections_212013], **kwargs_212014)
        
        
        # Call to len(...): (line 1689)
        # Processing the call arguments (line 1689)
        # Getting the type of 'self' (line 1689)
        self_212017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 16), 'self', False)
        # Obtaining the member 'images' of a type (line 1689)
        images_212018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1689, 16), self_212017, 'images')
        # Processing the call keyword arguments (line 1689)
        kwargs_212019 = {}
        # Getting the type of 'len' (line 1689)
        len_212016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 12), 'len', False)
        # Calling len(args, kwargs) (line 1689)
        len_call_result_212020 = invoke(stypy.reporting.localization.Localization(__file__, 1689, 12), len_212016, *[images_212018], **kwargs_212019)
        
        # Applying the binary operator '+' (line 1688)
        result_add_212021 = python_operator(stypy.reporting.localization.Localization(__file__, 1688, 12), '+', len_call_result_212015, len_call_result_212020)
        
        
        # Call to len(...): (line 1690)
        # Processing the call arguments (line 1690)
        # Getting the type of 'self' (line 1690)
        self_212023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 16), 'self', False)
        # Obtaining the member 'lines' of a type (line 1690)
        lines_212024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 16), self_212023, 'lines')
        # Processing the call keyword arguments (line 1690)
        kwargs_212025 = {}
        # Getting the type of 'len' (line 1690)
        len_212022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 12), 'len', False)
        # Calling len(args, kwargs) (line 1690)
        len_call_result_212026 = invoke(stypy.reporting.localization.Localization(__file__, 1690, 12), len_212022, *[lines_212024], **kwargs_212025)
        
        # Applying the binary operator '+' (line 1689)
        result_add_212027 = python_operator(stypy.reporting.localization.Localization(__file__, 1689, 29), '+', result_add_212021, len_call_result_212026)
        
        
        # Call to len(...): (line 1691)
        # Processing the call arguments (line 1691)
        # Getting the type of 'self' (line 1691)
        self_212029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 16), 'self', False)
        # Obtaining the member 'patches' of a type (line 1691)
        patches_212030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1691, 16), self_212029, 'patches')
        # Processing the call keyword arguments (line 1691)
        kwargs_212031 = {}
        # Getting the type of 'len' (line 1691)
        len_212028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 12), 'len', False)
        # Calling len(args, kwargs) (line 1691)
        len_call_result_212032 = invoke(stypy.reporting.localization.Localization(__file__, 1691, 12), len_212028, *[patches_212030], **kwargs_212031)
        
        # Applying the binary operator '+' (line 1690)
        result_add_212033 = python_operator(stypy.reporting.localization.Localization(__file__, 1690, 28), '+', result_add_212027, len_call_result_212032)
        
        int_212034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1691, 33), 'int')
        # Applying the binary operator '>' (line 1687)
        result_gt_212035 = python_operator(stypy.reporting.localization.Localization(__file__, 1687, 15), '>', result_add_212033, int_212034)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1687, 8), 'stypy_return_type', result_gt_212035)
        
        # ################# End of 'has_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'has_data' in the type store
        # Getting the type of 'stypy_return_type' (line 1679)
        stypy_return_type_212036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212036)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'has_data'
        return stypy_return_type_212036


    @norecursion
    def add_artist(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_artist'
        module_type_store = module_type_store.open_function_context('add_artist', 1693, 4, False)
        # Assigning a type to the variable 'self' (line 1694)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1694, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.add_artist.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.add_artist.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.add_artist.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.add_artist.__dict__.__setitem__('stypy_function_name', '_AxesBase.add_artist')
        _AxesBase.add_artist.__dict__.__setitem__('stypy_param_names_list', ['a'])
        _AxesBase.add_artist.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.add_artist.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.add_artist.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.add_artist.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.add_artist.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.add_artist.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.add_artist', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_artist', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_artist(...)' code ##################

        unicode_212037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1702, (-1)), 'unicode', u'Add any :class:`~matplotlib.artist.Artist` to the axes.\n\n        Use `add_artist` only for artists for which there is no dedicated\n        "add" method; and if necessary, use a method such as\n        `update_datalim` or `update_datalim_numerix` to manually update the\n        dataLim if the artist is to be included in autoscaling.\n\n        Returns the artist.\n        ')
        
        # Assigning a Name to a Attribute (line 1703):
        
        # Assigning a Name to a Attribute (line 1703):
        # Getting the type of 'self' (line 1703)
        self_212038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 17), 'self')
        # Getting the type of 'a' (line 1703)
        a_212039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 8), 'a')
        # Setting the type of the member 'axes' of a type (line 1703)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 8), a_212039, 'axes', self_212038)
        
        # Call to append(...): (line 1704)
        # Processing the call arguments (line 1704)
        # Getting the type of 'a' (line 1704)
        a_212043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 28), 'a', False)
        # Processing the call keyword arguments (line 1704)
        kwargs_212044 = {}
        # Getting the type of 'self' (line 1704)
        self_212040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 8), 'self', False)
        # Obtaining the member 'artists' of a type (line 1704)
        artists_212041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1704, 8), self_212040, 'artists')
        # Obtaining the member 'append' of a type (line 1704)
        append_212042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1704, 8), artists_212041, 'append')
        # Calling append(args, kwargs) (line 1704)
        append_call_result_212045 = invoke(stypy.reporting.localization.Localization(__file__, 1704, 8), append_212042, *[a_212043], **kwargs_212044)
        
        
        # Call to _set_artist_props(...): (line 1705)
        # Processing the call arguments (line 1705)
        # Getting the type of 'a' (line 1705)
        a_212048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 31), 'a', False)
        # Processing the call keyword arguments (line 1705)
        kwargs_212049 = {}
        # Getting the type of 'self' (line 1705)
        self_212046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 1705)
        _set_artist_props_212047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1705, 8), self_212046, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 1705)
        _set_artist_props_call_result_212050 = invoke(stypy.reporting.localization.Localization(__file__, 1705, 8), _set_artist_props_212047, *[a_212048], **kwargs_212049)
        
        
        # Call to set_clip_path(...): (line 1706)
        # Processing the call arguments (line 1706)
        # Getting the type of 'self' (line 1706)
        self_212053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 24), 'self', False)
        # Obtaining the member 'patch' of a type (line 1706)
        patch_212054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 24), self_212053, 'patch')
        # Processing the call keyword arguments (line 1706)
        kwargs_212055 = {}
        # Getting the type of 'a' (line 1706)
        a_212051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 8), 'a', False)
        # Obtaining the member 'set_clip_path' of a type (line 1706)
        set_clip_path_212052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 8), a_212051, 'set_clip_path')
        # Calling set_clip_path(args, kwargs) (line 1706)
        set_clip_path_call_result_212056 = invoke(stypy.reporting.localization.Localization(__file__, 1706, 8), set_clip_path_212052, *[patch_212054], **kwargs_212055)
        
        
        # Assigning a Lambda to a Attribute (line 1707):
        
        # Assigning a Lambda to a Attribute (line 1707):

        @norecursion
        def _stypy_temp_lambda_92(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_92'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_92', 1707, 27, True)
            # Passed parameters checking function
            _stypy_temp_lambda_92.stypy_localization = localization
            _stypy_temp_lambda_92.stypy_type_of_self = None
            _stypy_temp_lambda_92.stypy_type_store = module_type_store
            _stypy_temp_lambda_92.stypy_function_name = '_stypy_temp_lambda_92'
            _stypy_temp_lambda_92.stypy_param_names_list = ['h']
            _stypy_temp_lambda_92.stypy_varargs_param_name = None
            _stypy_temp_lambda_92.stypy_kwargs_param_name = None
            _stypy_temp_lambda_92.stypy_call_defaults = defaults
            _stypy_temp_lambda_92.stypy_call_varargs = varargs
            _stypy_temp_lambda_92.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_92', ['h'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_92', ['h'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to remove(...): (line 1707)
            # Processing the call arguments (line 1707)
            # Getting the type of 'h' (line 1707)
            h_212060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 57), 'h', False)
            # Processing the call keyword arguments (line 1707)
            kwargs_212061 = {}
            # Getting the type of 'self' (line 1707)
            self_212057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 37), 'self', False)
            # Obtaining the member 'artists' of a type (line 1707)
            artists_212058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1707, 37), self_212057, 'artists')
            # Obtaining the member 'remove' of a type (line 1707)
            remove_212059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1707, 37), artists_212058, 'remove')
            # Calling remove(args, kwargs) (line 1707)
            remove_call_result_212062 = invoke(stypy.reporting.localization.Localization(__file__, 1707, 37), remove_212059, *[h_212060], **kwargs_212061)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 1707)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1707, 27), 'stypy_return_type', remove_call_result_212062)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_92' in the type store
            # Getting the type of 'stypy_return_type' (line 1707)
            stypy_return_type_212063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 27), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_212063)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_92'
            return stypy_return_type_212063

        # Assigning a type to the variable '_stypy_temp_lambda_92' (line 1707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1707, 27), '_stypy_temp_lambda_92', _stypy_temp_lambda_92)
        # Getting the type of '_stypy_temp_lambda_92' (line 1707)
        _stypy_temp_lambda_92_212064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 27), '_stypy_temp_lambda_92')
        # Getting the type of 'a' (line 1707)
        a_212065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 8), 'a')
        # Setting the type of the member '_remove_method' of a type (line 1707)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1707, 8), a_212065, '_remove_method', _stypy_temp_lambda_92_212064)
        
        # Assigning a Name to a Attribute (line 1708):
        
        # Assigning a Name to a Attribute (line 1708):
        # Getting the type of 'True' (line 1708)
        True_212066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 21), 'True')
        # Getting the type of 'self' (line 1708)
        self_212067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1708)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 8), self_212067, 'stale', True_212066)
        # Getting the type of 'a' (line 1709)
        a_212068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 15), 'a')
        # Assigning a type to the variable 'stypy_return_type' (line 1709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1709, 8), 'stypy_return_type', a_212068)
        
        # ################# End of 'add_artist(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_artist' in the type store
        # Getting the type of 'stypy_return_type' (line 1693)
        stypy_return_type_212069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212069)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_artist'
        return stypy_return_type_212069


    @norecursion
    def add_collection(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 1711)
        True_212070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 49), 'True')
        defaults = [True_212070]
        # Create a new context for function 'add_collection'
        module_type_store = module_type_store.open_function_context('add_collection', 1711, 4, False)
        # Assigning a type to the variable 'self' (line 1712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1712, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.add_collection.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.add_collection.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.add_collection.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.add_collection.__dict__.__setitem__('stypy_function_name', '_AxesBase.add_collection')
        _AxesBase.add_collection.__dict__.__setitem__('stypy_param_names_list', ['collection', 'autolim'])
        _AxesBase.add_collection.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.add_collection.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.add_collection.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.add_collection.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.add_collection.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.add_collection.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.add_collection', ['collection', 'autolim'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_collection', localization, ['collection', 'autolim'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_collection(...)' code ##################

        unicode_212071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1717, (-1)), 'unicode', u'\n        Add a :class:`~matplotlib.collections.Collection` instance\n        to the axes.\n\n        Returns the collection.\n        ')
        
        # Assigning a Call to a Name (line 1718):
        
        # Assigning a Call to a Name (line 1718):
        
        # Call to get_label(...): (line 1718)
        # Processing the call keyword arguments (line 1718)
        kwargs_212074 = {}
        # Getting the type of 'collection' (line 1718)
        collection_212072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 16), 'collection', False)
        # Obtaining the member 'get_label' of a type (line 1718)
        get_label_212073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1718, 16), collection_212072, 'get_label')
        # Calling get_label(args, kwargs) (line 1718)
        get_label_call_result_212075 = invoke(stypy.reporting.localization.Localization(__file__, 1718, 16), get_label_212073, *[], **kwargs_212074)
        
        # Assigning a type to the variable 'label' (line 1718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1718, 8), 'label', get_label_call_result_212075)
        
        
        # Getting the type of 'label' (line 1719)
        label_212076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 15), 'label')
        # Applying the 'not' unary operator (line 1719)
        result_not__212077 = python_operator(stypy.reporting.localization.Localization(__file__, 1719, 11), 'not', label_212076)
        
        # Testing the type of an if condition (line 1719)
        if_condition_212078 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1719, 8), result_not__212077)
        # Assigning a type to the variable 'if_condition_212078' (line 1719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 8), 'if_condition_212078', if_condition_212078)
        # SSA begins for if statement (line 1719)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_label(...): (line 1720)
        # Processing the call arguments (line 1720)
        unicode_212081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 33), 'unicode', u'_collection%d')
        
        # Call to len(...): (line 1720)
        # Processing the call arguments (line 1720)
        # Getting the type of 'self' (line 1720)
        self_212083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 55), 'self', False)
        # Obtaining the member 'collections' of a type (line 1720)
        collections_212084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1720, 55), self_212083, 'collections')
        # Processing the call keyword arguments (line 1720)
        kwargs_212085 = {}
        # Getting the type of 'len' (line 1720)
        len_212082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 51), 'len', False)
        # Calling len(args, kwargs) (line 1720)
        len_call_result_212086 = invoke(stypy.reporting.localization.Localization(__file__, 1720, 51), len_212082, *[collections_212084], **kwargs_212085)
        
        # Applying the binary operator '%' (line 1720)
        result_mod_212087 = python_operator(stypy.reporting.localization.Localization(__file__, 1720, 33), '%', unicode_212081, len_call_result_212086)
        
        # Processing the call keyword arguments (line 1720)
        kwargs_212088 = {}
        # Getting the type of 'collection' (line 1720)
        collection_212079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 12), 'collection', False)
        # Obtaining the member 'set_label' of a type (line 1720)
        set_label_212080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1720, 12), collection_212079, 'set_label')
        # Calling set_label(args, kwargs) (line 1720)
        set_label_call_result_212089 = invoke(stypy.reporting.localization.Localization(__file__, 1720, 12), set_label_212080, *[result_mod_212087], **kwargs_212088)
        
        # SSA join for if statement (line 1719)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1721)
        # Processing the call arguments (line 1721)
        # Getting the type of 'collection' (line 1721)
        collection_212093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 32), 'collection', False)
        # Processing the call keyword arguments (line 1721)
        kwargs_212094 = {}
        # Getting the type of 'self' (line 1721)
        self_212090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 8), 'self', False)
        # Obtaining the member 'collections' of a type (line 1721)
        collections_212091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1721, 8), self_212090, 'collections')
        # Obtaining the member 'append' of a type (line 1721)
        append_212092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1721, 8), collections_212091, 'append')
        # Calling append(args, kwargs) (line 1721)
        append_call_result_212095 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 8), append_212092, *[collection_212093], **kwargs_212094)
        
        
        # Call to _set_artist_props(...): (line 1722)
        # Processing the call arguments (line 1722)
        # Getting the type of 'collection' (line 1722)
        collection_212098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 31), 'collection', False)
        # Processing the call keyword arguments (line 1722)
        kwargs_212099 = {}
        # Getting the type of 'self' (line 1722)
        self_212096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 1722)
        _set_artist_props_212097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1722, 8), self_212096, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 1722)
        _set_artist_props_call_result_212100 = invoke(stypy.reporting.localization.Localization(__file__, 1722, 8), _set_artist_props_212097, *[collection_212098], **kwargs_212099)
        
        
        # Type idiom detected: calculating its left and rigth part (line 1724)
        
        # Call to get_clip_path(...): (line 1724)
        # Processing the call keyword arguments (line 1724)
        kwargs_212103 = {}
        # Getting the type of 'collection' (line 1724)
        collection_212101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 11), 'collection', False)
        # Obtaining the member 'get_clip_path' of a type (line 1724)
        get_clip_path_212102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1724, 11), collection_212101, 'get_clip_path')
        # Calling get_clip_path(args, kwargs) (line 1724)
        get_clip_path_call_result_212104 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 11), get_clip_path_212102, *[], **kwargs_212103)
        
        # Getting the type of 'None' (line 1724)
        None_212105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 41), 'None')
        
        (may_be_212106, more_types_in_union_212107) = may_be_none(get_clip_path_call_result_212104, None_212105)

        if may_be_212106:

            if more_types_in_union_212107:
                # Runtime conditional SSA (line 1724)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_clip_path(...): (line 1725)
            # Processing the call arguments (line 1725)
            # Getting the type of 'self' (line 1725)
            self_212110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 37), 'self', False)
            # Obtaining the member 'patch' of a type (line 1725)
            patch_212111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1725, 37), self_212110, 'patch')
            # Processing the call keyword arguments (line 1725)
            kwargs_212112 = {}
            # Getting the type of 'collection' (line 1725)
            collection_212108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 12), 'collection', False)
            # Obtaining the member 'set_clip_path' of a type (line 1725)
            set_clip_path_212109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1725, 12), collection_212108, 'set_clip_path')
            # Calling set_clip_path(args, kwargs) (line 1725)
            set_clip_path_call_result_212113 = invoke(stypy.reporting.localization.Localization(__file__, 1725, 12), set_clip_path_212109, *[patch_212111], **kwargs_212112)
            

            if more_types_in_union_212107:
                # SSA join for if statement (line 1724)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'autolim' (line 1727)
        autolim_212114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 11), 'autolim')
        # Testing the type of an if condition (line 1727)
        if_condition_212115 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1727, 8), autolim_212114)
        # Assigning a type to the variable 'if_condition_212115' (line 1727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 8), 'if_condition_212115', if_condition_212115)
        # SSA begins for if statement (line 1727)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update_datalim(...): (line 1728)
        # Processing the call arguments (line 1728)
        
        # Call to get_datalim(...): (line 1728)
        # Processing the call arguments (line 1728)
        # Getting the type of 'self' (line 1728)
        self_212120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 55), 'self', False)
        # Obtaining the member 'transData' of a type (line 1728)
        transData_212121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1728, 55), self_212120, 'transData')
        # Processing the call keyword arguments (line 1728)
        kwargs_212122 = {}
        # Getting the type of 'collection' (line 1728)
        collection_212118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 32), 'collection', False)
        # Obtaining the member 'get_datalim' of a type (line 1728)
        get_datalim_212119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1728, 32), collection_212118, 'get_datalim')
        # Calling get_datalim(args, kwargs) (line 1728)
        get_datalim_call_result_212123 = invoke(stypy.reporting.localization.Localization(__file__, 1728, 32), get_datalim_212119, *[transData_212121], **kwargs_212122)
        
        # Processing the call keyword arguments (line 1728)
        kwargs_212124 = {}
        # Getting the type of 'self' (line 1728)
        self_212116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 12), 'self', False)
        # Obtaining the member 'update_datalim' of a type (line 1728)
        update_datalim_212117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1728, 12), self_212116, 'update_datalim')
        # Calling update_datalim(args, kwargs) (line 1728)
        update_datalim_call_result_212125 = invoke(stypy.reporting.localization.Localization(__file__, 1728, 12), update_datalim_212117, *[get_datalim_call_result_212123], **kwargs_212124)
        
        # SSA join for if statement (line 1727)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Lambda to a Attribute (line 1730):
        
        # Assigning a Lambda to a Attribute (line 1730):

        @norecursion
        def _stypy_temp_lambda_93(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_93'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_93', 1730, 36, True)
            # Passed parameters checking function
            _stypy_temp_lambda_93.stypy_localization = localization
            _stypy_temp_lambda_93.stypy_type_of_self = None
            _stypy_temp_lambda_93.stypy_type_store = module_type_store
            _stypy_temp_lambda_93.stypy_function_name = '_stypy_temp_lambda_93'
            _stypy_temp_lambda_93.stypy_param_names_list = ['h']
            _stypy_temp_lambda_93.stypy_varargs_param_name = None
            _stypy_temp_lambda_93.stypy_kwargs_param_name = None
            _stypy_temp_lambda_93.stypy_call_defaults = defaults
            _stypy_temp_lambda_93.stypy_call_varargs = varargs
            _stypy_temp_lambda_93.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_93', ['h'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_93', ['h'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to remove(...): (line 1730)
            # Processing the call arguments (line 1730)
            # Getting the type of 'h' (line 1730)
            h_212129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 70), 'h', False)
            # Processing the call keyword arguments (line 1730)
            kwargs_212130 = {}
            # Getting the type of 'self' (line 1730)
            self_212126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 46), 'self', False)
            # Obtaining the member 'collections' of a type (line 1730)
            collections_212127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 46), self_212126, 'collections')
            # Obtaining the member 'remove' of a type (line 1730)
            remove_212128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 46), collections_212127, 'remove')
            # Calling remove(args, kwargs) (line 1730)
            remove_call_result_212131 = invoke(stypy.reporting.localization.Localization(__file__, 1730, 46), remove_212128, *[h_212129], **kwargs_212130)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 1730)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 36), 'stypy_return_type', remove_call_result_212131)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_93' in the type store
            # Getting the type of 'stypy_return_type' (line 1730)
            stypy_return_type_212132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 36), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_212132)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_93'
            return stypy_return_type_212132

        # Assigning a type to the variable '_stypy_temp_lambda_93' (line 1730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 36), '_stypy_temp_lambda_93', _stypy_temp_lambda_93)
        # Getting the type of '_stypy_temp_lambda_93' (line 1730)
        _stypy_temp_lambda_93_212133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 36), '_stypy_temp_lambda_93')
        # Getting the type of 'collection' (line 1730)
        collection_212134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 8), 'collection')
        # Setting the type of the member '_remove_method' of a type (line 1730)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 8), collection_212134, '_remove_method', _stypy_temp_lambda_93_212133)
        
        # Assigning a Name to a Attribute (line 1731):
        
        # Assigning a Name to a Attribute (line 1731):
        # Getting the type of 'True' (line 1731)
        True_212135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 21), 'True')
        # Getting the type of 'self' (line 1731)
        self_212136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1731)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1731, 8), self_212136, 'stale', True_212135)
        # Getting the type of 'collection' (line 1732)
        collection_212137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 15), 'collection')
        # Assigning a type to the variable 'stypy_return_type' (line 1732)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 8), 'stypy_return_type', collection_212137)
        
        # ################# End of 'add_collection(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_collection' in the type store
        # Getting the type of 'stypy_return_type' (line 1711)
        stypy_return_type_212138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212138)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_collection'
        return stypy_return_type_212138


    @norecursion
    def add_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_image'
        module_type_store = module_type_store.open_function_context('add_image', 1734, 4, False)
        # Assigning a type to the variable 'self' (line 1735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.add_image.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.add_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.add_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.add_image.__dict__.__setitem__('stypy_function_name', '_AxesBase.add_image')
        _AxesBase.add_image.__dict__.__setitem__('stypy_param_names_list', ['image'])
        _AxesBase.add_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.add_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.add_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.add_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.add_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.add_image.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.add_image', ['image'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_image', localization, ['image'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_image(...)' code ##################

        unicode_212139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1739, (-1)), 'unicode', u'\n        Add a :class:`~matplotlib.image.AxesImage` to the axes.\n\n        Returns the image.\n        ')
        
        # Call to _set_artist_props(...): (line 1740)
        # Processing the call arguments (line 1740)
        # Getting the type of 'image' (line 1740)
        image_212142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 31), 'image', False)
        # Processing the call keyword arguments (line 1740)
        kwargs_212143 = {}
        # Getting the type of 'self' (line 1740)
        self_212140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 1740)
        _set_artist_props_212141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 8), self_212140, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 1740)
        _set_artist_props_call_result_212144 = invoke(stypy.reporting.localization.Localization(__file__, 1740, 8), _set_artist_props_212141, *[image_212142], **kwargs_212143)
        
        
        
        
        # Call to get_label(...): (line 1741)
        # Processing the call keyword arguments (line 1741)
        kwargs_212147 = {}
        # Getting the type of 'image' (line 1741)
        image_212145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 15), 'image', False)
        # Obtaining the member 'get_label' of a type (line 1741)
        get_label_212146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1741, 15), image_212145, 'get_label')
        # Calling get_label(args, kwargs) (line 1741)
        get_label_call_result_212148 = invoke(stypy.reporting.localization.Localization(__file__, 1741, 15), get_label_212146, *[], **kwargs_212147)
        
        # Applying the 'not' unary operator (line 1741)
        result_not__212149 = python_operator(stypy.reporting.localization.Localization(__file__, 1741, 11), 'not', get_label_call_result_212148)
        
        # Testing the type of an if condition (line 1741)
        if_condition_212150 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1741, 8), result_not__212149)
        # Assigning a type to the variable 'if_condition_212150' (line 1741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1741, 8), 'if_condition_212150', if_condition_212150)
        # SSA begins for if statement (line 1741)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_label(...): (line 1742)
        # Processing the call arguments (line 1742)
        unicode_212153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1742, 28), 'unicode', u'_image%d')
        
        # Call to len(...): (line 1742)
        # Processing the call arguments (line 1742)
        # Getting the type of 'self' (line 1742)
        self_212155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 45), 'self', False)
        # Obtaining the member 'images' of a type (line 1742)
        images_212156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1742, 45), self_212155, 'images')
        # Processing the call keyword arguments (line 1742)
        kwargs_212157 = {}
        # Getting the type of 'len' (line 1742)
        len_212154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 41), 'len', False)
        # Calling len(args, kwargs) (line 1742)
        len_call_result_212158 = invoke(stypy.reporting.localization.Localization(__file__, 1742, 41), len_212154, *[images_212156], **kwargs_212157)
        
        # Applying the binary operator '%' (line 1742)
        result_mod_212159 = python_operator(stypy.reporting.localization.Localization(__file__, 1742, 28), '%', unicode_212153, len_call_result_212158)
        
        # Processing the call keyword arguments (line 1742)
        kwargs_212160 = {}
        # Getting the type of 'image' (line 1742)
        image_212151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 12), 'image', False)
        # Obtaining the member 'set_label' of a type (line 1742)
        set_label_212152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1742, 12), image_212151, 'set_label')
        # Calling set_label(args, kwargs) (line 1742)
        set_label_call_result_212161 = invoke(stypy.reporting.localization.Localization(__file__, 1742, 12), set_label_212152, *[result_mod_212159], **kwargs_212160)
        
        # SSA join for if statement (line 1741)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1743)
        # Processing the call arguments (line 1743)
        # Getting the type of 'image' (line 1743)
        image_212165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 27), 'image', False)
        # Processing the call keyword arguments (line 1743)
        kwargs_212166 = {}
        # Getting the type of 'self' (line 1743)
        self_212162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 8), 'self', False)
        # Obtaining the member 'images' of a type (line 1743)
        images_212163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1743, 8), self_212162, 'images')
        # Obtaining the member 'append' of a type (line 1743)
        append_212164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1743, 8), images_212163, 'append')
        # Calling append(args, kwargs) (line 1743)
        append_call_result_212167 = invoke(stypy.reporting.localization.Localization(__file__, 1743, 8), append_212164, *[image_212165], **kwargs_212166)
        
        
        # Assigning a Lambda to a Attribute (line 1744):
        
        # Assigning a Lambda to a Attribute (line 1744):

        @norecursion
        def _stypy_temp_lambda_94(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_94'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_94', 1744, 31, True)
            # Passed parameters checking function
            _stypy_temp_lambda_94.stypy_localization = localization
            _stypy_temp_lambda_94.stypy_type_of_self = None
            _stypy_temp_lambda_94.stypy_type_store = module_type_store
            _stypy_temp_lambda_94.stypy_function_name = '_stypy_temp_lambda_94'
            _stypy_temp_lambda_94.stypy_param_names_list = ['h']
            _stypy_temp_lambda_94.stypy_varargs_param_name = None
            _stypy_temp_lambda_94.stypy_kwargs_param_name = None
            _stypy_temp_lambda_94.stypy_call_defaults = defaults
            _stypy_temp_lambda_94.stypy_call_varargs = varargs
            _stypy_temp_lambda_94.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_94', ['h'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_94', ['h'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to remove(...): (line 1744)
            # Processing the call arguments (line 1744)
            # Getting the type of 'h' (line 1744)
            h_212171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 60), 'h', False)
            # Processing the call keyword arguments (line 1744)
            kwargs_212172 = {}
            # Getting the type of 'self' (line 1744)
            self_212168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 41), 'self', False)
            # Obtaining the member 'images' of a type (line 1744)
            images_212169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1744, 41), self_212168, 'images')
            # Obtaining the member 'remove' of a type (line 1744)
            remove_212170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1744, 41), images_212169, 'remove')
            # Calling remove(args, kwargs) (line 1744)
            remove_call_result_212173 = invoke(stypy.reporting.localization.Localization(__file__, 1744, 41), remove_212170, *[h_212171], **kwargs_212172)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 1744)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 31), 'stypy_return_type', remove_call_result_212173)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_94' in the type store
            # Getting the type of 'stypy_return_type' (line 1744)
            stypy_return_type_212174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 31), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_212174)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_94'
            return stypy_return_type_212174

        # Assigning a type to the variable '_stypy_temp_lambda_94' (line 1744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 31), '_stypy_temp_lambda_94', _stypy_temp_lambda_94)
        # Getting the type of '_stypy_temp_lambda_94' (line 1744)
        _stypy_temp_lambda_94_212175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 31), '_stypy_temp_lambda_94')
        # Getting the type of 'image' (line 1744)
        image_212176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 8), 'image')
        # Setting the type of the member '_remove_method' of a type (line 1744)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1744, 8), image_212176, '_remove_method', _stypy_temp_lambda_94_212175)
        
        # Assigning a Name to a Attribute (line 1745):
        
        # Assigning a Name to a Attribute (line 1745):
        # Getting the type of 'True' (line 1745)
        True_212177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 21), 'True')
        # Getting the type of 'self' (line 1745)
        self_212178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1745)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1745, 8), self_212178, 'stale', True_212177)
        # Getting the type of 'image' (line 1746)
        image_212179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 15), 'image')
        # Assigning a type to the variable 'stypy_return_type' (line 1746)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1746, 8), 'stypy_return_type', image_212179)
        
        # ################# End of 'add_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_image' in the type store
        # Getting the type of 'stypy_return_type' (line 1734)
        stypy_return_type_212180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212180)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_image'
        return stypy_return_type_212180


    @norecursion
    def add_line(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_line'
        module_type_store = module_type_store.open_function_context('add_line', 1748, 4, False)
        # Assigning a type to the variable 'self' (line 1749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.add_line.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.add_line.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.add_line.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.add_line.__dict__.__setitem__('stypy_function_name', '_AxesBase.add_line')
        _AxesBase.add_line.__dict__.__setitem__('stypy_param_names_list', ['line'])
        _AxesBase.add_line.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.add_line.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.add_line.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.add_line.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.add_line.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.add_line.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.add_line', ['line'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_line', localization, ['line'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_line(...)' code ##################

        unicode_212181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1754, (-1)), 'unicode', u'\n        Add a :class:`~matplotlib.lines.Line2D` to the list of plot\n        lines\n\n        Returns the line.\n        ')
        
        # Call to _set_artist_props(...): (line 1755)
        # Processing the call arguments (line 1755)
        # Getting the type of 'line' (line 1755)
        line_212184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 31), 'line', False)
        # Processing the call keyword arguments (line 1755)
        kwargs_212185 = {}
        # Getting the type of 'self' (line 1755)
        self_212182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 1755)
        _set_artist_props_212183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1755, 8), self_212182, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 1755)
        _set_artist_props_call_result_212186 = invoke(stypy.reporting.localization.Localization(__file__, 1755, 8), _set_artist_props_212183, *[line_212184], **kwargs_212185)
        
        
        # Type idiom detected: calculating its left and rigth part (line 1756)
        
        # Call to get_clip_path(...): (line 1756)
        # Processing the call keyword arguments (line 1756)
        kwargs_212189 = {}
        # Getting the type of 'line' (line 1756)
        line_212187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 11), 'line', False)
        # Obtaining the member 'get_clip_path' of a type (line 1756)
        get_clip_path_212188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1756, 11), line_212187, 'get_clip_path')
        # Calling get_clip_path(args, kwargs) (line 1756)
        get_clip_path_call_result_212190 = invoke(stypy.reporting.localization.Localization(__file__, 1756, 11), get_clip_path_212188, *[], **kwargs_212189)
        
        # Getting the type of 'None' (line 1756)
        None_212191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 35), 'None')
        
        (may_be_212192, more_types_in_union_212193) = may_be_none(get_clip_path_call_result_212190, None_212191)

        if may_be_212192:

            if more_types_in_union_212193:
                # Runtime conditional SSA (line 1756)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_clip_path(...): (line 1757)
            # Processing the call arguments (line 1757)
            # Getting the type of 'self' (line 1757)
            self_212196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 31), 'self', False)
            # Obtaining the member 'patch' of a type (line 1757)
            patch_212197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1757, 31), self_212196, 'patch')
            # Processing the call keyword arguments (line 1757)
            kwargs_212198 = {}
            # Getting the type of 'line' (line 1757)
            line_212194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 12), 'line', False)
            # Obtaining the member 'set_clip_path' of a type (line 1757)
            set_clip_path_212195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1757, 12), line_212194, 'set_clip_path')
            # Calling set_clip_path(args, kwargs) (line 1757)
            set_clip_path_call_result_212199 = invoke(stypy.reporting.localization.Localization(__file__, 1757, 12), set_clip_path_212195, *[patch_212197], **kwargs_212198)
            

            if more_types_in_union_212193:
                # SSA join for if statement (line 1756)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to _update_line_limits(...): (line 1759)
        # Processing the call arguments (line 1759)
        # Getting the type of 'line' (line 1759)
        line_212202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 33), 'line', False)
        # Processing the call keyword arguments (line 1759)
        kwargs_212203 = {}
        # Getting the type of 'self' (line 1759)
        self_212200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 8), 'self', False)
        # Obtaining the member '_update_line_limits' of a type (line 1759)
        _update_line_limits_212201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1759, 8), self_212200, '_update_line_limits')
        # Calling _update_line_limits(args, kwargs) (line 1759)
        _update_line_limits_call_result_212204 = invoke(stypy.reporting.localization.Localization(__file__, 1759, 8), _update_line_limits_212201, *[line_212202], **kwargs_212203)
        
        
        
        
        # Call to get_label(...): (line 1760)
        # Processing the call keyword arguments (line 1760)
        kwargs_212207 = {}
        # Getting the type of 'line' (line 1760)
        line_212205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 15), 'line', False)
        # Obtaining the member 'get_label' of a type (line 1760)
        get_label_212206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1760, 15), line_212205, 'get_label')
        # Calling get_label(args, kwargs) (line 1760)
        get_label_call_result_212208 = invoke(stypy.reporting.localization.Localization(__file__, 1760, 15), get_label_212206, *[], **kwargs_212207)
        
        # Applying the 'not' unary operator (line 1760)
        result_not__212209 = python_operator(stypy.reporting.localization.Localization(__file__, 1760, 11), 'not', get_label_call_result_212208)
        
        # Testing the type of an if condition (line 1760)
        if_condition_212210 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1760, 8), result_not__212209)
        # Assigning a type to the variable 'if_condition_212210' (line 1760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 8), 'if_condition_212210', if_condition_212210)
        # SSA begins for if statement (line 1760)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_label(...): (line 1761)
        # Processing the call arguments (line 1761)
        unicode_212213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1761, 27), 'unicode', u'_line%d')
        
        # Call to len(...): (line 1761)
        # Processing the call arguments (line 1761)
        # Getting the type of 'self' (line 1761)
        self_212215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 43), 'self', False)
        # Obtaining the member 'lines' of a type (line 1761)
        lines_212216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1761, 43), self_212215, 'lines')
        # Processing the call keyword arguments (line 1761)
        kwargs_212217 = {}
        # Getting the type of 'len' (line 1761)
        len_212214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 39), 'len', False)
        # Calling len(args, kwargs) (line 1761)
        len_call_result_212218 = invoke(stypy.reporting.localization.Localization(__file__, 1761, 39), len_212214, *[lines_212216], **kwargs_212217)
        
        # Applying the binary operator '%' (line 1761)
        result_mod_212219 = python_operator(stypy.reporting.localization.Localization(__file__, 1761, 27), '%', unicode_212213, len_call_result_212218)
        
        # Processing the call keyword arguments (line 1761)
        kwargs_212220 = {}
        # Getting the type of 'line' (line 1761)
        line_212211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 12), 'line', False)
        # Obtaining the member 'set_label' of a type (line 1761)
        set_label_212212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1761, 12), line_212211, 'set_label')
        # Calling set_label(args, kwargs) (line 1761)
        set_label_call_result_212221 = invoke(stypy.reporting.localization.Localization(__file__, 1761, 12), set_label_212212, *[result_mod_212219], **kwargs_212220)
        
        # SSA join for if statement (line 1760)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1762)
        # Processing the call arguments (line 1762)
        # Getting the type of 'line' (line 1762)
        line_212225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 26), 'line', False)
        # Processing the call keyword arguments (line 1762)
        kwargs_212226 = {}
        # Getting the type of 'self' (line 1762)
        self_212222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'self', False)
        # Obtaining the member 'lines' of a type (line 1762)
        lines_212223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 8), self_212222, 'lines')
        # Obtaining the member 'append' of a type (line 1762)
        append_212224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 8), lines_212223, 'append')
        # Calling append(args, kwargs) (line 1762)
        append_call_result_212227 = invoke(stypy.reporting.localization.Localization(__file__, 1762, 8), append_212224, *[line_212225], **kwargs_212226)
        
        
        # Assigning a Lambda to a Attribute (line 1763):
        
        # Assigning a Lambda to a Attribute (line 1763):

        @norecursion
        def _stypy_temp_lambda_95(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_95'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_95', 1763, 30, True)
            # Passed parameters checking function
            _stypy_temp_lambda_95.stypy_localization = localization
            _stypy_temp_lambda_95.stypy_type_of_self = None
            _stypy_temp_lambda_95.stypy_type_store = module_type_store
            _stypy_temp_lambda_95.stypy_function_name = '_stypy_temp_lambda_95'
            _stypy_temp_lambda_95.stypy_param_names_list = ['h']
            _stypy_temp_lambda_95.stypy_varargs_param_name = None
            _stypy_temp_lambda_95.stypy_kwargs_param_name = None
            _stypy_temp_lambda_95.stypy_call_defaults = defaults
            _stypy_temp_lambda_95.stypy_call_varargs = varargs
            _stypy_temp_lambda_95.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_95', ['h'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_95', ['h'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to remove(...): (line 1763)
            # Processing the call arguments (line 1763)
            # Getting the type of 'h' (line 1763)
            h_212231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 58), 'h', False)
            # Processing the call keyword arguments (line 1763)
            kwargs_212232 = {}
            # Getting the type of 'self' (line 1763)
            self_212228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 40), 'self', False)
            # Obtaining the member 'lines' of a type (line 1763)
            lines_212229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1763, 40), self_212228, 'lines')
            # Obtaining the member 'remove' of a type (line 1763)
            remove_212230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1763, 40), lines_212229, 'remove')
            # Calling remove(args, kwargs) (line 1763)
            remove_call_result_212233 = invoke(stypy.reporting.localization.Localization(__file__, 1763, 40), remove_212230, *[h_212231], **kwargs_212232)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 1763)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 30), 'stypy_return_type', remove_call_result_212233)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_95' in the type store
            # Getting the type of 'stypy_return_type' (line 1763)
            stypy_return_type_212234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 30), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_212234)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_95'
            return stypy_return_type_212234

        # Assigning a type to the variable '_stypy_temp_lambda_95' (line 1763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 30), '_stypy_temp_lambda_95', _stypy_temp_lambda_95)
        # Getting the type of '_stypy_temp_lambda_95' (line 1763)
        _stypy_temp_lambda_95_212235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 30), '_stypy_temp_lambda_95')
        # Getting the type of 'line' (line 1763)
        line_212236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 8), 'line')
        # Setting the type of the member '_remove_method' of a type (line 1763)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1763, 8), line_212236, '_remove_method', _stypy_temp_lambda_95_212235)
        
        # Assigning a Name to a Attribute (line 1764):
        
        # Assigning a Name to a Attribute (line 1764):
        # Getting the type of 'True' (line 1764)
        True_212237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 21), 'True')
        # Getting the type of 'self' (line 1764)
        self_212238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1764)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1764, 8), self_212238, 'stale', True_212237)
        # Getting the type of 'line' (line 1765)
        line_212239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 15), 'line')
        # Assigning a type to the variable 'stypy_return_type' (line 1765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1765, 8), 'stypy_return_type', line_212239)
        
        # ################# End of 'add_line(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_line' in the type store
        # Getting the type of 'stypy_return_type' (line 1748)
        stypy_return_type_212240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212240)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_line'
        return stypy_return_type_212240


    @norecursion
    def _add_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_add_text'
        module_type_store = module_type_store.open_function_context('_add_text', 1767, 4, False)
        # Assigning a type to the variable 'self' (line 1768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1768, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._add_text.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._add_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._add_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._add_text.__dict__.__setitem__('stypy_function_name', '_AxesBase._add_text')
        _AxesBase._add_text.__dict__.__setitem__('stypy_param_names_list', ['txt'])
        _AxesBase._add_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._add_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._add_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._add_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._add_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._add_text.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._add_text', ['txt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_add_text', localization, ['txt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_add_text(...)' code ##################

        unicode_212241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1770, (-1)), 'unicode', u'\n\n        ')
        
        # Call to _set_artist_props(...): (line 1771)
        # Processing the call arguments (line 1771)
        # Getting the type of 'txt' (line 1771)
        txt_212244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 31), 'txt', False)
        # Processing the call keyword arguments (line 1771)
        kwargs_212245 = {}
        # Getting the type of 'self' (line 1771)
        self_212242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 1771)
        _set_artist_props_212243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 8), self_212242, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 1771)
        _set_artist_props_call_result_212246 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 8), _set_artist_props_212243, *[txt_212244], **kwargs_212245)
        
        
        # Call to append(...): (line 1772)
        # Processing the call arguments (line 1772)
        # Getting the type of 'txt' (line 1772)
        txt_212250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 26), 'txt', False)
        # Processing the call keyword arguments (line 1772)
        kwargs_212251 = {}
        # Getting the type of 'self' (line 1772)
        self_212247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 8), 'self', False)
        # Obtaining the member 'texts' of a type (line 1772)
        texts_212248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1772, 8), self_212247, 'texts')
        # Obtaining the member 'append' of a type (line 1772)
        append_212249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1772, 8), texts_212248, 'append')
        # Calling append(args, kwargs) (line 1772)
        append_call_result_212252 = invoke(stypy.reporting.localization.Localization(__file__, 1772, 8), append_212249, *[txt_212250], **kwargs_212251)
        
        
        # Assigning a Lambda to a Attribute (line 1773):
        
        # Assigning a Lambda to a Attribute (line 1773):

        @norecursion
        def _stypy_temp_lambda_96(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_96'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_96', 1773, 29, True)
            # Passed parameters checking function
            _stypy_temp_lambda_96.stypy_localization = localization
            _stypy_temp_lambda_96.stypy_type_of_self = None
            _stypy_temp_lambda_96.stypy_type_store = module_type_store
            _stypy_temp_lambda_96.stypy_function_name = '_stypy_temp_lambda_96'
            _stypy_temp_lambda_96.stypy_param_names_list = ['h']
            _stypy_temp_lambda_96.stypy_varargs_param_name = None
            _stypy_temp_lambda_96.stypy_kwargs_param_name = None
            _stypy_temp_lambda_96.stypy_call_defaults = defaults
            _stypy_temp_lambda_96.stypy_call_varargs = varargs
            _stypy_temp_lambda_96.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_96', ['h'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_96', ['h'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to remove(...): (line 1773)
            # Processing the call arguments (line 1773)
            # Getting the type of 'h' (line 1773)
            h_212256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 57), 'h', False)
            # Processing the call keyword arguments (line 1773)
            kwargs_212257 = {}
            # Getting the type of 'self' (line 1773)
            self_212253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 39), 'self', False)
            # Obtaining the member 'texts' of a type (line 1773)
            texts_212254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 39), self_212253, 'texts')
            # Obtaining the member 'remove' of a type (line 1773)
            remove_212255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 39), texts_212254, 'remove')
            # Calling remove(args, kwargs) (line 1773)
            remove_call_result_212258 = invoke(stypy.reporting.localization.Localization(__file__, 1773, 39), remove_212255, *[h_212256], **kwargs_212257)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 1773)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1773, 29), 'stypy_return_type', remove_call_result_212258)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_96' in the type store
            # Getting the type of 'stypy_return_type' (line 1773)
            stypy_return_type_212259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 29), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_212259)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_96'
            return stypy_return_type_212259

        # Assigning a type to the variable '_stypy_temp_lambda_96' (line 1773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1773, 29), '_stypy_temp_lambda_96', _stypy_temp_lambda_96)
        # Getting the type of '_stypy_temp_lambda_96' (line 1773)
        _stypy_temp_lambda_96_212260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 29), '_stypy_temp_lambda_96')
        # Getting the type of 'txt' (line 1773)
        txt_212261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 8), 'txt')
        # Setting the type of the member '_remove_method' of a type (line 1773)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 8), txt_212261, '_remove_method', _stypy_temp_lambda_96_212260)
        
        # Assigning a Name to a Attribute (line 1774):
        
        # Assigning a Name to a Attribute (line 1774):
        # Getting the type of 'True' (line 1774)
        True_212262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 21), 'True')
        # Getting the type of 'self' (line 1774)
        self_212263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1774)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1774, 8), self_212263, 'stale', True_212262)
        # Getting the type of 'txt' (line 1775)
        txt_212264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 15), 'txt')
        # Assigning a type to the variable 'stypy_return_type' (line 1775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 8), 'stypy_return_type', txt_212264)
        
        # ################# End of '_add_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_add_text' in the type store
        # Getting the type of 'stypy_return_type' (line 1767)
        stypy_return_type_212265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212265)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_add_text'
        return stypy_return_type_212265


    @norecursion
    def _update_line_limits(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_line_limits'
        module_type_store = module_type_store.open_function_context('_update_line_limits', 1777, 4, False)
        # Assigning a type to the variable 'self' (line 1778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._update_line_limits.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._update_line_limits.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._update_line_limits.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._update_line_limits.__dict__.__setitem__('stypy_function_name', '_AxesBase._update_line_limits')
        _AxesBase._update_line_limits.__dict__.__setitem__('stypy_param_names_list', ['line'])
        _AxesBase._update_line_limits.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._update_line_limits.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._update_line_limits.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._update_line_limits.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._update_line_limits.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._update_line_limits.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._update_line_limits', ['line'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_line_limits', localization, ['line'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_line_limits(...)' code ##################

        unicode_212266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1780, (-1)), 'unicode', u'\n        Figures out the data limit of the given line, updating self.dataLim.\n        ')
        
        # Assigning a Call to a Name (line 1781):
        
        # Assigning a Call to a Name (line 1781):
        
        # Call to get_path(...): (line 1781)
        # Processing the call keyword arguments (line 1781)
        kwargs_212269 = {}
        # Getting the type of 'line' (line 1781)
        line_212267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 15), 'line', False)
        # Obtaining the member 'get_path' of a type (line 1781)
        get_path_212268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 15), line_212267, 'get_path')
        # Calling get_path(args, kwargs) (line 1781)
        get_path_call_result_212270 = invoke(stypy.reporting.localization.Localization(__file__, 1781, 15), get_path_212268, *[], **kwargs_212269)
        
        # Assigning a type to the variable 'path' (line 1781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1781, 8), 'path', get_path_call_result_212270)
        
        
        # Getting the type of 'path' (line 1782)
        path_212271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 11), 'path')
        # Obtaining the member 'vertices' of a type (line 1782)
        vertices_212272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 11), path_212271, 'vertices')
        # Obtaining the member 'size' of a type (line 1782)
        size_212273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 11), vertices_212272, 'size')
        int_212274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1782, 33), 'int')
        # Applying the binary operator '==' (line 1782)
        result_eq_212275 = python_operator(stypy.reporting.localization.Localization(__file__, 1782, 11), '==', size_212273, int_212274)
        
        # Testing the type of an if condition (line 1782)
        if_condition_212276 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1782, 8), result_eq_212275)
        # Assigning a type to the variable 'if_condition_212276' (line 1782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1782, 8), 'if_condition_212276', if_condition_212276)
        # SSA begins for if statement (line 1782)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1783, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1782)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1785):
        
        # Assigning a Call to a Name (line 1785):
        
        # Call to get_transform(...): (line 1785)
        # Processing the call keyword arguments (line 1785)
        kwargs_212279 = {}
        # Getting the type of 'line' (line 1785)
        line_212277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 21), 'line', False)
        # Obtaining the member 'get_transform' of a type (line 1785)
        get_transform_212278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1785, 21), line_212277, 'get_transform')
        # Calling get_transform(args, kwargs) (line 1785)
        get_transform_call_result_212280 = invoke(stypy.reporting.localization.Localization(__file__, 1785, 21), get_transform_212278, *[], **kwargs_212279)
        
        # Assigning a type to the variable 'line_trans' (line 1785)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1785, 8), 'line_trans', get_transform_call_result_212280)
        
        
        # Getting the type of 'line_trans' (line 1787)
        line_trans_212281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 11), 'line_trans')
        # Getting the type of 'self' (line 1787)
        self_212282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 25), 'self')
        # Obtaining the member 'transData' of a type (line 1787)
        transData_212283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1787, 25), self_212282, 'transData')
        # Applying the binary operator '==' (line 1787)
        result_eq_212284 = python_operator(stypy.reporting.localization.Localization(__file__, 1787, 11), '==', line_trans_212281, transData_212283)
        
        # Testing the type of an if condition (line 1787)
        if_condition_212285 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1787, 8), result_eq_212284)
        # Assigning a type to the variable 'if_condition_212285' (line 1787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 8), 'if_condition_212285', if_condition_212285)
        # SSA begins for if statement (line 1787)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1788):
        
        # Assigning a Name to a Name (line 1788):
        # Getting the type of 'path' (line 1788)
        path_212286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 24), 'path')
        # Assigning a type to the variable 'data_path' (line 1788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1788, 12), 'data_path', path_212286)
        # SSA branch for the else part of an if statement (line 1787)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to any(...): (line 1790)
        # Processing the call arguments (line 1790)
        
        # Call to contains_branch_seperately(...): (line 1790)
        # Processing the call arguments (line 1790)
        # Getting the type of 'self' (line 1790)
        self_212290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 55), 'self', False)
        # Obtaining the member 'transData' of a type (line 1790)
        transData_212291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1790, 55), self_212290, 'transData')
        # Processing the call keyword arguments (line 1790)
        kwargs_212292 = {}
        # Getting the type of 'line_trans' (line 1790)
        line_trans_212288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 17), 'line_trans', False)
        # Obtaining the member 'contains_branch_seperately' of a type (line 1790)
        contains_branch_seperately_212289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1790, 17), line_trans_212288, 'contains_branch_seperately')
        # Calling contains_branch_seperately(args, kwargs) (line 1790)
        contains_branch_seperately_call_result_212293 = invoke(stypy.reporting.localization.Localization(__file__, 1790, 17), contains_branch_seperately_212289, *[transData_212291], **kwargs_212292)
        
        # Processing the call keyword arguments (line 1790)
        kwargs_212294 = {}
        # Getting the type of 'any' (line 1790)
        any_212287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 13), 'any', False)
        # Calling any(args, kwargs) (line 1790)
        any_call_result_212295 = invoke(stypy.reporting.localization.Localization(__file__, 1790, 13), any_212287, *[contains_branch_seperately_call_result_212293], **kwargs_212294)
        
        # Testing the type of an if condition (line 1790)
        if_condition_212296 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1790, 13), any_call_result_212295)
        # Assigning a type to the variable 'if_condition_212296' (line 1790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 13), 'if_condition_212296', if_condition_212296)
        # SSA begins for if statement (line 1790)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1793):
        
        # Assigning a BinOp to a Name (line 1793):
        # Getting the type of 'line_trans' (line 1793)
        line_trans_212297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 28), 'line_trans')
        # Getting the type of 'self' (line 1793)
        self_212298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 41), 'self')
        # Obtaining the member 'transData' of a type (line 1793)
        transData_212299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1793, 41), self_212298, 'transData')
        # Applying the binary operator '-' (line 1793)
        result_sub_212300 = python_operator(stypy.reporting.localization.Localization(__file__, 1793, 28), '-', line_trans_212297, transData_212299)
        
        # Assigning a type to the variable 'trans_to_data' (line 1793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 12), 'trans_to_data', result_sub_212300)
        
        # Getting the type of 'self' (line 1798)
        self_212301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 15), 'self')
        # Obtaining the member 'transData' of a type (line 1798)
        transData_212302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1798, 15), self_212301, 'transData')
        # Obtaining the member 'is_affine' of a type (line 1798)
        is_affine_212303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1798, 15), transData_212302, 'is_affine')
        # Testing the type of an if condition (line 1798)
        if_condition_212304 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1798, 12), is_affine_212303)
        # Assigning a type to the variable 'if_condition_212304' (line 1798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1798, 12), 'if_condition_212304', if_condition_212304)
        # SSA begins for if statement (line 1798)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1799):
        
        # Assigning a Call to a Name (line 1799):
        
        # Call to _get_transformed_path(...): (line 1799)
        # Processing the call keyword arguments (line 1799)
        kwargs_212307 = {}
        # Getting the type of 'line' (line 1799)
        line_212305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 34), 'line', False)
        # Obtaining the member '_get_transformed_path' of a type (line 1799)
        _get_transformed_path_212306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1799, 34), line_212305, '_get_transformed_path')
        # Calling _get_transformed_path(args, kwargs) (line 1799)
        _get_transformed_path_call_result_212308 = invoke(stypy.reporting.localization.Localization(__file__, 1799, 34), _get_transformed_path_212306, *[], **kwargs_212307)
        
        # Assigning a type to the variable 'line_trans_path' (line 1799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1799, 16), 'line_trans_path', _get_transformed_path_call_result_212308)
        
        # Assigning a Call to a Tuple (line 1800):
        
        # Assigning a Call to a Name:
        
        # Call to get_transformed_path_and_affine(...): (line 1800)
        # Processing the call keyword arguments (line 1800)
        kwargs_212311 = {}
        # Getting the type of 'line_trans_path' (line 1800)
        line_trans_path_212309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 29), 'line_trans_path', False)
        # Obtaining the member 'get_transformed_path_and_affine' of a type (line 1800)
        get_transformed_path_and_affine_212310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1800, 29), line_trans_path_212309, 'get_transformed_path_and_affine')
        # Calling get_transformed_path_and_affine(args, kwargs) (line 1800)
        get_transformed_path_and_affine_call_result_212312 = invoke(stypy.reporting.localization.Localization(__file__, 1800, 29), get_transformed_path_and_affine_212310, *[], **kwargs_212311)
        
        # Assigning a type to the variable 'call_assignment_207764' (line 1800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 16), 'call_assignment_207764', get_transformed_path_and_affine_call_result_212312)
        
        # Assigning a Call to a Name (line 1800):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_212315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1800, 16), 'int')
        # Processing the call keyword arguments
        kwargs_212316 = {}
        # Getting the type of 'call_assignment_207764' (line 1800)
        call_assignment_207764_212313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 16), 'call_assignment_207764', False)
        # Obtaining the member '__getitem__' of a type (line 1800)
        getitem___212314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1800, 16), call_assignment_207764_212313, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_212317 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___212314, *[int_212315], **kwargs_212316)
        
        # Assigning a type to the variable 'call_assignment_207765' (line 1800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 16), 'call_assignment_207765', getitem___call_result_212317)
        
        # Assigning a Name to a Name (line 1800):
        # Getting the type of 'call_assignment_207765' (line 1800)
        call_assignment_207765_212318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 16), 'call_assignment_207765')
        # Assigning a type to the variable 'na_path' (line 1800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 16), 'na_path', call_assignment_207765_212318)
        
        # Assigning a Call to a Name (line 1800):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_212321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1800, 16), 'int')
        # Processing the call keyword arguments
        kwargs_212322 = {}
        # Getting the type of 'call_assignment_207764' (line 1800)
        call_assignment_207764_212319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 16), 'call_assignment_207764', False)
        # Obtaining the member '__getitem__' of a type (line 1800)
        getitem___212320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1800, 16), call_assignment_207764_212319, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_212323 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___212320, *[int_212321], **kwargs_212322)
        
        # Assigning a type to the variable 'call_assignment_207766' (line 1800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 16), 'call_assignment_207766', getitem___call_result_212323)
        
        # Assigning a Name to a Name (line 1800):
        # Getting the type of 'call_assignment_207766' (line 1800)
        call_assignment_207766_212324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 16), 'call_assignment_207766')
        # Assigning a type to the variable '_' (line 1800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 25), '_', call_assignment_207766_212324)
        
        # Assigning a Call to a Name (line 1801):
        
        # Assigning a Call to a Name (line 1801):
        
        # Call to transform_path_affine(...): (line 1801)
        # Processing the call arguments (line 1801)
        # Getting the type of 'na_path' (line 1801)
        na_path_212327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 64), 'na_path', False)
        # Processing the call keyword arguments (line 1801)
        kwargs_212328 = {}
        # Getting the type of 'trans_to_data' (line 1801)
        trans_to_data_212325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 28), 'trans_to_data', False)
        # Obtaining the member 'transform_path_affine' of a type (line 1801)
        transform_path_affine_212326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1801, 28), trans_to_data_212325, 'transform_path_affine')
        # Calling transform_path_affine(args, kwargs) (line 1801)
        transform_path_affine_call_result_212329 = invoke(stypy.reporting.localization.Localization(__file__, 1801, 28), transform_path_affine_212326, *[na_path_212327], **kwargs_212328)
        
        # Assigning a type to the variable 'data_path' (line 1801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 16), 'data_path', transform_path_affine_call_result_212329)
        # SSA branch for the else part of an if statement (line 1798)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1803):
        
        # Assigning a Call to a Name (line 1803):
        
        # Call to transform_path(...): (line 1803)
        # Processing the call arguments (line 1803)
        # Getting the type of 'path' (line 1803)
        path_212332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 57), 'path', False)
        # Processing the call keyword arguments (line 1803)
        kwargs_212333 = {}
        # Getting the type of 'trans_to_data' (line 1803)
        trans_to_data_212330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 28), 'trans_to_data', False)
        # Obtaining the member 'transform_path' of a type (line 1803)
        transform_path_212331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1803, 28), trans_to_data_212330, 'transform_path')
        # Calling transform_path(args, kwargs) (line 1803)
        transform_path_call_result_212334 = invoke(stypy.reporting.localization.Localization(__file__, 1803, 28), transform_path_212331, *[path_212332], **kwargs_212333)
        
        # Assigning a type to the variable 'data_path' (line 1803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1803, 16), 'data_path', transform_path_call_result_212334)
        # SSA join for if statement (line 1798)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1790)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1810):
        
        # Assigning a Name to a Name (line 1810):
        # Getting the type of 'path' (line 1810)
        path_212335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 24), 'path')
        # Assigning a type to the variable 'data_path' (line 1810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1810, 12), 'data_path', path_212335)
        # SSA join for if statement (line 1790)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1787)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'data_path' (line 1812)
        data_path_212336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 11), 'data_path')
        # Obtaining the member 'vertices' of a type (line 1812)
        vertices_212337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1812, 11), data_path_212336, 'vertices')
        # Obtaining the member 'size' of a type (line 1812)
        size_212338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1812, 11), vertices_212337, 'size')
        int_212339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1812, 37), 'int')
        # Applying the binary operator '>' (line 1812)
        result_gt_212340 = python_operator(stypy.reporting.localization.Localization(__file__, 1812, 11), '>', size_212338, int_212339)
        
        # Testing the type of an if condition (line 1812)
        if_condition_212341 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1812, 8), result_gt_212340)
        # Assigning a type to the variable 'if_condition_212341' (line 1812)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 8), 'if_condition_212341', if_condition_212341)
        # SSA begins for if statement (line 1812)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1813):
        
        # Assigning a Call to a Name:
        
        # Call to contains_branch_seperately(...): (line 1813)
        # Processing the call arguments (line 1813)
        # Getting the type of 'self' (line 1814)
        self_212344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 16), 'self', False)
        # Obtaining the member 'transData' of a type (line 1814)
        transData_212345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 16), self_212344, 'transData')
        # Processing the call keyword arguments (line 1813)
        kwargs_212346 = {}
        # Getting the type of 'line_trans' (line 1813)
        line_trans_212342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 31), 'line_trans', False)
        # Obtaining the member 'contains_branch_seperately' of a type (line 1813)
        contains_branch_seperately_212343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 31), line_trans_212342, 'contains_branch_seperately')
        # Calling contains_branch_seperately(args, kwargs) (line 1813)
        contains_branch_seperately_call_result_212347 = invoke(stypy.reporting.localization.Localization(__file__, 1813, 31), contains_branch_seperately_212343, *[transData_212345], **kwargs_212346)
        
        # Assigning a type to the variable 'call_assignment_207767' (line 1813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 12), 'call_assignment_207767', contains_branch_seperately_call_result_212347)
        
        # Assigning a Call to a Name (line 1813):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_212350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 12), 'int')
        # Processing the call keyword arguments
        kwargs_212351 = {}
        # Getting the type of 'call_assignment_207767' (line 1813)
        call_assignment_207767_212348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 12), 'call_assignment_207767', False)
        # Obtaining the member '__getitem__' of a type (line 1813)
        getitem___212349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 12), call_assignment_207767_212348, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_212352 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___212349, *[int_212350], **kwargs_212351)
        
        # Assigning a type to the variable 'call_assignment_207768' (line 1813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 12), 'call_assignment_207768', getitem___call_result_212352)
        
        # Assigning a Name to a Name (line 1813):
        # Getting the type of 'call_assignment_207768' (line 1813)
        call_assignment_207768_212353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 12), 'call_assignment_207768')
        # Assigning a type to the variable 'updatex' (line 1813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 12), 'updatex', call_assignment_207768_212353)
        
        # Assigning a Call to a Name (line 1813):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_212356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 12), 'int')
        # Processing the call keyword arguments
        kwargs_212357 = {}
        # Getting the type of 'call_assignment_207767' (line 1813)
        call_assignment_207767_212354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 12), 'call_assignment_207767', False)
        # Obtaining the member '__getitem__' of a type (line 1813)
        getitem___212355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 12), call_assignment_207767_212354, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_212358 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___212355, *[int_212356], **kwargs_212357)
        
        # Assigning a type to the variable 'call_assignment_207769' (line 1813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 12), 'call_assignment_207769', getitem___call_result_212358)
        
        # Assigning a Name to a Name (line 1813):
        # Getting the type of 'call_assignment_207769' (line 1813)
        call_assignment_207769_212359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 12), 'call_assignment_207769')
        # Assigning a type to the variable 'updatey' (line 1813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 21), 'updatey', call_assignment_207769_212359)
        
        # Call to update_from_path(...): (line 1815)
        # Processing the call arguments (line 1815)
        # Getting the type of 'data_path' (line 1815)
        data_path_212363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 42), 'data_path', False)
        # Getting the type of 'self' (line 1816)
        self_212364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 42), 'self', False)
        # Obtaining the member 'ignore_existing_data_limits' of a type (line 1816)
        ignore_existing_data_limits_212365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1816, 42), self_212364, 'ignore_existing_data_limits')
        # Processing the call keyword arguments (line 1815)
        # Getting the type of 'updatex' (line 1817)
        updatex_212366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 50), 'updatex', False)
        keyword_212367 = updatex_212366
        # Getting the type of 'updatey' (line 1818)
        updatey_212368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 50), 'updatey', False)
        keyword_212369 = updatey_212368
        kwargs_212370 = {'updatex': keyword_212367, 'updatey': keyword_212369}
        # Getting the type of 'self' (line 1815)
        self_212360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 12), 'self', False)
        # Obtaining the member 'dataLim' of a type (line 1815)
        dataLim_212361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1815, 12), self_212360, 'dataLim')
        # Obtaining the member 'update_from_path' of a type (line 1815)
        update_from_path_212362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1815, 12), dataLim_212361, 'update_from_path')
        # Calling update_from_path(args, kwargs) (line 1815)
        update_from_path_call_result_212371 = invoke(stypy.reporting.localization.Localization(__file__, 1815, 12), update_from_path_212362, *[data_path_212363, ignore_existing_data_limits_212365], **kwargs_212370)
        
        
        # Assigning a Name to a Attribute (line 1819):
        
        # Assigning a Name to a Attribute (line 1819):
        # Getting the type of 'False' (line 1819)
        False_212372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 47), 'False')
        # Getting the type of 'self' (line 1819)
        self_212373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 12), 'self')
        # Setting the type of the member 'ignore_existing_data_limits' of a type (line 1819)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1819, 12), self_212373, 'ignore_existing_data_limits', False_212372)
        # SSA join for if statement (line 1812)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_update_line_limits(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_line_limits' in the type store
        # Getting the type of 'stypy_return_type' (line 1777)
        stypy_return_type_212374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212374)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_line_limits'
        return stypy_return_type_212374


    @norecursion
    def add_patch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_patch'
        module_type_store = module_type_store.open_function_context('add_patch', 1821, 4, False)
        # Assigning a type to the variable 'self' (line 1822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.add_patch.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.add_patch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.add_patch.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.add_patch.__dict__.__setitem__('stypy_function_name', '_AxesBase.add_patch')
        _AxesBase.add_patch.__dict__.__setitem__('stypy_param_names_list', ['p'])
        _AxesBase.add_patch.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.add_patch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.add_patch.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.add_patch.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.add_patch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.add_patch.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.add_patch', ['p'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_patch', localization, ['p'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_patch(...)' code ##################

        unicode_212375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1829, (-1)), 'unicode', u'\n        Add a :class:`~matplotlib.patches.Patch` *p* to the list of\n        axes patches; the clipbox will be set to the Axes clipping\n        box.  If the transform is not set, it will be set to\n        :attr:`transData`.\n\n        Returns the patch.\n        ')
        
        # Call to _set_artist_props(...): (line 1831)
        # Processing the call arguments (line 1831)
        # Getting the type of 'p' (line 1831)
        p_212378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 31), 'p', False)
        # Processing the call keyword arguments (line 1831)
        kwargs_212379 = {}
        # Getting the type of 'self' (line 1831)
        self_212376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 1831)
        _set_artist_props_212377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1831, 8), self_212376, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 1831)
        _set_artist_props_call_result_212380 = invoke(stypy.reporting.localization.Localization(__file__, 1831, 8), _set_artist_props_212377, *[p_212378], **kwargs_212379)
        
        
        # Type idiom detected: calculating its left and rigth part (line 1832)
        
        # Call to get_clip_path(...): (line 1832)
        # Processing the call keyword arguments (line 1832)
        kwargs_212383 = {}
        # Getting the type of 'p' (line 1832)
        p_212381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 11), 'p', False)
        # Obtaining the member 'get_clip_path' of a type (line 1832)
        get_clip_path_212382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 11), p_212381, 'get_clip_path')
        # Calling get_clip_path(args, kwargs) (line 1832)
        get_clip_path_call_result_212384 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 11), get_clip_path_212382, *[], **kwargs_212383)
        
        # Getting the type of 'None' (line 1832)
        None_212385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 32), 'None')
        
        (may_be_212386, more_types_in_union_212387) = may_be_none(get_clip_path_call_result_212384, None_212385)

        if may_be_212386:

            if more_types_in_union_212387:
                # Runtime conditional SSA (line 1832)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_clip_path(...): (line 1833)
            # Processing the call arguments (line 1833)
            # Getting the type of 'self' (line 1833)
            self_212390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 28), 'self', False)
            # Obtaining the member 'patch' of a type (line 1833)
            patch_212391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1833, 28), self_212390, 'patch')
            # Processing the call keyword arguments (line 1833)
            kwargs_212392 = {}
            # Getting the type of 'p' (line 1833)
            p_212388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 12), 'p', False)
            # Obtaining the member 'set_clip_path' of a type (line 1833)
            set_clip_path_212389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1833, 12), p_212388, 'set_clip_path')
            # Calling set_clip_path(args, kwargs) (line 1833)
            set_clip_path_call_result_212393 = invoke(stypy.reporting.localization.Localization(__file__, 1833, 12), set_clip_path_212389, *[patch_212391], **kwargs_212392)
            

            if more_types_in_union_212387:
                # SSA join for if statement (line 1832)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to _update_patch_limits(...): (line 1834)
        # Processing the call arguments (line 1834)
        # Getting the type of 'p' (line 1834)
        p_212396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 34), 'p', False)
        # Processing the call keyword arguments (line 1834)
        kwargs_212397 = {}
        # Getting the type of 'self' (line 1834)
        self_212394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 8), 'self', False)
        # Obtaining the member '_update_patch_limits' of a type (line 1834)
        _update_patch_limits_212395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1834, 8), self_212394, '_update_patch_limits')
        # Calling _update_patch_limits(args, kwargs) (line 1834)
        _update_patch_limits_call_result_212398 = invoke(stypy.reporting.localization.Localization(__file__, 1834, 8), _update_patch_limits_212395, *[p_212396], **kwargs_212397)
        
        
        # Call to append(...): (line 1835)
        # Processing the call arguments (line 1835)
        # Getting the type of 'p' (line 1835)
        p_212402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 28), 'p', False)
        # Processing the call keyword arguments (line 1835)
        kwargs_212403 = {}
        # Getting the type of 'self' (line 1835)
        self_212399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 8), 'self', False)
        # Obtaining the member 'patches' of a type (line 1835)
        patches_212400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1835, 8), self_212399, 'patches')
        # Obtaining the member 'append' of a type (line 1835)
        append_212401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1835, 8), patches_212400, 'append')
        # Calling append(args, kwargs) (line 1835)
        append_call_result_212404 = invoke(stypy.reporting.localization.Localization(__file__, 1835, 8), append_212401, *[p_212402], **kwargs_212403)
        
        
        # Assigning a Lambda to a Attribute (line 1836):
        
        # Assigning a Lambda to a Attribute (line 1836):

        @norecursion
        def _stypy_temp_lambda_97(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_97'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_97', 1836, 27, True)
            # Passed parameters checking function
            _stypy_temp_lambda_97.stypy_localization = localization
            _stypy_temp_lambda_97.stypy_type_of_self = None
            _stypy_temp_lambda_97.stypy_type_store = module_type_store
            _stypy_temp_lambda_97.stypy_function_name = '_stypy_temp_lambda_97'
            _stypy_temp_lambda_97.stypy_param_names_list = ['h']
            _stypy_temp_lambda_97.stypy_varargs_param_name = None
            _stypy_temp_lambda_97.stypy_kwargs_param_name = None
            _stypy_temp_lambda_97.stypy_call_defaults = defaults
            _stypy_temp_lambda_97.stypy_call_varargs = varargs
            _stypy_temp_lambda_97.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_97', ['h'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_97', ['h'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to remove(...): (line 1836)
            # Processing the call arguments (line 1836)
            # Getting the type of 'h' (line 1836)
            h_212408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 57), 'h', False)
            # Processing the call keyword arguments (line 1836)
            kwargs_212409 = {}
            # Getting the type of 'self' (line 1836)
            self_212405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 37), 'self', False)
            # Obtaining the member 'patches' of a type (line 1836)
            patches_212406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1836, 37), self_212405, 'patches')
            # Obtaining the member 'remove' of a type (line 1836)
            remove_212407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1836, 37), patches_212406, 'remove')
            # Calling remove(args, kwargs) (line 1836)
            remove_call_result_212410 = invoke(stypy.reporting.localization.Localization(__file__, 1836, 37), remove_212407, *[h_212408], **kwargs_212409)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 1836)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1836, 27), 'stypy_return_type', remove_call_result_212410)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_97' in the type store
            # Getting the type of 'stypy_return_type' (line 1836)
            stypy_return_type_212411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 27), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_212411)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_97'
            return stypy_return_type_212411

        # Assigning a type to the variable '_stypy_temp_lambda_97' (line 1836)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1836, 27), '_stypy_temp_lambda_97', _stypy_temp_lambda_97)
        # Getting the type of '_stypy_temp_lambda_97' (line 1836)
        _stypy_temp_lambda_97_212412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 27), '_stypy_temp_lambda_97')
        # Getting the type of 'p' (line 1836)
        p_212413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 8), 'p')
        # Setting the type of the member '_remove_method' of a type (line 1836)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1836, 8), p_212413, '_remove_method', _stypy_temp_lambda_97_212412)
        # Getting the type of 'p' (line 1837)
        p_212414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 15), 'p')
        # Assigning a type to the variable 'stypy_return_type' (line 1837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1837, 8), 'stypy_return_type', p_212414)
        
        # ################# End of 'add_patch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_patch' in the type store
        # Getting the type of 'stypy_return_type' (line 1821)
        stypy_return_type_212415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212415)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_patch'
        return stypy_return_type_212415


    @norecursion
    def _update_patch_limits(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_patch_limits'
        module_type_store = module_type_store.open_function_context('_update_patch_limits', 1839, 4, False)
        # Assigning a type to the variable 'self' (line 1840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1840, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._update_patch_limits.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._update_patch_limits.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._update_patch_limits.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._update_patch_limits.__dict__.__setitem__('stypy_function_name', '_AxesBase._update_patch_limits')
        _AxesBase._update_patch_limits.__dict__.__setitem__('stypy_param_names_list', ['patch'])
        _AxesBase._update_patch_limits.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._update_patch_limits.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._update_patch_limits.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._update_patch_limits.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._update_patch_limits.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._update_patch_limits.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._update_patch_limits', ['patch'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_patch_limits', localization, ['patch'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_patch_limits(...)' code ##################

        unicode_212416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1840, 8), 'unicode', u'update the data limits for patch *p*')
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 1849)
        # Processing the call arguments (line 1849)
        # Getting the type of 'patch' (line 1849)
        patch_212418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 23), 'patch', False)
        # Getting the type of 'mpatches' (line 1849)
        mpatches_212419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 30), 'mpatches', False)
        # Obtaining the member 'Rectangle' of a type (line 1849)
        Rectangle_212420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 30), mpatches_212419, 'Rectangle')
        # Processing the call keyword arguments (line 1849)
        kwargs_212421 = {}
        # Getting the type of 'isinstance' (line 1849)
        isinstance_212417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1849)
        isinstance_call_result_212422 = invoke(stypy.reporting.localization.Localization(__file__, 1849, 12), isinstance_212417, *[patch_212418, Rectangle_212420], **kwargs_212421)
        
        
        # Evaluating a boolean operation
        
        
        # Call to get_width(...): (line 1850)
        # Processing the call keyword arguments (line 1850)
        kwargs_212425 = {}
        # Getting the type of 'patch' (line 1850)
        patch_212423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 22), 'patch', False)
        # Obtaining the member 'get_width' of a type (line 1850)
        get_width_212424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1850, 22), patch_212423, 'get_width')
        # Calling get_width(args, kwargs) (line 1850)
        get_width_call_result_212426 = invoke(stypy.reporting.localization.Localization(__file__, 1850, 22), get_width_212424, *[], **kwargs_212425)
        
        # Applying the 'not' unary operator (line 1850)
        result_not__212427 = python_operator(stypy.reporting.localization.Localization(__file__, 1850, 18), 'not', get_width_call_result_212426)
        
        
        
        # Call to get_height(...): (line 1850)
        # Processing the call keyword arguments (line 1850)
        kwargs_212430 = {}
        # Getting the type of 'patch' (line 1850)
        patch_212428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 50), 'patch', False)
        # Obtaining the member 'get_height' of a type (line 1850)
        get_height_212429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1850, 50), patch_212428, 'get_height')
        # Calling get_height(args, kwargs) (line 1850)
        get_height_call_result_212431 = invoke(stypy.reporting.localization.Localization(__file__, 1850, 50), get_height_212429, *[], **kwargs_212430)
        
        # Applying the 'not' unary operator (line 1850)
        result_not__212432 = python_operator(stypy.reporting.localization.Localization(__file__, 1850, 46), 'not', get_height_call_result_212431)
        
        # Applying the binary operator 'and' (line 1850)
        result_and_keyword_212433 = python_operator(stypy.reporting.localization.Localization(__file__, 1850, 17), 'and', result_not__212427, result_not__212432)
        
        # Applying the binary operator 'and' (line 1849)
        result_and_keyword_212434 = python_operator(stypy.reporting.localization.Localization(__file__, 1849, 12), 'and', isinstance_call_result_212422, result_and_keyword_212433)
        
        # Testing the type of an if condition (line 1849)
        if_condition_212435 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1849, 8), result_and_keyword_212434)
        # Assigning a type to the variable 'if_condition_212435' (line 1849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 8), 'if_condition_212435', if_condition_212435)
        # SSA begins for if statement (line 1849)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1851)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1849)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 1852):
        
        # Assigning a Attribute to a Name (line 1852):
        
        # Call to get_path(...): (line 1852)
        # Processing the call keyword arguments (line 1852)
        kwargs_212438 = {}
        # Getting the type of 'patch' (line 1852)
        patch_212436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 19), 'patch', False)
        # Obtaining the member 'get_path' of a type (line 1852)
        get_path_212437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1852, 19), patch_212436, 'get_path')
        # Calling get_path(args, kwargs) (line 1852)
        get_path_call_result_212439 = invoke(stypy.reporting.localization.Localization(__file__, 1852, 19), get_path_212437, *[], **kwargs_212438)
        
        # Obtaining the member 'vertices' of a type (line 1852)
        vertices_212440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1852, 19), get_path_call_result_212439, 'vertices')
        # Assigning a type to the variable 'vertices' (line 1852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1852, 8), 'vertices', vertices_212440)
        
        
        # Getting the type of 'vertices' (line 1853)
        vertices_212441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 11), 'vertices')
        # Obtaining the member 'size' of a type (line 1853)
        size_212442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1853, 11), vertices_212441, 'size')
        int_212443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1853, 27), 'int')
        # Applying the binary operator '>' (line 1853)
        result_gt_212444 = python_operator(stypy.reporting.localization.Localization(__file__, 1853, 11), '>', size_212442, int_212443)
        
        # Testing the type of an if condition (line 1853)
        if_condition_212445 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1853, 8), result_gt_212444)
        # Assigning a type to the variable 'if_condition_212445' (line 1853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1853, 8), 'if_condition_212445', if_condition_212445)
        # SSA begins for if statement (line 1853)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1854):
        
        # Assigning a Call to a Name (line 1854):
        
        # Call to transform(...): (line 1854)
        # Processing the call arguments (line 1854)
        # Getting the type of 'vertices' (line 1854)
        vertices_212451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 56), 'vertices', False)
        # Processing the call keyword arguments (line 1854)
        kwargs_212452 = {}
        
        # Call to get_patch_transform(...): (line 1854)
        # Processing the call keyword arguments (line 1854)
        kwargs_212448 = {}
        # Getting the type of 'patch' (line 1854)
        patch_212446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 18), 'patch', False)
        # Obtaining the member 'get_patch_transform' of a type (line 1854)
        get_patch_transform_212447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 18), patch_212446, 'get_patch_transform')
        # Calling get_patch_transform(args, kwargs) (line 1854)
        get_patch_transform_call_result_212449 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 18), get_patch_transform_212447, *[], **kwargs_212448)
        
        # Obtaining the member 'transform' of a type (line 1854)
        transform_212450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 18), get_patch_transform_call_result_212449, 'transform')
        # Calling transform(args, kwargs) (line 1854)
        transform_call_result_212453 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 18), transform_212450, *[vertices_212451], **kwargs_212452)
        
        # Assigning a type to the variable 'xys' (line 1854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 12), 'xys', transform_call_result_212453)
        
        
        
        # Call to get_data_transform(...): (line 1855)
        # Processing the call keyword arguments (line 1855)
        kwargs_212456 = {}
        # Getting the type of 'patch' (line 1855)
        patch_212454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 15), 'patch', False)
        # Obtaining the member 'get_data_transform' of a type (line 1855)
        get_data_transform_212455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1855, 15), patch_212454, 'get_data_transform')
        # Calling get_data_transform(args, kwargs) (line 1855)
        get_data_transform_call_result_212457 = invoke(stypy.reporting.localization.Localization(__file__, 1855, 15), get_data_transform_212455, *[], **kwargs_212456)
        
        # Getting the type of 'self' (line 1855)
        self_212458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 45), 'self')
        # Obtaining the member 'transData' of a type (line 1855)
        transData_212459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1855, 45), self_212458, 'transData')
        # Applying the binary operator '!=' (line 1855)
        result_ne_212460 = python_operator(stypy.reporting.localization.Localization(__file__, 1855, 15), '!=', get_data_transform_call_result_212457, transData_212459)
        
        # Testing the type of an if condition (line 1855)
        if_condition_212461 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1855, 12), result_ne_212460)
        # Assigning a type to the variable 'if_condition_212461' (line 1855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1855, 12), 'if_condition_212461', if_condition_212461)
        # SSA begins for if statement (line 1855)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1856):
        
        # Assigning a BinOp to a Name (line 1856):
        
        # Call to get_data_transform(...): (line 1856)
        # Processing the call keyword arguments (line 1856)
        kwargs_212464 = {}
        # Getting the type of 'patch' (line 1856)
        patch_212462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 33), 'patch', False)
        # Obtaining the member 'get_data_transform' of a type (line 1856)
        get_data_transform_212463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1856, 33), patch_212462, 'get_data_transform')
        # Calling get_data_transform(args, kwargs) (line 1856)
        get_data_transform_call_result_212465 = invoke(stypy.reporting.localization.Localization(__file__, 1856, 33), get_data_transform_212463, *[], **kwargs_212464)
        
        # Getting the type of 'self' (line 1857)
        self_212466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 33), 'self')
        # Obtaining the member 'transData' of a type (line 1857)
        transData_212467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1857, 33), self_212466, 'transData')
        # Applying the binary operator '-' (line 1856)
        result_sub_212468 = python_operator(stypy.reporting.localization.Localization(__file__, 1856, 33), '-', get_data_transform_call_result_212465, transData_212467)
        
        # Assigning a type to the variable 'patch_to_data' (line 1856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1856, 16), 'patch_to_data', result_sub_212468)
        
        # Assigning a Call to a Name (line 1858):
        
        # Assigning a Call to a Name (line 1858):
        
        # Call to transform(...): (line 1858)
        # Processing the call arguments (line 1858)
        # Getting the type of 'xys' (line 1858)
        xys_212471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 46), 'xys', False)
        # Processing the call keyword arguments (line 1858)
        kwargs_212472 = {}
        # Getting the type of 'patch_to_data' (line 1858)
        patch_to_data_212469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 22), 'patch_to_data', False)
        # Obtaining the member 'transform' of a type (line 1858)
        transform_212470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1858, 22), patch_to_data_212469, 'transform')
        # Calling transform(args, kwargs) (line 1858)
        transform_call_result_212473 = invoke(stypy.reporting.localization.Localization(__file__, 1858, 22), transform_212470, *[xys_212471], **kwargs_212472)
        
        # Assigning a type to the variable 'xys' (line 1858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1858, 16), 'xys', transform_call_result_212473)
        # SSA join for if statement (line 1855)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1860):
        
        # Assigning a Call to a Name:
        
        # Call to contains_branch_seperately(...): (line 1860)
        # Processing the call arguments (line 1860)
        # Getting the type of 'self' (line 1861)
        self_212479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 43), 'self', False)
        # Obtaining the member 'transData' of a type (line 1861)
        transData_212480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1861, 43), self_212479, 'transData')
        # Processing the call keyword arguments (line 1860)
        kwargs_212481 = {}
        
        # Call to get_transform(...): (line 1860)
        # Processing the call keyword arguments (line 1860)
        kwargs_212476 = {}
        # Getting the type of 'patch' (line 1860)
        patch_212474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 31), 'patch', False)
        # Obtaining the member 'get_transform' of a type (line 1860)
        get_transform_212475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1860, 31), patch_212474, 'get_transform')
        # Calling get_transform(args, kwargs) (line 1860)
        get_transform_call_result_212477 = invoke(stypy.reporting.localization.Localization(__file__, 1860, 31), get_transform_212475, *[], **kwargs_212476)
        
        # Obtaining the member 'contains_branch_seperately' of a type (line 1860)
        contains_branch_seperately_212478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1860, 31), get_transform_call_result_212477, 'contains_branch_seperately')
        # Calling contains_branch_seperately(args, kwargs) (line 1860)
        contains_branch_seperately_call_result_212482 = invoke(stypy.reporting.localization.Localization(__file__, 1860, 31), contains_branch_seperately_212478, *[transData_212480], **kwargs_212481)
        
        # Assigning a type to the variable 'call_assignment_207770' (line 1860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1860, 12), 'call_assignment_207770', contains_branch_seperately_call_result_212482)
        
        # Assigning a Call to a Name (line 1860):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_212485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1860, 12), 'int')
        # Processing the call keyword arguments
        kwargs_212486 = {}
        # Getting the type of 'call_assignment_207770' (line 1860)
        call_assignment_207770_212483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 12), 'call_assignment_207770', False)
        # Obtaining the member '__getitem__' of a type (line 1860)
        getitem___212484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1860, 12), call_assignment_207770_212483, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_212487 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___212484, *[int_212485], **kwargs_212486)
        
        # Assigning a type to the variable 'call_assignment_207771' (line 1860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1860, 12), 'call_assignment_207771', getitem___call_result_212487)
        
        # Assigning a Name to a Name (line 1860):
        # Getting the type of 'call_assignment_207771' (line 1860)
        call_assignment_207771_212488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 12), 'call_assignment_207771')
        # Assigning a type to the variable 'updatex' (line 1860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1860, 12), 'updatex', call_assignment_207771_212488)
        
        # Assigning a Call to a Name (line 1860):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_212491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1860, 12), 'int')
        # Processing the call keyword arguments
        kwargs_212492 = {}
        # Getting the type of 'call_assignment_207770' (line 1860)
        call_assignment_207770_212489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 12), 'call_assignment_207770', False)
        # Obtaining the member '__getitem__' of a type (line 1860)
        getitem___212490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1860, 12), call_assignment_207770_212489, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_212493 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___212490, *[int_212491], **kwargs_212492)
        
        # Assigning a type to the variable 'call_assignment_207772' (line 1860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1860, 12), 'call_assignment_207772', getitem___call_result_212493)
        
        # Assigning a Name to a Name (line 1860):
        # Getting the type of 'call_assignment_207772' (line 1860)
        call_assignment_207772_212494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 12), 'call_assignment_207772')
        # Assigning a type to the variable 'updatey' (line 1860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1860, 21), 'updatey', call_assignment_207772_212494)
        
        # Call to update_datalim(...): (line 1862)
        # Processing the call arguments (line 1862)
        # Getting the type of 'xys' (line 1862)
        xys_212497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 32), 'xys', False)
        # Processing the call keyword arguments (line 1862)
        # Getting the type of 'updatex' (line 1862)
        updatex_212498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 45), 'updatex', False)
        keyword_212499 = updatex_212498
        # Getting the type of 'updatey' (line 1863)
        updatey_212500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 40), 'updatey', False)
        keyword_212501 = updatey_212500
        kwargs_212502 = {'updatex': keyword_212499, 'updatey': keyword_212501}
        # Getting the type of 'self' (line 1862)
        self_212495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 12), 'self', False)
        # Obtaining the member 'update_datalim' of a type (line 1862)
        update_datalim_212496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1862, 12), self_212495, 'update_datalim')
        # Calling update_datalim(args, kwargs) (line 1862)
        update_datalim_call_result_212503 = invoke(stypy.reporting.localization.Localization(__file__, 1862, 12), update_datalim_212496, *[xys_212497], **kwargs_212502)
        
        # SSA join for if statement (line 1853)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_update_patch_limits(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_patch_limits' in the type store
        # Getting the type of 'stypy_return_type' (line 1839)
        stypy_return_type_212504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212504)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_patch_limits'
        return stypy_return_type_212504


    @norecursion
    def add_table(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_table'
        module_type_store = module_type_store.open_function_context('add_table', 1865, 4, False)
        # Assigning a type to the variable 'self' (line 1866)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.add_table.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.add_table.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.add_table.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.add_table.__dict__.__setitem__('stypy_function_name', '_AxesBase.add_table')
        _AxesBase.add_table.__dict__.__setitem__('stypy_param_names_list', ['tab'])
        _AxesBase.add_table.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.add_table.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.add_table.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.add_table.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.add_table.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.add_table.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.add_table', ['tab'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_table', localization, ['tab'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_table(...)' code ##################

        unicode_212505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, (-1)), 'unicode', u'\n        Add a :class:`~matplotlib.tables.Table` instance to the\n        list of axes tables\n\n        Returns the table.\n        ')
        
        # Call to _set_artist_props(...): (line 1872)
        # Processing the call arguments (line 1872)
        # Getting the type of 'tab' (line 1872)
        tab_212508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 31), 'tab', False)
        # Processing the call keyword arguments (line 1872)
        kwargs_212509 = {}
        # Getting the type of 'self' (line 1872)
        self_212506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 1872)
        _set_artist_props_212507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1872, 8), self_212506, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 1872)
        _set_artist_props_call_result_212510 = invoke(stypy.reporting.localization.Localization(__file__, 1872, 8), _set_artist_props_212507, *[tab_212508], **kwargs_212509)
        
        
        # Call to append(...): (line 1873)
        # Processing the call arguments (line 1873)
        # Getting the type of 'tab' (line 1873)
        tab_212514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 27), 'tab', False)
        # Processing the call keyword arguments (line 1873)
        kwargs_212515 = {}
        # Getting the type of 'self' (line 1873)
        self_212511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 8), 'self', False)
        # Obtaining the member 'tables' of a type (line 1873)
        tables_212512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 8), self_212511, 'tables')
        # Obtaining the member 'append' of a type (line 1873)
        append_212513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 8), tables_212512, 'append')
        # Calling append(args, kwargs) (line 1873)
        append_call_result_212516 = invoke(stypy.reporting.localization.Localization(__file__, 1873, 8), append_212513, *[tab_212514], **kwargs_212515)
        
        
        # Call to set_clip_path(...): (line 1874)
        # Processing the call arguments (line 1874)
        # Getting the type of 'self' (line 1874)
        self_212519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 26), 'self', False)
        # Obtaining the member 'patch' of a type (line 1874)
        patch_212520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1874, 26), self_212519, 'patch')
        # Processing the call keyword arguments (line 1874)
        kwargs_212521 = {}
        # Getting the type of 'tab' (line 1874)
        tab_212517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 8), 'tab', False)
        # Obtaining the member 'set_clip_path' of a type (line 1874)
        set_clip_path_212518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1874, 8), tab_212517, 'set_clip_path')
        # Calling set_clip_path(args, kwargs) (line 1874)
        set_clip_path_call_result_212522 = invoke(stypy.reporting.localization.Localization(__file__, 1874, 8), set_clip_path_212518, *[patch_212520], **kwargs_212521)
        
        
        # Assigning a Lambda to a Attribute (line 1875):
        
        # Assigning a Lambda to a Attribute (line 1875):

        @norecursion
        def _stypy_temp_lambda_98(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_98'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_98', 1875, 29, True)
            # Passed parameters checking function
            _stypy_temp_lambda_98.stypy_localization = localization
            _stypy_temp_lambda_98.stypy_type_of_self = None
            _stypy_temp_lambda_98.stypy_type_store = module_type_store
            _stypy_temp_lambda_98.stypy_function_name = '_stypy_temp_lambda_98'
            _stypy_temp_lambda_98.stypy_param_names_list = ['h']
            _stypy_temp_lambda_98.stypy_varargs_param_name = None
            _stypy_temp_lambda_98.stypy_kwargs_param_name = None
            _stypy_temp_lambda_98.stypy_call_defaults = defaults
            _stypy_temp_lambda_98.stypy_call_varargs = varargs
            _stypy_temp_lambda_98.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_98', ['h'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_98', ['h'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to remove(...): (line 1875)
            # Processing the call arguments (line 1875)
            # Getting the type of 'h' (line 1875)
            h_212526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 58), 'h', False)
            # Processing the call keyword arguments (line 1875)
            kwargs_212527 = {}
            # Getting the type of 'self' (line 1875)
            self_212523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 39), 'self', False)
            # Obtaining the member 'tables' of a type (line 1875)
            tables_212524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1875, 39), self_212523, 'tables')
            # Obtaining the member 'remove' of a type (line 1875)
            remove_212525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1875, 39), tables_212524, 'remove')
            # Calling remove(args, kwargs) (line 1875)
            remove_call_result_212528 = invoke(stypy.reporting.localization.Localization(__file__, 1875, 39), remove_212525, *[h_212526], **kwargs_212527)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 1875)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1875, 29), 'stypy_return_type', remove_call_result_212528)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_98' in the type store
            # Getting the type of 'stypy_return_type' (line 1875)
            stypy_return_type_212529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 29), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_212529)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_98'
            return stypy_return_type_212529

        # Assigning a type to the variable '_stypy_temp_lambda_98' (line 1875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1875, 29), '_stypy_temp_lambda_98', _stypy_temp_lambda_98)
        # Getting the type of '_stypy_temp_lambda_98' (line 1875)
        _stypy_temp_lambda_98_212530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 29), '_stypy_temp_lambda_98')
        # Getting the type of 'tab' (line 1875)
        tab_212531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 8), 'tab')
        # Setting the type of the member '_remove_method' of a type (line 1875)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1875, 8), tab_212531, '_remove_method', _stypy_temp_lambda_98_212530)
        # Getting the type of 'tab' (line 1876)
        tab_212532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 15), 'tab')
        # Assigning a type to the variable 'stypy_return_type' (line 1876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1876, 8), 'stypy_return_type', tab_212532)
        
        # ################# End of 'add_table(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_table' in the type store
        # Getting the type of 'stypy_return_type' (line 1865)
        stypy_return_type_212533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212533)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_table'
        return stypy_return_type_212533


    @norecursion
    def add_container(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_container'
        module_type_store = module_type_store.open_function_context('add_container', 1878, 4, False)
        # Assigning a type to the variable 'self' (line 1879)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.add_container.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.add_container.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.add_container.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.add_container.__dict__.__setitem__('stypy_function_name', '_AxesBase.add_container')
        _AxesBase.add_container.__dict__.__setitem__('stypy_param_names_list', ['container'])
        _AxesBase.add_container.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.add_container.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.add_container.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.add_container.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.add_container.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.add_container.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.add_container', ['container'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_container', localization, ['container'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_container(...)' code ##################

        unicode_212534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1884, (-1)), 'unicode', u'\n        Add a :class:`~matplotlib.container.Container` instance\n        to the axes.\n\n        Returns the collection.\n        ')
        
        # Assigning a Call to a Name (line 1885):
        
        # Assigning a Call to a Name (line 1885):
        
        # Call to get_label(...): (line 1885)
        # Processing the call keyword arguments (line 1885)
        kwargs_212537 = {}
        # Getting the type of 'container' (line 1885)
        container_212535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 16), 'container', False)
        # Obtaining the member 'get_label' of a type (line 1885)
        get_label_212536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1885, 16), container_212535, 'get_label')
        # Calling get_label(args, kwargs) (line 1885)
        get_label_call_result_212538 = invoke(stypy.reporting.localization.Localization(__file__, 1885, 16), get_label_212536, *[], **kwargs_212537)
        
        # Assigning a type to the variable 'label' (line 1885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1885, 8), 'label', get_label_call_result_212538)
        
        
        # Getting the type of 'label' (line 1886)
        label_212539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 15), 'label')
        # Applying the 'not' unary operator (line 1886)
        result_not__212540 = python_operator(stypy.reporting.localization.Localization(__file__, 1886, 11), 'not', label_212539)
        
        # Testing the type of an if condition (line 1886)
        if_condition_212541 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1886, 8), result_not__212540)
        # Assigning a type to the variable 'if_condition_212541' (line 1886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 8), 'if_condition_212541', if_condition_212541)
        # SSA begins for if statement (line 1886)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_label(...): (line 1887)
        # Processing the call arguments (line 1887)
        unicode_212544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1887, 32), 'unicode', u'_container%d')
        
        # Call to len(...): (line 1887)
        # Processing the call arguments (line 1887)
        # Getting the type of 'self' (line 1887)
        self_212546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 53), 'self', False)
        # Obtaining the member 'containers' of a type (line 1887)
        containers_212547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1887, 53), self_212546, 'containers')
        # Processing the call keyword arguments (line 1887)
        kwargs_212548 = {}
        # Getting the type of 'len' (line 1887)
        len_212545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 49), 'len', False)
        # Calling len(args, kwargs) (line 1887)
        len_call_result_212549 = invoke(stypy.reporting.localization.Localization(__file__, 1887, 49), len_212545, *[containers_212547], **kwargs_212548)
        
        # Applying the binary operator '%' (line 1887)
        result_mod_212550 = python_operator(stypy.reporting.localization.Localization(__file__, 1887, 32), '%', unicode_212544, len_call_result_212549)
        
        # Processing the call keyword arguments (line 1887)
        kwargs_212551 = {}
        # Getting the type of 'container' (line 1887)
        container_212542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 12), 'container', False)
        # Obtaining the member 'set_label' of a type (line 1887)
        set_label_212543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1887, 12), container_212542, 'set_label')
        # Calling set_label(args, kwargs) (line 1887)
        set_label_call_result_212552 = invoke(stypy.reporting.localization.Localization(__file__, 1887, 12), set_label_212543, *[result_mod_212550], **kwargs_212551)
        
        # SSA join for if statement (line 1886)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1888)
        # Processing the call arguments (line 1888)
        # Getting the type of 'container' (line 1888)
        container_212556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 31), 'container', False)
        # Processing the call keyword arguments (line 1888)
        kwargs_212557 = {}
        # Getting the type of 'self' (line 1888)
        self_212553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 8), 'self', False)
        # Obtaining the member 'containers' of a type (line 1888)
        containers_212554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1888, 8), self_212553, 'containers')
        # Obtaining the member 'append' of a type (line 1888)
        append_212555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1888, 8), containers_212554, 'append')
        # Calling append(args, kwargs) (line 1888)
        append_call_result_212558 = invoke(stypy.reporting.localization.Localization(__file__, 1888, 8), append_212555, *[container_212556], **kwargs_212557)
        
        
        # Call to set_remove_method(...): (line 1889)
        # Processing the call arguments (line 1889)

        @norecursion
        def _stypy_temp_lambda_99(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_99'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_99', 1889, 36, True)
            # Passed parameters checking function
            _stypy_temp_lambda_99.stypy_localization = localization
            _stypy_temp_lambda_99.stypy_type_of_self = None
            _stypy_temp_lambda_99.stypy_type_store = module_type_store
            _stypy_temp_lambda_99.stypy_function_name = '_stypy_temp_lambda_99'
            _stypy_temp_lambda_99.stypy_param_names_list = ['h']
            _stypy_temp_lambda_99.stypy_varargs_param_name = None
            _stypy_temp_lambda_99.stypy_kwargs_param_name = None
            _stypy_temp_lambda_99.stypy_call_defaults = defaults
            _stypy_temp_lambda_99.stypy_call_varargs = varargs
            _stypy_temp_lambda_99.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_99', ['h'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_99', ['h'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to remove(...): (line 1889)
            # Processing the call arguments (line 1889)
            # Getting the type of 'h' (line 1889)
            h_212564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 69), 'h', False)
            # Processing the call keyword arguments (line 1889)
            kwargs_212565 = {}
            # Getting the type of 'self' (line 1889)
            self_212561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 46), 'self', False)
            # Obtaining the member 'containers' of a type (line 1889)
            containers_212562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 46), self_212561, 'containers')
            # Obtaining the member 'remove' of a type (line 1889)
            remove_212563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 46), containers_212562, 'remove')
            # Calling remove(args, kwargs) (line 1889)
            remove_call_result_212566 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 46), remove_212563, *[h_212564], **kwargs_212565)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 1889)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1889, 36), 'stypy_return_type', remove_call_result_212566)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_99' in the type store
            # Getting the type of 'stypy_return_type' (line 1889)
            stypy_return_type_212567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 36), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_212567)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_99'
            return stypy_return_type_212567

        # Assigning a type to the variable '_stypy_temp_lambda_99' (line 1889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1889, 36), '_stypy_temp_lambda_99', _stypy_temp_lambda_99)
        # Getting the type of '_stypy_temp_lambda_99' (line 1889)
        _stypy_temp_lambda_99_212568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 36), '_stypy_temp_lambda_99')
        # Processing the call keyword arguments (line 1889)
        kwargs_212569 = {}
        # Getting the type of 'container' (line 1889)
        container_212559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 8), 'container', False)
        # Obtaining the member 'set_remove_method' of a type (line 1889)
        set_remove_method_212560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 8), container_212559, 'set_remove_method')
        # Calling set_remove_method(args, kwargs) (line 1889)
        set_remove_method_call_result_212570 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 8), set_remove_method_212560, *[_stypy_temp_lambda_99_212568], **kwargs_212569)
        
        # Getting the type of 'container' (line 1890)
        container_212571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 15), 'container')
        # Assigning a type to the variable 'stypy_return_type' (line 1890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1890, 8), 'stypy_return_type', container_212571)
        
        # ################# End of 'add_container(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_container' in the type store
        # Getting the type of 'stypy_return_type' (line 1878)
        stypy_return_type_212572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212572)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_container'
        return stypy_return_type_212572


    @norecursion
    def _on_units_changed(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1892)
        False_212573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 39), 'False')
        # Getting the type of 'False' (line 1892)
        False_212574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 53), 'False')
        defaults = [False_212573, False_212574]
        # Create a new context for function '_on_units_changed'
        module_type_store = module_type_store.open_function_context('_on_units_changed', 1892, 4, False)
        # Assigning a type to the variable 'self' (line 1893)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1893, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._on_units_changed.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._on_units_changed.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._on_units_changed.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._on_units_changed.__dict__.__setitem__('stypy_function_name', '_AxesBase._on_units_changed')
        _AxesBase._on_units_changed.__dict__.__setitem__('stypy_param_names_list', ['scalex', 'scaley'])
        _AxesBase._on_units_changed.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._on_units_changed.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._on_units_changed.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._on_units_changed.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._on_units_changed.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._on_units_changed.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._on_units_changed', ['scalex', 'scaley'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_on_units_changed', localization, ['scalex', 'scaley'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_on_units_changed(...)' code ##################

        unicode_212575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, (-1)), 'unicode', u'\n        Callback for processing changes to axis units.\n\n        Currently forces updates of data limits and view limits.\n        ')
        
        # Call to relim(...): (line 1898)
        # Processing the call keyword arguments (line 1898)
        kwargs_212578 = {}
        # Getting the type of 'self' (line 1898)
        self_212576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 8), 'self', False)
        # Obtaining the member 'relim' of a type (line 1898)
        relim_212577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1898, 8), self_212576, 'relim')
        # Calling relim(args, kwargs) (line 1898)
        relim_call_result_212579 = invoke(stypy.reporting.localization.Localization(__file__, 1898, 8), relim_212577, *[], **kwargs_212578)
        
        
        # Call to autoscale_view(...): (line 1899)
        # Processing the call keyword arguments (line 1899)
        # Getting the type of 'scalex' (line 1899)
        scalex_212582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 35), 'scalex', False)
        keyword_212583 = scalex_212582
        # Getting the type of 'scaley' (line 1899)
        scaley_212584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 50), 'scaley', False)
        keyword_212585 = scaley_212584
        kwargs_212586 = {'scalex': keyword_212583, 'scaley': keyword_212585}
        # Getting the type of 'self' (line 1899)
        self_212580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 8), 'self', False)
        # Obtaining the member 'autoscale_view' of a type (line 1899)
        autoscale_view_212581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1899, 8), self_212580, 'autoscale_view')
        # Calling autoscale_view(args, kwargs) (line 1899)
        autoscale_view_call_result_212587 = invoke(stypy.reporting.localization.Localization(__file__, 1899, 8), autoscale_view_212581, *[], **kwargs_212586)
        
        
        # ################# End of '_on_units_changed(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_on_units_changed' in the type store
        # Getting the type of 'stypy_return_type' (line 1892)
        stypy_return_type_212588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212588)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_on_units_changed'
        return stypy_return_type_212588


    @norecursion
    def relim(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1901)
        False_212589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 33), 'False')
        defaults = [False_212589]
        # Create a new context for function 'relim'
        module_type_store = module_type_store.open_function_context('relim', 1901, 4, False)
        # Assigning a type to the variable 'self' (line 1902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1902, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.relim.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.relim.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.relim.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.relim.__dict__.__setitem__('stypy_function_name', '_AxesBase.relim')
        _AxesBase.relim.__dict__.__setitem__('stypy_param_names_list', ['visible_only'])
        _AxesBase.relim.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.relim.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.relim.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.relim.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.relim.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.relim.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.relim', ['visible_only'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'relim', localization, ['visible_only'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'relim(...)' code ##################

        unicode_212590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1909, (-1)), 'unicode', u'\n        Recompute the data limits based on current artists. If you want to\n        exclude invisible artists from the calculation, set\n        ``visible_only=True``\n\n        At present, :class:`~matplotlib.collections.Collection`\n        instances are not supported.\n        ')
        
        # Call to ignore(...): (line 1912)
        # Processing the call arguments (line 1912)
        # Getting the type of 'True' (line 1912)
        True_212594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 28), 'True', False)
        # Processing the call keyword arguments (line 1912)
        kwargs_212595 = {}
        # Getting the type of 'self' (line 1912)
        self_212591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 8), 'self', False)
        # Obtaining the member 'dataLim' of a type (line 1912)
        dataLim_212592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1912, 8), self_212591, 'dataLim')
        # Obtaining the member 'ignore' of a type (line 1912)
        ignore_212593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1912, 8), dataLim_212592, 'ignore')
        # Calling ignore(args, kwargs) (line 1912)
        ignore_call_result_212596 = invoke(stypy.reporting.localization.Localization(__file__, 1912, 8), ignore_212593, *[True_212594], **kwargs_212595)
        
        
        # Call to set_points(...): (line 1913)
        # Processing the call arguments (line 1913)
        
        # Call to get_points(...): (line 1913)
        # Processing the call keyword arguments (line 1913)
        kwargs_212606 = {}
        
        # Call to null(...): (line 1913)
        # Processing the call keyword arguments (line 1913)
        kwargs_212603 = {}
        # Getting the type of 'mtransforms' (line 1913)
        mtransforms_212600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 32), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 1913)
        Bbox_212601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1913, 32), mtransforms_212600, 'Bbox')
        # Obtaining the member 'null' of a type (line 1913)
        null_212602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1913, 32), Bbox_212601, 'null')
        # Calling null(args, kwargs) (line 1913)
        null_call_result_212604 = invoke(stypy.reporting.localization.Localization(__file__, 1913, 32), null_212602, *[], **kwargs_212603)
        
        # Obtaining the member 'get_points' of a type (line 1913)
        get_points_212605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1913, 32), null_call_result_212604, 'get_points')
        # Calling get_points(args, kwargs) (line 1913)
        get_points_call_result_212607 = invoke(stypy.reporting.localization.Localization(__file__, 1913, 32), get_points_212605, *[], **kwargs_212606)
        
        # Processing the call keyword arguments (line 1913)
        kwargs_212608 = {}
        # Getting the type of 'self' (line 1913)
        self_212597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 8), 'self', False)
        # Obtaining the member 'dataLim' of a type (line 1913)
        dataLim_212598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1913, 8), self_212597, 'dataLim')
        # Obtaining the member 'set_points' of a type (line 1913)
        set_points_212599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1913, 8), dataLim_212598, 'set_points')
        # Calling set_points(args, kwargs) (line 1913)
        set_points_call_result_212609 = invoke(stypy.reporting.localization.Localization(__file__, 1913, 8), set_points_212599, *[get_points_call_result_212607], **kwargs_212608)
        
        
        # Assigning a Name to a Attribute (line 1914):
        
        # Assigning a Name to a Attribute (line 1914):
        # Getting the type of 'True' (line 1914)
        True_212610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 43), 'True')
        # Getting the type of 'self' (line 1914)
        self_212611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 8), 'self')
        # Setting the type of the member 'ignore_existing_data_limits' of a type (line 1914)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1914, 8), self_212611, 'ignore_existing_data_limits', True_212610)
        
        # Getting the type of 'self' (line 1916)
        self_212612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 20), 'self')
        # Obtaining the member 'lines' of a type (line 1916)
        lines_212613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 20), self_212612, 'lines')
        # Testing the type of a for loop iterable (line 1916)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1916, 8), lines_212613)
        # Getting the type of the for loop variable (line 1916)
        for_loop_var_212614 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1916, 8), lines_212613)
        # Assigning a type to the variable 'line' (line 1916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1916, 8), 'line', for_loop_var_212614)
        # SSA begins for a for statement (line 1916)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'visible_only' (line 1917)
        visible_only_212615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 19), 'visible_only')
        # Applying the 'not' unary operator (line 1917)
        result_not__212616 = python_operator(stypy.reporting.localization.Localization(__file__, 1917, 15), 'not', visible_only_212615)
        
        
        # Call to get_visible(...): (line 1917)
        # Processing the call keyword arguments (line 1917)
        kwargs_212619 = {}
        # Getting the type of 'line' (line 1917)
        line_212617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 35), 'line', False)
        # Obtaining the member 'get_visible' of a type (line 1917)
        get_visible_212618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1917, 35), line_212617, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1917)
        get_visible_call_result_212620 = invoke(stypy.reporting.localization.Localization(__file__, 1917, 35), get_visible_212618, *[], **kwargs_212619)
        
        # Applying the binary operator 'or' (line 1917)
        result_or_keyword_212621 = python_operator(stypy.reporting.localization.Localization(__file__, 1917, 15), 'or', result_not__212616, get_visible_call_result_212620)
        
        # Testing the type of an if condition (line 1917)
        if_condition_212622 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1917, 12), result_or_keyword_212621)
        # Assigning a type to the variable 'if_condition_212622' (line 1917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1917, 12), 'if_condition_212622', if_condition_212622)
        # SSA begins for if statement (line 1917)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _update_line_limits(...): (line 1918)
        # Processing the call arguments (line 1918)
        # Getting the type of 'line' (line 1918)
        line_212625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 41), 'line', False)
        # Processing the call keyword arguments (line 1918)
        kwargs_212626 = {}
        # Getting the type of 'self' (line 1918)
        self_212623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 16), 'self', False)
        # Obtaining the member '_update_line_limits' of a type (line 1918)
        _update_line_limits_212624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1918, 16), self_212623, '_update_line_limits')
        # Calling _update_line_limits(args, kwargs) (line 1918)
        _update_line_limits_call_result_212627 = invoke(stypy.reporting.localization.Localization(__file__, 1918, 16), _update_line_limits_212624, *[line_212625], **kwargs_212626)
        
        # SSA join for if statement (line 1917)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1920)
        self_212628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 17), 'self')
        # Obtaining the member 'patches' of a type (line 1920)
        patches_212629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1920, 17), self_212628, 'patches')
        # Testing the type of a for loop iterable (line 1920)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1920, 8), patches_212629)
        # Getting the type of the for loop variable (line 1920)
        for_loop_var_212630 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1920, 8), patches_212629)
        # Assigning a type to the variable 'p' (line 1920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 8), 'p', for_loop_var_212630)
        # SSA begins for a for statement (line 1920)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'visible_only' (line 1921)
        visible_only_212631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 19), 'visible_only')
        # Applying the 'not' unary operator (line 1921)
        result_not__212632 = python_operator(stypy.reporting.localization.Localization(__file__, 1921, 15), 'not', visible_only_212631)
        
        
        # Call to get_visible(...): (line 1921)
        # Processing the call keyword arguments (line 1921)
        kwargs_212635 = {}
        # Getting the type of 'p' (line 1921)
        p_212633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 35), 'p', False)
        # Obtaining the member 'get_visible' of a type (line 1921)
        get_visible_212634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1921, 35), p_212633, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1921)
        get_visible_call_result_212636 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 35), get_visible_212634, *[], **kwargs_212635)
        
        # Applying the binary operator 'or' (line 1921)
        result_or_keyword_212637 = python_operator(stypy.reporting.localization.Localization(__file__, 1921, 15), 'or', result_not__212632, get_visible_call_result_212636)
        
        # Testing the type of an if condition (line 1921)
        if_condition_212638 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1921, 12), result_or_keyword_212637)
        # Assigning a type to the variable 'if_condition_212638' (line 1921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1921, 12), 'if_condition_212638', if_condition_212638)
        # SSA begins for if statement (line 1921)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _update_patch_limits(...): (line 1922)
        # Processing the call arguments (line 1922)
        # Getting the type of 'p' (line 1922)
        p_212641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 42), 'p', False)
        # Processing the call keyword arguments (line 1922)
        kwargs_212642 = {}
        # Getting the type of 'self' (line 1922)
        self_212639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 16), 'self', False)
        # Obtaining the member '_update_patch_limits' of a type (line 1922)
        _update_patch_limits_212640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1922, 16), self_212639, '_update_patch_limits')
        # Calling _update_patch_limits(args, kwargs) (line 1922)
        _update_patch_limits_call_result_212643 = invoke(stypy.reporting.localization.Localization(__file__, 1922, 16), _update_patch_limits_212640, *[p_212641], **kwargs_212642)
        
        # SSA join for if statement (line 1921)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'relim(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'relim' in the type store
        # Getting the type of 'stypy_return_type' (line 1901)
        stypy_return_type_212644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212644)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'relim'
        return stypy_return_type_212644


    @norecursion
    def update_datalim(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 1924)
        True_212645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 42), 'True')
        # Getting the type of 'True' (line 1924)
        True_212646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 56), 'True')
        defaults = [True_212645, True_212646]
        # Create a new context for function 'update_datalim'
        module_type_store = module_type_store.open_function_context('update_datalim', 1924, 4, False)
        # Assigning a type to the variable 'self' (line 1925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1925, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.update_datalim.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.update_datalim.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.update_datalim.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.update_datalim.__dict__.__setitem__('stypy_function_name', '_AxesBase.update_datalim')
        _AxesBase.update_datalim.__dict__.__setitem__('stypy_param_names_list', ['xys', 'updatex', 'updatey'])
        _AxesBase.update_datalim.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.update_datalim.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.update_datalim.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.update_datalim.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.update_datalim.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.update_datalim.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.update_datalim', ['xys', 'updatex', 'updatey'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_datalim', localization, ['xys', 'updatex', 'updatey'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_datalim(...)' code ##################

        unicode_212647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1927, (-1)), 'unicode', u'\n        Update the data lim bbox with seq of xy tups or equiv. 2-D array\n        ')
        
        # Assigning a Call to a Name (line 1932):
        
        # Assigning a Call to a Name (line 1932):
        
        # Call to asarray(...): (line 1932)
        # Processing the call arguments (line 1932)
        # Getting the type of 'xys' (line 1932)
        xys_212650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 25), 'xys', False)
        # Processing the call keyword arguments (line 1932)
        kwargs_212651 = {}
        # Getting the type of 'np' (line 1932)
        np_212648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 14), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1932)
        asarray_212649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1932, 14), np_212648, 'asarray')
        # Calling asarray(args, kwargs) (line 1932)
        asarray_call_result_212652 = invoke(stypy.reporting.localization.Localization(__file__, 1932, 14), asarray_212649, *[xys_212650], **kwargs_212651)
        
        # Assigning a type to the variable 'xys' (line 1932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1932, 8), 'xys', asarray_call_result_212652)
        
        
        
        # Call to len(...): (line 1933)
        # Processing the call arguments (line 1933)
        # Getting the type of 'xys' (line 1933)
        xys_212654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 19), 'xys', False)
        # Processing the call keyword arguments (line 1933)
        kwargs_212655 = {}
        # Getting the type of 'len' (line 1933)
        len_212653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 15), 'len', False)
        # Calling len(args, kwargs) (line 1933)
        len_call_result_212656 = invoke(stypy.reporting.localization.Localization(__file__, 1933, 15), len_212653, *[xys_212654], **kwargs_212655)
        
        # Applying the 'not' unary operator (line 1933)
        result_not__212657 = python_operator(stypy.reporting.localization.Localization(__file__, 1933, 11), 'not', len_call_result_212656)
        
        # Testing the type of an if condition (line 1933)
        if_condition_212658 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1933, 8), result_not__212657)
        # Assigning a type to the variable 'if_condition_212658' (line 1933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1933, 8), 'if_condition_212658', if_condition_212658)
        # SSA begins for if statement (line 1933)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1934, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1933)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to update_from_data_xy(...): (line 1935)
        # Processing the call arguments (line 1935)
        # Getting the type of 'xys' (line 1935)
        xys_212662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 41), 'xys', False)
        # Getting the type of 'self' (line 1935)
        self_212663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 46), 'self', False)
        # Obtaining the member 'ignore_existing_data_limits' of a type (line 1935)
        ignore_existing_data_limits_212664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1935, 46), self_212663, 'ignore_existing_data_limits')
        # Processing the call keyword arguments (line 1935)
        # Getting the type of 'updatex' (line 1936)
        updatex_212665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 49), 'updatex', False)
        keyword_212666 = updatex_212665
        # Getting the type of 'updatey' (line 1936)
        updatey_212667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 66), 'updatey', False)
        keyword_212668 = updatey_212667
        kwargs_212669 = {'updatex': keyword_212666, 'updatey': keyword_212668}
        # Getting the type of 'self' (line 1935)
        self_212659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 8), 'self', False)
        # Obtaining the member 'dataLim' of a type (line 1935)
        dataLim_212660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1935, 8), self_212659, 'dataLim')
        # Obtaining the member 'update_from_data_xy' of a type (line 1935)
        update_from_data_xy_212661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1935, 8), dataLim_212660, 'update_from_data_xy')
        # Calling update_from_data_xy(args, kwargs) (line 1935)
        update_from_data_xy_call_result_212670 = invoke(stypy.reporting.localization.Localization(__file__, 1935, 8), update_from_data_xy_212661, *[xys_212662, ignore_existing_data_limits_212664], **kwargs_212669)
        
        
        # Assigning a Name to a Attribute (line 1937):
        
        # Assigning a Name to a Attribute (line 1937):
        # Getting the type of 'False' (line 1937)
        False_212671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 43), 'False')
        # Getting the type of 'self' (line 1937)
        self_212672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 8), 'self')
        # Setting the type of the member 'ignore_existing_data_limits' of a type (line 1937)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 8), self_212672, 'ignore_existing_data_limits', False_212671)
        
        # ################# End of 'update_datalim(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_datalim' in the type store
        # Getting the type of 'stypy_return_type' (line 1924)
        stypy_return_type_212673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212673)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_datalim'
        return stypy_return_type_212673


    @norecursion
    def update_datalim_numerix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_datalim_numerix'
        module_type_store = module_type_store.open_function_context('update_datalim_numerix', 1939, 4, False)
        # Assigning a type to the variable 'self' (line 1940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1940, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.update_datalim_numerix.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.update_datalim_numerix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.update_datalim_numerix.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.update_datalim_numerix.__dict__.__setitem__('stypy_function_name', '_AxesBase.update_datalim_numerix')
        _AxesBase.update_datalim_numerix.__dict__.__setitem__('stypy_param_names_list', ['x', 'y'])
        _AxesBase.update_datalim_numerix.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.update_datalim_numerix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.update_datalim_numerix.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.update_datalim_numerix.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.update_datalim_numerix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.update_datalim_numerix.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.update_datalim_numerix', ['x', 'y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_datalim_numerix', localization, ['x', 'y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_datalim_numerix(...)' code ##################

        unicode_212674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1943, (-1)), 'unicode', u'\n        Update the data lim bbox with seq of xy tups\n        ')
        
        
        # Evaluating a boolean operation
        
        # Call to iterable(...): (line 1948)
        # Processing the call arguments (line 1948)
        # Getting the type of 'x' (line 1948)
        x_212676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 20), 'x', False)
        # Processing the call keyword arguments (line 1948)
        kwargs_212677 = {}
        # Getting the type of 'iterable' (line 1948)
        iterable_212675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 11), 'iterable', False)
        # Calling iterable(args, kwargs) (line 1948)
        iterable_call_result_212678 = invoke(stypy.reporting.localization.Localization(__file__, 1948, 11), iterable_212675, *[x_212676], **kwargs_212677)
        
        
        
        # Call to len(...): (line 1948)
        # Processing the call arguments (line 1948)
        # Getting the type of 'x' (line 1948)
        x_212680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 35), 'x', False)
        # Processing the call keyword arguments (line 1948)
        kwargs_212681 = {}
        # Getting the type of 'len' (line 1948)
        len_212679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 31), 'len', False)
        # Calling len(args, kwargs) (line 1948)
        len_call_result_212682 = invoke(stypy.reporting.localization.Localization(__file__, 1948, 31), len_212679, *[x_212680], **kwargs_212681)
        
        # Applying the 'not' unary operator (line 1948)
        result_not__212683 = python_operator(stypy.reporting.localization.Localization(__file__, 1948, 27), 'not', len_call_result_212682)
        
        # Applying the binary operator 'and' (line 1948)
        result_and_keyword_212684 = python_operator(stypy.reporting.localization.Localization(__file__, 1948, 11), 'and', iterable_call_result_212678, result_not__212683)
        
        # Testing the type of an if condition (line 1948)
        if_condition_212685 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1948, 8), result_and_keyword_212684)
        # Assigning a type to the variable 'if_condition_212685' (line 1948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1948, 8), 'if_condition_212685', if_condition_212685)
        # SSA begins for if statement (line 1948)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1949)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1949, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1948)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to update_from_data(...): (line 1950)
        # Processing the call arguments (line 1950)
        # Getting the type of 'x' (line 1950)
        x_212689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 38), 'x', False)
        # Getting the type of 'y' (line 1950)
        y_212690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 41), 'y', False)
        # Getting the type of 'self' (line 1950)
        self_212691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 44), 'self', False)
        # Obtaining the member 'ignore_existing_data_limits' of a type (line 1950)
        ignore_existing_data_limits_212692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1950, 44), self_212691, 'ignore_existing_data_limits')
        # Processing the call keyword arguments (line 1950)
        kwargs_212693 = {}
        # Getting the type of 'self' (line 1950)
        self_212686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 8), 'self', False)
        # Obtaining the member 'dataLim' of a type (line 1950)
        dataLim_212687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1950, 8), self_212686, 'dataLim')
        # Obtaining the member 'update_from_data' of a type (line 1950)
        update_from_data_212688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1950, 8), dataLim_212687, 'update_from_data')
        # Calling update_from_data(args, kwargs) (line 1950)
        update_from_data_call_result_212694 = invoke(stypy.reporting.localization.Localization(__file__, 1950, 8), update_from_data_212688, *[x_212689, y_212690, ignore_existing_data_limits_212692], **kwargs_212693)
        
        
        # Assigning a Name to a Attribute (line 1951):
        
        # Assigning a Name to a Attribute (line 1951):
        # Getting the type of 'False' (line 1951)
        False_212695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1951, 43), 'False')
        # Getting the type of 'self' (line 1951)
        self_212696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1951, 8), 'self')
        # Setting the type of the member 'ignore_existing_data_limits' of a type (line 1951)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1951, 8), self_212696, 'ignore_existing_data_limits', False_212695)
        
        # ################# End of 'update_datalim_numerix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_datalim_numerix' in the type store
        # Getting the type of 'stypy_return_type' (line 1939)
        stypy_return_type_212697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212697)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_datalim_numerix'
        return stypy_return_type_212697


    @norecursion
    def update_datalim_bounds(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_datalim_bounds'
        module_type_store = module_type_store.open_function_context('update_datalim_bounds', 1953, 4, False)
        # Assigning a type to the variable 'self' (line 1954)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1954, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.update_datalim_bounds.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.update_datalim_bounds.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.update_datalim_bounds.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.update_datalim_bounds.__dict__.__setitem__('stypy_function_name', '_AxesBase.update_datalim_bounds')
        _AxesBase.update_datalim_bounds.__dict__.__setitem__('stypy_param_names_list', ['bounds'])
        _AxesBase.update_datalim_bounds.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.update_datalim_bounds.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.update_datalim_bounds.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.update_datalim_bounds.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.update_datalim_bounds.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.update_datalim_bounds.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.update_datalim_bounds', ['bounds'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_datalim_bounds', localization, ['bounds'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_datalim_bounds(...)' code ##################

        unicode_212698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1957, (-1)), 'unicode', u'\n        Update the datalim to include the given\n        :class:`~matplotlib.transforms.Bbox` *bounds*\n        ')
        
        # Call to set(...): (line 1958)
        # Processing the call arguments (line 1958)
        
        # Call to union(...): (line 1958)
        # Processing the call arguments (line 1958)
        
        # Obtaining an instance of the builtin type 'list' (line 1958)
        list_212705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1958, 48), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1958)
        # Adding element type (line 1958)
        # Getting the type of 'self' (line 1958)
        self_212706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 49), 'self', False)
        # Obtaining the member 'dataLim' of a type (line 1958)
        dataLim_212707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 49), self_212706, 'dataLim')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1958, 48), list_212705, dataLim_212707)
        # Adding element type (line 1958)
        # Getting the type of 'bounds' (line 1958)
        bounds_212708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 63), 'bounds', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1958, 48), list_212705, bounds_212708)
        
        # Processing the call keyword arguments (line 1958)
        kwargs_212709 = {}
        # Getting the type of 'mtransforms' (line 1958)
        mtransforms_212702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 25), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 1958)
        Bbox_212703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 25), mtransforms_212702, 'Bbox')
        # Obtaining the member 'union' of a type (line 1958)
        union_212704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 25), Bbox_212703, 'union')
        # Calling union(args, kwargs) (line 1958)
        union_call_result_212710 = invoke(stypy.reporting.localization.Localization(__file__, 1958, 25), union_212704, *[list_212705], **kwargs_212709)
        
        # Processing the call keyword arguments (line 1958)
        kwargs_212711 = {}
        # Getting the type of 'self' (line 1958)
        self_212699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 8), 'self', False)
        # Obtaining the member 'dataLim' of a type (line 1958)
        dataLim_212700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 8), self_212699, 'dataLim')
        # Obtaining the member 'set' of a type (line 1958)
        set_212701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 8), dataLim_212700, 'set')
        # Calling set(args, kwargs) (line 1958)
        set_call_result_212712 = invoke(stypy.reporting.localization.Localization(__file__, 1958, 8), set_212701, *[union_call_result_212710], **kwargs_212711)
        
        
        # ################# End of 'update_datalim_bounds(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_datalim_bounds' in the type store
        # Getting the type of 'stypy_return_type' (line 1953)
        stypy_return_type_212713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212713)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_datalim_bounds'
        return stypy_return_type_212713


    @norecursion
    def _process_unit_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1960)
        None_212714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 39), 'None')
        # Getting the type of 'None' (line 1960)
        None_212715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 51), 'None')
        # Getting the type of 'None' (line 1960)
        None_212716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 64), 'None')
        defaults = [None_212714, None_212715, None_212716]
        # Create a new context for function '_process_unit_info'
        module_type_store = module_type_store.open_function_context('_process_unit_info', 1960, 4, False)
        # Assigning a type to the variable 'self' (line 1961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1961, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._process_unit_info.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._process_unit_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._process_unit_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._process_unit_info.__dict__.__setitem__('stypy_function_name', '_AxesBase._process_unit_info')
        _AxesBase._process_unit_info.__dict__.__setitem__('stypy_param_names_list', ['xdata', 'ydata', 'kwargs'])
        _AxesBase._process_unit_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._process_unit_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._process_unit_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._process_unit_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._process_unit_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._process_unit_info.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._process_unit_info', ['xdata', 'ydata', 'kwargs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_unit_info', localization, ['xdata', 'ydata', 'kwargs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_unit_info(...)' code ##################

        unicode_212717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1961, 8), 'unicode', u'Look for unit *kwargs* and update the axis instances as necessary')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1963)
        self_212718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 11), 'self')
        # Obtaining the member 'xaxis' of a type (line 1963)
        xaxis_212719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 11), self_212718, 'xaxis')
        # Getting the type of 'None' (line 1963)
        None_212720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 25), 'None')
        # Applying the binary operator 'is' (line 1963)
        result_is__212721 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 11), 'is', xaxis_212719, None_212720)
        
        
        # Getting the type of 'self' (line 1963)
        self_212722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 33), 'self')
        # Obtaining the member 'yaxis' of a type (line 1963)
        yaxis_212723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 33), self_212722, 'yaxis')
        # Getting the type of 'None' (line 1963)
        None_212724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 47), 'None')
        # Applying the binary operator 'is' (line 1963)
        result_is__212725 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 33), 'is', yaxis_212723, None_212724)
        
        # Applying the binary operator 'or' (line 1963)
        result_or_keyword_212726 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 11), 'or', result_is__212721, result_is__212725)
        
        # Testing the type of an if condition (line 1963)
        if_condition_212727 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1963, 8), result_or_keyword_212726)
        # Assigning a type to the variable 'if_condition_212727' (line 1963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'if_condition_212727', if_condition_212727)
        # SSA begins for if statement (line 1963)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1964, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1963)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1966)
        # Getting the type of 'xdata' (line 1966)
        xdata_212728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 8), 'xdata')
        # Getting the type of 'None' (line 1966)
        None_212729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 24), 'None')
        
        (may_be_212730, more_types_in_union_212731) = may_not_be_none(xdata_212728, None_212729)

        if may_be_212730:

            if more_types_in_union_212731:
                # Runtime conditional SSA (line 1966)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            
            # Call to have_units(...): (line 1968)
            # Processing the call keyword arguments (line 1968)
            kwargs_212735 = {}
            # Getting the type of 'self' (line 1968)
            self_212732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 19), 'self', False)
            # Obtaining the member 'xaxis' of a type (line 1968)
            xaxis_212733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1968, 19), self_212732, 'xaxis')
            # Obtaining the member 'have_units' of a type (line 1968)
            have_units_212734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1968, 19), xaxis_212733, 'have_units')
            # Calling have_units(args, kwargs) (line 1968)
            have_units_call_result_212736 = invoke(stypy.reporting.localization.Localization(__file__, 1968, 19), have_units_212734, *[], **kwargs_212735)
            
            # Applying the 'not' unary operator (line 1968)
            result_not__212737 = python_operator(stypy.reporting.localization.Localization(__file__, 1968, 15), 'not', have_units_call_result_212736)
            
            # Testing the type of an if condition (line 1968)
            if_condition_212738 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1968, 12), result_not__212737)
            # Assigning a type to the variable 'if_condition_212738' (line 1968)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1968, 12), 'if_condition_212738', if_condition_212738)
            # SSA begins for if statement (line 1968)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to update_units(...): (line 1969)
            # Processing the call arguments (line 1969)
            # Getting the type of 'xdata' (line 1969)
            xdata_212742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 40), 'xdata', False)
            # Processing the call keyword arguments (line 1969)
            kwargs_212743 = {}
            # Getting the type of 'self' (line 1969)
            self_212739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 16), 'self', False)
            # Obtaining the member 'xaxis' of a type (line 1969)
            xaxis_212740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1969, 16), self_212739, 'xaxis')
            # Obtaining the member 'update_units' of a type (line 1969)
            update_units_212741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1969, 16), xaxis_212740, 'update_units')
            # Calling update_units(args, kwargs) (line 1969)
            update_units_call_result_212744 = invoke(stypy.reporting.localization.Localization(__file__, 1969, 16), update_units_212741, *[xdata_212742], **kwargs_212743)
            
            # SSA join for if statement (line 1968)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_212731:
                # SSA join for if statement (line 1966)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1971)
        # Getting the type of 'ydata' (line 1971)
        ydata_212745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 8), 'ydata')
        # Getting the type of 'None' (line 1971)
        None_212746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 24), 'None')
        
        (may_be_212747, more_types_in_union_212748) = may_not_be_none(ydata_212745, None_212746)

        if may_be_212747:

            if more_types_in_union_212748:
                # Runtime conditional SSA (line 1971)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            
            # Call to have_units(...): (line 1973)
            # Processing the call keyword arguments (line 1973)
            kwargs_212752 = {}
            # Getting the type of 'self' (line 1973)
            self_212749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 19), 'self', False)
            # Obtaining the member 'yaxis' of a type (line 1973)
            yaxis_212750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1973, 19), self_212749, 'yaxis')
            # Obtaining the member 'have_units' of a type (line 1973)
            have_units_212751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1973, 19), yaxis_212750, 'have_units')
            # Calling have_units(args, kwargs) (line 1973)
            have_units_call_result_212753 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 19), have_units_212751, *[], **kwargs_212752)
            
            # Applying the 'not' unary operator (line 1973)
            result_not__212754 = python_operator(stypy.reporting.localization.Localization(__file__, 1973, 15), 'not', have_units_call_result_212753)
            
            # Testing the type of an if condition (line 1973)
            if_condition_212755 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1973, 12), result_not__212754)
            # Assigning a type to the variable 'if_condition_212755' (line 1973)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 12), 'if_condition_212755', if_condition_212755)
            # SSA begins for if statement (line 1973)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to update_units(...): (line 1974)
            # Processing the call arguments (line 1974)
            # Getting the type of 'ydata' (line 1974)
            ydata_212759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 40), 'ydata', False)
            # Processing the call keyword arguments (line 1974)
            kwargs_212760 = {}
            # Getting the type of 'self' (line 1974)
            self_212756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 16), 'self', False)
            # Obtaining the member 'yaxis' of a type (line 1974)
            yaxis_212757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1974, 16), self_212756, 'yaxis')
            # Obtaining the member 'update_units' of a type (line 1974)
            update_units_212758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1974, 16), yaxis_212757, 'update_units')
            # Calling update_units(args, kwargs) (line 1974)
            update_units_call_result_212761 = invoke(stypy.reporting.localization.Localization(__file__, 1974, 16), update_units_212758, *[ydata_212759], **kwargs_212760)
            
            # SSA join for if statement (line 1973)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_212748:
                # SSA join for if statement (line 1971)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1977)
        # Getting the type of 'kwargs' (line 1977)
        kwargs_212762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 8), 'kwargs')
        # Getting the type of 'None' (line 1977)
        None_212763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 25), 'None')
        
        (may_be_212764, more_types_in_union_212765) = may_not_be_none(kwargs_212762, None_212763)

        if may_be_212764:

            if more_types_in_union_212765:
                # Runtime conditional SSA (line 1977)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1978):
            
            # Assigning a Call to a Name (line 1978):
            
            # Call to pop(...): (line 1978)
            # Processing the call arguments (line 1978)
            unicode_212768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1978, 32), 'unicode', u'xunits')
            # Getting the type of 'self' (line 1978)
            self_212769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 42), 'self', False)
            # Obtaining the member 'xaxis' of a type (line 1978)
            xaxis_212770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1978, 42), self_212769, 'xaxis')
            # Obtaining the member 'units' of a type (line 1978)
            units_212771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1978, 42), xaxis_212770, 'units')
            # Processing the call keyword arguments (line 1978)
            kwargs_212772 = {}
            # Getting the type of 'kwargs' (line 1978)
            kwargs_212766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 21), 'kwargs', False)
            # Obtaining the member 'pop' of a type (line 1978)
            pop_212767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1978, 21), kwargs_212766, 'pop')
            # Calling pop(args, kwargs) (line 1978)
            pop_call_result_212773 = invoke(stypy.reporting.localization.Localization(__file__, 1978, 21), pop_212767, *[unicode_212768, units_212771], **kwargs_212772)
            
            # Assigning a type to the variable 'xunits' (line 1978)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1978, 12), 'xunits', pop_call_result_212773)
            
            
            # Getting the type of 'self' (line 1979)
            self_212774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 15), 'self')
            # Obtaining the member 'name' of a type (line 1979)
            name_212775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1979, 15), self_212774, 'name')
            unicode_212776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1979, 28), 'unicode', u'polar')
            # Applying the binary operator '==' (line 1979)
            result_eq_212777 = python_operator(stypy.reporting.localization.Localization(__file__, 1979, 15), '==', name_212775, unicode_212776)
            
            # Testing the type of an if condition (line 1979)
            if_condition_212778 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1979, 12), result_eq_212777)
            # Assigning a type to the variable 'if_condition_212778' (line 1979)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1979, 12), 'if_condition_212778', if_condition_212778)
            # SSA begins for if statement (line 1979)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 1980):
            
            # Assigning a Call to a Name (line 1980):
            
            # Call to pop(...): (line 1980)
            # Processing the call arguments (line 1980)
            unicode_212781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1980, 36), 'unicode', u'thetaunits')
            # Getting the type of 'xunits' (line 1980)
            xunits_212782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 50), 'xunits', False)
            # Processing the call keyword arguments (line 1980)
            kwargs_212783 = {}
            # Getting the type of 'kwargs' (line 1980)
            kwargs_212779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 25), 'kwargs', False)
            # Obtaining the member 'pop' of a type (line 1980)
            pop_212780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1980, 25), kwargs_212779, 'pop')
            # Calling pop(args, kwargs) (line 1980)
            pop_call_result_212784 = invoke(stypy.reporting.localization.Localization(__file__, 1980, 25), pop_212780, *[unicode_212781, xunits_212782], **kwargs_212783)
            
            # Assigning a type to the variable 'xunits' (line 1980)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1980, 16), 'xunits', pop_call_result_212784)
            # SSA join for if statement (line 1979)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Getting the type of 'xunits' (line 1981)
            xunits_212785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 15), 'xunits')
            # Getting the type of 'self' (line 1981)
            self_212786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 25), 'self')
            # Obtaining the member 'xaxis' of a type (line 1981)
            xaxis_212787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1981, 25), self_212786, 'xaxis')
            # Obtaining the member 'units' of a type (line 1981)
            units_212788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1981, 25), xaxis_212787, 'units')
            # Applying the binary operator '!=' (line 1981)
            result_ne_212789 = python_operator(stypy.reporting.localization.Localization(__file__, 1981, 15), '!=', xunits_212785, units_212788)
            
            # Testing the type of an if condition (line 1981)
            if_condition_212790 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1981, 12), result_ne_212789)
            # Assigning a type to the variable 'if_condition_212790' (line 1981)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1981, 12), 'if_condition_212790', if_condition_212790)
            # SSA begins for if statement (line 1981)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to set_units(...): (line 1982)
            # Processing the call arguments (line 1982)
            # Getting the type of 'xunits' (line 1982)
            xunits_212794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 37), 'xunits', False)
            # Processing the call keyword arguments (line 1982)
            kwargs_212795 = {}
            # Getting the type of 'self' (line 1982)
            self_212791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 16), 'self', False)
            # Obtaining the member 'xaxis' of a type (line 1982)
            xaxis_212792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1982, 16), self_212791, 'xaxis')
            # Obtaining the member 'set_units' of a type (line 1982)
            set_units_212793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1982, 16), xaxis_212792, 'set_units')
            # Calling set_units(args, kwargs) (line 1982)
            set_units_call_result_212796 = invoke(stypy.reporting.localization.Localization(__file__, 1982, 16), set_units_212793, *[xunits_212794], **kwargs_212795)
            
            
            # Type idiom detected: calculating its left and rigth part (line 1985)
            # Getting the type of 'xdata' (line 1985)
            xdata_212797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 16), 'xdata')
            # Getting the type of 'None' (line 1985)
            None_212798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 32), 'None')
            
            (may_be_212799, more_types_in_union_212800) = may_not_be_none(xdata_212797, None_212798)

            if may_be_212799:

                if more_types_in_union_212800:
                    # Runtime conditional SSA (line 1985)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Call to update_units(...): (line 1986)
                # Processing the call arguments (line 1986)
                # Getting the type of 'xdata' (line 1986)
                xdata_212804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1986, 44), 'xdata', False)
                # Processing the call keyword arguments (line 1986)
                kwargs_212805 = {}
                # Getting the type of 'self' (line 1986)
                self_212801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1986, 20), 'self', False)
                # Obtaining the member 'xaxis' of a type (line 1986)
                xaxis_212802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1986, 20), self_212801, 'xaxis')
                # Obtaining the member 'update_units' of a type (line 1986)
                update_units_212803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1986, 20), xaxis_212802, 'update_units')
                # Calling update_units(args, kwargs) (line 1986)
                update_units_call_result_212806 = invoke(stypy.reporting.localization.Localization(__file__, 1986, 20), update_units_212803, *[xdata_212804], **kwargs_212805)
                

                if more_types_in_union_212800:
                    # SSA join for if statement (line 1985)
                    module_type_store = module_type_store.join_ssa_context()


            
            # SSA join for if statement (line 1981)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 1988):
            
            # Assigning a Call to a Name (line 1988):
            
            # Call to pop(...): (line 1988)
            # Processing the call arguments (line 1988)
            unicode_212809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1988, 32), 'unicode', u'yunits')
            # Getting the type of 'self' (line 1988)
            self_212810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1988, 42), 'self', False)
            # Obtaining the member 'yaxis' of a type (line 1988)
            yaxis_212811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1988, 42), self_212810, 'yaxis')
            # Obtaining the member 'units' of a type (line 1988)
            units_212812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1988, 42), yaxis_212811, 'units')
            # Processing the call keyword arguments (line 1988)
            kwargs_212813 = {}
            # Getting the type of 'kwargs' (line 1988)
            kwargs_212807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1988, 21), 'kwargs', False)
            # Obtaining the member 'pop' of a type (line 1988)
            pop_212808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1988, 21), kwargs_212807, 'pop')
            # Calling pop(args, kwargs) (line 1988)
            pop_call_result_212814 = invoke(stypy.reporting.localization.Localization(__file__, 1988, 21), pop_212808, *[unicode_212809, units_212812], **kwargs_212813)
            
            # Assigning a type to the variable 'yunits' (line 1988)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1988, 12), 'yunits', pop_call_result_212814)
            
            
            # Getting the type of 'self' (line 1989)
            self_212815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1989, 15), 'self')
            # Obtaining the member 'name' of a type (line 1989)
            name_212816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1989, 15), self_212815, 'name')
            unicode_212817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1989, 28), 'unicode', u'polar')
            # Applying the binary operator '==' (line 1989)
            result_eq_212818 = python_operator(stypy.reporting.localization.Localization(__file__, 1989, 15), '==', name_212816, unicode_212817)
            
            # Testing the type of an if condition (line 1989)
            if_condition_212819 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1989, 12), result_eq_212818)
            # Assigning a type to the variable 'if_condition_212819' (line 1989)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1989, 12), 'if_condition_212819', if_condition_212819)
            # SSA begins for if statement (line 1989)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 1990):
            
            # Assigning a Call to a Name (line 1990):
            
            # Call to pop(...): (line 1990)
            # Processing the call arguments (line 1990)
            unicode_212822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1990, 36), 'unicode', u'runits')
            # Getting the type of 'yunits' (line 1990)
            yunits_212823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 46), 'yunits', False)
            # Processing the call keyword arguments (line 1990)
            kwargs_212824 = {}
            # Getting the type of 'kwargs' (line 1990)
            kwargs_212820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 25), 'kwargs', False)
            # Obtaining the member 'pop' of a type (line 1990)
            pop_212821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1990, 25), kwargs_212820, 'pop')
            # Calling pop(args, kwargs) (line 1990)
            pop_call_result_212825 = invoke(stypy.reporting.localization.Localization(__file__, 1990, 25), pop_212821, *[unicode_212822, yunits_212823], **kwargs_212824)
            
            # Assigning a type to the variable 'yunits' (line 1990)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1990, 16), 'yunits', pop_call_result_212825)
            # SSA join for if statement (line 1989)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Getting the type of 'yunits' (line 1991)
            yunits_212826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 15), 'yunits')
            # Getting the type of 'self' (line 1991)
            self_212827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 25), 'self')
            # Obtaining the member 'yaxis' of a type (line 1991)
            yaxis_212828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1991, 25), self_212827, 'yaxis')
            # Obtaining the member 'units' of a type (line 1991)
            units_212829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1991, 25), yaxis_212828, 'units')
            # Applying the binary operator '!=' (line 1991)
            result_ne_212830 = python_operator(stypy.reporting.localization.Localization(__file__, 1991, 15), '!=', yunits_212826, units_212829)
            
            # Testing the type of an if condition (line 1991)
            if_condition_212831 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1991, 12), result_ne_212830)
            # Assigning a type to the variable 'if_condition_212831' (line 1991)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1991, 12), 'if_condition_212831', if_condition_212831)
            # SSA begins for if statement (line 1991)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to set_units(...): (line 1992)
            # Processing the call arguments (line 1992)
            # Getting the type of 'yunits' (line 1992)
            yunits_212835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 37), 'yunits', False)
            # Processing the call keyword arguments (line 1992)
            kwargs_212836 = {}
            # Getting the type of 'self' (line 1992)
            self_212832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 16), 'self', False)
            # Obtaining the member 'yaxis' of a type (line 1992)
            yaxis_212833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1992, 16), self_212832, 'yaxis')
            # Obtaining the member 'set_units' of a type (line 1992)
            set_units_212834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1992, 16), yaxis_212833, 'set_units')
            # Calling set_units(args, kwargs) (line 1992)
            set_units_call_result_212837 = invoke(stypy.reporting.localization.Localization(__file__, 1992, 16), set_units_212834, *[yunits_212835], **kwargs_212836)
            
            
            # Type idiom detected: calculating its left and rigth part (line 1995)
            # Getting the type of 'ydata' (line 1995)
            ydata_212838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 16), 'ydata')
            # Getting the type of 'None' (line 1995)
            None_212839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 32), 'None')
            
            (may_be_212840, more_types_in_union_212841) = may_not_be_none(ydata_212838, None_212839)

            if may_be_212840:

                if more_types_in_union_212841:
                    # Runtime conditional SSA (line 1995)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Call to update_units(...): (line 1996)
                # Processing the call arguments (line 1996)
                # Getting the type of 'ydata' (line 1996)
                ydata_212845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 44), 'ydata', False)
                # Processing the call keyword arguments (line 1996)
                kwargs_212846 = {}
                # Getting the type of 'self' (line 1996)
                self_212842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 20), 'self', False)
                # Obtaining the member 'yaxis' of a type (line 1996)
                yaxis_212843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1996, 20), self_212842, 'yaxis')
                # Obtaining the member 'update_units' of a type (line 1996)
                update_units_212844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1996, 20), yaxis_212843, 'update_units')
                # Calling update_units(args, kwargs) (line 1996)
                update_units_call_result_212847 = invoke(stypy.reporting.localization.Localization(__file__, 1996, 20), update_units_212844, *[ydata_212845], **kwargs_212846)
                

                if more_types_in_union_212841:
                    # SSA join for if statement (line 1995)
                    module_type_store = module_type_store.join_ssa_context()


            
            # SSA join for if statement (line 1991)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_212765:
                # SSA join for if statement (line 1977)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'kwargs' (line 1997)
        kwargs_212848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 15), 'kwargs')
        # Assigning a type to the variable 'stypy_return_type' (line 1997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1997, 8), 'stypy_return_type', kwargs_212848)
        
        # ################# End of '_process_unit_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_unit_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1960)
        stypy_return_type_212849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212849)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_unit_info'
        return stypy_return_type_212849


    @norecursion
    def in_axes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'in_axes'
        module_type_store = module_type_store.open_function_context('in_axes', 1999, 4, False)
        # Assigning a type to the variable 'self' (line 2000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2000, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.in_axes.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.in_axes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.in_axes.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.in_axes.__dict__.__setitem__('stypy_function_name', '_AxesBase.in_axes')
        _AxesBase.in_axes.__dict__.__setitem__('stypy_param_names_list', ['mouseevent'])
        _AxesBase.in_axes.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.in_axes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.in_axes.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.in_axes.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.in_axes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.in_axes.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.in_axes', ['mouseevent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'in_axes', localization, ['mouseevent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'in_axes(...)' code ##################

        unicode_212850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2003, (-1)), 'unicode', u'\n        Return *True* if the given *mouseevent* (in display coords)\n        is in the Axes\n        ')
        
        # Obtaining the type of the subscript
        int_212851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 47), 'int')
        
        # Call to contains(...): (line 2004)
        # Processing the call arguments (line 2004)
        # Getting the type of 'mouseevent' (line 2004)
        mouseevent_212855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 35), 'mouseevent', False)
        # Processing the call keyword arguments (line 2004)
        kwargs_212856 = {}
        # Getting the type of 'self' (line 2004)
        self_212852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 15), 'self', False)
        # Obtaining the member 'patch' of a type (line 2004)
        patch_212853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2004, 15), self_212852, 'patch')
        # Obtaining the member 'contains' of a type (line 2004)
        contains_212854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2004, 15), patch_212853, 'contains')
        # Calling contains(args, kwargs) (line 2004)
        contains_call_result_212857 = invoke(stypy.reporting.localization.Localization(__file__, 2004, 15), contains_212854, *[mouseevent_212855], **kwargs_212856)
        
        # Obtaining the member '__getitem__' of a type (line 2004)
        getitem___212858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2004, 15), contains_call_result_212857, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2004)
        subscript_call_result_212859 = invoke(stypy.reporting.localization.Localization(__file__, 2004, 15), getitem___212858, int_212851)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2004)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2004, 8), 'stypy_return_type', subscript_call_result_212859)
        
        # ################# End of 'in_axes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'in_axes' in the type store
        # Getting the type of 'stypy_return_type' (line 1999)
        stypy_return_type_212860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212860)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'in_axes'
        return stypy_return_type_212860


    @norecursion
    def get_autoscale_on(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_autoscale_on'
        module_type_store = module_type_store.open_function_context('get_autoscale_on', 2006, 4, False)
        # Assigning a type to the variable 'self' (line 2007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2007, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_autoscale_on.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_autoscale_on.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_autoscale_on.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_autoscale_on.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_autoscale_on')
        _AxesBase.get_autoscale_on.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_autoscale_on.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_autoscale_on.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_autoscale_on.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_autoscale_on.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_autoscale_on.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_autoscale_on.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_autoscale_on', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_autoscale_on', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_autoscale_on(...)' code ##################

        unicode_212861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2009, (-1)), 'unicode', u'\n        Get whether autoscaling is applied for both axes on plot commands\n        ')
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2010)
        self_212862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 15), 'self')
        # Obtaining the member '_autoscaleXon' of a type (line 2010)
        _autoscaleXon_212863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2010, 15), self_212862, '_autoscaleXon')
        # Getting the type of 'self' (line 2010)
        self_212864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 38), 'self')
        # Obtaining the member '_autoscaleYon' of a type (line 2010)
        _autoscaleYon_212865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2010, 38), self_212864, '_autoscaleYon')
        # Applying the binary operator 'and' (line 2010)
        result_and_keyword_212866 = python_operator(stypy.reporting.localization.Localization(__file__, 2010, 15), 'and', _autoscaleXon_212863, _autoscaleYon_212865)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2010, 8), 'stypy_return_type', result_and_keyword_212866)
        
        # ################# End of 'get_autoscale_on(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_autoscale_on' in the type store
        # Getting the type of 'stypy_return_type' (line 2006)
        stypy_return_type_212867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212867)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_autoscale_on'
        return stypy_return_type_212867


    @norecursion
    def get_autoscalex_on(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_autoscalex_on'
        module_type_store = module_type_store.open_function_context('get_autoscalex_on', 2012, 4, False)
        # Assigning a type to the variable 'self' (line 2013)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2013, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_autoscalex_on.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_autoscalex_on.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_autoscalex_on.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_autoscalex_on.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_autoscalex_on')
        _AxesBase.get_autoscalex_on.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_autoscalex_on.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_autoscalex_on.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_autoscalex_on.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_autoscalex_on.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_autoscalex_on.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_autoscalex_on.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_autoscalex_on', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_autoscalex_on', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_autoscalex_on(...)' code ##################

        unicode_212868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2015, (-1)), 'unicode', u'\n        Get whether autoscaling for the x-axis is applied on plot commands\n        ')
        # Getting the type of 'self' (line 2016)
        self_212869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 15), 'self')
        # Obtaining the member '_autoscaleXon' of a type (line 2016)
        _autoscaleXon_212870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2016, 15), self_212869, '_autoscaleXon')
        # Assigning a type to the variable 'stypy_return_type' (line 2016)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2016, 8), 'stypy_return_type', _autoscaleXon_212870)
        
        # ################# End of 'get_autoscalex_on(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_autoscalex_on' in the type store
        # Getting the type of 'stypy_return_type' (line 2012)
        stypy_return_type_212871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212871)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_autoscalex_on'
        return stypy_return_type_212871


    @norecursion
    def get_autoscaley_on(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_autoscaley_on'
        module_type_store = module_type_store.open_function_context('get_autoscaley_on', 2018, 4, False)
        # Assigning a type to the variable 'self' (line 2019)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2019, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_autoscaley_on.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_autoscaley_on.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_autoscaley_on.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_autoscaley_on.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_autoscaley_on')
        _AxesBase.get_autoscaley_on.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_autoscaley_on.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_autoscaley_on.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_autoscaley_on.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_autoscaley_on.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_autoscaley_on.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_autoscaley_on.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_autoscaley_on', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_autoscaley_on', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_autoscaley_on(...)' code ##################

        unicode_212872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2021, (-1)), 'unicode', u'\n        Get whether autoscaling for the y-axis is applied on plot commands\n        ')
        # Getting the type of 'self' (line 2022)
        self_212873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2022, 15), 'self')
        # Obtaining the member '_autoscaleYon' of a type (line 2022)
        _autoscaleYon_212874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2022, 15), self_212873, '_autoscaleYon')
        # Assigning a type to the variable 'stypy_return_type' (line 2022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2022, 8), 'stypy_return_type', _autoscaleYon_212874)
        
        # ################# End of 'get_autoscaley_on(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_autoscaley_on' in the type store
        # Getting the type of 'stypy_return_type' (line 2018)
        stypy_return_type_212875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212875)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_autoscaley_on'
        return stypy_return_type_212875


    @norecursion
    def set_autoscale_on(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_autoscale_on'
        module_type_store = module_type_store.open_function_context('set_autoscale_on', 2024, 4, False)
        # Assigning a type to the variable 'self' (line 2025)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2025, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_autoscale_on.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_autoscale_on.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_autoscale_on.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_autoscale_on.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_autoscale_on')
        _AxesBase.set_autoscale_on.__dict__.__setitem__('stypy_param_names_list', ['b'])
        _AxesBase.set_autoscale_on.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_autoscale_on.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_autoscale_on.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_autoscale_on.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_autoscale_on.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_autoscale_on.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_autoscale_on', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_autoscale_on', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_autoscale_on(...)' code ##################

        unicode_212876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2029, (-1)), 'unicode', u'\n        Set whether autoscaling is applied on plot commands\n\n        accepts: [ *True* | *False* ]\n        ')
        
        # Assigning a Name to a Attribute (line 2030):
        
        # Assigning a Name to a Attribute (line 2030):
        # Getting the type of 'b' (line 2030)
        b_212877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 29), 'b')
        # Getting the type of 'self' (line 2030)
        self_212878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 8), 'self')
        # Setting the type of the member '_autoscaleXon' of a type (line 2030)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2030, 8), self_212878, '_autoscaleXon', b_212877)
        
        # Assigning a Name to a Attribute (line 2031):
        
        # Assigning a Name to a Attribute (line 2031):
        # Getting the type of 'b' (line 2031)
        b_212879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 29), 'b')
        # Getting the type of 'self' (line 2031)
        self_212880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 8), 'self')
        # Setting the type of the member '_autoscaleYon' of a type (line 2031)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2031, 8), self_212880, '_autoscaleYon', b_212879)
        
        # ################# End of 'set_autoscale_on(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_autoscale_on' in the type store
        # Getting the type of 'stypy_return_type' (line 2024)
        stypy_return_type_212881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212881)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_autoscale_on'
        return stypy_return_type_212881


    @norecursion
    def set_autoscalex_on(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_autoscalex_on'
        module_type_store = module_type_store.open_function_context('set_autoscalex_on', 2033, 4, False)
        # Assigning a type to the variable 'self' (line 2034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2034, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_autoscalex_on.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_autoscalex_on.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_autoscalex_on.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_autoscalex_on.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_autoscalex_on')
        _AxesBase.set_autoscalex_on.__dict__.__setitem__('stypy_param_names_list', ['b'])
        _AxesBase.set_autoscalex_on.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_autoscalex_on.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_autoscalex_on.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_autoscalex_on.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_autoscalex_on.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_autoscalex_on.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_autoscalex_on', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_autoscalex_on', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_autoscalex_on(...)' code ##################

        unicode_212882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2038, (-1)), 'unicode', u'\n        Set whether autoscaling for the x-axis is applied on plot commands\n\n        accepts: [ *True* | *False* ]\n        ')
        
        # Assigning a Name to a Attribute (line 2039):
        
        # Assigning a Name to a Attribute (line 2039):
        # Getting the type of 'b' (line 2039)
        b_212883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 29), 'b')
        # Getting the type of 'self' (line 2039)
        self_212884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 8), 'self')
        # Setting the type of the member '_autoscaleXon' of a type (line 2039)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2039, 8), self_212884, '_autoscaleXon', b_212883)
        
        # ################# End of 'set_autoscalex_on(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_autoscalex_on' in the type store
        # Getting the type of 'stypy_return_type' (line 2033)
        stypy_return_type_212885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2033, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212885)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_autoscalex_on'
        return stypy_return_type_212885


    @norecursion
    def set_autoscaley_on(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_autoscaley_on'
        module_type_store = module_type_store.open_function_context('set_autoscaley_on', 2041, 4, False)
        # Assigning a type to the variable 'self' (line 2042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2042, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_autoscaley_on.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_autoscaley_on.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_autoscaley_on.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_autoscaley_on.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_autoscaley_on')
        _AxesBase.set_autoscaley_on.__dict__.__setitem__('stypy_param_names_list', ['b'])
        _AxesBase.set_autoscaley_on.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_autoscaley_on.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_autoscaley_on.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_autoscaley_on.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_autoscaley_on.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_autoscaley_on.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_autoscaley_on', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_autoscaley_on', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_autoscaley_on(...)' code ##################

        unicode_212886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2046, (-1)), 'unicode', u'\n        Set whether autoscaling for the y-axis is applied on plot commands\n\n        accepts: [ *True* | *False* ]\n        ')
        
        # Assigning a Name to a Attribute (line 2047):
        
        # Assigning a Name to a Attribute (line 2047):
        # Getting the type of 'b' (line 2047)
        b_212887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2047, 29), 'b')
        # Getting the type of 'self' (line 2047)
        self_212888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2047, 8), 'self')
        # Setting the type of the member '_autoscaleYon' of a type (line 2047)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2047, 8), self_212888, '_autoscaleYon', b_212887)
        
        # ################# End of 'set_autoscaley_on(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_autoscaley_on' in the type store
        # Getting the type of 'stypy_return_type' (line 2041)
        stypy_return_type_212889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212889)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_autoscaley_on'
        return stypy_return_type_212889


    @norecursion
    def use_sticky_edges(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'use_sticky_edges'
        module_type_store = module_type_store.open_function_context('use_sticky_edges', 2049, 4, False)
        # Assigning a type to the variable 'self' (line 2050)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2050, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_function_name', '_AxesBase.use_sticky_edges')
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.use_sticky_edges', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'use_sticky_edges', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'use_sticky_edges(...)' code ##################

        unicode_212890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2063, (-1)), 'unicode', u'\n        When autoscaling, whether to obey all `Artist.sticky_edges`.\n\n        Default is ``True``.\n\n        Setting this to ``False`` ensures that the specified margins\n        will be applied, even if the plot includes an image, for\n        example, which would otherwise force a view limit to coincide\n        with its data limit.\n\n        The changing this property does not change the plot until\n        `autoscale` or `autoscale_view` is called.\n        ')
        # Getting the type of 'self' (line 2064)
        self_212891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 15), 'self')
        # Obtaining the member '_use_sticky_edges' of a type (line 2064)
        _use_sticky_edges_212892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2064, 15), self_212891, '_use_sticky_edges')
        # Assigning a type to the variable 'stypy_return_type' (line 2064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2064, 8), 'stypy_return_type', _use_sticky_edges_212892)
        
        # ################# End of 'use_sticky_edges(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'use_sticky_edges' in the type store
        # Getting the type of 'stypy_return_type' (line 2049)
        stypy_return_type_212893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212893)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'use_sticky_edges'
        return stypy_return_type_212893


    @norecursion
    def use_sticky_edges(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'use_sticky_edges'
        module_type_store = module_type_store.open_function_context('use_sticky_edges', 2066, 4, False)
        # Assigning a type to the variable 'self' (line 2067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2067, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_function_name', '_AxesBase.use_sticky_edges')
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_param_names_list', ['b'])
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.use_sticky_edges.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.use_sticky_edges', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'use_sticky_edges', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'use_sticky_edges(...)' code ##################

        
        # Assigning a Call to a Attribute (line 2068):
        
        # Assigning a Call to a Attribute (line 2068):
        
        # Call to bool(...): (line 2068)
        # Processing the call arguments (line 2068)
        # Getting the type of 'b' (line 2068)
        b_212895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 38), 'b', False)
        # Processing the call keyword arguments (line 2068)
        kwargs_212896 = {}
        # Getting the type of 'bool' (line 2068)
        bool_212894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 33), 'bool', False)
        # Calling bool(args, kwargs) (line 2068)
        bool_call_result_212897 = invoke(stypy.reporting.localization.Localization(__file__, 2068, 33), bool_212894, *[b_212895], **kwargs_212896)
        
        # Getting the type of 'self' (line 2068)
        self_212898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 8), 'self')
        # Setting the type of the member '_use_sticky_edges' of a type (line 2068)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2068, 8), self_212898, '_use_sticky_edges', bool_call_result_212897)
        
        # ################# End of 'use_sticky_edges(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'use_sticky_edges' in the type store
        # Getting the type of 'stypy_return_type' (line 2066)
        stypy_return_type_212899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212899)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'use_sticky_edges'
        return stypy_return_type_212899


    @norecursion
    def set_xmargin(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_xmargin'
        module_type_store = module_type_store.open_function_context('set_xmargin', 2071, 4, False)
        # Assigning a type to the variable 'self' (line 2072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2072, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_xmargin.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_xmargin.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_xmargin.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_xmargin.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_xmargin')
        _AxesBase.set_xmargin.__dict__.__setitem__('stypy_param_names_list', ['m'])
        _AxesBase.set_xmargin.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_xmargin.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_xmargin.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_xmargin.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_xmargin.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_xmargin.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_xmargin', ['m'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_xmargin', localization, ['m'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_xmargin(...)' code ##################

        unicode_212900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2079, (-1)), 'unicode', u'\n        Set padding of X data limits prior to autoscaling.\n\n        *m* times the data interval will be added to each\n        end of that interval before it is used in autoscaling.\n\n        accepts: float in range 0 to 1\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'm' (line 2080)
        m_212901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 11), 'm')
        int_212902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2080, 15), 'int')
        # Applying the binary operator '<' (line 2080)
        result_lt_212903 = python_operator(stypy.reporting.localization.Localization(__file__, 2080, 11), '<', m_212901, int_212902)
        
        
        # Getting the type of 'm' (line 2080)
        m_212904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 20), 'm')
        int_212905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2080, 24), 'int')
        # Applying the binary operator '>' (line 2080)
        result_gt_212906 = python_operator(stypy.reporting.localization.Localization(__file__, 2080, 20), '>', m_212904, int_212905)
        
        # Applying the binary operator 'or' (line 2080)
        result_or_keyword_212907 = python_operator(stypy.reporting.localization.Localization(__file__, 2080, 11), 'or', result_lt_212903, result_gt_212906)
        
        # Testing the type of an if condition (line 2080)
        if_condition_212908 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2080, 8), result_or_keyword_212907)
        # Assigning a type to the variable 'if_condition_212908' (line 2080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2080, 8), 'if_condition_212908', if_condition_212908)
        # SSA begins for if statement (line 2080)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2081)
        # Processing the call arguments (line 2081)
        unicode_212910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2081, 29), 'unicode', u'margin must be in range 0 to 1')
        # Processing the call keyword arguments (line 2081)
        kwargs_212911 = {}
        # Getting the type of 'ValueError' (line 2081)
        ValueError_212909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2081)
        ValueError_call_result_212912 = invoke(stypy.reporting.localization.Localization(__file__, 2081, 18), ValueError_212909, *[unicode_212910], **kwargs_212911)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2081, 12), ValueError_call_result_212912, 'raise parameter', BaseException)
        # SSA join for if statement (line 2080)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2082):
        
        # Assigning a Name to a Attribute (line 2082):
        # Getting the type of 'm' (line 2082)
        m_212913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 24), 'm')
        # Getting the type of 'self' (line 2082)
        self_212914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 8), 'self')
        # Setting the type of the member '_xmargin' of a type (line 2082)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2082, 8), self_212914, '_xmargin', m_212913)
        
        # Assigning a Name to a Attribute (line 2083):
        
        # Assigning a Name to a Attribute (line 2083):
        # Getting the type of 'True' (line 2083)
        True_212915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 21), 'True')
        # Getting the type of 'self' (line 2083)
        self_212916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2083)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 8), self_212916, 'stale', True_212915)
        
        # ################# End of 'set_xmargin(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_xmargin' in the type store
        # Getting the type of 'stypy_return_type' (line 2071)
        stypy_return_type_212917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212917)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_xmargin'
        return stypy_return_type_212917


    @norecursion
    def set_ymargin(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_ymargin'
        module_type_store = module_type_store.open_function_context('set_ymargin', 2085, 4, False)
        # Assigning a type to the variable 'self' (line 2086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2086, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_ymargin.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_ymargin.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_ymargin.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_ymargin.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_ymargin')
        _AxesBase.set_ymargin.__dict__.__setitem__('stypy_param_names_list', ['m'])
        _AxesBase.set_ymargin.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_ymargin.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_ymargin.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_ymargin.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_ymargin.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_ymargin.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_ymargin', ['m'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ymargin', localization, ['m'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ymargin(...)' code ##################

        unicode_212918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2093, (-1)), 'unicode', u'\n        Set padding of Y data limits prior to autoscaling.\n\n        *m* times the data interval will be added to each\n        end of that interval before it is used in autoscaling.\n\n        accepts: float in range 0 to 1\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'm' (line 2094)
        m_212919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 11), 'm')
        int_212920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 15), 'int')
        # Applying the binary operator '<' (line 2094)
        result_lt_212921 = python_operator(stypy.reporting.localization.Localization(__file__, 2094, 11), '<', m_212919, int_212920)
        
        
        # Getting the type of 'm' (line 2094)
        m_212922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 20), 'm')
        int_212923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 24), 'int')
        # Applying the binary operator '>' (line 2094)
        result_gt_212924 = python_operator(stypy.reporting.localization.Localization(__file__, 2094, 20), '>', m_212922, int_212923)
        
        # Applying the binary operator 'or' (line 2094)
        result_or_keyword_212925 = python_operator(stypy.reporting.localization.Localization(__file__, 2094, 11), 'or', result_lt_212921, result_gt_212924)
        
        # Testing the type of an if condition (line 2094)
        if_condition_212926 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2094, 8), result_or_keyword_212925)
        # Assigning a type to the variable 'if_condition_212926' (line 2094)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'if_condition_212926', if_condition_212926)
        # SSA begins for if statement (line 2094)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2095)
        # Processing the call arguments (line 2095)
        unicode_212928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2095, 29), 'unicode', u'margin must be in range 0 to 1')
        # Processing the call keyword arguments (line 2095)
        kwargs_212929 = {}
        # Getting the type of 'ValueError' (line 2095)
        ValueError_212927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2095)
        ValueError_call_result_212930 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 18), ValueError_212927, *[unicode_212928], **kwargs_212929)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2095, 12), ValueError_call_result_212930, 'raise parameter', BaseException)
        # SSA join for if statement (line 2094)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2096):
        
        # Assigning a Name to a Attribute (line 2096):
        # Getting the type of 'm' (line 2096)
        m_212931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2096, 24), 'm')
        # Getting the type of 'self' (line 2096)
        self_212932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2096, 8), 'self')
        # Setting the type of the member '_ymargin' of a type (line 2096)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2096, 8), self_212932, '_ymargin', m_212931)
        
        # Assigning a Name to a Attribute (line 2097):
        
        # Assigning a Name to a Attribute (line 2097):
        # Getting the type of 'True' (line 2097)
        True_212933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 21), 'True')
        # Getting the type of 'self' (line 2097)
        self_212934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2097)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2097, 8), self_212934, 'stale', True_212933)
        
        # ################# End of 'set_ymargin(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ymargin' in the type store
        # Getting the type of 'stypy_return_type' (line 2085)
        stypy_return_type_212935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_212935)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ymargin'
        return stypy_return_type_212935


    @norecursion
    def margins(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'margins'
        module_type_store = module_type_store.open_function_context('margins', 2099, 4, False)
        # Assigning a type to the variable 'self' (line 2100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.margins.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.margins.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.margins.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.margins.__dict__.__setitem__('stypy_function_name', '_AxesBase.margins')
        _AxesBase.margins.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.margins.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _AxesBase.margins.__dict__.__setitem__('stypy_kwargs_param_name', 'kw')
        _AxesBase.margins.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.margins.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.margins.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.margins.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.margins', [], 'args', 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'margins', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'margins(...)' code ##################

        unicode_212936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2133, (-1)), 'unicode', u'\n        Set or retrieve autoscaling margins.\n\n        signatures::\n\n            margins()\n\n        returns xmargin, ymargin\n\n        ::\n\n            margins(margin)\n\n            margins(xmargin, ymargin)\n\n            margins(x=xmargin, y=ymargin)\n\n            margins(..., tight=False)\n\n        All three forms above set the xmargin and ymargin parameters.\n        All keyword parameters are optional.  A single argument\n        specifies both xmargin and ymargin.  The *tight* parameter\n        is passed to :meth:`autoscale_view`, which is executed after\n        a margin is changed; the default here is *True*, on the\n        assumption that when margins are specified, no additional\n        padding to match tick marks is usually desired.  Setting\n        *tight* to *None* will preserve the previous setting.\n\n        Specifying any margin changes only the autoscaling; for example,\n        if *xmargin* is not None, then *xmargin* times the X data\n        interval will be added to each end of that interval before\n        it is used in autoscaling.\n\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'args' (line 2134)
        args_212937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 15), 'args')
        # Applying the 'not' unary operator (line 2134)
        result_not__212938 = python_operator(stypy.reporting.localization.Localization(__file__, 2134, 11), 'not', args_212937)
        
        
        # Getting the type of 'kw' (line 2134)
        kw_212939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 28), 'kw')
        # Applying the 'not' unary operator (line 2134)
        result_not__212940 = python_operator(stypy.reporting.localization.Localization(__file__, 2134, 24), 'not', kw_212939)
        
        # Applying the binary operator 'and' (line 2134)
        result_and_keyword_212941 = python_operator(stypy.reporting.localization.Localization(__file__, 2134, 11), 'and', result_not__212938, result_not__212940)
        
        # Testing the type of an if condition (line 2134)
        if_condition_212942 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2134, 8), result_and_keyword_212941)
        # Assigning a type to the variable 'if_condition_212942' (line 2134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'if_condition_212942', if_condition_212942)
        # SSA begins for if statement (line 2134)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2135)
        tuple_212943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2135, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2135)
        # Adding element type (line 2135)
        # Getting the type of 'self' (line 2135)
        self_212944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 19), 'self')
        # Obtaining the member '_xmargin' of a type (line 2135)
        _xmargin_212945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2135, 19), self_212944, '_xmargin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2135, 19), tuple_212943, _xmargin_212945)
        # Adding element type (line 2135)
        # Getting the type of 'self' (line 2135)
        self_212946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 34), 'self')
        # Obtaining the member '_ymargin' of a type (line 2135)
        _ymargin_212947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2135, 34), self_212946, '_ymargin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2135, 19), tuple_212943, _ymargin_212947)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2135, 12), 'stypy_return_type', tuple_212943)
        # SSA join for if statement (line 2134)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2137):
        
        # Assigning a Call to a Name (line 2137):
        
        # Call to pop(...): (line 2137)
        # Processing the call arguments (line 2137)
        unicode_212950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2137, 23), 'unicode', u'tight')
        # Getting the type of 'True' (line 2137)
        True_212951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2137, 32), 'True', False)
        # Processing the call keyword arguments (line 2137)
        kwargs_212952 = {}
        # Getting the type of 'kw' (line 2137)
        kw_212948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2137, 16), 'kw', False)
        # Obtaining the member 'pop' of a type (line 2137)
        pop_212949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2137, 16), kw_212948, 'pop')
        # Calling pop(args, kwargs) (line 2137)
        pop_call_result_212953 = invoke(stypy.reporting.localization.Localization(__file__, 2137, 16), pop_212949, *[unicode_212950, True_212951], **kwargs_212952)
        
        # Assigning a type to the variable 'tight' (line 2137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2137, 8), 'tight', pop_call_result_212953)
        
        # Assigning a Call to a Name (line 2138):
        
        # Assigning a Call to a Name (line 2138):
        
        # Call to pop(...): (line 2138)
        # Processing the call arguments (line 2138)
        unicode_212956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2138, 20), 'unicode', u'x')
        # Getting the type of 'None' (line 2138)
        None_212957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 25), 'None', False)
        # Processing the call keyword arguments (line 2138)
        kwargs_212958 = {}
        # Getting the type of 'kw' (line 2138)
        kw_212954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 13), 'kw', False)
        # Obtaining the member 'pop' of a type (line 2138)
        pop_212955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2138, 13), kw_212954, 'pop')
        # Calling pop(args, kwargs) (line 2138)
        pop_call_result_212959 = invoke(stypy.reporting.localization.Localization(__file__, 2138, 13), pop_212955, *[unicode_212956, None_212957], **kwargs_212958)
        
        # Assigning a type to the variable 'mx' (line 2138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2138, 8), 'mx', pop_call_result_212959)
        
        # Assigning a Call to a Name (line 2139):
        
        # Assigning a Call to a Name (line 2139):
        
        # Call to pop(...): (line 2139)
        # Processing the call arguments (line 2139)
        unicode_212962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2139, 20), 'unicode', u'y')
        # Getting the type of 'None' (line 2139)
        None_212963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2139, 25), 'None', False)
        # Processing the call keyword arguments (line 2139)
        kwargs_212964 = {}
        # Getting the type of 'kw' (line 2139)
        kw_212960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2139, 13), 'kw', False)
        # Obtaining the member 'pop' of a type (line 2139)
        pop_212961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2139, 13), kw_212960, 'pop')
        # Calling pop(args, kwargs) (line 2139)
        pop_call_result_212965 = invoke(stypy.reporting.localization.Localization(__file__, 2139, 13), pop_212961, *[unicode_212962, None_212963], **kwargs_212964)
        
        # Assigning a type to the variable 'my' (line 2139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2139, 8), 'my', pop_call_result_212965)
        
        
        
        # Call to len(...): (line 2140)
        # Processing the call arguments (line 2140)
        # Getting the type of 'args' (line 2140)
        args_212967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2140, 15), 'args', False)
        # Processing the call keyword arguments (line 2140)
        kwargs_212968 = {}
        # Getting the type of 'len' (line 2140)
        len_212966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2140, 11), 'len', False)
        # Calling len(args, kwargs) (line 2140)
        len_call_result_212969 = invoke(stypy.reporting.localization.Localization(__file__, 2140, 11), len_212966, *[args_212967], **kwargs_212968)
        
        int_212970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2140, 24), 'int')
        # Applying the binary operator '==' (line 2140)
        result_eq_212971 = python_operator(stypy.reporting.localization.Localization(__file__, 2140, 11), '==', len_call_result_212969, int_212970)
        
        # Testing the type of an if condition (line 2140)
        if_condition_212972 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2140, 8), result_eq_212971)
        # Assigning a type to the variable 'if_condition_212972' (line 2140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2140, 8), 'if_condition_212972', if_condition_212972)
        # SSA begins for if statement (line 2140)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Subscript to a Name (line 2141):
        
        # Obtaining the type of the subscript
        int_212973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2141, 27), 'int')
        # Getting the type of 'args' (line 2141)
        args_212974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 22), 'args')
        # Obtaining the member '__getitem__' of a type (line 2141)
        getitem___212975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2141, 22), args_212974, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2141)
        subscript_call_result_212976 = invoke(stypy.reporting.localization.Localization(__file__, 2141, 22), getitem___212975, int_212973)
        
        # Assigning a type to the variable 'my' (line 2141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2141, 17), 'my', subscript_call_result_212976)
        
        # Assigning a Name to a Name (line 2141):
        # Getting the type of 'my' (line 2141)
        my_212977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 17), 'my')
        # Assigning a type to the variable 'mx' (line 2141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2141, 12), 'mx', my_212977)
        # SSA branch for the else part of an if statement (line 2140)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to len(...): (line 2142)
        # Processing the call arguments (line 2142)
        # Getting the type of 'args' (line 2142)
        args_212979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2142, 17), 'args', False)
        # Processing the call keyword arguments (line 2142)
        kwargs_212980 = {}
        # Getting the type of 'len' (line 2142)
        len_212978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2142, 13), 'len', False)
        # Calling len(args, kwargs) (line 2142)
        len_call_result_212981 = invoke(stypy.reporting.localization.Localization(__file__, 2142, 13), len_212978, *[args_212979], **kwargs_212980)
        
        int_212982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2142, 26), 'int')
        # Applying the binary operator '==' (line 2142)
        result_eq_212983 = python_operator(stypy.reporting.localization.Localization(__file__, 2142, 13), '==', len_call_result_212981, int_212982)
        
        # Testing the type of an if condition (line 2142)
        if_condition_212984 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2142, 13), result_eq_212983)
        # Assigning a type to the variable 'if_condition_212984' (line 2142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2142, 13), 'if_condition_212984', if_condition_212984)
        # SSA begins for if statement (line 2142)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 2143):
        
        # Assigning a Subscript to a Name (line 2143):
        
        # Obtaining the type of the subscript
        int_212985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2143, 12), 'int')
        # Getting the type of 'args' (line 2143)
        args_212986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 21), 'args')
        # Obtaining the member '__getitem__' of a type (line 2143)
        getitem___212987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2143, 12), args_212986, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2143)
        subscript_call_result_212988 = invoke(stypy.reporting.localization.Localization(__file__, 2143, 12), getitem___212987, int_212985)
        
        # Assigning a type to the variable 'tuple_var_assignment_207773' (line 2143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2143, 12), 'tuple_var_assignment_207773', subscript_call_result_212988)
        
        # Assigning a Subscript to a Name (line 2143):
        
        # Obtaining the type of the subscript
        int_212989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2143, 12), 'int')
        # Getting the type of 'args' (line 2143)
        args_212990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 21), 'args')
        # Obtaining the member '__getitem__' of a type (line 2143)
        getitem___212991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2143, 12), args_212990, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2143)
        subscript_call_result_212992 = invoke(stypy.reporting.localization.Localization(__file__, 2143, 12), getitem___212991, int_212989)
        
        # Assigning a type to the variable 'tuple_var_assignment_207774' (line 2143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2143, 12), 'tuple_var_assignment_207774', subscript_call_result_212992)
        
        # Assigning a Name to a Name (line 2143):
        # Getting the type of 'tuple_var_assignment_207773' (line 2143)
        tuple_var_assignment_207773_212993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 12), 'tuple_var_assignment_207773')
        # Assigning a type to the variable 'mx' (line 2143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2143, 12), 'mx', tuple_var_assignment_207773_212993)
        
        # Assigning a Name to a Name (line 2143):
        # Getting the type of 'tuple_var_assignment_207774' (line 2143)
        tuple_var_assignment_207774_212994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 12), 'tuple_var_assignment_207774')
        # Assigning a type to the variable 'my' (line 2143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2143, 16), 'my', tuple_var_assignment_207774_212994)
        # SSA branch for the else part of an if statement (line 2142)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to len(...): (line 2144)
        # Processing the call arguments (line 2144)
        # Getting the type of 'args' (line 2144)
        args_212996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 17), 'args', False)
        # Processing the call keyword arguments (line 2144)
        kwargs_212997 = {}
        # Getting the type of 'len' (line 2144)
        len_212995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 13), 'len', False)
        # Calling len(args, kwargs) (line 2144)
        len_call_result_212998 = invoke(stypy.reporting.localization.Localization(__file__, 2144, 13), len_212995, *[args_212996], **kwargs_212997)
        
        int_212999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, 25), 'int')
        # Applying the binary operator '>' (line 2144)
        result_gt_213000 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 13), '>', len_call_result_212998, int_212999)
        
        # Testing the type of an if condition (line 2144)
        if_condition_213001 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2144, 13), result_gt_213000)
        # Assigning a type to the variable 'if_condition_213001' (line 2144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2144, 13), 'if_condition_213001', if_condition_213001)
        # SSA begins for if statement (line 2144)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2145)
        # Processing the call arguments (line 2145)
        unicode_213003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2145, 29), 'unicode', u'more than two arguments were supplied')
        # Processing the call keyword arguments (line 2145)
        kwargs_213004 = {}
        # Getting the type of 'ValueError' (line 2145)
        ValueError_213002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2145, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2145)
        ValueError_call_result_213005 = invoke(stypy.reporting.localization.Localization(__file__, 2145, 18), ValueError_213002, *[unicode_213003], **kwargs_213004)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2145, 12), ValueError_call_result_213005, 'raise parameter', BaseException)
        # SSA join for if statement (line 2144)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2142)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2140)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 2146)
        # Getting the type of 'mx' (line 2146)
        mx_213006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 8), 'mx')
        # Getting the type of 'None' (line 2146)
        None_213007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 21), 'None')
        
        (may_be_213008, more_types_in_union_213009) = may_not_be_none(mx_213006, None_213007)

        if may_be_213008:

            if more_types_in_union_213009:
                # Runtime conditional SSA (line 2146)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_xmargin(...): (line 2147)
            # Processing the call arguments (line 2147)
            # Getting the type of 'mx' (line 2147)
            mx_213012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 29), 'mx', False)
            # Processing the call keyword arguments (line 2147)
            kwargs_213013 = {}
            # Getting the type of 'self' (line 2147)
            self_213010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 12), 'self', False)
            # Obtaining the member 'set_xmargin' of a type (line 2147)
            set_xmargin_213011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2147, 12), self_213010, 'set_xmargin')
            # Calling set_xmargin(args, kwargs) (line 2147)
            set_xmargin_call_result_213014 = invoke(stypy.reporting.localization.Localization(__file__, 2147, 12), set_xmargin_213011, *[mx_213012], **kwargs_213013)
            

            if more_types_in_union_213009:
                # SSA join for if statement (line 2146)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2148)
        # Getting the type of 'my' (line 2148)
        my_213015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 8), 'my')
        # Getting the type of 'None' (line 2148)
        None_213016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 21), 'None')
        
        (may_be_213017, more_types_in_union_213018) = may_not_be_none(my_213015, None_213016)

        if may_be_213017:

            if more_types_in_union_213018:
                # Runtime conditional SSA (line 2148)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_ymargin(...): (line 2149)
            # Processing the call arguments (line 2149)
            # Getting the type of 'my' (line 2149)
            my_213021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 29), 'my', False)
            # Processing the call keyword arguments (line 2149)
            kwargs_213022 = {}
            # Getting the type of 'self' (line 2149)
            self_213019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 12), 'self', False)
            # Obtaining the member 'set_ymargin' of a type (line 2149)
            set_ymargin_213020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2149, 12), self_213019, 'set_ymargin')
            # Calling set_ymargin(args, kwargs) (line 2149)
            set_ymargin_call_result_213023 = invoke(stypy.reporting.localization.Localization(__file__, 2149, 12), set_ymargin_213020, *[my_213021], **kwargs_213022)
            

            if more_types_in_union_213018:
                # SSA join for if statement (line 2148)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Compare to a Name (line 2151):
        
        # Assigning a Compare to a Name (line 2151):
        
        # Getting the type of 'mx' (line 2151)
        mx_213024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 18), 'mx')
        # Getting the type of 'None' (line 2151)
        None_213025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 28), 'None')
        # Applying the binary operator 'isnot' (line 2151)
        result_is_not_213026 = python_operator(stypy.reporting.localization.Localization(__file__, 2151, 18), 'isnot', mx_213024, None_213025)
        
        # Assigning a type to the variable 'scalex' (line 2151)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2151, 8), 'scalex', result_is_not_213026)
        
        # Assigning a Compare to a Name (line 2152):
        
        # Assigning a Compare to a Name (line 2152):
        
        # Getting the type of 'my' (line 2152)
        my_213027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 18), 'my')
        # Getting the type of 'None' (line 2152)
        None_213028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 28), 'None')
        # Applying the binary operator 'isnot' (line 2152)
        result_is_not_213029 = python_operator(stypy.reporting.localization.Localization(__file__, 2152, 18), 'isnot', my_213027, None_213028)
        
        # Assigning a type to the variable 'scaley' (line 2152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2152, 8), 'scaley', result_is_not_213029)
        
        # Call to autoscale_view(...): (line 2154)
        # Processing the call keyword arguments (line 2154)
        # Getting the type of 'tight' (line 2154)
        tight_213032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 34), 'tight', False)
        keyword_213033 = tight_213032
        # Getting the type of 'scalex' (line 2154)
        scalex_213034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 48), 'scalex', False)
        keyword_213035 = scalex_213034
        # Getting the type of 'scaley' (line 2154)
        scaley_213036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 63), 'scaley', False)
        keyword_213037 = scaley_213036
        kwargs_213038 = {'tight': keyword_213033, 'scalex': keyword_213035, 'scaley': keyword_213037}
        # Getting the type of 'self' (line 2154)
        self_213030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 8), 'self', False)
        # Obtaining the member 'autoscale_view' of a type (line 2154)
        autoscale_view_213031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2154, 8), self_213030, 'autoscale_view')
        # Calling autoscale_view(args, kwargs) (line 2154)
        autoscale_view_call_result_213039 = invoke(stypy.reporting.localization.Localization(__file__, 2154, 8), autoscale_view_213031, *[], **kwargs_213038)
        
        
        # ################# End of 'margins(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'margins' in the type store
        # Getting the type of 'stypy_return_type' (line 2099)
        stypy_return_type_213040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2099, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_213040)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'margins'
        return stypy_return_type_213040


    @norecursion
    def set_rasterization_zorder(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_rasterization_zorder'
        module_type_store = module_type_store.open_function_context('set_rasterization_zorder', 2156, 4, False)
        # Assigning a type to the variable 'self' (line 2157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2157, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_rasterization_zorder.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_rasterization_zorder.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_rasterization_zorder.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_rasterization_zorder.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_rasterization_zorder')
        _AxesBase.set_rasterization_zorder.__dict__.__setitem__('stypy_param_names_list', ['z'])
        _AxesBase.set_rasterization_zorder.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_rasterization_zorder.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_rasterization_zorder.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_rasterization_zorder.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_rasterization_zorder.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_rasterization_zorder.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_rasterization_zorder', ['z'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_rasterization_zorder', localization, ['z'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_rasterization_zorder(...)' code ##################

        unicode_213041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2161, (-1)), 'unicode', u'\n        Set zorder value below which artists will be rasterized.  Set\n        to `None` to disable rasterizing of artists below a particular\n        zorder.\n        ')
        
        # Assigning a Name to a Attribute (line 2162):
        
        # Assigning a Name to a Attribute (line 2162):
        # Getting the type of 'z' (line 2162)
        z_213042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 37), 'z')
        # Getting the type of 'self' (line 2162)
        self_213043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 8), 'self')
        # Setting the type of the member '_rasterization_zorder' of a type (line 2162)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2162, 8), self_213043, '_rasterization_zorder', z_213042)
        
        # Assigning a Name to a Attribute (line 2163):
        
        # Assigning a Name to a Attribute (line 2163):
        # Getting the type of 'True' (line 2163)
        True_213044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 21), 'True')
        # Getting the type of 'self' (line 2163)
        self_213045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2163)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2163, 8), self_213045, 'stale', True_213044)
        
        # ################# End of 'set_rasterization_zorder(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_rasterization_zorder' in the type store
        # Getting the type of 'stypy_return_type' (line 2156)
        stypy_return_type_213046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_213046)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_rasterization_zorder'
        return stypy_return_type_213046


    @norecursion
    def get_rasterization_zorder(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_rasterization_zorder'
        module_type_store = module_type_store.open_function_context('get_rasterization_zorder', 2165, 4, False)
        # Assigning a type to the variable 'self' (line 2166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2166, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_rasterization_zorder.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_rasterization_zorder.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_rasterization_zorder.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_rasterization_zorder.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_rasterization_zorder')
        _AxesBase.get_rasterization_zorder.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_rasterization_zorder.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_rasterization_zorder.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_rasterization_zorder.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_rasterization_zorder.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_rasterization_zorder.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_rasterization_zorder.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_rasterization_zorder', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_rasterization_zorder', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_rasterization_zorder(...)' code ##################

        unicode_213047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2168, (-1)), 'unicode', u'\n        Get zorder value below which artists will be rasterized\n        ')
        # Getting the type of 'self' (line 2169)
        self_213048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 15), 'self')
        # Obtaining the member '_rasterization_zorder' of a type (line 2169)
        _rasterization_zorder_213049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2169, 15), self_213048, '_rasterization_zorder')
        # Assigning a type to the variable 'stypy_return_type' (line 2169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 8), 'stypy_return_type', _rasterization_zorder_213049)
        
        # ################# End of 'get_rasterization_zorder(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_rasterization_zorder' in the type store
        # Getting the type of 'stypy_return_type' (line 2165)
        stypy_return_type_213050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_213050)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_rasterization_zorder'
        return stypy_return_type_213050


    @norecursion
    def autoscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 2171)
        True_213051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 31), 'True')
        unicode_213052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2171, 42), 'unicode', u'both')
        # Getting the type of 'None' (line 2171)
        None_213053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 56), 'None')
        defaults = [True_213051, unicode_213052, None_213053]
        # Create a new context for function 'autoscale'
        module_type_store = module_type_store.open_function_context('autoscale', 2171, 4, False)
        # Assigning a type to the variable 'self' (line 2172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2172, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.autoscale.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.autoscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.autoscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.autoscale.__dict__.__setitem__('stypy_function_name', '_AxesBase.autoscale')
        _AxesBase.autoscale.__dict__.__setitem__('stypy_param_names_list', ['enable', 'axis', 'tight'])
        _AxesBase.autoscale.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.autoscale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.autoscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.autoscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.autoscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.autoscale.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.autoscale', ['enable', 'axis', 'tight'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale', localization, ['enable', 'axis', 'tight'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale(...)' code ##################

        unicode_213054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, (-1)), 'unicode', u"\n        Autoscale the axis view to the data (toggle).\n\n        Convenience method for simple axis view autoscaling.\n        It turns autoscaling on or off, and then,\n        if autoscaling for either axis is on, it performs\n        the autoscaling on the specified axis or axes.\n\n        *enable*: [True | False | None]\n            True (default) turns autoscaling on, False turns it off.\n            None leaves the autoscaling state unchanged.\n\n        *axis*: ['x' | 'y' | 'both']\n            which axis to operate on; default is 'both'\n\n        *tight*: [True | False | None]\n            If True, set view limits to data limits;\n            if False, let the locator and margins expand the view limits;\n            if None, use tight scaling if the only artist is an image,\n            otherwise treat *tight* as False.\n            The *tight* setting is retained for future autoscaling\n            until it is explicitly changed.\n\n\n        Returns None.\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 2198)
        # Getting the type of 'enable' (line 2198)
        enable_213055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 11), 'enable')
        # Getting the type of 'None' (line 2198)
        None_213056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 21), 'None')
        
        (may_be_213057, more_types_in_union_213058) = may_be_none(enable_213055, None_213056)

        if may_be_213057:

            if more_types_in_union_213058:
                # Runtime conditional SSA (line 2198)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 2199):
            
            # Assigning a Name to a Name (line 2199):
            # Getting the type of 'True' (line 2199)
            True_213059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2199, 21), 'True')
            # Assigning a type to the variable 'scalex' (line 2199)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2199, 12), 'scalex', True_213059)
            
            # Assigning a Name to a Name (line 2200):
            
            # Assigning a Name to a Name (line 2200):
            # Getting the type of 'True' (line 2200)
            True_213060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 21), 'True')
            # Assigning a type to the variable 'scaley' (line 2200)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2200, 12), 'scaley', True_213060)

            if more_types_in_union_213058:
                # Runtime conditional SSA for else branch (line 2198)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_213057) or more_types_in_union_213058):
            
            # Assigning a Name to a Name (line 2202):
            
            # Assigning a Name to a Name (line 2202):
            # Getting the type of 'False' (line 2202)
            False_213061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 21), 'False')
            # Assigning a type to the variable 'scalex' (line 2202)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2202, 12), 'scalex', False_213061)
            
            # Assigning a Name to a Name (line 2203):
            
            # Assigning a Name to a Name (line 2203):
            # Getting the type of 'False' (line 2203)
            False_213062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 21), 'False')
            # Assigning a type to the variable 'scaley' (line 2203)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2203, 12), 'scaley', False_213062)
            
            
            # Getting the type of 'axis' (line 2204)
            axis_213063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 15), 'axis')
            
            # Obtaining an instance of the builtin type 'list' (line 2204)
            list_213064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2204, 23), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2204)
            # Adding element type (line 2204)
            unicode_213065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2204, 24), 'unicode', u'x')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2204, 23), list_213064, unicode_213065)
            # Adding element type (line 2204)
            unicode_213066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2204, 29), 'unicode', u'both')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2204, 23), list_213064, unicode_213066)
            
            # Applying the binary operator 'in' (line 2204)
            result_contains_213067 = python_operator(stypy.reporting.localization.Localization(__file__, 2204, 15), 'in', axis_213063, list_213064)
            
            # Testing the type of an if condition (line 2204)
            if_condition_213068 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2204, 12), result_contains_213067)
            # Assigning a type to the variable 'if_condition_213068' (line 2204)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2204, 12), 'if_condition_213068', if_condition_213068)
            # SSA begins for if statement (line 2204)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 2205):
            
            # Assigning a Call to a Attribute (line 2205):
            
            # Call to bool(...): (line 2205)
            # Processing the call arguments (line 2205)
            # Getting the type of 'enable' (line 2205)
            enable_213070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 42), 'enable', False)
            # Processing the call keyword arguments (line 2205)
            kwargs_213071 = {}
            # Getting the type of 'bool' (line 2205)
            bool_213069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 37), 'bool', False)
            # Calling bool(args, kwargs) (line 2205)
            bool_call_result_213072 = invoke(stypy.reporting.localization.Localization(__file__, 2205, 37), bool_213069, *[enable_213070], **kwargs_213071)
            
            # Getting the type of 'self' (line 2205)
            self_213073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 16), 'self')
            # Setting the type of the member '_autoscaleXon' of a type (line 2205)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2205, 16), self_213073, '_autoscaleXon', bool_call_result_213072)
            
            # Assigning a Attribute to a Name (line 2206):
            
            # Assigning a Attribute to a Name (line 2206):
            # Getting the type of 'self' (line 2206)
            self_213074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 25), 'self')
            # Obtaining the member '_autoscaleXon' of a type (line 2206)
            _autoscaleXon_213075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2206, 25), self_213074, '_autoscaleXon')
            # Assigning a type to the variable 'scalex' (line 2206)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2206, 16), 'scalex', _autoscaleXon_213075)
            # SSA join for if statement (line 2204)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Getting the type of 'axis' (line 2207)
            axis_213076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 15), 'axis')
            
            # Obtaining an instance of the builtin type 'list' (line 2207)
            list_213077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2207, 23), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2207)
            # Adding element type (line 2207)
            unicode_213078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2207, 24), 'unicode', u'y')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2207, 23), list_213077, unicode_213078)
            # Adding element type (line 2207)
            unicode_213079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2207, 29), 'unicode', u'both')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2207, 23), list_213077, unicode_213079)
            
            # Applying the binary operator 'in' (line 2207)
            result_contains_213080 = python_operator(stypy.reporting.localization.Localization(__file__, 2207, 15), 'in', axis_213076, list_213077)
            
            # Testing the type of an if condition (line 2207)
            if_condition_213081 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2207, 12), result_contains_213080)
            # Assigning a type to the variable 'if_condition_213081' (line 2207)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2207, 12), 'if_condition_213081', if_condition_213081)
            # SSA begins for if statement (line 2207)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 2208):
            
            # Assigning a Call to a Attribute (line 2208):
            
            # Call to bool(...): (line 2208)
            # Processing the call arguments (line 2208)
            # Getting the type of 'enable' (line 2208)
            enable_213083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 42), 'enable', False)
            # Processing the call keyword arguments (line 2208)
            kwargs_213084 = {}
            # Getting the type of 'bool' (line 2208)
            bool_213082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 37), 'bool', False)
            # Calling bool(args, kwargs) (line 2208)
            bool_call_result_213085 = invoke(stypy.reporting.localization.Localization(__file__, 2208, 37), bool_213082, *[enable_213083], **kwargs_213084)
            
            # Getting the type of 'self' (line 2208)
            self_213086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 16), 'self')
            # Setting the type of the member '_autoscaleYon' of a type (line 2208)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2208, 16), self_213086, '_autoscaleYon', bool_call_result_213085)
            
            # Assigning a Attribute to a Name (line 2209):
            
            # Assigning a Attribute to a Name (line 2209):
            # Getting the type of 'self' (line 2209)
            self_213087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 25), 'self')
            # Obtaining the member '_autoscaleYon' of a type (line 2209)
            _autoscaleYon_213088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2209, 25), self_213087, '_autoscaleYon')
            # Assigning a type to the variable 'scaley' (line 2209)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2209, 16), 'scaley', _autoscaleYon_213088)
            # SSA join for if statement (line 2207)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_213057 and more_types_in_union_213058):
                # SSA join for if statement (line 2198)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'tight' (line 2210)
        tight_213089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 11), 'tight')
        # Getting the type of 'scalex' (line 2210)
        scalex_213090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 21), 'scalex')
        # Applying the binary operator 'and' (line 2210)
        result_and_keyword_213091 = python_operator(stypy.reporting.localization.Localization(__file__, 2210, 11), 'and', tight_213089, scalex_213090)
        
        # Testing the type of an if condition (line 2210)
        if_condition_213092 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2210, 8), result_and_keyword_213091)
        # Assigning a type to the variable 'if_condition_213092' (line 2210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2210, 8), 'if_condition_213092', if_condition_213092)
        # SSA begins for if statement (line 2210)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 2211):
        
        # Assigning a Num to a Attribute (line 2211):
        int_213093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2211, 28), 'int')
        # Getting the type of 'self' (line 2211)
        self_213094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 12), 'self')
        # Setting the type of the member '_xmargin' of a type (line 2211)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2211, 12), self_213094, '_xmargin', int_213093)
        # SSA join for if statement (line 2210)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'tight' (line 2212)
        tight_213095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 11), 'tight')
        # Getting the type of 'scaley' (line 2212)
        scaley_213096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 21), 'scaley')
        # Applying the binary operator 'and' (line 2212)
        result_and_keyword_213097 = python_operator(stypy.reporting.localization.Localization(__file__, 2212, 11), 'and', tight_213095, scaley_213096)
        
        # Testing the type of an if condition (line 2212)
        if_condition_213098 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2212, 8), result_and_keyword_213097)
        # Assigning a type to the variable 'if_condition_213098' (line 2212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2212, 8), 'if_condition_213098', if_condition_213098)
        # SSA begins for if statement (line 2212)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 2213):
        
        # Assigning a Num to a Attribute (line 2213):
        int_213099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2213, 28), 'int')
        # Getting the type of 'self' (line 2213)
        self_213100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 12), 'self')
        # Setting the type of the member '_ymargin' of a type (line 2213)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2213, 12), self_213100, '_ymargin', int_213099)
        # SSA join for if statement (line 2212)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to autoscale_view(...): (line 2214)
        # Processing the call keyword arguments (line 2214)
        # Getting the type of 'tight' (line 2214)
        tight_213103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 34), 'tight', False)
        keyword_213104 = tight_213103
        # Getting the type of 'scalex' (line 2214)
        scalex_213105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 48), 'scalex', False)
        keyword_213106 = scalex_213105
        # Getting the type of 'scaley' (line 2214)
        scaley_213107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 63), 'scaley', False)
        keyword_213108 = scaley_213107
        kwargs_213109 = {'tight': keyword_213104, 'scalex': keyword_213106, 'scaley': keyword_213108}
        # Getting the type of 'self' (line 2214)
        self_213101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 8), 'self', False)
        # Obtaining the member 'autoscale_view' of a type (line 2214)
        autoscale_view_213102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2214, 8), self_213101, 'autoscale_view')
        # Calling autoscale_view(args, kwargs) (line 2214)
        autoscale_view_call_result_213110 = invoke(stypy.reporting.localization.Localization(__file__, 2214, 8), autoscale_view_213102, *[], **kwargs_213109)
        
        
        # ################# End of 'autoscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale' in the type store
        # Getting the type of 'stypy_return_type' (line 2171)
        stypy_return_type_213111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_213111)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale'
        return stypy_return_type_213111


    @norecursion
    def autoscale_view(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2216)
        None_213112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 35), 'None')
        # Getting the type of 'True' (line 2216)
        True_213113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 48), 'True')
        # Getting the type of 'True' (line 2216)
        True_213114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 61), 'True')
        defaults = [None_213112, True_213113, True_213114]
        # Create a new context for function 'autoscale_view'
        module_type_store = module_type_store.open_function_context('autoscale_view', 2216, 4, False)
        # Assigning a type to the variable 'self' (line 2217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2217, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.autoscale_view.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.autoscale_view.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.autoscale_view.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.autoscale_view.__dict__.__setitem__('stypy_function_name', '_AxesBase.autoscale_view')
        _AxesBase.autoscale_view.__dict__.__setitem__('stypy_param_names_list', ['tight', 'scalex', 'scaley'])
        _AxesBase.autoscale_view.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.autoscale_view.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.autoscale_view.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.autoscale_view.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.autoscale_view.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.autoscale_view.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.autoscale_view', ['tight', 'scalex', 'scaley'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale_view', localization, ['tight', 'scalex', 'scaley'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale_view(...)' code ##################

        unicode_213115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2235, (-1)), 'unicode', u"\n        Autoscale the view limits using the data limits. You can\n        selectively autoscale only a single axis, e.g., the xaxis by\n        setting *scaley* to *False*.  The autoscaling preserves any\n        axis direction reversal that has already been done.\n\n        If *tight* is *False*, the axis major locator will be used\n        to expand the view limits if rcParams['axes.autolimit_mode']\n        is 'round_numbers'.  Note that any margins that are in effect\n        will be applied first, regardless of whether *tight* is\n        *True* or *False*.  Specifying *tight* as *True* or *False*\n        saves the setting as a private attribute of the Axes; specifying\n        it as *None* (the default) applies the previously saved value.\n\n        The data limits are not updated automatically when artist data are\n        changed after the artist has been added to an Axes instance.  In that\n        case, use :meth:`matplotlib.axes.Axes.relim` prior to calling\n        autoscale_view.\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 2236)
        # Getting the type of 'tight' (line 2236)
        tight_213116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 8), 'tight')
        # Getting the type of 'None' (line 2236)
        None_213117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 24), 'None')
        
        (may_be_213118, more_types_in_union_213119) = may_not_be_none(tight_213116, None_213117)

        if may_be_213118:

            if more_types_in_union_213119:
                # Runtime conditional SSA (line 2236)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 2237):
            
            # Assigning a Call to a Attribute (line 2237):
            
            # Call to bool(...): (line 2237)
            # Processing the call arguments (line 2237)
            # Getting the type of 'tight' (line 2237)
            tight_213121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 31), 'tight', False)
            # Processing the call keyword arguments (line 2237)
            kwargs_213122 = {}
            # Getting the type of 'bool' (line 2237)
            bool_213120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 26), 'bool', False)
            # Calling bool(args, kwargs) (line 2237)
            bool_call_result_213123 = invoke(stypy.reporting.localization.Localization(__file__, 2237, 26), bool_213120, *[tight_213121], **kwargs_213122)
            
            # Getting the type of 'self' (line 2237)
            self_213124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 12), 'self')
            # Setting the type of the member '_tight' of a type (line 2237)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2237, 12), self_213124, '_tight', bool_call_result_213123)

            if more_types_in_union_213119:
                # SSA join for if statement (line 2236)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2239)
        self_213125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 11), 'self')
        # Obtaining the member 'use_sticky_edges' of a type (line 2239)
        use_sticky_edges_213126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2239, 11), self_213125, 'use_sticky_edges')
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2239)
        self_213127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 38), 'self')
        # Obtaining the member '_xmargin' of a type (line 2239)
        _xmargin_213128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2239, 38), self_213127, '_xmargin')
        # Getting the type of 'self' (line 2239)
        self_213129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 55), 'self')
        # Obtaining the member '_ymargin' of a type (line 2239)
        _ymargin_213130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2239, 55), self_213129, '_ymargin')
        # Applying the binary operator 'or' (line 2239)
        result_or_keyword_213131 = python_operator(stypy.reporting.localization.Localization(__file__, 2239, 38), 'or', _xmargin_213128, _ymargin_213130)
        
        # Applying the binary operator 'and' (line 2239)
        result_and_keyword_213132 = python_operator(stypy.reporting.localization.Localization(__file__, 2239, 11), 'and', use_sticky_edges_213126, result_or_keyword_213131)
        
        # Testing the type of an if condition (line 2239)
        if_condition_213133 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2239, 8), result_and_keyword_213132)
        # Assigning a type to the variable 'if_condition_213133' (line 2239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2239, 8), 'if_condition_213133', if_condition_213133)
        # SSA begins for if statement (line 2239)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a ListComp to a Name (line 2240):
        
        # Assigning a ListComp to a Name (line 2240):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to get_children(...): (line 2240)
        # Processing the call keyword arguments (line 2240)
        kwargs_213138 = {}
        # Getting the type of 'self' (line 2240)
        self_213136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 58), 'self', False)
        # Obtaining the member 'get_children' of a type (line 2240)
        get_children_213137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2240, 58), self_213136, 'get_children')
        # Calling get_children(args, kwargs) (line 2240)
        get_children_call_result_213139 = invoke(stypy.reporting.localization.Localization(__file__, 2240, 58), get_children_213137, *[], **kwargs_213138)
        
        comprehension_213140 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2240, 24), get_children_call_result_213139)
        # Assigning a type to the variable 'artist' (line 2240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2240, 24), 'artist', comprehension_213140)
        # Getting the type of 'artist' (line 2240)
        artist_213134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 24), 'artist')
        # Obtaining the member 'sticky_edges' of a type (line 2240)
        sticky_edges_213135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2240, 24), artist_213134, 'sticky_edges')
        list_213141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2240, 24), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2240, 24), list_213141, sticky_edges_213135)
        # Assigning a type to the variable 'stickies' (line 2240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2240, 12), 'stickies', list_213141)
        
        # Assigning a Call to a Name (line 2241):
        
        # Assigning a Call to a Name (line 2241):
        
        # Call to sum(...): (line 2241)
        # Processing the call arguments (line 2241)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'stickies' (line 2241)
        stickies_213145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 53), 'stickies', False)
        comprehension_213146 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2241, 30), stickies_213145)
        # Assigning a type to the variable 'sticky' (line 2241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2241, 30), 'sticky', comprehension_213146)
        # Getting the type of 'sticky' (line 2241)
        sticky_213143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 30), 'sticky', False)
        # Obtaining the member 'x' of a type (line 2241)
        x_213144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2241, 30), sticky_213143, 'x')
        list_213147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2241, 30), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2241, 30), list_213147, x_213144)
        
        # Obtaining an instance of the builtin type 'list' (line 2241)
        list_213148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2241, 64), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2241)
        
        # Processing the call keyword arguments (line 2241)
        kwargs_213149 = {}
        # Getting the type of 'sum' (line 2241)
        sum_213142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 25), 'sum', False)
        # Calling sum(args, kwargs) (line 2241)
        sum_call_result_213150 = invoke(stypy.reporting.localization.Localization(__file__, 2241, 25), sum_213142, *[list_213147, list_213148], **kwargs_213149)
        
        # Assigning a type to the variable 'x_stickies' (line 2241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2241, 12), 'x_stickies', sum_call_result_213150)
        
        # Assigning a Call to a Name (line 2242):
        
        # Assigning a Call to a Name (line 2242):
        
        # Call to sum(...): (line 2242)
        # Processing the call arguments (line 2242)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'stickies' (line 2242)
        stickies_213154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 53), 'stickies', False)
        comprehension_213155 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2242, 30), stickies_213154)
        # Assigning a type to the variable 'sticky' (line 2242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2242, 30), 'sticky', comprehension_213155)
        # Getting the type of 'sticky' (line 2242)
        sticky_213152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 30), 'sticky', False)
        # Obtaining the member 'y' of a type (line 2242)
        y_213153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2242, 30), sticky_213152, 'y')
        list_213156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2242, 30), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2242, 30), list_213156, y_213153)
        
        # Obtaining an instance of the builtin type 'list' (line 2242)
        list_213157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2242, 64), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2242)
        
        # Processing the call keyword arguments (line 2242)
        kwargs_213158 = {}
        # Getting the type of 'sum' (line 2242)
        sum_213151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 25), 'sum', False)
        # Calling sum(args, kwargs) (line 2242)
        sum_call_result_213159 = invoke(stypy.reporting.localization.Localization(__file__, 2242, 25), sum_213151, *[list_213156, list_213157], **kwargs_213158)
        
        # Assigning a type to the variable 'y_stickies' (line 2242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2242, 12), 'y_stickies', sum_call_result_213159)
        
        
        
        # Call to lower(...): (line 2243)
        # Processing the call keyword arguments (line 2243)
        kwargs_213165 = {}
        
        # Call to get_xscale(...): (line 2243)
        # Processing the call keyword arguments (line 2243)
        kwargs_213162 = {}
        # Getting the type of 'self' (line 2243)
        self_213160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 15), 'self', False)
        # Obtaining the member 'get_xscale' of a type (line 2243)
        get_xscale_213161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 15), self_213160, 'get_xscale')
        # Calling get_xscale(args, kwargs) (line 2243)
        get_xscale_call_result_213163 = invoke(stypy.reporting.localization.Localization(__file__, 2243, 15), get_xscale_213161, *[], **kwargs_213162)
        
        # Obtaining the member 'lower' of a type (line 2243)
        lower_213164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 15), get_xscale_call_result_213163, 'lower')
        # Calling lower(args, kwargs) (line 2243)
        lower_call_result_213166 = invoke(stypy.reporting.localization.Localization(__file__, 2243, 15), lower_213164, *[], **kwargs_213165)
        
        unicode_213167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2243, 44), 'unicode', u'log')
        # Applying the binary operator '==' (line 2243)
        result_eq_213168 = python_operator(stypy.reporting.localization.Localization(__file__, 2243, 15), '==', lower_call_result_213166, unicode_213167)
        
        # Testing the type of an if condition (line 2243)
        if_condition_213169 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2243, 12), result_eq_213168)
        # Assigning a type to the variable 'if_condition_213169' (line 2243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 12), 'if_condition_213169', if_condition_213169)
        # SSA begins for if statement (line 2243)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a ListComp to a Name (line 2244):
        
        # Assigning a ListComp to a Name (line 2244):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'x_stickies' (line 2244)
        x_stickies_213174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 43), 'x_stickies')
        comprehension_213175 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 30), x_stickies_213174)
        # Assigning a type to the variable 'xs' (line 2244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2244, 30), 'xs', comprehension_213175)
        
        # Getting the type of 'xs' (line 2244)
        xs_213171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 57), 'xs')
        int_213172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2244, 62), 'int')
        # Applying the binary operator '>' (line 2244)
        result_gt_213173 = python_operator(stypy.reporting.localization.Localization(__file__, 2244, 57), '>', xs_213171, int_213172)
        
        # Getting the type of 'xs' (line 2244)
        xs_213170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 30), 'xs')
        list_213176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2244, 30), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 30), list_213176, xs_213170)
        # Assigning a type to the variable 'x_stickies' (line 2244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2244, 16), 'x_stickies', list_213176)
        # SSA join for if statement (line 2243)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to lower(...): (line 2245)
        # Processing the call keyword arguments (line 2245)
        kwargs_213182 = {}
        
        # Call to get_yscale(...): (line 2245)
        # Processing the call keyword arguments (line 2245)
        kwargs_213179 = {}
        # Getting the type of 'self' (line 2245)
        self_213177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 15), 'self', False)
        # Obtaining the member 'get_yscale' of a type (line 2245)
        get_yscale_213178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2245, 15), self_213177, 'get_yscale')
        # Calling get_yscale(args, kwargs) (line 2245)
        get_yscale_call_result_213180 = invoke(stypy.reporting.localization.Localization(__file__, 2245, 15), get_yscale_213178, *[], **kwargs_213179)
        
        # Obtaining the member 'lower' of a type (line 2245)
        lower_213181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2245, 15), get_yscale_call_result_213180, 'lower')
        # Calling lower(args, kwargs) (line 2245)
        lower_call_result_213183 = invoke(stypy.reporting.localization.Localization(__file__, 2245, 15), lower_213181, *[], **kwargs_213182)
        
        unicode_213184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2245, 44), 'unicode', u'log')
        # Applying the binary operator '==' (line 2245)
        result_eq_213185 = python_operator(stypy.reporting.localization.Localization(__file__, 2245, 15), '==', lower_call_result_213183, unicode_213184)
        
        # Testing the type of an if condition (line 2245)
        if_condition_213186 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2245, 12), result_eq_213185)
        # Assigning a type to the variable 'if_condition_213186' (line 2245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2245, 12), 'if_condition_213186', if_condition_213186)
        # SSA begins for if statement (line 2245)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a ListComp to a Name (line 2246):
        
        # Assigning a ListComp to a Name (line 2246):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'y_stickies' (line 2246)
        y_stickies_213191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 43), 'y_stickies')
        comprehension_213192 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2246, 30), y_stickies_213191)
        # Assigning a type to the variable 'ys' (line 2246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2246, 30), 'ys', comprehension_213192)
        
        # Getting the type of 'ys' (line 2246)
        ys_213188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 57), 'ys')
        int_213189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2246, 62), 'int')
        # Applying the binary operator '>' (line 2246)
        result_gt_213190 = python_operator(stypy.reporting.localization.Localization(__file__, 2246, 57), '>', ys_213188, int_213189)
        
        # Getting the type of 'ys' (line 2246)
        ys_213187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 30), 'ys')
        list_213193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2246, 30), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2246, 30), list_213193, ys_213187)
        # Assigning a type to the variable 'y_stickies' (line 2246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2246, 16), 'y_stickies', list_213193)
        # SSA join for if statement (line 2245)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2239)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Tuple (line 2248):
        
        # Assigning a List to a Name (line 2248):
        
        # Obtaining an instance of the builtin type 'list' (line 2248)
        list_213194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2248, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2248)
        
        # Assigning a type to the variable 'tuple_assignment_207775' (line 2248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2248, 12), 'tuple_assignment_207775', list_213194)
        
        # Assigning a List to a Name (line 2248):
        
        # Obtaining an instance of the builtin type 'list' (line 2248)
        list_213195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2248, 41), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2248)
        
        # Assigning a type to the variable 'tuple_assignment_207776' (line 2248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2248, 12), 'tuple_assignment_207776', list_213195)
        
        # Assigning a Name to a Name (line 2248):
        # Getting the type of 'tuple_assignment_207775' (line 2248)
        tuple_assignment_207775_213196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 12), 'tuple_assignment_207775')
        # Assigning a type to the variable 'x_stickies' (line 2248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2248, 12), 'x_stickies', tuple_assignment_207775_213196)
        
        # Assigning a Name to a Name (line 2248):
        # Getting the type of 'tuple_assignment_207776' (line 2248)
        tuple_assignment_207776_213197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 12), 'tuple_assignment_207776')
        # Assigning a type to the variable 'y_stickies' (line 2248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2248, 24), 'y_stickies', tuple_assignment_207776_213197)
        # SSA join for if statement (line 2239)
        module_type_store = module_type_store.join_ssa_context()
        

        @norecursion
        def handle_single_axis(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'handle_single_axis'
            module_type_store = module_type_store.open_function_context('handle_single_axis', 2250, 8, False)
            
            # Passed parameters checking function
            handle_single_axis.stypy_localization = localization
            handle_single_axis.stypy_type_of_self = None
            handle_single_axis.stypy_type_store = module_type_store
            handle_single_axis.stypy_function_name = 'handle_single_axis'
            handle_single_axis.stypy_param_names_list = ['scale', 'autoscaleon', 'shared_axes', 'interval', 'minpos', 'axis', 'margin', 'stickies', 'set_bound']
            handle_single_axis.stypy_varargs_param_name = None
            handle_single_axis.stypy_kwargs_param_name = None
            handle_single_axis.stypy_call_defaults = defaults
            handle_single_axis.stypy_call_varargs = varargs
            handle_single_axis.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'handle_single_axis', ['scale', 'autoscaleon', 'shared_axes', 'interval', 'minpos', 'axis', 'margin', 'stickies', 'set_bound'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'handle_single_axis', localization, ['scale', 'autoscaleon', 'shared_axes', 'interval', 'minpos', 'axis', 'margin', 'stickies', 'set_bound'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'handle_single_axis(...)' code ##################

            
            
            
            # Evaluating a boolean operation
            # Getting the type of 'scale' (line 2253)
            scale_213198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 20), 'scale')
            # Getting the type of 'autoscaleon' (line 2253)
            autoscaleon_213199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 30), 'autoscaleon')
            # Applying the binary operator 'and' (line 2253)
            result_and_keyword_213200 = python_operator(stypy.reporting.localization.Localization(__file__, 2253, 20), 'and', scale_213198, autoscaleon_213199)
            
            # Applying the 'not' unary operator (line 2253)
            result_not__213201 = python_operator(stypy.reporting.localization.Localization(__file__, 2253, 15), 'not', result_and_keyword_213200)
            
            # Testing the type of an if condition (line 2253)
            if_condition_213202 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2253, 12), result_not__213201)
            # Assigning a type to the variable 'if_condition_213202' (line 2253)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2253, 12), 'if_condition_213202', if_condition_213202)
            # SSA begins for if statement (line 2253)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # Assigning a type to the variable 'stypy_return_type' (line 2254)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2254, 16), 'stypy_return_type', types.NoneType)
            # SSA join for if statement (line 2253)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 2256):
            
            # Assigning a Call to a Name (line 2256):
            
            # Call to get_siblings(...): (line 2256)
            # Processing the call arguments (line 2256)
            # Getting the type of 'self' (line 2256)
            self_213205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 46), 'self', False)
            # Processing the call keyword arguments (line 2256)
            kwargs_213206 = {}
            # Getting the type of 'shared_axes' (line 2256)
            shared_axes_213203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 21), 'shared_axes', False)
            # Obtaining the member 'get_siblings' of a type (line 2256)
            get_siblings_213204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2256, 21), shared_axes_213203, 'get_siblings')
            # Calling get_siblings(args, kwargs) (line 2256)
            get_siblings_call_result_213207 = invoke(stypy.reporting.localization.Localization(__file__, 2256, 21), get_siblings_213204, *[self_213205], **kwargs_213206)
            
            # Assigning a type to the variable 'shared' (line 2256)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2256, 12), 'shared', get_siblings_call_result_213207)
            
            # Assigning a ListComp to a Name (line 2257):
            
            # Assigning a ListComp to a Name (line 2257):
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'shared' (line 2257)
            shared_213210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 39), 'shared')
            comprehension_213211 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2257, 18), shared_213210)
            # Assigning a type to the variable 'ax' (line 2257)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2257, 18), 'ax', comprehension_213211)
            # Getting the type of 'ax' (line 2257)
            ax_213208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 18), 'ax')
            # Obtaining the member 'dataLim' of a type (line 2257)
            dataLim_213209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2257, 18), ax_213208, 'dataLim')
            list_213212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2257, 18), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2257, 18), list_213212, dataLim_213209)
            # Assigning a type to the variable 'dl' (line 2257)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2257, 12), 'dl', list_213212)
            
            # Assigning a ListComp to a Name (line 2259):
            
            # Assigning a ListComp to a Name (line 2259):
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'dl' (line 2259)
            dl_213222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 36), 'dl')
            comprehension_213223 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2259, 25), dl_213222)
            # Assigning a type to the variable 'd' (line 2259)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2259, 25), 'd', comprehension_213223)
            
            # Call to all(...): (line 2259)
            # Processing the call keyword arguments (line 2259)
            kwargs_213220 = {}
            
            # Call to isfinite(...): (line 2259)
            # Processing the call arguments (line 2259)
            # Getting the type of 'd' (line 2259)
            d_213216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 54), 'd', False)
            # Processing the call keyword arguments (line 2259)
            kwargs_213217 = {}
            # Getting the type of 'np' (line 2259)
            np_213214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 42), 'np', False)
            # Obtaining the member 'isfinite' of a type (line 2259)
            isfinite_213215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2259, 42), np_213214, 'isfinite')
            # Calling isfinite(args, kwargs) (line 2259)
            isfinite_call_result_213218 = invoke(stypy.reporting.localization.Localization(__file__, 2259, 42), isfinite_213215, *[d_213216], **kwargs_213217)
            
            # Obtaining the member 'all' of a type (line 2259)
            all_213219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2259, 42), isfinite_call_result_213218, 'all')
            # Calling all(args, kwargs) (line 2259)
            all_call_result_213221 = invoke(stypy.reporting.localization.Localization(__file__, 2259, 42), all_213219, *[], **kwargs_213220)
            
            # Getting the type of 'd' (line 2259)
            d_213213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 25), 'd')
            list_213224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 25), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2259, 25), list_213224, d_213213)
            # Assigning a type to the variable 'finite_dl' (line 2259)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2259, 12), 'finite_dl', list_213224)
            
            
            # Call to len(...): (line 2260)
            # Processing the call arguments (line 2260)
            # Getting the type of 'finite_dl' (line 2260)
            finite_dl_213226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 19), 'finite_dl', False)
            # Processing the call keyword arguments (line 2260)
            kwargs_213227 = {}
            # Getting the type of 'len' (line 2260)
            len_213225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 15), 'len', False)
            # Calling len(args, kwargs) (line 2260)
            len_call_result_213228 = invoke(stypy.reporting.localization.Localization(__file__, 2260, 15), len_213225, *[finite_dl_213226], **kwargs_213227)
            
            # Testing the type of an if condition (line 2260)
            if_condition_213229 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2260, 12), len_call_result_213228)
            # Assigning a type to the variable 'if_condition_213229' (line 2260)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2260, 12), 'if_condition_213229', if_condition_213229)
            # SSA begins for if statement (line 2260)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a ListComp to a Name (line 2263):
            
            # Assigning a ListComp to a Name (line 2263):
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'dl' (line 2263)
            dl_213244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 39), 'dl')
            comprehension_213245 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2263, 28), dl_213244)
            # Assigning a type to the variable 'd' (line 2263)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2263, 28), 'd', comprehension_213245)
            
            # Evaluating a boolean operation
            
            # Call to all(...): (line 2264)
            # Processing the call keyword arguments (line 2264)
            kwargs_213238 = {}
            
            # Call to isfinite(...): (line 2264)
            # Processing the call arguments (line 2264)
            # Getting the type of 'd' (line 2264)
            d_213233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 44), 'd', False)
            # Obtaining the member 'intervalx' of a type (line 2264)
            intervalx_213234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2264, 44), d_213233, 'intervalx')
            # Processing the call keyword arguments (line 2264)
            kwargs_213235 = {}
            # Getting the type of 'np' (line 2264)
            np_213231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 32), 'np', False)
            # Obtaining the member 'isfinite' of a type (line 2264)
            isfinite_213232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2264, 32), np_213231, 'isfinite')
            # Calling isfinite(args, kwargs) (line 2264)
            isfinite_call_result_213236 = invoke(stypy.reporting.localization.Localization(__file__, 2264, 32), isfinite_213232, *[intervalx_213234], **kwargs_213235)
            
            # Obtaining the member 'all' of a type (line 2264)
            all_213237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2264, 32), isfinite_call_result_213236, 'all')
            # Calling all(args, kwargs) (line 2264)
            all_call_result_213239 = invoke(stypy.reporting.localization.Localization(__file__, 2264, 32), all_213237, *[], **kwargs_213238)
            
            
            # Getting the type of 'd' (line 2265)
            d_213240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 33), 'd')
            # Getting the type of 'finite_dl' (line 2265)
            finite_dl_213241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 42), 'finite_dl')
            # Applying the binary operator 'notin' (line 2265)
            result_contains_213242 = python_operator(stypy.reporting.localization.Localization(__file__, 2265, 33), 'notin', d_213240, finite_dl_213241)
            
            # Applying the binary operator 'and' (line 2264)
            result_and_keyword_213243 = python_operator(stypy.reporting.localization.Localization(__file__, 2264, 32), 'and', all_call_result_213239, result_contains_213242)
            
            # Getting the type of 'd' (line 2263)
            d_213230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 28), 'd')
            list_213246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2263, 28), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2263, 28), list_213246, d_213230)
            # Assigning a type to the variable 'x_finite' (line 2263)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2263, 16), 'x_finite', list_213246)
            
            # Assigning a ListComp to a Name (line 2266):
            
            # Assigning a ListComp to a Name (line 2266):
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'dl' (line 2266)
            dl_213261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 39), 'dl')
            comprehension_213262 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 28), dl_213261)
            # Assigning a type to the variable 'd' (line 2266)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2266, 28), 'd', comprehension_213262)
            
            # Evaluating a boolean operation
            
            # Call to all(...): (line 2267)
            # Processing the call keyword arguments (line 2267)
            kwargs_213255 = {}
            
            # Call to isfinite(...): (line 2267)
            # Processing the call arguments (line 2267)
            # Getting the type of 'd' (line 2267)
            d_213250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 44), 'd', False)
            # Obtaining the member 'intervaly' of a type (line 2267)
            intervaly_213251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 44), d_213250, 'intervaly')
            # Processing the call keyword arguments (line 2267)
            kwargs_213252 = {}
            # Getting the type of 'np' (line 2267)
            np_213248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 32), 'np', False)
            # Obtaining the member 'isfinite' of a type (line 2267)
            isfinite_213249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 32), np_213248, 'isfinite')
            # Calling isfinite(args, kwargs) (line 2267)
            isfinite_call_result_213253 = invoke(stypy.reporting.localization.Localization(__file__, 2267, 32), isfinite_213249, *[intervaly_213251], **kwargs_213252)
            
            # Obtaining the member 'all' of a type (line 2267)
            all_213254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 32), isfinite_call_result_213253, 'all')
            # Calling all(args, kwargs) (line 2267)
            all_call_result_213256 = invoke(stypy.reporting.localization.Localization(__file__, 2267, 32), all_213254, *[], **kwargs_213255)
            
            
            # Getting the type of 'd' (line 2268)
            d_213257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 33), 'd')
            # Getting the type of 'finite_dl' (line 2268)
            finite_dl_213258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 42), 'finite_dl')
            # Applying the binary operator 'notin' (line 2268)
            result_contains_213259 = python_operator(stypy.reporting.localization.Localization(__file__, 2268, 33), 'notin', d_213257, finite_dl_213258)
            
            # Applying the binary operator 'and' (line 2267)
            result_and_keyword_213260 = python_operator(stypy.reporting.localization.Localization(__file__, 2267, 32), 'and', all_call_result_213256, result_contains_213259)
            
            # Getting the type of 'd' (line 2266)
            d_213247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 28), 'd')
            list_213263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 28), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2266, 28), list_213263, d_213247)
            # Assigning a type to the variable 'y_finite' (line 2266)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2266, 16), 'y_finite', list_213263)
            
            # Assigning a Name to a Name (line 2270):
            
            # Assigning a Name to a Name (line 2270):
            # Getting the type of 'finite_dl' (line 2270)
            finite_dl_213264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 21), 'finite_dl')
            # Assigning a type to the variable 'dl' (line 2270)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 16), 'dl', finite_dl_213264)
            
            # Call to extend(...): (line 2271)
            # Processing the call arguments (line 2271)
            # Getting the type of 'x_finite' (line 2271)
            x_finite_213267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2271, 26), 'x_finite', False)
            # Processing the call keyword arguments (line 2271)
            kwargs_213268 = {}
            # Getting the type of 'dl' (line 2271)
            dl_213265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2271, 16), 'dl', False)
            # Obtaining the member 'extend' of a type (line 2271)
            extend_213266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2271, 16), dl_213265, 'extend')
            # Calling extend(args, kwargs) (line 2271)
            extend_call_result_213269 = invoke(stypy.reporting.localization.Localization(__file__, 2271, 16), extend_213266, *[x_finite_213267], **kwargs_213268)
            
            
            # Call to extend(...): (line 2272)
            # Processing the call arguments (line 2272)
            # Getting the type of 'y_finite' (line 2272)
            y_finite_213272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 26), 'y_finite', False)
            # Processing the call keyword arguments (line 2272)
            kwargs_213273 = {}
            # Getting the type of 'dl' (line 2272)
            dl_213270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 16), 'dl', False)
            # Obtaining the member 'extend' of a type (line 2272)
            extend_213271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2272, 16), dl_213270, 'extend')
            # Calling extend(args, kwargs) (line 2272)
            extend_call_result_213274 = invoke(stypy.reporting.localization.Localization(__file__, 2272, 16), extend_213271, *[y_finite_213272], **kwargs_213273)
            
            # SSA join for if statement (line 2260)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 2274):
            
            # Assigning a Call to a Name (line 2274):
            
            # Call to union(...): (line 2274)
            # Processing the call arguments (line 2274)
            # Getting the type of 'dl' (line 2274)
            dl_213278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2274, 44), 'dl', False)
            # Processing the call keyword arguments (line 2274)
            kwargs_213279 = {}
            # Getting the type of 'mtransforms' (line 2274)
            mtransforms_213275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2274, 17), 'mtransforms', False)
            # Obtaining the member 'BboxBase' of a type (line 2274)
            BboxBase_213276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2274, 17), mtransforms_213275, 'BboxBase')
            # Obtaining the member 'union' of a type (line 2274)
            union_213277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2274, 17), BboxBase_213276, 'union')
            # Calling union(args, kwargs) (line 2274)
            union_call_result_213280 = invoke(stypy.reporting.localization.Localization(__file__, 2274, 17), union_213277, *[dl_213278], **kwargs_213279)
            
            # Assigning a type to the variable 'bb' (line 2274)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2274, 12), 'bb', union_call_result_213280)
            
            # Assigning a Call to a Tuple (line 2275):
            
            # Assigning a Call to a Name:
            
            # Call to getattr(...): (line 2275)
            # Processing the call arguments (line 2275)
            # Getting the type of 'bb' (line 2275)
            bb_213282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2275, 29), 'bb', False)
            # Getting the type of 'interval' (line 2275)
            interval_213283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2275, 33), 'interval', False)
            # Processing the call keyword arguments (line 2275)
            kwargs_213284 = {}
            # Getting the type of 'getattr' (line 2275)
            getattr_213281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2275, 21), 'getattr', False)
            # Calling getattr(args, kwargs) (line 2275)
            getattr_call_result_213285 = invoke(stypy.reporting.localization.Localization(__file__, 2275, 21), getattr_213281, *[bb_213282, interval_213283], **kwargs_213284)
            
            # Assigning a type to the variable 'call_assignment_207777' (line 2275)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2275, 12), 'call_assignment_207777', getattr_call_result_213285)
            
            # Assigning a Call to a Name (line 2275):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_213288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2275, 12), 'int')
            # Processing the call keyword arguments
            kwargs_213289 = {}
            # Getting the type of 'call_assignment_207777' (line 2275)
            call_assignment_207777_213286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2275, 12), 'call_assignment_207777', False)
            # Obtaining the member '__getitem__' of a type (line 2275)
            getitem___213287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2275, 12), call_assignment_207777_213286, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_213290 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___213287, *[int_213288], **kwargs_213289)
            
            # Assigning a type to the variable 'call_assignment_207778' (line 2275)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2275, 12), 'call_assignment_207778', getitem___call_result_213290)
            
            # Assigning a Name to a Name (line 2275):
            # Getting the type of 'call_assignment_207778' (line 2275)
            call_assignment_207778_213291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2275, 12), 'call_assignment_207778')
            # Assigning a type to the variable 'x0' (line 2275)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2275, 12), 'x0', call_assignment_207778_213291)
            
            # Assigning a Call to a Name (line 2275):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_213294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2275, 12), 'int')
            # Processing the call keyword arguments
            kwargs_213295 = {}
            # Getting the type of 'call_assignment_207777' (line 2275)
            call_assignment_207777_213292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2275, 12), 'call_assignment_207777', False)
            # Obtaining the member '__getitem__' of a type (line 2275)
            getitem___213293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2275, 12), call_assignment_207777_213292, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_213296 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___213293, *[int_213294], **kwargs_213295)
            
            # Assigning a type to the variable 'call_assignment_207779' (line 2275)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2275, 12), 'call_assignment_207779', getitem___call_result_213296)
            
            # Assigning a Name to a Name (line 2275):
            # Getting the type of 'call_assignment_207779' (line 2275)
            call_assignment_207779_213297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2275, 12), 'call_assignment_207779')
            # Assigning a type to the variable 'x1' (line 2275)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2275, 16), 'x1', call_assignment_207779_213297)
            
            # Assigning a Call to a Name (line 2276):
            
            # Assigning a Call to a Name (line 2276):
            
            # Call to get_major_locator(...): (line 2276)
            # Processing the call keyword arguments (line 2276)
            kwargs_213300 = {}
            # Getting the type of 'axis' (line 2276)
            axis_213298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 22), 'axis', False)
            # Obtaining the member 'get_major_locator' of a type (line 2276)
            get_major_locator_213299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2276, 22), axis_213298, 'get_major_locator')
            # Calling get_major_locator(args, kwargs) (line 2276)
            get_major_locator_call_result_213301 = invoke(stypy.reporting.localization.Localization(__file__, 2276, 22), get_major_locator_213299, *[], **kwargs_213300)
            
            # Assigning a type to the variable 'locator' (line 2276)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2276, 12), 'locator', get_major_locator_call_result_213301)
            
            
            # SSA begins for try-except statement (line 2277)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Call to a Tuple (line 2279):
            
            # Assigning a Call to a Name:
            
            # Call to nonsingular(...): (line 2279)
            # Processing the call arguments (line 2279)
            # Getting the type of 'x0' (line 2279)
            x0_213304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 45), 'x0', False)
            # Getting the type of 'x1' (line 2279)
            x1_213305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 49), 'x1', False)
            # Processing the call keyword arguments (line 2279)
            kwargs_213306 = {}
            # Getting the type of 'locator' (line 2279)
            locator_213302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 25), 'locator', False)
            # Obtaining the member 'nonsingular' of a type (line 2279)
            nonsingular_213303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2279, 25), locator_213302, 'nonsingular')
            # Calling nonsingular(args, kwargs) (line 2279)
            nonsingular_call_result_213307 = invoke(stypy.reporting.localization.Localization(__file__, 2279, 25), nonsingular_213303, *[x0_213304, x1_213305], **kwargs_213306)
            
            # Assigning a type to the variable 'call_assignment_207780' (line 2279)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2279, 16), 'call_assignment_207780', nonsingular_call_result_213307)
            
            # Assigning a Call to a Name (line 2279):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_213310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2279, 16), 'int')
            # Processing the call keyword arguments
            kwargs_213311 = {}
            # Getting the type of 'call_assignment_207780' (line 2279)
            call_assignment_207780_213308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 16), 'call_assignment_207780', False)
            # Obtaining the member '__getitem__' of a type (line 2279)
            getitem___213309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2279, 16), call_assignment_207780_213308, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_213312 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___213309, *[int_213310], **kwargs_213311)
            
            # Assigning a type to the variable 'call_assignment_207781' (line 2279)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2279, 16), 'call_assignment_207781', getitem___call_result_213312)
            
            # Assigning a Name to a Name (line 2279):
            # Getting the type of 'call_assignment_207781' (line 2279)
            call_assignment_207781_213313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 16), 'call_assignment_207781')
            # Assigning a type to the variable 'x0' (line 2279)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2279, 16), 'x0', call_assignment_207781_213313)
            
            # Assigning a Call to a Name (line 2279):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_213316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2279, 16), 'int')
            # Processing the call keyword arguments
            kwargs_213317 = {}
            # Getting the type of 'call_assignment_207780' (line 2279)
            call_assignment_207780_213314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 16), 'call_assignment_207780', False)
            # Obtaining the member '__getitem__' of a type (line 2279)
            getitem___213315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2279, 16), call_assignment_207780_213314, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_213318 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___213315, *[int_213316], **kwargs_213317)
            
            # Assigning a type to the variable 'call_assignment_207782' (line 2279)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2279, 16), 'call_assignment_207782', getitem___call_result_213318)
            
            # Assigning a Name to a Name (line 2279):
            # Getting the type of 'call_assignment_207782' (line 2279)
            call_assignment_207782_213319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 16), 'call_assignment_207782')
            # Assigning a type to the variable 'x1' (line 2279)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2279, 20), 'x1', call_assignment_207782_213319)
            # SSA branch for the except part of a try statement (line 2277)
            # SSA branch for the except 'AttributeError' branch of a try statement (line 2277)
            module_type_store.open_ssa_branch('except')
            
            # Assigning a Call to a Tuple (line 2282):
            
            # Assigning a Call to a Name:
            
            # Call to nonsingular(...): (line 2282)
            # Processing the call arguments (line 2282)
            # Getting the type of 'x0' (line 2283)
            x0_213322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2283, 20), 'x0', False)
            # Getting the type of 'x1' (line 2283)
            x1_213323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2283, 24), 'x1', False)
            # Processing the call keyword arguments (line 2282)
            # Getting the type of 'False' (line 2283)
            False_213324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2283, 39), 'False', False)
            keyword_213325 = False_213324
            float_213326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2283, 55), 'float')
            keyword_213327 = float_213326
            kwargs_213328 = {'increasing': keyword_213325, 'expander': keyword_213327}
            # Getting the type of 'mtransforms' (line 2282)
            mtransforms_213320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 25), 'mtransforms', False)
            # Obtaining the member 'nonsingular' of a type (line 2282)
            nonsingular_213321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2282, 25), mtransforms_213320, 'nonsingular')
            # Calling nonsingular(args, kwargs) (line 2282)
            nonsingular_call_result_213329 = invoke(stypy.reporting.localization.Localization(__file__, 2282, 25), nonsingular_213321, *[x0_213322, x1_213323], **kwargs_213328)
            
            # Assigning a type to the variable 'call_assignment_207783' (line 2282)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2282, 16), 'call_assignment_207783', nonsingular_call_result_213329)
            
            # Assigning a Call to a Name (line 2282):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_213332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2282, 16), 'int')
            # Processing the call keyword arguments
            kwargs_213333 = {}
            # Getting the type of 'call_assignment_207783' (line 2282)
            call_assignment_207783_213330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 16), 'call_assignment_207783', False)
            # Obtaining the member '__getitem__' of a type (line 2282)
            getitem___213331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2282, 16), call_assignment_207783_213330, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_213334 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___213331, *[int_213332], **kwargs_213333)
            
            # Assigning a type to the variable 'call_assignment_207784' (line 2282)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2282, 16), 'call_assignment_207784', getitem___call_result_213334)
            
            # Assigning a Name to a Name (line 2282):
            # Getting the type of 'call_assignment_207784' (line 2282)
            call_assignment_207784_213335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 16), 'call_assignment_207784')
            # Assigning a type to the variable 'x0' (line 2282)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2282, 16), 'x0', call_assignment_207784_213335)
            
            # Assigning a Call to a Name (line 2282):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_213338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2282, 16), 'int')
            # Processing the call keyword arguments
            kwargs_213339 = {}
            # Getting the type of 'call_assignment_207783' (line 2282)
            call_assignment_207783_213336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 16), 'call_assignment_207783', False)
            # Obtaining the member '__getitem__' of a type (line 2282)
            getitem___213337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2282, 16), call_assignment_207783_213336, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_213340 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___213337, *[int_213338], **kwargs_213339)
            
            # Assigning a type to the variable 'call_assignment_207785' (line 2282)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2282, 16), 'call_assignment_207785', getitem___call_result_213340)
            
            # Assigning a Name to a Name (line 2282):
            # Getting the type of 'call_assignment_207785' (line 2282)
            call_assignment_207785_213341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 16), 'call_assignment_207785')
            # Assigning a type to the variable 'x1' (line 2282)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2282, 20), 'x1', call_assignment_207785_213341)
            # SSA join for try-except statement (line 2277)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 2287):
            
            # Assigning a Call to a Name (line 2287):
            
            # Call to getattr(...): (line 2287)
            # Processing the call arguments (line 2287)
            # Getting the type of 'bb' (line 2287)
            bb_213343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 29), 'bb', False)
            # Getting the type of 'minpos' (line 2287)
            minpos_213344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 33), 'minpos', False)
            # Processing the call keyword arguments (line 2287)
            kwargs_213345 = {}
            # Getting the type of 'getattr' (line 2287)
            getattr_213342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 21), 'getattr', False)
            # Calling getattr(args, kwargs) (line 2287)
            getattr_call_result_213346 = invoke(stypy.reporting.localization.Localization(__file__, 2287, 21), getattr_213342, *[bb_213343, minpos_213344], **kwargs_213345)
            
            # Assigning a type to the variable 'minpos' (line 2287)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2287, 12), 'minpos', getattr_call_result_213346)
            
            # Assigning a Call to a Name (line 2288):
            
            # Assigning a Call to a Name (line 2288):
            
            # Call to get_transform(...): (line 2288)
            # Processing the call keyword arguments (line 2288)
            kwargs_213349 = {}
            # Getting the type of 'axis' (line 2288)
            axis_213347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2288, 24), 'axis', False)
            # Obtaining the member 'get_transform' of a type (line 2288)
            get_transform_213348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2288, 24), axis_213347, 'get_transform')
            # Calling get_transform(args, kwargs) (line 2288)
            get_transform_call_result_213350 = invoke(stypy.reporting.localization.Localization(__file__, 2288, 24), get_transform_213348, *[], **kwargs_213349)
            
            # Assigning a type to the variable 'transform' (line 2288)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2288, 12), 'transform', get_transform_call_result_213350)
            
            # Assigning a Call to a Name (line 2289):
            
            # Assigning a Call to a Name (line 2289):
            
            # Call to inverted(...): (line 2289)
            # Processing the call keyword arguments (line 2289)
            kwargs_213353 = {}
            # Getting the type of 'transform' (line 2289)
            transform_213351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2289, 28), 'transform', False)
            # Obtaining the member 'inverted' of a type (line 2289)
            inverted_213352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2289, 28), transform_213351, 'inverted')
            # Calling inverted(args, kwargs) (line 2289)
            inverted_call_result_213354 = invoke(stypy.reporting.localization.Localization(__file__, 2289, 28), inverted_213352, *[], **kwargs_213353)
            
            # Assigning a type to the variable 'inverse_trans' (line 2289)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2289, 12), 'inverse_trans', inverted_call_result_213354)
            
            # Assigning a UnaryOp to a Name (line 2292):
            
            # Assigning a UnaryOp to a Name (line 2292):
            
            
            # Call to any(...): (line 2292)
            # Processing the call arguments (line 2292)
            
            # Call to isclose(...): (line 2292)
            # Processing the call arguments (line 2292)
            # Getting the type of 'x0' (line 2292)
            x0_213359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 52), 'x0', False)
            # Getting the type of 'stickies' (line 2292)
            stickies_213360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 56), 'stickies', False)
            # Processing the call keyword arguments (line 2292)
            kwargs_213361 = {}
            # Getting the type of 'np' (line 2292)
            np_213357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 41), 'np', False)
            # Obtaining the member 'isclose' of a type (line 2292)
            isclose_213358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2292, 41), np_213357, 'isclose')
            # Calling isclose(args, kwargs) (line 2292)
            isclose_call_result_213362 = invoke(stypy.reporting.localization.Localization(__file__, 2292, 41), isclose_213358, *[x0_213359, stickies_213360], **kwargs_213361)
            
            # Processing the call keyword arguments (line 2292)
            kwargs_213363 = {}
            # Getting the type of 'np' (line 2292)
            np_213355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 34), 'np', False)
            # Obtaining the member 'any' of a type (line 2292)
            any_213356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2292, 34), np_213355, 'any')
            # Calling any(args, kwargs) (line 2292)
            any_call_result_213364 = invoke(stypy.reporting.localization.Localization(__file__, 2292, 34), any_213356, *[isclose_call_result_213362], **kwargs_213363)
            
            # Applying the 'not' unary operator (line 2292)
            result_not__213365 = python_operator(stypy.reporting.localization.Localization(__file__, 2292, 30), 'not', any_call_result_213364)
            
            # Assigning a type to the variable 'do_lower_margin' (line 2292)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2292, 12), 'do_lower_margin', result_not__213365)
            
            # Assigning a UnaryOp to a Name (line 2293):
            
            # Assigning a UnaryOp to a Name (line 2293):
            
            
            # Call to any(...): (line 2293)
            # Processing the call arguments (line 2293)
            
            # Call to isclose(...): (line 2293)
            # Processing the call arguments (line 2293)
            # Getting the type of 'x1' (line 2293)
            x1_213370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 52), 'x1', False)
            # Getting the type of 'stickies' (line 2293)
            stickies_213371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 56), 'stickies', False)
            # Processing the call keyword arguments (line 2293)
            kwargs_213372 = {}
            # Getting the type of 'np' (line 2293)
            np_213368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 41), 'np', False)
            # Obtaining the member 'isclose' of a type (line 2293)
            isclose_213369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2293, 41), np_213368, 'isclose')
            # Calling isclose(args, kwargs) (line 2293)
            isclose_call_result_213373 = invoke(stypy.reporting.localization.Localization(__file__, 2293, 41), isclose_213369, *[x1_213370, stickies_213371], **kwargs_213372)
            
            # Processing the call keyword arguments (line 2293)
            kwargs_213374 = {}
            # Getting the type of 'np' (line 2293)
            np_213366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 34), 'np', False)
            # Obtaining the member 'any' of a type (line 2293)
            any_213367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2293, 34), np_213366, 'any')
            # Calling any(args, kwargs) (line 2293)
            any_call_result_213375 = invoke(stypy.reporting.localization.Localization(__file__, 2293, 34), any_213367, *[isclose_call_result_213373], **kwargs_213374)
            
            # Applying the 'not' unary operator (line 2293)
            result_not__213376 = python_operator(stypy.reporting.localization.Localization(__file__, 2293, 30), 'not', any_call_result_213375)
            
            # Assigning a type to the variable 'do_upper_margin' (line 2293)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 12), 'do_upper_margin', result_not__213376)
            
            # Assigning a Call to a Tuple (line 2294):
            
            # Assigning a Call to a Name:
            
            # Call to limit_range_for_scale(...): (line 2294)
            # Processing the call arguments (line 2294)
            # Getting the type of 'x0' (line 2294)
            x0_213380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 55), 'x0', False)
            # Getting the type of 'x1' (line 2294)
            x1_213381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 59), 'x1', False)
            # Getting the type of 'minpos' (line 2294)
            minpos_213382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 63), 'minpos', False)
            # Processing the call keyword arguments (line 2294)
            kwargs_213383 = {}
            # Getting the type of 'axis' (line 2294)
            axis_213377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 21), 'axis', False)
            # Obtaining the member '_scale' of a type (line 2294)
            _scale_213378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2294, 21), axis_213377, '_scale')
            # Obtaining the member 'limit_range_for_scale' of a type (line 2294)
            limit_range_for_scale_213379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2294, 21), _scale_213378, 'limit_range_for_scale')
            # Calling limit_range_for_scale(args, kwargs) (line 2294)
            limit_range_for_scale_call_result_213384 = invoke(stypy.reporting.localization.Localization(__file__, 2294, 21), limit_range_for_scale_213379, *[x0_213380, x1_213381, minpos_213382], **kwargs_213383)
            
            # Assigning a type to the variable 'call_assignment_207786' (line 2294)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 12), 'call_assignment_207786', limit_range_for_scale_call_result_213384)
            
            # Assigning a Call to a Name (line 2294):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_213387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2294, 12), 'int')
            # Processing the call keyword arguments
            kwargs_213388 = {}
            # Getting the type of 'call_assignment_207786' (line 2294)
            call_assignment_207786_213385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 12), 'call_assignment_207786', False)
            # Obtaining the member '__getitem__' of a type (line 2294)
            getitem___213386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2294, 12), call_assignment_207786_213385, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_213389 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___213386, *[int_213387], **kwargs_213388)
            
            # Assigning a type to the variable 'call_assignment_207787' (line 2294)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 12), 'call_assignment_207787', getitem___call_result_213389)
            
            # Assigning a Name to a Name (line 2294):
            # Getting the type of 'call_assignment_207787' (line 2294)
            call_assignment_207787_213390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 12), 'call_assignment_207787')
            # Assigning a type to the variable 'x0' (line 2294)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 12), 'x0', call_assignment_207787_213390)
            
            # Assigning a Call to a Name (line 2294):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_213393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2294, 12), 'int')
            # Processing the call keyword arguments
            kwargs_213394 = {}
            # Getting the type of 'call_assignment_207786' (line 2294)
            call_assignment_207786_213391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 12), 'call_assignment_207786', False)
            # Obtaining the member '__getitem__' of a type (line 2294)
            getitem___213392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2294, 12), call_assignment_207786_213391, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_213395 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___213392, *[int_213393], **kwargs_213394)
            
            # Assigning a type to the variable 'call_assignment_207788' (line 2294)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 12), 'call_assignment_207788', getitem___call_result_213395)
            
            # Assigning a Name to a Name (line 2294):
            # Getting the type of 'call_assignment_207788' (line 2294)
            call_assignment_207788_213396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 12), 'call_assignment_207788')
            # Assigning a type to the variable 'x1' (line 2294)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 16), 'x1', call_assignment_207788_213396)
            
            # Assigning a Call to a Tuple (line 2295):
            
            # Assigning a Call to a Name:
            
            # Call to transform(...): (line 2295)
            # Processing the call arguments (line 2295)
            
            # Obtaining an instance of the builtin type 'list' (line 2295)
            list_213399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2295, 43), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2295)
            # Adding element type (line 2295)
            # Getting the type of 'x0' (line 2295)
            x0_213400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 44), 'x0', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2295, 43), list_213399, x0_213400)
            # Adding element type (line 2295)
            # Getting the type of 'x1' (line 2295)
            x1_213401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 48), 'x1', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2295, 43), list_213399, x1_213401)
            
            # Processing the call keyword arguments (line 2295)
            kwargs_213402 = {}
            # Getting the type of 'transform' (line 2295)
            transform_213397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 23), 'transform', False)
            # Obtaining the member 'transform' of a type (line 2295)
            transform_213398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2295, 23), transform_213397, 'transform')
            # Calling transform(args, kwargs) (line 2295)
            transform_call_result_213403 = invoke(stypy.reporting.localization.Localization(__file__, 2295, 23), transform_213398, *[list_213399], **kwargs_213402)
            
            # Assigning a type to the variable 'call_assignment_207789' (line 2295)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 12), 'call_assignment_207789', transform_call_result_213403)
            
            # Assigning a Call to a Name (line 2295):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_213406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2295, 12), 'int')
            # Processing the call keyword arguments
            kwargs_213407 = {}
            # Getting the type of 'call_assignment_207789' (line 2295)
            call_assignment_207789_213404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 12), 'call_assignment_207789', False)
            # Obtaining the member '__getitem__' of a type (line 2295)
            getitem___213405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2295, 12), call_assignment_207789_213404, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_213408 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___213405, *[int_213406], **kwargs_213407)
            
            # Assigning a type to the variable 'call_assignment_207790' (line 2295)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 12), 'call_assignment_207790', getitem___call_result_213408)
            
            # Assigning a Name to a Name (line 2295):
            # Getting the type of 'call_assignment_207790' (line 2295)
            call_assignment_207790_213409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 12), 'call_assignment_207790')
            # Assigning a type to the variable 'x0t' (line 2295)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 12), 'x0t', call_assignment_207790_213409)
            
            # Assigning a Call to a Name (line 2295):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_213412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2295, 12), 'int')
            # Processing the call keyword arguments
            kwargs_213413 = {}
            # Getting the type of 'call_assignment_207789' (line 2295)
            call_assignment_207789_213410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 12), 'call_assignment_207789', False)
            # Obtaining the member '__getitem__' of a type (line 2295)
            getitem___213411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2295, 12), call_assignment_207789_213410, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_213414 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___213411, *[int_213412], **kwargs_213413)
            
            # Assigning a type to the variable 'call_assignment_207791' (line 2295)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 12), 'call_assignment_207791', getitem___call_result_213414)
            
            # Assigning a Name to a Name (line 2295):
            # Getting the type of 'call_assignment_207791' (line 2295)
            call_assignment_207791_213415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 12), 'call_assignment_207791')
            # Assigning a type to the variable 'x1t' (line 2295)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 17), 'x1t', call_assignment_207791_213415)
            
            # Assigning a BinOp to a Name (line 2296):
            
            # Assigning a BinOp to a Name (line 2296):
            # Getting the type of 'x1t' (line 2296)
            x1t_213416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 21), 'x1t')
            # Getting the type of 'x0t' (line 2296)
            x0t_213417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 27), 'x0t')
            # Applying the binary operator '-' (line 2296)
            result_sub_213418 = python_operator(stypy.reporting.localization.Localization(__file__, 2296, 21), '-', x1t_213416, x0t_213417)
            
            # Getting the type of 'margin' (line 2296)
            margin_213419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 34), 'margin')
            # Applying the binary operator '*' (line 2296)
            result_mul_213420 = python_operator(stypy.reporting.localization.Localization(__file__, 2296, 20), '*', result_sub_213418, margin_213419)
            
            # Assigning a type to the variable 'delta' (line 2296)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2296, 12), 'delta', result_mul_213420)
            
            # Getting the type of 'do_lower_margin' (line 2297)
            do_lower_margin_213421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 15), 'do_lower_margin')
            # Testing the type of an if condition (line 2297)
            if_condition_213422 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2297, 12), do_lower_margin_213421)
            # Assigning a type to the variable 'if_condition_213422' (line 2297)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2297, 12), 'if_condition_213422', if_condition_213422)
            # SSA begins for if statement (line 2297)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of 'x0t' (line 2298)
            x0t_213423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 16), 'x0t')
            # Getting the type of 'delta' (line 2298)
            delta_213424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 23), 'delta')
            # Applying the binary operator '-=' (line 2298)
            result_isub_213425 = python_operator(stypy.reporting.localization.Localization(__file__, 2298, 16), '-=', x0t_213423, delta_213424)
            # Assigning a type to the variable 'x0t' (line 2298)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2298, 16), 'x0t', result_isub_213425)
            
            # SSA join for if statement (line 2297)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'do_upper_margin' (line 2299)
            do_upper_margin_213426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 15), 'do_upper_margin')
            # Testing the type of an if condition (line 2299)
            if_condition_213427 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2299, 12), do_upper_margin_213426)
            # Assigning a type to the variable 'if_condition_213427' (line 2299)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2299, 12), 'if_condition_213427', if_condition_213427)
            # SSA begins for if statement (line 2299)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of 'x1t' (line 2300)
            x1t_213428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 16), 'x1t')
            # Getting the type of 'delta' (line 2300)
            delta_213429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 23), 'delta')
            # Applying the binary operator '+=' (line 2300)
            result_iadd_213430 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 16), '+=', x1t_213428, delta_213429)
            # Assigning a type to the variable 'x1t' (line 2300)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2300, 16), 'x1t', result_iadd_213430)
            
            # SSA join for if statement (line 2299)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Tuple (line 2301):
            
            # Assigning a Call to a Name:
            
            # Call to transform(...): (line 2301)
            # Processing the call arguments (line 2301)
            
            # Obtaining an instance of the builtin type 'list' (line 2301)
            list_213433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2301, 45), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2301)
            # Adding element type (line 2301)
            # Getting the type of 'x0t' (line 2301)
            x0t_213434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 46), 'x0t', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2301, 45), list_213433, x0t_213434)
            # Adding element type (line 2301)
            # Getting the type of 'x1t' (line 2301)
            x1t_213435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 51), 'x1t', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2301, 45), list_213433, x1t_213435)
            
            # Processing the call keyword arguments (line 2301)
            kwargs_213436 = {}
            # Getting the type of 'inverse_trans' (line 2301)
            inverse_trans_213431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 21), 'inverse_trans', False)
            # Obtaining the member 'transform' of a type (line 2301)
            transform_213432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2301, 21), inverse_trans_213431, 'transform')
            # Calling transform(args, kwargs) (line 2301)
            transform_call_result_213437 = invoke(stypy.reporting.localization.Localization(__file__, 2301, 21), transform_213432, *[list_213433], **kwargs_213436)
            
            # Assigning a type to the variable 'call_assignment_207792' (line 2301)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2301, 12), 'call_assignment_207792', transform_call_result_213437)
            
            # Assigning a Call to a Name (line 2301):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_213440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2301, 12), 'int')
            # Processing the call keyword arguments
            kwargs_213441 = {}
            # Getting the type of 'call_assignment_207792' (line 2301)
            call_assignment_207792_213438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 12), 'call_assignment_207792', False)
            # Obtaining the member '__getitem__' of a type (line 2301)
            getitem___213439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2301, 12), call_assignment_207792_213438, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_213442 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___213439, *[int_213440], **kwargs_213441)
            
            # Assigning a type to the variable 'call_assignment_207793' (line 2301)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2301, 12), 'call_assignment_207793', getitem___call_result_213442)
            
            # Assigning a Name to a Name (line 2301):
            # Getting the type of 'call_assignment_207793' (line 2301)
            call_assignment_207793_213443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 12), 'call_assignment_207793')
            # Assigning a type to the variable 'x0' (line 2301)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2301, 12), 'x0', call_assignment_207793_213443)
            
            # Assigning a Call to a Name (line 2301):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_213446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2301, 12), 'int')
            # Processing the call keyword arguments
            kwargs_213447 = {}
            # Getting the type of 'call_assignment_207792' (line 2301)
            call_assignment_207792_213444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 12), 'call_assignment_207792', False)
            # Obtaining the member '__getitem__' of a type (line 2301)
            getitem___213445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2301, 12), call_assignment_207792_213444, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_213448 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___213445, *[int_213446], **kwargs_213447)
            
            # Assigning a type to the variable 'call_assignment_207794' (line 2301)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2301, 12), 'call_assignment_207794', getitem___call_result_213448)
            
            # Assigning a Name to a Name (line 2301):
            # Getting the type of 'call_assignment_207794' (line 2301)
            call_assignment_207794_213449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 12), 'call_assignment_207794')
            # Assigning a type to the variable 'x1' (line 2301)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2301, 16), 'x1', call_assignment_207794_213449)
            
            
            # Getting the type of 'self' (line 2303)
            self_213450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2303, 19), 'self')
            # Obtaining the member '_tight' of a type (line 2303)
            _tight_213451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2303, 19), self_213450, '_tight')
            # Applying the 'not' unary operator (line 2303)
            result_not__213452 = python_operator(stypy.reporting.localization.Localization(__file__, 2303, 15), 'not', _tight_213451)
            
            # Testing the type of an if condition (line 2303)
            if_condition_213453 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2303, 12), result_not__213452)
            # Assigning a type to the variable 'if_condition_213453' (line 2303)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2303, 12), 'if_condition_213453', if_condition_213453)
            # SSA begins for if statement (line 2303)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Tuple (line 2304):
            
            # Assigning a Call to a Name:
            
            # Call to view_limits(...): (line 2304)
            # Processing the call arguments (line 2304)
            # Getting the type of 'x0' (line 2304)
            x0_213456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 45), 'x0', False)
            # Getting the type of 'x1' (line 2304)
            x1_213457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 49), 'x1', False)
            # Processing the call keyword arguments (line 2304)
            kwargs_213458 = {}
            # Getting the type of 'locator' (line 2304)
            locator_213454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 25), 'locator', False)
            # Obtaining the member 'view_limits' of a type (line 2304)
            view_limits_213455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2304, 25), locator_213454, 'view_limits')
            # Calling view_limits(args, kwargs) (line 2304)
            view_limits_call_result_213459 = invoke(stypy.reporting.localization.Localization(__file__, 2304, 25), view_limits_213455, *[x0_213456, x1_213457], **kwargs_213458)
            
            # Assigning a type to the variable 'call_assignment_207795' (line 2304)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2304, 16), 'call_assignment_207795', view_limits_call_result_213459)
            
            # Assigning a Call to a Name (line 2304):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_213462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2304, 16), 'int')
            # Processing the call keyword arguments
            kwargs_213463 = {}
            # Getting the type of 'call_assignment_207795' (line 2304)
            call_assignment_207795_213460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 16), 'call_assignment_207795', False)
            # Obtaining the member '__getitem__' of a type (line 2304)
            getitem___213461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2304, 16), call_assignment_207795_213460, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_213464 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___213461, *[int_213462], **kwargs_213463)
            
            # Assigning a type to the variable 'call_assignment_207796' (line 2304)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2304, 16), 'call_assignment_207796', getitem___call_result_213464)
            
            # Assigning a Name to a Name (line 2304):
            # Getting the type of 'call_assignment_207796' (line 2304)
            call_assignment_207796_213465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 16), 'call_assignment_207796')
            # Assigning a type to the variable 'x0' (line 2304)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2304, 16), 'x0', call_assignment_207796_213465)
            
            # Assigning a Call to a Name (line 2304):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_213468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2304, 16), 'int')
            # Processing the call keyword arguments
            kwargs_213469 = {}
            # Getting the type of 'call_assignment_207795' (line 2304)
            call_assignment_207795_213466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 16), 'call_assignment_207795', False)
            # Obtaining the member '__getitem__' of a type (line 2304)
            getitem___213467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2304, 16), call_assignment_207795_213466, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_213470 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___213467, *[int_213468], **kwargs_213469)
            
            # Assigning a type to the variable 'call_assignment_207797' (line 2304)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2304, 16), 'call_assignment_207797', getitem___call_result_213470)
            
            # Assigning a Name to a Name (line 2304):
            # Getting the type of 'call_assignment_207797' (line 2304)
            call_assignment_207797_213471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 16), 'call_assignment_207797')
            # Assigning a type to the variable 'x1' (line 2304)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2304, 20), 'x1', call_assignment_207797_213471)
            # SSA join for if statement (line 2303)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to set_bound(...): (line 2305)
            # Processing the call arguments (line 2305)
            # Getting the type of 'x0' (line 2305)
            x0_213473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 22), 'x0', False)
            # Getting the type of 'x1' (line 2305)
            x1_213474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 26), 'x1', False)
            # Processing the call keyword arguments (line 2305)
            kwargs_213475 = {}
            # Getting the type of 'set_bound' (line 2305)
            set_bound_213472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 12), 'set_bound', False)
            # Calling set_bound(args, kwargs) (line 2305)
            set_bound_call_result_213476 = invoke(stypy.reporting.localization.Localization(__file__, 2305, 12), set_bound_213472, *[x0_213473, x1_213474], **kwargs_213475)
            
            
            # ################# End of 'handle_single_axis(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'handle_single_axis' in the type store
            # Getting the type of 'stypy_return_type' (line 2250)
            stypy_return_type_213477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_213477)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'handle_single_axis'
            return stypy_return_type_213477

        # Assigning a type to the variable 'handle_single_axis' (line 2250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2250, 8), 'handle_single_axis', handle_single_axis)
        
        # Call to handle_single_axis(...): (line 2308)
        # Processing the call arguments (line 2308)
        # Getting the type of 'scalex' (line 2309)
        scalex_213479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 12), 'scalex', False)
        # Getting the type of 'self' (line 2309)
        self_213480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 20), 'self', False)
        # Obtaining the member '_autoscaleXon' of a type (line 2309)
        _autoscaleXon_213481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2309, 20), self_213480, '_autoscaleXon')
        # Getting the type of 'self' (line 2309)
        self_213482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 40), 'self', False)
        # Obtaining the member '_shared_x_axes' of a type (line 2309)
        _shared_x_axes_213483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2309, 40), self_213482, '_shared_x_axes')
        unicode_213484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2309, 61), 'unicode', u'intervalx')
        unicode_213485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2310, 12), 'unicode', u'minposx')
        # Getting the type of 'self' (line 2310)
        self_213486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 23), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 2310)
        xaxis_213487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2310, 23), self_213486, 'xaxis')
        # Getting the type of 'self' (line 2310)
        self_213488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 35), 'self', False)
        # Obtaining the member '_xmargin' of a type (line 2310)
        _xmargin_213489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2310, 35), self_213488, '_xmargin')
        # Getting the type of 'x_stickies' (line 2310)
        x_stickies_213490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 50), 'x_stickies', False)
        # Getting the type of 'self' (line 2310)
        self_213491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 62), 'self', False)
        # Obtaining the member 'set_xbound' of a type (line 2310)
        set_xbound_213492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2310, 62), self_213491, 'set_xbound')
        # Processing the call keyword arguments (line 2308)
        kwargs_213493 = {}
        # Getting the type of 'handle_single_axis' (line 2308)
        handle_single_axis_213478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 8), 'handle_single_axis', False)
        # Calling handle_single_axis(args, kwargs) (line 2308)
        handle_single_axis_call_result_213494 = invoke(stypy.reporting.localization.Localization(__file__, 2308, 8), handle_single_axis_213478, *[scalex_213479, _autoscaleXon_213481, _shared_x_axes_213483, unicode_213484, unicode_213485, xaxis_213487, _xmargin_213489, x_stickies_213490, set_xbound_213492], **kwargs_213493)
        
        
        # Call to handle_single_axis(...): (line 2311)
        # Processing the call arguments (line 2311)
        # Getting the type of 'scaley' (line 2312)
        scaley_213496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 12), 'scaley', False)
        # Getting the type of 'self' (line 2312)
        self_213497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 20), 'self', False)
        # Obtaining the member '_autoscaleYon' of a type (line 2312)
        _autoscaleYon_213498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2312, 20), self_213497, '_autoscaleYon')
        # Getting the type of 'self' (line 2312)
        self_213499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 40), 'self', False)
        # Obtaining the member '_shared_y_axes' of a type (line 2312)
        _shared_y_axes_213500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2312, 40), self_213499, '_shared_y_axes')
        unicode_213501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2312, 61), 'unicode', u'intervaly')
        unicode_213502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2313, 12), 'unicode', u'minposy')
        # Getting the type of 'self' (line 2313)
        self_213503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 23), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 2313)
        yaxis_213504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2313, 23), self_213503, 'yaxis')
        # Getting the type of 'self' (line 2313)
        self_213505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 35), 'self', False)
        # Obtaining the member '_ymargin' of a type (line 2313)
        _ymargin_213506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2313, 35), self_213505, '_ymargin')
        # Getting the type of 'y_stickies' (line 2313)
        y_stickies_213507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 50), 'y_stickies', False)
        # Getting the type of 'self' (line 2313)
        self_213508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 62), 'self', False)
        # Obtaining the member 'set_ybound' of a type (line 2313)
        set_ybound_213509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2313, 62), self_213508, 'set_ybound')
        # Processing the call keyword arguments (line 2311)
        kwargs_213510 = {}
        # Getting the type of 'handle_single_axis' (line 2311)
        handle_single_axis_213495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 8), 'handle_single_axis', False)
        # Calling handle_single_axis(args, kwargs) (line 2311)
        handle_single_axis_call_result_213511 = invoke(stypy.reporting.localization.Localization(__file__, 2311, 8), handle_single_axis_213495, *[scaley_213496, _autoscaleYon_213498, _shared_y_axes_213500, unicode_213501, unicode_213502, yaxis_213504, _ymargin_213506, y_stickies_213507, set_ybound_213509], **kwargs_213510)
        
        
        # ################# End of 'autoscale_view(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale_view' in the type store
        # Getting the type of 'stypy_return_type' (line 2216)
        stypy_return_type_213512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_213512)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale_view'
        return stypy_return_type_213512


    @norecursion
    def _get_axis_list(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_axis_list'
        module_type_store = module_type_store.open_function_context('_get_axis_list', 2315, 4, False)
        # Assigning a type to the variable 'self' (line 2316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2316, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._get_axis_list.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._get_axis_list.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._get_axis_list.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._get_axis_list.__dict__.__setitem__('stypy_function_name', '_AxesBase._get_axis_list')
        _AxesBase._get_axis_list.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase._get_axis_list.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._get_axis_list.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._get_axis_list.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._get_axis_list.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._get_axis_list.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._get_axis_list.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._get_axis_list', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_axis_list', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_axis_list(...)' code ##################

        
        # Obtaining an instance of the builtin type 'tuple' (line 2316)
        tuple_213513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2316, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2316)
        # Adding element type (line 2316)
        # Getting the type of 'self' (line 2316)
        self_213514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 16), 'self')
        # Obtaining the member 'xaxis' of a type (line 2316)
        xaxis_213515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2316, 16), self_213514, 'xaxis')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2316, 16), tuple_213513, xaxis_213515)
        # Adding element type (line 2316)
        # Getting the type of 'self' (line 2316)
        self_213516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 28), 'self')
        # Obtaining the member 'yaxis' of a type (line 2316)
        yaxis_213517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2316, 28), self_213516, 'yaxis')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2316, 16), tuple_213513, yaxis_213517)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2316, 8), 'stypy_return_type', tuple_213513)
        
        # ################# End of '_get_axis_list(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_axis_list' in the type store
        # Getting the type of 'stypy_return_type' (line 2315)
        stypy_return_type_213518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_213518)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_axis_list'
        return stypy_return_type_213518


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2321)
        None_213519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 28), 'None')
        # Getting the type of 'False' (line 2321)
        False_213520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 42), 'False')
        defaults = [None_213519, False_213520]
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 2320, 4, False)
        # Assigning a type to the variable 'self' (line 2321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2321, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.draw.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.draw.__dict__.__setitem__('stypy_function_name', '_AxesBase.draw')
        _AxesBase.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'inframe'])
        _AxesBase.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.draw.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.draw', ['renderer', 'inframe'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer', 'inframe'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_213521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2322, 8), 'unicode', u'Draw everything (plot lines, axes, labels)')
        
        # Type idiom detected: calculating its left and rigth part (line 2323)
        # Getting the type of 'renderer' (line 2323)
        renderer_213522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2323, 11), 'renderer')
        # Getting the type of 'None' (line 2323)
        None_213523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2323, 23), 'None')
        
        (may_be_213524, more_types_in_union_213525) = may_be_none(renderer_213522, None_213523)

        if may_be_213524:

            if more_types_in_union_213525:
                # Runtime conditional SSA (line 2323)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 2324):
            
            # Assigning a Attribute to a Name (line 2324):
            # Getting the type of 'self' (line 2324)
            self_213526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2324, 23), 'self')
            # Obtaining the member '_cachedRenderer' of a type (line 2324)
            _cachedRenderer_213527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2324, 23), self_213526, '_cachedRenderer')
            # Assigning a type to the variable 'renderer' (line 2324)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2324, 12), 'renderer', _cachedRenderer_213527)

            if more_types_in_union_213525:
                # SSA join for if statement (line 2323)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2326)
        # Getting the type of 'renderer' (line 2326)
        renderer_213528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2326, 11), 'renderer')
        # Getting the type of 'None' (line 2326)
        None_213529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2326, 23), 'None')
        
        (may_be_213530, more_types_in_union_213531) = may_be_none(renderer_213528, None_213529)

        if may_be_213530:

            if more_types_in_union_213531:
                # Runtime conditional SSA (line 2326)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to RuntimeError(...): (line 2327)
            # Processing the call arguments (line 2327)
            unicode_213533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2327, 31), 'unicode', u'No renderer defined')
            # Processing the call keyword arguments (line 2327)
            kwargs_213534 = {}
            # Getting the type of 'RuntimeError' (line 2327)
            RuntimeError_213532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 18), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 2327)
            RuntimeError_call_result_213535 = invoke(stypy.reporting.localization.Localization(__file__, 2327, 18), RuntimeError_213532, *[unicode_213533], **kwargs_213534)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2327, 12), RuntimeError_call_result_213535, 'raise parameter', BaseException)

            if more_types_in_union_213531:
                # SSA join for if statement (line 2326)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to get_visible(...): (line 2328)
        # Processing the call keyword arguments (line 2328)
        kwargs_213538 = {}
        # Getting the type of 'self' (line 2328)
        self_213536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 2328)
        get_visible_213537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2328, 15), self_213536, 'get_visible')
        # Calling get_visible(args, kwargs) (line 2328)
        get_visible_call_result_213539 = invoke(stypy.reporting.localization.Localization(__file__, 2328, 15), get_visible_213537, *[], **kwargs_213538)
        
        # Applying the 'not' unary operator (line 2328)
        result_not__213540 = python_operator(stypy.reporting.localization.Localization(__file__, 2328, 11), 'not', get_visible_call_result_213539)
        
        # Testing the type of an if condition (line 2328)
        if_condition_213541 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2328, 8), result_not__213540)
        # Assigning a type to the variable 'if_condition_213541' (line 2328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2328, 8), 'if_condition_213541', if_condition_213541)
        # SSA begins for if statement (line 2328)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 2329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2329, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2328)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to open_group(...): (line 2330)
        # Processing the call arguments (line 2330)
        unicode_213544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2330, 28), 'unicode', u'axes')
        # Processing the call keyword arguments (line 2330)
        kwargs_213545 = {}
        # Getting the type of 'renderer' (line 2330)
        renderer_213542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 8), 'renderer', False)
        # Obtaining the member 'open_group' of a type (line 2330)
        open_group_213543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2330, 8), renderer_213542, 'open_group')
        # Calling open_group(args, kwargs) (line 2330)
        open_group_call_result_213546 = invoke(stypy.reporting.localization.Localization(__file__, 2330, 8), open_group_213543, *[unicode_213544], **kwargs_213545)
        
        
        # Assigning a Name to a Attribute (line 2332):
        
        # Assigning a Name to a Attribute (line 2332):
        # Getting the type of 'True' (line 2332)
        True_213547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 22), 'True')
        # Getting the type of 'self' (line 2332)
        self_213548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 8), 'self')
        # Setting the type of the member '_stale' of a type (line 2332)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2332, 8), self_213548, '_stale', True_213547)
        
        # Assigning a Call to a Name (line 2333):
        
        # Assigning a Call to a Name (line 2333):
        
        # Call to get_axes_locator(...): (line 2333)
        # Processing the call keyword arguments (line 2333)
        kwargs_213551 = {}
        # Getting the type of 'self' (line 2333)
        self_213549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 18), 'self', False)
        # Obtaining the member 'get_axes_locator' of a type (line 2333)
        get_axes_locator_213550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2333, 18), self_213549, 'get_axes_locator')
        # Calling get_axes_locator(args, kwargs) (line 2333)
        get_axes_locator_call_result_213552 = invoke(stypy.reporting.localization.Localization(__file__, 2333, 18), get_axes_locator_213550, *[], **kwargs_213551)
        
        # Assigning a type to the variable 'locator' (line 2333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2333, 8), 'locator', get_axes_locator_call_result_213552)
        
        # Getting the type of 'locator' (line 2334)
        locator_213553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 11), 'locator')
        # Testing the type of an if condition (line 2334)
        if_condition_213554 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2334, 8), locator_213553)
        # Assigning a type to the variable 'if_condition_213554' (line 2334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2334, 8), 'if_condition_213554', if_condition_213554)
        # SSA begins for if statement (line 2334)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2335):
        
        # Assigning a Call to a Name (line 2335):
        
        # Call to locator(...): (line 2335)
        # Processing the call arguments (line 2335)
        # Getting the type of 'self' (line 2335)
        self_213556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 26), 'self', False)
        # Getting the type of 'renderer' (line 2335)
        renderer_213557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 32), 'renderer', False)
        # Processing the call keyword arguments (line 2335)
        kwargs_213558 = {}
        # Getting the type of 'locator' (line 2335)
        locator_213555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 18), 'locator', False)
        # Calling locator(args, kwargs) (line 2335)
        locator_call_result_213559 = invoke(stypy.reporting.localization.Localization(__file__, 2335, 18), locator_213555, *[self_213556, renderer_213557], **kwargs_213558)
        
        # Assigning a type to the variable 'pos' (line 2335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2335, 12), 'pos', locator_call_result_213559)
        
        # Call to apply_aspect(...): (line 2336)
        # Processing the call arguments (line 2336)
        # Getting the type of 'pos' (line 2336)
        pos_213562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 30), 'pos', False)
        # Processing the call keyword arguments (line 2336)
        kwargs_213563 = {}
        # Getting the type of 'self' (line 2336)
        self_213560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 12), 'self', False)
        # Obtaining the member 'apply_aspect' of a type (line 2336)
        apply_aspect_213561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2336, 12), self_213560, 'apply_aspect')
        # Calling apply_aspect(args, kwargs) (line 2336)
        apply_aspect_call_result_213564 = invoke(stypy.reporting.localization.Localization(__file__, 2336, 12), apply_aspect_213561, *[pos_213562], **kwargs_213563)
        
        # SSA branch for the else part of an if statement (line 2334)
        module_type_store.open_ssa_branch('else')
        
        # Call to apply_aspect(...): (line 2338)
        # Processing the call keyword arguments (line 2338)
        kwargs_213567 = {}
        # Getting the type of 'self' (line 2338)
        self_213565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2338, 12), 'self', False)
        # Obtaining the member 'apply_aspect' of a type (line 2338)
        apply_aspect_213566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2338, 12), self_213565, 'apply_aspect')
        # Calling apply_aspect(args, kwargs) (line 2338)
        apply_aspect_call_result_213568 = invoke(stypy.reporting.localization.Localization(__file__, 2338, 12), apply_aspect_213566, *[], **kwargs_213567)
        
        # SSA join for if statement (line 2334)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2340):
        
        # Assigning a Call to a Name (line 2340):
        
        # Call to get_children(...): (line 2340)
        # Processing the call keyword arguments (line 2340)
        kwargs_213571 = {}
        # Getting the type of 'self' (line 2340)
        self_213569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 18), 'self', False)
        # Obtaining the member 'get_children' of a type (line 2340)
        get_children_213570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2340, 18), self_213569, 'get_children')
        # Calling get_children(args, kwargs) (line 2340)
        get_children_call_result_213572 = invoke(stypy.reporting.localization.Localization(__file__, 2340, 18), get_children_213570, *[], **kwargs_213571)
        
        # Assigning a type to the variable 'artists' (line 2340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2340, 8), 'artists', get_children_call_result_213572)
        
        # Call to remove(...): (line 2341)
        # Processing the call arguments (line 2341)
        # Getting the type of 'self' (line 2341)
        self_213575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 23), 'self', False)
        # Obtaining the member 'patch' of a type (line 2341)
        patch_213576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2341, 23), self_213575, 'patch')
        # Processing the call keyword arguments (line 2341)
        kwargs_213577 = {}
        # Getting the type of 'artists' (line 2341)
        artists_213573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 8), 'artists', False)
        # Obtaining the member 'remove' of a type (line 2341)
        remove_213574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2341, 8), artists_213573, 'remove')
        # Calling remove(args, kwargs) (line 2341)
        remove_call_result_213578 = invoke(stypy.reporting.localization.Localization(__file__, 2341, 8), remove_213574, *[patch_213576], **kwargs_213577)
        
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2347)
        self_213579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2347, 16), 'self')
        # Obtaining the member 'axison' of a type (line 2347)
        axison_213580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2347, 16), self_213579, 'axison')
        # Getting the type of 'self' (line 2347)
        self_213581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2347, 32), 'self')
        # Obtaining the member '_frameon' of a type (line 2347)
        _frameon_213582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2347, 32), self_213581, '_frameon')
        # Applying the binary operator 'and' (line 2347)
        result_and_keyword_213583 = python_operator(stypy.reporting.localization.Localization(__file__, 2347, 16), 'and', axison_213580, _frameon_213582)
        
        # Applying the 'not' unary operator (line 2347)
        result_not__213584 = python_operator(stypy.reporting.localization.Localization(__file__, 2347, 11), 'not', result_and_keyword_213583)
        
        # Testing the type of an if condition (line 2347)
        if_condition_213585 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2347, 8), result_not__213584)
        # Assigning a type to the variable 'if_condition_213585' (line 2347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2347, 8), 'if_condition_213585', if_condition_213585)
        # SSA begins for if statement (line 2347)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to itervalues(...): (line 2348)
        # Processing the call arguments (line 2348)
        # Getting the type of 'self' (line 2348)
        self_213588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 40), 'self', False)
        # Obtaining the member 'spines' of a type (line 2348)
        spines_213589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2348, 40), self_213588, 'spines')
        # Processing the call keyword arguments (line 2348)
        kwargs_213590 = {}
        # Getting the type of 'six' (line 2348)
        six_213586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 25), 'six', False)
        # Obtaining the member 'itervalues' of a type (line 2348)
        itervalues_213587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2348, 25), six_213586, 'itervalues')
        # Calling itervalues(args, kwargs) (line 2348)
        itervalues_call_result_213591 = invoke(stypy.reporting.localization.Localization(__file__, 2348, 25), itervalues_213587, *[spines_213589], **kwargs_213590)
        
        # Testing the type of a for loop iterable (line 2348)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2348, 12), itervalues_call_result_213591)
        # Getting the type of the for loop variable (line 2348)
        for_loop_var_213592 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2348, 12), itervalues_call_result_213591)
        # Assigning a type to the variable 'spine' (line 2348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2348, 12), 'spine', for_loop_var_213592)
        # SSA begins for a for statement (line 2348)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to remove(...): (line 2349)
        # Processing the call arguments (line 2349)
        # Getting the type of 'spine' (line 2349)
        spine_213595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2349, 31), 'spine', False)
        # Processing the call keyword arguments (line 2349)
        kwargs_213596 = {}
        # Getting the type of 'artists' (line 2349)
        artists_213593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2349, 16), 'artists', False)
        # Obtaining the member 'remove' of a type (line 2349)
        remove_213594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2349, 16), artists_213593, 'remove')
        # Calling remove(args, kwargs) (line 2349)
        remove_call_result_213597 = invoke(stypy.reporting.localization.Localization(__file__, 2349, 16), remove_213594, *[spine_213595], **kwargs_213596)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2347)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2351)
        self_213598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 11), 'self')
        # Obtaining the member 'axison' of a type (line 2351)
        axison_213599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 11), self_213598, 'axison')
        
        # Getting the type of 'inframe' (line 2351)
        inframe_213600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 31), 'inframe')
        # Applying the 'not' unary operator (line 2351)
        result_not__213601 = python_operator(stypy.reporting.localization.Localization(__file__, 2351, 27), 'not', inframe_213600)
        
        # Applying the binary operator 'and' (line 2351)
        result_and_keyword_213602 = python_operator(stypy.reporting.localization.Localization(__file__, 2351, 11), 'and', axison_213599, result_not__213601)
        
        # Testing the type of an if condition (line 2351)
        if_condition_213603 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2351, 8), result_and_keyword_213602)
        # Assigning a type to the variable 'if_condition_213603' (line 2351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2351, 8), 'if_condition_213603', if_condition_213603)
        # SSA begins for if statement (line 2351)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 2352)
        self_213604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 15), 'self')
        # Obtaining the member '_axisbelow' of a type (line 2352)
        _axisbelow_213605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2352, 15), self_213604, '_axisbelow')
        # Getting the type of 'True' (line 2352)
        True_213606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 34), 'True')
        # Applying the binary operator 'is' (line 2352)
        result_is__213607 = python_operator(stypy.reporting.localization.Localization(__file__, 2352, 15), 'is', _axisbelow_213605, True_213606)
        
        # Testing the type of an if condition (line 2352)
        if_condition_213608 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2352, 12), result_is__213607)
        # Assigning a type to the variable 'if_condition_213608' (line 2352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2352, 12), 'if_condition_213608', if_condition_213608)
        # SSA begins for if statement (line 2352)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_zorder(...): (line 2353)
        # Processing the call arguments (line 2353)
        float_213612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2353, 38), 'float')
        # Processing the call keyword arguments (line 2353)
        kwargs_213613 = {}
        # Getting the type of 'self' (line 2353)
        self_213609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 16), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 2353)
        xaxis_213610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2353, 16), self_213609, 'xaxis')
        # Obtaining the member 'set_zorder' of a type (line 2353)
        set_zorder_213611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2353, 16), xaxis_213610, 'set_zorder')
        # Calling set_zorder(args, kwargs) (line 2353)
        set_zorder_call_result_213614 = invoke(stypy.reporting.localization.Localization(__file__, 2353, 16), set_zorder_213611, *[float_213612], **kwargs_213613)
        
        
        # Call to set_zorder(...): (line 2354)
        # Processing the call arguments (line 2354)
        float_213618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2354, 38), 'float')
        # Processing the call keyword arguments (line 2354)
        kwargs_213619 = {}
        # Getting the type of 'self' (line 2354)
        self_213615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 16), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 2354)
        yaxis_213616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2354, 16), self_213615, 'yaxis')
        # Obtaining the member 'set_zorder' of a type (line 2354)
        set_zorder_213617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2354, 16), yaxis_213616, 'set_zorder')
        # Calling set_zorder(args, kwargs) (line 2354)
        set_zorder_call_result_213620 = invoke(stypy.reporting.localization.Localization(__file__, 2354, 16), set_zorder_213617, *[float_213618], **kwargs_213619)
        
        # SSA branch for the else part of an if statement (line 2352)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 2355)
        self_213621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 17), 'self')
        # Obtaining the member '_axisbelow' of a type (line 2355)
        _axisbelow_213622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2355, 17), self_213621, '_axisbelow')
        # Getting the type of 'False' (line 2355)
        False_213623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 36), 'False')
        # Applying the binary operator 'is' (line 2355)
        result_is__213624 = python_operator(stypy.reporting.localization.Localization(__file__, 2355, 17), 'is', _axisbelow_213622, False_213623)
        
        # Testing the type of an if condition (line 2355)
        if_condition_213625 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2355, 17), result_is__213624)
        # Assigning a type to the variable 'if_condition_213625' (line 2355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2355, 17), 'if_condition_213625', if_condition_213625)
        # SSA begins for if statement (line 2355)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_zorder(...): (line 2356)
        # Processing the call arguments (line 2356)
        float_213629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2356, 38), 'float')
        # Processing the call keyword arguments (line 2356)
        kwargs_213630 = {}
        # Getting the type of 'self' (line 2356)
        self_213626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 16), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 2356)
        xaxis_213627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2356, 16), self_213626, 'xaxis')
        # Obtaining the member 'set_zorder' of a type (line 2356)
        set_zorder_213628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2356, 16), xaxis_213627, 'set_zorder')
        # Calling set_zorder(args, kwargs) (line 2356)
        set_zorder_call_result_213631 = invoke(stypy.reporting.localization.Localization(__file__, 2356, 16), set_zorder_213628, *[float_213629], **kwargs_213630)
        
        
        # Call to set_zorder(...): (line 2357)
        # Processing the call arguments (line 2357)
        float_213635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2357, 38), 'float')
        # Processing the call keyword arguments (line 2357)
        kwargs_213636 = {}
        # Getting the type of 'self' (line 2357)
        self_213632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 16), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 2357)
        yaxis_213633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2357, 16), self_213632, 'yaxis')
        # Obtaining the member 'set_zorder' of a type (line 2357)
        set_zorder_213634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2357, 16), yaxis_213633, 'set_zorder')
        # Calling set_zorder(args, kwargs) (line 2357)
        set_zorder_call_result_213637 = invoke(stypy.reporting.localization.Localization(__file__, 2357, 16), set_zorder_213634, *[float_213635], **kwargs_213636)
        
        # SSA branch for the else part of an if statement (line 2355)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_zorder(...): (line 2360)
        # Processing the call arguments (line 2360)
        float_213641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2360, 38), 'float')
        # Processing the call keyword arguments (line 2360)
        kwargs_213642 = {}
        # Getting the type of 'self' (line 2360)
        self_213638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2360, 16), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 2360)
        xaxis_213639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2360, 16), self_213638, 'xaxis')
        # Obtaining the member 'set_zorder' of a type (line 2360)
        set_zorder_213640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2360, 16), xaxis_213639, 'set_zorder')
        # Calling set_zorder(args, kwargs) (line 2360)
        set_zorder_call_result_213643 = invoke(stypy.reporting.localization.Localization(__file__, 2360, 16), set_zorder_213640, *[float_213641], **kwargs_213642)
        
        
        # Call to set_zorder(...): (line 2361)
        # Processing the call arguments (line 2361)
        float_213647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2361, 38), 'float')
        # Processing the call keyword arguments (line 2361)
        kwargs_213648 = {}
        # Getting the type of 'self' (line 2361)
        self_213644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2361, 16), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 2361)
        yaxis_213645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2361, 16), self_213644, 'yaxis')
        # Obtaining the member 'set_zorder' of a type (line 2361)
        set_zorder_213646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2361, 16), yaxis_213645, 'set_zorder')
        # Calling set_zorder(args, kwargs) (line 2361)
        set_zorder_call_result_213649 = invoke(stypy.reporting.localization.Localization(__file__, 2361, 16), set_zorder_213646, *[float_213647], **kwargs_213648)
        
        # SSA join for if statement (line 2355)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2352)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2351)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to _get_axis_list(...): (line 2363)
        # Processing the call keyword arguments (line 2363)
        kwargs_213652 = {}
        # Getting the type of 'self' (line 2363)
        self_213650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2363, 25), 'self', False)
        # Obtaining the member '_get_axis_list' of a type (line 2363)
        _get_axis_list_213651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2363, 25), self_213650, '_get_axis_list')
        # Calling _get_axis_list(args, kwargs) (line 2363)
        _get_axis_list_call_result_213653 = invoke(stypy.reporting.localization.Localization(__file__, 2363, 25), _get_axis_list_213651, *[], **kwargs_213652)
        
        # Testing the type of a for loop iterable (line 2363)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2363, 12), _get_axis_list_call_result_213653)
        # Getting the type of the for loop variable (line 2363)
        for_loop_var_213654 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2363, 12), _get_axis_list_call_result_213653)
        # Assigning a type to the variable '_axis' (line 2363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2363, 12), '_axis', for_loop_var_213654)
        # SSA begins for a for statement (line 2363)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to remove(...): (line 2364)
        # Processing the call arguments (line 2364)
        # Getting the type of '_axis' (line 2364)
        _axis_213657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 31), '_axis', False)
        # Processing the call keyword arguments (line 2364)
        kwargs_213658 = {}
        # Getting the type of 'artists' (line 2364)
        artists_213655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 16), 'artists', False)
        # Obtaining the member 'remove' of a type (line 2364)
        remove_213656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2364, 16), artists_213655, 'remove')
        # Calling remove(args, kwargs) (line 2364)
        remove_call_result_213659 = invoke(stypy.reporting.localization.Localization(__file__, 2364, 16), remove_213656, *[_axis_213657], **kwargs_213658)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2351)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'inframe' (line 2366)
        inframe_213660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 11), 'inframe')
        # Testing the type of an if condition (line 2366)
        if_condition_213661 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2366, 8), inframe_213660)
        # Assigning a type to the variable 'if_condition_213661' (line 2366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2366, 8), 'if_condition_213661', if_condition_213661)
        # SSA begins for if statement (line 2366)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to remove(...): (line 2367)
        # Processing the call arguments (line 2367)
        # Getting the type of 'self' (line 2367)
        self_213664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 27), 'self', False)
        # Obtaining the member 'title' of a type (line 2367)
        title_213665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2367, 27), self_213664, 'title')
        # Processing the call keyword arguments (line 2367)
        kwargs_213666 = {}
        # Getting the type of 'artists' (line 2367)
        artists_213662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 12), 'artists', False)
        # Obtaining the member 'remove' of a type (line 2367)
        remove_213663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2367, 12), artists_213662, 'remove')
        # Calling remove(args, kwargs) (line 2367)
        remove_call_result_213667 = invoke(stypy.reporting.localization.Localization(__file__, 2367, 12), remove_213663, *[title_213665], **kwargs_213666)
        
        
        # Call to remove(...): (line 2368)
        # Processing the call arguments (line 2368)
        # Getting the type of 'self' (line 2368)
        self_213670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 27), 'self', False)
        # Obtaining the member '_left_title' of a type (line 2368)
        _left_title_213671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2368, 27), self_213670, '_left_title')
        # Processing the call keyword arguments (line 2368)
        kwargs_213672 = {}
        # Getting the type of 'artists' (line 2368)
        artists_213668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 12), 'artists', False)
        # Obtaining the member 'remove' of a type (line 2368)
        remove_213669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2368, 12), artists_213668, 'remove')
        # Calling remove(args, kwargs) (line 2368)
        remove_call_result_213673 = invoke(stypy.reporting.localization.Localization(__file__, 2368, 12), remove_213669, *[_left_title_213671], **kwargs_213672)
        
        
        # Call to remove(...): (line 2369)
        # Processing the call arguments (line 2369)
        # Getting the type of 'self' (line 2369)
        self_213676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 27), 'self', False)
        # Obtaining the member '_right_title' of a type (line 2369)
        _right_title_213677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2369, 27), self_213676, '_right_title')
        # Processing the call keyword arguments (line 2369)
        kwargs_213678 = {}
        # Getting the type of 'artists' (line 2369)
        artists_213674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 12), 'artists', False)
        # Obtaining the member 'remove' of a type (line 2369)
        remove_213675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2369, 12), artists_213674, 'remove')
        # Calling remove(args, kwargs) (line 2369)
        remove_call_result_213679 = invoke(stypy.reporting.localization.Localization(__file__, 2369, 12), remove_213675, *[_right_title_213677], **kwargs_213678)
        
        # SSA join for if statement (line 2366)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to is_saving(...): (line 2371)
        # Processing the call keyword arguments (line 2371)
        kwargs_213684 = {}
        # Getting the type of 'self' (line 2371)
        self_213680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 15), 'self', False)
        # Obtaining the member 'figure' of a type (line 2371)
        figure_213681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2371, 15), self_213680, 'figure')
        # Obtaining the member 'canvas' of a type (line 2371)
        canvas_213682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2371, 15), figure_213681, 'canvas')
        # Obtaining the member 'is_saving' of a type (line 2371)
        is_saving_213683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2371, 15), canvas_213682, 'is_saving')
        # Calling is_saving(args, kwargs) (line 2371)
        is_saving_call_result_213685 = invoke(stypy.reporting.localization.Localization(__file__, 2371, 15), is_saving_213683, *[], **kwargs_213684)
        
        # Applying the 'not' unary operator (line 2371)
        result_not__213686 = python_operator(stypy.reporting.localization.Localization(__file__, 2371, 11), 'not', is_saving_call_result_213685)
        
        # Testing the type of an if condition (line 2371)
        if_condition_213687 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2371, 8), result_not__213686)
        # Assigning a type to the variable 'if_condition_213687' (line 2371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2371, 8), 'if_condition_213687', if_condition_213687)
        # SSA begins for if statement (line 2371)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a ListComp to a Name (line 2372):
        
        # Assigning a ListComp to a Name (line 2372):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'artists' (line 2372)
        artists_213699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 34), 'artists')
        comprehension_213700 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2372, 23), artists_213699)
        # Assigning a type to the variable 'a' (line 2372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2372, 23), 'a', comprehension_213700)
        
        # Evaluating a boolean operation
        
        
        # Call to get_animated(...): (line 2373)
        # Processing the call keyword arguments (line 2373)
        kwargs_213691 = {}
        # Getting the type of 'a' (line 2373)
        a_213689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 30), 'a', False)
        # Obtaining the member 'get_animated' of a type (line 2373)
        get_animated_213690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2373, 30), a_213689, 'get_animated')
        # Calling get_animated(args, kwargs) (line 2373)
        get_animated_call_result_213692 = invoke(stypy.reporting.localization.Localization(__file__, 2373, 30), get_animated_213690, *[], **kwargs_213691)
        
        # Applying the 'not' unary operator (line 2373)
        result_not__213693 = python_operator(stypy.reporting.localization.Localization(__file__, 2373, 26), 'not', get_animated_call_result_213692)
        
        
        # Getting the type of 'a' (line 2373)
        a_213694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 50), 'a')
        # Getting the type of 'self' (line 2373)
        self_213695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 55), 'self')
        # Obtaining the member 'images' of a type (line 2373)
        images_213696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2373, 55), self_213695, 'images')
        # Applying the binary operator 'in' (line 2373)
        result_contains_213697 = python_operator(stypy.reporting.localization.Localization(__file__, 2373, 50), 'in', a_213694, images_213696)
        
        # Applying the binary operator 'or' (line 2373)
        result_or_keyword_213698 = python_operator(stypy.reporting.localization.Localization(__file__, 2373, 26), 'or', result_not__213693, result_contains_213697)
        
        # Getting the type of 'a' (line 2372)
        a_213688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 23), 'a')
        list_213701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2372, 23), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2372, 23), list_213701, a_213688)
        # Assigning a type to the variable 'artists' (line 2372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2372, 12), 'artists', list_213701)
        # SSA join for if statement (line 2371)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2374):
        
        # Assigning a Call to a Name (line 2374):
        
        # Call to sorted(...): (line 2374)
        # Processing the call arguments (line 2374)
        # Getting the type of 'artists' (line 2374)
        artists_213703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 25), 'artists', False)
        # Processing the call keyword arguments (line 2374)
        
        # Call to attrgetter(...): (line 2374)
        # Processing the call arguments (line 2374)
        unicode_213705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2374, 49), 'unicode', u'zorder')
        # Processing the call keyword arguments (line 2374)
        kwargs_213706 = {}
        # Getting the type of 'attrgetter' (line 2374)
        attrgetter_213704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 38), 'attrgetter', False)
        # Calling attrgetter(args, kwargs) (line 2374)
        attrgetter_call_result_213707 = invoke(stypy.reporting.localization.Localization(__file__, 2374, 38), attrgetter_213704, *[unicode_213705], **kwargs_213706)
        
        keyword_213708 = attrgetter_call_result_213707
        kwargs_213709 = {'key': keyword_213708}
        # Getting the type of 'sorted' (line 2374)
        sorted_213702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 18), 'sorted', False)
        # Calling sorted(args, kwargs) (line 2374)
        sorted_call_result_213710 = invoke(stypy.reporting.localization.Localization(__file__, 2374, 18), sorted_213702, *[artists_213703], **kwargs_213709)
        
        # Assigning a type to the variable 'artists' (line 2374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2374, 8), 'artists', sorted_call_result_213710)
        
        # Assigning a Attribute to a Name (line 2378):
        
        # Assigning a Attribute to a Name (line 2378):
        # Getting the type of 'self' (line 2378)
        self_213711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2378, 31), 'self')
        # Obtaining the member '_rasterization_zorder' of a type (line 2378)
        _rasterization_zorder_213712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2378, 31), self_213711, '_rasterization_zorder')
        # Assigning a type to the variable 'rasterization_zorder' (line 2378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2378, 8), 'rasterization_zorder', _rasterization_zorder_213712)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'rasterization_zorder' (line 2379)
        rasterization_zorder_213713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 12), 'rasterization_zorder')
        # Getting the type of 'None' (line 2379)
        None_213714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 40), 'None')
        # Applying the binary operator 'isnot' (line 2379)
        result_is_not_213715 = python_operator(stypy.reporting.localization.Localization(__file__, 2379, 12), 'isnot', rasterization_zorder_213713, None_213714)
        
        # Getting the type of 'artists' (line 2380)
        artists_213716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2380, 16), 'artists')
        # Applying the binary operator 'and' (line 2379)
        result_and_keyword_213717 = python_operator(stypy.reporting.localization.Localization(__file__, 2379, 12), 'and', result_is_not_213715, artists_213716)
        
        
        # Obtaining the type of the subscript
        int_213718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2380, 36), 'int')
        # Getting the type of 'artists' (line 2380)
        artists_213719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2380, 28), 'artists')
        # Obtaining the member '__getitem__' of a type (line 2380)
        getitem___213720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2380, 28), artists_213719, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2380)
        subscript_call_result_213721 = invoke(stypy.reporting.localization.Localization(__file__, 2380, 28), getitem___213720, int_213718)
        
        # Obtaining the member 'zorder' of a type (line 2380)
        zorder_213722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2380, 28), subscript_call_result_213721, 'zorder')
        # Getting the type of 'rasterization_zorder' (line 2380)
        rasterization_zorder_213723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2380, 48), 'rasterization_zorder')
        # Applying the binary operator '<' (line 2380)
        result_lt_213724 = python_operator(stypy.reporting.localization.Localization(__file__, 2380, 28), '<', zorder_213722, rasterization_zorder_213723)
        
        # Applying the binary operator 'and' (line 2379)
        result_and_keyword_213725 = python_operator(stypy.reporting.localization.Localization(__file__, 2379, 12), 'and', result_and_keyword_213717, result_lt_213724)
        
        # Testing the type of an if condition (line 2379)
        if_condition_213726 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2379, 8), result_and_keyword_213725)
        # Assigning a type to the variable 'if_condition_213726' (line 2379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2379, 8), 'if_condition_213726', if_condition_213726)
        # SSA begins for if statement (line 2379)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to start_rasterizing(...): (line 2381)
        # Processing the call keyword arguments (line 2381)
        kwargs_213729 = {}
        # Getting the type of 'renderer' (line 2381)
        renderer_213727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2381, 12), 'renderer', False)
        # Obtaining the member 'start_rasterizing' of a type (line 2381)
        start_rasterizing_213728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2381, 12), renderer_213727, 'start_rasterizing')
        # Calling start_rasterizing(args, kwargs) (line 2381)
        start_rasterizing_call_result_213730 = invoke(stypy.reporting.localization.Localization(__file__, 2381, 12), start_rasterizing_213728, *[], **kwargs_213729)
        
        
        # Assigning a ListComp to a Name (line 2382):
        
        # Assigning a ListComp to a Name (line 2382):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'artists' (line 2382)
        artists_213736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2382, 45), 'artists')
        comprehension_213737 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2382, 34), artists_213736)
        # Assigning a type to the variable 'a' (line 2382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2382, 34), 'a', comprehension_213737)
        
        # Getting the type of 'a' (line 2383)
        a_213732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 37), 'a')
        # Obtaining the member 'zorder' of a type (line 2383)
        zorder_213733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2383, 37), a_213732, 'zorder')
        # Getting the type of 'rasterization_zorder' (line 2383)
        rasterization_zorder_213734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 48), 'rasterization_zorder')
        # Applying the binary operator '<' (line 2383)
        result_lt_213735 = python_operator(stypy.reporting.localization.Localization(__file__, 2383, 37), '<', zorder_213733, rasterization_zorder_213734)
        
        # Getting the type of 'a' (line 2382)
        a_213731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2382, 34), 'a')
        list_213738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 34), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2382, 34), list_213738, a_213731)
        # Assigning a type to the variable 'artists_rasterized' (line 2382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2382, 12), 'artists_rasterized', list_213738)
        
        # Assigning a ListComp to a Name (line 2384):
        
        # Assigning a ListComp to a Name (line 2384):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'artists' (line 2384)
        artists_213744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2384, 34), 'artists')
        comprehension_213745 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2384, 23), artists_213744)
        # Assigning a type to the variable 'a' (line 2384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2384, 23), 'a', comprehension_213745)
        
        # Getting the type of 'a' (line 2385)
        a_213740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 26), 'a')
        # Obtaining the member 'zorder' of a type (line 2385)
        zorder_213741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2385, 26), a_213740, 'zorder')
        # Getting the type of 'rasterization_zorder' (line 2385)
        rasterization_zorder_213742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 38), 'rasterization_zorder')
        # Applying the binary operator '>=' (line 2385)
        result_ge_213743 = python_operator(stypy.reporting.localization.Localization(__file__, 2385, 26), '>=', zorder_213741, rasterization_zorder_213742)
        
        # Getting the type of 'a' (line 2384)
        a_213739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2384, 23), 'a')
        list_213746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2384, 23), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2384, 23), list_213746, a_213739)
        # Assigning a type to the variable 'artists' (line 2384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2384, 12), 'artists', list_213746)
        # SSA branch for the else part of an if statement (line 2379)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Name (line 2387):
        
        # Assigning a List to a Name (line 2387):
        
        # Obtaining an instance of the builtin type 'list' (line 2387)
        list_213747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2387, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2387)
        
        # Assigning a type to the variable 'artists_rasterized' (line 2387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2387, 12), 'artists_rasterized', list_213747)
        # SSA join for if statement (line 2379)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2391)
        self_213748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 11), 'self')
        # Obtaining the member 'axison' of a type (line 2391)
        axison_213749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2391, 11), self_213748, 'axison')
        # Getting the type of 'self' (line 2391)
        self_213750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 27), 'self')
        # Obtaining the member '_frameon' of a type (line 2391)
        _frameon_213751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2391, 27), self_213750, '_frameon')
        # Applying the binary operator 'and' (line 2391)
        result_and_keyword_213752 = python_operator(stypy.reporting.localization.Localization(__file__, 2391, 11), 'and', axison_213749, _frameon_213751)
        
        # Testing the type of an if condition (line 2391)
        if_condition_213753 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2391, 8), result_and_keyword_213752)
        # Assigning a type to the variable 'if_condition_213753' (line 2391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2391, 8), 'if_condition_213753', if_condition_213753)
        # SSA begins for if statement (line 2391)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 2392)
        # Processing the call arguments (line 2392)
        # Getting the type of 'renderer' (line 2392)
        renderer_213757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 28), 'renderer', False)
        # Processing the call keyword arguments (line 2392)
        kwargs_213758 = {}
        # Getting the type of 'self' (line 2392)
        self_213754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 12), 'self', False)
        # Obtaining the member 'patch' of a type (line 2392)
        patch_213755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2392, 12), self_213754, 'patch')
        # Obtaining the member 'draw' of a type (line 2392)
        draw_213756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2392, 12), patch_213755, 'draw')
        # Calling draw(args, kwargs) (line 2392)
        draw_call_result_213759 = invoke(stypy.reporting.localization.Localization(__file__, 2392, 12), draw_213756, *[renderer_213757], **kwargs_213758)
        
        # SSA join for if statement (line 2391)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'artists_rasterized' (line 2394)
        artists_rasterized_213760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 11), 'artists_rasterized')
        # Testing the type of an if condition (line 2394)
        if_condition_213761 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2394, 8), artists_rasterized_213760)
        # Assigning a type to the variable 'if_condition_213761' (line 2394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2394, 8), 'if_condition_213761', if_condition_213761)
        # SSA begins for if statement (line 2394)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'artists_rasterized' (line 2395)
        artists_rasterized_213762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 21), 'artists_rasterized')
        # Testing the type of a for loop iterable (line 2395)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2395, 12), artists_rasterized_213762)
        # Getting the type of the for loop variable (line 2395)
        for_loop_var_213763 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2395, 12), artists_rasterized_213762)
        # Assigning a type to the variable 'a' (line 2395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2395, 12), 'a', for_loop_var_213763)
        # SSA begins for a for statement (line 2395)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to draw(...): (line 2396)
        # Processing the call arguments (line 2396)
        # Getting the type of 'renderer' (line 2396)
        renderer_213766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 23), 'renderer', False)
        # Processing the call keyword arguments (line 2396)
        kwargs_213767 = {}
        # Getting the type of 'a' (line 2396)
        a_213764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 16), 'a', False)
        # Obtaining the member 'draw' of a type (line 2396)
        draw_213765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2396, 16), a_213764, 'draw')
        # Calling draw(args, kwargs) (line 2396)
        draw_call_result_213768 = invoke(stypy.reporting.localization.Localization(__file__, 2396, 16), draw_213765, *[renderer_213766], **kwargs_213767)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to stop_rasterizing(...): (line 2397)
        # Processing the call keyword arguments (line 2397)
        kwargs_213771 = {}
        # Getting the type of 'renderer' (line 2397)
        renderer_213769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 12), 'renderer', False)
        # Obtaining the member 'stop_rasterizing' of a type (line 2397)
        stop_rasterizing_213770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2397, 12), renderer_213769, 'stop_rasterizing')
        # Calling stop_rasterizing(args, kwargs) (line 2397)
        stop_rasterizing_call_result_213772 = invoke(stypy.reporting.localization.Localization(__file__, 2397, 12), stop_rasterizing_213770, *[], **kwargs_213771)
        
        # SSA join for if statement (line 2394)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _draw_list_compositing_images(...): (line 2399)
        # Processing the call arguments (line 2399)
        # Getting the type of 'renderer' (line 2399)
        renderer_213775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 45), 'renderer', False)
        # Getting the type of 'self' (line 2399)
        self_213776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 55), 'self', False)
        # Getting the type of 'artists' (line 2399)
        artists_213777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 61), 'artists', False)
        # Processing the call keyword arguments (line 2399)
        kwargs_213778 = {}
        # Getting the type of 'mimage' (line 2399)
        mimage_213773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 8), 'mimage', False)
        # Obtaining the member '_draw_list_compositing_images' of a type (line 2399)
        _draw_list_compositing_images_213774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2399, 8), mimage_213773, '_draw_list_compositing_images')
        # Calling _draw_list_compositing_images(args, kwargs) (line 2399)
        _draw_list_compositing_images_call_result_213779 = invoke(stypy.reporting.localization.Localization(__file__, 2399, 8), _draw_list_compositing_images_213774, *[renderer_213775, self_213776, artists_213777], **kwargs_213778)
        
        
        # Call to close_group(...): (line 2401)
        # Processing the call arguments (line 2401)
        unicode_213782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2401, 29), 'unicode', u'axes')
        # Processing the call keyword arguments (line 2401)
        kwargs_213783 = {}
        # Getting the type of 'renderer' (line 2401)
        renderer_213780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 8), 'renderer', False)
        # Obtaining the member 'close_group' of a type (line 2401)
        close_group_213781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2401, 8), renderer_213780, 'close_group')
        # Calling close_group(args, kwargs) (line 2401)
        close_group_call_result_213784 = invoke(stypy.reporting.localization.Localization(__file__, 2401, 8), close_group_213781, *[unicode_213782], **kwargs_213783)
        
        
        # Assigning a Name to a Attribute (line 2402):
        
        # Assigning a Name to a Attribute (line 2402):
        # Getting the type of 'renderer' (line 2402)
        renderer_213785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2402, 31), 'renderer')
        # Getting the type of 'self' (line 2402)
        self_213786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2402, 8), 'self')
        # Setting the type of the member '_cachedRenderer' of a type (line 2402)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2402, 8), self_213786, '_cachedRenderer', renderer_213785)
        
        # Assigning a Name to a Attribute (line 2403):
        
        # Assigning a Name to a Attribute (line 2403):
        # Getting the type of 'False' (line 2403)
        False_213787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 21), 'False')
        # Getting the type of 'self' (line 2403)
        self_213788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2403)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2403, 8), self_213788, 'stale', False_213787)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 2320)
        stypy_return_type_213789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_213789)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_213789


    @norecursion
    def draw_artist(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_artist'
        module_type_store = module_type_store.open_function_context('draw_artist', 2405, 4, False)
        # Assigning a type to the variable 'self' (line 2406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2406, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.draw_artist.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.draw_artist.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.draw_artist.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.draw_artist.__dict__.__setitem__('stypy_function_name', '_AxesBase.draw_artist')
        _AxesBase.draw_artist.__dict__.__setitem__('stypy_param_names_list', ['a'])
        _AxesBase.draw_artist.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.draw_artist.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.draw_artist.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.draw_artist.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.draw_artist.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.draw_artist.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.draw_artist', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_artist', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_artist(...)' code ##################

        unicode_213790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2410, (-1)), 'unicode', u'\n        This method can only be used after an initial draw which\n        caches the renderer.  It is used to efficiently update Axes\n        data (axis ticks, labels, etc are not updated)\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 2411)
        # Getting the type of 'self' (line 2411)
        self_213791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 11), 'self')
        # Obtaining the member '_cachedRenderer' of a type (line 2411)
        _cachedRenderer_213792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2411, 11), self_213791, '_cachedRenderer')
        # Getting the type of 'None' (line 2411)
        None_213793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 35), 'None')
        
        (may_be_213794, more_types_in_union_213795) = may_be_none(_cachedRenderer_213792, None_213793)

        if may_be_213794:

            if more_types_in_union_213795:
                # Runtime conditional SSA (line 2411)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 2412):
            
            # Assigning a Str to a Name (line 2412):
            unicode_213796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2412, 19), 'unicode', u'draw_artist can only be used after an initial draw which caches the render')
            # Assigning a type to the variable 'msg' (line 2412)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2412, 12), 'msg', unicode_213796)
            
            # Call to AttributeError(...): (line 2414)
            # Processing the call arguments (line 2414)
            # Getting the type of 'msg' (line 2414)
            msg_213798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2414, 33), 'msg', False)
            # Processing the call keyword arguments (line 2414)
            kwargs_213799 = {}
            # Getting the type of 'AttributeError' (line 2414)
            AttributeError_213797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2414, 18), 'AttributeError', False)
            # Calling AttributeError(args, kwargs) (line 2414)
            AttributeError_call_result_213800 = invoke(stypy.reporting.localization.Localization(__file__, 2414, 18), AttributeError_213797, *[msg_213798], **kwargs_213799)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2414, 12), AttributeError_call_result_213800, 'raise parameter', BaseException)

            if more_types_in_union_213795:
                # SSA join for if statement (line 2411)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to draw(...): (line 2415)
        # Processing the call arguments (line 2415)
        # Getting the type of 'self' (line 2415)
        self_213803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 15), 'self', False)
        # Obtaining the member '_cachedRenderer' of a type (line 2415)
        _cachedRenderer_213804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2415, 15), self_213803, '_cachedRenderer')
        # Processing the call keyword arguments (line 2415)
        kwargs_213805 = {}
        # Getting the type of 'a' (line 2415)
        a_213801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 8), 'a', False)
        # Obtaining the member 'draw' of a type (line 2415)
        draw_213802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2415, 8), a_213801, 'draw')
        # Calling draw(args, kwargs) (line 2415)
        draw_call_result_213806 = invoke(stypy.reporting.localization.Localization(__file__, 2415, 8), draw_213802, *[_cachedRenderer_213804], **kwargs_213805)
        
        
        # ################# End of 'draw_artist(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_artist' in the type store
        # Getting the type of 'stypy_return_type' (line 2405)
        stypy_return_type_213807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_213807)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_artist'
        return stypy_return_type_213807


    @norecursion
    def redraw_in_frame(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'redraw_in_frame'
        module_type_store = module_type_store.open_function_context('redraw_in_frame', 2417, 4, False)
        # Assigning a type to the variable 'self' (line 2418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.redraw_in_frame.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.redraw_in_frame.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.redraw_in_frame.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.redraw_in_frame.__dict__.__setitem__('stypy_function_name', '_AxesBase.redraw_in_frame')
        _AxesBase.redraw_in_frame.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.redraw_in_frame.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.redraw_in_frame.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.redraw_in_frame.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.redraw_in_frame.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.redraw_in_frame.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.redraw_in_frame.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.redraw_in_frame', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'redraw_in_frame', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'redraw_in_frame(...)' code ##################

        unicode_213808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2422, (-1)), 'unicode', u'\n        This method can only be used after an initial draw which\n        caches the renderer.  It is used to efficiently update Axes\n        data (axis ticks, labels, etc are not updated)\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 2423)
        # Getting the type of 'self' (line 2423)
        self_213809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2423, 11), 'self')
        # Obtaining the member '_cachedRenderer' of a type (line 2423)
        _cachedRenderer_213810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2423, 11), self_213809, '_cachedRenderer')
        # Getting the type of 'None' (line 2423)
        None_213811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2423, 35), 'None')
        
        (may_be_213812, more_types_in_union_213813) = may_be_none(_cachedRenderer_213810, None_213811)

        if may_be_213812:

            if more_types_in_union_213813:
                # Runtime conditional SSA (line 2423)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 2424):
            
            # Assigning a Str to a Name (line 2424):
            unicode_213814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2424, 19), 'unicode', u'redraw_in_frame can only be used after an initial draw which caches the render')
            # Assigning a type to the variable 'msg' (line 2424)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2424, 12), 'msg', unicode_213814)
            
            # Call to AttributeError(...): (line 2426)
            # Processing the call arguments (line 2426)
            # Getting the type of 'msg' (line 2426)
            msg_213816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2426, 33), 'msg', False)
            # Processing the call keyword arguments (line 2426)
            kwargs_213817 = {}
            # Getting the type of 'AttributeError' (line 2426)
            AttributeError_213815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2426, 18), 'AttributeError', False)
            # Calling AttributeError(args, kwargs) (line 2426)
            AttributeError_call_result_213818 = invoke(stypy.reporting.localization.Localization(__file__, 2426, 18), AttributeError_213815, *[msg_213816], **kwargs_213817)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2426, 12), AttributeError_call_result_213818, 'raise parameter', BaseException)

            if more_types_in_union_213813:
                # SSA join for if statement (line 2423)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to draw(...): (line 2427)
        # Processing the call arguments (line 2427)
        # Getting the type of 'self' (line 2427)
        self_213821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2427, 18), 'self', False)
        # Obtaining the member '_cachedRenderer' of a type (line 2427)
        _cachedRenderer_213822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2427, 18), self_213821, '_cachedRenderer')
        # Processing the call keyword arguments (line 2427)
        # Getting the type of 'True' (line 2427)
        True_213823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2427, 48), 'True', False)
        keyword_213824 = True_213823
        kwargs_213825 = {'inframe': keyword_213824}
        # Getting the type of 'self' (line 2427)
        self_213819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2427, 8), 'self', False)
        # Obtaining the member 'draw' of a type (line 2427)
        draw_213820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2427, 8), self_213819, 'draw')
        # Calling draw(args, kwargs) (line 2427)
        draw_call_result_213826 = invoke(stypy.reporting.localization.Localization(__file__, 2427, 8), draw_213820, *[_cachedRenderer_213822], **kwargs_213825)
        
        
        # ################# End of 'redraw_in_frame(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'redraw_in_frame' in the type store
        # Getting the type of 'stypy_return_type' (line 2417)
        stypy_return_type_213827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_213827)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'redraw_in_frame'
        return stypy_return_type_213827


    @norecursion
    def get_renderer_cache(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_renderer_cache'
        module_type_store = module_type_store.open_function_context('get_renderer_cache', 2429, 4, False)
        # Assigning a type to the variable 'self' (line 2430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2430, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_renderer_cache.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_renderer_cache.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_renderer_cache.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_renderer_cache.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_renderer_cache')
        _AxesBase.get_renderer_cache.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_renderer_cache.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_renderer_cache.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_renderer_cache.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_renderer_cache.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_renderer_cache.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_renderer_cache.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_renderer_cache', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_renderer_cache', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_renderer_cache(...)' code ##################

        # Getting the type of 'self' (line 2430)
        self_213828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 15), 'self')
        # Obtaining the member '_cachedRenderer' of a type (line 2430)
        _cachedRenderer_213829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2430, 15), self_213828, '_cachedRenderer')
        # Assigning a type to the variable 'stypy_return_type' (line 2430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2430, 8), 'stypy_return_type', _cachedRenderer_213829)
        
        # ################# End of 'get_renderer_cache(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_renderer_cache' in the type store
        # Getting the type of 'stypy_return_type' (line 2429)
        stypy_return_type_213830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2429, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_213830)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_renderer_cache'
        return stypy_return_type_213830


    @norecursion
    def get_frame_on(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_frame_on'
        module_type_store = module_type_store.open_function_context('get_frame_on', 2434, 4, False)
        # Assigning a type to the variable 'self' (line 2435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2435, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_frame_on.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_frame_on.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_frame_on.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_frame_on.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_frame_on')
        _AxesBase.get_frame_on.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_frame_on.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_frame_on.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_frame_on.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_frame_on.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_frame_on.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_frame_on.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_frame_on', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_frame_on', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_frame_on(...)' code ##################

        unicode_213831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2437, (-1)), 'unicode', u'\n        Get whether the axes rectangle patch is drawn\n        ')
        # Getting the type of 'self' (line 2438)
        self_213832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 15), 'self')
        # Obtaining the member '_frameon' of a type (line 2438)
        _frameon_213833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2438, 15), self_213832, '_frameon')
        # Assigning a type to the variable 'stypy_return_type' (line 2438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2438, 8), 'stypy_return_type', _frameon_213833)
        
        # ################# End of 'get_frame_on(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_frame_on' in the type store
        # Getting the type of 'stypy_return_type' (line 2434)
        stypy_return_type_213834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2434, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_213834)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_frame_on'
        return stypy_return_type_213834


    @norecursion
    def set_frame_on(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_frame_on'
        module_type_store = module_type_store.open_function_context('set_frame_on', 2440, 4, False)
        # Assigning a type to the variable 'self' (line 2441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2441, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_frame_on.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_frame_on.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_frame_on.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_frame_on.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_frame_on')
        _AxesBase.set_frame_on.__dict__.__setitem__('stypy_param_names_list', ['b'])
        _AxesBase.set_frame_on.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_frame_on.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_frame_on.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_frame_on.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_frame_on.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_frame_on.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_frame_on', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_frame_on', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_frame_on(...)' code ##################

        unicode_213835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2445, (-1)), 'unicode', u'\n        Set whether the axes rectangle patch is drawn\n\n        ACCEPTS: [ *True* | *False* ]\n        ')
        
        # Assigning a Name to a Attribute (line 2446):
        
        # Assigning a Name to a Attribute (line 2446):
        # Getting the type of 'b' (line 2446)
        b_213836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 24), 'b')
        # Getting the type of 'self' (line 2446)
        self_213837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 8), 'self')
        # Setting the type of the member '_frameon' of a type (line 2446)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2446, 8), self_213837, '_frameon', b_213836)
        
        # Assigning a Name to a Attribute (line 2447):
        
        # Assigning a Name to a Attribute (line 2447):
        # Getting the type of 'True' (line 2447)
        True_213838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 21), 'True')
        # Getting the type of 'self' (line 2447)
        self_213839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2447)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2447, 8), self_213839, 'stale', True_213838)
        
        # ################# End of 'set_frame_on(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_frame_on' in the type store
        # Getting the type of 'stypy_return_type' (line 2440)
        stypy_return_type_213840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_213840)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_frame_on'
        return stypy_return_type_213840


    @norecursion
    def get_axisbelow(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_axisbelow'
        module_type_store = module_type_store.open_function_context('get_axisbelow', 2449, 4, False)
        # Assigning a type to the variable 'self' (line 2450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2450, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_axisbelow.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_axisbelow.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_axisbelow.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_axisbelow.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_axisbelow')
        _AxesBase.get_axisbelow.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_axisbelow.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_axisbelow.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_axisbelow.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_axisbelow.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_axisbelow.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_axisbelow.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_axisbelow', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_axisbelow', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_axisbelow(...)' code ##################

        unicode_213841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2452, (-1)), 'unicode', u'\n        Get whether axis below is true or not\n        ')
        # Getting the type of 'self' (line 2453)
        self_213842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 15), 'self')
        # Obtaining the member '_axisbelow' of a type (line 2453)
        _axisbelow_213843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2453, 15), self_213842, '_axisbelow')
        # Assigning a type to the variable 'stypy_return_type' (line 2453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2453, 8), 'stypy_return_type', _axisbelow_213843)
        
        # ################# End of 'get_axisbelow(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_axisbelow' in the type store
        # Getting the type of 'stypy_return_type' (line 2449)
        stypy_return_type_213844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2449, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_213844)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_axisbelow'
        return stypy_return_type_213844


    @norecursion
    def set_axisbelow(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_axisbelow'
        module_type_store = module_type_store.open_function_context('set_axisbelow', 2455, 4, False)
        # Assigning a type to the variable 'self' (line 2456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2456, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_axisbelow.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_axisbelow.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_axisbelow.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_axisbelow.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_axisbelow')
        _AxesBase.set_axisbelow.__dict__.__setitem__('stypy_param_names_list', ['b'])
        _AxesBase.set_axisbelow.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_axisbelow.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_axisbelow.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_axisbelow.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_axisbelow.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_axisbelow.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_axisbelow', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_axisbelow', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_axisbelow(...)' code ##################

        unicode_213845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2461, (-1)), 'unicode', u"\n        Set whether the axis ticks and gridlines are above or below most\n        artists\n\n        ACCEPTS: [ *True* | *False* | 'line' ]\n        ")
        
        # Assigning a Call to a Attribute (line 2462):
        
        # Assigning a Call to a Attribute (line 2462):
        
        # Call to validate_axisbelow(...): (line 2462)
        # Processing the call arguments (line 2462)
        # Getting the type of 'b' (line 2462)
        b_213847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 45), 'b', False)
        # Processing the call keyword arguments (line 2462)
        kwargs_213848 = {}
        # Getting the type of 'validate_axisbelow' (line 2462)
        validate_axisbelow_213846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 26), 'validate_axisbelow', False)
        # Calling validate_axisbelow(args, kwargs) (line 2462)
        validate_axisbelow_call_result_213849 = invoke(stypy.reporting.localization.Localization(__file__, 2462, 26), validate_axisbelow_213846, *[b_213847], **kwargs_213848)
        
        # Getting the type of 'self' (line 2462)
        self_213850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 8), 'self')
        # Setting the type of the member '_axisbelow' of a type (line 2462)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2462, 8), self_213850, '_axisbelow', validate_axisbelow_call_result_213849)
        
        # Assigning a Name to a Attribute (line 2463):
        
        # Assigning a Name to a Attribute (line 2463):
        # Getting the type of 'True' (line 2463)
        True_213851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 21), 'True')
        # Getting the type of 'self' (line 2463)
        self_213852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2463)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2463, 8), self_213852, 'stale', True_213851)
        
        # ################# End of 'set_axisbelow(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_axisbelow' in the type store
        # Getting the type of 'stypy_return_type' (line 2455)
        stypy_return_type_213853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_213853)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_axisbelow'
        return stypy_return_type_213853


    @norecursion
    def grid(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2466)
        None_213854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 21), 'None')
        unicode_213855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2466, 33), 'unicode', u'major')
        unicode_213856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2466, 47), 'unicode', u'both')
        defaults = [None_213854, unicode_213855, unicode_213856]
        # Create a new context for function 'grid'
        module_type_store = module_type_store.open_function_context('grid', 2465, 4, False)
        # Assigning a type to the variable 'self' (line 2466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2466, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.grid.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.grid.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.grid.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.grid.__dict__.__setitem__('stypy_function_name', '_AxesBase.grid')
        _AxesBase.grid.__dict__.__setitem__('stypy_param_names_list', ['b', 'which', 'axis'])
        _AxesBase.grid.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.grid.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _AxesBase.grid.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.grid.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.grid.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.grid.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.grid', ['b', 'which', 'axis'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'grid', localization, ['b', 'which', 'axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'grid(...)' code ##################

        unicode_213857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2491, (-1)), 'unicode', u"\n        Turn the axes grids on or off.\n\n        Set the axes grids on or off; *b* is a boolean.  (For MATLAB\n        compatibility, *b* may also be a string, 'on' or 'off'.)\n\n        If *b* is *None* and ``len(kwargs)==0``, toggle the grid state.  If\n        *kwargs* are supplied, it is assumed that you want a grid and *b*\n        is thus set to *True*.\n\n        *which* can be 'major' (default), 'minor', or 'both' to control\n        whether major tick grids, minor tick grids, or both are affected.\n\n        *axis* can be 'both' (default), 'x', or 'y' to control which\n        set of gridlines are drawn.\n\n        *kwargs* are used to set the grid line properties, e.g.,::\n\n           ax.grid(color='r', linestyle='-', linewidth=2)\n\n        Valid :class:`~matplotlib.lines.Line2D` kwargs are\n\n        %(Line2D)s\n\n        ")
        
        
        # Call to len(...): (line 2492)
        # Processing the call arguments (line 2492)
        # Getting the type of 'kwargs' (line 2492)
        kwargs_213859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 15), 'kwargs', False)
        # Processing the call keyword arguments (line 2492)
        kwargs_213860 = {}
        # Getting the type of 'len' (line 2492)
        len_213858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 11), 'len', False)
        # Calling len(args, kwargs) (line 2492)
        len_call_result_213861 = invoke(stypy.reporting.localization.Localization(__file__, 2492, 11), len_213858, *[kwargs_213859], **kwargs_213860)
        
        # Testing the type of an if condition (line 2492)
        if_condition_213862 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2492, 8), len_call_result_213861)
        # Assigning a type to the variable 'if_condition_213862' (line 2492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2492, 8), 'if_condition_213862', if_condition_213862)
        # SSA begins for if statement (line 2492)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2493):
        
        # Assigning a Name to a Name (line 2493):
        # Getting the type of 'True' (line 2493)
        True_213863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 16), 'True')
        # Assigning a type to the variable 'b' (line 2493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2493, 12), 'b', True_213863)
        # SSA branch for the else part of an if statement (line 2492)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 2494)
        # Getting the type of 'b' (line 2494)
        b_213864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 13), 'b')
        # Getting the type of 'None' (line 2494)
        None_213865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 22), 'None')
        
        (may_be_213866, more_types_in_union_213867) = may_not_be_none(b_213864, None_213865)

        if may_be_213866:

            if more_types_in_union_213867:
                # Runtime conditional SSA (line 2494)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2495):
            
            # Assigning a Call to a Name (line 2495):
            
            # Call to _string_to_bool(...): (line 2495)
            # Processing the call arguments (line 2495)
            # Getting the type of 'b' (line 2495)
            b_213869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 32), 'b', False)
            # Processing the call keyword arguments (line 2495)
            kwargs_213870 = {}
            # Getting the type of '_string_to_bool' (line 2495)
            _string_to_bool_213868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 16), '_string_to_bool', False)
            # Calling _string_to_bool(args, kwargs) (line 2495)
            _string_to_bool_call_result_213871 = invoke(stypy.reporting.localization.Localization(__file__, 2495, 16), _string_to_bool_213868, *[b_213869], **kwargs_213870)
            
            # Assigning a type to the variable 'b' (line 2495)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2495, 12), 'b', _string_to_bool_call_result_213871)

            if more_types_in_union_213867:
                # SSA join for if statement (line 2494)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 2492)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'axis' (line 2497)
        axis_213872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2497, 11), 'axis')
        unicode_213873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2497, 19), 'unicode', u'x')
        # Applying the binary operator '==' (line 2497)
        result_eq_213874 = python_operator(stypy.reporting.localization.Localization(__file__, 2497, 11), '==', axis_213872, unicode_213873)
        
        
        # Getting the type of 'axis' (line 2497)
        axis_213875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2497, 26), 'axis')
        unicode_213876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2497, 34), 'unicode', u'both')
        # Applying the binary operator '==' (line 2497)
        result_eq_213877 = python_operator(stypy.reporting.localization.Localization(__file__, 2497, 26), '==', axis_213875, unicode_213876)
        
        # Applying the binary operator 'or' (line 2497)
        result_or_keyword_213878 = python_operator(stypy.reporting.localization.Localization(__file__, 2497, 11), 'or', result_eq_213874, result_eq_213877)
        
        # Testing the type of an if condition (line 2497)
        if_condition_213879 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2497, 8), result_or_keyword_213878)
        # Assigning a type to the variable 'if_condition_213879' (line 2497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2497, 8), 'if_condition_213879', if_condition_213879)
        # SSA begins for if statement (line 2497)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to grid(...): (line 2498)
        # Processing the call arguments (line 2498)
        # Getting the type of 'b' (line 2498)
        b_213883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2498, 28), 'b', False)
        # Processing the call keyword arguments (line 2498)
        # Getting the type of 'which' (line 2498)
        which_213884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2498, 37), 'which', False)
        keyword_213885 = which_213884
        # Getting the type of 'kwargs' (line 2498)
        kwargs_213886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2498, 46), 'kwargs', False)
        kwargs_213887 = {'kwargs_213886': kwargs_213886, 'which': keyword_213885}
        # Getting the type of 'self' (line 2498)
        self_213880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2498, 12), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 2498)
        xaxis_213881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2498, 12), self_213880, 'xaxis')
        # Obtaining the member 'grid' of a type (line 2498)
        grid_213882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2498, 12), xaxis_213881, 'grid')
        # Calling grid(args, kwargs) (line 2498)
        grid_call_result_213888 = invoke(stypy.reporting.localization.Localization(__file__, 2498, 12), grid_213882, *[b_213883], **kwargs_213887)
        
        # SSA join for if statement (line 2497)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'axis' (line 2499)
        axis_213889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2499, 11), 'axis')
        unicode_213890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2499, 19), 'unicode', u'y')
        # Applying the binary operator '==' (line 2499)
        result_eq_213891 = python_operator(stypy.reporting.localization.Localization(__file__, 2499, 11), '==', axis_213889, unicode_213890)
        
        
        # Getting the type of 'axis' (line 2499)
        axis_213892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2499, 26), 'axis')
        unicode_213893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2499, 34), 'unicode', u'both')
        # Applying the binary operator '==' (line 2499)
        result_eq_213894 = python_operator(stypy.reporting.localization.Localization(__file__, 2499, 26), '==', axis_213892, unicode_213893)
        
        # Applying the binary operator 'or' (line 2499)
        result_or_keyword_213895 = python_operator(stypy.reporting.localization.Localization(__file__, 2499, 11), 'or', result_eq_213891, result_eq_213894)
        
        # Testing the type of an if condition (line 2499)
        if_condition_213896 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2499, 8), result_or_keyword_213895)
        # Assigning a type to the variable 'if_condition_213896' (line 2499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2499, 8), 'if_condition_213896', if_condition_213896)
        # SSA begins for if statement (line 2499)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to grid(...): (line 2500)
        # Processing the call arguments (line 2500)
        # Getting the type of 'b' (line 2500)
        b_213900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 28), 'b', False)
        # Processing the call keyword arguments (line 2500)
        # Getting the type of 'which' (line 2500)
        which_213901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 37), 'which', False)
        keyword_213902 = which_213901
        # Getting the type of 'kwargs' (line 2500)
        kwargs_213903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 46), 'kwargs', False)
        kwargs_213904 = {'kwargs_213903': kwargs_213903, 'which': keyword_213902}
        # Getting the type of 'self' (line 2500)
        self_213897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 12), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 2500)
        yaxis_213898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2500, 12), self_213897, 'yaxis')
        # Obtaining the member 'grid' of a type (line 2500)
        grid_213899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2500, 12), yaxis_213898, 'grid')
        # Calling grid(args, kwargs) (line 2500)
        grid_call_result_213905 = invoke(stypy.reporting.localization.Localization(__file__, 2500, 12), grid_213899, *[b_213900], **kwargs_213904)
        
        # SSA join for if statement (line 2499)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'grid(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'grid' in the type store
        # Getting the type of 'stypy_return_type' (line 2465)
        stypy_return_type_213906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_213906)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'grid'
        return stypy_return_type_213906


    @norecursion
    def ticklabel_format(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ticklabel_format'
        module_type_store = module_type_store.open_function_context('ticklabel_format', 2502, 4, False)
        # Assigning a type to the variable 'self' (line 2503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2503, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.ticklabel_format.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.ticklabel_format.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.ticklabel_format.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.ticklabel_format.__dict__.__setitem__('stypy_function_name', '_AxesBase.ticklabel_format')
        _AxesBase.ticklabel_format.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.ticklabel_format.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.ticklabel_format.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _AxesBase.ticklabel_format.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.ticklabel_format.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.ticklabel_format.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.ticklabel_format.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.ticklabel_format', [], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ticklabel_format', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ticklabel_format(...)' code ##################

        unicode_213907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2542, (-1)), 'unicode', u"\n        Change the `~matplotlib.ticker.ScalarFormatter` used by\n        default for linear axes.\n\n        Optional keyword arguments:\n\n          ==============   =========================================\n          Keyword          Description\n          ==============   =========================================\n          *style*          [ 'sci' (or 'scientific') | 'plain' ]\n                           plain turns off scientific notation\n          *scilimits*      (m, n), pair of integers; if *style*\n                           is 'sci', scientific notation will\n                           be used for numbers outside the range\n                           10`m`:sup: to 10`n`:sup:.\n                           Use (0,0) to include all numbers.\n          *useOffset*      [True | False | offset]; if True,\n                           the offset will be calculated as needed;\n                           if False, no offset will be used; if a\n                           numeric offset is specified, it will be\n                           used.\n          *axis*           [ 'x' | 'y' | 'both' ]\n          *useLocale*      If True, format the number according to\n                           the current locale.  This affects things\n                           such as the character used for the\n                           decimal separator.  If False, use\n                           C-style (English) formatting.  The\n                           default setting is controlled by the\n                           axes.formatter.use_locale rcparam.\n          *useMathText*    If True, render the offset and scientific\n                           notation in mathtext\n          ==============   =========================================\n\n        Only the major ticks are affected.\n        If the method is called when the\n        :class:`~matplotlib.ticker.ScalarFormatter` is not the\n        :class:`~matplotlib.ticker.Formatter` being used, an\n        :exc:`AttributeError` will be raised.\n\n        ")
        
        # Assigning a Call to a Name (line 2543):
        
        # Assigning a Call to a Name (line 2543):
        
        # Call to lower(...): (line 2543)
        # Processing the call keyword arguments (line 2543)
        kwargs_213915 = {}
        
        # Call to pop(...): (line 2543)
        # Processing the call arguments (line 2543)
        unicode_213910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2543, 27), 'unicode', u'style')
        unicode_213911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2543, 36), 'unicode', u'')
        # Processing the call keyword arguments (line 2543)
        kwargs_213912 = {}
        # Getting the type of 'kwargs' (line 2543)
        kwargs_213908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 16), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 2543)
        pop_213909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2543, 16), kwargs_213908, 'pop')
        # Calling pop(args, kwargs) (line 2543)
        pop_call_result_213913 = invoke(stypy.reporting.localization.Localization(__file__, 2543, 16), pop_213909, *[unicode_213910, unicode_213911], **kwargs_213912)
        
        # Obtaining the member 'lower' of a type (line 2543)
        lower_213914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2543, 16), pop_call_result_213913, 'lower')
        # Calling lower(args, kwargs) (line 2543)
        lower_call_result_213916 = invoke(stypy.reporting.localization.Localization(__file__, 2543, 16), lower_213914, *[], **kwargs_213915)
        
        # Assigning a type to the variable 'style' (line 2543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2543, 8), 'style', lower_call_result_213916)
        
        # Assigning a Call to a Name (line 2544):
        
        # Assigning a Call to a Name (line 2544):
        
        # Call to pop(...): (line 2544)
        # Processing the call arguments (line 2544)
        unicode_213919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2544, 31), 'unicode', u'scilimits')
        # Getting the type of 'None' (line 2544)
        None_213920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 44), 'None', False)
        # Processing the call keyword arguments (line 2544)
        kwargs_213921 = {}
        # Getting the type of 'kwargs' (line 2544)
        kwargs_213917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 20), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 2544)
        pop_213918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2544, 20), kwargs_213917, 'pop')
        # Calling pop(args, kwargs) (line 2544)
        pop_call_result_213922 = invoke(stypy.reporting.localization.Localization(__file__, 2544, 20), pop_213918, *[unicode_213919, None_213920], **kwargs_213921)
        
        # Assigning a type to the variable 'scilimits' (line 2544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2544, 8), 'scilimits', pop_call_result_213922)
        
        # Assigning a Call to a Name (line 2545):
        
        # Assigning a Call to a Name (line 2545):
        
        # Call to pop(...): (line 2545)
        # Processing the call arguments (line 2545)
        unicode_213925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2545, 31), 'unicode', u'useOffset')
        # Getting the type of 'None' (line 2545)
        None_213926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 44), 'None', False)
        # Processing the call keyword arguments (line 2545)
        kwargs_213927 = {}
        # Getting the type of 'kwargs' (line 2545)
        kwargs_213923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 20), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 2545)
        pop_213924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2545, 20), kwargs_213923, 'pop')
        # Calling pop(args, kwargs) (line 2545)
        pop_call_result_213928 = invoke(stypy.reporting.localization.Localization(__file__, 2545, 20), pop_213924, *[unicode_213925, None_213926], **kwargs_213927)
        
        # Assigning a type to the variable 'useOffset' (line 2545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2545, 8), 'useOffset', pop_call_result_213928)
        
        # Assigning a Call to a Name (line 2546):
        
        # Assigning a Call to a Name (line 2546):
        
        # Call to pop(...): (line 2546)
        # Processing the call arguments (line 2546)
        unicode_213931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2546, 31), 'unicode', u'useLocale')
        # Getting the type of 'None' (line 2546)
        None_213932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 44), 'None', False)
        # Processing the call keyword arguments (line 2546)
        kwargs_213933 = {}
        # Getting the type of 'kwargs' (line 2546)
        kwargs_213929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 20), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 2546)
        pop_213930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2546, 20), kwargs_213929, 'pop')
        # Calling pop(args, kwargs) (line 2546)
        pop_call_result_213934 = invoke(stypy.reporting.localization.Localization(__file__, 2546, 20), pop_213930, *[unicode_213931, None_213932], **kwargs_213933)
        
        # Assigning a type to the variable 'useLocale' (line 2546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2546, 8), 'useLocale', pop_call_result_213934)
        
        # Assigning a Call to a Name (line 2547):
        
        # Assigning a Call to a Name (line 2547):
        
        # Call to pop(...): (line 2547)
        # Processing the call arguments (line 2547)
        unicode_213937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2547, 33), 'unicode', u'useMathText')
        # Getting the type of 'None' (line 2547)
        None_213938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 48), 'None', False)
        # Processing the call keyword arguments (line 2547)
        kwargs_213939 = {}
        # Getting the type of 'kwargs' (line 2547)
        kwargs_213935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 22), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 2547)
        pop_213936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2547, 22), kwargs_213935, 'pop')
        # Calling pop(args, kwargs) (line 2547)
        pop_call_result_213940 = invoke(stypy.reporting.localization.Localization(__file__, 2547, 22), pop_213936, *[unicode_213937, None_213938], **kwargs_213939)
        
        # Assigning a type to the variable 'useMathText' (line 2547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2547, 8), 'useMathText', pop_call_result_213940)
        
        # Assigning a Call to a Name (line 2548):
        
        # Assigning a Call to a Name (line 2548):
        
        # Call to lower(...): (line 2548)
        # Processing the call keyword arguments (line 2548)
        kwargs_213948 = {}
        
        # Call to pop(...): (line 2548)
        # Processing the call arguments (line 2548)
        unicode_213943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2548, 26), 'unicode', u'axis')
        unicode_213944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2548, 34), 'unicode', u'both')
        # Processing the call keyword arguments (line 2548)
        kwargs_213945 = {}
        # Getting the type of 'kwargs' (line 2548)
        kwargs_213941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 15), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 2548)
        pop_213942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2548, 15), kwargs_213941, 'pop')
        # Calling pop(args, kwargs) (line 2548)
        pop_call_result_213946 = invoke(stypy.reporting.localization.Localization(__file__, 2548, 15), pop_213942, *[unicode_213943, unicode_213944], **kwargs_213945)
        
        # Obtaining the member 'lower' of a type (line 2548)
        lower_213947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2548, 15), pop_call_result_213946, 'lower')
        # Calling lower(args, kwargs) (line 2548)
        lower_call_result_213949 = invoke(stypy.reporting.localization.Localization(__file__, 2548, 15), lower_213947, *[], **kwargs_213948)
        
        # Assigning a type to the variable 'axis' (line 2548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2548, 8), 'axis', lower_call_result_213949)
        
        # Type idiom detected: calculating its left and rigth part (line 2549)
        # Getting the type of 'scilimits' (line 2549)
        scilimits_213950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2549, 8), 'scilimits')
        # Getting the type of 'None' (line 2549)
        None_213951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2549, 28), 'None')
        
        (may_be_213952, more_types_in_union_213953) = may_not_be_none(scilimits_213950, None_213951)

        if may_be_213952:

            if more_types_in_union_213953:
                # Runtime conditional SSA (line 2549)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # SSA begins for try-except statement (line 2550)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Name to a Tuple (line 2551):
            
            # Assigning a Subscript to a Name (line 2551):
            
            # Obtaining the type of the subscript
            int_213954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2551, 16), 'int')
            # Getting the type of 'scilimits' (line 2551)
            scilimits_213955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 23), 'scilimits')
            # Obtaining the member '__getitem__' of a type (line 2551)
            getitem___213956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2551, 16), scilimits_213955, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2551)
            subscript_call_result_213957 = invoke(stypy.reporting.localization.Localization(__file__, 2551, 16), getitem___213956, int_213954)
            
            # Assigning a type to the variable 'tuple_var_assignment_207798' (line 2551)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2551, 16), 'tuple_var_assignment_207798', subscript_call_result_213957)
            
            # Assigning a Subscript to a Name (line 2551):
            
            # Obtaining the type of the subscript
            int_213958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2551, 16), 'int')
            # Getting the type of 'scilimits' (line 2551)
            scilimits_213959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 23), 'scilimits')
            # Obtaining the member '__getitem__' of a type (line 2551)
            getitem___213960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2551, 16), scilimits_213959, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2551)
            subscript_call_result_213961 = invoke(stypy.reporting.localization.Localization(__file__, 2551, 16), getitem___213960, int_213958)
            
            # Assigning a type to the variable 'tuple_var_assignment_207799' (line 2551)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2551, 16), 'tuple_var_assignment_207799', subscript_call_result_213961)
            
            # Assigning a Name to a Name (line 2551):
            # Getting the type of 'tuple_var_assignment_207798' (line 2551)
            tuple_var_assignment_207798_213962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 16), 'tuple_var_assignment_207798')
            # Assigning a type to the variable 'm' (line 2551)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2551, 16), 'm', tuple_var_assignment_207798_213962)
            
            # Assigning a Name to a Name (line 2551):
            # Getting the type of 'tuple_var_assignment_207799' (line 2551)
            tuple_var_assignment_207799_213963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 16), 'tuple_var_assignment_207799')
            # Assigning a type to the variable 'n' (line 2551)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2551, 19), 'n', tuple_var_assignment_207799_213963)
            # Getting the type of 'm' (line 2552)
            m_213964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 16), 'm')
            # Getting the type of 'n' (line 2552)
            n_213965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 20), 'n')
            # Applying the binary operator '+' (line 2552)
            result_add_213966 = python_operator(stypy.reporting.localization.Localization(__file__, 2552, 16), '+', m_213964, n_213965)
            
            int_213967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2552, 24), 'int')
            # Applying the binary operator '+' (line 2552)
            result_add_213968 = python_operator(stypy.reporting.localization.Localization(__file__, 2552, 22), '+', result_add_213966, int_213967)
            
            # SSA branch for the except part of a try statement (line 2550)
            # SSA branch for the except 'Tuple' branch of a try statement (line 2550)
            module_type_store.open_ssa_branch('except')
            
            # Call to ValueError(...): (line 2554)
            # Processing the call arguments (line 2554)
            unicode_213970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2554, 33), 'unicode', u'scilimits must be a sequence of 2 integers')
            # Processing the call keyword arguments (line 2554)
            kwargs_213971 = {}
            # Getting the type of 'ValueError' (line 2554)
            ValueError_213969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 2554)
            ValueError_call_result_213972 = invoke(stypy.reporting.localization.Localization(__file__, 2554, 22), ValueError_213969, *[unicode_213970], **kwargs_213971)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2554, 16), ValueError_call_result_213972, 'raise parameter', BaseException)
            # SSA join for try-except statement (line 2550)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_213953:
                # SSA join for if statement (line 2549)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Obtaining the type of the subscript
        int_213973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2555, 18), 'int')
        slice_213974 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2555, 11), None, int_213973, None)
        # Getting the type of 'style' (line 2555)
        style_213975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 11), 'style')
        # Obtaining the member '__getitem__' of a type (line 2555)
        getitem___213976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2555, 11), style_213975, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2555)
        subscript_call_result_213977 = invoke(stypy.reporting.localization.Localization(__file__, 2555, 11), getitem___213976, slice_213974)
        
        unicode_213978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2555, 24), 'unicode', u'sci')
        # Applying the binary operator '==' (line 2555)
        result_eq_213979 = python_operator(stypy.reporting.localization.Localization(__file__, 2555, 11), '==', subscript_call_result_213977, unicode_213978)
        
        # Testing the type of an if condition (line 2555)
        if_condition_213980 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2555, 8), result_eq_213979)
        # Assigning a type to the variable 'if_condition_213980' (line 2555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2555, 8), 'if_condition_213980', if_condition_213980)
        # SSA begins for if statement (line 2555)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2556):
        
        # Assigning a Name to a Name (line 2556):
        # Getting the type of 'True' (line 2556)
        True_213981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 17), 'True')
        # Assigning a type to the variable 'sb' (line 2556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2556, 12), 'sb', True_213981)
        # SSA branch for the else part of an if statement (line 2555)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'style' (line 2557)
        style_213982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 13), 'style')
        unicode_213983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2557, 22), 'unicode', u'plain')
        # Applying the binary operator '==' (line 2557)
        result_eq_213984 = python_operator(stypy.reporting.localization.Localization(__file__, 2557, 13), '==', style_213982, unicode_213983)
        
        # Testing the type of an if condition (line 2557)
        if_condition_213985 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2557, 13), result_eq_213984)
        # Assigning a type to the variable 'if_condition_213985' (line 2557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2557, 13), 'if_condition_213985', if_condition_213985)
        # SSA begins for if statement (line 2557)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2558):
        
        # Assigning a Name to a Name (line 2558):
        # Getting the type of 'False' (line 2558)
        False_213986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 17), 'False')
        # Assigning a type to the variable 'sb' (line 2558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2558, 12), 'sb', False_213986)
        # SSA branch for the else part of an if statement (line 2557)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'style' (line 2559)
        style_213987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 13), 'style')
        unicode_213988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2559, 22), 'unicode', u'comma')
        # Applying the binary operator '==' (line 2559)
        result_eq_213989 = python_operator(stypy.reporting.localization.Localization(__file__, 2559, 13), '==', style_213987, unicode_213988)
        
        # Testing the type of an if condition (line 2559)
        if_condition_213990 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2559, 13), result_eq_213989)
        # Assigning a type to the variable 'if_condition_213990' (line 2559)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2559, 13), 'if_condition_213990', if_condition_213990)
        # SSA begins for if statement (line 2559)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to NotImplementedError(...): (line 2560)
        # Processing the call arguments (line 2560)
        unicode_213992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2560, 38), 'unicode', u'comma style remains to be added')
        # Processing the call keyword arguments (line 2560)
        kwargs_213993 = {}
        # Getting the type of 'NotImplementedError' (line 2560)
        NotImplementedError_213991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 18), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 2560)
        NotImplementedError_call_result_213994 = invoke(stypy.reporting.localization.Localization(__file__, 2560, 18), NotImplementedError_213991, *[unicode_213992], **kwargs_213993)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2560, 12), NotImplementedError_call_result_213994, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 2559)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'style' (line 2561)
        style_213995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 13), 'style')
        unicode_213996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2561, 22), 'unicode', u'')
        # Applying the binary operator '==' (line 2561)
        result_eq_213997 = python_operator(stypy.reporting.localization.Localization(__file__, 2561, 13), '==', style_213995, unicode_213996)
        
        # Testing the type of an if condition (line 2561)
        if_condition_213998 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2561, 13), result_eq_213997)
        # Assigning a type to the variable 'if_condition_213998' (line 2561)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2561, 13), 'if_condition_213998', if_condition_213998)
        # SSA begins for if statement (line 2561)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2562):
        
        # Assigning a Name to a Name (line 2562):
        # Getting the type of 'None' (line 2562)
        None_213999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 17), 'None')
        # Assigning a type to the variable 'sb' (line 2562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2562, 12), 'sb', None_213999)
        # SSA branch for the else part of an if statement (line 2561)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 2564)
        # Processing the call arguments (line 2564)
        unicode_214001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 29), 'unicode', u'%s is not a valid style value')
        # Processing the call keyword arguments (line 2564)
        kwargs_214002 = {}
        # Getting the type of 'ValueError' (line 2564)
        ValueError_214000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2564)
        ValueError_call_result_214003 = invoke(stypy.reporting.localization.Localization(__file__, 2564, 18), ValueError_214000, *[unicode_214001], **kwargs_214002)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2564, 12), ValueError_call_result_214003, 'raise parameter', BaseException)
        # SSA join for if statement (line 2561)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2559)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2557)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2555)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 2565)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Type idiom detected: calculating its left and rigth part (line 2566)
        # Getting the type of 'sb' (line 2566)
        sb_214004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2566, 12), 'sb')
        # Getting the type of 'None' (line 2566)
        None_214005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2566, 25), 'None')
        
        (may_be_214006, more_types_in_union_214007) = may_not_be_none(sb_214004, None_214005)

        if may_be_214006:

            if more_types_in_union_214007:
                # Runtime conditional SSA (line 2566)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'axis' (line 2567)
            axis_214008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2567, 19), 'axis')
            unicode_214009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2567, 27), 'unicode', u'both')
            # Applying the binary operator '==' (line 2567)
            result_eq_214010 = python_operator(stypy.reporting.localization.Localization(__file__, 2567, 19), '==', axis_214008, unicode_214009)
            
            
            # Getting the type of 'axis' (line 2567)
            axis_214011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2567, 37), 'axis')
            unicode_214012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2567, 45), 'unicode', u'x')
            # Applying the binary operator '==' (line 2567)
            result_eq_214013 = python_operator(stypy.reporting.localization.Localization(__file__, 2567, 37), '==', axis_214011, unicode_214012)
            
            # Applying the binary operator 'or' (line 2567)
            result_or_keyword_214014 = python_operator(stypy.reporting.localization.Localization(__file__, 2567, 19), 'or', result_eq_214010, result_eq_214013)
            
            # Testing the type of an if condition (line 2567)
            if_condition_214015 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2567, 16), result_or_keyword_214014)
            # Assigning a type to the variable 'if_condition_214015' (line 2567)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2567, 16), 'if_condition_214015', if_condition_214015)
            # SSA begins for if statement (line 2567)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to set_scientific(...): (line 2568)
            # Processing the call arguments (line 2568)
            # Getting the type of 'sb' (line 2568)
            sb_214021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2568, 62), 'sb', False)
            # Processing the call keyword arguments (line 2568)
            kwargs_214022 = {}
            # Getting the type of 'self' (line 2568)
            self_214016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2568, 20), 'self', False)
            # Obtaining the member 'xaxis' of a type (line 2568)
            xaxis_214017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2568, 20), self_214016, 'xaxis')
            # Obtaining the member 'major' of a type (line 2568)
            major_214018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2568, 20), xaxis_214017, 'major')
            # Obtaining the member 'formatter' of a type (line 2568)
            formatter_214019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2568, 20), major_214018, 'formatter')
            # Obtaining the member 'set_scientific' of a type (line 2568)
            set_scientific_214020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2568, 20), formatter_214019, 'set_scientific')
            # Calling set_scientific(args, kwargs) (line 2568)
            set_scientific_call_result_214023 = invoke(stypy.reporting.localization.Localization(__file__, 2568, 20), set_scientific_214020, *[sb_214021], **kwargs_214022)
            
            # SSA join for if statement (line 2567)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'axis' (line 2569)
            axis_214024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2569, 19), 'axis')
            unicode_214025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2569, 27), 'unicode', u'both')
            # Applying the binary operator '==' (line 2569)
            result_eq_214026 = python_operator(stypy.reporting.localization.Localization(__file__, 2569, 19), '==', axis_214024, unicode_214025)
            
            
            # Getting the type of 'axis' (line 2569)
            axis_214027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2569, 37), 'axis')
            unicode_214028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2569, 45), 'unicode', u'y')
            # Applying the binary operator '==' (line 2569)
            result_eq_214029 = python_operator(stypy.reporting.localization.Localization(__file__, 2569, 37), '==', axis_214027, unicode_214028)
            
            # Applying the binary operator 'or' (line 2569)
            result_or_keyword_214030 = python_operator(stypy.reporting.localization.Localization(__file__, 2569, 19), 'or', result_eq_214026, result_eq_214029)
            
            # Testing the type of an if condition (line 2569)
            if_condition_214031 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2569, 16), result_or_keyword_214030)
            # Assigning a type to the variable 'if_condition_214031' (line 2569)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2569, 16), 'if_condition_214031', if_condition_214031)
            # SSA begins for if statement (line 2569)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to set_scientific(...): (line 2570)
            # Processing the call arguments (line 2570)
            # Getting the type of 'sb' (line 2570)
            sb_214037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 62), 'sb', False)
            # Processing the call keyword arguments (line 2570)
            kwargs_214038 = {}
            # Getting the type of 'self' (line 2570)
            self_214032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 20), 'self', False)
            # Obtaining the member 'yaxis' of a type (line 2570)
            yaxis_214033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2570, 20), self_214032, 'yaxis')
            # Obtaining the member 'major' of a type (line 2570)
            major_214034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2570, 20), yaxis_214033, 'major')
            # Obtaining the member 'formatter' of a type (line 2570)
            formatter_214035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2570, 20), major_214034, 'formatter')
            # Obtaining the member 'set_scientific' of a type (line 2570)
            set_scientific_214036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2570, 20), formatter_214035, 'set_scientific')
            # Calling set_scientific(args, kwargs) (line 2570)
            set_scientific_call_result_214039 = invoke(stypy.reporting.localization.Localization(__file__, 2570, 20), set_scientific_214036, *[sb_214037], **kwargs_214038)
            
            # SSA join for if statement (line 2569)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_214007:
                # SSA join for if statement (line 2566)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2571)
        # Getting the type of 'scilimits' (line 2571)
        scilimits_214040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 12), 'scilimits')
        # Getting the type of 'None' (line 2571)
        None_214041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 32), 'None')
        
        (may_be_214042, more_types_in_union_214043) = may_not_be_none(scilimits_214040, None_214041)

        if may_be_214042:

            if more_types_in_union_214043:
                # Runtime conditional SSA (line 2571)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'axis' (line 2572)
            axis_214044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 19), 'axis')
            unicode_214045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 27), 'unicode', u'both')
            # Applying the binary operator '==' (line 2572)
            result_eq_214046 = python_operator(stypy.reporting.localization.Localization(__file__, 2572, 19), '==', axis_214044, unicode_214045)
            
            
            # Getting the type of 'axis' (line 2572)
            axis_214047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 37), 'axis')
            unicode_214048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 45), 'unicode', u'x')
            # Applying the binary operator '==' (line 2572)
            result_eq_214049 = python_operator(stypy.reporting.localization.Localization(__file__, 2572, 37), '==', axis_214047, unicode_214048)
            
            # Applying the binary operator 'or' (line 2572)
            result_or_keyword_214050 = python_operator(stypy.reporting.localization.Localization(__file__, 2572, 19), 'or', result_eq_214046, result_eq_214049)
            
            # Testing the type of an if condition (line 2572)
            if_condition_214051 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2572, 16), result_or_keyword_214050)
            # Assigning a type to the variable 'if_condition_214051' (line 2572)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2572, 16), 'if_condition_214051', if_condition_214051)
            # SSA begins for if statement (line 2572)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to set_powerlimits(...): (line 2573)
            # Processing the call arguments (line 2573)
            # Getting the type of 'scilimits' (line 2573)
            scilimits_214057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 63), 'scilimits', False)
            # Processing the call keyword arguments (line 2573)
            kwargs_214058 = {}
            # Getting the type of 'self' (line 2573)
            self_214052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 20), 'self', False)
            # Obtaining the member 'xaxis' of a type (line 2573)
            xaxis_214053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2573, 20), self_214052, 'xaxis')
            # Obtaining the member 'major' of a type (line 2573)
            major_214054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2573, 20), xaxis_214053, 'major')
            # Obtaining the member 'formatter' of a type (line 2573)
            formatter_214055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2573, 20), major_214054, 'formatter')
            # Obtaining the member 'set_powerlimits' of a type (line 2573)
            set_powerlimits_214056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2573, 20), formatter_214055, 'set_powerlimits')
            # Calling set_powerlimits(args, kwargs) (line 2573)
            set_powerlimits_call_result_214059 = invoke(stypy.reporting.localization.Localization(__file__, 2573, 20), set_powerlimits_214056, *[scilimits_214057], **kwargs_214058)
            
            # SSA join for if statement (line 2572)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'axis' (line 2574)
            axis_214060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 19), 'axis')
            unicode_214061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2574, 27), 'unicode', u'both')
            # Applying the binary operator '==' (line 2574)
            result_eq_214062 = python_operator(stypy.reporting.localization.Localization(__file__, 2574, 19), '==', axis_214060, unicode_214061)
            
            
            # Getting the type of 'axis' (line 2574)
            axis_214063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 37), 'axis')
            unicode_214064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2574, 45), 'unicode', u'y')
            # Applying the binary operator '==' (line 2574)
            result_eq_214065 = python_operator(stypy.reporting.localization.Localization(__file__, 2574, 37), '==', axis_214063, unicode_214064)
            
            # Applying the binary operator 'or' (line 2574)
            result_or_keyword_214066 = python_operator(stypy.reporting.localization.Localization(__file__, 2574, 19), 'or', result_eq_214062, result_eq_214065)
            
            # Testing the type of an if condition (line 2574)
            if_condition_214067 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2574, 16), result_or_keyword_214066)
            # Assigning a type to the variable 'if_condition_214067' (line 2574)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2574, 16), 'if_condition_214067', if_condition_214067)
            # SSA begins for if statement (line 2574)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to set_powerlimits(...): (line 2575)
            # Processing the call arguments (line 2575)
            # Getting the type of 'scilimits' (line 2575)
            scilimits_214073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2575, 63), 'scilimits', False)
            # Processing the call keyword arguments (line 2575)
            kwargs_214074 = {}
            # Getting the type of 'self' (line 2575)
            self_214068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2575, 20), 'self', False)
            # Obtaining the member 'yaxis' of a type (line 2575)
            yaxis_214069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2575, 20), self_214068, 'yaxis')
            # Obtaining the member 'major' of a type (line 2575)
            major_214070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2575, 20), yaxis_214069, 'major')
            # Obtaining the member 'formatter' of a type (line 2575)
            formatter_214071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2575, 20), major_214070, 'formatter')
            # Obtaining the member 'set_powerlimits' of a type (line 2575)
            set_powerlimits_214072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2575, 20), formatter_214071, 'set_powerlimits')
            # Calling set_powerlimits(args, kwargs) (line 2575)
            set_powerlimits_call_result_214075 = invoke(stypy.reporting.localization.Localization(__file__, 2575, 20), set_powerlimits_214072, *[scilimits_214073], **kwargs_214074)
            
            # SSA join for if statement (line 2574)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_214043:
                # SSA join for if statement (line 2571)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2576)
        # Getting the type of 'useOffset' (line 2576)
        useOffset_214076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 12), 'useOffset')
        # Getting the type of 'None' (line 2576)
        None_214077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 32), 'None')
        
        (may_be_214078, more_types_in_union_214079) = may_not_be_none(useOffset_214076, None_214077)

        if may_be_214078:

            if more_types_in_union_214079:
                # Runtime conditional SSA (line 2576)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'axis' (line 2577)
            axis_214080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2577, 19), 'axis')
            unicode_214081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2577, 27), 'unicode', u'both')
            # Applying the binary operator '==' (line 2577)
            result_eq_214082 = python_operator(stypy.reporting.localization.Localization(__file__, 2577, 19), '==', axis_214080, unicode_214081)
            
            
            # Getting the type of 'axis' (line 2577)
            axis_214083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2577, 37), 'axis')
            unicode_214084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2577, 45), 'unicode', u'x')
            # Applying the binary operator '==' (line 2577)
            result_eq_214085 = python_operator(stypy.reporting.localization.Localization(__file__, 2577, 37), '==', axis_214083, unicode_214084)
            
            # Applying the binary operator 'or' (line 2577)
            result_or_keyword_214086 = python_operator(stypy.reporting.localization.Localization(__file__, 2577, 19), 'or', result_eq_214082, result_eq_214085)
            
            # Testing the type of an if condition (line 2577)
            if_condition_214087 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2577, 16), result_or_keyword_214086)
            # Assigning a type to the variable 'if_condition_214087' (line 2577)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2577, 16), 'if_condition_214087', if_condition_214087)
            # SSA begins for if statement (line 2577)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to set_useOffset(...): (line 2578)
            # Processing the call arguments (line 2578)
            # Getting the type of 'useOffset' (line 2578)
            useOffset_214093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 61), 'useOffset', False)
            # Processing the call keyword arguments (line 2578)
            kwargs_214094 = {}
            # Getting the type of 'self' (line 2578)
            self_214088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 20), 'self', False)
            # Obtaining the member 'xaxis' of a type (line 2578)
            xaxis_214089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 20), self_214088, 'xaxis')
            # Obtaining the member 'major' of a type (line 2578)
            major_214090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 20), xaxis_214089, 'major')
            # Obtaining the member 'formatter' of a type (line 2578)
            formatter_214091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 20), major_214090, 'formatter')
            # Obtaining the member 'set_useOffset' of a type (line 2578)
            set_useOffset_214092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 20), formatter_214091, 'set_useOffset')
            # Calling set_useOffset(args, kwargs) (line 2578)
            set_useOffset_call_result_214095 = invoke(stypy.reporting.localization.Localization(__file__, 2578, 20), set_useOffset_214092, *[useOffset_214093], **kwargs_214094)
            
            # SSA join for if statement (line 2577)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'axis' (line 2579)
            axis_214096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 19), 'axis')
            unicode_214097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2579, 27), 'unicode', u'both')
            # Applying the binary operator '==' (line 2579)
            result_eq_214098 = python_operator(stypy.reporting.localization.Localization(__file__, 2579, 19), '==', axis_214096, unicode_214097)
            
            
            # Getting the type of 'axis' (line 2579)
            axis_214099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 37), 'axis')
            unicode_214100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2579, 45), 'unicode', u'y')
            # Applying the binary operator '==' (line 2579)
            result_eq_214101 = python_operator(stypy.reporting.localization.Localization(__file__, 2579, 37), '==', axis_214099, unicode_214100)
            
            # Applying the binary operator 'or' (line 2579)
            result_or_keyword_214102 = python_operator(stypy.reporting.localization.Localization(__file__, 2579, 19), 'or', result_eq_214098, result_eq_214101)
            
            # Testing the type of an if condition (line 2579)
            if_condition_214103 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2579, 16), result_or_keyword_214102)
            # Assigning a type to the variable 'if_condition_214103' (line 2579)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2579, 16), 'if_condition_214103', if_condition_214103)
            # SSA begins for if statement (line 2579)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to set_useOffset(...): (line 2580)
            # Processing the call arguments (line 2580)
            # Getting the type of 'useOffset' (line 2580)
            useOffset_214109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 61), 'useOffset', False)
            # Processing the call keyword arguments (line 2580)
            kwargs_214110 = {}
            # Getting the type of 'self' (line 2580)
            self_214104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 20), 'self', False)
            # Obtaining the member 'yaxis' of a type (line 2580)
            yaxis_214105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2580, 20), self_214104, 'yaxis')
            # Obtaining the member 'major' of a type (line 2580)
            major_214106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2580, 20), yaxis_214105, 'major')
            # Obtaining the member 'formatter' of a type (line 2580)
            formatter_214107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2580, 20), major_214106, 'formatter')
            # Obtaining the member 'set_useOffset' of a type (line 2580)
            set_useOffset_214108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2580, 20), formatter_214107, 'set_useOffset')
            # Calling set_useOffset(args, kwargs) (line 2580)
            set_useOffset_call_result_214111 = invoke(stypy.reporting.localization.Localization(__file__, 2580, 20), set_useOffset_214108, *[useOffset_214109], **kwargs_214110)
            
            # SSA join for if statement (line 2579)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_214079:
                # SSA join for if statement (line 2576)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2581)
        # Getting the type of 'useLocale' (line 2581)
        useLocale_214112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2581, 12), 'useLocale')
        # Getting the type of 'None' (line 2581)
        None_214113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2581, 32), 'None')
        
        (may_be_214114, more_types_in_union_214115) = may_not_be_none(useLocale_214112, None_214113)

        if may_be_214114:

            if more_types_in_union_214115:
                # Runtime conditional SSA (line 2581)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'axis' (line 2582)
            axis_214116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 19), 'axis')
            unicode_214117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2582, 27), 'unicode', u'both')
            # Applying the binary operator '==' (line 2582)
            result_eq_214118 = python_operator(stypy.reporting.localization.Localization(__file__, 2582, 19), '==', axis_214116, unicode_214117)
            
            
            # Getting the type of 'axis' (line 2582)
            axis_214119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 37), 'axis')
            unicode_214120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2582, 45), 'unicode', u'x')
            # Applying the binary operator '==' (line 2582)
            result_eq_214121 = python_operator(stypy.reporting.localization.Localization(__file__, 2582, 37), '==', axis_214119, unicode_214120)
            
            # Applying the binary operator 'or' (line 2582)
            result_or_keyword_214122 = python_operator(stypy.reporting.localization.Localization(__file__, 2582, 19), 'or', result_eq_214118, result_eq_214121)
            
            # Testing the type of an if condition (line 2582)
            if_condition_214123 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2582, 16), result_or_keyword_214122)
            # Assigning a type to the variable 'if_condition_214123' (line 2582)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2582, 16), 'if_condition_214123', if_condition_214123)
            # SSA begins for if statement (line 2582)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to set_useLocale(...): (line 2583)
            # Processing the call arguments (line 2583)
            # Getting the type of 'useLocale' (line 2583)
            useLocale_214129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2583, 61), 'useLocale', False)
            # Processing the call keyword arguments (line 2583)
            kwargs_214130 = {}
            # Getting the type of 'self' (line 2583)
            self_214124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2583, 20), 'self', False)
            # Obtaining the member 'xaxis' of a type (line 2583)
            xaxis_214125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2583, 20), self_214124, 'xaxis')
            # Obtaining the member 'major' of a type (line 2583)
            major_214126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2583, 20), xaxis_214125, 'major')
            # Obtaining the member 'formatter' of a type (line 2583)
            formatter_214127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2583, 20), major_214126, 'formatter')
            # Obtaining the member 'set_useLocale' of a type (line 2583)
            set_useLocale_214128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2583, 20), formatter_214127, 'set_useLocale')
            # Calling set_useLocale(args, kwargs) (line 2583)
            set_useLocale_call_result_214131 = invoke(stypy.reporting.localization.Localization(__file__, 2583, 20), set_useLocale_214128, *[useLocale_214129], **kwargs_214130)
            
            # SSA join for if statement (line 2582)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'axis' (line 2584)
            axis_214132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 19), 'axis')
            unicode_214133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2584, 27), 'unicode', u'both')
            # Applying the binary operator '==' (line 2584)
            result_eq_214134 = python_operator(stypy.reporting.localization.Localization(__file__, 2584, 19), '==', axis_214132, unicode_214133)
            
            
            # Getting the type of 'axis' (line 2584)
            axis_214135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 37), 'axis')
            unicode_214136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2584, 45), 'unicode', u'y')
            # Applying the binary operator '==' (line 2584)
            result_eq_214137 = python_operator(stypy.reporting.localization.Localization(__file__, 2584, 37), '==', axis_214135, unicode_214136)
            
            # Applying the binary operator 'or' (line 2584)
            result_or_keyword_214138 = python_operator(stypy.reporting.localization.Localization(__file__, 2584, 19), 'or', result_eq_214134, result_eq_214137)
            
            # Testing the type of an if condition (line 2584)
            if_condition_214139 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2584, 16), result_or_keyword_214138)
            # Assigning a type to the variable 'if_condition_214139' (line 2584)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2584, 16), 'if_condition_214139', if_condition_214139)
            # SSA begins for if statement (line 2584)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to set_useLocale(...): (line 2585)
            # Processing the call arguments (line 2585)
            # Getting the type of 'useLocale' (line 2585)
            useLocale_214145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2585, 61), 'useLocale', False)
            # Processing the call keyword arguments (line 2585)
            kwargs_214146 = {}
            # Getting the type of 'self' (line 2585)
            self_214140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2585, 20), 'self', False)
            # Obtaining the member 'yaxis' of a type (line 2585)
            yaxis_214141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2585, 20), self_214140, 'yaxis')
            # Obtaining the member 'major' of a type (line 2585)
            major_214142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2585, 20), yaxis_214141, 'major')
            # Obtaining the member 'formatter' of a type (line 2585)
            formatter_214143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2585, 20), major_214142, 'formatter')
            # Obtaining the member 'set_useLocale' of a type (line 2585)
            set_useLocale_214144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2585, 20), formatter_214143, 'set_useLocale')
            # Calling set_useLocale(args, kwargs) (line 2585)
            set_useLocale_call_result_214147 = invoke(stypy.reporting.localization.Localization(__file__, 2585, 20), set_useLocale_214144, *[useLocale_214145], **kwargs_214146)
            
            # SSA join for if statement (line 2584)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_214115:
                # SSA join for if statement (line 2581)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2586)
        # Getting the type of 'useMathText' (line 2586)
        useMathText_214148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 12), 'useMathText')
        # Getting the type of 'None' (line 2586)
        None_214149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 34), 'None')
        
        (may_be_214150, more_types_in_union_214151) = may_not_be_none(useMathText_214148, None_214149)

        if may_be_214150:

            if more_types_in_union_214151:
                # Runtime conditional SSA (line 2586)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'axis' (line 2587)
            axis_214152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 19), 'axis')
            unicode_214153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2587, 27), 'unicode', u'both')
            # Applying the binary operator '==' (line 2587)
            result_eq_214154 = python_operator(stypy.reporting.localization.Localization(__file__, 2587, 19), '==', axis_214152, unicode_214153)
            
            
            # Getting the type of 'axis' (line 2587)
            axis_214155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 37), 'axis')
            unicode_214156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2587, 45), 'unicode', u'x')
            # Applying the binary operator '==' (line 2587)
            result_eq_214157 = python_operator(stypy.reporting.localization.Localization(__file__, 2587, 37), '==', axis_214155, unicode_214156)
            
            # Applying the binary operator 'or' (line 2587)
            result_or_keyword_214158 = python_operator(stypy.reporting.localization.Localization(__file__, 2587, 19), 'or', result_eq_214154, result_eq_214157)
            
            # Testing the type of an if condition (line 2587)
            if_condition_214159 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2587, 16), result_or_keyword_214158)
            # Assigning a type to the variable 'if_condition_214159' (line 2587)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2587, 16), 'if_condition_214159', if_condition_214159)
            # SSA begins for if statement (line 2587)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to set_useMathText(...): (line 2588)
            # Processing the call arguments (line 2588)
            # Getting the type of 'useMathText' (line 2588)
            useMathText_214165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 63), 'useMathText', False)
            # Processing the call keyword arguments (line 2588)
            kwargs_214166 = {}
            # Getting the type of 'self' (line 2588)
            self_214160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 20), 'self', False)
            # Obtaining the member 'xaxis' of a type (line 2588)
            xaxis_214161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2588, 20), self_214160, 'xaxis')
            # Obtaining the member 'major' of a type (line 2588)
            major_214162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2588, 20), xaxis_214161, 'major')
            # Obtaining the member 'formatter' of a type (line 2588)
            formatter_214163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2588, 20), major_214162, 'formatter')
            # Obtaining the member 'set_useMathText' of a type (line 2588)
            set_useMathText_214164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2588, 20), formatter_214163, 'set_useMathText')
            # Calling set_useMathText(args, kwargs) (line 2588)
            set_useMathText_call_result_214167 = invoke(stypy.reporting.localization.Localization(__file__, 2588, 20), set_useMathText_214164, *[useMathText_214165], **kwargs_214166)
            
            # SSA join for if statement (line 2587)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'axis' (line 2589)
            axis_214168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 19), 'axis')
            unicode_214169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2589, 27), 'unicode', u'both')
            # Applying the binary operator '==' (line 2589)
            result_eq_214170 = python_operator(stypy.reporting.localization.Localization(__file__, 2589, 19), '==', axis_214168, unicode_214169)
            
            
            # Getting the type of 'axis' (line 2589)
            axis_214171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 37), 'axis')
            unicode_214172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2589, 45), 'unicode', u'y')
            # Applying the binary operator '==' (line 2589)
            result_eq_214173 = python_operator(stypy.reporting.localization.Localization(__file__, 2589, 37), '==', axis_214171, unicode_214172)
            
            # Applying the binary operator 'or' (line 2589)
            result_or_keyword_214174 = python_operator(stypy.reporting.localization.Localization(__file__, 2589, 19), 'or', result_eq_214170, result_eq_214173)
            
            # Testing the type of an if condition (line 2589)
            if_condition_214175 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2589, 16), result_or_keyword_214174)
            # Assigning a type to the variable 'if_condition_214175' (line 2589)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2589, 16), 'if_condition_214175', if_condition_214175)
            # SSA begins for if statement (line 2589)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to set_useMathText(...): (line 2590)
            # Processing the call arguments (line 2590)
            # Getting the type of 'useMathText' (line 2590)
            useMathText_214181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 63), 'useMathText', False)
            # Processing the call keyword arguments (line 2590)
            kwargs_214182 = {}
            # Getting the type of 'self' (line 2590)
            self_214176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 20), 'self', False)
            # Obtaining the member 'yaxis' of a type (line 2590)
            yaxis_214177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2590, 20), self_214176, 'yaxis')
            # Obtaining the member 'major' of a type (line 2590)
            major_214178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2590, 20), yaxis_214177, 'major')
            # Obtaining the member 'formatter' of a type (line 2590)
            formatter_214179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2590, 20), major_214178, 'formatter')
            # Obtaining the member 'set_useMathText' of a type (line 2590)
            set_useMathText_214180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2590, 20), formatter_214179, 'set_useMathText')
            # Calling set_useMathText(args, kwargs) (line 2590)
            set_useMathText_call_result_214183 = invoke(stypy.reporting.localization.Localization(__file__, 2590, 20), set_useMathText_214180, *[useMathText_214181], **kwargs_214182)
            
            # SSA join for if statement (line 2589)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_214151:
                # SSA join for if statement (line 2586)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA branch for the except part of a try statement (line 2565)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 2565)
        module_type_store.open_ssa_branch('except')
        
        # Call to AttributeError(...): (line 2592)
        # Processing the call arguments (line 2592)
        unicode_214185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2593, 16), 'unicode', u'This method only works with the ScalarFormatter.')
        # Processing the call keyword arguments (line 2592)
        kwargs_214186 = {}
        # Getting the type of 'AttributeError' (line 2592)
        AttributeError_214184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 18), 'AttributeError', False)
        # Calling AttributeError(args, kwargs) (line 2592)
        AttributeError_call_result_214187 = invoke(stypy.reporting.localization.Localization(__file__, 2592, 18), AttributeError_214184, *[unicode_214185], **kwargs_214186)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2592, 12), AttributeError_call_result_214187, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 2565)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'ticklabel_format(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ticklabel_format' in the type store
        # Getting the type of 'stypy_return_type' (line 2502)
        stypy_return_type_214188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214188)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ticklabel_format'
        return stypy_return_type_214188


    @norecursion
    def locator_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_214189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2595, 34), 'unicode', u'both')
        # Getting the type of 'None' (line 2595)
        None_214190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 48), 'None')
        defaults = [unicode_214189, None_214190]
        # Create a new context for function 'locator_params'
        module_type_store = module_type_store.open_function_context('locator_params', 2595, 4, False)
        # Assigning a type to the variable 'self' (line 2596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2596, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.locator_params.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.locator_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.locator_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.locator_params.__dict__.__setitem__('stypy_function_name', '_AxesBase.locator_params')
        _AxesBase.locator_params.__dict__.__setitem__('stypy_param_names_list', ['axis', 'tight'])
        _AxesBase.locator_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.locator_params.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _AxesBase.locator_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.locator_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.locator_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.locator_params.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.locator_params', ['axis', 'tight'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'locator_params', localization, ['axis', 'tight'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'locator_params(...)' code ##################

        unicode_214191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2625, (-1)), 'unicode', u"\n        Control behavior of tick locators.\n\n        Keyword arguments:\n\n        *axis*\n            ['x' | 'y' | 'both']  Axis on which to operate;\n            default is 'both'.\n\n        *tight*\n            [True | False | None] Parameter passed to :meth:`autoscale_view`.\n            Default is None, for no change.\n\n        Remaining keyword arguments are passed to directly to the\n        :meth:`~matplotlib.ticker.MaxNLocator.set_params` method.\n\n        Typically one might want to reduce the maximum number\n        of ticks and use tight bounds when plotting small\n        subplots, for example::\n\n            ax.locator_params(tight=True, nbins=4)\n\n        Because the locator is involved in autoscaling,\n        :meth:`autoscale_view` is called automatically after\n        the parameters are changed.\n\n        This presently works only for the\n        :class:`~matplotlib.ticker.MaxNLocator` used\n        by default on linear axes, but it may be generalized.\n        ")
        
        # Assigning a Compare to a Name (line 2626):
        
        # Assigning a Compare to a Name (line 2626):
        
        # Getting the type of 'axis' (line 2626)
        axis_214192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 13), 'axis')
        
        # Obtaining an instance of the builtin type 'list' (line 2626)
        list_214193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2626, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2626)
        # Adding element type (line 2626)
        unicode_214194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2626, 22), 'unicode', u'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2626, 21), list_214193, unicode_214194)
        # Adding element type (line 2626)
        unicode_214195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2626, 27), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2626, 21), list_214193, unicode_214195)
        
        # Applying the binary operator 'in' (line 2626)
        result_contains_214196 = python_operator(stypy.reporting.localization.Localization(__file__, 2626, 13), 'in', axis_214192, list_214193)
        
        # Assigning a type to the variable '_x' (line 2626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2626, 8), '_x', result_contains_214196)
        
        # Assigning a Compare to a Name (line 2627):
        
        # Assigning a Compare to a Name (line 2627):
        
        # Getting the type of 'axis' (line 2627)
        axis_214197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2627, 13), 'axis')
        
        # Obtaining an instance of the builtin type 'list' (line 2627)
        list_214198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2627, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2627)
        # Adding element type (line 2627)
        unicode_214199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2627, 22), 'unicode', u'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2627, 21), list_214198, unicode_214199)
        # Adding element type (line 2627)
        unicode_214200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2627, 27), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2627, 21), list_214198, unicode_214200)
        
        # Applying the binary operator 'in' (line 2627)
        result_contains_214201 = python_operator(stypy.reporting.localization.Localization(__file__, 2627, 13), 'in', axis_214197, list_214198)
        
        # Assigning a type to the variable '_y' (line 2627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2627, 8), '_y', result_contains_214201)
        
        # Getting the type of '_x' (line 2628)
        _x_214202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 11), '_x')
        # Testing the type of an if condition (line 2628)
        if_condition_214203 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2628, 8), _x_214202)
        # Assigning a type to the variable 'if_condition_214203' (line 2628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2628, 8), 'if_condition_214203', if_condition_214203)
        # SSA begins for if statement (line 2628)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_params(...): (line 2629)
        # Processing the call keyword arguments (line 2629)
        # Getting the type of 'kwargs' (line 2629)
        kwargs_214210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 56), 'kwargs', False)
        kwargs_214211 = {'kwargs_214210': kwargs_214210}
        
        # Call to get_major_locator(...): (line 2629)
        # Processing the call keyword arguments (line 2629)
        kwargs_214207 = {}
        # Getting the type of 'self' (line 2629)
        self_214204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 12), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 2629)
        xaxis_214205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 12), self_214204, 'xaxis')
        # Obtaining the member 'get_major_locator' of a type (line 2629)
        get_major_locator_214206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 12), xaxis_214205, 'get_major_locator')
        # Calling get_major_locator(args, kwargs) (line 2629)
        get_major_locator_call_result_214208 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 12), get_major_locator_214206, *[], **kwargs_214207)
        
        # Obtaining the member 'set_params' of a type (line 2629)
        set_params_214209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 12), get_major_locator_call_result_214208, 'set_params')
        # Calling set_params(args, kwargs) (line 2629)
        set_params_call_result_214212 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 12), set_params_214209, *[], **kwargs_214211)
        
        # SSA join for if statement (line 2628)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of '_y' (line 2630)
        _y_214213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 11), '_y')
        # Testing the type of an if condition (line 2630)
        if_condition_214214 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2630, 8), _y_214213)
        # Assigning a type to the variable 'if_condition_214214' (line 2630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2630, 8), 'if_condition_214214', if_condition_214214)
        # SSA begins for if statement (line 2630)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_params(...): (line 2631)
        # Processing the call keyword arguments (line 2631)
        # Getting the type of 'kwargs' (line 2631)
        kwargs_214221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 56), 'kwargs', False)
        kwargs_214222 = {'kwargs_214221': kwargs_214221}
        
        # Call to get_major_locator(...): (line 2631)
        # Processing the call keyword arguments (line 2631)
        kwargs_214218 = {}
        # Getting the type of 'self' (line 2631)
        self_214215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 12), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 2631)
        yaxis_214216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2631, 12), self_214215, 'yaxis')
        # Obtaining the member 'get_major_locator' of a type (line 2631)
        get_major_locator_214217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2631, 12), yaxis_214216, 'get_major_locator')
        # Calling get_major_locator(args, kwargs) (line 2631)
        get_major_locator_call_result_214219 = invoke(stypy.reporting.localization.Localization(__file__, 2631, 12), get_major_locator_214217, *[], **kwargs_214218)
        
        # Obtaining the member 'set_params' of a type (line 2631)
        set_params_214220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2631, 12), get_major_locator_call_result_214219, 'set_params')
        # Calling set_params(args, kwargs) (line 2631)
        set_params_call_result_214223 = invoke(stypy.reporting.localization.Localization(__file__, 2631, 12), set_params_214220, *[], **kwargs_214222)
        
        # SSA join for if statement (line 2630)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to autoscale_view(...): (line 2632)
        # Processing the call keyword arguments (line 2632)
        # Getting the type of 'tight' (line 2632)
        tight_214226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 34), 'tight', False)
        keyword_214227 = tight_214226
        # Getting the type of '_x' (line 2632)
        _x_214228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 48), '_x', False)
        keyword_214229 = _x_214228
        # Getting the type of '_y' (line 2632)
        _y_214230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 59), '_y', False)
        keyword_214231 = _y_214230
        kwargs_214232 = {'tight': keyword_214227, 'scalex': keyword_214229, 'scaley': keyword_214231}
        # Getting the type of 'self' (line 2632)
        self_214224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 8), 'self', False)
        # Obtaining the member 'autoscale_view' of a type (line 2632)
        autoscale_view_214225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2632, 8), self_214224, 'autoscale_view')
        # Calling autoscale_view(args, kwargs) (line 2632)
        autoscale_view_call_result_214233 = invoke(stypy.reporting.localization.Localization(__file__, 2632, 8), autoscale_view_214225, *[], **kwargs_214232)
        
        
        # ################# End of 'locator_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'locator_params' in the type store
        # Getting the type of 'stypy_return_type' (line 2595)
        stypy_return_type_214234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214234)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'locator_params'
        return stypy_return_type_214234


    @norecursion
    def tick_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_214235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2634, 31), 'unicode', u'both')
        defaults = [unicode_214235]
        # Create a new context for function 'tick_params'
        module_type_store = module_type_store.open_function_context('tick_params', 2634, 4, False)
        # Assigning a type to the variable 'self' (line 2635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2635, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.tick_params.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.tick_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.tick_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.tick_params.__dict__.__setitem__('stypy_function_name', '_AxesBase.tick_params')
        _AxesBase.tick_params.__dict__.__setitem__('stypy_param_names_list', ['axis'])
        _AxesBase.tick_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.tick_params.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _AxesBase.tick_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.tick_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.tick_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.tick_params.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.tick_params', ['axis'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_params', localization, ['axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_params(...)' code ##################

        unicode_214236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2705, (-1)), 'unicode', u"Change the appearance of ticks and tick labels.\n\n        Parameters\n        ----------\n        axis : {'x', 'y', 'both'}, optional\n            Which axis to apply the parameters to.\n\n        Other Parameters\n        ----------------\n\n        axis : {'x', 'y', 'both'}\n            Axis on which to operate; default is 'both'.\n\n        reset : bool\n            If *True*, set all parameters to defaults\n            before processing other keyword arguments.  Default is\n            *False*.\n\n        which : {'major', 'minor', 'both'}\n            Default is 'major'; apply arguments to *which* ticks.\n\n        direction : {'in', 'out', 'inout'}\n            Puts ticks inside the axes, outside the axes, or both.\n\n        length : float\n            Tick length in points.\n\n        width : float\n            Tick width in points.\n\n        color : color\n            Tick color; accepts any mpl color spec.\n\n        pad : float\n            Distance in points between tick and label.\n\n        labelsize : float or str\n            Tick label font size in points or as a string (e.g., 'large').\n\n        labelcolor : color\n            Tick label color; mpl color spec.\n\n        colors : color\n            Changes the tick color and the label color to the same value:\n            mpl color spec.\n\n        zorder : float\n            Tick and label zorder.\n\n        bottom, top, left, right : bool or  {'on', 'off'}\n            controls whether to draw the respective ticks.\n\n        labelbottom, labeltop, labelleft, labelright : bool or  {'on', 'off'}\n            controls whether to draw the\n            respective tick labels.\n\n        labelrotation : float\n            Tick label rotation\n\n        Examples\n        --------\n\n        Usage ::\n\n            ax.tick_params(direction='out', length=6, width=2, colors='r')\n\n        This will make all major ticks be red, pointing out of the box,\n        and with dimensions 6 points by 2 points.  Tick labels will\n        also be red.\n\n        ")
        
        
        # Getting the type of 'axis' (line 2706)
        axis_214237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 11), 'axis')
        
        # Obtaining an instance of the builtin type 'list' (line 2706)
        list_214238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2706, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2706)
        # Adding element type (line 2706)
        unicode_214239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2706, 20), 'unicode', u'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2706, 19), list_214238, unicode_214239)
        # Adding element type (line 2706)
        unicode_214240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2706, 25), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2706, 19), list_214238, unicode_214240)
        
        # Applying the binary operator 'in' (line 2706)
        result_contains_214241 = python_operator(stypy.reporting.localization.Localization(__file__, 2706, 11), 'in', axis_214237, list_214238)
        
        # Testing the type of an if condition (line 2706)
        if_condition_214242 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2706, 8), result_contains_214241)
        # Assigning a type to the variable 'if_condition_214242' (line 2706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2706, 8), 'if_condition_214242', if_condition_214242)
        # SSA begins for if statement (line 2706)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2707):
        
        # Assigning a Call to a Name (line 2707):
        
        # Call to dict(...): (line 2707)
        # Processing the call arguments (line 2707)
        # Getting the type of 'kwargs' (line 2707)
        kwargs_214244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2707, 23), 'kwargs', False)
        # Processing the call keyword arguments (line 2707)
        kwargs_214245 = {}
        # Getting the type of 'dict' (line 2707)
        dict_214243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2707, 18), 'dict', False)
        # Calling dict(args, kwargs) (line 2707)
        dict_call_result_214246 = invoke(stypy.reporting.localization.Localization(__file__, 2707, 18), dict_214243, *[kwargs_214244], **kwargs_214245)
        
        # Assigning a type to the variable 'xkw' (line 2707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2707, 12), 'xkw', dict_call_result_214246)
        
        # Call to pop(...): (line 2708)
        # Processing the call arguments (line 2708)
        unicode_214249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2708, 20), 'unicode', u'left')
        # Getting the type of 'None' (line 2708)
        None_214250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2708, 28), 'None', False)
        # Processing the call keyword arguments (line 2708)
        kwargs_214251 = {}
        # Getting the type of 'xkw' (line 2708)
        xkw_214247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2708, 12), 'xkw', False)
        # Obtaining the member 'pop' of a type (line 2708)
        pop_214248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2708, 12), xkw_214247, 'pop')
        # Calling pop(args, kwargs) (line 2708)
        pop_call_result_214252 = invoke(stypy.reporting.localization.Localization(__file__, 2708, 12), pop_214248, *[unicode_214249, None_214250], **kwargs_214251)
        
        
        # Call to pop(...): (line 2709)
        # Processing the call arguments (line 2709)
        unicode_214255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2709, 20), 'unicode', u'right')
        # Getting the type of 'None' (line 2709)
        None_214256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2709, 29), 'None', False)
        # Processing the call keyword arguments (line 2709)
        kwargs_214257 = {}
        # Getting the type of 'xkw' (line 2709)
        xkw_214253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2709, 12), 'xkw', False)
        # Obtaining the member 'pop' of a type (line 2709)
        pop_214254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2709, 12), xkw_214253, 'pop')
        # Calling pop(args, kwargs) (line 2709)
        pop_call_result_214258 = invoke(stypy.reporting.localization.Localization(__file__, 2709, 12), pop_214254, *[unicode_214255, None_214256], **kwargs_214257)
        
        
        # Call to pop(...): (line 2710)
        # Processing the call arguments (line 2710)
        unicode_214261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2710, 20), 'unicode', u'labelleft')
        # Getting the type of 'None' (line 2710)
        None_214262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2710, 33), 'None', False)
        # Processing the call keyword arguments (line 2710)
        kwargs_214263 = {}
        # Getting the type of 'xkw' (line 2710)
        xkw_214259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2710, 12), 'xkw', False)
        # Obtaining the member 'pop' of a type (line 2710)
        pop_214260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2710, 12), xkw_214259, 'pop')
        # Calling pop(args, kwargs) (line 2710)
        pop_call_result_214264 = invoke(stypy.reporting.localization.Localization(__file__, 2710, 12), pop_214260, *[unicode_214261, None_214262], **kwargs_214263)
        
        
        # Call to pop(...): (line 2711)
        # Processing the call arguments (line 2711)
        unicode_214267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2711, 20), 'unicode', u'labelright')
        # Getting the type of 'None' (line 2711)
        None_214268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2711, 34), 'None', False)
        # Processing the call keyword arguments (line 2711)
        kwargs_214269 = {}
        # Getting the type of 'xkw' (line 2711)
        xkw_214265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2711, 12), 'xkw', False)
        # Obtaining the member 'pop' of a type (line 2711)
        pop_214266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2711, 12), xkw_214265, 'pop')
        # Calling pop(args, kwargs) (line 2711)
        pop_call_result_214270 = invoke(stypy.reporting.localization.Localization(__file__, 2711, 12), pop_214266, *[unicode_214267, None_214268], **kwargs_214269)
        
        
        # Call to set_tick_params(...): (line 2712)
        # Processing the call keyword arguments (line 2712)
        # Getting the type of 'xkw' (line 2712)
        xkw_214274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2712, 41), 'xkw', False)
        kwargs_214275 = {'xkw_214274': xkw_214274}
        # Getting the type of 'self' (line 2712)
        self_214271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2712, 12), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 2712)
        xaxis_214272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2712, 12), self_214271, 'xaxis')
        # Obtaining the member 'set_tick_params' of a type (line 2712)
        set_tick_params_214273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2712, 12), xaxis_214272, 'set_tick_params')
        # Calling set_tick_params(args, kwargs) (line 2712)
        set_tick_params_call_result_214276 = invoke(stypy.reporting.localization.Localization(__file__, 2712, 12), set_tick_params_214273, *[], **kwargs_214275)
        
        # SSA join for if statement (line 2706)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'axis' (line 2713)
        axis_214277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2713, 11), 'axis')
        
        # Obtaining an instance of the builtin type 'list' (line 2713)
        list_214278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2713, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2713)
        # Adding element type (line 2713)
        unicode_214279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2713, 20), 'unicode', u'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2713, 19), list_214278, unicode_214279)
        # Adding element type (line 2713)
        unicode_214280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2713, 25), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2713, 19), list_214278, unicode_214280)
        
        # Applying the binary operator 'in' (line 2713)
        result_contains_214281 = python_operator(stypy.reporting.localization.Localization(__file__, 2713, 11), 'in', axis_214277, list_214278)
        
        # Testing the type of an if condition (line 2713)
        if_condition_214282 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2713, 8), result_contains_214281)
        # Assigning a type to the variable 'if_condition_214282' (line 2713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2713, 8), 'if_condition_214282', if_condition_214282)
        # SSA begins for if statement (line 2713)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2714):
        
        # Assigning a Call to a Name (line 2714):
        
        # Call to dict(...): (line 2714)
        # Processing the call arguments (line 2714)
        # Getting the type of 'kwargs' (line 2714)
        kwargs_214284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2714, 23), 'kwargs', False)
        # Processing the call keyword arguments (line 2714)
        kwargs_214285 = {}
        # Getting the type of 'dict' (line 2714)
        dict_214283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2714, 18), 'dict', False)
        # Calling dict(args, kwargs) (line 2714)
        dict_call_result_214286 = invoke(stypy.reporting.localization.Localization(__file__, 2714, 18), dict_214283, *[kwargs_214284], **kwargs_214285)
        
        # Assigning a type to the variable 'ykw' (line 2714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2714, 12), 'ykw', dict_call_result_214286)
        
        # Call to pop(...): (line 2715)
        # Processing the call arguments (line 2715)
        unicode_214289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2715, 20), 'unicode', u'top')
        # Getting the type of 'None' (line 2715)
        None_214290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 27), 'None', False)
        # Processing the call keyword arguments (line 2715)
        kwargs_214291 = {}
        # Getting the type of 'ykw' (line 2715)
        ykw_214287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 12), 'ykw', False)
        # Obtaining the member 'pop' of a type (line 2715)
        pop_214288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2715, 12), ykw_214287, 'pop')
        # Calling pop(args, kwargs) (line 2715)
        pop_call_result_214292 = invoke(stypy.reporting.localization.Localization(__file__, 2715, 12), pop_214288, *[unicode_214289, None_214290], **kwargs_214291)
        
        
        # Call to pop(...): (line 2716)
        # Processing the call arguments (line 2716)
        unicode_214295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2716, 20), 'unicode', u'bottom')
        # Getting the type of 'None' (line 2716)
        None_214296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2716, 30), 'None', False)
        # Processing the call keyword arguments (line 2716)
        kwargs_214297 = {}
        # Getting the type of 'ykw' (line 2716)
        ykw_214293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2716, 12), 'ykw', False)
        # Obtaining the member 'pop' of a type (line 2716)
        pop_214294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2716, 12), ykw_214293, 'pop')
        # Calling pop(args, kwargs) (line 2716)
        pop_call_result_214298 = invoke(stypy.reporting.localization.Localization(__file__, 2716, 12), pop_214294, *[unicode_214295, None_214296], **kwargs_214297)
        
        
        # Call to pop(...): (line 2717)
        # Processing the call arguments (line 2717)
        unicode_214301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2717, 20), 'unicode', u'labeltop')
        # Getting the type of 'None' (line 2717)
        None_214302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2717, 32), 'None', False)
        # Processing the call keyword arguments (line 2717)
        kwargs_214303 = {}
        # Getting the type of 'ykw' (line 2717)
        ykw_214299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2717, 12), 'ykw', False)
        # Obtaining the member 'pop' of a type (line 2717)
        pop_214300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2717, 12), ykw_214299, 'pop')
        # Calling pop(args, kwargs) (line 2717)
        pop_call_result_214304 = invoke(stypy.reporting.localization.Localization(__file__, 2717, 12), pop_214300, *[unicode_214301, None_214302], **kwargs_214303)
        
        
        # Call to pop(...): (line 2718)
        # Processing the call arguments (line 2718)
        unicode_214307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2718, 20), 'unicode', u'labelbottom')
        # Getting the type of 'None' (line 2718)
        None_214308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 35), 'None', False)
        # Processing the call keyword arguments (line 2718)
        kwargs_214309 = {}
        # Getting the type of 'ykw' (line 2718)
        ykw_214305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 12), 'ykw', False)
        # Obtaining the member 'pop' of a type (line 2718)
        pop_214306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2718, 12), ykw_214305, 'pop')
        # Calling pop(args, kwargs) (line 2718)
        pop_call_result_214310 = invoke(stypy.reporting.localization.Localization(__file__, 2718, 12), pop_214306, *[unicode_214307, None_214308], **kwargs_214309)
        
        
        # Call to set_tick_params(...): (line 2719)
        # Processing the call keyword arguments (line 2719)
        # Getting the type of 'ykw' (line 2719)
        ykw_214314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2719, 41), 'ykw', False)
        kwargs_214315 = {'ykw_214314': ykw_214314}
        # Getting the type of 'self' (line 2719)
        self_214311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2719, 12), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 2719)
        yaxis_214312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2719, 12), self_214311, 'yaxis')
        # Obtaining the member 'set_tick_params' of a type (line 2719)
        set_tick_params_214313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2719, 12), yaxis_214312, 'set_tick_params')
        # Calling set_tick_params(args, kwargs) (line 2719)
        set_tick_params_call_result_214316 = invoke(stypy.reporting.localization.Localization(__file__, 2719, 12), set_tick_params_214313, *[], **kwargs_214315)
        
        # SSA join for if statement (line 2713)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'tick_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_params' in the type store
        # Getting the type of 'stypy_return_type' (line 2634)
        stypy_return_type_214317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214317)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_params'
        return stypy_return_type_214317


    @norecursion
    def set_axis_off(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_axis_off'
        module_type_store = module_type_store.open_function_context('set_axis_off', 2721, 4, False)
        # Assigning a type to the variable 'self' (line 2722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2722, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_axis_off.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_axis_off.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_axis_off.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_axis_off.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_axis_off')
        _AxesBase.set_axis_off.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.set_axis_off.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_axis_off.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_axis_off.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_axis_off.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_axis_off.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_axis_off.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_axis_off', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_axis_off', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_axis_off(...)' code ##################

        unicode_214318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2722, 8), 'unicode', u'turn off the axis')
        
        # Assigning a Name to a Attribute (line 2723):
        
        # Assigning a Name to a Attribute (line 2723):
        # Getting the type of 'False' (line 2723)
        False_214319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 22), 'False')
        # Getting the type of 'self' (line 2723)
        self_214320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 8), 'self')
        # Setting the type of the member 'axison' of a type (line 2723)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2723, 8), self_214320, 'axison', False_214319)
        
        # Assigning a Name to a Attribute (line 2724):
        
        # Assigning a Name to a Attribute (line 2724):
        # Getting the type of 'True' (line 2724)
        True_214321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2724, 21), 'True')
        # Getting the type of 'self' (line 2724)
        self_214322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2724, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2724)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2724, 8), self_214322, 'stale', True_214321)
        
        # ################# End of 'set_axis_off(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_axis_off' in the type store
        # Getting the type of 'stypy_return_type' (line 2721)
        stypy_return_type_214323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2721, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214323)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_axis_off'
        return stypy_return_type_214323


    @norecursion
    def set_axis_on(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_axis_on'
        module_type_store = module_type_store.open_function_context('set_axis_on', 2726, 4, False)
        # Assigning a type to the variable 'self' (line 2727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2727, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_axis_on.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_axis_on.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_axis_on.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_axis_on.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_axis_on')
        _AxesBase.set_axis_on.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.set_axis_on.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_axis_on.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_axis_on.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_axis_on.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_axis_on.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_axis_on.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_axis_on', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_axis_on', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_axis_on(...)' code ##################

        unicode_214324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2727, 8), 'unicode', u'turn on the axis')
        
        # Assigning a Name to a Attribute (line 2728):
        
        # Assigning a Name to a Attribute (line 2728):
        # Getting the type of 'True' (line 2728)
        True_214325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2728, 22), 'True')
        # Getting the type of 'self' (line 2728)
        self_214326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2728, 8), 'self')
        # Setting the type of the member 'axison' of a type (line 2728)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2728, 8), self_214326, 'axison', True_214325)
        
        # Assigning a Name to a Attribute (line 2729):
        
        # Assigning a Name to a Attribute (line 2729):
        # Getting the type of 'True' (line 2729)
        True_214327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2729, 21), 'True')
        # Getting the type of 'self' (line 2729)
        self_214328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2729, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2729)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2729, 8), self_214328, 'stale', True_214327)
        
        # ################# End of 'set_axis_on(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_axis_on' in the type store
        # Getting the type of 'stypy_return_type' (line 2726)
        stypy_return_type_214329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214329)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_axis_on'
        return stypy_return_type_214329


    @norecursion
    def get_axis_bgcolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_axis_bgcolor'
        module_type_store = module_type_store.open_function_context('get_axis_bgcolor', 2731, 4, False)
        # Assigning a type to the variable 'self' (line 2732)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2732, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_axis_bgcolor.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_axis_bgcolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_axis_bgcolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_axis_bgcolor.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_axis_bgcolor')
        _AxesBase.get_axis_bgcolor.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_axis_bgcolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_axis_bgcolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_axis_bgcolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_axis_bgcolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_axis_bgcolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_axis_bgcolor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_axis_bgcolor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_axis_bgcolor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_axis_bgcolor(...)' code ##################

        unicode_214330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2733, 8), 'unicode', u'Return the axis background color')
        
        # Call to get_facecolor(...): (line 2734)
        # Processing the call keyword arguments (line 2734)
        kwargs_214333 = {}
        # Getting the type of 'self' (line 2734)
        self_214331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2734, 15), 'self', False)
        # Obtaining the member 'get_facecolor' of a type (line 2734)
        get_facecolor_214332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2734, 15), self_214331, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 2734)
        get_facecolor_call_result_214334 = invoke(stypy.reporting.localization.Localization(__file__, 2734, 15), get_facecolor_214332, *[], **kwargs_214333)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2734, 8), 'stypy_return_type', get_facecolor_call_result_214334)
        
        # ################# End of 'get_axis_bgcolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_axis_bgcolor' in the type store
        # Getting the type of 'stypy_return_type' (line 2731)
        stypy_return_type_214335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214335)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_axis_bgcolor'
        return stypy_return_type_214335


    @norecursion
    def set_axis_bgcolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_axis_bgcolor'
        module_type_store = module_type_store.open_function_context('set_axis_bgcolor', 2736, 4, False)
        # Assigning a type to the variable 'self' (line 2737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2737, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_axis_bgcolor.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_axis_bgcolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_axis_bgcolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_axis_bgcolor.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_axis_bgcolor')
        _AxesBase.set_axis_bgcolor.__dict__.__setitem__('stypy_param_names_list', ['color'])
        _AxesBase.set_axis_bgcolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_axis_bgcolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_axis_bgcolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_axis_bgcolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_axis_bgcolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_axis_bgcolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_axis_bgcolor', ['color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_axis_bgcolor', localization, ['color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_axis_bgcolor(...)' code ##################

        unicode_214336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2743, (-1)), 'unicode', u'\n        set the axes background color\n\n        ACCEPTS: any matplotlib color - see\n        :func:`~matplotlib.pyplot.colors`\n        ')
        
        # Call to set_facecolor(...): (line 2744)
        # Processing the call arguments (line 2744)
        # Getting the type of 'color' (line 2744)
        color_214339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2744, 34), 'color', False)
        # Processing the call keyword arguments (line 2744)
        kwargs_214340 = {}
        # Getting the type of 'self' (line 2744)
        self_214337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2744, 15), 'self', False)
        # Obtaining the member 'set_facecolor' of a type (line 2744)
        set_facecolor_214338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2744, 15), self_214337, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 2744)
        set_facecolor_call_result_214341 = invoke(stypy.reporting.localization.Localization(__file__, 2744, 15), set_facecolor_214338, *[color_214339], **kwargs_214340)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2744, 8), 'stypy_return_type', set_facecolor_call_result_214341)
        
        # ################# End of 'set_axis_bgcolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_axis_bgcolor' in the type store
        # Getting the type of 'stypy_return_type' (line 2736)
        stypy_return_type_214342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214342)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_axis_bgcolor'
        return stypy_return_type_214342


    @norecursion
    def invert_xaxis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'invert_xaxis'
        module_type_store = module_type_store.open_function_context('invert_xaxis', 2747, 4, False)
        # Assigning a type to the variable 'self' (line 2748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2748, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.invert_xaxis.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.invert_xaxis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.invert_xaxis.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.invert_xaxis.__dict__.__setitem__('stypy_function_name', '_AxesBase.invert_xaxis')
        _AxesBase.invert_xaxis.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.invert_xaxis.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.invert_xaxis.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.invert_xaxis.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.invert_xaxis.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.invert_xaxis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.invert_xaxis.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.invert_xaxis', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'invert_xaxis', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'invert_xaxis(...)' code ##################

        unicode_214343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2748, 8), 'unicode', u'Invert the x-axis.')
        
        # Assigning a Call to a Tuple (line 2749):
        
        # Assigning a Call to a Name:
        
        # Call to get_xlim(...): (line 2749)
        # Processing the call keyword arguments (line 2749)
        kwargs_214346 = {}
        # Getting the type of 'self' (line 2749)
        self_214344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 22), 'self', False)
        # Obtaining the member 'get_xlim' of a type (line 2749)
        get_xlim_214345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2749, 22), self_214344, 'get_xlim')
        # Calling get_xlim(args, kwargs) (line 2749)
        get_xlim_call_result_214347 = invoke(stypy.reporting.localization.Localization(__file__, 2749, 22), get_xlim_214345, *[], **kwargs_214346)
        
        # Assigning a type to the variable 'call_assignment_207800' (line 2749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2749, 8), 'call_assignment_207800', get_xlim_call_result_214347)
        
        # Assigning a Call to a Name (line 2749):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2749, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214351 = {}
        # Getting the type of 'call_assignment_207800' (line 2749)
        call_assignment_207800_214348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 8), 'call_assignment_207800', False)
        # Obtaining the member '__getitem__' of a type (line 2749)
        getitem___214349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2749, 8), call_assignment_207800_214348, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214352 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214349, *[int_214350], **kwargs_214351)
        
        # Assigning a type to the variable 'call_assignment_207801' (line 2749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2749, 8), 'call_assignment_207801', getitem___call_result_214352)
        
        # Assigning a Name to a Name (line 2749):
        # Getting the type of 'call_assignment_207801' (line 2749)
        call_assignment_207801_214353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 8), 'call_assignment_207801')
        # Assigning a type to the variable 'left' (line 2749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2749, 8), 'left', call_assignment_207801_214353)
        
        # Assigning a Call to a Name (line 2749):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2749, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214357 = {}
        # Getting the type of 'call_assignment_207800' (line 2749)
        call_assignment_207800_214354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 8), 'call_assignment_207800', False)
        # Obtaining the member '__getitem__' of a type (line 2749)
        getitem___214355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2749, 8), call_assignment_207800_214354, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214358 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214355, *[int_214356], **kwargs_214357)
        
        # Assigning a type to the variable 'call_assignment_207802' (line 2749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2749, 8), 'call_assignment_207802', getitem___call_result_214358)
        
        # Assigning a Name to a Name (line 2749):
        # Getting the type of 'call_assignment_207802' (line 2749)
        call_assignment_207802_214359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 8), 'call_assignment_207802')
        # Assigning a type to the variable 'right' (line 2749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2749, 14), 'right', call_assignment_207802_214359)
        
        # Call to set_xlim(...): (line 2750)
        # Processing the call arguments (line 2750)
        # Getting the type of 'right' (line 2750)
        right_214362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 22), 'right', False)
        # Getting the type of 'left' (line 2750)
        left_214363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 29), 'left', False)
        # Processing the call keyword arguments (line 2750)
        # Getting the type of 'None' (line 2750)
        None_214364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 40), 'None', False)
        keyword_214365 = None_214364
        kwargs_214366 = {'auto': keyword_214365}
        # Getting the type of 'self' (line 2750)
        self_214360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 8), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 2750)
        set_xlim_214361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2750, 8), self_214360, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 2750)
        set_xlim_call_result_214367 = invoke(stypy.reporting.localization.Localization(__file__, 2750, 8), set_xlim_214361, *[right_214362, left_214363], **kwargs_214366)
        
        
        # ################# End of 'invert_xaxis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'invert_xaxis' in the type store
        # Getting the type of 'stypy_return_type' (line 2747)
        stypy_return_type_214368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214368)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'invert_xaxis'
        return stypy_return_type_214368


    @norecursion
    def xaxis_inverted(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'xaxis_inverted'
        module_type_store = module_type_store.open_function_context('xaxis_inverted', 2752, 4, False)
        # Assigning a type to the variable 'self' (line 2753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2753, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.xaxis_inverted.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.xaxis_inverted.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.xaxis_inverted.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.xaxis_inverted.__dict__.__setitem__('stypy_function_name', '_AxesBase.xaxis_inverted')
        _AxesBase.xaxis_inverted.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.xaxis_inverted.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.xaxis_inverted.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.xaxis_inverted.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.xaxis_inverted.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.xaxis_inverted.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.xaxis_inverted.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.xaxis_inverted', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'xaxis_inverted', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'xaxis_inverted(...)' code ##################

        unicode_214369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2753, 8), 'unicode', u'Returns *True* if the x-axis is inverted.')
        
        # Assigning a Call to a Tuple (line 2754):
        
        # Assigning a Call to a Name:
        
        # Call to get_xlim(...): (line 2754)
        # Processing the call keyword arguments (line 2754)
        kwargs_214372 = {}
        # Getting the type of 'self' (line 2754)
        self_214370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2754, 22), 'self', False)
        # Obtaining the member 'get_xlim' of a type (line 2754)
        get_xlim_214371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2754, 22), self_214370, 'get_xlim')
        # Calling get_xlim(args, kwargs) (line 2754)
        get_xlim_call_result_214373 = invoke(stypy.reporting.localization.Localization(__file__, 2754, 22), get_xlim_214371, *[], **kwargs_214372)
        
        # Assigning a type to the variable 'call_assignment_207803' (line 2754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2754, 8), 'call_assignment_207803', get_xlim_call_result_214373)
        
        # Assigning a Call to a Name (line 2754):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2754, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214377 = {}
        # Getting the type of 'call_assignment_207803' (line 2754)
        call_assignment_207803_214374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2754, 8), 'call_assignment_207803', False)
        # Obtaining the member '__getitem__' of a type (line 2754)
        getitem___214375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2754, 8), call_assignment_207803_214374, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214378 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214375, *[int_214376], **kwargs_214377)
        
        # Assigning a type to the variable 'call_assignment_207804' (line 2754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2754, 8), 'call_assignment_207804', getitem___call_result_214378)
        
        # Assigning a Name to a Name (line 2754):
        # Getting the type of 'call_assignment_207804' (line 2754)
        call_assignment_207804_214379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2754, 8), 'call_assignment_207804')
        # Assigning a type to the variable 'left' (line 2754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2754, 8), 'left', call_assignment_207804_214379)
        
        # Assigning a Call to a Name (line 2754):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2754, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214383 = {}
        # Getting the type of 'call_assignment_207803' (line 2754)
        call_assignment_207803_214380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2754, 8), 'call_assignment_207803', False)
        # Obtaining the member '__getitem__' of a type (line 2754)
        getitem___214381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2754, 8), call_assignment_207803_214380, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214384 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214381, *[int_214382], **kwargs_214383)
        
        # Assigning a type to the variable 'call_assignment_207805' (line 2754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2754, 8), 'call_assignment_207805', getitem___call_result_214384)
        
        # Assigning a Name to a Name (line 2754):
        # Getting the type of 'call_assignment_207805' (line 2754)
        call_assignment_207805_214385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2754, 8), 'call_assignment_207805')
        # Assigning a type to the variable 'right' (line 2754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2754, 14), 'right', call_assignment_207805_214385)
        
        # Getting the type of 'right' (line 2755)
        right_214386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 15), 'right')
        # Getting the type of 'left' (line 2755)
        left_214387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 23), 'left')
        # Applying the binary operator '<' (line 2755)
        result_lt_214388 = python_operator(stypy.reporting.localization.Localization(__file__, 2755, 15), '<', right_214386, left_214387)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2755, 8), 'stypy_return_type', result_lt_214388)
        
        # ################# End of 'xaxis_inverted(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'xaxis_inverted' in the type store
        # Getting the type of 'stypy_return_type' (line 2752)
        stypy_return_type_214389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214389)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'xaxis_inverted'
        return stypy_return_type_214389


    @norecursion
    def get_xbound(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_xbound'
        module_type_store = module_type_store.open_function_context('get_xbound', 2757, 4, False)
        # Assigning a type to the variable 'self' (line 2758)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2758, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_xbound.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_xbound.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_xbound.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_xbound.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_xbound')
        _AxesBase.get_xbound.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_xbound.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_xbound.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_xbound.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_xbound.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_xbound.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_xbound.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_xbound', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xbound', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xbound(...)' code ##################

        unicode_214390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2768, (-1)), 'unicode', u'Returns the x-axis numerical bounds\n\n        This always returns::\n\n          lowerBound < upperBound\n\n        Returns\n        -------\n        lowerBound, upperBound : float\n\n        ')
        
        # Assigning a Call to a Tuple (line 2769):
        
        # Assigning a Call to a Name:
        
        # Call to get_xlim(...): (line 2769)
        # Processing the call keyword arguments (line 2769)
        kwargs_214393 = {}
        # Getting the type of 'self' (line 2769)
        self_214391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 22), 'self', False)
        # Obtaining the member 'get_xlim' of a type (line 2769)
        get_xlim_214392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2769, 22), self_214391, 'get_xlim')
        # Calling get_xlim(args, kwargs) (line 2769)
        get_xlim_call_result_214394 = invoke(stypy.reporting.localization.Localization(__file__, 2769, 22), get_xlim_214392, *[], **kwargs_214393)
        
        # Assigning a type to the variable 'call_assignment_207806' (line 2769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2769, 8), 'call_assignment_207806', get_xlim_call_result_214394)
        
        # Assigning a Call to a Name (line 2769):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2769, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214398 = {}
        # Getting the type of 'call_assignment_207806' (line 2769)
        call_assignment_207806_214395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 8), 'call_assignment_207806', False)
        # Obtaining the member '__getitem__' of a type (line 2769)
        getitem___214396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2769, 8), call_assignment_207806_214395, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214399 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214396, *[int_214397], **kwargs_214398)
        
        # Assigning a type to the variable 'call_assignment_207807' (line 2769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2769, 8), 'call_assignment_207807', getitem___call_result_214399)
        
        # Assigning a Name to a Name (line 2769):
        # Getting the type of 'call_assignment_207807' (line 2769)
        call_assignment_207807_214400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 8), 'call_assignment_207807')
        # Assigning a type to the variable 'left' (line 2769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2769, 8), 'left', call_assignment_207807_214400)
        
        # Assigning a Call to a Name (line 2769):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2769, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214404 = {}
        # Getting the type of 'call_assignment_207806' (line 2769)
        call_assignment_207806_214401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 8), 'call_assignment_207806', False)
        # Obtaining the member '__getitem__' of a type (line 2769)
        getitem___214402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2769, 8), call_assignment_207806_214401, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214405 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214402, *[int_214403], **kwargs_214404)
        
        # Assigning a type to the variable 'call_assignment_207808' (line 2769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2769, 8), 'call_assignment_207808', getitem___call_result_214405)
        
        # Assigning a Name to a Name (line 2769):
        # Getting the type of 'call_assignment_207808' (line 2769)
        call_assignment_207808_214406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 8), 'call_assignment_207808')
        # Assigning a type to the variable 'right' (line 2769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2769, 14), 'right', call_assignment_207808_214406)
        
        
        # Getting the type of 'left' (line 2770)
        left_214407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 11), 'left')
        # Getting the type of 'right' (line 2770)
        right_214408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 18), 'right')
        # Applying the binary operator '<' (line 2770)
        result_lt_214409 = python_operator(stypy.reporting.localization.Localization(__file__, 2770, 11), '<', left_214407, right_214408)
        
        # Testing the type of an if condition (line 2770)
        if_condition_214410 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2770, 8), result_lt_214409)
        # Assigning a type to the variable 'if_condition_214410' (line 2770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2770, 8), 'if_condition_214410', if_condition_214410)
        # SSA begins for if statement (line 2770)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2771)
        tuple_214411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2771, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2771)
        # Adding element type (line 2771)
        # Getting the type of 'left' (line 2771)
        left_214412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 19), 'left')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2771, 19), tuple_214411, left_214412)
        # Adding element type (line 2771)
        # Getting the type of 'right' (line 2771)
        right_214413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 25), 'right')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2771, 19), tuple_214411, right_214413)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2771, 12), 'stypy_return_type', tuple_214411)
        # SSA branch for the else part of an if statement (line 2770)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2773)
        tuple_214414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2773, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2773)
        # Adding element type (line 2773)
        # Getting the type of 'right' (line 2773)
        right_214415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 19), 'right')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2773, 19), tuple_214414, right_214415)
        # Adding element type (line 2773)
        # Getting the type of 'left' (line 2773)
        left_214416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 26), 'left')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2773, 19), tuple_214414, left_214416)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2773, 12), 'stypy_return_type', tuple_214414)
        # SSA join for if statement (line 2770)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_xbound(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xbound' in the type store
        # Getting the type of 'stypy_return_type' (line 2757)
        stypy_return_type_214417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2757, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214417)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xbound'
        return stypy_return_type_214417


    @norecursion
    def set_xbound(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2775)
        None_214418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 31), 'None')
        # Getting the type of 'None' (line 2775)
        None_214419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 43), 'None')
        defaults = [None_214418, None_214419]
        # Create a new context for function 'set_xbound'
        module_type_store = module_type_store.open_function_context('set_xbound', 2775, 4, False)
        # Assigning a type to the variable 'self' (line 2776)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2776, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_xbound.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_xbound.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_xbound.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_xbound.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_xbound')
        _AxesBase.set_xbound.__dict__.__setitem__('stypy_param_names_list', ['lower', 'upper'])
        _AxesBase.set_xbound.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_xbound.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_xbound.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_xbound.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_xbound.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_xbound.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_xbound', ['lower', 'upper'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_xbound', localization, ['lower', 'upper'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_xbound(...)' code ##################

        unicode_214420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2780, (-1)), 'unicode', u'\n        Set the lower and upper numerical bounds of the x-axis.\n        This method will honor axes inversion regardless of parameter order.\n        It will not change the _autoscaleXon attribute.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'upper' (line 2781)
        upper_214421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 11), 'upper')
        # Getting the type of 'None' (line 2781)
        None_214422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 20), 'None')
        # Applying the binary operator 'is' (line 2781)
        result_is__214423 = python_operator(stypy.reporting.localization.Localization(__file__, 2781, 11), 'is', upper_214421, None_214422)
        
        
        # Call to iterable(...): (line 2781)
        # Processing the call arguments (line 2781)
        # Getting the type of 'lower' (line 2781)
        lower_214425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 38), 'lower', False)
        # Processing the call keyword arguments (line 2781)
        kwargs_214426 = {}
        # Getting the type of 'iterable' (line 2781)
        iterable_214424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 29), 'iterable', False)
        # Calling iterable(args, kwargs) (line 2781)
        iterable_call_result_214427 = invoke(stypy.reporting.localization.Localization(__file__, 2781, 29), iterable_214424, *[lower_214425], **kwargs_214426)
        
        # Applying the binary operator 'and' (line 2781)
        result_and_keyword_214428 = python_operator(stypy.reporting.localization.Localization(__file__, 2781, 11), 'and', result_is__214423, iterable_call_result_214427)
        
        # Testing the type of an if condition (line 2781)
        if_condition_214429 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2781, 8), result_and_keyword_214428)
        # Assigning a type to the variable 'if_condition_214429' (line 2781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2781, 8), 'if_condition_214429', if_condition_214429)
        # SSA begins for if statement (line 2781)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 2782):
        
        # Assigning a Subscript to a Name (line 2782):
        
        # Obtaining the type of the subscript
        int_214430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2782, 12), 'int')
        # Getting the type of 'lower' (line 2782)
        lower_214431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2782, 27), 'lower')
        # Obtaining the member '__getitem__' of a type (line 2782)
        getitem___214432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2782, 12), lower_214431, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2782)
        subscript_call_result_214433 = invoke(stypy.reporting.localization.Localization(__file__, 2782, 12), getitem___214432, int_214430)
        
        # Assigning a type to the variable 'tuple_var_assignment_207809' (line 2782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2782, 12), 'tuple_var_assignment_207809', subscript_call_result_214433)
        
        # Assigning a Subscript to a Name (line 2782):
        
        # Obtaining the type of the subscript
        int_214434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2782, 12), 'int')
        # Getting the type of 'lower' (line 2782)
        lower_214435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2782, 27), 'lower')
        # Obtaining the member '__getitem__' of a type (line 2782)
        getitem___214436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2782, 12), lower_214435, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2782)
        subscript_call_result_214437 = invoke(stypy.reporting.localization.Localization(__file__, 2782, 12), getitem___214436, int_214434)
        
        # Assigning a type to the variable 'tuple_var_assignment_207810' (line 2782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2782, 12), 'tuple_var_assignment_207810', subscript_call_result_214437)
        
        # Assigning a Name to a Name (line 2782):
        # Getting the type of 'tuple_var_assignment_207809' (line 2782)
        tuple_var_assignment_207809_214438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2782, 12), 'tuple_var_assignment_207809')
        # Assigning a type to the variable 'lower' (line 2782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2782, 12), 'lower', tuple_var_assignment_207809_214438)
        
        # Assigning a Name to a Name (line 2782):
        # Getting the type of 'tuple_var_assignment_207810' (line 2782)
        tuple_var_assignment_207810_214439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2782, 12), 'tuple_var_assignment_207810')
        # Assigning a type to the variable 'upper' (line 2782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2782, 19), 'upper', tuple_var_assignment_207810_214439)
        # SSA join for if statement (line 2781)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 2784):
        
        # Assigning a Call to a Name:
        
        # Call to get_xbound(...): (line 2784)
        # Processing the call keyword arguments (line 2784)
        kwargs_214442 = {}
        # Getting the type of 'self' (line 2784)
        self_214440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 31), 'self', False)
        # Obtaining the member 'get_xbound' of a type (line 2784)
        get_xbound_214441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2784, 31), self_214440, 'get_xbound')
        # Calling get_xbound(args, kwargs) (line 2784)
        get_xbound_call_result_214443 = invoke(stypy.reporting.localization.Localization(__file__, 2784, 31), get_xbound_214441, *[], **kwargs_214442)
        
        # Assigning a type to the variable 'call_assignment_207811' (line 2784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 8), 'call_assignment_207811', get_xbound_call_result_214443)
        
        # Assigning a Call to a Name (line 2784):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2784, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214447 = {}
        # Getting the type of 'call_assignment_207811' (line 2784)
        call_assignment_207811_214444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 8), 'call_assignment_207811', False)
        # Obtaining the member '__getitem__' of a type (line 2784)
        getitem___214445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2784, 8), call_assignment_207811_214444, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214448 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214445, *[int_214446], **kwargs_214447)
        
        # Assigning a type to the variable 'call_assignment_207812' (line 2784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 8), 'call_assignment_207812', getitem___call_result_214448)
        
        # Assigning a Name to a Name (line 2784):
        # Getting the type of 'call_assignment_207812' (line 2784)
        call_assignment_207812_214449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 8), 'call_assignment_207812')
        # Assigning a type to the variable 'old_lower' (line 2784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 8), 'old_lower', call_assignment_207812_214449)
        
        # Assigning a Call to a Name (line 2784):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2784, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214453 = {}
        # Getting the type of 'call_assignment_207811' (line 2784)
        call_assignment_207811_214450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 8), 'call_assignment_207811', False)
        # Obtaining the member '__getitem__' of a type (line 2784)
        getitem___214451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2784, 8), call_assignment_207811_214450, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214454 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214451, *[int_214452], **kwargs_214453)
        
        # Assigning a type to the variable 'call_assignment_207813' (line 2784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 8), 'call_assignment_207813', getitem___call_result_214454)
        
        # Assigning a Name to a Name (line 2784):
        # Getting the type of 'call_assignment_207813' (line 2784)
        call_assignment_207813_214455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 8), 'call_assignment_207813')
        # Assigning a type to the variable 'old_upper' (line 2784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 19), 'old_upper', call_assignment_207813_214455)
        
        # Type idiom detected: calculating its left and rigth part (line 2786)
        # Getting the type of 'lower' (line 2786)
        lower_214456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 11), 'lower')
        # Getting the type of 'None' (line 2786)
        None_214457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 20), 'None')
        
        (may_be_214458, more_types_in_union_214459) = may_be_none(lower_214456, None_214457)

        if may_be_214458:

            if more_types_in_union_214459:
                # Runtime conditional SSA (line 2786)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 2787):
            
            # Assigning a Name to a Name (line 2787):
            # Getting the type of 'old_lower' (line 2787)
            old_lower_214460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 20), 'old_lower')
            # Assigning a type to the variable 'lower' (line 2787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2787, 12), 'lower', old_lower_214460)

            if more_types_in_union_214459:
                # SSA join for if statement (line 2786)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2788)
        # Getting the type of 'upper' (line 2788)
        upper_214461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 11), 'upper')
        # Getting the type of 'None' (line 2788)
        None_214462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 20), 'None')
        
        (may_be_214463, more_types_in_union_214464) = may_be_none(upper_214461, None_214462)

        if may_be_214463:

            if more_types_in_union_214464:
                # Runtime conditional SSA (line 2788)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 2789):
            
            # Assigning a Name to a Name (line 2789):
            # Getting the type of 'old_upper' (line 2789)
            old_upper_214465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 20), 'old_upper')
            # Assigning a type to the variable 'upper' (line 2789)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2789, 12), 'upper', old_upper_214465)

            if more_types_in_union_214464:
                # SSA join for if statement (line 2788)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to xaxis_inverted(...): (line 2791)
        # Processing the call keyword arguments (line 2791)
        kwargs_214468 = {}
        # Getting the type of 'self' (line 2791)
        self_214466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 11), 'self', False)
        # Obtaining the member 'xaxis_inverted' of a type (line 2791)
        xaxis_inverted_214467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2791, 11), self_214466, 'xaxis_inverted')
        # Calling xaxis_inverted(args, kwargs) (line 2791)
        xaxis_inverted_call_result_214469 = invoke(stypy.reporting.localization.Localization(__file__, 2791, 11), xaxis_inverted_214467, *[], **kwargs_214468)
        
        # Testing the type of an if condition (line 2791)
        if_condition_214470 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2791, 8), xaxis_inverted_call_result_214469)
        # Assigning a type to the variable 'if_condition_214470' (line 2791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2791, 8), 'if_condition_214470', if_condition_214470)
        # SSA begins for if statement (line 2791)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'lower' (line 2792)
        lower_214471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2792, 15), 'lower')
        # Getting the type of 'upper' (line 2792)
        upper_214472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2792, 23), 'upper')
        # Applying the binary operator '<' (line 2792)
        result_lt_214473 = python_operator(stypy.reporting.localization.Localization(__file__, 2792, 15), '<', lower_214471, upper_214472)
        
        # Testing the type of an if condition (line 2792)
        if_condition_214474 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2792, 12), result_lt_214473)
        # Assigning a type to the variable 'if_condition_214474' (line 2792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2792, 12), 'if_condition_214474', if_condition_214474)
        # SSA begins for if statement (line 2792)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_xlim(...): (line 2793)
        # Processing the call arguments (line 2793)
        # Getting the type of 'upper' (line 2793)
        upper_214477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2793, 30), 'upper', False)
        # Getting the type of 'lower' (line 2793)
        lower_214478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2793, 37), 'lower', False)
        # Processing the call keyword arguments (line 2793)
        # Getting the type of 'None' (line 2793)
        None_214479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2793, 49), 'None', False)
        keyword_214480 = None_214479
        kwargs_214481 = {'auto': keyword_214480}
        # Getting the type of 'self' (line 2793)
        self_214475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2793, 16), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 2793)
        set_xlim_214476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2793, 16), self_214475, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 2793)
        set_xlim_call_result_214482 = invoke(stypy.reporting.localization.Localization(__file__, 2793, 16), set_xlim_214476, *[upper_214477, lower_214478], **kwargs_214481)
        
        # SSA branch for the else part of an if statement (line 2792)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_xlim(...): (line 2795)
        # Processing the call arguments (line 2795)
        # Getting the type of 'lower' (line 2795)
        lower_214485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2795, 30), 'lower', False)
        # Getting the type of 'upper' (line 2795)
        upper_214486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2795, 37), 'upper', False)
        # Processing the call keyword arguments (line 2795)
        # Getting the type of 'None' (line 2795)
        None_214487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2795, 49), 'None', False)
        keyword_214488 = None_214487
        kwargs_214489 = {'auto': keyword_214488}
        # Getting the type of 'self' (line 2795)
        self_214483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2795, 16), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 2795)
        set_xlim_214484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2795, 16), self_214483, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 2795)
        set_xlim_call_result_214490 = invoke(stypy.reporting.localization.Localization(__file__, 2795, 16), set_xlim_214484, *[lower_214485, upper_214486], **kwargs_214489)
        
        # SSA join for if statement (line 2792)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2791)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'lower' (line 2797)
        lower_214491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 15), 'lower')
        # Getting the type of 'upper' (line 2797)
        upper_214492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 23), 'upper')
        # Applying the binary operator '<' (line 2797)
        result_lt_214493 = python_operator(stypy.reporting.localization.Localization(__file__, 2797, 15), '<', lower_214491, upper_214492)
        
        # Testing the type of an if condition (line 2797)
        if_condition_214494 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2797, 12), result_lt_214493)
        # Assigning a type to the variable 'if_condition_214494' (line 2797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2797, 12), 'if_condition_214494', if_condition_214494)
        # SSA begins for if statement (line 2797)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_xlim(...): (line 2798)
        # Processing the call arguments (line 2798)
        # Getting the type of 'lower' (line 2798)
        lower_214497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2798, 30), 'lower', False)
        # Getting the type of 'upper' (line 2798)
        upper_214498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2798, 37), 'upper', False)
        # Processing the call keyword arguments (line 2798)
        # Getting the type of 'None' (line 2798)
        None_214499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2798, 49), 'None', False)
        keyword_214500 = None_214499
        kwargs_214501 = {'auto': keyword_214500}
        # Getting the type of 'self' (line 2798)
        self_214495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2798, 16), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 2798)
        set_xlim_214496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2798, 16), self_214495, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 2798)
        set_xlim_call_result_214502 = invoke(stypy.reporting.localization.Localization(__file__, 2798, 16), set_xlim_214496, *[lower_214497, upper_214498], **kwargs_214501)
        
        # SSA branch for the else part of an if statement (line 2797)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_xlim(...): (line 2800)
        # Processing the call arguments (line 2800)
        # Getting the type of 'upper' (line 2800)
        upper_214505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2800, 30), 'upper', False)
        # Getting the type of 'lower' (line 2800)
        lower_214506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2800, 37), 'lower', False)
        # Processing the call keyword arguments (line 2800)
        # Getting the type of 'None' (line 2800)
        None_214507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2800, 49), 'None', False)
        keyword_214508 = None_214507
        kwargs_214509 = {'auto': keyword_214508}
        # Getting the type of 'self' (line 2800)
        self_214503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2800, 16), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 2800)
        set_xlim_214504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2800, 16), self_214503, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 2800)
        set_xlim_call_result_214510 = invoke(stypy.reporting.localization.Localization(__file__, 2800, 16), set_xlim_214504, *[upper_214505, lower_214506], **kwargs_214509)
        
        # SSA join for if statement (line 2797)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2791)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_xbound(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_xbound' in the type store
        # Getting the type of 'stypy_return_type' (line 2775)
        stypy_return_type_214511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214511)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_xbound'
        return stypy_return_type_214511


    @norecursion
    def get_xlim(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_xlim'
        module_type_store = module_type_store.open_function_context('get_xlim', 2802, 4, False)
        # Assigning a type to the variable 'self' (line 2803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2803, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_xlim.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_xlim.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_xlim.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_xlim.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_xlim')
        _AxesBase.get_xlim.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_xlim.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_xlim.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_xlim.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_xlim.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_xlim.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_xlim.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_xlim', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xlim', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xlim(...)' code ##################

        unicode_214512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2817, (-1)), 'unicode', u'\n        Get the x-axis range\n\n        Returns\n        -------\n        xlimits : tuple\n            Returns the current x-axis limits as the tuple\n            (`left`, `right`).\n\n        Notes\n        -----\n        The x-axis may be inverted, in which case the `left` value will\n        be greater than the `right` value.\n\n        ')
        
        # Call to tuple(...): (line 2818)
        # Processing the call arguments (line 2818)
        # Getting the type of 'self' (line 2818)
        self_214514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 21), 'self', False)
        # Obtaining the member 'viewLim' of a type (line 2818)
        viewLim_214515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2818, 21), self_214514, 'viewLim')
        # Obtaining the member 'intervalx' of a type (line 2818)
        intervalx_214516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2818, 21), viewLim_214515, 'intervalx')
        # Processing the call keyword arguments (line 2818)
        kwargs_214517 = {}
        # Getting the type of 'tuple' (line 2818)
        tuple_214513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 15), 'tuple', False)
        # Calling tuple(args, kwargs) (line 2818)
        tuple_call_result_214518 = invoke(stypy.reporting.localization.Localization(__file__, 2818, 15), tuple_214513, *[intervalx_214516], **kwargs_214517)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2818, 8), 'stypy_return_type', tuple_call_result_214518)
        
        # ################# End of 'get_xlim(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xlim' in the type store
        # Getting the type of 'stypy_return_type' (line 2802)
        stypy_return_type_214519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2802, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214519)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xlim'
        return stypy_return_type_214519


    @norecursion
    def _validate_converted_limits(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_validate_converted_limits'
        module_type_store = module_type_store.open_function_context('_validate_converted_limits', 2820, 4, False)
        # Assigning a type to the variable 'self' (line 2821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2821, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._validate_converted_limits.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._validate_converted_limits.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._validate_converted_limits.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._validate_converted_limits.__dict__.__setitem__('stypy_function_name', '_AxesBase._validate_converted_limits')
        _AxesBase._validate_converted_limits.__dict__.__setitem__('stypy_param_names_list', ['limit', 'convert'])
        _AxesBase._validate_converted_limits.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._validate_converted_limits.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._validate_converted_limits.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._validate_converted_limits.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._validate_converted_limits.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._validate_converted_limits.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._validate_converted_limits', ['limit', 'convert'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_validate_converted_limits', localization, ['limit', 'convert'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_validate_converted_limits(...)' code ##################

        unicode_214520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2830, (-1)), 'unicode', u'\n        Raise ValueError if converted limits are non-finite.\n\n        Note that this function also accepts None as a limit argument.\n\n        Returns\n        -------\n        The limit value after call to convert(), or None if limit is None.\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 2831)
        # Getting the type of 'limit' (line 2831)
        limit_214521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2831, 8), 'limit')
        # Getting the type of 'None' (line 2831)
        None_214522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2831, 24), 'None')
        
        (may_be_214523, more_types_in_union_214524) = may_not_be_none(limit_214521, None_214522)

        if may_be_214523:

            if more_types_in_union_214524:
                # Runtime conditional SSA (line 2831)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2832):
            
            # Assigning a Call to a Name (line 2832):
            
            # Call to convert(...): (line 2832)
            # Processing the call arguments (line 2832)
            # Getting the type of 'limit' (line 2832)
            limit_214526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2832, 38), 'limit', False)
            # Processing the call keyword arguments (line 2832)
            kwargs_214527 = {}
            # Getting the type of 'convert' (line 2832)
            convert_214525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2832, 30), 'convert', False)
            # Calling convert(args, kwargs) (line 2832)
            convert_call_result_214528 = invoke(stypy.reporting.localization.Localization(__file__, 2832, 30), convert_214525, *[limit_214526], **kwargs_214527)
            
            # Assigning a type to the variable 'converted_limit' (line 2832)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2832, 12), 'converted_limit', convert_call_result_214528)
            
            
            # Evaluating a boolean operation
            
            # Call to isinstance(...): (line 2833)
            # Processing the call arguments (line 2833)
            # Getting the type of 'converted_limit' (line 2833)
            converted_limit_214530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 27), 'converted_limit', False)
            # Getting the type of 'float' (line 2833)
            float_214531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 44), 'float', False)
            # Processing the call keyword arguments (line 2833)
            kwargs_214532 = {}
            # Getting the type of 'isinstance' (line 2833)
            isinstance_214529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 16), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 2833)
            isinstance_call_result_214533 = invoke(stypy.reporting.localization.Localization(__file__, 2833, 16), isinstance_214529, *[converted_limit_214530, float_214531], **kwargs_214532)
            
            
            # Evaluating a boolean operation
            
            
            # Call to isreal(...): (line 2834)
            # Processing the call arguments (line 2834)
            # Getting the type of 'converted_limit' (line 2834)
            converted_limit_214536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2834, 35), 'converted_limit', False)
            # Processing the call keyword arguments (line 2834)
            kwargs_214537 = {}
            # Getting the type of 'np' (line 2834)
            np_214534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2834, 25), 'np', False)
            # Obtaining the member 'isreal' of a type (line 2834)
            isreal_214535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2834, 25), np_214534, 'isreal')
            # Calling isreal(args, kwargs) (line 2834)
            isreal_call_result_214538 = invoke(stypy.reporting.localization.Localization(__file__, 2834, 25), isreal_214535, *[converted_limit_214536], **kwargs_214537)
            
            # Applying the 'not' unary operator (line 2834)
            result_not__214539 = python_operator(stypy.reporting.localization.Localization(__file__, 2834, 21), 'not', isreal_call_result_214538)
            
            
            
            # Call to isfinite(...): (line 2835)
            # Processing the call arguments (line 2835)
            # Getting the type of 'converted_limit' (line 2835)
            converted_limit_214542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2835, 40), 'converted_limit', False)
            # Processing the call keyword arguments (line 2835)
            kwargs_214543 = {}
            # Getting the type of 'np' (line 2835)
            np_214540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2835, 28), 'np', False)
            # Obtaining the member 'isfinite' of a type (line 2835)
            isfinite_214541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2835, 28), np_214540, 'isfinite')
            # Calling isfinite(args, kwargs) (line 2835)
            isfinite_call_result_214544 = invoke(stypy.reporting.localization.Localization(__file__, 2835, 28), isfinite_214541, *[converted_limit_214542], **kwargs_214543)
            
            # Applying the 'not' unary operator (line 2835)
            result_not__214545 = python_operator(stypy.reporting.localization.Localization(__file__, 2835, 24), 'not', isfinite_call_result_214544)
            
            # Applying the binary operator 'or' (line 2834)
            result_or_keyword_214546 = python_operator(stypy.reporting.localization.Localization(__file__, 2834, 21), 'or', result_not__214539, result_not__214545)
            
            # Applying the binary operator 'and' (line 2833)
            result_and_keyword_214547 = python_operator(stypy.reporting.localization.Localization(__file__, 2833, 16), 'and', isinstance_call_result_214533, result_or_keyword_214546)
            
            # Testing the type of an if condition (line 2833)
            if_condition_214548 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2833, 12), result_and_keyword_214547)
            # Assigning a type to the variable 'if_condition_214548' (line 2833)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2833, 12), 'if_condition_214548', if_condition_214548)
            # SSA begins for if statement (line 2833)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 2836)
            # Processing the call arguments (line 2836)
            unicode_214550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2836, 33), 'unicode', u'Axis limits cannot be NaN or Inf')
            # Processing the call keyword arguments (line 2836)
            kwargs_214551 = {}
            # Getting the type of 'ValueError' (line 2836)
            ValueError_214549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2836, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 2836)
            ValueError_call_result_214552 = invoke(stypy.reporting.localization.Localization(__file__, 2836, 22), ValueError_214549, *[unicode_214550], **kwargs_214551)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2836, 16), ValueError_call_result_214552, 'raise parameter', BaseException)
            # SSA join for if statement (line 2833)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'converted_limit' (line 2837)
            converted_limit_214553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2837, 19), 'converted_limit')
            # Assigning a type to the variable 'stypy_return_type' (line 2837)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2837, 12), 'stypy_return_type', converted_limit_214553)

            if more_types_in_union_214524:
                # SSA join for if statement (line 2831)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '_validate_converted_limits(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_validate_converted_limits' in the type store
        # Getting the type of 'stypy_return_type' (line 2820)
        stypy_return_type_214554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214554)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_validate_converted_limits'
        return stypy_return_type_214554


    @norecursion
    def set_xlim(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2839)
        None_214555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2839, 28), 'None')
        # Getting the type of 'None' (line 2839)
        None_214556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2839, 40), 'None')
        # Getting the type of 'True' (line 2839)
        True_214557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2839, 51), 'True')
        # Getting the type of 'False' (line 2839)
        False_214558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2839, 62), 'False')
        defaults = [None_214555, None_214556, True_214557, False_214558]
        # Create a new context for function 'set_xlim'
        module_type_store = module_type_store.open_function_context('set_xlim', 2839, 4, False)
        # Assigning a type to the variable 'self' (line 2840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2840, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_xlim.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_xlim.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_xlim.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_xlim.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_xlim')
        _AxesBase.set_xlim.__dict__.__setitem__('stypy_param_names_list', ['left', 'right', 'emit', 'auto'])
        _AxesBase.set_xlim.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_xlim.__dict__.__setitem__('stypy_kwargs_param_name', 'kw')
        _AxesBase.set_xlim.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_xlim.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_xlim.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_xlim.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_xlim', ['left', 'right', 'emit', 'auto'], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_xlim', localization, ['left', 'right', 'emit', 'auto'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_xlim(...)' code ##################

        unicode_214559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2893, (-1)), 'unicode', u'\n        Set the data limits for the x-axis\n\n        Parameters\n        ----------\n        left : scalar, optional\n            The left xlim (default: None, which leaves the left limit\n            unchanged).\n\n        right : scalar, optional\n            The right xlim (default: None, which leaves the right limit\n            unchanged).\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: True).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the x-axis. True turns on,\n            False turns off (default action), None leaves unchanged.\n\n        xlimits : tuple, optional\n            The left and right xlims may be passed as the tuple\n            (`left`, `right`) as the first positional argument (or as\n            the `left` keyword argument).\n\n        Returns\n        -------\n        xlimits : tuple\n            Returns the new x-axis limits as (`left`, `right`).\n\n        Notes\n        -----\n        The `left` value may be greater than the `right` value, in which\n        case the x-axis values will decrease from left to right.\n\n        Examples\n        --------\n        >>> set_xlim(left, right)\n        >>> set_xlim((left, right))\n        >>> left, right = set_xlim(left, right)\n\n        One limit may be left unchanged.\n\n        >>> set_xlim(right=right_lim)\n\n        Limits may be passed in reverse order to flip the direction of\n        the x-axis. For example, suppose `x` represents the number of\n        years before present. The x-axis limits might be set like the\n        following so 5000 years ago is on the left of the plot and the\n        present is on the right.\n\n        >>> set_xlim(5000, 0)\n\n        ')
        
        
        unicode_214560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2894, 11), 'unicode', u'xmin')
        # Getting the type of 'kw' (line 2894)
        kw_214561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2894, 21), 'kw')
        # Applying the binary operator 'in' (line 2894)
        result_contains_214562 = python_operator(stypy.reporting.localization.Localization(__file__, 2894, 11), 'in', unicode_214560, kw_214561)
        
        # Testing the type of an if condition (line 2894)
        if_condition_214563 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2894, 8), result_contains_214562)
        # Assigning a type to the variable 'if_condition_214563' (line 2894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2894, 8), 'if_condition_214563', if_condition_214563)
        # SSA begins for if statement (line 2894)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2895):
        
        # Assigning a Call to a Name (line 2895):
        
        # Call to pop(...): (line 2895)
        # Processing the call arguments (line 2895)
        unicode_214566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2895, 26), 'unicode', u'xmin')
        # Processing the call keyword arguments (line 2895)
        kwargs_214567 = {}
        # Getting the type of 'kw' (line 2895)
        kw_214564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2895, 19), 'kw', False)
        # Obtaining the member 'pop' of a type (line 2895)
        pop_214565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2895, 19), kw_214564, 'pop')
        # Calling pop(args, kwargs) (line 2895)
        pop_call_result_214568 = invoke(stypy.reporting.localization.Localization(__file__, 2895, 19), pop_214565, *[unicode_214566], **kwargs_214567)
        
        # Assigning a type to the variable 'left' (line 2895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2895, 12), 'left', pop_call_result_214568)
        # SSA join for if statement (line 2894)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_214569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2896, 11), 'unicode', u'xmax')
        # Getting the type of 'kw' (line 2896)
        kw_214570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2896, 21), 'kw')
        # Applying the binary operator 'in' (line 2896)
        result_contains_214571 = python_operator(stypy.reporting.localization.Localization(__file__, 2896, 11), 'in', unicode_214569, kw_214570)
        
        # Testing the type of an if condition (line 2896)
        if_condition_214572 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2896, 8), result_contains_214571)
        # Assigning a type to the variable 'if_condition_214572' (line 2896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2896, 8), 'if_condition_214572', if_condition_214572)
        # SSA begins for if statement (line 2896)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2897):
        
        # Assigning a Call to a Name (line 2897):
        
        # Call to pop(...): (line 2897)
        # Processing the call arguments (line 2897)
        unicode_214575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2897, 27), 'unicode', u'xmax')
        # Processing the call keyword arguments (line 2897)
        kwargs_214576 = {}
        # Getting the type of 'kw' (line 2897)
        kw_214573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2897, 20), 'kw', False)
        # Obtaining the member 'pop' of a type (line 2897)
        pop_214574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2897, 20), kw_214573, 'pop')
        # Calling pop(args, kwargs) (line 2897)
        pop_call_result_214577 = invoke(stypy.reporting.localization.Localization(__file__, 2897, 20), pop_214574, *[unicode_214575], **kwargs_214576)
        
        # Assigning a type to the variable 'right' (line 2897)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2897, 12), 'right', pop_call_result_214577)
        # SSA join for if statement (line 2896)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'kw' (line 2898)
        kw_214578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2898, 11), 'kw')
        # Testing the type of an if condition (line 2898)
        if_condition_214579 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2898, 8), kw_214578)
        # Assigning a type to the variable 'if_condition_214579' (line 2898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2898, 8), 'if_condition_214579', if_condition_214579)
        # SSA begins for if statement (line 2898)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2899)
        # Processing the call arguments (line 2899)
        unicode_214581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2899, 29), 'unicode', u'unrecognized kwargs: %s')
        
        # Call to list(...): (line 2899)
        # Processing the call arguments (line 2899)
        # Getting the type of 'kw' (line 2899)
        kw_214583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2899, 62), 'kw', False)
        # Processing the call keyword arguments (line 2899)
        kwargs_214584 = {}
        # Getting the type of 'list' (line 2899)
        list_214582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2899, 57), 'list', False)
        # Calling list(args, kwargs) (line 2899)
        list_call_result_214585 = invoke(stypy.reporting.localization.Localization(__file__, 2899, 57), list_214582, *[kw_214583], **kwargs_214584)
        
        # Applying the binary operator '%' (line 2899)
        result_mod_214586 = python_operator(stypy.reporting.localization.Localization(__file__, 2899, 29), '%', unicode_214581, list_call_result_214585)
        
        # Processing the call keyword arguments (line 2899)
        kwargs_214587 = {}
        # Getting the type of 'ValueError' (line 2899)
        ValueError_214580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2899, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2899)
        ValueError_call_result_214588 = invoke(stypy.reporting.localization.Localization(__file__, 2899, 18), ValueError_214580, *[result_mod_214586], **kwargs_214587)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2899, 12), ValueError_call_result_214588, 'raise parameter', BaseException)
        # SSA join for if statement (line 2898)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'right' (line 2901)
        right_214589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 11), 'right')
        # Getting the type of 'None' (line 2901)
        None_214590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 20), 'None')
        # Applying the binary operator 'is' (line 2901)
        result_is__214591 = python_operator(stypy.reporting.localization.Localization(__file__, 2901, 11), 'is', right_214589, None_214590)
        
        
        # Call to iterable(...): (line 2901)
        # Processing the call arguments (line 2901)
        # Getting the type of 'left' (line 2901)
        left_214593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 38), 'left', False)
        # Processing the call keyword arguments (line 2901)
        kwargs_214594 = {}
        # Getting the type of 'iterable' (line 2901)
        iterable_214592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 29), 'iterable', False)
        # Calling iterable(args, kwargs) (line 2901)
        iterable_call_result_214595 = invoke(stypy.reporting.localization.Localization(__file__, 2901, 29), iterable_214592, *[left_214593], **kwargs_214594)
        
        # Applying the binary operator 'and' (line 2901)
        result_and_keyword_214596 = python_operator(stypy.reporting.localization.Localization(__file__, 2901, 11), 'and', result_is__214591, iterable_call_result_214595)
        
        # Testing the type of an if condition (line 2901)
        if_condition_214597 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2901, 8), result_and_keyword_214596)
        # Assigning a type to the variable 'if_condition_214597' (line 2901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2901, 8), 'if_condition_214597', if_condition_214597)
        # SSA begins for if statement (line 2901)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 2902):
        
        # Assigning a Subscript to a Name (line 2902):
        
        # Obtaining the type of the subscript
        int_214598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2902, 12), 'int')
        # Getting the type of 'left' (line 2902)
        left_214599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 26), 'left')
        # Obtaining the member '__getitem__' of a type (line 2902)
        getitem___214600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2902, 12), left_214599, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2902)
        subscript_call_result_214601 = invoke(stypy.reporting.localization.Localization(__file__, 2902, 12), getitem___214600, int_214598)
        
        # Assigning a type to the variable 'tuple_var_assignment_207814' (line 2902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2902, 12), 'tuple_var_assignment_207814', subscript_call_result_214601)
        
        # Assigning a Subscript to a Name (line 2902):
        
        # Obtaining the type of the subscript
        int_214602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2902, 12), 'int')
        # Getting the type of 'left' (line 2902)
        left_214603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 26), 'left')
        # Obtaining the member '__getitem__' of a type (line 2902)
        getitem___214604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2902, 12), left_214603, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2902)
        subscript_call_result_214605 = invoke(stypy.reporting.localization.Localization(__file__, 2902, 12), getitem___214604, int_214602)
        
        # Assigning a type to the variable 'tuple_var_assignment_207815' (line 2902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2902, 12), 'tuple_var_assignment_207815', subscript_call_result_214605)
        
        # Assigning a Name to a Name (line 2902):
        # Getting the type of 'tuple_var_assignment_207814' (line 2902)
        tuple_var_assignment_207814_214606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 12), 'tuple_var_assignment_207814')
        # Assigning a type to the variable 'left' (line 2902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2902, 12), 'left', tuple_var_assignment_207814_214606)
        
        # Assigning a Name to a Name (line 2902):
        # Getting the type of 'tuple_var_assignment_207815' (line 2902)
        tuple_var_assignment_207815_214607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 12), 'tuple_var_assignment_207815')
        # Assigning a type to the variable 'right' (line 2902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2902, 18), 'right', tuple_var_assignment_207815_214607)
        # SSA join for if statement (line 2901)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _process_unit_info(...): (line 2904)
        # Processing the call keyword arguments (line 2904)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2904)
        tuple_214610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2904, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2904)
        # Adding element type (line 2904)
        # Getting the type of 'left' (line 2904)
        left_214611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2904, 39), 'left', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2904, 39), tuple_214610, left_214611)
        # Adding element type (line 2904)
        # Getting the type of 'right' (line 2904)
        right_214612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2904, 45), 'right', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2904, 39), tuple_214610, right_214612)
        
        keyword_214613 = tuple_214610
        kwargs_214614 = {'xdata': keyword_214613}
        # Getting the type of 'self' (line 2904)
        self_214608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2904, 8), 'self', False)
        # Obtaining the member '_process_unit_info' of a type (line 2904)
        _process_unit_info_214609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2904, 8), self_214608, '_process_unit_info')
        # Calling _process_unit_info(args, kwargs) (line 2904)
        _process_unit_info_call_result_214615 = invoke(stypy.reporting.localization.Localization(__file__, 2904, 8), _process_unit_info_214609, *[], **kwargs_214614)
        
        
        # Assigning a Call to a Name (line 2905):
        
        # Assigning a Call to a Name (line 2905):
        
        # Call to _validate_converted_limits(...): (line 2905)
        # Processing the call arguments (line 2905)
        # Getting the type of 'left' (line 2905)
        left_214618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2905, 47), 'left', False)
        # Getting the type of 'self' (line 2905)
        self_214619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2905, 53), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 2905)
        convert_xunits_214620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2905, 53), self_214619, 'convert_xunits')
        # Processing the call keyword arguments (line 2905)
        kwargs_214621 = {}
        # Getting the type of 'self' (line 2905)
        self_214616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2905, 15), 'self', False)
        # Obtaining the member '_validate_converted_limits' of a type (line 2905)
        _validate_converted_limits_214617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2905, 15), self_214616, '_validate_converted_limits')
        # Calling _validate_converted_limits(args, kwargs) (line 2905)
        _validate_converted_limits_call_result_214622 = invoke(stypy.reporting.localization.Localization(__file__, 2905, 15), _validate_converted_limits_214617, *[left_214618, convert_xunits_214620], **kwargs_214621)
        
        # Assigning a type to the variable 'left' (line 2905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2905, 8), 'left', _validate_converted_limits_call_result_214622)
        
        # Assigning a Call to a Name (line 2906):
        
        # Assigning a Call to a Name (line 2906):
        
        # Call to _validate_converted_limits(...): (line 2906)
        # Processing the call arguments (line 2906)
        # Getting the type of 'right' (line 2906)
        right_214625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2906, 48), 'right', False)
        # Getting the type of 'self' (line 2906)
        self_214626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2906, 55), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 2906)
        convert_xunits_214627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2906, 55), self_214626, 'convert_xunits')
        # Processing the call keyword arguments (line 2906)
        kwargs_214628 = {}
        # Getting the type of 'self' (line 2906)
        self_214623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2906, 16), 'self', False)
        # Obtaining the member '_validate_converted_limits' of a type (line 2906)
        _validate_converted_limits_214624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2906, 16), self_214623, '_validate_converted_limits')
        # Calling _validate_converted_limits(args, kwargs) (line 2906)
        _validate_converted_limits_call_result_214629 = invoke(stypy.reporting.localization.Localization(__file__, 2906, 16), _validate_converted_limits_214624, *[right_214625, convert_xunits_214627], **kwargs_214628)
        
        # Assigning a type to the variable 'right' (line 2906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2906, 8), 'right', _validate_converted_limits_call_result_214629)
        
        # Assigning a Call to a Tuple (line 2908):
        
        # Assigning a Call to a Name:
        
        # Call to get_xlim(...): (line 2908)
        # Processing the call keyword arguments (line 2908)
        kwargs_214632 = {}
        # Getting the type of 'self' (line 2908)
        self_214630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 30), 'self', False)
        # Obtaining the member 'get_xlim' of a type (line 2908)
        get_xlim_214631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2908, 30), self_214630, 'get_xlim')
        # Calling get_xlim(args, kwargs) (line 2908)
        get_xlim_call_result_214633 = invoke(stypy.reporting.localization.Localization(__file__, 2908, 30), get_xlim_214631, *[], **kwargs_214632)
        
        # Assigning a type to the variable 'call_assignment_207816' (line 2908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2908, 8), 'call_assignment_207816', get_xlim_call_result_214633)
        
        # Assigning a Call to a Name (line 2908):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2908, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214637 = {}
        # Getting the type of 'call_assignment_207816' (line 2908)
        call_assignment_207816_214634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 8), 'call_assignment_207816', False)
        # Obtaining the member '__getitem__' of a type (line 2908)
        getitem___214635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2908, 8), call_assignment_207816_214634, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214638 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214635, *[int_214636], **kwargs_214637)
        
        # Assigning a type to the variable 'call_assignment_207817' (line 2908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2908, 8), 'call_assignment_207817', getitem___call_result_214638)
        
        # Assigning a Name to a Name (line 2908):
        # Getting the type of 'call_assignment_207817' (line 2908)
        call_assignment_207817_214639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 8), 'call_assignment_207817')
        # Assigning a type to the variable 'old_left' (line 2908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2908, 8), 'old_left', call_assignment_207817_214639)
        
        # Assigning a Call to a Name (line 2908):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2908, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214643 = {}
        # Getting the type of 'call_assignment_207816' (line 2908)
        call_assignment_207816_214640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 8), 'call_assignment_207816', False)
        # Obtaining the member '__getitem__' of a type (line 2908)
        getitem___214641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2908, 8), call_assignment_207816_214640, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214644 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214641, *[int_214642], **kwargs_214643)
        
        # Assigning a type to the variable 'call_assignment_207818' (line 2908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2908, 8), 'call_assignment_207818', getitem___call_result_214644)
        
        # Assigning a Name to a Name (line 2908):
        # Getting the type of 'call_assignment_207818' (line 2908)
        call_assignment_207818_214645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 8), 'call_assignment_207818')
        # Assigning a type to the variable 'old_right' (line 2908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2908, 18), 'old_right', call_assignment_207818_214645)
        
        # Type idiom detected: calculating its left and rigth part (line 2909)
        # Getting the type of 'left' (line 2909)
        left_214646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2909, 11), 'left')
        # Getting the type of 'None' (line 2909)
        None_214647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2909, 19), 'None')
        
        (may_be_214648, more_types_in_union_214649) = may_be_none(left_214646, None_214647)

        if may_be_214648:

            if more_types_in_union_214649:
                # Runtime conditional SSA (line 2909)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 2910):
            
            # Assigning a Name to a Name (line 2910):
            # Getting the type of 'old_left' (line 2910)
            old_left_214650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2910, 19), 'old_left')
            # Assigning a type to the variable 'left' (line 2910)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2910, 12), 'left', old_left_214650)

            if more_types_in_union_214649:
                # SSA join for if statement (line 2909)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2911)
        # Getting the type of 'right' (line 2911)
        right_214651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2911, 11), 'right')
        # Getting the type of 'None' (line 2911)
        None_214652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2911, 20), 'None')
        
        (may_be_214653, more_types_in_union_214654) = may_be_none(right_214651, None_214652)

        if may_be_214653:

            if more_types_in_union_214654:
                # Runtime conditional SSA (line 2911)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 2912):
            
            # Assigning a Name to a Name (line 2912):
            # Getting the type of 'old_right' (line 2912)
            old_right_214655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2912, 20), 'old_right')
            # Assigning a type to the variable 'right' (line 2912)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2912, 12), 'right', old_right_214655)

            if more_types_in_union_214654:
                # SSA join for if statement (line 2911)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'left' (line 2914)
        left_214656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2914, 11), 'left')
        # Getting the type of 'right' (line 2914)
        right_214657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2914, 19), 'right')
        # Applying the binary operator '==' (line 2914)
        result_eq_214658 = python_operator(stypy.reporting.localization.Localization(__file__, 2914, 11), '==', left_214656, right_214657)
        
        # Testing the type of an if condition (line 2914)
        if_condition_214659 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2914, 8), result_eq_214658)
        # Assigning a type to the variable 'if_condition_214659' (line 2914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2914, 8), 'if_condition_214659', if_condition_214659)
        # SSA begins for if statement (line 2914)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 2915)
        # Processing the call arguments (line 2915)
        unicode_214662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2916, 17), 'unicode', u'Attempting to set identical left==right results\nin singular transformations; automatically expanding.\nleft=%s, right=%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2918)
        tuple_214663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2918, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2918)
        # Adding element type (line 2918)
        # Getting the type of 'left' (line 2918)
        left_214664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2918, 41), 'left', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2918, 41), tuple_214663, left_214664)
        # Adding element type (line 2918)
        # Getting the type of 'right' (line 2918)
        right_214665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2918, 47), 'right', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2918, 41), tuple_214663, right_214665)
        
        # Applying the binary operator '%' (line 2916)
        result_mod_214666 = python_operator(stypy.reporting.localization.Localization(__file__, 2916, 16), '%', unicode_214662, tuple_214663)
        
        # Processing the call keyword arguments (line 2915)
        kwargs_214667 = {}
        # Getting the type of 'warnings' (line 2915)
        warnings_214660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2915, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2915)
        warn_214661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2915, 12), warnings_214660, 'warn')
        # Calling warn(args, kwargs) (line 2915)
        warn_call_result_214668 = invoke(stypy.reporting.localization.Localization(__file__, 2915, 12), warn_214661, *[result_mod_214666], **kwargs_214667)
        
        # SSA join for if statement (line 2914)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 2919):
        
        # Assigning a Call to a Name:
        
        # Call to nonsingular(...): (line 2919)
        # Processing the call arguments (line 2919)
        # Getting the type of 'left' (line 2919)
        left_214671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2919, 46), 'left', False)
        # Getting the type of 'right' (line 2919)
        right_214672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2919, 52), 'right', False)
        # Processing the call keyword arguments (line 2919)
        # Getting the type of 'False' (line 2919)
        False_214673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2919, 70), 'False', False)
        keyword_214674 = False_214673
        kwargs_214675 = {'increasing': keyword_214674}
        # Getting the type of 'mtransforms' (line 2919)
        mtransforms_214669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2919, 22), 'mtransforms', False)
        # Obtaining the member 'nonsingular' of a type (line 2919)
        nonsingular_214670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2919, 22), mtransforms_214669, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 2919)
        nonsingular_call_result_214676 = invoke(stypy.reporting.localization.Localization(__file__, 2919, 22), nonsingular_214670, *[left_214671, right_214672], **kwargs_214675)
        
        # Assigning a type to the variable 'call_assignment_207819' (line 2919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2919, 8), 'call_assignment_207819', nonsingular_call_result_214676)
        
        # Assigning a Call to a Name (line 2919):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2919, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214680 = {}
        # Getting the type of 'call_assignment_207819' (line 2919)
        call_assignment_207819_214677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2919, 8), 'call_assignment_207819', False)
        # Obtaining the member '__getitem__' of a type (line 2919)
        getitem___214678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2919, 8), call_assignment_207819_214677, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214681 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214678, *[int_214679], **kwargs_214680)
        
        # Assigning a type to the variable 'call_assignment_207820' (line 2919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2919, 8), 'call_assignment_207820', getitem___call_result_214681)
        
        # Assigning a Name to a Name (line 2919):
        # Getting the type of 'call_assignment_207820' (line 2919)
        call_assignment_207820_214682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2919, 8), 'call_assignment_207820')
        # Assigning a type to the variable 'left' (line 2919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2919, 8), 'left', call_assignment_207820_214682)
        
        # Assigning a Call to a Name (line 2919):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2919, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214686 = {}
        # Getting the type of 'call_assignment_207819' (line 2919)
        call_assignment_207819_214683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2919, 8), 'call_assignment_207819', False)
        # Obtaining the member '__getitem__' of a type (line 2919)
        getitem___214684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2919, 8), call_assignment_207819_214683, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214687 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214684, *[int_214685], **kwargs_214686)
        
        # Assigning a type to the variable 'call_assignment_207821' (line 2919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2919, 8), 'call_assignment_207821', getitem___call_result_214687)
        
        # Assigning a Name to a Name (line 2919):
        # Getting the type of 'call_assignment_207821' (line 2919)
        call_assignment_207821_214688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2919, 8), 'call_assignment_207821')
        # Assigning a type to the variable 'right' (line 2919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2919, 14), 'right', call_assignment_207821_214688)
        
        
        # Evaluating a boolean operation
        
        
        # Call to get_xscale(...): (line 2921)
        # Processing the call keyword arguments (line 2921)
        kwargs_214691 = {}
        # Getting the type of 'self' (line 2921)
        self_214689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 11), 'self', False)
        # Obtaining the member 'get_xscale' of a type (line 2921)
        get_xscale_214690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2921, 11), self_214689, 'get_xscale')
        # Calling get_xscale(args, kwargs) (line 2921)
        get_xscale_call_result_214692 = invoke(stypy.reporting.localization.Localization(__file__, 2921, 11), get_xscale_214690, *[], **kwargs_214691)
        
        unicode_214693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2921, 32), 'unicode', u'log')
        # Applying the binary operator '==' (line 2921)
        result_eq_214694 = python_operator(stypy.reporting.localization.Localization(__file__, 2921, 11), '==', get_xscale_call_result_214692, unicode_214693)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'left' (line 2921)
        left_214695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 43), 'left')
        float_214696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2921, 51), 'float')
        # Applying the binary operator '<=' (line 2921)
        result_le_214697 = python_operator(stypy.reporting.localization.Localization(__file__, 2921, 43), '<=', left_214695, float_214696)
        
        
        # Getting the type of 'right' (line 2921)
        right_214698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 58), 'right')
        float_214699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2921, 67), 'float')
        # Applying the binary operator '<=' (line 2921)
        result_le_214700 = python_operator(stypy.reporting.localization.Localization(__file__, 2921, 58), '<=', right_214698, float_214699)
        
        # Applying the binary operator 'or' (line 2921)
        result_or_keyword_214701 = python_operator(stypy.reporting.localization.Localization(__file__, 2921, 43), 'or', result_le_214697, result_le_214700)
        
        # Applying the binary operator 'and' (line 2921)
        result_and_keyword_214702 = python_operator(stypy.reporting.localization.Localization(__file__, 2921, 11), 'and', result_eq_214694, result_or_keyword_214701)
        
        # Testing the type of an if condition (line 2921)
        if_condition_214703 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2921, 8), result_and_keyword_214702)
        # Assigning a type to the variable 'if_condition_214703' (line 2921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2921, 8), 'if_condition_214703', if_condition_214703)
        # SSA begins for if statement (line 2921)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 2922)
        # Processing the call arguments (line 2922)
        unicode_214706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2923, 16), 'unicode', u'Attempted to set non-positive xlimits for log-scale axis; invalid limits will be ignored.')
        # Processing the call keyword arguments (line 2922)
        kwargs_214707 = {}
        # Getting the type of 'warnings' (line 2922)
        warnings_214704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2922, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2922)
        warn_214705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2922, 12), warnings_214704, 'warn')
        # Calling warn(args, kwargs) (line 2922)
        warn_call_result_214708 = invoke(stypy.reporting.localization.Localization(__file__, 2922, 12), warn_214705, *[unicode_214706], **kwargs_214707)
        
        # SSA join for if statement (line 2921)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 2925):
        
        # Assigning a Call to a Name:
        
        # Call to limit_range_for_scale(...): (line 2925)
        # Processing the call arguments (line 2925)
        # Getting the type of 'left' (line 2925)
        left_214712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 55), 'left', False)
        # Getting the type of 'right' (line 2925)
        right_214713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 61), 'right', False)
        # Processing the call keyword arguments (line 2925)
        kwargs_214714 = {}
        # Getting the type of 'self' (line 2925)
        self_214709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 22), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 2925)
        xaxis_214710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2925, 22), self_214709, 'xaxis')
        # Obtaining the member 'limit_range_for_scale' of a type (line 2925)
        limit_range_for_scale_214711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2925, 22), xaxis_214710, 'limit_range_for_scale')
        # Calling limit_range_for_scale(args, kwargs) (line 2925)
        limit_range_for_scale_call_result_214715 = invoke(stypy.reporting.localization.Localization(__file__, 2925, 22), limit_range_for_scale_214711, *[left_214712, right_214713], **kwargs_214714)
        
        # Assigning a type to the variable 'call_assignment_207822' (line 2925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2925, 8), 'call_assignment_207822', limit_range_for_scale_call_result_214715)
        
        # Assigning a Call to a Name (line 2925):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2925, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214719 = {}
        # Getting the type of 'call_assignment_207822' (line 2925)
        call_assignment_207822_214716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 8), 'call_assignment_207822', False)
        # Obtaining the member '__getitem__' of a type (line 2925)
        getitem___214717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2925, 8), call_assignment_207822_214716, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214720 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214717, *[int_214718], **kwargs_214719)
        
        # Assigning a type to the variable 'call_assignment_207823' (line 2925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2925, 8), 'call_assignment_207823', getitem___call_result_214720)
        
        # Assigning a Name to a Name (line 2925):
        # Getting the type of 'call_assignment_207823' (line 2925)
        call_assignment_207823_214721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 8), 'call_assignment_207823')
        # Assigning a type to the variable 'left' (line 2925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2925, 8), 'left', call_assignment_207823_214721)
        
        # Assigning a Call to a Name (line 2925):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2925, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214725 = {}
        # Getting the type of 'call_assignment_207822' (line 2925)
        call_assignment_207822_214722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 8), 'call_assignment_207822', False)
        # Obtaining the member '__getitem__' of a type (line 2925)
        getitem___214723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2925, 8), call_assignment_207822_214722, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214726 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214723, *[int_214724], **kwargs_214725)
        
        # Assigning a type to the variable 'call_assignment_207824' (line 2925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2925, 8), 'call_assignment_207824', getitem___call_result_214726)
        
        # Assigning a Name to a Name (line 2925):
        # Getting the type of 'call_assignment_207824' (line 2925)
        call_assignment_207824_214727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 8), 'call_assignment_207824')
        # Assigning a type to the variable 'right' (line 2925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2925, 14), 'right', call_assignment_207824_214727)
        
        # Assigning a Tuple to a Attribute (line 2927):
        
        # Assigning a Tuple to a Attribute (line 2927):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2927)
        tuple_214728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2927, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2927)
        # Adding element type (line 2927)
        # Getting the type of 'left' (line 2927)
        left_214729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 34), 'left')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2927, 34), tuple_214728, left_214729)
        # Adding element type (line 2927)
        # Getting the type of 'right' (line 2927)
        right_214730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 40), 'right')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2927, 34), tuple_214728, right_214730)
        
        # Getting the type of 'self' (line 2927)
        self_214731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 8), 'self')
        # Obtaining the member 'viewLim' of a type (line 2927)
        viewLim_214732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2927, 8), self_214731, 'viewLim')
        # Setting the type of the member 'intervalx' of a type (line 2927)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2927, 8), viewLim_214732, 'intervalx', tuple_214728)
        
        # Type idiom detected: calculating its left and rigth part (line 2928)
        # Getting the type of 'auto' (line 2928)
        auto_214733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2928, 8), 'auto')
        # Getting the type of 'None' (line 2928)
        None_214734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2928, 23), 'None')
        
        (may_be_214735, more_types_in_union_214736) = may_not_be_none(auto_214733, None_214734)

        if may_be_214735:

            if more_types_in_union_214736:
                # Runtime conditional SSA (line 2928)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 2929):
            
            # Assigning a Call to a Attribute (line 2929):
            
            # Call to bool(...): (line 2929)
            # Processing the call arguments (line 2929)
            # Getting the type of 'auto' (line 2929)
            auto_214738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2929, 38), 'auto', False)
            # Processing the call keyword arguments (line 2929)
            kwargs_214739 = {}
            # Getting the type of 'bool' (line 2929)
            bool_214737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2929, 33), 'bool', False)
            # Calling bool(args, kwargs) (line 2929)
            bool_call_result_214740 = invoke(stypy.reporting.localization.Localization(__file__, 2929, 33), bool_214737, *[auto_214738], **kwargs_214739)
            
            # Getting the type of 'self' (line 2929)
            self_214741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2929, 12), 'self')
            # Setting the type of the member '_autoscaleXon' of a type (line 2929)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2929, 12), self_214741, '_autoscaleXon', bool_call_result_214740)

            if more_types_in_union_214736:
                # SSA join for if statement (line 2928)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'emit' (line 2931)
        emit_214742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 11), 'emit')
        # Testing the type of an if condition (line 2931)
        if_condition_214743 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2931, 8), emit_214742)
        # Assigning a type to the variable 'if_condition_214743' (line 2931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2931, 8), 'if_condition_214743', if_condition_214743)
        # SSA begins for if statement (line 2931)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to process(...): (line 2932)
        # Processing the call arguments (line 2932)
        unicode_214747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2932, 35), 'unicode', u'xlim_changed')
        # Getting the type of 'self' (line 2932)
        self_214748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 51), 'self', False)
        # Processing the call keyword arguments (line 2932)
        kwargs_214749 = {}
        # Getting the type of 'self' (line 2932)
        self_214744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 12), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 2932)
        callbacks_214745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2932, 12), self_214744, 'callbacks')
        # Obtaining the member 'process' of a type (line 2932)
        process_214746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2932, 12), callbacks_214745, 'process')
        # Calling process(args, kwargs) (line 2932)
        process_call_result_214750 = invoke(stypy.reporting.localization.Localization(__file__, 2932, 12), process_214746, *[unicode_214747, self_214748], **kwargs_214749)
        
        
        
        # Call to get_siblings(...): (line 2934)
        # Processing the call arguments (line 2934)
        # Getting the type of 'self' (line 2934)
        self_214754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2934, 58), 'self', False)
        # Processing the call keyword arguments (line 2934)
        kwargs_214755 = {}
        # Getting the type of 'self' (line 2934)
        self_214751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2934, 25), 'self', False)
        # Obtaining the member '_shared_x_axes' of a type (line 2934)
        _shared_x_axes_214752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2934, 25), self_214751, '_shared_x_axes')
        # Obtaining the member 'get_siblings' of a type (line 2934)
        get_siblings_214753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2934, 25), _shared_x_axes_214752, 'get_siblings')
        # Calling get_siblings(args, kwargs) (line 2934)
        get_siblings_call_result_214756 = invoke(stypy.reporting.localization.Localization(__file__, 2934, 25), get_siblings_214753, *[self_214754], **kwargs_214755)
        
        # Testing the type of a for loop iterable (line 2934)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2934, 12), get_siblings_call_result_214756)
        # Getting the type of the for loop variable (line 2934)
        for_loop_var_214757 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2934, 12), get_siblings_call_result_214756)
        # Assigning a type to the variable 'other' (line 2934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2934, 12), 'other', for_loop_var_214757)
        # SSA begins for a for statement (line 2934)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'other' (line 2935)
        other_214758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 19), 'other')
        # Getting the type of 'self' (line 2935)
        self_214759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 32), 'self')
        # Applying the binary operator 'isnot' (line 2935)
        result_is_not_214760 = python_operator(stypy.reporting.localization.Localization(__file__, 2935, 19), 'isnot', other_214758, self_214759)
        
        # Testing the type of an if condition (line 2935)
        if_condition_214761 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2935, 16), result_is_not_214760)
        # Assigning a type to the variable 'if_condition_214761' (line 2935)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2935, 16), 'if_condition_214761', if_condition_214761)
        # SSA begins for if statement (line 2935)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_xlim(...): (line 2936)
        # Processing the call arguments (line 2936)
        # Getting the type of 'self' (line 2936)
        self_214764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2936, 35), 'self', False)
        # Obtaining the member 'viewLim' of a type (line 2936)
        viewLim_214765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2936, 35), self_214764, 'viewLim')
        # Obtaining the member 'intervalx' of a type (line 2936)
        intervalx_214766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2936, 35), viewLim_214765, 'intervalx')
        # Processing the call keyword arguments (line 2936)
        # Getting the type of 'False' (line 2937)
        False_214767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2937, 40), 'False', False)
        keyword_214768 = False_214767
        # Getting the type of 'auto' (line 2937)
        auto_214769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2937, 52), 'auto', False)
        keyword_214770 = auto_214769
        kwargs_214771 = {'auto': keyword_214770, 'emit': keyword_214768}
        # Getting the type of 'other' (line 2936)
        other_214762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2936, 20), 'other', False)
        # Obtaining the member 'set_xlim' of a type (line 2936)
        set_xlim_214763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2936, 20), other_214762, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 2936)
        set_xlim_call_result_214772 = invoke(stypy.reporting.localization.Localization(__file__, 2936, 20), set_xlim_214763, *[intervalx_214766], **kwargs_214771)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'other' (line 2938)
        other_214773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2938, 24), 'other')
        # Obtaining the member 'figure' of a type (line 2938)
        figure_214774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2938, 24), other_214773, 'figure')
        # Getting the type of 'self' (line 2938)
        self_214775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2938, 40), 'self')
        # Obtaining the member 'figure' of a type (line 2938)
        figure_214776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2938, 40), self_214775, 'figure')
        # Applying the binary operator '!=' (line 2938)
        result_ne_214777 = python_operator(stypy.reporting.localization.Localization(__file__, 2938, 24), '!=', figure_214774, figure_214776)
        
        
        # Getting the type of 'other' (line 2939)
        other_214778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2939, 28), 'other')
        # Obtaining the member 'figure' of a type (line 2939)
        figure_214779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2939, 28), other_214778, 'figure')
        # Obtaining the member 'canvas' of a type (line 2939)
        canvas_214780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2939, 28), figure_214779, 'canvas')
        # Getting the type of 'None' (line 2939)
        None_214781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2939, 55), 'None')
        # Applying the binary operator 'isnot' (line 2939)
        result_is_not_214782 = python_operator(stypy.reporting.localization.Localization(__file__, 2939, 28), 'isnot', canvas_214780, None_214781)
        
        # Applying the binary operator 'and' (line 2938)
        result_and_keyword_214783 = python_operator(stypy.reporting.localization.Localization(__file__, 2938, 24), 'and', result_ne_214777, result_is_not_214782)
        
        # Testing the type of an if condition (line 2938)
        if_condition_214784 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2938, 20), result_and_keyword_214783)
        # Assigning a type to the variable 'if_condition_214784' (line 2938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2938, 20), 'if_condition_214784', if_condition_214784)
        # SSA begins for if statement (line 2938)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw_idle(...): (line 2940)
        # Processing the call keyword arguments (line 2940)
        kwargs_214789 = {}
        # Getting the type of 'other' (line 2940)
        other_214785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2940, 24), 'other', False)
        # Obtaining the member 'figure' of a type (line 2940)
        figure_214786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2940, 24), other_214785, 'figure')
        # Obtaining the member 'canvas' of a type (line 2940)
        canvas_214787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2940, 24), figure_214786, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 2940)
        draw_idle_214788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2940, 24), canvas_214787, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 2940)
        draw_idle_call_result_214790 = invoke(stypy.reporting.localization.Localization(__file__, 2940, 24), draw_idle_214788, *[], **kwargs_214789)
        
        # SSA join for if statement (line 2938)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2935)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2931)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2941):
        
        # Assigning a Name to a Attribute (line 2941):
        # Getting the type of 'True' (line 2941)
        True_214791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2941, 21), 'True')
        # Getting the type of 'self' (line 2941)
        self_214792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2941, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2941)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2941, 8), self_214792, 'stale', True_214791)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2942)
        tuple_214793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2942, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2942)
        # Adding element type (line 2942)
        # Getting the type of 'left' (line 2942)
        left_214794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2942, 15), 'left')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2942, 15), tuple_214793, left_214794)
        # Adding element type (line 2942)
        # Getting the type of 'right' (line 2942)
        right_214795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2942, 21), 'right')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2942, 15), tuple_214793, right_214795)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2942, 8), 'stypy_return_type', tuple_214793)
        
        # ################# End of 'set_xlim(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_xlim' in the type store
        # Getting the type of 'stypy_return_type' (line 2839)
        stypy_return_type_214796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2839, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214796)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_xlim'
        return stypy_return_type_214796


    @norecursion
    def get_xscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_xscale'
        module_type_store = module_type_store.open_function_context('get_xscale', 2944, 4, False)
        # Assigning a type to the variable 'self' (line 2945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2945, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_xscale.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_xscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_xscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_xscale.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_xscale')
        _AxesBase.get_xscale.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_xscale.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_xscale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_xscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_xscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_xscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_xscale.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_xscale', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xscale', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xscale(...)' code ##################

        
        # Call to get_scale(...): (line 2945)
        # Processing the call keyword arguments (line 2945)
        kwargs_214800 = {}
        # Getting the type of 'self' (line 2945)
        self_214797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 15), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 2945)
        xaxis_214798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2945, 15), self_214797, 'xaxis')
        # Obtaining the member 'get_scale' of a type (line 2945)
        get_scale_214799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2945, 15), xaxis_214798, 'get_scale')
        # Calling get_scale(args, kwargs) (line 2945)
        get_scale_call_result_214801 = invoke(stypy.reporting.localization.Localization(__file__, 2945, 15), get_scale_214799, *[], **kwargs_214800)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2945, 8), 'stypy_return_type', get_scale_call_result_214801)
        
        # ################# End of 'get_xscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xscale' in the type store
        # Getting the type of 'stypy_return_type' (line 2944)
        stypy_return_type_214802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2944, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214802)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xscale'
        return stypy_return_type_214802

    
    # Assigning a BinOp to a Attribute (line 2946):

    @norecursion
    def set_xscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_xscale'
        module_type_store = module_type_store.open_function_context('set_xscale', 2949, 4, False)
        # Assigning a type to the variable 'self' (line 2950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2950, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_xscale.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_xscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_xscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_xscale.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_xscale')
        _AxesBase.set_xscale.__dict__.__setitem__('stypy_param_names_list', ['value'])
        _AxesBase.set_xscale.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_xscale.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _AxesBase.set_xscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_xscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_xscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_xscale.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_xscale', ['value'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_xscale', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_xscale(...)' code ##################

        unicode_214803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2972, (-1)), 'unicode', u'\n        Set the x-axis scale\n\n        Parameters\n        ----------\n        value : {"linear", "log", "symlog", "logit"}\n            scaling strategy to apply\n\n        Notes\n        -----\n        Different kwargs are accepted, depending on the scale. See\n        the `~matplotlib.scale` module for more information.\n\n        See also\n        --------\n        matplotlib.scale.LinearScale : linear transfrom\n\n        matplotlib.scale.LogTransform : log transform\n\n        matplotlib.scale.SymmetricalLogTransform : symlog transform\n\n        matplotlib.scale.LogisticTransform : logit transform\n        ')
        
        
        # Evaluating a boolean operation
        
        
        # Call to lower(...): (line 2975)
        # Processing the call keyword arguments (line 2975)
        kwargs_214806 = {}
        # Getting the type of 'value' (line 2975)
        value_214804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2975, 11), 'value', False)
        # Obtaining the member 'lower' of a type (line 2975)
        lower_214805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2975, 11), value_214804, 'lower')
        # Calling lower(args, kwargs) (line 2975)
        lower_call_result_214807 = invoke(stypy.reporting.localization.Localization(__file__, 2975, 11), lower_214805, *[], **kwargs_214806)
        
        unicode_214808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2975, 28), 'unicode', u'log')
        # Applying the binary operator '==' (line 2975)
        result_eq_214809 = python_operator(stypy.reporting.localization.Localization(__file__, 2975, 11), '==', lower_call_result_214807, unicode_214808)
        
        
        unicode_214810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2975, 38), 'unicode', u'nonposx')
        # Getting the type of 'kwargs' (line 2975)
        kwargs_214811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2975, 55), 'kwargs')
        # Applying the binary operator 'notin' (line 2975)
        result_contains_214812 = python_operator(stypy.reporting.localization.Localization(__file__, 2975, 38), 'notin', unicode_214810, kwargs_214811)
        
        # Applying the binary operator 'and' (line 2975)
        result_and_keyword_214813 = python_operator(stypy.reporting.localization.Localization(__file__, 2975, 11), 'and', result_eq_214809, result_contains_214812)
        
        # Testing the type of an if condition (line 2975)
        if_condition_214814 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2975, 8), result_and_keyword_214813)
        # Assigning a type to the variable 'if_condition_214814' (line 2975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2975, 8), 'if_condition_214814', if_condition_214814)
        # SSA begins for if statement (line 2975)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Subscript (line 2976):
        
        # Assigning a Str to a Subscript (line 2976):
        unicode_214815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2976, 32), 'unicode', u'mask')
        # Getting the type of 'kwargs' (line 2976)
        kwargs_214816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2976, 12), 'kwargs')
        unicode_214817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2976, 19), 'unicode', u'nonposx')
        # Storing an element on a container (line 2976)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2976, 12), kwargs_214816, (unicode_214817, unicode_214815))
        # SSA join for if statement (line 2975)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2978):
        
        # Assigning a Call to a Name (line 2978):
        
        # Call to get_shared_x_axes(...): (line 2978)
        # Processing the call keyword arguments (line 2978)
        kwargs_214820 = {}
        # Getting the type of 'self' (line 2978)
        self_214818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2978, 12), 'self', False)
        # Obtaining the member 'get_shared_x_axes' of a type (line 2978)
        get_shared_x_axes_214819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2978, 12), self_214818, 'get_shared_x_axes')
        # Calling get_shared_x_axes(args, kwargs) (line 2978)
        get_shared_x_axes_call_result_214821 = invoke(stypy.reporting.localization.Localization(__file__, 2978, 12), get_shared_x_axes_214819, *[], **kwargs_214820)
        
        # Assigning a type to the variable 'g' (line 2978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2978, 8), 'g', get_shared_x_axes_call_result_214821)
        
        
        # Call to get_siblings(...): (line 2979)
        # Processing the call arguments (line 2979)
        # Getting the type of 'self' (line 2979)
        self_214824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2979, 33), 'self', False)
        # Processing the call keyword arguments (line 2979)
        kwargs_214825 = {}
        # Getting the type of 'g' (line 2979)
        g_214822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2979, 18), 'g', False)
        # Obtaining the member 'get_siblings' of a type (line 2979)
        get_siblings_214823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2979, 18), g_214822, 'get_siblings')
        # Calling get_siblings(args, kwargs) (line 2979)
        get_siblings_call_result_214826 = invoke(stypy.reporting.localization.Localization(__file__, 2979, 18), get_siblings_214823, *[self_214824], **kwargs_214825)
        
        # Testing the type of a for loop iterable (line 2979)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2979, 8), get_siblings_call_result_214826)
        # Getting the type of the for loop variable (line 2979)
        for_loop_var_214827 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2979, 8), get_siblings_call_result_214826)
        # Assigning a type to the variable 'ax' (line 2979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2979, 8), 'ax', for_loop_var_214827)
        # SSA begins for a for statement (line 2979)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to _set_scale(...): (line 2980)
        # Processing the call arguments (line 2980)
        # Getting the type of 'value' (line 2980)
        value_214831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2980, 32), 'value', False)
        # Processing the call keyword arguments (line 2980)
        # Getting the type of 'kwargs' (line 2980)
        kwargs_214832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2980, 41), 'kwargs', False)
        kwargs_214833 = {'kwargs_214832': kwargs_214832}
        # Getting the type of 'ax' (line 2980)
        ax_214828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2980, 12), 'ax', False)
        # Obtaining the member 'xaxis' of a type (line 2980)
        xaxis_214829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2980, 12), ax_214828, 'xaxis')
        # Obtaining the member '_set_scale' of a type (line 2980)
        _set_scale_214830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2980, 12), xaxis_214829, '_set_scale')
        # Calling _set_scale(args, kwargs) (line 2980)
        _set_scale_call_result_214834 = invoke(stypy.reporting.localization.Localization(__file__, 2980, 12), _set_scale_214830, *[value_214831], **kwargs_214833)
        
        
        # Call to _update_transScale(...): (line 2981)
        # Processing the call keyword arguments (line 2981)
        kwargs_214837 = {}
        # Getting the type of 'ax' (line 2981)
        ax_214835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2981, 12), 'ax', False)
        # Obtaining the member '_update_transScale' of a type (line 2981)
        _update_transScale_214836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2981, 12), ax_214835, '_update_transScale')
        # Calling _update_transScale(args, kwargs) (line 2981)
        _update_transScale_call_result_214838 = invoke(stypy.reporting.localization.Localization(__file__, 2981, 12), _update_transScale_214836, *[], **kwargs_214837)
        
        
        # Assigning a Name to a Attribute (line 2982):
        
        # Assigning a Name to a Attribute (line 2982):
        # Getting the type of 'True' (line 2982)
        True_214839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2982, 23), 'True')
        # Getting the type of 'ax' (line 2982)
        ax_214840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2982, 12), 'ax')
        # Setting the type of the member 'stale' of a type (line 2982)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2982, 12), ax_214840, 'stale', True_214839)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to autoscale_view(...): (line 2984)
        # Processing the call keyword arguments (line 2984)
        # Getting the type of 'False' (line 2984)
        False_214843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2984, 35), 'False', False)
        keyword_214844 = False_214843
        kwargs_214845 = {'scaley': keyword_214844}
        # Getting the type of 'self' (line 2984)
        self_214841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2984, 8), 'self', False)
        # Obtaining the member 'autoscale_view' of a type (line 2984)
        autoscale_view_214842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2984, 8), self_214841, 'autoscale_view')
        # Calling autoscale_view(args, kwargs) (line 2984)
        autoscale_view_call_result_214846 = invoke(stypy.reporting.localization.Localization(__file__, 2984, 8), autoscale_view_214842, *[], **kwargs_214845)
        
        
        # ################# End of 'set_xscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_xscale' in the type store
        # Getting the type of 'stypy_return_type' (line 2949)
        stypy_return_type_214847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2949, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214847)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_xscale'
        return stypy_return_type_214847


    @norecursion
    def get_xticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 2986)
        False_214848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 31), 'False')
        defaults = [False_214848]
        # Create a new context for function 'get_xticks'
        module_type_store = module_type_store.open_function_context('get_xticks', 2986, 4, False)
        # Assigning a type to the variable 'self' (line 2987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2987, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_xticks.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_xticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_xticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_xticks.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_xticks')
        _AxesBase.get_xticks.__dict__.__setitem__('stypy_param_names_list', ['minor'])
        _AxesBase.get_xticks.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_xticks.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_xticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_xticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_xticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_xticks.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_xticks', ['minor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xticks', localization, ['minor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xticks(...)' code ##################

        unicode_214849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2987, 8), 'unicode', u'Return the x ticks as a list of locations')
        
        # Call to get_ticklocs(...): (line 2988)
        # Processing the call keyword arguments (line 2988)
        # Getting the type of 'minor' (line 2988)
        minor_214853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2988, 45), 'minor', False)
        keyword_214854 = minor_214853
        kwargs_214855 = {'minor': keyword_214854}
        # Getting the type of 'self' (line 2988)
        self_214850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2988, 15), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 2988)
        xaxis_214851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2988, 15), self_214850, 'xaxis')
        # Obtaining the member 'get_ticklocs' of a type (line 2988)
        get_ticklocs_214852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2988, 15), xaxis_214851, 'get_ticklocs')
        # Calling get_ticklocs(args, kwargs) (line 2988)
        get_ticklocs_call_result_214856 = invoke(stypy.reporting.localization.Localization(__file__, 2988, 15), get_ticklocs_214852, *[], **kwargs_214855)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2988)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2988, 8), 'stypy_return_type', get_ticklocs_call_result_214856)
        
        # ################# End of 'get_xticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xticks' in the type store
        # Getting the type of 'stypy_return_type' (line 2986)
        stypy_return_type_214857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214857)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xticks'
        return stypy_return_type_214857


    @norecursion
    def set_xticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 2990)
        False_214858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 38), 'False')
        defaults = [False_214858]
        # Create a new context for function 'set_xticks'
        module_type_store = module_type_store.open_function_context('set_xticks', 2990, 4, False)
        # Assigning a type to the variable 'self' (line 2991)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2991, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_xticks.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_xticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_xticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_xticks.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_xticks')
        _AxesBase.set_xticks.__dict__.__setitem__('stypy_param_names_list', ['ticks', 'minor'])
        _AxesBase.set_xticks.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_xticks.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_xticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_xticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_xticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_xticks.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_xticks', ['ticks', 'minor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_xticks', localization, ['ticks', 'minor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_xticks(...)' code ##################

        unicode_214859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3002, (-1)), 'unicode', u'\n        Set the x ticks with list of *ticks*\n\n        Parameters\n        ----------\n        ticks : list\n            List of x-axis tick locations\n\n        minor : bool, optional\n            If ``False`` sets major ticks, if ``True`` sets minor ticks.\n            Default is ``False``.\n        ')
        
        # Assigning a Call to a Name (line 3003):
        
        # Assigning a Call to a Name (line 3003):
        
        # Call to set_ticks(...): (line 3003)
        # Processing the call arguments (line 3003)
        # Getting the type of 'ticks' (line 3003)
        ticks_214863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 35), 'ticks', False)
        # Processing the call keyword arguments (line 3003)
        # Getting the type of 'minor' (line 3003)
        minor_214864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 48), 'minor', False)
        keyword_214865 = minor_214864
        kwargs_214866 = {'minor': keyword_214865}
        # Getting the type of 'self' (line 3003)
        self_214860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 14), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 3003)
        xaxis_214861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3003, 14), self_214860, 'xaxis')
        # Obtaining the member 'set_ticks' of a type (line 3003)
        set_ticks_214862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3003, 14), xaxis_214861, 'set_ticks')
        # Calling set_ticks(args, kwargs) (line 3003)
        set_ticks_call_result_214867 = invoke(stypy.reporting.localization.Localization(__file__, 3003, 14), set_ticks_214862, *[ticks_214863], **kwargs_214866)
        
        # Assigning a type to the variable 'ret' (line 3003)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3003, 8), 'ret', set_ticks_call_result_214867)
        
        # Assigning a Name to a Attribute (line 3004):
        
        # Assigning a Name to a Attribute (line 3004):
        # Getting the type of 'True' (line 3004)
        True_214868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3004, 21), 'True')
        # Getting the type of 'self' (line 3004)
        self_214869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3004, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 3004)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3004, 8), self_214869, 'stale', True_214868)
        # Getting the type of 'ret' (line 3005)
        ret_214870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 15), 'ret')
        # Assigning a type to the variable 'stypy_return_type' (line 3005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3005, 8), 'stypy_return_type', ret_214870)
        
        # ################# End of 'set_xticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_xticks' in the type store
        # Getting the type of 'stypy_return_type' (line 2990)
        stypy_return_type_214871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214871)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_xticks'
        return stypy_return_type_214871


    @norecursion
    def get_xmajorticklabels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_xmajorticklabels'
        module_type_store = module_type_store.open_function_context('get_xmajorticklabels', 3007, 4, False)
        # Assigning a type to the variable 'self' (line 3008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3008, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_xmajorticklabels.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_xmajorticklabels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_xmajorticklabels.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_xmajorticklabels.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_xmajorticklabels')
        _AxesBase.get_xmajorticklabels.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_xmajorticklabels.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_xmajorticklabels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_xmajorticklabels.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_xmajorticklabels.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_xmajorticklabels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_xmajorticklabels.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_xmajorticklabels', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xmajorticklabels', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xmajorticklabels(...)' code ##################

        unicode_214872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3015, (-1)), 'unicode', u'\n        Get the xtick major labels\n\n        Returns\n        -------\n        labels : list\n            List of :class:`~matplotlib.text.Text` instances\n        ')
        
        # Call to silent_list(...): (line 3016)
        # Processing the call arguments (line 3016)
        unicode_214875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3016, 33), 'unicode', u'Text xticklabel')
        
        # Call to get_majorticklabels(...): (line 3017)
        # Processing the call keyword arguments (line 3017)
        kwargs_214879 = {}
        # Getting the type of 'self' (line 3017)
        self_214876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 33), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 3017)
        xaxis_214877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3017, 33), self_214876, 'xaxis')
        # Obtaining the member 'get_majorticklabels' of a type (line 3017)
        get_majorticklabels_214878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3017, 33), xaxis_214877, 'get_majorticklabels')
        # Calling get_majorticklabels(args, kwargs) (line 3017)
        get_majorticklabels_call_result_214880 = invoke(stypy.reporting.localization.Localization(__file__, 3017, 33), get_majorticklabels_214878, *[], **kwargs_214879)
        
        # Processing the call keyword arguments (line 3016)
        kwargs_214881 = {}
        # Getting the type of 'cbook' (line 3016)
        cbook_214873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3016, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 3016)
        silent_list_214874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3016, 15), cbook_214873, 'silent_list')
        # Calling silent_list(args, kwargs) (line 3016)
        silent_list_call_result_214882 = invoke(stypy.reporting.localization.Localization(__file__, 3016, 15), silent_list_214874, *[unicode_214875, get_majorticklabels_call_result_214880], **kwargs_214881)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3016)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3016, 8), 'stypy_return_type', silent_list_call_result_214882)
        
        # ################# End of 'get_xmajorticklabels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xmajorticklabels' in the type store
        # Getting the type of 'stypy_return_type' (line 3007)
        stypy_return_type_214883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3007, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214883)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xmajorticklabels'
        return stypy_return_type_214883


    @norecursion
    def get_xminorticklabels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_xminorticklabels'
        module_type_store = module_type_store.open_function_context('get_xminorticklabels', 3019, 4, False)
        # Assigning a type to the variable 'self' (line 3020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3020, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_xminorticklabels.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_xminorticklabels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_xminorticklabels.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_xminorticklabels.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_xminorticklabels')
        _AxesBase.get_xminorticklabels.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_xminorticklabels.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_xminorticklabels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_xminorticklabels.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_xminorticklabels.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_xminorticklabels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_xminorticklabels.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_xminorticklabels', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xminorticklabels', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xminorticklabels(...)' code ##################

        unicode_214884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3027, (-1)), 'unicode', u'\n        Get the x minor tick labels\n\n        Returns\n        -------\n        labels : list\n            List of :class:`~matplotlib.text.Text` instances\n        ')
        
        # Call to silent_list(...): (line 3028)
        # Processing the call arguments (line 3028)
        unicode_214887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3028, 33), 'unicode', u'Text xticklabel')
        
        # Call to get_minorticklabels(...): (line 3029)
        # Processing the call keyword arguments (line 3029)
        kwargs_214891 = {}
        # Getting the type of 'self' (line 3029)
        self_214888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3029, 33), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 3029)
        xaxis_214889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3029, 33), self_214888, 'xaxis')
        # Obtaining the member 'get_minorticklabels' of a type (line 3029)
        get_minorticklabels_214890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3029, 33), xaxis_214889, 'get_minorticklabels')
        # Calling get_minorticklabels(args, kwargs) (line 3029)
        get_minorticklabels_call_result_214892 = invoke(stypy.reporting.localization.Localization(__file__, 3029, 33), get_minorticklabels_214890, *[], **kwargs_214891)
        
        # Processing the call keyword arguments (line 3028)
        kwargs_214893 = {}
        # Getting the type of 'cbook' (line 3028)
        cbook_214885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3028, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 3028)
        silent_list_214886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3028, 15), cbook_214885, 'silent_list')
        # Calling silent_list(args, kwargs) (line 3028)
        silent_list_call_result_214894 = invoke(stypy.reporting.localization.Localization(__file__, 3028, 15), silent_list_214886, *[unicode_214887, get_minorticklabels_call_result_214892], **kwargs_214893)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3028)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3028, 8), 'stypy_return_type', silent_list_call_result_214894)
        
        # ################# End of 'get_xminorticklabels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xminorticklabels' in the type store
        # Getting the type of 'stypy_return_type' (line 3019)
        stypy_return_type_214895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3019, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214895)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xminorticklabels'
        return stypy_return_type_214895


    @norecursion
    def get_xticklabels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 3031)
        False_214896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3031, 36), 'False')
        # Getting the type of 'None' (line 3031)
        None_214897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3031, 49), 'None')
        defaults = [False_214896, None_214897]
        # Create a new context for function 'get_xticklabels'
        module_type_store = module_type_store.open_function_context('get_xticklabels', 3031, 4, False)
        # Assigning a type to the variable 'self' (line 3032)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3032, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_xticklabels.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_xticklabels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_xticklabels.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_xticklabels.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_xticklabels')
        _AxesBase.get_xticklabels.__dict__.__setitem__('stypy_param_names_list', ['minor', 'which'])
        _AxesBase.get_xticklabels.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_xticklabels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_xticklabels.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_xticklabels.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_xticklabels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_xticklabels.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_xticklabels', ['minor', 'which'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xticklabels', localization, ['minor', 'which'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xticklabels(...)' code ##################

        unicode_214898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3051, (-1)), 'unicode', u"\n        Get the x tick labels as a list of :class:`~matplotlib.text.Text`\n        instances.\n\n        Parameters\n        ----------\n        minor : bool, optional\n           If True return the minor ticklabels,\n           else return the major ticklabels.\n\n        which : None, ('minor', 'major', 'both')\n           Overrides `minor`.\n\n           Selects which ticklabels to return\n\n        Returns\n        -------\n        ret : list\n           List of :class:`~matplotlib.text.Text` instances.\n        ")
        
        # Call to silent_list(...): (line 3052)
        # Processing the call arguments (line 3052)
        unicode_214901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3052, 33), 'unicode', u'Text xticklabel')
        
        # Call to get_ticklabels(...): (line 3053)
        # Processing the call keyword arguments (line 3053)
        # Getting the type of 'minor' (line 3053)
        minor_214905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3053, 65), 'minor', False)
        keyword_214906 = minor_214905
        # Getting the type of 'which' (line 3054)
        which_214907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 65), 'which', False)
        keyword_214908 = which_214907
        kwargs_214909 = {'which': keyword_214908, 'minor': keyword_214906}
        # Getting the type of 'self' (line 3053)
        self_214902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3053, 33), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 3053)
        xaxis_214903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3053, 33), self_214902, 'xaxis')
        # Obtaining the member 'get_ticklabels' of a type (line 3053)
        get_ticklabels_214904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3053, 33), xaxis_214903, 'get_ticklabels')
        # Calling get_ticklabels(args, kwargs) (line 3053)
        get_ticklabels_call_result_214910 = invoke(stypy.reporting.localization.Localization(__file__, 3053, 33), get_ticklabels_214904, *[], **kwargs_214909)
        
        # Processing the call keyword arguments (line 3052)
        kwargs_214911 = {}
        # Getting the type of 'cbook' (line 3052)
        cbook_214899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3052, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 3052)
        silent_list_214900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3052, 15), cbook_214899, 'silent_list')
        # Calling silent_list(args, kwargs) (line 3052)
        silent_list_call_result_214912 = invoke(stypy.reporting.localization.Localization(__file__, 3052, 15), silent_list_214900, *[unicode_214901, get_ticklabels_call_result_214910], **kwargs_214911)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3052, 8), 'stypy_return_type', silent_list_call_result_214912)
        
        # ################# End of 'get_xticklabels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xticklabels' in the type store
        # Getting the type of 'stypy_return_type' (line 3031)
        stypy_return_type_214913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3031, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214913)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xticklabels'
        return stypy_return_type_214913


    @norecursion
    def set_xticklabels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3056)
        None_214914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3056, 47), 'None')
        # Getting the type of 'False' (line 3056)
        False_214915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3056, 59), 'False')
        defaults = [None_214914, False_214915]
        # Create a new context for function 'set_xticklabels'
        module_type_store = module_type_store.open_function_context('set_xticklabels', 3056, 4, False)
        # Assigning a type to the variable 'self' (line 3057)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3057, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_xticklabels.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_xticklabels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_xticklabels.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_xticklabels.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_xticklabels')
        _AxesBase.set_xticklabels.__dict__.__setitem__('stypy_param_names_list', ['labels', 'fontdict', 'minor'])
        _AxesBase.set_xticklabels.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_xticklabels.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _AxesBase.set_xticklabels.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_xticklabels.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_xticklabels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_xticklabels.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_xticklabels', ['labels', 'fontdict', 'minor'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_xticklabels', localization, ['labels', 'fontdict', 'minor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_xticklabels(...)' code ##################

        unicode_214916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3085, (-1)), 'unicode', u"\n        Set the xtick labels with list of string labels\n\n        Parameters\n        ----------\n        labels : list of str\n            list of string labels\n\n        fontdict : dict, optional\n            A dictionary controlling the appearance of the ticklabels,\n            the default `fontdict` is:\n\n               {'fontsize': rcParams['axes.titlesize'],\n                'fontweight' : rcParams['axes.titleweight'],\n                'verticalalignment': 'baseline',\n                'horizontalalignment': loc}\n\n        minor : bool, optional\n            If True select the minor ticklabels,\n            else select the minor ticklabels\n\n        Returns\n        -------\n        A list of `~matplotlib.text.Text` instances\n\n        Other Parameters\n        -----------------\n        **kwargs : `~matplotlib.text.Text` properties.\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 3086)
        # Getting the type of 'fontdict' (line 3086)
        fontdict_214917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3086, 8), 'fontdict')
        # Getting the type of 'None' (line 3086)
        None_214918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3086, 27), 'None')
        
        (may_be_214919, more_types_in_union_214920) = may_not_be_none(fontdict_214917, None_214918)

        if may_be_214919:

            if more_types_in_union_214920:
                # Runtime conditional SSA (line 3086)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to update(...): (line 3087)
            # Processing the call arguments (line 3087)
            # Getting the type of 'fontdict' (line 3087)
            fontdict_214923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3087, 26), 'fontdict', False)
            # Processing the call keyword arguments (line 3087)
            kwargs_214924 = {}
            # Getting the type of 'kwargs' (line 3087)
            kwargs_214921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3087, 12), 'kwargs', False)
            # Obtaining the member 'update' of a type (line 3087)
            update_214922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3087, 12), kwargs_214921, 'update')
            # Calling update(args, kwargs) (line 3087)
            update_call_result_214925 = invoke(stypy.reporting.localization.Localization(__file__, 3087, 12), update_214922, *[fontdict_214923], **kwargs_214924)
            

            if more_types_in_union_214920:
                # SSA join for if statement (line 3086)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 3088):
        
        # Assigning a Call to a Name (line 3088):
        
        # Call to set_ticklabels(...): (line 3088)
        # Processing the call arguments (line 3088)
        # Getting the type of 'labels' (line 3088)
        labels_214929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3088, 40), 'labels', False)
        # Processing the call keyword arguments (line 3088)
        # Getting the type of 'minor' (line 3089)
        minor_214930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3089, 46), 'minor', False)
        keyword_214931 = minor_214930
        # Getting the type of 'kwargs' (line 3089)
        kwargs_214932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3089, 55), 'kwargs', False)
        kwargs_214933 = {'kwargs_214932': kwargs_214932, 'minor': keyword_214931}
        # Getting the type of 'self' (line 3088)
        self_214926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3088, 14), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 3088)
        xaxis_214927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3088, 14), self_214926, 'xaxis')
        # Obtaining the member 'set_ticklabels' of a type (line 3088)
        set_ticklabels_214928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3088, 14), xaxis_214927, 'set_ticklabels')
        # Calling set_ticklabels(args, kwargs) (line 3088)
        set_ticklabels_call_result_214934 = invoke(stypy.reporting.localization.Localization(__file__, 3088, 14), set_ticklabels_214928, *[labels_214929], **kwargs_214933)
        
        # Assigning a type to the variable 'ret' (line 3088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3088, 8), 'ret', set_ticklabels_call_result_214934)
        
        # Assigning a Name to a Attribute (line 3090):
        
        # Assigning a Name to a Attribute (line 3090):
        # Getting the type of 'True' (line 3090)
        True_214935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 21), 'True')
        # Getting the type of 'self' (line 3090)
        self_214936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 3090)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3090, 8), self_214936, 'stale', True_214935)
        # Getting the type of 'ret' (line 3091)
        ret_214937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 15), 'ret')
        # Assigning a type to the variable 'stypy_return_type' (line 3091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3091, 8), 'stypy_return_type', ret_214937)
        
        # ################# End of 'set_xticklabels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_xticklabels' in the type store
        # Getting the type of 'stypy_return_type' (line 3056)
        stypy_return_type_214938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3056, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214938)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_xticklabels'
        return stypy_return_type_214938


    @norecursion
    def invert_yaxis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'invert_yaxis'
        module_type_store = module_type_store.open_function_context('invert_yaxis', 3093, 4, False)
        # Assigning a type to the variable 'self' (line 3094)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3094, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.invert_yaxis.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.invert_yaxis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.invert_yaxis.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.invert_yaxis.__dict__.__setitem__('stypy_function_name', '_AxesBase.invert_yaxis')
        _AxesBase.invert_yaxis.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.invert_yaxis.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.invert_yaxis.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.invert_yaxis.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.invert_yaxis.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.invert_yaxis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.invert_yaxis.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.invert_yaxis', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'invert_yaxis', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'invert_yaxis(...)' code ##################

        unicode_214939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3096, (-1)), 'unicode', u'\n        Invert the y-axis.\n        ')
        
        # Assigning a Call to a Tuple (line 3097):
        
        # Assigning a Call to a Name:
        
        # Call to get_ylim(...): (line 3097)
        # Processing the call keyword arguments (line 3097)
        kwargs_214942 = {}
        # Getting the type of 'self' (line 3097)
        self_214940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3097, 22), 'self', False)
        # Obtaining the member 'get_ylim' of a type (line 3097)
        get_ylim_214941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3097, 22), self_214940, 'get_ylim')
        # Calling get_ylim(args, kwargs) (line 3097)
        get_ylim_call_result_214943 = invoke(stypy.reporting.localization.Localization(__file__, 3097, 22), get_ylim_214941, *[], **kwargs_214942)
        
        # Assigning a type to the variable 'call_assignment_207825' (line 3097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3097, 8), 'call_assignment_207825', get_ylim_call_result_214943)
        
        # Assigning a Call to a Name (line 3097):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3097, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214947 = {}
        # Getting the type of 'call_assignment_207825' (line 3097)
        call_assignment_207825_214944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3097, 8), 'call_assignment_207825', False)
        # Obtaining the member '__getitem__' of a type (line 3097)
        getitem___214945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3097, 8), call_assignment_207825_214944, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214948 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214945, *[int_214946], **kwargs_214947)
        
        # Assigning a type to the variable 'call_assignment_207826' (line 3097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3097, 8), 'call_assignment_207826', getitem___call_result_214948)
        
        # Assigning a Name to a Name (line 3097):
        # Getting the type of 'call_assignment_207826' (line 3097)
        call_assignment_207826_214949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3097, 8), 'call_assignment_207826')
        # Assigning a type to the variable 'bottom' (line 3097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3097, 8), 'bottom', call_assignment_207826_214949)
        
        # Assigning a Call to a Name (line 3097):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3097, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214953 = {}
        # Getting the type of 'call_assignment_207825' (line 3097)
        call_assignment_207825_214950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3097, 8), 'call_assignment_207825', False)
        # Obtaining the member '__getitem__' of a type (line 3097)
        getitem___214951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3097, 8), call_assignment_207825_214950, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214954 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214951, *[int_214952], **kwargs_214953)
        
        # Assigning a type to the variable 'call_assignment_207827' (line 3097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3097, 8), 'call_assignment_207827', getitem___call_result_214954)
        
        # Assigning a Name to a Name (line 3097):
        # Getting the type of 'call_assignment_207827' (line 3097)
        call_assignment_207827_214955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3097, 8), 'call_assignment_207827')
        # Assigning a type to the variable 'top' (line 3097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3097, 16), 'top', call_assignment_207827_214955)
        
        # Call to set_ylim(...): (line 3098)
        # Processing the call arguments (line 3098)
        # Getting the type of 'top' (line 3098)
        top_214958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3098, 22), 'top', False)
        # Getting the type of 'bottom' (line 3098)
        bottom_214959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3098, 27), 'bottom', False)
        # Processing the call keyword arguments (line 3098)
        # Getting the type of 'None' (line 3098)
        None_214960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3098, 40), 'None', False)
        keyword_214961 = None_214960
        kwargs_214962 = {'auto': keyword_214961}
        # Getting the type of 'self' (line 3098)
        self_214956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3098, 8), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 3098)
        set_ylim_214957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3098, 8), self_214956, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 3098)
        set_ylim_call_result_214963 = invoke(stypy.reporting.localization.Localization(__file__, 3098, 8), set_ylim_214957, *[top_214958, bottom_214959], **kwargs_214962)
        
        
        # ################# End of 'invert_yaxis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'invert_yaxis' in the type store
        # Getting the type of 'stypy_return_type' (line 3093)
        stypy_return_type_214964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3093, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214964)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'invert_yaxis'
        return stypy_return_type_214964


    @norecursion
    def yaxis_inverted(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'yaxis_inverted'
        module_type_store = module_type_store.open_function_context('yaxis_inverted', 3100, 4, False)
        # Assigning a type to the variable 'self' (line 3101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3101, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.yaxis_inverted.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.yaxis_inverted.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.yaxis_inverted.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.yaxis_inverted.__dict__.__setitem__('stypy_function_name', '_AxesBase.yaxis_inverted')
        _AxesBase.yaxis_inverted.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.yaxis_inverted.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.yaxis_inverted.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.yaxis_inverted.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.yaxis_inverted.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.yaxis_inverted.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.yaxis_inverted.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.yaxis_inverted', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'yaxis_inverted', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'yaxis_inverted(...)' code ##################

        unicode_214965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3101, 8), 'unicode', u'Returns *True* if the y-axis is inverted.')
        
        # Assigning a Call to a Tuple (line 3102):
        
        # Assigning a Call to a Name:
        
        # Call to get_ylim(...): (line 3102)
        # Processing the call keyword arguments (line 3102)
        kwargs_214968 = {}
        # Getting the type of 'self' (line 3102)
        self_214966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3102, 22), 'self', False)
        # Obtaining the member 'get_ylim' of a type (line 3102)
        get_ylim_214967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3102, 22), self_214966, 'get_ylim')
        # Calling get_ylim(args, kwargs) (line 3102)
        get_ylim_call_result_214969 = invoke(stypy.reporting.localization.Localization(__file__, 3102, 22), get_ylim_214967, *[], **kwargs_214968)
        
        # Assigning a type to the variable 'call_assignment_207828' (line 3102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3102, 8), 'call_assignment_207828', get_ylim_call_result_214969)
        
        # Assigning a Call to a Name (line 3102):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3102, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214973 = {}
        # Getting the type of 'call_assignment_207828' (line 3102)
        call_assignment_207828_214970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3102, 8), 'call_assignment_207828', False)
        # Obtaining the member '__getitem__' of a type (line 3102)
        getitem___214971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3102, 8), call_assignment_207828_214970, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214974 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214971, *[int_214972], **kwargs_214973)
        
        # Assigning a type to the variable 'call_assignment_207829' (line 3102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3102, 8), 'call_assignment_207829', getitem___call_result_214974)
        
        # Assigning a Name to a Name (line 3102):
        # Getting the type of 'call_assignment_207829' (line 3102)
        call_assignment_207829_214975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3102, 8), 'call_assignment_207829')
        # Assigning a type to the variable 'bottom' (line 3102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3102, 8), 'bottom', call_assignment_207829_214975)
        
        # Assigning a Call to a Name (line 3102):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3102, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214979 = {}
        # Getting the type of 'call_assignment_207828' (line 3102)
        call_assignment_207828_214976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3102, 8), 'call_assignment_207828', False)
        # Obtaining the member '__getitem__' of a type (line 3102)
        getitem___214977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3102, 8), call_assignment_207828_214976, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214980 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214977, *[int_214978], **kwargs_214979)
        
        # Assigning a type to the variable 'call_assignment_207830' (line 3102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3102, 8), 'call_assignment_207830', getitem___call_result_214980)
        
        # Assigning a Name to a Name (line 3102):
        # Getting the type of 'call_assignment_207830' (line 3102)
        call_assignment_207830_214981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3102, 8), 'call_assignment_207830')
        # Assigning a type to the variable 'top' (line 3102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3102, 16), 'top', call_assignment_207830_214981)
        
        # Getting the type of 'top' (line 3103)
        top_214982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 15), 'top')
        # Getting the type of 'bottom' (line 3103)
        bottom_214983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 21), 'bottom')
        # Applying the binary operator '<' (line 3103)
        result_lt_214984 = python_operator(stypy.reporting.localization.Localization(__file__, 3103, 15), '<', top_214982, bottom_214983)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3103, 8), 'stypy_return_type', result_lt_214984)
        
        # ################# End of 'yaxis_inverted(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'yaxis_inverted' in the type store
        # Getting the type of 'stypy_return_type' (line 3100)
        stypy_return_type_214985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_214985)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'yaxis_inverted'
        return stypy_return_type_214985


    @norecursion
    def get_ybound(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_ybound'
        module_type_store = module_type_store.open_function_context('get_ybound', 3105, 4, False)
        # Assigning a type to the variable 'self' (line 3106)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3106, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_ybound.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_ybound.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_ybound.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_ybound.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_ybound')
        _AxesBase.get_ybound.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_ybound.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_ybound.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_ybound.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_ybound.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_ybound.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_ybound.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_ybound', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ybound', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ybound(...)' code ##################

        unicode_214986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3109, (-1)), 'unicode', u'\n        Return y-axis numerical bounds in the form of\n        ``lowerBound < upperBound``\n        ')
        
        # Assigning a Call to a Tuple (line 3110):
        
        # Assigning a Call to a Name:
        
        # Call to get_ylim(...): (line 3110)
        # Processing the call keyword arguments (line 3110)
        kwargs_214989 = {}
        # Getting the type of 'self' (line 3110)
        self_214987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 22), 'self', False)
        # Obtaining the member 'get_ylim' of a type (line 3110)
        get_ylim_214988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3110, 22), self_214987, 'get_ylim')
        # Calling get_ylim(args, kwargs) (line 3110)
        get_ylim_call_result_214990 = invoke(stypy.reporting.localization.Localization(__file__, 3110, 22), get_ylim_214988, *[], **kwargs_214989)
        
        # Assigning a type to the variable 'call_assignment_207831' (line 3110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3110, 8), 'call_assignment_207831', get_ylim_call_result_214990)
        
        # Assigning a Call to a Name (line 3110):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3110, 8), 'int')
        # Processing the call keyword arguments
        kwargs_214994 = {}
        # Getting the type of 'call_assignment_207831' (line 3110)
        call_assignment_207831_214991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 8), 'call_assignment_207831', False)
        # Obtaining the member '__getitem__' of a type (line 3110)
        getitem___214992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3110, 8), call_assignment_207831_214991, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_214995 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214992, *[int_214993], **kwargs_214994)
        
        # Assigning a type to the variable 'call_assignment_207832' (line 3110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3110, 8), 'call_assignment_207832', getitem___call_result_214995)
        
        # Assigning a Name to a Name (line 3110):
        # Getting the type of 'call_assignment_207832' (line 3110)
        call_assignment_207832_214996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 8), 'call_assignment_207832')
        # Assigning a type to the variable 'bottom' (line 3110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3110, 8), 'bottom', call_assignment_207832_214996)
        
        # Assigning a Call to a Name (line 3110):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_214999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3110, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215000 = {}
        # Getting the type of 'call_assignment_207831' (line 3110)
        call_assignment_207831_214997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 8), 'call_assignment_207831', False)
        # Obtaining the member '__getitem__' of a type (line 3110)
        getitem___214998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3110, 8), call_assignment_207831_214997, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215001 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___214998, *[int_214999], **kwargs_215000)
        
        # Assigning a type to the variable 'call_assignment_207833' (line 3110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3110, 8), 'call_assignment_207833', getitem___call_result_215001)
        
        # Assigning a Name to a Name (line 3110):
        # Getting the type of 'call_assignment_207833' (line 3110)
        call_assignment_207833_215002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 8), 'call_assignment_207833')
        # Assigning a type to the variable 'top' (line 3110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3110, 16), 'top', call_assignment_207833_215002)
        
        
        # Getting the type of 'bottom' (line 3111)
        bottom_215003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 11), 'bottom')
        # Getting the type of 'top' (line 3111)
        top_215004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 20), 'top')
        # Applying the binary operator '<' (line 3111)
        result_lt_215005 = python_operator(stypy.reporting.localization.Localization(__file__, 3111, 11), '<', bottom_215003, top_215004)
        
        # Testing the type of an if condition (line 3111)
        if_condition_215006 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3111, 8), result_lt_215005)
        # Assigning a type to the variable 'if_condition_215006' (line 3111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3111, 8), 'if_condition_215006', if_condition_215006)
        # SSA begins for if statement (line 3111)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3112)
        tuple_215007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3112, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3112)
        # Adding element type (line 3112)
        # Getting the type of 'bottom' (line 3112)
        bottom_215008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3112, 19), 'bottom')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3112, 19), tuple_215007, bottom_215008)
        # Adding element type (line 3112)
        # Getting the type of 'top' (line 3112)
        top_215009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3112, 27), 'top')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3112, 19), tuple_215007, top_215009)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3112, 12), 'stypy_return_type', tuple_215007)
        # SSA branch for the else part of an if statement (line 3111)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3114)
        tuple_215010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3114, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3114)
        # Adding element type (line 3114)
        # Getting the type of 'top' (line 3114)
        top_215011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3114, 19), 'top')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3114, 19), tuple_215010, top_215011)
        # Adding element type (line 3114)
        # Getting the type of 'bottom' (line 3114)
        bottom_215012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3114, 24), 'bottom')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3114, 19), tuple_215010, bottom_215012)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3114, 12), 'stypy_return_type', tuple_215010)
        # SSA join for if statement (line 3111)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_ybound(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ybound' in the type store
        # Getting the type of 'stypy_return_type' (line 3105)
        stypy_return_type_215013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215013)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ybound'
        return stypy_return_type_215013


    @norecursion
    def set_ybound(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3116)
        None_215014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 31), 'None')
        # Getting the type of 'None' (line 3116)
        None_215015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 43), 'None')
        defaults = [None_215014, None_215015]
        # Create a new context for function 'set_ybound'
        module_type_store = module_type_store.open_function_context('set_ybound', 3116, 4, False)
        # Assigning a type to the variable 'self' (line 3117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3117, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_ybound.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_ybound.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_ybound.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_ybound.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_ybound')
        _AxesBase.set_ybound.__dict__.__setitem__('stypy_param_names_list', ['lower', 'upper'])
        _AxesBase.set_ybound.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_ybound.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_ybound.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_ybound.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_ybound.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_ybound.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_ybound', ['lower', 'upper'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ybound', localization, ['lower', 'upper'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ybound(...)' code ##################

        unicode_215016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3121, (-1)), 'unicode', u'\n        Set the lower and upper numerical bounds of the y-axis.\n        This method will honor axes inversion regardless of parameter order.\n        It will not change the _autoscaleYon attribute.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'upper' (line 3122)
        upper_215017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 11), 'upper')
        # Getting the type of 'None' (line 3122)
        None_215018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 20), 'None')
        # Applying the binary operator 'is' (line 3122)
        result_is__215019 = python_operator(stypy.reporting.localization.Localization(__file__, 3122, 11), 'is', upper_215017, None_215018)
        
        
        # Call to iterable(...): (line 3122)
        # Processing the call arguments (line 3122)
        # Getting the type of 'lower' (line 3122)
        lower_215021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 38), 'lower', False)
        # Processing the call keyword arguments (line 3122)
        kwargs_215022 = {}
        # Getting the type of 'iterable' (line 3122)
        iterable_215020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 29), 'iterable', False)
        # Calling iterable(args, kwargs) (line 3122)
        iterable_call_result_215023 = invoke(stypy.reporting.localization.Localization(__file__, 3122, 29), iterable_215020, *[lower_215021], **kwargs_215022)
        
        # Applying the binary operator 'and' (line 3122)
        result_and_keyword_215024 = python_operator(stypy.reporting.localization.Localization(__file__, 3122, 11), 'and', result_is__215019, iterable_call_result_215023)
        
        # Testing the type of an if condition (line 3122)
        if_condition_215025 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3122, 8), result_and_keyword_215024)
        # Assigning a type to the variable 'if_condition_215025' (line 3122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3122, 8), 'if_condition_215025', if_condition_215025)
        # SSA begins for if statement (line 3122)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 3123):
        
        # Assigning a Subscript to a Name (line 3123):
        
        # Obtaining the type of the subscript
        int_215026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3123, 12), 'int')
        # Getting the type of 'lower' (line 3123)
        lower_215027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 27), 'lower')
        # Obtaining the member '__getitem__' of a type (line 3123)
        getitem___215028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3123, 12), lower_215027, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3123)
        subscript_call_result_215029 = invoke(stypy.reporting.localization.Localization(__file__, 3123, 12), getitem___215028, int_215026)
        
        # Assigning a type to the variable 'tuple_var_assignment_207834' (line 3123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3123, 12), 'tuple_var_assignment_207834', subscript_call_result_215029)
        
        # Assigning a Subscript to a Name (line 3123):
        
        # Obtaining the type of the subscript
        int_215030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3123, 12), 'int')
        # Getting the type of 'lower' (line 3123)
        lower_215031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 27), 'lower')
        # Obtaining the member '__getitem__' of a type (line 3123)
        getitem___215032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3123, 12), lower_215031, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3123)
        subscript_call_result_215033 = invoke(stypy.reporting.localization.Localization(__file__, 3123, 12), getitem___215032, int_215030)
        
        # Assigning a type to the variable 'tuple_var_assignment_207835' (line 3123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3123, 12), 'tuple_var_assignment_207835', subscript_call_result_215033)
        
        # Assigning a Name to a Name (line 3123):
        # Getting the type of 'tuple_var_assignment_207834' (line 3123)
        tuple_var_assignment_207834_215034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 12), 'tuple_var_assignment_207834')
        # Assigning a type to the variable 'lower' (line 3123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3123, 12), 'lower', tuple_var_assignment_207834_215034)
        
        # Assigning a Name to a Name (line 3123):
        # Getting the type of 'tuple_var_assignment_207835' (line 3123)
        tuple_var_assignment_207835_215035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 12), 'tuple_var_assignment_207835')
        # Assigning a type to the variable 'upper' (line 3123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3123, 19), 'upper', tuple_var_assignment_207835_215035)
        # SSA join for if statement (line 3122)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 3125):
        
        # Assigning a Call to a Name:
        
        # Call to get_ybound(...): (line 3125)
        # Processing the call keyword arguments (line 3125)
        kwargs_215038 = {}
        # Getting the type of 'self' (line 3125)
        self_215036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 31), 'self', False)
        # Obtaining the member 'get_ybound' of a type (line 3125)
        get_ybound_215037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3125, 31), self_215036, 'get_ybound')
        # Calling get_ybound(args, kwargs) (line 3125)
        get_ybound_call_result_215039 = invoke(stypy.reporting.localization.Localization(__file__, 3125, 31), get_ybound_215037, *[], **kwargs_215038)
        
        # Assigning a type to the variable 'call_assignment_207836' (line 3125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3125, 8), 'call_assignment_207836', get_ybound_call_result_215039)
        
        # Assigning a Call to a Name (line 3125):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3125, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215043 = {}
        # Getting the type of 'call_assignment_207836' (line 3125)
        call_assignment_207836_215040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 8), 'call_assignment_207836', False)
        # Obtaining the member '__getitem__' of a type (line 3125)
        getitem___215041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3125, 8), call_assignment_207836_215040, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215044 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215041, *[int_215042], **kwargs_215043)
        
        # Assigning a type to the variable 'call_assignment_207837' (line 3125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3125, 8), 'call_assignment_207837', getitem___call_result_215044)
        
        # Assigning a Name to a Name (line 3125):
        # Getting the type of 'call_assignment_207837' (line 3125)
        call_assignment_207837_215045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 8), 'call_assignment_207837')
        # Assigning a type to the variable 'old_lower' (line 3125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3125, 8), 'old_lower', call_assignment_207837_215045)
        
        # Assigning a Call to a Name (line 3125):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3125, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215049 = {}
        # Getting the type of 'call_assignment_207836' (line 3125)
        call_assignment_207836_215046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 8), 'call_assignment_207836', False)
        # Obtaining the member '__getitem__' of a type (line 3125)
        getitem___215047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3125, 8), call_assignment_207836_215046, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215050 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215047, *[int_215048], **kwargs_215049)
        
        # Assigning a type to the variable 'call_assignment_207838' (line 3125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3125, 8), 'call_assignment_207838', getitem___call_result_215050)
        
        # Assigning a Name to a Name (line 3125):
        # Getting the type of 'call_assignment_207838' (line 3125)
        call_assignment_207838_215051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 8), 'call_assignment_207838')
        # Assigning a type to the variable 'old_upper' (line 3125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3125, 19), 'old_upper', call_assignment_207838_215051)
        
        # Type idiom detected: calculating its left and rigth part (line 3127)
        # Getting the type of 'lower' (line 3127)
        lower_215052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3127, 11), 'lower')
        # Getting the type of 'None' (line 3127)
        None_215053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3127, 20), 'None')
        
        (may_be_215054, more_types_in_union_215055) = may_be_none(lower_215052, None_215053)

        if may_be_215054:

            if more_types_in_union_215055:
                # Runtime conditional SSA (line 3127)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 3128):
            
            # Assigning a Name to a Name (line 3128):
            # Getting the type of 'old_lower' (line 3128)
            old_lower_215056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3128, 20), 'old_lower')
            # Assigning a type to the variable 'lower' (line 3128)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3128, 12), 'lower', old_lower_215056)

            if more_types_in_union_215055:
                # SSA join for if statement (line 3127)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 3129)
        # Getting the type of 'upper' (line 3129)
        upper_215057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 11), 'upper')
        # Getting the type of 'None' (line 3129)
        None_215058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 20), 'None')
        
        (may_be_215059, more_types_in_union_215060) = may_be_none(upper_215057, None_215058)

        if may_be_215059:

            if more_types_in_union_215060:
                # Runtime conditional SSA (line 3129)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 3130):
            
            # Assigning a Name to a Name (line 3130):
            # Getting the type of 'old_upper' (line 3130)
            old_upper_215061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3130, 20), 'old_upper')
            # Assigning a type to the variable 'upper' (line 3130)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3130, 12), 'upper', old_upper_215061)

            if more_types_in_union_215060:
                # SSA join for if statement (line 3129)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to yaxis_inverted(...): (line 3132)
        # Processing the call keyword arguments (line 3132)
        kwargs_215064 = {}
        # Getting the type of 'self' (line 3132)
        self_215062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 11), 'self', False)
        # Obtaining the member 'yaxis_inverted' of a type (line 3132)
        yaxis_inverted_215063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3132, 11), self_215062, 'yaxis_inverted')
        # Calling yaxis_inverted(args, kwargs) (line 3132)
        yaxis_inverted_call_result_215065 = invoke(stypy.reporting.localization.Localization(__file__, 3132, 11), yaxis_inverted_215063, *[], **kwargs_215064)
        
        # Testing the type of an if condition (line 3132)
        if_condition_215066 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3132, 8), yaxis_inverted_call_result_215065)
        # Assigning a type to the variable 'if_condition_215066' (line 3132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3132, 8), 'if_condition_215066', if_condition_215066)
        # SSA begins for if statement (line 3132)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'lower' (line 3133)
        lower_215067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3133, 15), 'lower')
        # Getting the type of 'upper' (line 3133)
        upper_215068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3133, 23), 'upper')
        # Applying the binary operator '<' (line 3133)
        result_lt_215069 = python_operator(stypy.reporting.localization.Localization(__file__, 3133, 15), '<', lower_215067, upper_215068)
        
        # Testing the type of an if condition (line 3133)
        if_condition_215070 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3133, 12), result_lt_215069)
        # Assigning a type to the variable 'if_condition_215070' (line 3133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3133, 12), 'if_condition_215070', if_condition_215070)
        # SSA begins for if statement (line 3133)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_ylim(...): (line 3134)
        # Processing the call arguments (line 3134)
        # Getting the type of 'upper' (line 3134)
        upper_215073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 30), 'upper', False)
        # Getting the type of 'lower' (line 3134)
        lower_215074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 37), 'lower', False)
        # Processing the call keyword arguments (line 3134)
        # Getting the type of 'None' (line 3134)
        None_215075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 49), 'None', False)
        keyword_215076 = None_215075
        kwargs_215077 = {'auto': keyword_215076}
        # Getting the type of 'self' (line 3134)
        self_215071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 16), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 3134)
        set_ylim_215072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3134, 16), self_215071, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 3134)
        set_ylim_call_result_215078 = invoke(stypy.reporting.localization.Localization(__file__, 3134, 16), set_ylim_215072, *[upper_215073, lower_215074], **kwargs_215077)
        
        # SSA branch for the else part of an if statement (line 3133)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_ylim(...): (line 3136)
        # Processing the call arguments (line 3136)
        # Getting the type of 'lower' (line 3136)
        lower_215081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 30), 'lower', False)
        # Getting the type of 'upper' (line 3136)
        upper_215082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 37), 'upper', False)
        # Processing the call keyword arguments (line 3136)
        # Getting the type of 'None' (line 3136)
        None_215083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 49), 'None', False)
        keyword_215084 = None_215083
        kwargs_215085 = {'auto': keyword_215084}
        # Getting the type of 'self' (line 3136)
        self_215079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 16), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 3136)
        set_ylim_215080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3136, 16), self_215079, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 3136)
        set_ylim_call_result_215086 = invoke(stypy.reporting.localization.Localization(__file__, 3136, 16), set_ylim_215080, *[lower_215081, upper_215082], **kwargs_215085)
        
        # SSA join for if statement (line 3133)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 3132)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'lower' (line 3138)
        lower_215087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3138, 15), 'lower')
        # Getting the type of 'upper' (line 3138)
        upper_215088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3138, 23), 'upper')
        # Applying the binary operator '<' (line 3138)
        result_lt_215089 = python_operator(stypy.reporting.localization.Localization(__file__, 3138, 15), '<', lower_215087, upper_215088)
        
        # Testing the type of an if condition (line 3138)
        if_condition_215090 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3138, 12), result_lt_215089)
        # Assigning a type to the variable 'if_condition_215090' (line 3138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3138, 12), 'if_condition_215090', if_condition_215090)
        # SSA begins for if statement (line 3138)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_ylim(...): (line 3139)
        # Processing the call arguments (line 3139)
        # Getting the type of 'lower' (line 3139)
        lower_215093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 30), 'lower', False)
        # Getting the type of 'upper' (line 3139)
        upper_215094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 37), 'upper', False)
        # Processing the call keyword arguments (line 3139)
        # Getting the type of 'None' (line 3139)
        None_215095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 49), 'None', False)
        keyword_215096 = None_215095
        kwargs_215097 = {'auto': keyword_215096}
        # Getting the type of 'self' (line 3139)
        self_215091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 16), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 3139)
        set_ylim_215092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3139, 16), self_215091, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 3139)
        set_ylim_call_result_215098 = invoke(stypy.reporting.localization.Localization(__file__, 3139, 16), set_ylim_215092, *[lower_215093, upper_215094], **kwargs_215097)
        
        # SSA branch for the else part of an if statement (line 3138)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_ylim(...): (line 3141)
        # Processing the call arguments (line 3141)
        # Getting the type of 'upper' (line 3141)
        upper_215101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 30), 'upper', False)
        # Getting the type of 'lower' (line 3141)
        lower_215102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 37), 'lower', False)
        # Processing the call keyword arguments (line 3141)
        # Getting the type of 'None' (line 3141)
        None_215103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 49), 'None', False)
        keyword_215104 = None_215103
        kwargs_215105 = {'auto': keyword_215104}
        # Getting the type of 'self' (line 3141)
        self_215099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 16), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 3141)
        set_ylim_215100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3141, 16), self_215099, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 3141)
        set_ylim_call_result_215106 = invoke(stypy.reporting.localization.Localization(__file__, 3141, 16), set_ylim_215100, *[upper_215101, lower_215102], **kwargs_215105)
        
        # SSA join for if statement (line 3138)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3132)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_ybound(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ybound' in the type store
        # Getting the type of 'stypy_return_type' (line 3116)
        stypy_return_type_215107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215107)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ybound'
        return stypy_return_type_215107


    @norecursion
    def get_ylim(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_ylim'
        module_type_store = module_type_store.open_function_context('get_ylim', 3143, 4, False)
        # Assigning a type to the variable 'self' (line 3144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3144, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_ylim.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_ylim.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_ylim.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_ylim.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_ylim')
        _AxesBase.get_ylim.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_ylim.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_ylim.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_ylim.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_ylim.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_ylim.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_ylim.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_ylim', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ylim', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ylim(...)' code ##################

        unicode_215108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3158, (-1)), 'unicode', u'\n        Get the y-axis range\n\n        Returns\n        -------\n        ylimits : tuple\n            Returns the current y-axis limits as the tuple\n            (`bottom`, `top`).\n\n        Notes\n        -----\n        The y-axis may be inverted, in which case the `bottom` value\n        will be greater than the `top` value.\n\n        ')
        
        # Call to tuple(...): (line 3159)
        # Processing the call arguments (line 3159)
        # Getting the type of 'self' (line 3159)
        self_215110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 21), 'self', False)
        # Obtaining the member 'viewLim' of a type (line 3159)
        viewLim_215111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3159, 21), self_215110, 'viewLim')
        # Obtaining the member 'intervaly' of a type (line 3159)
        intervaly_215112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3159, 21), viewLim_215111, 'intervaly')
        # Processing the call keyword arguments (line 3159)
        kwargs_215113 = {}
        # Getting the type of 'tuple' (line 3159)
        tuple_215109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 15), 'tuple', False)
        # Calling tuple(args, kwargs) (line 3159)
        tuple_call_result_215114 = invoke(stypy.reporting.localization.Localization(__file__, 3159, 15), tuple_215109, *[intervaly_215112], **kwargs_215113)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3159, 8), 'stypy_return_type', tuple_call_result_215114)
        
        # ################# End of 'get_ylim(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ylim' in the type store
        # Getting the type of 'stypy_return_type' (line 3143)
        stypy_return_type_215115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3143, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215115)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ylim'
        return stypy_return_type_215115


    @norecursion
    def set_ylim(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3161)
        None_215116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3161, 30), 'None')
        # Getting the type of 'None' (line 3161)
        None_215117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3161, 40), 'None')
        # Getting the type of 'True' (line 3161)
        True_215118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3161, 51), 'True')
        # Getting the type of 'False' (line 3161)
        False_215119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3161, 62), 'False')
        defaults = [None_215116, None_215117, True_215118, False_215119]
        # Create a new context for function 'set_ylim'
        module_type_store = module_type_store.open_function_context('set_ylim', 3161, 4, False)
        # Assigning a type to the variable 'self' (line 3162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3162, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_ylim.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_ylim.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_ylim.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_ylim.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_ylim')
        _AxesBase.set_ylim.__dict__.__setitem__('stypy_param_names_list', ['bottom', 'top', 'emit', 'auto'])
        _AxesBase.set_ylim.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_ylim.__dict__.__setitem__('stypy_kwargs_param_name', 'kw')
        _AxesBase.set_ylim.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_ylim.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_ylim.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_ylim.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_ylim', ['bottom', 'top', 'emit', 'auto'], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ylim', localization, ['bottom', 'top', 'emit', 'auto'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ylim(...)' code ##################

        unicode_215120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3214, (-1)), 'unicode', u'\n        Set the data limits for the y-axis\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim (default: None, which leaves the bottom\n            limit unchanged).\n\n        top : scalar, optional\n            The top ylim (default: None, which leaves the top limit\n            unchanged).\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: True).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. True turns on,\n            False turns off (default action), None leaves unchanged.\n\n        ylimits : tuple, optional\n            The bottom and top yxlims may be passed as the tuple\n            (`bottom`, `top`) as the first positional argument (or as\n            the `bottom` keyword argument).\n\n        Returns\n        -------\n        ylimits : tuple\n            Returns the new y-axis limits as (`bottom`, `top`).\n\n        Notes\n        -----\n        The `bottom` value may be greater than the `top` value, in which\n        case the y-axis values will decrease from bottom to top.\n\n        Examples\n        --------\n        >>> set_ylim(bottom, top)\n        >>> set_ylim((bottom, top))\n        >>> bottom, top = set_ylim(bottom, top)\n\n        One limit may be left unchanged.\n\n        >>> set_ylim(top=top_lim)\n\n        Limits may be passed in reverse order to flip the direction of\n        the y-axis. For example, suppose `y` represents depth of the\n        ocean in m. The y-axis limits might be set like the following\n        so 5000 m depth is at the bottom of the plot and the surface,\n        0 m, is at the top.\n\n        >>> set_ylim(5000, 0)\n        ')
        
        
        unicode_215121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3215, 11), 'unicode', u'ymin')
        # Getting the type of 'kw' (line 3215)
        kw_215122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3215, 21), 'kw')
        # Applying the binary operator 'in' (line 3215)
        result_contains_215123 = python_operator(stypy.reporting.localization.Localization(__file__, 3215, 11), 'in', unicode_215121, kw_215122)
        
        # Testing the type of an if condition (line 3215)
        if_condition_215124 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3215, 8), result_contains_215123)
        # Assigning a type to the variable 'if_condition_215124' (line 3215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3215, 8), 'if_condition_215124', if_condition_215124)
        # SSA begins for if statement (line 3215)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 3216):
        
        # Assigning a Call to a Name (line 3216):
        
        # Call to pop(...): (line 3216)
        # Processing the call arguments (line 3216)
        unicode_215127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3216, 28), 'unicode', u'ymin')
        # Processing the call keyword arguments (line 3216)
        kwargs_215128 = {}
        # Getting the type of 'kw' (line 3216)
        kw_215125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3216, 21), 'kw', False)
        # Obtaining the member 'pop' of a type (line 3216)
        pop_215126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3216, 21), kw_215125, 'pop')
        # Calling pop(args, kwargs) (line 3216)
        pop_call_result_215129 = invoke(stypy.reporting.localization.Localization(__file__, 3216, 21), pop_215126, *[unicode_215127], **kwargs_215128)
        
        # Assigning a type to the variable 'bottom' (line 3216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3216, 12), 'bottom', pop_call_result_215129)
        # SSA join for if statement (line 3215)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_215130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3217, 11), 'unicode', u'ymax')
        # Getting the type of 'kw' (line 3217)
        kw_215131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3217, 21), 'kw')
        # Applying the binary operator 'in' (line 3217)
        result_contains_215132 = python_operator(stypy.reporting.localization.Localization(__file__, 3217, 11), 'in', unicode_215130, kw_215131)
        
        # Testing the type of an if condition (line 3217)
        if_condition_215133 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3217, 8), result_contains_215132)
        # Assigning a type to the variable 'if_condition_215133' (line 3217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3217, 8), 'if_condition_215133', if_condition_215133)
        # SSA begins for if statement (line 3217)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 3218):
        
        # Assigning a Call to a Name (line 3218):
        
        # Call to pop(...): (line 3218)
        # Processing the call arguments (line 3218)
        unicode_215136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3218, 25), 'unicode', u'ymax')
        # Processing the call keyword arguments (line 3218)
        kwargs_215137 = {}
        # Getting the type of 'kw' (line 3218)
        kw_215134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3218, 18), 'kw', False)
        # Obtaining the member 'pop' of a type (line 3218)
        pop_215135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3218, 18), kw_215134, 'pop')
        # Calling pop(args, kwargs) (line 3218)
        pop_call_result_215138 = invoke(stypy.reporting.localization.Localization(__file__, 3218, 18), pop_215135, *[unicode_215136], **kwargs_215137)
        
        # Assigning a type to the variable 'top' (line 3218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3218, 12), 'top', pop_call_result_215138)
        # SSA join for if statement (line 3217)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'kw' (line 3219)
        kw_215139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3219, 11), 'kw')
        # Testing the type of an if condition (line 3219)
        if_condition_215140 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3219, 8), kw_215139)
        # Assigning a type to the variable 'if_condition_215140' (line 3219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3219, 8), 'if_condition_215140', if_condition_215140)
        # SSA begins for if statement (line 3219)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 3220)
        # Processing the call arguments (line 3220)
        unicode_215142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3220, 29), 'unicode', u'unrecognized kwargs: %s')
        
        # Call to list(...): (line 3220)
        # Processing the call arguments (line 3220)
        # Getting the type of 'kw' (line 3220)
        kw_215144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3220, 62), 'kw', False)
        # Processing the call keyword arguments (line 3220)
        kwargs_215145 = {}
        # Getting the type of 'list' (line 3220)
        list_215143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3220, 57), 'list', False)
        # Calling list(args, kwargs) (line 3220)
        list_call_result_215146 = invoke(stypy.reporting.localization.Localization(__file__, 3220, 57), list_215143, *[kw_215144], **kwargs_215145)
        
        # Applying the binary operator '%' (line 3220)
        result_mod_215147 = python_operator(stypy.reporting.localization.Localization(__file__, 3220, 29), '%', unicode_215142, list_call_result_215146)
        
        # Processing the call keyword arguments (line 3220)
        kwargs_215148 = {}
        # Getting the type of 'ValueError' (line 3220)
        ValueError_215141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3220, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 3220)
        ValueError_call_result_215149 = invoke(stypy.reporting.localization.Localization(__file__, 3220, 18), ValueError_215141, *[result_mod_215147], **kwargs_215148)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3220, 12), ValueError_call_result_215149, 'raise parameter', BaseException)
        # SSA join for if statement (line 3219)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'top' (line 3222)
        top_215150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3222, 11), 'top')
        # Getting the type of 'None' (line 3222)
        None_215151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3222, 18), 'None')
        # Applying the binary operator 'is' (line 3222)
        result_is__215152 = python_operator(stypy.reporting.localization.Localization(__file__, 3222, 11), 'is', top_215150, None_215151)
        
        
        # Call to iterable(...): (line 3222)
        # Processing the call arguments (line 3222)
        # Getting the type of 'bottom' (line 3222)
        bottom_215154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3222, 36), 'bottom', False)
        # Processing the call keyword arguments (line 3222)
        kwargs_215155 = {}
        # Getting the type of 'iterable' (line 3222)
        iterable_215153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3222, 27), 'iterable', False)
        # Calling iterable(args, kwargs) (line 3222)
        iterable_call_result_215156 = invoke(stypy.reporting.localization.Localization(__file__, 3222, 27), iterable_215153, *[bottom_215154], **kwargs_215155)
        
        # Applying the binary operator 'and' (line 3222)
        result_and_keyword_215157 = python_operator(stypy.reporting.localization.Localization(__file__, 3222, 11), 'and', result_is__215152, iterable_call_result_215156)
        
        # Testing the type of an if condition (line 3222)
        if_condition_215158 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3222, 8), result_and_keyword_215157)
        # Assigning a type to the variable 'if_condition_215158' (line 3222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3222, 8), 'if_condition_215158', if_condition_215158)
        # SSA begins for if statement (line 3222)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 3223):
        
        # Assigning a Subscript to a Name (line 3223):
        
        # Obtaining the type of the subscript
        int_215159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3223, 12), 'int')
        # Getting the type of 'bottom' (line 3223)
        bottom_215160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3223, 26), 'bottom')
        # Obtaining the member '__getitem__' of a type (line 3223)
        getitem___215161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3223, 12), bottom_215160, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3223)
        subscript_call_result_215162 = invoke(stypy.reporting.localization.Localization(__file__, 3223, 12), getitem___215161, int_215159)
        
        # Assigning a type to the variable 'tuple_var_assignment_207839' (line 3223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3223, 12), 'tuple_var_assignment_207839', subscript_call_result_215162)
        
        # Assigning a Subscript to a Name (line 3223):
        
        # Obtaining the type of the subscript
        int_215163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3223, 12), 'int')
        # Getting the type of 'bottom' (line 3223)
        bottom_215164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3223, 26), 'bottom')
        # Obtaining the member '__getitem__' of a type (line 3223)
        getitem___215165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3223, 12), bottom_215164, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3223)
        subscript_call_result_215166 = invoke(stypy.reporting.localization.Localization(__file__, 3223, 12), getitem___215165, int_215163)
        
        # Assigning a type to the variable 'tuple_var_assignment_207840' (line 3223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3223, 12), 'tuple_var_assignment_207840', subscript_call_result_215166)
        
        # Assigning a Name to a Name (line 3223):
        # Getting the type of 'tuple_var_assignment_207839' (line 3223)
        tuple_var_assignment_207839_215167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3223, 12), 'tuple_var_assignment_207839')
        # Assigning a type to the variable 'bottom' (line 3223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3223, 12), 'bottom', tuple_var_assignment_207839_215167)
        
        # Assigning a Name to a Name (line 3223):
        # Getting the type of 'tuple_var_assignment_207840' (line 3223)
        tuple_var_assignment_207840_215168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3223, 12), 'tuple_var_assignment_207840')
        # Assigning a type to the variable 'top' (line 3223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3223, 20), 'top', tuple_var_assignment_207840_215168)
        # SSA join for if statement (line 3222)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3225):
        
        # Assigning a Call to a Name (line 3225):
        
        # Call to _validate_converted_limits(...): (line 3225)
        # Processing the call arguments (line 3225)
        # Getting the type of 'bottom' (line 3225)
        bottom_215171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3225, 49), 'bottom', False)
        # Getting the type of 'self' (line 3225)
        self_215172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3225, 57), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 3225)
        convert_yunits_215173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3225, 57), self_215172, 'convert_yunits')
        # Processing the call keyword arguments (line 3225)
        kwargs_215174 = {}
        # Getting the type of 'self' (line 3225)
        self_215169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3225, 17), 'self', False)
        # Obtaining the member '_validate_converted_limits' of a type (line 3225)
        _validate_converted_limits_215170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3225, 17), self_215169, '_validate_converted_limits')
        # Calling _validate_converted_limits(args, kwargs) (line 3225)
        _validate_converted_limits_call_result_215175 = invoke(stypy.reporting.localization.Localization(__file__, 3225, 17), _validate_converted_limits_215170, *[bottom_215171, convert_yunits_215173], **kwargs_215174)
        
        # Assigning a type to the variable 'bottom' (line 3225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3225, 8), 'bottom', _validate_converted_limits_call_result_215175)
        
        # Assigning a Call to a Name (line 3226):
        
        # Assigning a Call to a Name (line 3226):
        
        # Call to _validate_converted_limits(...): (line 3226)
        # Processing the call arguments (line 3226)
        # Getting the type of 'top' (line 3226)
        top_215178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3226, 46), 'top', False)
        # Getting the type of 'self' (line 3226)
        self_215179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3226, 51), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 3226)
        convert_yunits_215180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3226, 51), self_215179, 'convert_yunits')
        # Processing the call keyword arguments (line 3226)
        kwargs_215181 = {}
        # Getting the type of 'self' (line 3226)
        self_215176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3226, 14), 'self', False)
        # Obtaining the member '_validate_converted_limits' of a type (line 3226)
        _validate_converted_limits_215177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3226, 14), self_215176, '_validate_converted_limits')
        # Calling _validate_converted_limits(args, kwargs) (line 3226)
        _validate_converted_limits_call_result_215182 = invoke(stypy.reporting.localization.Localization(__file__, 3226, 14), _validate_converted_limits_215177, *[top_215178, convert_yunits_215180], **kwargs_215181)
        
        # Assigning a type to the variable 'top' (line 3226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3226, 8), 'top', _validate_converted_limits_call_result_215182)
        
        # Assigning a Call to a Tuple (line 3228):
        
        # Assigning a Call to a Name:
        
        # Call to get_ylim(...): (line 3228)
        # Processing the call keyword arguments (line 3228)
        kwargs_215185 = {}
        # Getting the type of 'self' (line 3228)
        self_215183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3228, 30), 'self', False)
        # Obtaining the member 'get_ylim' of a type (line 3228)
        get_ylim_215184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3228, 30), self_215183, 'get_ylim')
        # Calling get_ylim(args, kwargs) (line 3228)
        get_ylim_call_result_215186 = invoke(stypy.reporting.localization.Localization(__file__, 3228, 30), get_ylim_215184, *[], **kwargs_215185)
        
        # Assigning a type to the variable 'call_assignment_207841' (line 3228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3228, 8), 'call_assignment_207841', get_ylim_call_result_215186)
        
        # Assigning a Call to a Name (line 3228):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3228, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215190 = {}
        # Getting the type of 'call_assignment_207841' (line 3228)
        call_assignment_207841_215187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3228, 8), 'call_assignment_207841', False)
        # Obtaining the member '__getitem__' of a type (line 3228)
        getitem___215188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3228, 8), call_assignment_207841_215187, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215191 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215188, *[int_215189], **kwargs_215190)
        
        # Assigning a type to the variable 'call_assignment_207842' (line 3228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3228, 8), 'call_assignment_207842', getitem___call_result_215191)
        
        # Assigning a Name to a Name (line 3228):
        # Getting the type of 'call_assignment_207842' (line 3228)
        call_assignment_207842_215192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3228, 8), 'call_assignment_207842')
        # Assigning a type to the variable 'old_bottom' (line 3228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3228, 8), 'old_bottom', call_assignment_207842_215192)
        
        # Assigning a Call to a Name (line 3228):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3228, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215196 = {}
        # Getting the type of 'call_assignment_207841' (line 3228)
        call_assignment_207841_215193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3228, 8), 'call_assignment_207841', False)
        # Obtaining the member '__getitem__' of a type (line 3228)
        getitem___215194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3228, 8), call_assignment_207841_215193, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215197 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215194, *[int_215195], **kwargs_215196)
        
        # Assigning a type to the variable 'call_assignment_207843' (line 3228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3228, 8), 'call_assignment_207843', getitem___call_result_215197)
        
        # Assigning a Name to a Name (line 3228):
        # Getting the type of 'call_assignment_207843' (line 3228)
        call_assignment_207843_215198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3228, 8), 'call_assignment_207843')
        # Assigning a type to the variable 'old_top' (line 3228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3228, 20), 'old_top', call_assignment_207843_215198)
        
        # Type idiom detected: calculating its left and rigth part (line 3230)
        # Getting the type of 'bottom' (line 3230)
        bottom_215199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3230, 11), 'bottom')
        # Getting the type of 'None' (line 3230)
        None_215200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3230, 21), 'None')
        
        (may_be_215201, more_types_in_union_215202) = may_be_none(bottom_215199, None_215200)

        if may_be_215201:

            if more_types_in_union_215202:
                # Runtime conditional SSA (line 3230)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 3231):
            
            # Assigning a Name to a Name (line 3231):
            # Getting the type of 'old_bottom' (line 3231)
            old_bottom_215203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3231, 21), 'old_bottom')
            # Assigning a type to the variable 'bottom' (line 3231)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3231, 12), 'bottom', old_bottom_215203)

            if more_types_in_union_215202:
                # SSA join for if statement (line 3230)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 3232)
        # Getting the type of 'top' (line 3232)
        top_215204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3232, 11), 'top')
        # Getting the type of 'None' (line 3232)
        None_215205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3232, 18), 'None')
        
        (may_be_215206, more_types_in_union_215207) = may_be_none(top_215204, None_215205)

        if may_be_215206:

            if more_types_in_union_215207:
                # Runtime conditional SSA (line 3232)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 3233):
            
            # Assigning a Name to a Name (line 3233):
            # Getting the type of 'old_top' (line 3233)
            old_top_215208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3233, 18), 'old_top')
            # Assigning a type to the variable 'top' (line 3233)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3233, 12), 'top', old_top_215208)

            if more_types_in_union_215207:
                # SSA join for if statement (line 3232)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'bottom' (line 3235)
        bottom_215209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 11), 'bottom')
        # Getting the type of 'top' (line 3235)
        top_215210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 21), 'top')
        # Applying the binary operator '==' (line 3235)
        result_eq_215211 = python_operator(stypy.reporting.localization.Localization(__file__, 3235, 11), '==', bottom_215209, top_215210)
        
        # Testing the type of an if condition (line 3235)
        if_condition_215212 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3235, 8), result_eq_215211)
        # Assigning a type to the variable 'if_condition_215212' (line 3235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3235, 8), 'if_condition_215212', if_condition_215212)
        # SSA begins for if statement (line 3235)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 3236)
        # Processing the call arguments (line 3236)
        unicode_215215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3237, 17), 'unicode', u'Attempting to set identical bottom==top results\nin singular transformations; automatically expanding.\nbottom=%s, top=%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3239)
        tuple_215216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3239, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3239)
        # Adding element type (line 3239)
        # Getting the type of 'bottom' (line 3239)
        bottom_215217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3239, 41), 'bottom', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3239, 41), tuple_215216, bottom_215217)
        # Adding element type (line 3239)
        # Getting the type of 'top' (line 3239)
        top_215218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3239, 49), 'top', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3239, 41), tuple_215216, top_215218)
        
        # Applying the binary operator '%' (line 3237)
        result_mod_215219 = python_operator(stypy.reporting.localization.Localization(__file__, 3237, 16), '%', unicode_215215, tuple_215216)
        
        # Processing the call keyword arguments (line 3236)
        kwargs_215220 = {}
        # Getting the type of 'warnings' (line 3236)
        warnings_215213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3236, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3236)
        warn_215214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3236, 12), warnings_215213, 'warn')
        # Calling warn(args, kwargs) (line 3236)
        warn_call_result_215221 = invoke(stypy.reporting.localization.Localization(__file__, 3236, 12), warn_215214, *[result_mod_215219], **kwargs_215220)
        
        # SSA join for if statement (line 3235)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 3241):
        
        # Assigning a Call to a Name:
        
        # Call to nonsingular(...): (line 3241)
        # Processing the call arguments (line 3241)
        # Getting the type of 'bottom' (line 3241)
        bottom_215224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3241, 46), 'bottom', False)
        # Getting the type of 'top' (line 3241)
        top_215225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3241, 54), 'top', False)
        # Processing the call keyword arguments (line 3241)
        # Getting the type of 'False' (line 3241)
        False_215226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3241, 70), 'False', False)
        keyword_215227 = False_215226
        kwargs_215228 = {'increasing': keyword_215227}
        # Getting the type of 'mtransforms' (line 3241)
        mtransforms_215222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3241, 22), 'mtransforms', False)
        # Obtaining the member 'nonsingular' of a type (line 3241)
        nonsingular_215223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3241, 22), mtransforms_215222, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 3241)
        nonsingular_call_result_215229 = invoke(stypy.reporting.localization.Localization(__file__, 3241, 22), nonsingular_215223, *[bottom_215224, top_215225], **kwargs_215228)
        
        # Assigning a type to the variable 'call_assignment_207844' (line 3241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3241, 8), 'call_assignment_207844', nonsingular_call_result_215229)
        
        # Assigning a Call to a Name (line 3241):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3241, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215233 = {}
        # Getting the type of 'call_assignment_207844' (line 3241)
        call_assignment_207844_215230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3241, 8), 'call_assignment_207844', False)
        # Obtaining the member '__getitem__' of a type (line 3241)
        getitem___215231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3241, 8), call_assignment_207844_215230, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215234 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215231, *[int_215232], **kwargs_215233)
        
        # Assigning a type to the variable 'call_assignment_207845' (line 3241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3241, 8), 'call_assignment_207845', getitem___call_result_215234)
        
        # Assigning a Name to a Name (line 3241):
        # Getting the type of 'call_assignment_207845' (line 3241)
        call_assignment_207845_215235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3241, 8), 'call_assignment_207845')
        # Assigning a type to the variable 'bottom' (line 3241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3241, 8), 'bottom', call_assignment_207845_215235)
        
        # Assigning a Call to a Name (line 3241):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3241, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215239 = {}
        # Getting the type of 'call_assignment_207844' (line 3241)
        call_assignment_207844_215236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3241, 8), 'call_assignment_207844', False)
        # Obtaining the member '__getitem__' of a type (line 3241)
        getitem___215237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3241, 8), call_assignment_207844_215236, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215240 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215237, *[int_215238], **kwargs_215239)
        
        # Assigning a type to the variable 'call_assignment_207846' (line 3241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3241, 8), 'call_assignment_207846', getitem___call_result_215240)
        
        # Assigning a Name to a Name (line 3241):
        # Getting the type of 'call_assignment_207846' (line 3241)
        call_assignment_207846_215241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3241, 8), 'call_assignment_207846')
        # Assigning a type to the variable 'top' (line 3241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3241, 16), 'top', call_assignment_207846_215241)
        
        
        # Evaluating a boolean operation
        
        
        # Call to get_yscale(...): (line 3243)
        # Processing the call keyword arguments (line 3243)
        kwargs_215244 = {}
        # Getting the type of 'self' (line 3243)
        self_215242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3243, 11), 'self', False)
        # Obtaining the member 'get_yscale' of a type (line 3243)
        get_yscale_215243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3243, 11), self_215242, 'get_yscale')
        # Calling get_yscale(args, kwargs) (line 3243)
        get_yscale_call_result_215245 = invoke(stypy.reporting.localization.Localization(__file__, 3243, 11), get_yscale_215243, *[], **kwargs_215244)
        
        unicode_215246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3243, 32), 'unicode', u'log')
        # Applying the binary operator '==' (line 3243)
        result_eq_215247 = python_operator(stypy.reporting.localization.Localization(__file__, 3243, 11), '==', get_yscale_call_result_215245, unicode_215246)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'bottom' (line 3243)
        bottom_215248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3243, 43), 'bottom')
        float_215249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3243, 53), 'float')
        # Applying the binary operator '<=' (line 3243)
        result_le_215250 = python_operator(stypy.reporting.localization.Localization(__file__, 3243, 43), '<=', bottom_215248, float_215249)
        
        
        # Getting the type of 'top' (line 3243)
        top_215251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3243, 60), 'top')
        float_215252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3243, 67), 'float')
        # Applying the binary operator '<=' (line 3243)
        result_le_215253 = python_operator(stypy.reporting.localization.Localization(__file__, 3243, 60), '<=', top_215251, float_215252)
        
        # Applying the binary operator 'or' (line 3243)
        result_or_keyword_215254 = python_operator(stypy.reporting.localization.Localization(__file__, 3243, 43), 'or', result_le_215250, result_le_215253)
        
        # Applying the binary operator 'and' (line 3243)
        result_and_keyword_215255 = python_operator(stypy.reporting.localization.Localization(__file__, 3243, 11), 'and', result_eq_215247, result_or_keyword_215254)
        
        # Testing the type of an if condition (line 3243)
        if_condition_215256 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3243, 8), result_and_keyword_215255)
        # Assigning a type to the variable 'if_condition_215256' (line 3243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3243, 8), 'if_condition_215256', if_condition_215256)
        # SSA begins for if statement (line 3243)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 3244)
        # Processing the call arguments (line 3244)
        unicode_215259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3245, 16), 'unicode', u'Attempted to set non-positive ylimits for log-scale axis; invalid limits will be ignored.')
        # Processing the call keyword arguments (line 3244)
        kwargs_215260 = {}
        # Getting the type of 'warnings' (line 3244)
        warnings_215257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3244, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3244)
        warn_215258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3244, 12), warnings_215257, 'warn')
        # Calling warn(args, kwargs) (line 3244)
        warn_call_result_215261 = invoke(stypy.reporting.localization.Localization(__file__, 3244, 12), warn_215258, *[unicode_215259], **kwargs_215260)
        
        # SSA join for if statement (line 3243)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 3247):
        
        # Assigning a Call to a Name:
        
        # Call to limit_range_for_scale(...): (line 3247)
        # Processing the call arguments (line 3247)
        # Getting the type of 'bottom' (line 3247)
        bottom_215265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 55), 'bottom', False)
        # Getting the type of 'top' (line 3247)
        top_215266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 63), 'top', False)
        # Processing the call keyword arguments (line 3247)
        kwargs_215267 = {}
        # Getting the type of 'self' (line 3247)
        self_215262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 22), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 3247)
        yaxis_215263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3247, 22), self_215262, 'yaxis')
        # Obtaining the member 'limit_range_for_scale' of a type (line 3247)
        limit_range_for_scale_215264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3247, 22), yaxis_215263, 'limit_range_for_scale')
        # Calling limit_range_for_scale(args, kwargs) (line 3247)
        limit_range_for_scale_call_result_215268 = invoke(stypy.reporting.localization.Localization(__file__, 3247, 22), limit_range_for_scale_215264, *[bottom_215265, top_215266], **kwargs_215267)
        
        # Assigning a type to the variable 'call_assignment_207847' (line 3247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3247, 8), 'call_assignment_207847', limit_range_for_scale_call_result_215268)
        
        # Assigning a Call to a Name (line 3247):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3247, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215272 = {}
        # Getting the type of 'call_assignment_207847' (line 3247)
        call_assignment_207847_215269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 8), 'call_assignment_207847', False)
        # Obtaining the member '__getitem__' of a type (line 3247)
        getitem___215270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3247, 8), call_assignment_207847_215269, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215273 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215270, *[int_215271], **kwargs_215272)
        
        # Assigning a type to the variable 'call_assignment_207848' (line 3247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3247, 8), 'call_assignment_207848', getitem___call_result_215273)
        
        # Assigning a Name to a Name (line 3247):
        # Getting the type of 'call_assignment_207848' (line 3247)
        call_assignment_207848_215274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 8), 'call_assignment_207848')
        # Assigning a type to the variable 'bottom' (line 3247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3247, 8), 'bottom', call_assignment_207848_215274)
        
        # Assigning a Call to a Name (line 3247):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3247, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215278 = {}
        # Getting the type of 'call_assignment_207847' (line 3247)
        call_assignment_207847_215275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 8), 'call_assignment_207847', False)
        # Obtaining the member '__getitem__' of a type (line 3247)
        getitem___215276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3247, 8), call_assignment_207847_215275, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215279 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215276, *[int_215277], **kwargs_215278)
        
        # Assigning a type to the variable 'call_assignment_207849' (line 3247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3247, 8), 'call_assignment_207849', getitem___call_result_215279)
        
        # Assigning a Name to a Name (line 3247):
        # Getting the type of 'call_assignment_207849' (line 3247)
        call_assignment_207849_215280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 8), 'call_assignment_207849')
        # Assigning a type to the variable 'top' (line 3247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3247, 16), 'top', call_assignment_207849_215280)
        
        # Assigning a Tuple to a Attribute (line 3249):
        
        # Assigning a Tuple to a Attribute (line 3249):
        
        # Obtaining an instance of the builtin type 'tuple' (line 3249)
        tuple_215281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3249, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3249)
        # Adding element type (line 3249)
        # Getting the type of 'bottom' (line 3249)
        bottom_215282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 34), 'bottom')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3249, 34), tuple_215281, bottom_215282)
        # Adding element type (line 3249)
        # Getting the type of 'top' (line 3249)
        top_215283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 42), 'top')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3249, 34), tuple_215281, top_215283)
        
        # Getting the type of 'self' (line 3249)
        self_215284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 8), 'self')
        # Obtaining the member 'viewLim' of a type (line 3249)
        viewLim_215285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3249, 8), self_215284, 'viewLim')
        # Setting the type of the member 'intervaly' of a type (line 3249)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3249, 8), viewLim_215285, 'intervaly', tuple_215281)
        
        # Type idiom detected: calculating its left and rigth part (line 3250)
        # Getting the type of 'auto' (line 3250)
        auto_215286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3250, 8), 'auto')
        # Getting the type of 'None' (line 3250)
        None_215287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3250, 23), 'None')
        
        (may_be_215288, more_types_in_union_215289) = may_not_be_none(auto_215286, None_215287)

        if may_be_215288:

            if more_types_in_union_215289:
                # Runtime conditional SSA (line 3250)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 3251):
            
            # Assigning a Call to a Attribute (line 3251):
            
            # Call to bool(...): (line 3251)
            # Processing the call arguments (line 3251)
            # Getting the type of 'auto' (line 3251)
            auto_215291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3251, 38), 'auto', False)
            # Processing the call keyword arguments (line 3251)
            kwargs_215292 = {}
            # Getting the type of 'bool' (line 3251)
            bool_215290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3251, 33), 'bool', False)
            # Calling bool(args, kwargs) (line 3251)
            bool_call_result_215293 = invoke(stypy.reporting.localization.Localization(__file__, 3251, 33), bool_215290, *[auto_215291], **kwargs_215292)
            
            # Getting the type of 'self' (line 3251)
            self_215294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3251, 12), 'self')
            # Setting the type of the member '_autoscaleYon' of a type (line 3251)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3251, 12), self_215294, '_autoscaleYon', bool_call_result_215293)

            if more_types_in_union_215289:
                # SSA join for if statement (line 3250)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'emit' (line 3253)
        emit_215295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3253, 11), 'emit')
        # Testing the type of an if condition (line 3253)
        if_condition_215296 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3253, 8), emit_215295)
        # Assigning a type to the variable 'if_condition_215296' (line 3253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3253, 8), 'if_condition_215296', if_condition_215296)
        # SSA begins for if statement (line 3253)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to process(...): (line 3254)
        # Processing the call arguments (line 3254)
        unicode_215300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3254, 35), 'unicode', u'ylim_changed')
        # Getting the type of 'self' (line 3254)
        self_215301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3254, 51), 'self', False)
        # Processing the call keyword arguments (line 3254)
        kwargs_215302 = {}
        # Getting the type of 'self' (line 3254)
        self_215297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3254, 12), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 3254)
        callbacks_215298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3254, 12), self_215297, 'callbacks')
        # Obtaining the member 'process' of a type (line 3254)
        process_215299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3254, 12), callbacks_215298, 'process')
        # Calling process(args, kwargs) (line 3254)
        process_call_result_215303 = invoke(stypy.reporting.localization.Localization(__file__, 3254, 12), process_215299, *[unicode_215300, self_215301], **kwargs_215302)
        
        
        
        # Call to get_siblings(...): (line 3256)
        # Processing the call arguments (line 3256)
        # Getting the type of 'self' (line 3256)
        self_215307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3256, 58), 'self', False)
        # Processing the call keyword arguments (line 3256)
        kwargs_215308 = {}
        # Getting the type of 'self' (line 3256)
        self_215304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3256, 25), 'self', False)
        # Obtaining the member '_shared_y_axes' of a type (line 3256)
        _shared_y_axes_215305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3256, 25), self_215304, '_shared_y_axes')
        # Obtaining the member 'get_siblings' of a type (line 3256)
        get_siblings_215306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3256, 25), _shared_y_axes_215305, 'get_siblings')
        # Calling get_siblings(args, kwargs) (line 3256)
        get_siblings_call_result_215309 = invoke(stypy.reporting.localization.Localization(__file__, 3256, 25), get_siblings_215306, *[self_215307], **kwargs_215308)
        
        # Testing the type of a for loop iterable (line 3256)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3256, 12), get_siblings_call_result_215309)
        # Getting the type of the for loop variable (line 3256)
        for_loop_var_215310 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3256, 12), get_siblings_call_result_215309)
        # Assigning a type to the variable 'other' (line 3256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3256, 12), 'other', for_loop_var_215310)
        # SSA begins for a for statement (line 3256)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'other' (line 3257)
        other_215311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3257, 19), 'other')
        # Getting the type of 'self' (line 3257)
        self_215312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3257, 32), 'self')
        # Applying the binary operator 'isnot' (line 3257)
        result_is_not_215313 = python_operator(stypy.reporting.localization.Localization(__file__, 3257, 19), 'isnot', other_215311, self_215312)
        
        # Testing the type of an if condition (line 3257)
        if_condition_215314 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3257, 16), result_is_not_215313)
        # Assigning a type to the variable 'if_condition_215314' (line 3257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3257, 16), 'if_condition_215314', if_condition_215314)
        # SSA begins for if statement (line 3257)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_ylim(...): (line 3258)
        # Processing the call arguments (line 3258)
        # Getting the type of 'self' (line 3258)
        self_215317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3258, 35), 'self', False)
        # Obtaining the member 'viewLim' of a type (line 3258)
        viewLim_215318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3258, 35), self_215317, 'viewLim')
        # Obtaining the member 'intervaly' of a type (line 3258)
        intervaly_215319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3258, 35), viewLim_215318, 'intervaly')
        # Processing the call keyword arguments (line 3258)
        # Getting the type of 'False' (line 3259)
        False_215320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3259, 40), 'False', False)
        keyword_215321 = False_215320
        # Getting the type of 'auto' (line 3259)
        auto_215322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3259, 52), 'auto', False)
        keyword_215323 = auto_215322
        kwargs_215324 = {'auto': keyword_215323, 'emit': keyword_215321}
        # Getting the type of 'other' (line 3258)
        other_215315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3258, 20), 'other', False)
        # Obtaining the member 'set_ylim' of a type (line 3258)
        set_ylim_215316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3258, 20), other_215315, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 3258)
        set_ylim_call_result_215325 = invoke(stypy.reporting.localization.Localization(__file__, 3258, 20), set_ylim_215316, *[intervaly_215319], **kwargs_215324)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'other' (line 3260)
        other_215326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3260, 24), 'other')
        # Obtaining the member 'figure' of a type (line 3260)
        figure_215327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3260, 24), other_215326, 'figure')
        # Getting the type of 'self' (line 3260)
        self_215328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3260, 40), 'self')
        # Obtaining the member 'figure' of a type (line 3260)
        figure_215329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3260, 40), self_215328, 'figure')
        # Applying the binary operator '!=' (line 3260)
        result_ne_215330 = python_operator(stypy.reporting.localization.Localization(__file__, 3260, 24), '!=', figure_215327, figure_215329)
        
        
        # Getting the type of 'other' (line 3261)
        other_215331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3261, 28), 'other')
        # Obtaining the member 'figure' of a type (line 3261)
        figure_215332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3261, 28), other_215331, 'figure')
        # Obtaining the member 'canvas' of a type (line 3261)
        canvas_215333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3261, 28), figure_215332, 'canvas')
        # Getting the type of 'None' (line 3261)
        None_215334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3261, 55), 'None')
        # Applying the binary operator 'isnot' (line 3261)
        result_is_not_215335 = python_operator(stypy.reporting.localization.Localization(__file__, 3261, 28), 'isnot', canvas_215333, None_215334)
        
        # Applying the binary operator 'and' (line 3260)
        result_and_keyword_215336 = python_operator(stypy.reporting.localization.Localization(__file__, 3260, 24), 'and', result_ne_215330, result_is_not_215335)
        
        # Testing the type of an if condition (line 3260)
        if_condition_215337 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3260, 20), result_and_keyword_215336)
        # Assigning a type to the variable 'if_condition_215337' (line 3260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3260, 20), 'if_condition_215337', if_condition_215337)
        # SSA begins for if statement (line 3260)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw_idle(...): (line 3262)
        # Processing the call keyword arguments (line 3262)
        kwargs_215342 = {}
        # Getting the type of 'other' (line 3262)
        other_215338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 24), 'other', False)
        # Obtaining the member 'figure' of a type (line 3262)
        figure_215339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3262, 24), other_215338, 'figure')
        # Obtaining the member 'canvas' of a type (line 3262)
        canvas_215340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3262, 24), figure_215339, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 3262)
        draw_idle_215341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3262, 24), canvas_215340, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 3262)
        draw_idle_call_result_215343 = invoke(stypy.reporting.localization.Localization(__file__, 3262, 24), draw_idle_215341, *[], **kwargs_215342)
        
        # SSA join for if statement (line 3260)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3257)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3253)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 3263):
        
        # Assigning a Name to a Attribute (line 3263):
        # Getting the type of 'True' (line 3263)
        True_215344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3263, 21), 'True')
        # Getting the type of 'self' (line 3263)
        self_215345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3263, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 3263)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3263, 8), self_215345, 'stale', True_215344)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3264)
        tuple_215346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3264, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3264)
        # Adding element type (line 3264)
        # Getting the type of 'bottom' (line 3264)
        bottom_215347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3264, 15), 'bottom')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3264, 15), tuple_215346, bottom_215347)
        # Adding element type (line 3264)
        # Getting the type of 'top' (line 3264)
        top_215348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3264, 23), 'top')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3264, 15), tuple_215346, top_215348)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3264, 8), 'stypy_return_type', tuple_215346)
        
        # ################# End of 'set_ylim(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ylim' in the type store
        # Getting the type of 'stypy_return_type' (line 3161)
        stypy_return_type_215349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3161, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215349)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ylim'
        return stypy_return_type_215349


    @norecursion
    def get_yscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_yscale'
        module_type_store = module_type_store.open_function_context('get_yscale', 3266, 4, False)
        # Assigning a type to the variable 'self' (line 3267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3267, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_yscale.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_yscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_yscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_yscale.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_yscale')
        _AxesBase.get_yscale.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_yscale.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_yscale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_yscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_yscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_yscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_yscale.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_yscale', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_yscale', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_yscale(...)' code ##################

        
        # Call to get_scale(...): (line 3267)
        # Processing the call keyword arguments (line 3267)
        kwargs_215353 = {}
        # Getting the type of 'self' (line 3267)
        self_215350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3267, 15), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 3267)
        yaxis_215351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3267, 15), self_215350, 'yaxis')
        # Obtaining the member 'get_scale' of a type (line 3267)
        get_scale_215352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3267, 15), yaxis_215351, 'get_scale')
        # Calling get_scale(args, kwargs) (line 3267)
        get_scale_call_result_215354 = invoke(stypy.reporting.localization.Localization(__file__, 3267, 15), get_scale_215352, *[], **kwargs_215353)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3267, 8), 'stypy_return_type', get_scale_call_result_215354)
        
        # ################# End of 'get_yscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_yscale' in the type store
        # Getting the type of 'stypy_return_type' (line 3266)
        stypy_return_type_215355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3266, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215355)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_yscale'
        return stypy_return_type_215355

    
    # Assigning a BinOp to a Attribute (line 3268):

    @norecursion
    def set_yscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_yscale'
        module_type_store = module_type_store.open_function_context('set_yscale', 3271, 4, False)
        # Assigning a type to the variable 'self' (line 3272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3272, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_yscale.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_yscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_yscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_yscale.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_yscale')
        _AxesBase.set_yscale.__dict__.__setitem__('stypy_param_names_list', ['value'])
        _AxesBase.set_yscale.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_yscale.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _AxesBase.set_yscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_yscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_yscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_yscale.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_yscale', ['value'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_yscale', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_yscale(...)' code ##################

        unicode_215356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3294, (-1)), 'unicode', u'\n        Set the y-axis scale\n\n        Parameters\n        ----------\n        value : {"linear", "log", "symlog", "logit"}\n            scaling strategy to apply\n\n        Notes\n        -----\n        Different kwargs are accepted, depending on the scale. See\n        the `~matplotlib.scale` module for more information.\n\n        See also\n        --------\n        matplotlib.scale.LinearScale : linear transfrom\n\n        matplotlib.scale.LogTransform : log transform\n\n        matplotlib.scale.SymmetricalLogTransform : symlog transform\n\n        matplotlib.scale.LogisticTransform : logit transform\n        ')
        
        
        # Evaluating a boolean operation
        
        
        # Call to lower(...): (line 3297)
        # Processing the call keyword arguments (line 3297)
        kwargs_215359 = {}
        # Getting the type of 'value' (line 3297)
        value_215357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3297, 11), 'value', False)
        # Obtaining the member 'lower' of a type (line 3297)
        lower_215358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3297, 11), value_215357, 'lower')
        # Calling lower(args, kwargs) (line 3297)
        lower_call_result_215360 = invoke(stypy.reporting.localization.Localization(__file__, 3297, 11), lower_215358, *[], **kwargs_215359)
        
        unicode_215361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3297, 28), 'unicode', u'log')
        # Applying the binary operator '==' (line 3297)
        result_eq_215362 = python_operator(stypy.reporting.localization.Localization(__file__, 3297, 11), '==', lower_call_result_215360, unicode_215361)
        
        
        unicode_215363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3297, 38), 'unicode', u'nonposy')
        # Getting the type of 'kwargs' (line 3297)
        kwargs_215364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3297, 55), 'kwargs')
        # Applying the binary operator 'notin' (line 3297)
        result_contains_215365 = python_operator(stypy.reporting.localization.Localization(__file__, 3297, 38), 'notin', unicode_215363, kwargs_215364)
        
        # Applying the binary operator 'and' (line 3297)
        result_and_keyword_215366 = python_operator(stypy.reporting.localization.Localization(__file__, 3297, 11), 'and', result_eq_215362, result_contains_215365)
        
        # Testing the type of an if condition (line 3297)
        if_condition_215367 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3297, 8), result_and_keyword_215366)
        # Assigning a type to the variable 'if_condition_215367' (line 3297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3297, 8), 'if_condition_215367', if_condition_215367)
        # SSA begins for if statement (line 3297)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Subscript (line 3298):
        
        # Assigning a Str to a Subscript (line 3298):
        unicode_215368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3298, 32), 'unicode', u'mask')
        # Getting the type of 'kwargs' (line 3298)
        kwargs_215369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3298, 12), 'kwargs')
        unicode_215370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3298, 19), 'unicode', u'nonposy')
        # Storing an element on a container (line 3298)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3298, 12), kwargs_215369, (unicode_215370, unicode_215368))
        # SSA join for if statement (line 3297)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3300):
        
        # Assigning a Call to a Name (line 3300):
        
        # Call to get_shared_y_axes(...): (line 3300)
        # Processing the call keyword arguments (line 3300)
        kwargs_215373 = {}
        # Getting the type of 'self' (line 3300)
        self_215371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3300, 12), 'self', False)
        # Obtaining the member 'get_shared_y_axes' of a type (line 3300)
        get_shared_y_axes_215372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3300, 12), self_215371, 'get_shared_y_axes')
        # Calling get_shared_y_axes(args, kwargs) (line 3300)
        get_shared_y_axes_call_result_215374 = invoke(stypy.reporting.localization.Localization(__file__, 3300, 12), get_shared_y_axes_215372, *[], **kwargs_215373)
        
        # Assigning a type to the variable 'g' (line 3300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3300, 8), 'g', get_shared_y_axes_call_result_215374)
        
        
        # Call to get_siblings(...): (line 3301)
        # Processing the call arguments (line 3301)
        # Getting the type of 'self' (line 3301)
        self_215377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3301, 33), 'self', False)
        # Processing the call keyword arguments (line 3301)
        kwargs_215378 = {}
        # Getting the type of 'g' (line 3301)
        g_215375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3301, 18), 'g', False)
        # Obtaining the member 'get_siblings' of a type (line 3301)
        get_siblings_215376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3301, 18), g_215375, 'get_siblings')
        # Calling get_siblings(args, kwargs) (line 3301)
        get_siblings_call_result_215379 = invoke(stypy.reporting.localization.Localization(__file__, 3301, 18), get_siblings_215376, *[self_215377], **kwargs_215378)
        
        # Testing the type of a for loop iterable (line 3301)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3301, 8), get_siblings_call_result_215379)
        # Getting the type of the for loop variable (line 3301)
        for_loop_var_215380 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3301, 8), get_siblings_call_result_215379)
        # Assigning a type to the variable 'ax' (line 3301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3301, 8), 'ax', for_loop_var_215380)
        # SSA begins for a for statement (line 3301)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to _set_scale(...): (line 3302)
        # Processing the call arguments (line 3302)
        # Getting the type of 'value' (line 3302)
        value_215384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3302, 32), 'value', False)
        # Processing the call keyword arguments (line 3302)
        # Getting the type of 'kwargs' (line 3302)
        kwargs_215385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3302, 41), 'kwargs', False)
        kwargs_215386 = {'kwargs_215385': kwargs_215385}
        # Getting the type of 'ax' (line 3302)
        ax_215381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3302, 12), 'ax', False)
        # Obtaining the member 'yaxis' of a type (line 3302)
        yaxis_215382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3302, 12), ax_215381, 'yaxis')
        # Obtaining the member '_set_scale' of a type (line 3302)
        _set_scale_215383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3302, 12), yaxis_215382, '_set_scale')
        # Calling _set_scale(args, kwargs) (line 3302)
        _set_scale_call_result_215387 = invoke(stypy.reporting.localization.Localization(__file__, 3302, 12), _set_scale_215383, *[value_215384], **kwargs_215386)
        
        
        # Call to _update_transScale(...): (line 3303)
        # Processing the call keyword arguments (line 3303)
        kwargs_215390 = {}
        # Getting the type of 'ax' (line 3303)
        ax_215388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3303, 12), 'ax', False)
        # Obtaining the member '_update_transScale' of a type (line 3303)
        _update_transScale_215389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3303, 12), ax_215388, '_update_transScale')
        # Calling _update_transScale(args, kwargs) (line 3303)
        _update_transScale_call_result_215391 = invoke(stypy.reporting.localization.Localization(__file__, 3303, 12), _update_transScale_215389, *[], **kwargs_215390)
        
        
        # Assigning a Name to a Attribute (line 3304):
        
        # Assigning a Name to a Attribute (line 3304):
        # Getting the type of 'True' (line 3304)
        True_215392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3304, 23), 'True')
        # Getting the type of 'ax' (line 3304)
        ax_215393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3304, 12), 'ax')
        # Setting the type of the member 'stale' of a type (line 3304)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3304, 12), ax_215393, 'stale', True_215392)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to autoscale_view(...): (line 3305)
        # Processing the call keyword arguments (line 3305)
        # Getting the type of 'False' (line 3305)
        False_215396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 35), 'False', False)
        keyword_215397 = False_215396
        kwargs_215398 = {'scalex': keyword_215397}
        # Getting the type of 'self' (line 3305)
        self_215394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 8), 'self', False)
        # Obtaining the member 'autoscale_view' of a type (line 3305)
        autoscale_view_215395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3305, 8), self_215394, 'autoscale_view')
        # Calling autoscale_view(args, kwargs) (line 3305)
        autoscale_view_call_result_215399 = invoke(stypy.reporting.localization.Localization(__file__, 3305, 8), autoscale_view_215395, *[], **kwargs_215398)
        
        
        # ################# End of 'set_yscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_yscale' in the type store
        # Getting the type of 'stypy_return_type' (line 3271)
        stypy_return_type_215400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3271, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215400)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_yscale'
        return stypy_return_type_215400


    @norecursion
    def get_yticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 3307)
        False_215401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3307, 31), 'False')
        defaults = [False_215401]
        # Create a new context for function 'get_yticks'
        module_type_store = module_type_store.open_function_context('get_yticks', 3307, 4, False)
        # Assigning a type to the variable 'self' (line 3308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3308, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_yticks.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_yticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_yticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_yticks.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_yticks')
        _AxesBase.get_yticks.__dict__.__setitem__('stypy_param_names_list', ['minor'])
        _AxesBase.get_yticks.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_yticks.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_yticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_yticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_yticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_yticks.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_yticks', ['minor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_yticks', localization, ['minor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_yticks(...)' code ##################

        unicode_215402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3308, 8), 'unicode', u'Return the y ticks as a list of locations')
        
        # Call to get_ticklocs(...): (line 3309)
        # Processing the call keyword arguments (line 3309)
        # Getting the type of 'minor' (line 3309)
        minor_215406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3309, 45), 'minor', False)
        keyword_215407 = minor_215406
        kwargs_215408 = {'minor': keyword_215407}
        # Getting the type of 'self' (line 3309)
        self_215403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3309, 15), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 3309)
        yaxis_215404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3309, 15), self_215403, 'yaxis')
        # Obtaining the member 'get_ticklocs' of a type (line 3309)
        get_ticklocs_215405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3309, 15), yaxis_215404, 'get_ticklocs')
        # Calling get_ticklocs(args, kwargs) (line 3309)
        get_ticklocs_call_result_215409 = invoke(stypy.reporting.localization.Localization(__file__, 3309, 15), get_ticklocs_215405, *[], **kwargs_215408)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3309, 8), 'stypy_return_type', get_ticklocs_call_result_215409)
        
        # ################# End of 'get_yticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_yticks' in the type store
        # Getting the type of 'stypy_return_type' (line 3307)
        stypy_return_type_215410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3307, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215410)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_yticks'
        return stypy_return_type_215410


    @norecursion
    def set_yticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 3311)
        False_215411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3311, 38), 'False')
        defaults = [False_215411]
        # Create a new context for function 'set_yticks'
        module_type_store = module_type_store.open_function_context('set_yticks', 3311, 4, False)
        # Assigning a type to the variable 'self' (line 3312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3312, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_yticks.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_yticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_yticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_yticks.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_yticks')
        _AxesBase.set_yticks.__dict__.__setitem__('stypy_param_names_list', ['ticks', 'minor'])
        _AxesBase.set_yticks.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_yticks.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_yticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_yticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_yticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_yticks.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_yticks', ['ticks', 'minor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_yticks', localization, ['ticks', 'minor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_yticks(...)' code ##################

        unicode_215412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3323, (-1)), 'unicode', u'\n        Set the y ticks with list of *ticks*\n\n        Parameters\n        ----------\n        ticks : sequence\n            List of y-axis tick locations\n\n        minor : bool, optional\n            If ``False`` sets major ticks, if ``True`` sets minor ticks.\n            Default is ``False``.\n        ')
        
        # Assigning a Call to a Name (line 3324):
        
        # Assigning a Call to a Name (line 3324):
        
        # Call to set_ticks(...): (line 3324)
        # Processing the call arguments (line 3324)
        # Getting the type of 'ticks' (line 3324)
        ticks_215416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3324, 35), 'ticks', False)
        # Processing the call keyword arguments (line 3324)
        # Getting the type of 'minor' (line 3324)
        minor_215417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3324, 48), 'minor', False)
        keyword_215418 = minor_215417
        kwargs_215419 = {'minor': keyword_215418}
        # Getting the type of 'self' (line 3324)
        self_215413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3324, 14), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 3324)
        yaxis_215414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3324, 14), self_215413, 'yaxis')
        # Obtaining the member 'set_ticks' of a type (line 3324)
        set_ticks_215415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3324, 14), yaxis_215414, 'set_ticks')
        # Calling set_ticks(args, kwargs) (line 3324)
        set_ticks_call_result_215420 = invoke(stypy.reporting.localization.Localization(__file__, 3324, 14), set_ticks_215415, *[ticks_215416], **kwargs_215419)
        
        # Assigning a type to the variable 'ret' (line 3324)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3324, 8), 'ret', set_ticks_call_result_215420)
        # Getting the type of 'ret' (line 3325)
        ret_215421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 15), 'ret')
        # Assigning a type to the variable 'stypy_return_type' (line 3325)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3325, 8), 'stypy_return_type', ret_215421)
        
        # ################# End of 'set_yticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_yticks' in the type store
        # Getting the type of 'stypy_return_type' (line 3311)
        stypy_return_type_215422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3311, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215422)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_yticks'
        return stypy_return_type_215422


    @norecursion
    def get_ymajorticklabels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_ymajorticklabels'
        module_type_store = module_type_store.open_function_context('get_ymajorticklabels', 3327, 4, False)
        # Assigning a type to the variable 'self' (line 3328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3328, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_ymajorticklabels.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_ymajorticklabels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_ymajorticklabels.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_ymajorticklabels.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_ymajorticklabels')
        _AxesBase.get_ymajorticklabels.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_ymajorticklabels.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_ymajorticklabels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_ymajorticklabels.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_ymajorticklabels.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_ymajorticklabels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_ymajorticklabels.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_ymajorticklabels', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ymajorticklabels', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ymajorticklabels(...)' code ##################

        unicode_215423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3335, (-1)), 'unicode', u'\n        Get the major y tick labels\n\n        Returns\n        -------\n        labels : list\n            List of :class:`~matplotlib.text.Text` instances\n        ')
        
        # Call to silent_list(...): (line 3336)
        # Processing the call arguments (line 3336)
        unicode_215426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3336, 33), 'unicode', u'Text yticklabel')
        
        # Call to get_majorticklabels(...): (line 3337)
        # Processing the call keyword arguments (line 3337)
        kwargs_215430 = {}
        # Getting the type of 'self' (line 3337)
        self_215427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 33), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 3337)
        yaxis_215428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3337, 33), self_215427, 'yaxis')
        # Obtaining the member 'get_majorticklabels' of a type (line 3337)
        get_majorticklabels_215429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3337, 33), yaxis_215428, 'get_majorticklabels')
        # Calling get_majorticklabels(args, kwargs) (line 3337)
        get_majorticklabels_call_result_215431 = invoke(stypy.reporting.localization.Localization(__file__, 3337, 33), get_majorticklabels_215429, *[], **kwargs_215430)
        
        # Processing the call keyword arguments (line 3336)
        kwargs_215432 = {}
        # Getting the type of 'cbook' (line 3336)
        cbook_215424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 3336)
        silent_list_215425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3336, 15), cbook_215424, 'silent_list')
        # Calling silent_list(args, kwargs) (line 3336)
        silent_list_call_result_215433 = invoke(stypy.reporting.localization.Localization(__file__, 3336, 15), silent_list_215425, *[unicode_215426, get_majorticklabels_call_result_215431], **kwargs_215432)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3336, 8), 'stypy_return_type', silent_list_call_result_215433)
        
        # ################# End of 'get_ymajorticklabels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ymajorticklabels' in the type store
        # Getting the type of 'stypy_return_type' (line 3327)
        stypy_return_type_215434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3327, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215434)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ymajorticklabels'
        return stypy_return_type_215434


    @norecursion
    def get_yminorticklabels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_yminorticklabels'
        module_type_store = module_type_store.open_function_context('get_yminorticklabels', 3339, 4, False)
        # Assigning a type to the variable 'self' (line 3340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3340, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_yminorticklabels.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_yminorticklabels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_yminorticklabels.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_yminorticklabels.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_yminorticklabels')
        _AxesBase.get_yminorticklabels.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_yminorticklabels.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_yminorticklabels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_yminorticklabels.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_yminorticklabels.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_yminorticklabels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_yminorticklabels.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_yminorticklabels', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_yminorticklabels', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_yminorticklabels(...)' code ##################

        unicode_215435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3347, (-1)), 'unicode', u'\n        Get the minor y tick labels\n\n        Returns\n        -------\n        labels : list\n            List of :class:`~matplotlib.text.Text` instances\n        ')
        
        # Call to silent_list(...): (line 3348)
        # Processing the call arguments (line 3348)
        unicode_215438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3348, 33), 'unicode', u'Text yticklabel')
        
        # Call to get_minorticklabels(...): (line 3349)
        # Processing the call keyword arguments (line 3349)
        kwargs_215442 = {}
        # Getting the type of 'self' (line 3349)
        self_215439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3349, 33), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 3349)
        yaxis_215440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3349, 33), self_215439, 'yaxis')
        # Obtaining the member 'get_minorticklabels' of a type (line 3349)
        get_minorticklabels_215441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3349, 33), yaxis_215440, 'get_minorticklabels')
        # Calling get_minorticklabels(args, kwargs) (line 3349)
        get_minorticklabels_call_result_215443 = invoke(stypy.reporting.localization.Localization(__file__, 3349, 33), get_minorticklabels_215441, *[], **kwargs_215442)
        
        # Processing the call keyword arguments (line 3348)
        kwargs_215444 = {}
        # Getting the type of 'cbook' (line 3348)
        cbook_215436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3348, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 3348)
        silent_list_215437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3348, 15), cbook_215436, 'silent_list')
        # Calling silent_list(args, kwargs) (line 3348)
        silent_list_call_result_215445 = invoke(stypy.reporting.localization.Localization(__file__, 3348, 15), silent_list_215437, *[unicode_215438, get_minorticklabels_call_result_215443], **kwargs_215444)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3348, 8), 'stypy_return_type', silent_list_call_result_215445)
        
        # ################# End of 'get_yminorticklabels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_yminorticklabels' in the type store
        # Getting the type of 'stypy_return_type' (line 3339)
        stypy_return_type_215446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3339, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215446)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_yminorticklabels'
        return stypy_return_type_215446


    @norecursion
    def get_yticklabels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 3351)
        False_215447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3351, 36), 'False')
        # Getting the type of 'None' (line 3351)
        None_215448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3351, 49), 'None')
        defaults = [False_215447, None_215448]
        # Create a new context for function 'get_yticklabels'
        module_type_store = module_type_store.open_function_context('get_yticklabels', 3351, 4, False)
        # Assigning a type to the variable 'self' (line 3352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3352, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_yticklabels.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_yticklabels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_yticklabels.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_yticklabels.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_yticklabels')
        _AxesBase.get_yticklabels.__dict__.__setitem__('stypy_param_names_list', ['minor', 'which'])
        _AxesBase.get_yticklabels.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_yticklabels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_yticklabels.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_yticklabels.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_yticklabels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_yticklabels.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_yticklabels', ['minor', 'which'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_yticklabels', localization, ['minor', 'which'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_yticklabels(...)' code ##################

        unicode_215449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3371, (-1)), 'unicode', u"\n        Get the x tick labels as a list of :class:`~matplotlib.text.Text`\n        instances.\n\n        Parameters\n        ----------\n        minor : bool\n           If True return the minor ticklabels,\n           else return the major ticklabels\n\n        which : None, ('minor', 'major', 'both')\n           Overrides `minor`.\n\n           Selects which ticklabels to return\n\n        Returns\n        -------\n        ret : list\n           List of :class:`~matplotlib.text.Text` instances.\n        ")
        
        # Call to silent_list(...): (line 3372)
        # Processing the call arguments (line 3372)
        unicode_215452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3372, 33), 'unicode', u'Text yticklabel')
        
        # Call to get_ticklabels(...): (line 3373)
        # Processing the call keyword arguments (line 3373)
        # Getting the type of 'minor' (line 3373)
        minor_215456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3373, 65), 'minor', False)
        keyword_215457 = minor_215456
        # Getting the type of 'which' (line 3374)
        which_215458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3374, 65), 'which', False)
        keyword_215459 = which_215458
        kwargs_215460 = {'which': keyword_215459, 'minor': keyword_215457}
        # Getting the type of 'self' (line 3373)
        self_215453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3373, 33), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 3373)
        yaxis_215454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3373, 33), self_215453, 'yaxis')
        # Obtaining the member 'get_ticklabels' of a type (line 3373)
        get_ticklabels_215455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3373, 33), yaxis_215454, 'get_ticklabels')
        # Calling get_ticklabels(args, kwargs) (line 3373)
        get_ticklabels_call_result_215461 = invoke(stypy.reporting.localization.Localization(__file__, 3373, 33), get_ticklabels_215455, *[], **kwargs_215460)
        
        # Processing the call keyword arguments (line 3372)
        kwargs_215462 = {}
        # Getting the type of 'cbook' (line 3372)
        cbook_215450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3372, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 3372)
        silent_list_215451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3372, 15), cbook_215450, 'silent_list')
        # Calling silent_list(args, kwargs) (line 3372)
        silent_list_call_result_215463 = invoke(stypy.reporting.localization.Localization(__file__, 3372, 15), silent_list_215451, *[unicode_215452, get_ticklabels_call_result_215461], **kwargs_215462)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3372, 8), 'stypy_return_type', silent_list_call_result_215463)
        
        # ################# End of 'get_yticklabels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_yticklabels' in the type store
        # Getting the type of 'stypy_return_type' (line 3351)
        stypy_return_type_215464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3351, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215464)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_yticklabels'
        return stypy_return_type_215464


    @norecursion
    def set_yticklabels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3376)
        None_215465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3376, 47), 'None')
        # Getting the type of 'False' (line 3376)
        False_215466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3376, 59), 'False')
        defaults = [None_215465, False_215466]
        # Create a new context for function 'set_yticklabels'
        module_type_store = module_type_store.open_function_context('set_yticklabels', 3376, 4, False)
        # Assigning a type to the variable 'self' (line 3377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3377, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_yticklabels.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_yticklabels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_yticklabels.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_yticklabels.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_yticklabels')
        _AxesBase.set_yticklabels.__dict__.__setitem__('stypy_param_names_list', ['labels', 'fontdict', 'minor'])
        _AxesBase.set_yticklabels.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_yticklabels.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _AxesBase.set_yticklabels.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_yticklabels.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_yticklabels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_yticklabels.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_yticklabels', ['labels', 'fontdict', 'minor'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_yticklabels', localization, ['labels', 'fontdict', 'minor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_yticklabels(...)' code ##################

        unicode_215467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3405, (-1)), 'unicode', u"\n        Set the y-tick labels with list of strings labels\n\n        Parameters\n        ----------\n        labels : list of str\n            list of string labels\n\n        fontdict : dict, optional\n            A dictionary controlling the appearance of the ticklabels,\n            the default `fontdict` is::\n\n               {'fontsize': rcParams['axes.titlesize'],\n                'fontweight' : rcParams['axes.titleweight'],\n                'verticalalignment': 'baseline',\n                'horizontalalignment': loc}\n\n        minor : bool, optional\n            If True select the minor ticklabels,\n            else select the minor ticklabels\n\n        Returns\n        -------\n        A list of `~matplotlib.text.Text` instances.\n\n        Other Parameters\n        ----------------\n        **kwargs : `~matplotlib.text.Text` properties.\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 3406)
        # Getting the type of 'fontdict' (line 3406)
        fontdict_215468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3406, 8), 'fontdict')
        # Getting the type of 'None' (line 3406)
        None_215469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3406, 27), 'None')
        
        (may_be_215470, more_types_in_union_215471) = may_not_be_none(fontdict_215468, None_215469)

        if may_be_215470:

            if more_types_in_union_215471:
                # Runtime conditional SSA (line 3406)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to update(...): (line 3407)
            # Processing the call arguments (line 3407)
            # Getting the type of 'fontdict' (line 3407)
            fontdict_215474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3407, 26), 'fontdict', False)
            # Processing the call keyword arguments (line 3407)
            kwargs_215475 = {}
            # Getting the type of 'kwargs' (line 3407)
            kwargs_215472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3407, 12), 'kwargs', False)
            # Obtaining the member 'update' of a type (line 3407)
            update_215473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3407, 12), kwargs_215472, 'update')
            # Calling update(args, kwargs) (line 3407)
            update_call_result_215476 = invoke(stypy.reporting.localization.Localization(__file__, 3407, 12), update_215473, *[fontdict_215474], **kwargs_215475)
            

            if more_types_in_union_215471:
                # SSA join for if statement (line 3406)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to set_ticklabels(...): (line 3408)
        # Processing the call arguments (line 3408)
        # Getting the type of 'labels' (line 3408)
        labels_215480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3408, 41), 'labels', False)
        # Processing the call keyword arguments (line 3408)
        # Getting the type of 'minor' (line 3409)
        minor_215481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 47), 'minor', False)
        keyword_215482 = minor_215481
        # Getting the type of 'kwargs' (line 3409)
        kwargs_215483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 56), 'kwargs', False)
        kwargs_215484 = {'kwargs_215483': kwargs_215483, 'minor': keyword_215482}
        # Getting the type of 'self' (line 3408)
        self_215477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3408, 15), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 3408)
        yaxis_215478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3408, 15), self_215477, 'yaxis')
        # Obtaining the member 'set_ticklabels' of a type (line 3408)
        set_ticklabels_215479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3408, 15), yaxis_215478, 'set_ticklabels')
        # Calling set_ticklabels(args, kwargs) (line 3408)
        set_ticklabels_call_result_215485 = invoke(stypy.reporting.localization.Localization(__file__, 3408, 15), set_ticklabels_215479, *[labels_215480], **kwargs_215484)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3408, 8), 'stypy_return_type', set_ticklabels_call_result_215485)
        
        # ################# End of 'set_yticklabels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_yticklabels' in the type store
        # Getting the type of 'stypy_return_type' (line 3376)
        stypy_return_type_215486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3376, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215486)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_yticklabels'
        return stypy_return_type_215486


    @norecursion
    def xaxis_date(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3411)
        None_215487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 28), 'None')
        defaults = [None_215487]
        # Create a new context for function 'xaxis_date'
        module_type_store = module_type_store.open_function_context('xaxis_date', 3411, 4, False)
        # Assigning a type to the variable 'self' (line 3412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3412, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.xaxis_date.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.xaxis_date.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.xaxis_date.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.xaxis_date.__dict__.__setitem__('stypy_function_name', '_AxesBase.xaxis_date')
        _AxesBase.xaxis_date.__dict__.__setitem__('stypy_param_names_list', ['tz'])
        _AxesBase.xaxis_date.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.xaxis_date.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.xaxis_date.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.xaxis_date.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.xaxis_date.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.xaxis_date.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.xaxis_date', ['tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'xaxis_date', localization, ['tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'xaxis_date(...)' code ##################

        unicode_215488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3419, (-1)), 'unicode', u'\n        Sets up x-axis ticks and labels that treat the x data as dates.\n\n        Parameters\n        ----------\n        tz : string or :class:`tzinfo` instance, optional\n            Timezone string or timezone. Defaults to rc value.\n        ')
        
        # Call to axis_date(...): (line 3422)
        # Processing the call arguments (line 3422)
        # Getting the type of 'tz' (line 3422)
        tz_215492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3422, 29), 'tz', False)
        # Processing the call keyword arguments (line 3422)
        kwargs_215493 = {}
        # Getting the type of 'self' (line 3422)
        self_215489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3422, 8), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 3422)
        xaxis_215490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3422, 8), self_215489, 'xaxis')
        # Obtaining the member 'axis_date' of a type (line 3422)
        axis_date_215491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3422, 8), xaxis_215490, 'axis_date')
        # Calling axis_date(args, kwargs) (line 3422)
        axis_date_call_result_215494 = invoke(stypy.reporting.localization.Localization(__file__, 3422, 8), axis_date_215491, *[tz_215492], **kwargs_215493)
        
        
        # ################# End of 'xaxis_date(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'xaxis_date' in the type store
        # Getting the type of 'stypy_return_type' (line 3411)
        stypy_return_type_215495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215495)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'xaxis_date'
        return stypy_return_type_215495


    @norecursion
    def yaxis_date(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3424)
        None_215496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3424, 28), 'None')
        defaults = [None_215496]
        # Create a new context for function 'yaxis_date'
        module_type_store = module_type_store.open_function_context('yaxis_date', 3424, 4, False)
        # Assigning a type to the variable 'self' (line 3425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3425, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.yaxis_date.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.yaxis_date.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.yaxis_date.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.yaxis_date.__dict__.__setitem__('stypy_function_name', '_AxesBase.yaxis_date')
        _AxesBase.yaxis_date.__dict__.__setitem__('stypy_param_names_list', ['tz'])
        _AxesBase.yaxis_date.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.yaxis_date.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.yaxis_date.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.yaxis_date.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.yaxis_date.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.yaxis_date.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.yaxis_date', ['tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'yaxis_date', localization, ['tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'yaxis_date(...)' code ##################

        unicode_215497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3432, (-1)), 'unicode', u'\n        Sets up y-axis ticks and labels that treat the y data as dates.\n\n        Parameters\n        ----------\n        tz : string or :class:`tzinfo` instance, optional\n            Timezone string or timezone. Defaults to rc value.\n        ')
        
        # Call to axis_date(...): (line 3433)
        # Processing the call arguments (line 3433)
        # Getting the type of 'tz' (line 3433)
        tz_215501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3433, 29), 'tz', False)
        # Processing the call keyword arguments (line 3433)
        kwargs_215502 = {}
        # Getting the type of 'self' (line 3433)
        self_215498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3433, 8), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 3433)
        yaxis_215499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3433, 8), self_215498, 'yaxis')
        # Obtaining the member 'axis_date' of a type (line 3433)
        axis_date_215500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3433, 8), yaxis_215499, 'axis_date')
        # Calling axis_date(args, kwargs) (line 3433)
        axis_date_call_result_215503 = invoke(stypy.reporting.localization.Localization(__file__, 3433, 8), axis_date_215500, *[tz_215501], **kwargs_215502)
        
        
        # ################# End of 'yaxis_date(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'yaxis_date' in the type store
        # Getting the type of 'stypy_return_type' (line 3424)
        stypy_return_type_215504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3424, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215504)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'yaxis_date'
        return stypy_return_type_215504


    @norecursion
    def format_xdata(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'format_xdata'
        module_type_store = module_type_store.open_function_context('format_xdata', 3435, 4, False)
        # Assigning a type to the variable 'self' (line 3436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3436, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.format_xdata.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.format_xdata.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.format_xdata.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.format_xdata.__dict__.__setitem__('stypy_function_name', '_AxesBase.format_xdata')
        _AxesBase.format_xdata.__dict__.__setitem__('stypy_param_names_list', ['x'])
        _AxesBase.format_xdata.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.format_xdata.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.format_xdata.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.format_xdata.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.format_xdata.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.format_xdata.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.format_xdata', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'format_xdata', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'format_xdata(...)' code ##################

        unicode_215505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3440, (-1)), 'unicode', u'\n        Return *x* string formatted.  This function will use the attribute\n        self.fmt_xdata if it is callable, else will fall back on the xaxis\n        major formatter\n        ')
        
        
        # SSA begins for try-except statement (line 3441)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to fmt_xdata(...): (line 3442)
        # Processing the call arguments (line 3442)
        # Getting the type of 'x' (line 3442)
        x_215508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 34), 'x', False)
        # Processing the call keyword arguments (line 3442)
        kwargs_215509 = {}
        # Getting the type of 'self' (line 3442)
        self_215506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 19), 'self', False)
        # Obtaining the member 'fmt_xdata' of a type (line 3442)
        fmt_xdata_215507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3442, 19), self_215506, 'fmt_xdata')
        # Calling fmt_xdata(args, kwargs) (line 3442)
        fmt_xdata_call_result_215510 = invoke(stypy.reporting.localization.Localization(__file__, 3442, 19), fmt_xdata_215507, *[x_215508], **kwargs_215509)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3442, 12), 'stypy_return_type', fmt_xdata_call_result_215510)
        # SSA branch for the except part of a try statement (line 3441)
        # SSA branch for the except 'TypeError' branch of a try statement (line 3441)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Attribute to a Name (line 3444):
        
        # Assigning a Attribute to a Name (line 3444):
        
        # Call to get_major_formatter(...): (line 3444)
        # Processing the call keyword arguments (line 3444)
        kwargs_215514 = {}
        # Getting the type of 'self' (line 3444)
        self_215511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3444, 19), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 3444)
        xaxis_215512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3444, 19), self_215511, 'xaxis')
        # Obtaining the member 'get_major_formatter' of a type (line 3444)
        get_major_formatter_215513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3444, 19), xaxis_215512, 'get_major_formatter')
        # Calling get_major_formatter(args, kwargs) (line 3444)
        get_major_formatter_call_result_215515 = invoke(stypy.reporting.localization.Localization(__file__, 3444, 19), get_major_formatter_215513, *[], **kwargs_215514)
        
        # Obtaining the member 'format_data_short' of a type (line 3444)
        format_data_short_215516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3444, 19), get_major_formatter_call_result_215515, 'format_data_short')
        # Assigning a type to the variable 'func' (line 3444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3444, 12), 'func', format_data_short_215516)
        
        # Assigning a Call to a Name (line 3445):
        
        # Assigning a Call to a Name (line 3445):
        
        # Call to func(...): (line 3445)
        # Processing the call arguments (line 3445)
        # Getting the type of 'x' (line 3445)
        x_215518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3445, 23), 'x', False)
        # Processing the call keyword arguments (line 3445)
        kwargs_215519 = {}
        # Getting the type of 'func' (line 3445)
        func_215517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3445, 18), 'func', False)
        # Calling func(args, kwargs) (line 3445)
        func_call_result_215520 = invoke(stypy.reporting.localization.Localization(__file__, 3445, 18), func_215517, *[x_215518], **kwargs_215519)
        
        # Assigning a type to the variable 'val' (line 3445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3445, 12), 'val', func_call_result_215520)
        # Getting the type of 'val' (line 3446)
        val_215521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3446, 19), 'val')
        # Assigning a type to the variable 'stypy_return_type' (line 3446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3446, 12), 'stypy_return_type', val_215521)
        # SSA join for try-except statement (line 3441)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'format_xdata(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'format_xdata' in the type store
        # Getting the type of 'stypy_return_type' (line 3435)
        stypy_return_type_215522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3435, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215522)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'format_xdata'
        return stypy_return_type_215522


    @norecursion
    def format_ydata(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'format_ydata'
        module_type_store = module_type_store.open_function_context('format_ydata', 3448, 4, False)
        # Assigning a type to the variable 'self' (line 3449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3449, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.format_ydata.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.format_ydata.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.format_ydata.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.format_ydata.__dict__.__setitem__('stypy_function_name', '_AxesBase.format_ydata')
        _AxesBase.format_ydata.__dict__.__setitem__('stypy_param_names_list', ['y'])
        _AxesBase.format_ydata.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.format_ydata.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.format_ydata.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.format_ydata.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.format_ydata.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.format_ydata.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.format_ydata', ['y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'format_ydata', localization, ['y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'format_ydata(...)' code ##################

        unicode_215523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3453, (-1)), 'unicode', u'\n        Return y string formatted.  This function will use the\n        :attr:`fmt_ydata` attribute if it is callable, else will fall\n        back on the yaxis major formatter\n        ')
        
        
        # SSA begins for try-except statement (line 3454)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to fmt_ydata(...): (line 3455)
        # Processing the call arguments (line 3455)
        # Getting the type of 'y' (line 3455)
        y_215526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3455, 34), 'y', False)
        # Processing the call keyword arguments (line 3455)
        kwargs_215527 = {}
        # Getting the type of 'self' (line 3455)
        self_215524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3455, 19), 'self', False)
        # Obtaining the member 'fmt_ydata' of a type (line 3455)
        fmt_ydata_215525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3455, 19), self_215524, 'fmt_ydata')
        # Calling fmt_ydata(args, kwargs) (line 3455)
        fmt_ydata_call_result_215528 = invoke(stypy.reporting.localization.Localization(__file__, 3455, 19), fmt_ydata_215525, *[y_215526], **kwargs_215527)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3455, 12), 'stypy_return_type', fmt_ydata_call_result_215528)
        # SSA branch for the except part of a try statement (line 3454)
        # SSA branch for the except 'TypeError' branch of a try statement (line 3454)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Attribute to a Name (line 3457):
        
        # Assigning a Attribute to a Name (line 3457):
        
        # Call to get_major_formatter(...): (line 3457)
        # Processing the call keyword arguments (line 3457)
        kwargs_215532 = {}
        # Getting the type of 'self' (line 3457)
        self_215529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3457, 19), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 3457)
        yaxis_215530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3457, 19), self_215529, 'yaxis')
        # Obtaining the member 'get_major_formatter' of a type (line 3457)
        get_major_formatter_215531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3457, 19), yaxis_215530, 'get_major_formatter')
        # Calling get_major_formatter(args, kwargs) (line 3457)
        get_major_formatter_call_result_215533 = invoke(stypy.reporting.localization.Localization(__file__, 3457, 19), get_major_formatter_215531, *[], **kwargs_215532)
        
        # Obtaining the member 'format_data_short' of a type (line 3457)
        format_data_short_215534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3457, 19), get_major_formatter_call_result_215533, 'format_data_short')
        # Assigning a type to the variable 'func' (line 3457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3457, 12), 'func', format_data_short_215534)
        
        # Assigning a Call to a Name (line 3458):
        
        # Assigning a Call to a Name (line 3458):
        
        # Call to func(...): (line 3458)
        # Processing the call arguments (line 3458)
        # Getting the type of 'y' (line 3458)
        y_215536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3458, 23), 'y', False)
        # Processing the call keyword arguments (line 3458)
        kwargs_215537 = {}
        # Getting the type of 'func' (line 3458)
        func_215535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3458, 18), 'func', False)
        # Calling func(args, kwargs) (line 3458)
        func_call_result_215538 = invoke(stypy.reporting.localization.Localization(__file__, 3458, 18), func_215535, *[y_215536], **kwargs_215537)
        
        # Assigning a type to the variable 'val' (line 3458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3458, 12), 'val', func_call_result_215538)
        # Getting the type of 'val' (line 3459)
        val_215539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3459, 19), 'val')
        # Assigning a type to the variable 'stypy_return_type' (line 3459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3459, 12), 'stypy_return_type', val_215539)
        # SSA join for try-except statement (line 3454)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'format_ydata(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'format_ydata' in the type store
        # Getting the type of 'stypy_return_type' (line 3448)
        stypy_return_type_215540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3448, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215540)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'format_ydata'
        return stypy_return_type_215540


    @norecursion
    def format_coord(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'format_coord'
        module_type_store = module_type_store.open_function_context('format_coord', 3461, 4, False)
        # Assigning a type to the variable 'self' (line 3462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3462, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.format_coord.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.format_coord.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.format_coord.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.format_coord.__dict__.__setitem__('stypy_function_name', '_AxesBase.format_coord')
        _AxesBase.format_coord.__dict__.__setitem__('stypy_param_names_list', ['x', 'y'])
        _AxesBase.format_coord.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.format_coord.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.format_coord.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.format_coord.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.format_coord.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.format_coord.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.format_coord', ['x', 'y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'format_coord', localization, ['x', 'y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'format_coord(...)' code ##################

        unicode_215541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3462, 8), 'unicode', u'Return a format string formatting the *x*, *y* coord')
        
        # Type idiom detected: calculating its left and rigth part (line 3463)
        # Getting the type of 'x' (line 3463)
        x_215542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3463, 11), 'x')
        # Getting the type of 'None' (line 3463)
        None_215543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3463, 16), 'None')
        
        (may_be_215544, more_types_in_union_215545) = may_be_none(x_215542, None_215543)

        if may_be_215544:

            if more_types_in_union_215545:
                # Runtime conditional SSA (line 3463)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 3464):
            
            # Assigning a Str to a Name (line 3464):
            unicode_215546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3464, 17), 'unicode', u'???')
            # Assigning a type to the variable 'xs' (line 3464)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3464, 12), 'xs', unicode_215546)

            if more_types_in_union_215545:
                # Runtime conditional SSA for else branch (line 3463)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_215544) or more_types_in_union_215545):
            
            # Assigning a Call to a Name (line 3466):
            
            # Assigning a Call to a Name (line 3466):
            
            # Call to format_xdata(...): (line 3466)
            # Processing the call arguments (line 3466)
            # Getting the type of 'x' (line 3466)
            x_215549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3466, 35), 'x', False)
            # Processing the call keyword arguments (line 3466)
            kwargs_215550 = {}
            # Getting the type of 'self' (line 3466)
            self_215547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3466, 17), 'self', False)
            # Obtaining the member 'format_xdata' of a type (line 3466)
            format_xdata_215548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3466, 17), self_215547, 'format_xdata')
            # Calling format_xdata(args, kwargs) (line 3466)
            format_xdata_call_result_215551 = invoke(stypy.reporting.localization.Localization(__file__, 3466, 17), format_xdata_215548, *[x_215549], **kwargs_215550)
            
            # Assigning a type to the variable 'xs' (line 3466)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3466, 12), 'xs', format_xdata_call_result_215551)

            if (may_be_215544 and more_types_in_union_215545):
                # SSA join for if statement (line 3463)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 3467)
        # Getting the type of 'y' (line 3467)
        y_215552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3467, 11), 'y')
        # Getting the type of 'None' (line 3467)
        None_215553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3467, 16), 'None')
        
        (may_be_215554, more_types_in_union_215555) = may_be_none(y_215552, None_215553)

        if may_be_215554:

            if more_types_in_union_215555:
                # Runtime conditional SSA (line 3467)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 3468):
            
            # Assigning a Str to a Name (line 3468):
            unicode_215556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3468, 17), 'unicode', u'???')
            # Assigning a type to the variable 'ys' (line 3468)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3468, 12), 'ys', unicode_215556)

            if more_types_in_union_215555:
                # Runtime conditional SSA for else branch (line 3467)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_215554) or more_types_in_union_215555):
            
            # Assigning a Call to a Name (line 3470):
            
            # Assigning a Call to a Name (line 3470):
            
            # Call to format_ydata(...): (line 3470)
            # Processing the call arguments (line 3470)
            # Getting the type of 'y' (line 3470)
            y_215559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3470, 35), 'y', False)
            # Processing the call keyword arguments (line 3470)
            kwargs_215560 = {}
            # Getting the type of 'self' (line 3470)
            self_215557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3470, 17), 'self', False)
            # Obtaining the member 'format_ydata' of a type (line 3470)
            format_ydata_215558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3470, 17), self_215557, 'format_ydata')
            # Calling format_ydata(args, kwargs) (line 3470)
            format_ydata_call_result_215561 = invoke(stypy.reporting.localization.Localization(__file__, 3470, 17), format_ydata_215558, *[y_215559], **kwargs_215560)
            
            # Assigning a type to the variable 'ys' (line 3470)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3470, 12), 'ys', format_ydata_call_result_215561)

            if (may_be_215554 and more_types_in_union_215555):
                # SSA join for if statement (line 3467)
                module_type_store = module_type_store.join_ssa_context()


        
        unicode_215562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3471, 15), 'unicode', u'x=%s y=%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3471)
        tuple_215563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3471, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3471)
        # Adding element type (line 3471)
        # Getting the type of 'xs' (line 3471)
        xs_215564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3471, 30), 'xs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3471, 30), tuple_215563, xs_215564)
        # Adding element type (line 3471)
        # Getting the type of 'ys' (line 3471)
        ys_215565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3471, 34), 'ys')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3471, 30), tuple_215563, ys_215565)
        
        # Applying the binary operator '%' (line 3471)
        result_mod_215566 = python_operator(stypy.reporting.localization.Localization(__file__, 3471, 15), '%', unicode_215562, tuple_215563)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3471, 8), 'stypy_return_type', result_mod_215566)
        
        # ################# End of 'format_coord(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'format_coord' in the type store
        # Getting the type of 'stypy_return_type' (line 3461)
        stypy_return_type_215567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3461, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215567)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'format_coord'
        return stypy_return_type_215567


    @norecursion
    def minorticks_on(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'minorticks_on'
        module_type_store = module_type_store.open_function_context('minorticks_on', 3473, 4, False)
        # Assigning a type to the variable 'self' (line 3474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3474, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.minorticks_on.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.minorticks_on.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.minorticks_on.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.minorticks_on.__dict__.__setitem__('stypy_function_name', '_AxesBase.minorticks_on')
        _AxesBase.minorticks_on.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.minorticks_on.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.minorticks_on.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.minorticks_on.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.minorticks_on.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.minorticks_on.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.minorticks_on.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.minorticks_on', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'minorticks_on', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'minorticks_on(...)' code ##################

        unicode_215568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3474, 8), 'unicode', u'Add autoscaling minor ticks to the axes.')
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 3475)
        tuple_215569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3475, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3475)
        # Adding element type (line 3475)
        # Getting the type of 'self' (line 3475)
        self_215570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3475, 19), 'self')
        # Obtaining the member 'xaxis' of a type (line 3475)
        xaxis_215571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3475, 19), self_215570, 'xaxis')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3475, 19), tuple_215569, xaxis_215571)
        # Adding element type (line 3475)
        # Getting the type of 'self' (line 3475)
        self_215572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3475, 31), 'self')
        # Obtaining the member 'yaxis' of a type (line 3475)
        yaxis_215573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3475, 31), self_215572, 'yaxis')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3475, 19), tuple_215569, yaxis_215573)
        
        # Testing the type of a for loop iterable (line 3475)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3475, 8), tuple_215569)
        # Getting the type of the for loop variable (line 3475)
        for_loop_var_215574 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3475, 8), tuple_215569)
        # Assigning a type to the variable 'ax' (line 3475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3475, 8), 'ax', for_loop_var_215574)
        # SSA begins for a for statement (line 3475)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 3476):
        
        # Assigning a Call to a Name (line 3476):
        
        # Call to get_scale(...): (line 3476)
        # Processing the call keyword arguments (line 3476)
        kwargs_215577 = {}
        # Getting the type of 'ax' (line 3476)
        ax_215575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3476, 20), 'ax', False)
        # Obtaining the member 'get_scale' of a type (line 3476)
        get_scale_215576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3476, 20), ax_215575, 'get_scale')
        # Calling get_scale(args, kwargs) (line 3476)
        get_scale_call_result_215578 = invoke(stypy.reporting.localization.Localization(__file__, 3476, 20), get_scale_215576, *[], **kwargs_215577)
        
        # Assigning a type to the variable 'scale' (line 3476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3476, 12), 'scale', get_scale_call_result_215578)
        
        
        # Getting the type of 'scale' (line 3477)
        scale_215579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3477, 15), 'scale')
        unicode_215580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3477, 24), 'unicode', u'log')
        # Applying the binary operator '==' (line 3477)
        result_eq_215581 = python_operator(stypy.reporting.localization.Localization(__file__, 3477, 15), '==', scale_215579, unicode_215580)
        
        # Testing the type of an if condition (line 3477)
        if_condition_215582 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3477, 12), result_eq_215581)
        # Assigning a type to the variable 'if_condition_215582' (line 3477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3477, 12), 'if_condition_215582', if_condition_215582)
        # SSA begins for if statement (line 3477)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 3478):
        
        # Assigning a Attribute to a Name (line 3478):
        # Getting the type of 'ax' (line 3478)
        ax_215583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3478, 20), 'ax')
        # Obtaining the member '_scale' of a type (line 3478)
        _scale_215584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3478, 20), ax_215583, '_scale')
        # Assigning a type to the variable 's' (line 3478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3478, 16), 's', _scale_215584)
        
        # Call to set_minor_locator(...): (line 3479)
        # Processing the call arguments (line 3479)
        
        # Call to LogLocator(...): (line 3479)
        # Processing the call arguments (line 3479)
        # Getting the type of 's' (line 3479)
        s_215589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3479, 56), 's', False)
        # Obtaining the member 'base' of a type (line 3479)
        base_215590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3479, 56), s_215589, 'base')
        # Getting the type of 's' (line 3479)
        s_215591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3479, 64), 's', False)
        # Obtaining the member 'subs' of a type (line 3479)
        subs_215592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3479, 64), s_215591, 'subs')
        # Processing the call keyword arguments (line 3479)
        kwargs_215593 = {}
        # Getting the type of 'mticker' (line 3479)
        mticker_215587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3479, 37), 'mticker', False)
        # Obtaining the member 'LogLocator' of a type (line 3479)
        LogLocator_215588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3479, 37), mticker_215587, 'LogLocator')
        # Calling LogLocator(args, kwargs) (line 3479)
        LogLocator_call_result_215594 = invoke(stypy.reporting.localization.Localization(__file__, 3479, 37), LogLocator_215588, *[base_215590, subs_215592], **kwargs_215593)
        
        # Processing the call keyword arguments (line 3479)
        kwargs_215595 = {}
        # Getting the type of 'ax' (line 3479)
        ax_215585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3479, 16), 'ax', False)
        # Obtaining the member 'set_minor_locator' of a type (line 3479)
        set_minor_locator_215586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3479, 16), ax_215585, 'set_minor_locator')
        # Calling set_minor_locator(args, kwargs) (line 3479)
        set_minor_locator_call_result_215596 = invoke(stypy.reporting.localization.Localization(__file__, 3479, 16), set_minor_locator_215586, *[LogLocator_call_result_215594], **kwargs_215595)
        
        # SSA branch for the else part of an if statement (line 3477)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'scale' (line 3480)
        scale_215597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3480, 17), 'scale')
        unicode_215598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3480, 26), 'unicode', u'symlog')
        # Applying the binary operator '==' (line 3480)
        result_eq_215599 = python_operator(stypy.reporting.localization.Localization(__file__, 3480, 17), '==', scale_215597, unicode_215598)
        
        # Testing the type of an if condition (line 3480)
        if_condition_215600 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3480, 17), result_eq_215599)
        # Assigning a type to the variable 'if_condition_215600' (line 3480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3480, 17), 'if_condition_215600', if_condition_215600)
        # SSA begins for if statement (line 3480)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 3481):
        
        # Assigning a Attribute to a Name (line 3481):
        # Getting the type of 'ax' (line 3481)
        ax_215601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3481, 20), 'ax')
        # Obtaining the member '_scale' of a type (line 3481)
        _scale_215602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3481, 20), ax_215601, '_scale')
        # Assigning a type to the variable 's' (line 3481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3481, 16), 's', _scale_215602)
        
        # Call to set_minor_locator(...): (line 3482)
        # Processing the call arguments (line 3482)
        
        # Call to SymmetricalLogLocator(...): (line 3483)
        # Processing the call arguments (line 3483)
        # Getting the type of 's' (line 3483)
        s_215607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3483, 50), 's', False)
        # Obtaining the member '_transform' of a type (line 3483)
        _transform_215608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3483, 50), s_215607, '_transform')
        # Getting the type of 's' (line 3483)
        s_215609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3483, 64), 's', False)
        # Obtaining the member 'subs' of a type (line 3483)
        subs_215610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3483, 64), s_215609, 'subs')
        # Processing the call keyword arguments (line 3483)
        kwargs_215611 = {}
        # Getting the type of 'mticker' (line 3483)
        mticker_215605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3483, 20), 'mticker', False)
        # Obtaining the member 'SymmetricalLogLocator' of a type (line 3483)
        SymmetricalLogLocator_215606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3483, 20), mticker_215605, 'SymmetricalLogLocator')
        # Calling SymmetricalLogLocator(args, kwargs) (line 3483)
        SymmetricalLogLocator_call_result_215612 = invoke(stypy.reporting.localization.Localization(__file__, 3483, 20), SymmetricalLogLocator_215606, *[_transform_215608, subs_215610], **kwargs_215611)
        
        # Processing the call keyword arguments (line 3482)
        kwargs_215613 = {}
        # Getting the type of 'ax' (line 3482)
        ax_215603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3482, 16), 'ax', False)
        # Obtaining the member 'set_minor_locator' of a type (line 3482)
        set_minor_locator_215604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3482, 16), ax_215603, 'set_minor_locator')
        # Calling set_minor_locator(args, kwargs) (line 3482)
        set_minor_locator_call_result_215614 = invoke(stypy.reporting.localization.Localization(__file__, 3482, 16), set_minor_locator_215604, *[SymmetricalLogLocator_call_result_215612], **kwargs_215613)
        
        # SSA branch for the else part of an if statement (line 3480)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_minor_locator(...): (line 3485)
        # Processing the call arguments (line 3485)
        
        # Call to AutoMinorLocator(...): (line 3485)
        # Processing the call keyword arguments (line 3485)
        kwargs_215619 = {}
        # Getting the type of 'mticker' (line 3485)
        mticker_215617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3485, 37), 'mticker', False)
        # Obtaining the member 'AutoMinorLocator' of a type (line 3485)
        AutoMinorLocator_215618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3485, 37), mticker_215617, 'AutoMinorLocator')
        # Calling AutoMinorLocator(args, kwargs) (line 3485)
        AutoMinorLocator_call_result_215620 = invoke(stypy.reporting.localization.Localization(__file__, 3485, 37), AutoMinorLocator_215618, *[], **kwargs_215619)
        
        # Processing the call keyword arguments (line 3485)
        kwargs_215621 = {}
        # Getting the type of 'ax' (line 3485)
        ax_215615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3485, 16), 'ax', False)
        # Obtaining the member 'set_minor_locator' of a type (line 3485)
        set_minor_locator_215616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3485, 16), ax_215615, 'set_minor_locator')
        # Calling set_minor_locator(args, kwargs) (line 3485)
        set_minor_locator_call_result_215622 = invoke(stypy.reporting.localization.Localization(__file__, 3485, 16), set_minor_locator_215616, *[AutoMinorLocator_call_result_215620], **kwargs_215621)
        
        # SSA join for if statement (line 3480)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3477)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'minorticks_on(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'minorticks_on' in the type store
        # Getting the type of 'stypy_return_type' (line 3473)
        stypy_return_type_215623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3473, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215623)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'minorticks_on'
        return stypy_return_type_215623


    @norecursion
    def minorticks_off(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'minorticks_off'
        module_type_store = module_type_store.open_function_context('minorticks_off', 3487, 4, False)
        # Assigning a type to the variable 'self' (line 3488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3488, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.minorticks_off.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.minorticks_off.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.minorticks_off.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.minorticks_off.__dict__.__setitem__('stypy_function_name', '_AxesBase.minorticks_off')
        _AxesBase.minorticks_off.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.minorticks_off.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.minorticks_off.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.minorticks_off.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.minorticks_off.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.minorticks_off.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.minorticks_off.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.minorticks_off', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'minorticks_off', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'minorticks_off(...)' code ##################

        unicode_215624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3488, 8), 'unicode', u'Remove minor ticks from the axes.')
        
        # Call to set_minor_locator(...): (line 3489)
        # Processing the call arguments (line 3489)
        
        # Call to NullLocator(...): (line 3489)
        # Processing the call keyword arguments (line 3489)
        kwargs_215630 = {}
        # Getting the type of 'mticker' (line 3489)
        mticker_215628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3489, 37), 'mticker', False)
        # Obtaining the member 'NullLocator' of a type (line 3489)
        NullLocator_215629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3489, 37), mticker_215628, 'NullLocator')
        # Calling NullLocator(args, kwargs) (line 3489)
        NullLocator_call_result_215631 = invoke(stypy.reporting.localization.Localization(__file__, 3489, 37), NullLocator_215629, *[], **kwargs_215630)
        
        # Processing the call keyword arguments (line 3489)
        kwargs_215632 = {}
        # Getting the type of 'self' (line 3489)
        self_215625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3489, 8), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 3489)
        xaxis_215626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3489, 8), self_215625, 'xaxis')
        # Obtaining the member 'set_minor_locator' of a type (line 3489)
        set_minor_locator_215627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3489, 8), xaxis_215626, 'set_minor_locator')
        # Calling set_minor_locator(args, kwargs) (line 3489)
        set_minor_locator_call_result_215633 = invoke(stypy.reporting.localization.Localization(__file__, 3489, 8), set_minor_locator_215627, *[NullLocator_call_result_215631], **kwargs_215632)
        
        
        # Call to set_minor_locator(...): (line 3490)
        # Processing the call arguments (line 3490)
        
        # Call to NullLocator(...): (line 3490)
        # Processing the call keyword arguments (line 3490)
        kwargs_215639 = {}
        # Getting the type of 'mticker' (line 3490)
        mticker_215637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3490, 37), 'mticker', False)
        # Obtaining the member 'NullLocator' of a type (line 3490)
        NullLocator_215638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3490, 37), mticker_215637, 'NullLocator')
        # Calling NullLocator(args, kwargs) (line 3490)
        NullLocator_call_result_215640 = invoke(stypy.reporting.localization.Localization(__file__, 3490, 37), NullLocator_215638, *[], **kwargs_215639)
        
        # Processing the call keyword arguments (line 3490)
        kwargs_215641 = {}
        # Getting the type of 'self' (line 3490)
        self_215634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3490, 8), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 3490)
        yaxis_215635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3490, 8), self_215634, 'yaxis')
        # Obtaining the member 'set_minor_locator' of a type (line 3490)
        set_minor_locator_215636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3490, 8), yaxis_215635, 'set_minor_locator')
        # Calling set_minor_locator(args, kwargs) (line 3490)
        set_minor_locator_call_result_215642 = invoke(stypy.reporting.localization.Localization(__file__, 3490, 8), set_minor_locator_215636, *[NullLocator_call_result_215640], **kwargs_215641)
        
        
        # ################# End of 'minorticks_off(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'minorticks_off' in the type store
        # Getting the type of 'stypy_return_type' (line 3487)
        stypy_return_type_215643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3487, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215643)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'minorticks_off'
        return stypy_return_type_215643


    @norecursion
    def can_zoom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'can_zoom'
        module_type_store = module_type_store.open_function_context('can_zoom', 3494, 4, False)
        # Assigning a type to the variable 'self' (line 3495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3495, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.can_zoom.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.can_zoom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.can_zoom.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.can_zoom.__dict__.__setitem__('stypy_function_name', '_AxesBase.can_zoom')
        _AxesBase.can_zoom.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.can_zoom.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.can_zoom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.can_zoom.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.can_zoom.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.can_zoom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.can_zoom.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.can_zoom', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'can_zoom', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'can_zoom(...)' code ##################

        unicode_215644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3497, (-1)), 'unicode', u'\n        Return *True* if this axes supports the zoom box button functionality.\n        ')
        # Getting the type of 'True' (line 3498)
        True_215645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3498, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 3498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3498, 8), 'stypy_return_type', True_215645)
        
        # ################# End of 'can_zoom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'can_zoom' in the type store
        # Getting the type of 'stypy_return_type' (line 3494)
        stypy_return_type_215646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3494, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215646)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'can_zoom'
        return stypy_return_type_215646


    @norecursion
    def can_pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'can_pan'
        module_type_store = module_type_store.open_function_context('can_pan', 3500, 4, False)
        # Assigning a type to the variable 'self' (line 3501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3501, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.can_pan.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.can_pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.can_pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.can_pan.__dict__.__setitem__('stypy_function_name', '_AxesBase.can_pan')
        _AxesBase.can_pan.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.can_pan.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.can_pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.can_pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.can_pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.can_pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.can_pan.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.can_pan', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'can_pan', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'can_pan(...)' code ##################

        unicode_215647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3503, (-1)), 'unicode', u'\n        Return *True* if this axes supports any pan/zoom button functionality.\n        ')
        # Getting the type of 'True' (line 3504)
        True_215648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3504, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 3504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3504, 8), 'stypy_return_type', True_215648)
        
        # ################# End of 'can_pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'can_pan' in the type store
        # Getting the type of 'stypy_return_type' (line 3500)
        stypy_return_type_215649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3500, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215649)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'can_pan'
        return stypy_return_type_215649


    @norecursion
    def get_navigate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_navigate'
        module_type_store = module_type_store.open_function_context('get_navigate', 3506, 4, False)
        # Assigning a type to the variable 'self' (line 3507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3507, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_navigate.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_navigate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_navigate.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_navigate.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_navigate')
        _AxesBase.get_navigate.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_navigate.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_navigate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_navigate.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_navigate.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_navigate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_navigate.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_navigate', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_navigate', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_navigate(...)' code ##################

        unicode_215650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3509, (-1)), 'unicode', u'\n        Get whether the axes responds to navigation commands\n        ')
        # Getting the type of 'self' (line 3510)
        self_215651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3510, 15), 'self')
        # Obtaining the member '_navigate' of a type (line 3510)
        _navigate_215652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3510, 15), self_215651, '_navigate')
        # Assigning a type to the variable 'stypy_return_type' (line 3510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3510, 8), 'stypy_return_type', _navigate_215652)
        
        # ################# End of 'get_navigate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_navigate' in the type store
        # Getting the type of 'stypy_return_type' (line 3506)
        stypy_return_type_215653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3506, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215653)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_navigate'
        return stypy_return_type_215653


    @norecursion
    def set_navigate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_navigate'
        module_type_store = module_type_store.open_function_context('set_navigate', 3512, 4, False)
        # Assigning a type to the variable 'self' (line 3513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3513, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_navigate.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_navigate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_navigate.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_navigate.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_navigate')
        _AxesBase.set_navigate.__dict__.__setitem__('stypy_param_names_list', ['b'])
        _AxesBase.set_navigate.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_navigate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_navigate.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_navigate.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_navigate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_navigate.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_navigate', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_navigate', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_navigate(...)' code ##################

        unicode_215654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3517, (-1)), 'unicode', u'\n        Set whether the axes responds to navigation toolbar commands\n\n        ACCEPTS: [ *True* | *False* ]\n        ')
        
        # Assigning a Name to a Attribute (line 3518):
        
        # Assigning a Name to a Attribute (line 3518):
        # Getting the type of 'b' (line 3518)
        b_215655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3518, 25), 'b')
        # Getting the type of 'self' (line 3518)
        self_215656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3518, 8), 'self')
        # Setting the type of the member '_navigate' of a type (line 3518)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3518, 8), self_215656, '_navigate', b_215655)
        
        # ################# End of 'set_navigate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_navigate' in the type store
        # Getting the type of 'stypy_return_type' (line 3512)
        stypy_return_type_215657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3512, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215657)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_navigate'
        return stypy_return_type_215657


    @norecursion
    def get_navigate_mode(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_navigate_mode'
        module_type_store = module_type_store.open_function_context('get_navigate_mode', 3520, 4, False)
        # Assigning a type to the variable 'self' (line 3521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3521, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_navigate_mode.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_navigate_mode.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_navigate_mode.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_navigate_mode.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_navigate_mode')
        _AxesBase.get_navigate_mode.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_navigate_mode.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_navigate_mode.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_navigate_mode.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_navigate_mode.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_navigate_mode.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_navigate_mode.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_navigate_mode', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_navigate_mode', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_navigate_mode(...)' code ##################

        unicode_215658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3523, (-1)), 'unicode', u"\n        Get the navigation toolbar button status: 'PAN', 'ZOOM', or None\n        ")
        # Getting the type of 'self' (line 3524)
        self_215659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3524, 15), 'self')
        # Obtaining the member '_navigate_mode' of a type (line 3524)
        _navigate_mode_215660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3524, 15), self_215659, '_navigate_mode')
        # Assigning a type to the variable 'stypy_return_type' (line 3524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3524, 8), 'stypy_return_type', _navigate_mode_215660)
        
        # ################# End of 'get_navigate_mode(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_navigate_mode' in the type store
        # Getting the type of 'stypy_return_type' (line 3520)
        stypy_return_type_215661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3520, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215661)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_navigate_mode'
        return stypy_return_type_215661


    @norecursion
    def set_navigate_mode(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_navigate_mode'
        module_type_store = module_type_store.open_function_context('set_navigate_mode', 3526, 4, False)
        # Assigning a type to the variable 'self' (line 3527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3527, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_navigate_mode.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_navigate_mode.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_navigate_mode.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_navigate_mode.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_navigate_mode')
        _AxesBase.set_navigate_mode.__dict__.__setitem__('stypy_param_names_list', ['b'])
        _AxesBase.set_navigate_mode.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.set_navigate_mode.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_navigate_mode.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_navigate_mode.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_navigate_mode.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_navigate_mode.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_navigate_mode', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_navigate_mode', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_navigate_mode(...)' code ##################

        unicode_215662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3533, (-1)), 'unicode', u'\n        Set the navigation toolbar button status;\n\n        .. warning::\n            this is not a user-API function.\n\n        ')
        
        # Assigning a Name to a Attribute (line 3534):
        
        # Assigning a Name to a Attribute (line 3534):
        # Getting the type of 'b' (line 3534)
        b_215663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3534, 30), 'b')
        # Getting the type of 'self' (line 3534)
        self_215664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3534, 8), 'self')
        # Setting the type of the member '_navigate_mode' of a type (line 3534)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3534, 8), self_215664, '_navigate_mode', b_215663)
        
        # ################# End of 'set_navigate_mode(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_navigate_mode' in the type store
        # Getting the type of 'stypy_return_type' (line 3526)
        stypy_return_type_215665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3526, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215665)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_navigate_mode'
        return stypy_return_type_215665


    @norecursion
    def _get_view(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_view'
        module_type_store = module_type_store.open_function_context('_get_view', 3536, 4, False)
        # Assigning a type to the variable 'self' (line 3537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3537, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._get_view.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._get_view.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._get_view.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._get_view.__dict__.__setitem__('stypy_function_name', '_AxesBase._get_view')
        _AxesBase._get_view.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase._get_view.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._get_view.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._get_view.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._get_view.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._get_view.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._get_view.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._get_view', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_view', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_view(...)' code ##################

        unicode_215666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3549, (-1)), 'unicode', u'\n        Save information required to reproduce the current view.\n\n        Called before a view is changed, such as during a pan or zoom\n        initiated by the user. You may return any information you deem\n        necessary to describe the view.\n\n        .. note::\n\n            Intended to be overridden by new projection types, but if not, the\n            default implementation saves the view limits. You *must* implement\n            :meth:`_set_view` if you implement this method.\n        ')
        
        # Assigning a Call to a Tuple (line 3550):
        
        # Assigning a Call to a Name:
        
        # Call to get_xlim(...): (line 3550)
        # Processing the call keyword arguments (line 3550)
        kwargs_215669 = {}
        # Getting the type of 'self' (line 3550)
        self_215667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3550, 21), 'self', False)
        # Obtaining the member 'get_xlim' of a type (line 3550)
        get_xlim_215668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3550, 21), self_215667, 'get_xlim')
        # Calling get_xlim(args, kwargs) (line 3550)
        get_xlim_call_result_215670 = invoke(stypy.reporting.localization.Localization(__file__, 3550, 21), get_xlim_215668, *[], **kwargs_215669)
        
        # Assigning a type to the variable 'call_assignment_207850' (line 3550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3550, 8), 'call_assignment_207850', get_xlim_call_result_215670)
        
        # Assigning a Call to a Name (line 3550):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3550, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215674 = {}
        # Getting the type of 'call_assignment_207850' (line 3550)
        call_assignment_207850_215671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3550, 8), 'call_assignment_207850', False)
        # Obtaining the member '__getitem__' of a type (line 3550)
        getitem___215672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3550, 8), call_assignment_207850_215671, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215675 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215672, *[int_215673], **kwargs_215674)
        
        # Assigning a type to the variable 'call_assignment_207851' (line 3550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3550, 8), 'call_assignment_207851', getitem___call_result_215675)
        
        # Assigning a Name to a Name (line 3550):
        # Getting the type of 'call_assignment_207851' (line 3550)
        call_assignment_207851_215676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3550, 8), 'call_assignment_207851')
        # Assigning a type to the variable 'xmin' (line 3550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3550, 8), 'xmin', call_assignment_207851_215676)
        
        # Assigning a Call to a Name (line 3550):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3550, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215680 = {}
        # Getting the type of 'call_assignment_207850' (line 3550)
        call_assignment_207850_215677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3550, 8), 'call_assignment_207850', False)
        # Obtaining the member '__getitem__' of a type (line 3550)
        getitem___215678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3550, 8), call_assignment_207850_215677, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215681 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215678, *[int_215679], **kwargs_215680)
        
        # Assigning a type to the variable 'call_assignment_207852' (line 3550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3550, 8), 'call_assignment_207852', getitem___call_result_215681)
        
        # Assigning a Name to a Name (line 3550):
        # Getting the type of 'call_assignment_207852' (line 3550)
        call_assignment_207852_215682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3550, 8), 'call_assignment_207852')
        # Assigning a type to the variable 'xmax' (line 3550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3550, 14), 'xmax', call_assignment_207852_215682)
        
        # Assigning a Call to a Tuple (line 3551):
        
        # Assigning a Call to a Name:
        
        # Call to get_ylim(...): (line 3551)
        # Processing the call keyword arguments (line 3551)
        kwargs_215685 = {}
        # Getting the type of 'self' (line 3551)
        self_215683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3551, 21), 'self', False)
        # Obtaining the member 'get_ylim' of a type (line 3551)
        get_ylim_215684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3551, 21), self_215683, 'get_ylim')
        # Calling get_ylim(args, kwargs) (line 3551)
        get_ylim_call_result_215686 = invoke(stypy.reporting.localization.Localization(__file__, 3551, 21), get_ylim_215684, *[], **kwargs_215685)
        
        # Assigning a type to the variable 'call_assignment_207853' (line 3551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3551, 8), 'call_assignment_207853', get_ylim_call_result_215686)
        
        # Assigning a Call to a Name (line 3551):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3551, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215690 = {}
        # Getting the type of 'call_assignment_207853' (line 3551)
        call_assignment_207853_215687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3551, 8), 'call_assignment_207853', False)
        # Obtaining the member '__getitem__' of a type (line 3551)
        getitem___215688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3551, 8), call_assignment_207853_215687, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215691 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215688, *[int_215689], **kwargs_215690)
        
        # Assigning a type to the variable 'call_assignment_207854' (line 3551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3551, 8), 'call_assignment_207854', getitem___call_result_215691)
        
        # Assigning a Name to a Name (line 3551):
        # Getting the type of 'call_assignment_207854' (line 3551)
        call_assignment_207854_215692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3551, 8), 'call_assignment_207854')
        # Assigning a type to the variable 'ymin' (line 3551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3551, 8), 'ymin', call_assignment_207854_215692)
        
        # Assigning a Call to a Name (line 3551):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3551, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215696 = {}
        # Getting the type of 'call_assignment_207853' (line 3551)
        call_assignment_207853_215693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3551, 8), 'call_assignment_207853', False)
        # Obtaining the member '__getitem__' of a type (line 3551)
        getitem___215694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3551, 8), call_assignment_207853_215693, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215697 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215694, *[int_215695], **kwargs_215696)
        
        # Assigning a type to the variable 'call_assignment_207855' (line 3551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3551, 8), 'call_assignment_207855', getitem___call_result_215697)
        
        # Assigning a Name to a Name (line 3551):
        # Getting the type of 'call_assignment_207855' (line 3551)
        call_assignment_207855_215698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3551, 8), 'call_assignment_207855')
        # Assigning a type to the variable 'ymax' (line 3551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3551, 14), 'ymax', call_assignment_207855_215698)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3552)
        tuple_215699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3552, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3552)
        # Adding element type (line 3552)
        # Getting the type of 'xmin' (line 3552)
        xmin_215700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 16), 'xmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3552, 16), tuple_215699, xmin_215700)
        # Adding element type (line 3552)
        # Getting the type of 'xmax' (line 3552)
        xmax_215701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 22), 'xmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3552, 16), tuple_215699, xmax_215701)
        # Adding element type (line 3552)
        # Getting the type of 'ymin' (line 3552)
        ymin_215702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 28), 'ymin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3552, 16), tuple_215699, ymin_215702)
        # Adding element type (line 3552)
        # Getting the type of 'ymax' (line 3552)
        ymax_215703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 34), 'ymax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3552, 16), tuple_215699, ymax_215703)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3552, 8), 'stypy_return_type', tuple_215699)
        
        # ################# End of '_get_view(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_view' in the type store
        # Getting the type of 'stypy_return_type' (line 3536)
        stypy_return_type_215704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3536, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215704)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_view'
        return stypy_return_type_215704


    @norecursion
    def _set_view(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_view'
        module_type_store = module_type_store.open_function_context('_set_view', 3554, 4, False)
        # Assigning a type to the variable 'self' (line 3555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3555, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._set_view.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._set_view.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._set_view.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._set_view.__dict__.__setitem__('stypy_function_name', '_AxesBase._set_view')
        _AxesBase._set_view.__dict__.__setitem__('stypy_param_names_list', ['view'])
        _AxesBase._set_view.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._set_view.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._set_view.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._set_view.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._set_view.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._set_view.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._set_view', ['view'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_view', localization, ['view'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_view(...)' code ##################

        unicode_215705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3565, (-1)), 'unicode', u'\n        Apply a previously saved view.\n\n        Called when restoring a view, such as with the navigation buttons.\n\n        .. note::\n\n            Intended to be overridden by new projection types, but if not, the\n            default implementation restores the view limits. You *must*\n            implement :meth:`_get_view` if you implement this method.\n        ')
        
        # Assigning a Name to a Tuple (line 3566):
        
        # Assigning a Subscript to a Name (line 3566):
        
        # Obtaining the type of the subscript
        int_215706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3566, 8), 'int')
        # Getting the type of 'view' (line 3566)
        view_215707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 33), 'view')
        # Obtaining the member '__getitem__' of a type (line 3566)
        getitem___215708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3566, 8), view_215707, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3566)
        subscript_call_result_215709 = invoke(stypy.reporting.localization.Localization(__file__, 3566, 8), getitem___215708, int_215706)
        
        # Assigning a type to the variable 'tuple_var_assignment_207856' (line 3566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3566, 8), 'tuple_var_assignment_207856', subscript_call_result_215709)
        
        # Assigning a Subscript to a Name (line 3566):
        
        # Obtaining the type of the subscript
        int_215710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3566, 8), 'int')
        # Getting the type of 'view' (line 3566)
        view_215711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 33), 'view')
        # Obtaining the member '__getitem__' of a type (line 3566)
        getitem___215712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3566, 8), view_215711, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3566)
        subscript_call_result_215713 = invoke(stypy.reporting.localization.Localization(__file__, 3566, 8), getitem___215712, int_215710)
        
        # Assigning a type to the variable 'tuple_var_assignment_207857' (line 3566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3566, 8), 'tuple_var_assignment_207857', subscript_call_result_215713)
        
        # Assigning a Subscript to a Name (line 3566):
        
        # Obtaining the type of the subscript
        int_215714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3566, 8), 'int')
        # Getting the type of 'view' (line 3566)
        view_215715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 33), 'view')
        # Obtaining the member '__getitem__' of a type (line 3566)
        getitem___215716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3566, 8), view_215715, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3566)
        subscript_call_result_215717 = invoke(stypy.reporting.localization.Localization(__file__, 3566, 8), getitem___215716, int_215714)
        
        # Assigning a type to the variable 'tuple_var_assignment_207858' (line 3566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3566, 8), 'tuple_var_assignment_207858', subscript_call_result_215717)
        
        # Assigning a Subscript to a Name (line 3566):
        
        # Obtaining the type of the subscript
        int_215718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3566, 8), 'int')
        # Getting the type of 'view' (line 3566)
        view_215719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 33), 'view')
        # Obtaining the member '__getitem__' of a type (line 3566)
        getitem___215720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3566, 8), view_215719, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3566)
        subscript_call_result_215721 = invoke(stypy.reporting.localization.Localization(__file__, 3566, 8), getitem___215720, int_215718)
        
        # Assigning a type to the variable 'tuple_var_assignment_207859' (line 3566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3566, 8), 'tuple_var_assignment_207859', subscript_call_result_215721)
        
        # Assigning a Name to a Name (line 3566):
        # Getting the type of 'tuple_var_assignment_207856' (line 3566)
        tuple_var_assignment_207856_215722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 8), 'tuple_var_assignment_207856')
        # Assigning a type to the variable 'xmin' (line 3566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3566, 8), 'xmin', tuple_var_assignment_207856_215722)
        
        # Assigning a Name to a Name (line 3566):
        # Getting the type of 'tuple_var_assignment_207857' (line 3566)
        tuple_var_assignment_207857_215723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 8), 'tuple_var_assignment_207857')
        # Assigning a type to the variable 'xmax' (line 3566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3566, 14), 'xmax', tuple_var_assignment_207857_215723)
        
        # Assigning a Name to a Name (line 3566):
        # Getting the type of 'tuple_var_assignment_207858' (line 3566)
        tuple_var_assignment_207858_215724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 8), 'tuple_var_assignment_207858')
        # Assigning a type to the variable 'ymin' (line 3566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3566, 20), 'ymin', tuple_var_assignment_207858_215724)
        
        # Assigning a Name to a Name (line 3566):
        # Getting the type of 'tuple_var_assignment_207859' (line 3566)
        tuple_var_assignment_207859_215725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 8), 'tuple_var_assignment_207859')
        # Assigning a type to the variable 'ymax' (line 3566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3566, 26), 'ymax', tuple_var_assignment_207859_215725)
        
        # Call to set_xlim(...): (line 3567)
        # Processing the call arguments (line 3567)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3567)
        tuple_215728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3567, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3567)
        # Adding element type (line 3567)
        # Getting the type of 'xmin' (line 3567)
        xmin_215729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3567, 23), 'xmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3567, 23), tuple_215728, xmin_215729)
        # Adding element type (line 3567)
        # Getting the type of 'xmax' (line 3567)
        xmax_215730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3567, 29), 'xmax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3567, 23), tuple_215728, xmax_215730)
        
        # Processing the call keyword arguments (line 3567)
        kwargs_215731 = {}
        # Getting the type of 'self' (line 3567)
        self_215726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3567, 8), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 3567)
        set_xlim_215727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3567, 8), self_215726, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 3567)
        set_xlim_call_result_215732 = invoke(stypy.reporting.localization.Localization(__file__, 3567, 8), set_xlim_215727, *[tuple_215728], **kwargs_215731)
        
        
        # Call to set_ylim(...): (line 3568)
        # Processing the call arguments (line 3568)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3568)
        tuple_215735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3568, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3568)
        # Adding element type (line 3568)
        # Getting the type of 'ymin' (line 3568)
        ymin_215736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3568, 23), 'ymin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3568, 23), tuple_215735, ymin_215736)
        # Adding element type (line 3568)
        # Getting the type of 'ymax' (line 3568)
        ymax_215737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3568, 29), 'ymax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3568, 23), tuple_215735, ymax_215737)
        
        # Processing the call keyword arguments (line 3568)
        kwargs_215738 = {}
        # Getting the type of 'self' (line 3568)
        self_215733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3568, 8), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 3568)
        set_ylim_215734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3568, 8), self_215733, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 3568)
        set_ylim_call_result_215739 = invoke(stypy.reporting.localization.Localization(__file__, 3568, 8), set_ylim_215734, *[tuple_215735], **kwargs_215738)
        
        
        # ################# End of '_set_view(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_view' in the type store
        # Getting the type of 'stypy_return_type' (line 3554)
        stypy_return_type_215740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3554, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_215740)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_view'
        return stypy_return_type_215740


    @norecursion
    def _set_view_from_bbox(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_215741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3570, 50), 'unicode', u'in')
        # Getting the type of 'None' (line 3571)
        None_215742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3571, 33), 'None')
        # Getting the type of 'False' (line 3571)
        False_215743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3571, 45), 'False')
        # Getting the type of 'False' (line 3571)
        False_215744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3571, 58), 'False')
        defaults = [unicode_215741, None_215742, False_215743, False_215744]
        # Create a new context for function '_set_view_from_bbox'
        module_type_store = module_type_store.open_function_context('_set_view_from_bbox', 3570, 4, False)
        # Assigning a type to the variable 'self' (line 3571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3571, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._set_view_from_bbox.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._set_view_from_bbox.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._set_view_from_bbox.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._set_view_from_bbox.__dict__.__setitem__('stypy_function_name', '_AxesBase._set_view_from_bbox')
        _AxesBase._set_view_from_bbox.__dict__.__setitem__('stypy_param_names_list', ['bbox', 'direction', 'mode', 'twinx', 'twiny'])
        _AxesBase._set_view_from_bbox.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase._set_view_from_bbox.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase._set_view_from_bbox.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._set_view_from_bbox.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._set_view_from_bbox.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._set_view_from_bbox.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._set_view_from_bbox', ['bbox', 'direction', 'mode', 'twinx', 'twiny'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_view_from_bbox', localization, ['bbox', 'direction', 'mode', 'twinx', 'twiny'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_view_from_bbox(...)' code ##################

        unicode_215745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3606, (-1)), 'unicode', u"\n        Update view from a selection bbox.\n\n        .. note::\n\n            Intended to be overridden by new projection types, but if not, the\n            default implementation sets the view limits to the bbox directly.\n\n        Parameters\n        ----------\n\n        bbox : 4-tuple or 3 tuple\n            * If bbox is a 4 tuple, it is the selected bounding box limits,\n                in *display* coordinates.\n            * If bbox is a 3 tuple, it is an (xp, yp, scl) triple, where\n                (xp,yp) is the center of zooming and scl the scale factor to\n                zoom by.\n\n        direction : str\n            The direction to apply the bounding box.\n                * `'in'` - The bounding box describes the view directly, i.e.,\n                           it zooms in.\n                * `'out'` - The bounding box describes the size to make the\n                            existing view, i.e., it zooms out.\n\n        mode : str or None\n            The selection mode, whether to apply the bounding box in only the\n            `'x'` direction, `'y'` direction or both (`None`).\n\n        twinx : bool\n            Whether this axis is twinned in the *x*-direction.\n\n        twiny : bool\n            Whether this axis is twinned in the *y*-direction.\n        ")
        
        # Assigning a Call to a Tuple (line 3607):
        
        # Assigning a Call to a Name:
        
        # Call to get_xlim(...): (line 3607)
        # Processing the call keyword arguments (line 3607)
        kwargs_215748 = {}
        # Getting the type of 'self' (line 3607)
        self_215746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3607, 21), 'self', False)
        # Obtaining the member 'get_xlim' of a type (line 3607)
        get_xlim_215747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3607, 21), self_215746, 'get_xlim')
        # Calling get_xlim(args, kwargs) (line 3607)
        get_xlim_call_result_215749 = invoke(stypy.reporting.localization.Localization(__file__, 3607, 21), get_xlim_215747, *[], **kwargs_215748)
        
        # Assigning a type to the variable 'call_assignment_207860' (line 3607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3607, 8), 'call_assignment_207860', get_xlim_call_result_215749)
        
        # Assigning a Call to a Name (line 3607):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3607, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215753 = {}
        # Getting the type of 'call_assignment_207860' (line 3607)
        call_assignment_207860_215750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3607, 8), 'call_assignment_207860', False)
        # Obtaining the member '__getitem__' of a type (line 3607)
        getitem___215751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3607, 8), call_assignment_207860_215750, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215754 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215751, *[int_215752], **kwargs_215753)
        
        # Assigning a type to the variable 'call_assignment_207861' (line 3607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3607, 8), 'call_assignment_207861', getitem___call_result_215754)
        
        # Assigning a Name to a Name (line 3607):
        # Getting the type of 'call_assignment_207861' (line 3607)
        call_assignment_207861_215755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3607, 8), 'call_assignment_207861')
        # Assigning a type to the variable 'Xmin' (line 3607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3607, 8), 'Xmin', call_assignment_207861_215755)
        
        # Assigning a Call to a Name (line 3607):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3607, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215759 = {}
        # Getting the type of 'call_assignment_207860' (line 3607)
        call_assignment_207860_215756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3607, 8), 'call_assignment_207860', False)
        # Obtaining the member '__getitem__' of a type (line 3607)
        getitem___215757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3607, 8), call_assignment_207860_215756, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215760 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215757, *[int_215758], **kwargs_215759)
        
        # Assigning a type to the variable 'call_assignment_207862' (line 3607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3607, 8), 'call_assignment_207862', getitem___call_result_215760)
        
        # Assigning a Name to a Name (line 3607):
        # Getting the type of 'call_assignment_207862' (line 3607)
        call_assignment_207862_215761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3607, 8), 'call_assignment_207862')
        # Assigning a type to the variable 'Xmax' (line 3607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3607, 14), 'Xmax', call_assignment_207862_215761)
        
        # Assigning a Call to a Tuple (line 3608):
        
        # Assigning a Call to a Name:
        
        # Call to get_ylim(...): (line 3608)
        # Processing the call keyword arguments (line 3608)
        kwargs_215764 = {}
        # Getting the type of 'self' (line 3608)
        self_215762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3608, 21), 'self', False)
        # Obtaining the member 'get_ylim' of a type (line 3608)
        get_ylim_215763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3608, 21), self_215762, 'get_ylim')
        # Calling get_ylim(args, kwargs) (line 3608)
        get_ylim_call_result_215765 = invoke(stypy.reporting.localization.Localization(__file__, 3608, 21), get_ylim_215763, *[], **kwargs_215764)
        
        # Assigning a type to the variable 'call_assignment_207863' (line 3608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3608, 8), 'call_assignment_207863', get_ylim_call_result_215765)
        
        # Assigning a Call to a Name (line 3608):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3608, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215769 = {}
        # Getting the type of 'call_assignment_207863' (line 3608)
        call_assignment_207863_215766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3608, 8), 'call_assignment_207863', False)
        # Obtaining the member '__getitem__' of a type (line 3608)
        getitem___215767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3608, 8), call_assignment_207863_215766, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215770 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215767, *[int_215768], **kwargs_215769)
        
        # Assigning a type to the variable 'call_assignment_207864' (line 3608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3608, 8), 'call_assignment_207864', getitem___call_result_215770)
        
        # Assigning a Name to a Name (line 3608):
        # Getting the type of 'call_assignment_207864' (line 3608)
        call_assignment_207864_215771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3608, 8), 'call_assignment_207864')
        # Assigning a type to the variable 'Ymin' (line 3608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3608, 8), 'Ymin', call_assignment_207864_215771)
        
        # Assigning a Call to a Name (line 3608):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3608, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215775 = {}
        # Getting the type of 'call_assignment_207863' (line 3608)
        call_assignment_207863_215772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3608, 8), 'call_assignment_207863', False)
        # Obtaining the member '__getitem__' of a type (line 3608)
        getitem___215773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3608, 8), call_assignment_207863_215772, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215776 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215773, *[int_215774], **kwargs_215775)
        
        # Assigning a type to the variable 'call_assignment_207865' (line 3608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3608, 8), 'call_assignment_207865', getitem___call_result_215776)
        
        # Assigning a Name to a Name (line 3608):
        # Getting the type of 'call_assignment_207865' (line 3608)
        call_assignment_207865_215777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3608, 8), 'call_assignment_207865')
        # Assigning a type to the variable 'Ymax' (line 3608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3608, 14), 'Ymax', call_assignment_207865_215777)
        
        
        
        # Call to len(...): (line 3610)
        # Processing the call arguments (line 3610)
        # Getting the type of 'bbox' (line 3610)
        bbox_215779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3610, 15), 'bbox', False)
        # Processing the call keyword arguments (line 3610)
        kwargs_215780 = {}
        # Getting the type of 'len' (line 3610)
        len_215778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3610, 11), 'len', False)
        # Calling len(args, kwargs) (line 3610)
        len_call_result_215781 = invoke(stypy.reporting.localization.Localization(__file__, 3610, 11), len_215778, *[bbox_215779], **kwargs_215780)
        
        int_215782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3610, 24), 'int')
        # Applying the binary operator '==' (line 3610)
        result_eq_215783 = python_operator(stypy.reporting.localization.Localization(__file__, 3610, 11), '==', len_call_result_215781, int_215782)
        
        # Testing the type of an if condition (line 3610)
        if_condition_215784 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3610, 8), result_eq_215783)
        # Assigning a type to the variable 'if_condition_215784' (line 3610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3610, 8), 'if_condition_215784', if_condition_215784)
        # SSA begins for if statement (line 3610)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 3612):
        
        # Assigning a Subscript to a Name (line 3612):
        
        # Obtaining the type of the subscript
        int_215785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3612, 12), 'int')
        # Getting the type of 'bbox' (line 3612)
        bbox_215786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3612, 26), 'bbox')
        # Obtaining the member '__getitem__' of a type (line 3612)
        getitem___215787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3612, 12), bbox_215786, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3612)
        subscript_call_result_215788 = invoke(stypy.reporting.localization.Localization(__file__, 3612, 12), getitem___215787, int_215785)
        
        # Assigning a type to the variable 'tuple_var_assignment_207866' (line 3612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3612, 12), 'tuple_var_assignment_207866', subscript_call_result_215788)
        
        # Assigning a Subscript to a Name (line 3612):
        
        # Obtaining the type of the subscript
        int_215789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3612, 12), 'int')
        # Getting the type of 'bbox' (line 3612)
        bbox_215790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3612, 26), 'bbox')
        # Obtaining the member '__getitem__' of a type (line 3612)
        getitem___215791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3612, 12), bbox_215790, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3612)
        subscript_call_result_215792 = invoke(stypy.reporting.localization.Localization(__file__, 3612, 12), getitem___215791, int_215789)
        
        # Assigning a type to the variable 'tuple_var_assignment_207867' (line 3612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3612, 12), 'tuple_var_assignment_207867', subscript_call_result_215792)
        
        # Assigning a Subscript to a Name (line 3612):
        
        # Obtaining the type of the subscript
        int_215793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3612, 12), 'int')
        # Getting the type of 'bbox' (line 3612)
        bbox_215794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3612, 26), 'bbox')
        # Obtaining the member '__getitem__' of a type (line 3612)
        getitem___215795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3612, 12), bbox_215794, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3612)
        subscript_call_result_215796 = invoke(stypy.reporting.localization.Localization(__file__, 3612, 12), getitem___215795, int_215793)
        
        # Assigning a type to the variable 'tuple_var_assignment_207868' (line 3612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3612, 12), 'tuple_var_assignment_207868', subscript_call_result_215796)
        
        # Assigning a Name to a Name (line 3612):
        # Getting the type of 'tuple_var_assignment_207866' (line 3612)
        tuple_var_assignment_207866_215797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3612, 12), 'tuple_var_assignment_207866')
        # Assigning a type to the variable 'xp' (line 3612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3612, 12), 'xp', tuple_var_assignment_207866_215797)
        
        # Assigning a Name to a Name (line 3612):
        # Getting the type of 'tuple_var_assignment_207867' (line 3612)
        tuple_var_assignment_207867_215798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3612, 12), 'tuple_var_assignment_207867')
        # Assigning a type to the variable 'yp' (line 3612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3612, 16), 'yp', tuple_var_assignment_207867_215798)
        
        # Assigning a Name to a Name (line 3612):
        # Getting the type of 'tuple_var_assignment_207868' (line 3612)
        tuple_var_assignment_207868_215799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3612, 12), 'tuple_var_assignment_207868')
        # Assigning a type to the variable 'scl' (line 3612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3612, 20), 'scl', tuple_var_assignment_207868_215799)
        
        
        # Getting the type of 'scl' (line 3615)
        scl_215800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3615, 15), 'scl')
        int_215801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3615, 22), 'int')
        # Applying the binary operator '==' (line 3615)
        result_eq_215802 = python_operator(stypy.reporting.localization.Localization(__file__, 3615, 15), '==', scl_215800, int_215801)
        
        # Testing the type of an if condition (line 3615)
        if_condition_215803 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3615, 12), result_eq_215802)
        # Assigning a type to the variable 'if_condition_215803' (line 3615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3615, 12), 'if_condition_215803', if_condition_215803)
        # SSA begins for if statement (line 3615)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 3616):
        
        # Assigning a Num to a Name (line 3616):
        float_215804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3616, 22), 'float')
        # Assigning a type to the variable 'scl' (line 3616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3616, 16), 'scl', float_215804)
        # SSA join for if statement (line 3615)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'scl' (line 3619)
        scl_215805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3619, 15), 'scl')
        int_215806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3619, 21), 'int')
        # Applying the binary operator '>' (line 3619)
        result_gt_215807 = python_operator(stypy.reporting.localization.Localization(__file__, 3619, 15), '>', scl_215805, int_215806)
        
        # Testing the type of an if condition (line 3619)
        if_condition_215808 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3619, 12), result_gt_215807)
        # Assigning a type to the variable 'if_condition_215808' (line 3619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3619, 12), 'if_condition_215808', if_condition_215808)
        # SSA begins for if statement (line 3619)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 3620):
        
        # Assigning a Str to a Name (line 3620):
        unicode_215809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3620, 28), 'unicode', u'in')
        # Assigning a type to the variable 'direction' (line 3620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3620, 16), 'direction', unicode_215809)
        # SSA branch for the else part of an if statement (line 3619)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 3622):
        
        # Assigning a Str to a Name (line 3622):
        unicode_215810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3622, 28), 'unicode', u'out')
        # Assigning a type to the variable 'direction' (line 3622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3622, 16), 'direction', unicode_215810)
        
        # Assigning a BinOp to a Name (line 3623):
        
        # Assigning a BinOp to a Name (line 3623):
        int_215811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3623, 22), 'int')
        # Getting the type of 'scl' (line 3623)
        scl_215812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3623, 24), 'scl')
        # Applying the binary operator 'div' (line 3623)
        result_div_215813 = python_operator(stypy.reporting.localization.Localization(__file__, 3623, 22), 'div', int_215811, scl_215812)
        
        # Assigning a type to the variable 'scl' (line 3623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3623, 16), 'scl', result_div_215813)
        # SSA join for if statement (line 3619)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 3626):
        
        # Assigning a Attribute to a Name (line 3626):
        # Getting the type of 'self' (line 3626)
        self_215814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3626, 22), 'self')
        # Obtaining the member 'transData' of a type (line 3626)
        transData_215815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3626, 22), self_215814, 'transData')
        # Obtaining the member 'transform' of a type (line 3626)
        transform_215816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3626, 22), transData_215815, 'transform')
        # Assigning a type to the variable 'tranD2C' (line 3626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3626, 12), 'tranD2C', transform_215816)
        
        # Assigning a Call to a Tuple (line 3627):
        
        # Assigning a Call to a Name:
        
        # Call to tranD2C(...): (line 3627)
        # Processing the call arguments (line 3627)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3627)
        tuple_215818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3627, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3627)
        # Adding element type (line 3627)
        # Getting the type of 'Xmin' (line 3627)
        Xmin_215819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 34), 'Xmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3627, 34), tuple_215818, Xmin_215819)
        # Adding element type (line 3627)
        # Getting the type of 'Ymin' (line 3627)
        Ymin_215820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 40), 'Ymin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3627, 34), tuple_215818, Ymin_215820)
        
        # Processing the call keyword arguments (line 3627)
        kwargs_215821 = {}
        # Getting the type of 'tranD2C' (line 3627)
        tranD2C_215817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 25), 'tranD2C', False)
        # Calling tranD2C(args, kwargs) (line 3627)
        tranD2C_call_result_215822 = invoke(stypy.reporting.localization.Localization(__file__, 3627, 25), tranD2C_215817, *[tuple_215818], **kwargs_215821)
        
        # Assigning a type to the variable 'call_assignment_207869' (line 3627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3627, 12), 'call_assignment_207869', tranD2C_call_result_215822)
        
        # Assigning a Call to a Name (line 3627):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3627, 12), 'int')
        # Processing the call keyword arguments
        kwargs_215826 = {}
        # Getting the type of 'call_assignment_207869' (line 3627)
        call_assignment_207869_215823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 12), 'call_assignment_207869', False)
        # Obtaining the member '__getitem__' of a type (line 3627)
        getitem___215824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3627, 12), call_assignment_207869_215823, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215827 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215824, *[int_215825], **kwargs_215826)
        
        # Assigning a type to the variable 'call_assignment_207870' (line 3627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3627, 12), 'call_assignment_207870', getitem___call_result_215827)
        
        # Assigning a Name to a Name (line 3627):
        # Getting the type of 'call_assignment_207870' (line 3627)
        call_assignment_207870_215828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 12), 'call_assignment_207870')
        # Assigning a type to the variable 'xmin' (line 3627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3627, 12), 'xmin', call_assignment_207870_215828)
        
        # Assigning a Call to a Name (line 3627):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3627, 12), 'int')
        # Processing the call keyword arguments
        kwargs_215832 = {}
        # Getting the type of 'call_assignment_207869' (line 3627)
        call_assignment_207869_215829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 12), 'call_assignment_207869', False)
        # Obtaining the member '__getitem__' of a type (line 3627)
        getitem___215830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3627, 12), call_assignment_207869_215829, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215833 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215830, *[int_215831], **kwargs_215832)
        
        # Assigning a type to the variable 'call_assignment_207871' (line 3627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3627, 12), 'call_assignment_207871', getitem___call_result_215833)
        
        # Assigning a Name to a Name (line 3627):
        # Getting the type of 'call_assignment_207871' (line 3627)
        call_assignment_207871_215834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 12), 'call_assignment_207871')
        # Assigning a type to the variable 'ymin' (line 3627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3627, 18), 'ymin', call_assignment_207871_215834)
        
        # Assigning a Call to a Tuple (line 3628):
        
        # Assigning a Call to a Name:
        
        # Call to tranD2C(...): (line 3628)
        # Processing the call arguments (line 3628)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3628)
        tuple_215836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3628, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3628)
        # Adding element type (line 3628)
        # Getting the type of 'Xmax' (line 3628)
        Xmax_215837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3628, 34), 'Xmax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3628, 34), tuple_215836, Xmax_215837)
        # Adding element type (line 3628)
        # Getting the type of 'Ymax' (line 3628)
        Ymax_215838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3628, 40), 'Ymax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3628, 34), tuple_215836, Ymax_215838)
        
        # Processing the call keyword arguments (line 3628)
        kwargs_215839 = {}
        # Getting the type of 'tranD2C' (line 3628)
        tranD2C_215835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3628, 25), 'tranD2C', False)
        # Calling tranD2C(args, kwargs) (line 3628)
        tranD2C_call_result_215840 = invoke(stypy.reporting.localization.Localization(__file__, 3628, 25), tranD2C_215835, *[tuple_215836], **kwargs_215839)
        
        # Assigning a type to the variable 'call_assignment_207872' (line 3628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3628, 12), 'call_assignment_207872', tranD2C_call_result_215840)
        
        # Assigning a Call to a Name (line 3628):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3628, 12), 'int')
        # Processing the call keyword arguments
        kwargs_215844 = {}
        # Getting the type of 'call_assignment_207872' (line 3628)
        call_assignment_207872_215841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3628, 12), 'call_assignment_207872', False)
        # Obtaining the member '__getitem__' of a type (line 3628)
        getitem___215842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3628, 12), call_assignment_207872_215841, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215845 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215842, *[int_215843], **kwargs_215844)
        
        # Assigning a type to the variable 'call_assignment_207873' (line 3628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3628, 12), 'call_assignment_207873', getitem___call_result_215845)
        
        # Assigning a Name to a Name (line 3628):
        # Getting the type of 'call_assignment_207873' (line 3628)
        call_assignment_207873_215846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3628, 12), 'call_assignment_207873')
        # Assigning a type to the variable 'xmax' (line 3628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3628, 12), 'xmax', call_assignment_207873_215846)
        
        # Assigning a Call to a Name (line 3628):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3628, 12), 'int')
        # Processing the call keyword arguments
        kwargs_215850 = {}
        # Getting the type of 'call_assignment_207872' (line 3628)
        call_assignment_207872_215847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3628, 12), 'call_assignment_207872', False)
        # Obtaining the member '__getitem__' of a type (line 3628)
        getitem___215848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3628, 12), call_assignment_207872_215847, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215851 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215848, *[int_215849], **kwargs_215850)
        
        # Assigning a type to the variable 'call_assignment_207874' (line 3628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3628, 12), 'call_assignment_207874', getitem___call_result_215851)
        
        # Assigning a Name to a Name (line 3628):
        # Getting the type of 'call_assignment_207874' (line 3628)
        call_assignment_207874_215852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3628, 12), 'call_assignment_207874')
        # Assigning a type to the variable 'ymax' (line 3628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3628, 18), 'ymax', call_assignment_207874_215852)
        
        # Assigning a BinOp to a Name (line 3631):
        
        # Assigning a BinOp to a Name (line 3631):
        # Getting the type of 'xmax' (line 3631)
        xmax_215853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3631, 21), 'xmax')
        # Getting the type of 'xmin' (line 3631)
        xmin_215854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3631, 28), 'xmin')
        # Applying the binary operator '-' (line 3631)
        result_sub_215855 = python_operator(stypy.reporting.localization.Localization(__file__, 3631, 21), '-', xmax_215853, xmin_215854)
        
        # Assigning a type to the variable 'xwidth' (line 3631)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3631, 12), 'xwidth', result_sub_215855)
        
        # Assigning a BinOp to a Name (line 3632):
        
        # Assigning a BinOp to a Name (line 3632):
        # Getting the type of 'ymax' (line 3632)
        ymax_215856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3632, 21), 'ymax')
        # Getting the type of 'ymin' (line 3632)
        ymin_215857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3632, 28), 'ymin')
        # Applying the binary operator '-' (line 3632)
        result_sub_215858 = python_operator(stypy.reporting.localization.Localization(__file__, 3632, 21), '-', ymax_215856, ymin_215857)
        
        # Assigning a type to the variable 'ywidth' (line 3632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3632, 12), 'ywidth', result_sub_215858)
        
        # Assigning a BinOp to a Name (line 3633):
        
        # Assigning a BinOp to a Name (line 3633):
        # Getting the type of 'xmax' (line 3633)
        xmax_215859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3633, 20), 'xmax')
        # Getting the type of 'xmin' (line 3633)
        xmin_215860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3633, 27), 'xmin')
        # Applying the binary operator '+' (line 3633)
        result_add_215861 = python_operator(stypy.reporting.localization.Localization(__file__, 3633, 20), '+', xmax_215859, xmin_215860)
        
        float_215862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3633, 33), 'float')
        # Applying the binary operator '*' (line 3633)
        result_mul_215863 = python_operator(stypy.reporting.localization.Localization(__file__, 3633, 19), '*', result_add_215861, float_215862)
        
        # Assigning a type to the variable 'xcen' (line 3633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3633, 12), 'xcen', result_mul_215863)
        
        # Assigning a BinOp to a Name (line 3634):
        
        # Assigning a BinOp to a Name (line 3634):
        # Getting the type of 'ymax' (line 3634)
        ymax_215864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3634, 20), 'ymax')
        # Getting the type of 'ymin' (line 3634)
        ymin_215865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3634, 27), 'ymin')
        # Applying the binary operator '+' (line 3634)
        result_add_215866 = python_operator(stypy.reporting.localization.Localization(__file__, 3634, 20), '+', ymax_215864, ymin_215865)
        
        float_215867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3634, 33), 'float')
        # Applying the binary operator '*' (line 3634)
        result_mul_215868 = python_operator(stypy.reporting.localization.Localization(__file__, 3634, 19), '*', result_add_215866, float_215867)
        
        # Assigning a type to the variable 'ycen' (line 3634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3634, 12), 'ycen', result_mul_215868)
        
        # Assigning a BinOp to a Name (line 3635):
        
        # Assigning a BinOp to a Name (line 3635):
        # Getting the type of 'xp' (line 3635)
        xp_215869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3635, 19), 'xp')
        # Getting the type of 'scl' (line 3635)
        scl_215870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3635, 23), 'scl')
        int_215871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3635, 29), 'int')
        # Applying the binary operator '-' (line 3635)
        result_sub_215872 = python_operator(stypy.reporting.localization.Localization(__file__, 3635, 23), '-', scl_215870, int_215871)
        
        # Applying the binary operator '*' (line 3635)
        result_mul_215873 = python_operator(stypy.reporting.localization.Localization(__file__, 3635, 19), '*', xp_215869, result_sub_215872)
        
        # Getting the type of 'xcen' (line 3635)
        xcen_215874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3635, 34), 'xcen')
        # Applying the binary operator '+' (line 3635)
        result_add_215875 = python_operator(stypy.reporting.localization.Localization(__file__, 3635, 19), '+', result_mul_215873, xcen_215874)
        
        # Getting the type of 'scl' (line 3635)
        scl_215876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3635, 40), 'scl')
        # Applying the binary operator 'div' (line 3635)
        result_div_215877 = python_operator(stypy.reporting.localization.Localization(__file__, 3635, 18), 'div', result_add_215875, scl_215876)
        
        # Assigning a type to the variable 'xzc' (line 3635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3635, 12), 'xzc', result_div_215877)
        
        # Assigning a BinOp to a Name (line 3636):
        
        # Assigning a BinOp to a Name (line 3636):
        # Getting the type of 'yp' (line 3636)
        yp_215878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3636, 19), 'yp')
        # Getting the type of 'scl' (line 3636)
        scl_215879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3636, 23), 'scl')
        int_215880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3636, 29), 'int')
        # Applying the binary operator '-' (line 3636)
        result_sub_215881 = python_operator(stypy.reporting.localization.Localization(__file__, 3636, 23), '-', scl_215879, int_215880)
        
        # Applying the binary operator '*' (line 3636)
        result_mul_215882 = python_operator(stypy.reporting.localization.Localization(__file__, 3636, 19), '*', yp_215878, result_sub_215881)
        
        # Getting the type of 'ycen' (line 3636)
        ycen_215883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3636, 34), 'ycen')
        # Applying the binary operator '+' (line 3636)
        result_add_215884 = python_operator(stypy.reporting.localization.Localization(__file__, 3636, 19), '+', result_mul_215882, ycen_215883)
        
        # Getting the type of 'scl' (line 3636)
        scl_215885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3636, 40), 'scl')
        # Applying the binary operator 'div' (line 3636)
        result_div_215886 = python_operator(stypy.reporting.localization.Localization(__file__, 3636, 18), 'div', result_add_215884, scl_215885)
        
        # Assigning a type to the variable 'yzc' (line 3636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3636, 12), 'yzc', result_div_215886)
        
        # Assigning a List to a Name (line 3638):
        
        # Assigning a List to a Name (line 3638):
        
        # Obtaining an instance of the builtin type 'list' (line 3638)
        list_215887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3638, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3638)
        # Adding element type (line 3638)
        # Getting the type of 'xzc' (line 3638)
        xzc_215888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3638, 20), 'xzc')
        # Getting the type of 'xwidth' (line 3638)
        xwidth_215889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3638, 26), 'xwidth')
        float_215890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3638, 33), 'float')
        # Applying the binary operator 'div' (line 3638)
        result_div_215891 = python_operator(stypy.reporting.localization.Localization(__file__, 3638, 26), 'div', xwidth_215889, float_215890)
        
        # Getting the type of 'scl' (line 3638)
        scl_215892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3638, 36), 'scl')
        # Applying the binary operator 'div' (line 3638)
        result_div_215893 = python_operator(stypy.reporting.localization.Localization(__file__, 3638, 35), 'div', result_div_215891, scl_215892)
        
        # Applying the binary operator '-' (line 3638)
        result_sub_215894 = python_operator(stypy.reporting.localization.Localization(__file__, 3638, 20), '-', xzc_215888, result_div_215893)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3638, 19), list_215887, result_sub_215894)
        # Adding element type (line 3638)
        # Getting the type of 'yzc' (line 3638)
        yzc_215895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3638, 41), 'yzc')
        # Getting the type of 'ywidth' (line 3638)
        ywidth_215896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3638, 47), 'ywidth')
        float_215897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3638, 54), 'float')
        # Applying the binary operator 'div' (line 3638)
        result_div_215898 = python_operator(stypy.reporting.localization.Localization(__file__, 3638, 47), 'div', ywidth_215896, float_215897)
        
        # Getting the type of 'scl' (line 3638)
        scl_215899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3638, 57), 'scl')
        # Applying the binary operator 'div' (line 3638)
        result_div_215900 = python_operator(stypy.reporting.localization.Localization(__file__, 3638, 56), 'div', result_div_215898, scl_215899)
        
        # Applying the binary operator '-' (line 3638)
        result_sub_215901 = python_operator(stypy.reporting.localization.Localization(__file__, 3638, 41), '-', yzc_215895, result_div_215900)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3638, 19), list_215887, result_sub_215901)
        # Adding element type (line 3638)
        # Getting the type of 'xzc' (line 3639)
        xzc_215902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 20), 'xzc')
        # Getting the type of 'xwidth' (line 3639)
        xwidth_215903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 26), 'xwidth')
        float_215904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3639, 33), 'float')
        # Applying the binary operator 'div' (line 3639)
        result_div_215905 = python_operator(stypy.reporting.localization.Localization(__file__, 3639, 26), 'div', xwidth_215903, float_215904)
        
        # Getting the type of 'scl' (line 3639)
        scl_215906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 36), 'scl')
        # Applying the binary operator 'div' (line 3639)
        result_div_215907 = python_operator(stypy.reporting.localization.Localization(__file__, 3639, 35), 'div', result_div_215905, scl_215906)
        
        # Applying the binary operator '+' (line 3639)
        result_add_215908 = python_operator(stypy.reporting.localization.Localization(__file__, 3639, 20), '+', xzc_215902, result_div_215907)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3638, 19), list_215887, result_add_215908)
        # Adding element type (line 3638)
        # Getting the type of 'yzc' (line 3639)
        yzc_215909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 41), 'yzc')
        # Getting the type of 'ywidth' (line 3639)
        ywidth_215910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 47), 'ywidth')
        float_215911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3639, 54), 'float')
        # Applying the binary operator 'div' (line 3639)
        result_div_215912 = python_operator(stypy.reporting.localization.Localization(__file__, 3639, 47), 'div', ywidth_215910, float_215911)
        
        # Getting the type of 'scl' (line 3639)
        scl_215913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 57), 'scl')
        # Applying the binary operator 'div' (line 3639)
        result_div_215914 = python_operator(stypy.reporting.localization.Localization(__file__, 3639, 56), 'div', result_div_215912, scl_215913)
        
        # Applying the binary operator '+' (line 3639)
        result_add_215915 = python_operator(stypy.reporting.localization.Localization(__file__, 3639, 41), '+', yzc_215909, result_div_215914)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3638, 19), list_215887, result_add_215915)
        
        # Assigning a type to the variable 'bbox' (line 3638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3638, 12), 'bbox', list_215887)
        # SSA branch for the else part of an if statement (line 3610)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to len(...): (line 3640)
        # Processing the call arguments (line 3640)
        # Getting the type of 'bbox' (line 3640)
        bbox_215917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3640, 17), 'bbox', False)
        # Processing the call keyword arguments (line 3640)
        kwargs_215918 = {}
        # Getting the type of 'len' (line 3640)
        len_215916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3640, 13), 'len', False)
        # Calling len(args, kwargs) (line 3640)
        len_call_result_215919 = invoke(stypy.reporting.localization.Localization(__file__, 3640, 13), len_215916, *[bbox_215917], **kwargs_215918)
        
        int_215920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3640, 26), 'int')
        # Applying the binary operator '!=' (line 3640)
        result_ne_215921 = python_operator(stypy.reporting.localization.Localization(__file__, 3640, 13), '!=', len_call_result_215919, int_215920)
        
        # Testing the type of an if condition (line 3640)
        if_condition_215922 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3640, 13), result_ne_215921)
        # Assigning a type to the variable 'if_condition_215922' (line 3640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3640, 13), 'if_condition_215922', if_condition_215922)
        # SSA begins for if statement (line 3640)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 3642)
        # Processing the call arguments (line 3642)
        unicode_215925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3643, (-1)), 'unicode', u'Warning in _set_view_from_bbox: bounding box is not a                  tuple of length 3 or 4. Ignoring the view change...')
        # Processing the call keyword arguments (line 3642)
        kwargs_215926 = {}
        # Getting the type of 'warnings' (line 3642)
        warnings_215923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3642, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3642)
        warn_215924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3642, 12), warnings_215923, 'warn')
        # Calling warn(args, kwargs) (line 3642)
        warn_call_result_215927 = invoke(stypy.reporting.localization.Localization(__file__, 3642, 12), warn_215924, *[unicode_215925], **kwargs_215926)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3644, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 3640)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3610)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Tuple (line 3647):
        
        # Assigning a Subscript to a Name (line 3647):
        
        # Obtaining the type of the subscript
        int_215928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3647, 8), 'int')
        # Getting the type of 'bbox' (line 3647)
        bbox_215929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3647, 29), 'bbox')
        # Obtaining the member '__getitem__' of a type (line 3647)
        getitem___215930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3647, 8), bbox_215929, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3647)
        subscript_call_result_215931 = invoke(stypy.reporting.localization.Localization(__file__, 3647, 8), getitem___215930, int_215928)
        
        # Assigning a type to the variable 'tuple_var_assignment_207875' (line 3647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3647, 8), 'tuple_var_assignment_207875', subscript_call_result_215931)
        
        # Assigning a Subscript to a Name (line 3647):
        
        # Obtaining the type of the subscript
        int_215932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3647, 8), 'int')
        # Getting the type of 'bbox' (line 3647)
        bbox_215933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3647, 29), 'bbox')
        # Obtaining the member '__getitem__' of a type (line 3647)
        getitem___215934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3647, 8), bbox_215933, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3647)
        subscript_call_result_215935 = invoke(stypy.reporting.localization.Localization(__file__, 3647, 8), getitem___215934, int_215932)
        
        # Assigning a type to the variable 'tuple_var_assignment_207876' (line 3647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3647, 8), 'tuple_var_assignment_207876', subscript_call_result_215935)
        
        # Assigning a Subscript to a Name (line 3647):
        
        # Obtaining the type of the subscript
        int_215936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3647, 8), 'int')
        # Getting the type of 'bbox' (line 3647)
        bbox_215937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3647, 29), 'bbox')
        # Obtaining the member '__getitem__' of a type (line 3647)
        getitem___215938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3647, 8), bbox_215937, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3647)
        subscript_call_result_215939 = invoke(stypy.reporting.localization.Localization(__file__, 3647, 8), getitem___215938, int_215936)
        
        # Assigning a type to the variable 'tuple_var_assignment_207877' (line 3647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3647, 8), 'tuple_var_assignment_207877', subscript_call_result_215939)
        
        # Assigning a Subscript to a Name (line 3647):
        
        # Obtaining the type of the subscript
        int_215940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3647, 8), 'int')
        # Getting the type of 'bbox' (line 3647)
        bbox_215941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3647, 29), 'bbox')
        # Obtaining the member '__getitem__' of a type (line 3647)
        getitem___215942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3647, 8), bbox_215941, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3647)
        subscript_call_result_215943 = invoke(stypy.reporting.localization.Localization(__file__, 3647, 8), getitem___215942, int_215940)
        
        # Assigning a type to the variable 'tuple_var_assignment_207878' (line 3647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3647, 8), 'tuple_var_assignment_207878', subscript_call_result_215943)
        
        # Assigning a Name to a Name (line 3647):
        # Getting the type of 'tuple_var_assignment_207875' (line 3647)
        tuple_var_assignment_207875_215944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3647, 8), 'tuple_var_assignment_207875')
        # Assigning a type to the variable 'lastx' (line 3647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3647, 8), 'lastx', tuple_var_assignment_207875_215944)
        
        # Assigning a Name to a Name (line 3647):
        # Getting the type of 'tuple_var_assignment_207876' (line 3647)
        tuple_var_assignment_207876_215945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3647, 8), 'tuple_var_assignment_207876')
        # Assigning a type to the variable 'lasty' (line 3647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3647, 15), 'lasty', tuple_var_assignment_207876_215945)
        
        # Assigning a Name to a Name (line 3647):
        # Getting the type of 'tuple_var_assignment_207877' (line 3647)
        tuple_var_assignment_207877_215946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3647, 8), 'tuple_var_assignment_207877')
        # Assigning a type to the variable 'x' (line 3647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3647, 22), 'x', tuple_var_assignment_207877_215946)
        
        # Assigning a Name to a Name (line 3647):
        # Getting the type of 'tuple_var_assignment_207878' (line 3647)
        tuple_var_assignment_207878_215947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3647, 8), 'tuple_var_assignment_207878')
        # Assigning a type to the variable 'y' (line 3647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3647, 25), 'y', tuple_var_assignment_207878_215947)
        
        # Assigning a Call to a Name (line 3650):
        
        # Assigning a Call to a Name (line 3650):
        
        # Call to inverted(...): (line 3650)
        # Processing the call keyword arguments (line 3650)
        kwargs_215951 = {}
        # Getting the type of 'self' (line 3650)
        self_215948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3650, 18), 'self', False)
        # Obtaining the member 'transData' of a type (line 3650)
        transData_215949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3650, 18), self_215948, 'transData')
        # Obtaining the member 'inverted' of a type (line 3650)
        inverted_215950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3650, 18), transData_215949, 'inverted')
        # Calling inverted(args, kwargs) (line 3650)
        inverted_call_result_215952 = invoke(stypy.reporting.localization.Localization(__file__, 3650, 18), inverted_215950, *[], **kwargs_215951)
        
        # Assigning a type to the variable 'inverse' (line 3650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3650, 8), 'inverse', inverted_call_result_215952)
        
        # Assigning a Call to a Tuple (line 3651):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 3651)
        # Processing the call arguments (line 3651)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3651)
        tuple_215955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3651, 48), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3651)
        # Adding element type (line 3651)
        # Getting the type of 'lastx' (line 3651)
        lastx_215956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3651, 48), 'lastx', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3651, 48), tuple_215955, lastx_215956)
        # Adding element type (line 3651)
        # Getting the type of 'lasty' (line 3651)
        lasty_215957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3651, 55), 'lasty', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3651, 48), tuple_215955, lasty_215957)
        
        # Processing the call keyword arguments (line 3651)
        kwargs_215958 = {}
        # Getting the type of 'inverse' (line 3651)
        inverse_215953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3651, 23), 'inverse', False)
        # Obtaining the member 'transform_point' of a type (line 3651)
        transform_point_215954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3651, 23), inverse_215953, 'transform_point')
        # Calling transform_point(args, kwargs) (line 3651)
        transform_point_call_result_215959 = invoke(stypy.reporting.localization.Localization(__file__, 3651, 23), transform_point_215954, *[tuple_215955], **kwargs_215958)
        
        # Assigning a type to the variable 'call_assignment_207879' (line 3651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3651, 8), 'call_assignment_207879', transform_point_call_result_215959)
        
        # Assigning a Call to a Name (line 3651):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3651, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215963 = {}
        # Getting the type of 'call_assignment_207879' (line 3651)
        call_assignment_207879_215960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3651, 8), 'call_assignment_207879', False)
        # Obtaining the member '__getitem__' of a type (line 3651)
        getitem___215961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3651, 8), call_assignment_207879_215960, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215964 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215961, *[int_215962], **kwargs_215963)
        
        # Assigning a type to the variable 'call_assignment_207880' (line 3651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3651, 8), 'call_assignment_207880', getitem___call_result_215964)
        
        # Assigning a Name to a Name (line 3651):
        # Getting the type of 'call_assignment_207880' (line 3651)
        call_assignment_207880_215965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3651, 8), 'call_assignment_207880')
        # Assigning a type to the variable 'lastx' (line 3651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3651, 8), 'lastx', call_assignment_207880_215965)
        
        # Assigning a Call to a Name (line 3651):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3651, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215969 = {}
        # Getting the type of 'call_assignment_207879' (line 3651)
        call_assignment_207879_215966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3651, 8), 'call_assignment_207879', False)
        # Obtaining the member '__getitem__' of a type (line 3651)
        getitem___215967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3651, 8), call_assignment_207879_215966, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215970 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215967, *[int_215968], **kwargs_215969)
        
        # Assigning a type to the variable 'call_assignment_207881' (line 3651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3651, 8), 'call_assignment_207881', getitem___call_result_215970)
        
        # Assigning a Name to a Name (line 3651):
        # Getting the type of 'call_assignment_207881' (line 3651)
        call_assignment_207881_215971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3651, 8), 'call_assignment_207881')
        # Assigning a type to the variable 'lasty' (line 3651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3651, 15), 'lasty', call_assignment_207881_215971)
        
        # Assigning a Call to a Tuple (line 3652):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 3652)
        # Processing the call arguments (line 3652)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3652)
        tuple_215974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3652, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3652)
        # Adding element type (line 3652)
        # Getting the type of 'x' (line 3652)
        x_215975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3652, 40), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3652, 40), tuple_215974, x_215975)
        # Adding element type (line 3652)
        # Getting the type of 'y' (line 3652)
        y_215976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3652, 43), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3652, 40), tuple_215974, y_215976)
        
        # Processing the call keyword arguments (line 3652)
        kwargs_215977 = {}
        # Getting the type of 'inverse' (line 3652)
        inverse_215972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3652, 15), 'inverse', False)
        # Obtaining the member 'transform_point' of a type (line 3652)
        transform_point_215973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3652, 15), inverse_215972, 'transform_point')
        # Calling transform_point(args, kwargs) (line 3652)
        transform_point_call_result_215978 = invoke(stypy.reporting.localization.Localization(__file__, 3652, 15), transform_point_215973, *[tuple_215974], **kwargs_215977)
        
        # Assigning a type to the variable 'call_assignment_207882' (line 3652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3652, 8), 'call_assignment_207882', transform_point_call_result_215978)
        
        # Assigning a Call to a Name (line 3652):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3652, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215982 = {}
        # Getting the type of 'call_assignment_207882' (line 3652)
        call_assignment_207882_215979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3652, 8), 'call_assignment_207882', False)
        # Obtaining the member '__getitem__' of a type (line 3652)
        getitem___215980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3652, 8), call_assignment_207882_215979, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215983 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215980, *[int_215981], **kwargs_215982)
        
        # Assigning a type to the variable 'call_assignment_207883' (line 3652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3652, 8), 'call_assignment_207883', getitem___call_result_215983)
        
        # Assigning a Name to a Name (line 3652):
        # Getting the type of 'call_assignment_207883' (line 3652)
        call_assignment_207883_215984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3652, 8), 'call_assignment_207883')
        # Assigning a type to the variable 'x' (line 3652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3652, 8), 'x', call_assignment_207883_215984)
        
        # Assigning a Call to a Name (line 3652):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_215987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3652, 8), 'int')
        # Processing the call keyword arguments
        kwargs_215988 = {}
        # Getting the type of 'call_assignment_207882' (line 3652)
        call_assignment_207882_215985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3652, 8), 'call_assignment_207882', False)
        # Obtaining the member '__getitem__' of a type (line 3652)
        getitem___215986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3652, 8), call_assignment_207882_215985, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_215989 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___215986, *[int_215987], **kwargs_215988)
        
        # Assigning a type to the variable 'call_assignment_207884' (line 3652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3652, 8), 'call_assignment_207884', getitem___call_result_215989)
        
        # Assigning a Name to a Name (line 3652):
        # Getting the type of 'call_assignment_207884' (line 3652)
        call_assignment_207884_215990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3652, 8), 'call_assignment_207884')
        # Assigning a type to the variable 'y' (line 3652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3652, 11), 'y', call_assignment_207884_215990)
        
        # Getting the type of 'twinx' (line 3654)
        twinx_215991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3654, 11), 'twinx')
        # Testing the type of an if condition (line 3654)
        if_condition_215992 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3654, 8), twinx_215991)
        # Assigning a type to the variable 'if_condition_215992' (line 3654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3654, 8), 'if_condition_215992', if_condition_215992)
        # SSA begins for if statement (line 3654)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 3655):
        
        # Assigning a Name to a Name (line 3655):
        # Getting the type of 'Xmin' (line 3655)
        Xmin_215993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3655, 21), 'Xmin')
        # Assigning a type to the variable 'tuple_assignment_207885' (line 3655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3655, 12), 'tuple_assignment_207885', Xmin_215993)
        
        # Assigning a Name to a Name (line 3655):
        # Getting the type of 'Xmax' (line 3655)
        Xmax_215994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3655, 27), 'Xmax')
        # Assigning a type to the variable 'tuple_assignment_207886' (line 3655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3655, 12), 'tuple_assignment_207886', Xmax_215994)
        
        # Assigning a Name to a Name (line 3655):
        # Getting the type of 'tuple_assignment_207885' (line 3655)
        tuple_assignment_207885_215995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3655, 12), 'tuple_assignment_207885')
        # Assigning a type to the variable 'x0' (line 3655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3655, 12), 'x0', tuple_assignment_207885_215995)
        
        # Assigning a Name to a Name (line 3655):
        # Getting the type of 'tuple_assignment_207886' (line 3655)
        tuple_assignment_207886_215996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3655, 12), 'tuple_assignment_207886')
        # Assigning a type to the variable 'x1' (line 3655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3655, 16), 'x1', tuple_assignment_207886_215996)
        # SSA branch for the else part of an if statement (line 3654)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'Xmin' (line 3657)
        Xmin_215997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3657, 15), 'Xmin')
        # Getting the type of 'Xmax' (line 3657)
        Xmax_215998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3657, 22), 'Xmax')
        # Applying the binary operator '<' (line 3657)
        result_lt_215999 = python_operator(stypy.reporting.localization.Localization(__file__, 3657, 15), '<', Xmin_215997, Xmax_215998)
        
        # Testing the type of an if condition (line 3657)
        if_condition_216000 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3657, 12), result_lt_215999)
        # Assigning a type to the variable 'if_condition_216000' (line 3657)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3657, 12), 'if_condition_216000', if_condition_216000)
        # SSA begins for if statement (line 3657)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'x' (line 3658)
        x_216001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3658, 19), 'x')
        # Getting the type of 'lastx' (line 3658)
        lastx_216002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3658, 23), 'lastx')
        # Applying the binary operator '<' (line 3658)
        result_lt_216003 = python_operator(stypy.reporting.localization.Localization(__file__, 3658, 19), '<', x_216001, lastx_216002)
        
        # Testing the type of an if condition (line 3658)
        if_condition_216004 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3658, 16), result_lt_216003)
        # Assigning a type to the variable 'if_condition_216004' (line 3658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3658, 16), 'if_condition_216004', if_condition_216004)
        # SSA begins for if statement (line 3658)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 3659):
        
        # Assigning a Name to a Name (line 3659):
        # Getting the type of 'x' (line 3659)
        x_216005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3659, 29), 'x')
        # Assigning a type to the variable 'tuple_assignment_207887' (line 3659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3659, 20), 'tuple_assignment_207887', x_216005)
        
        # Assigning a Name to a Name (line 3659):
        # Getting the type of 'lastx' (line 3659)
        lastx_216006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3659, 32), 'lastx')
        # Assigning a type to the variable 'tuple_assignment_207888' (line 3659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3659, 20), 'tuple_assignment_207888', lastx_216006)
        
        # Assigning a Name to a Name (line 3659):
        # Getting the type of 'tuple_assignment_207887' (line 3659)
        tuple_assignment_207887_216007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3659, 20), 'tuple_assignment_207887')
        # Assigning a type to the variable 'x0' (line 3659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3659, 20), 'x0', tuple_assignment_207887_216007)
        
        # Assigning a Name to a Name (line 3659):
        # Getting the type of 'tuple_assignment_207888' (line 3659)
        tuple_assignment_207888_216008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3659, 20), 'tuple_assignment_207888')
        # Assigning a type to the variable 'x1' (line 3659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3659, 24), 'x1', tuple_assignment_207888_216008)
        # SSA branch for the else part of an if statement (line 3658)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Tuple (line 3661):
        
        # Assigning a Name to a Name (line 3661):
        # Getting the type of 'lastx' (line 3661)
        lastx_216009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3661, 29), 'lastx')
        # Assigning a type to the variable 'tuple_assignment_207889' (line 3661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3661, 20), 'tuple_assignment_207889', lastx_216009)
        
        # Assigning a Name to a Name (line 3661):
        # Getting the type of 'x' (line 3661)
        x_216010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3661, 36), 'x')
        # Assigning a type to the variable 'tuple_assignment_207890' (line 3661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3661, 20), 'tuple_assignment_207890', x_216010)
        
        # Assigning a Name to a Name (line 3661):
        # Getting the type of 'tuple_assignment_207889' (line 3661)
        tuple_assignment_207889_216011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3661, 20), 'tuple_assignment_207889')
        # Assigning a type to the variable 'x0' (line 3661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3661, 20), 'x0', tuple_assignment_207889_216011)
        
        # Assigning a Name to a Name (line 3661):
        # Getting the type of 'tuple_assignment_207890' (line 3661)
        tuple_assignment_207890_216012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3661, 20), 'tuple_assignment_207890')
        # Assigning a type to the variable 'x1' (line 3661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3661, 24), 'x1', tuple_assignment_207890_216012)
        # SSA join for if statement (line 3658)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'x0' (line 3662)
        x0_216013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3662, 19), 'x0')
        # Getting the type of 'Xmin' (line 3662)
        Xmin_216014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3662, 24), 'Xmin')
        # Applying the binary operator '<' (line 3662)
        result_lt_216015 = python_operator(stypy.reporting.localization.Localization(__file__, 3662, 19), '<', x0_216013, Xmin_216014)
        
        # Testing the type of an if condition (line 3662)
        if_condition_216016 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3662, 16), result_lt_216015)
        # Assigning a type to the variable 'if_condition_216016' (line 3662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3662, 16), 'if_condition_216016', if_condition_216016)
        # SSA begins for if statement (line 3662)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3663):
        
        # Assigning a Name to a Name (line 3663):
        # Getting the type of 'Xmin' (line 3663)
        Xmin_216017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3663, 25), 'Xmin')
        # Assigning a type to the variable 'x0' (line 3663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3663, 20), 'x0', Xmin_216017)
        # SSA join for if statement (line 3662)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'x1' (line 3664)
        x1_216018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3664, 19), 'x1')
        # Getting the type of 'Xmax' (line 3664)
        Xmax_216019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3664, 24), 'Xmax')
        # Applying the binary operator '>' (line 3664)
        result_gt_216020 = python_operator(stypy.reporting.localization.Localization(__file__, 3664, 19), '>', x1_216018, Xmax_216019)
        
        # Testing the type of an if condition (line 3664)
        if_condition_216021 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3664, 16), result_gt_216020)
        # Assigning a type to the variable 'if_condition_216021' (line 3664)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3664, 16), 'if_condition_216021', if_condition_216021)
        # SSA begins for if statement (line 3664)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3665):
        
        # Assigning a Name to a Name (line 3665):
        # Getting the type of 'Xmax' (line 3665)
        Xmax_216022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3665, 25), 'Xmax')
        # Assigning a type to the variable 'x1' (line 3665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3665, 20), 'x1', Xmax_216022)
        # SSA join for if statement (line 3664)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 3657)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'x' (line 3667)
        x_216023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3667, 19), 'x')
        # Getting the type of 'lastx' (line 3667)
        lastx_216024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3667, 23), 'lastx')
        # Applying the binary operator '>' (line 3667)
        result_gt_216025 = python_operator(stypy.reporting.localization.Localization(__file__, 3667, 19), '>', x_216023, lastx_216024)
        
        # Testing the type of an if condition (line 3667)
        if_condition_216026 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3667, 16), result_gt_216025)
        # Assigning a type to the variable 'if_condition_216026' (line 3667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3667, 16), 'if_condition_216026', if_condition_216026)
        # SSA begins for if statement (line 3667)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 3668):
        
        # Assigning a Name to a Name (line 3668):
        # Getting the type of 'x' (line 3668)
        x_216027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3668, 29), 'x')
        # Assigning a type to the variable 'tuple_assignment_207891' (line 3668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3668, 20), 'tuple_assignment_207891', x_216027)
        
        # Assigning a Name to a Name (line 3668):
        # Getting the type of 'lastx' (line 3668)
        lastx_216028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3668, 32), 'lastx')
        # Assigning a type to the variable 'tuple_assignment_207892' (line 3668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3668, 20), 'tuple_assignment_207892', lastx_216028)
        
        # Assigning a Name to a Name (line 3668):
        # Getting the type of 'tuple_assignment_207891' (line 3668)
        tuple_assignment_207891_216029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3668, 20), 'tuple_assignment_207891')
        # Assigning a type to the variable 'x0' (line 3668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3668, 20), 'x0', tuple_assignment_207891_216029)
        
        # Assigning a Name to a Name (line 3668):
        # Getting the type of 'tuple_assignment_207892' (line 3668)
        tuple_assignment_207892_216030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3668, 20), 'tuple_assignment_207892')
        # Assigning a type to the variable 'x1' (line 3668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3668, 24), 'x1', tuple_assignment_207892_216030)
        # SSA branch for the else part of an if statement (line 3667)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Tuple (line 3670):
        
        # Assigning a Name to a Name (line 3670):
        # Getting the type of 'lastx' (line 3670)
        lastx_216031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3670, 29), 'lastx')
        # Assigning a type to the variable 'tuple_assignment_207893' (line 3670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3670, 20), 'tuple_assignment_207893', lastx_216031)
        
        # Assigning a Name to a Name (line 3670):
        # Getting the type of 'x' (line 3670)
        x_216032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3670, 36), 'x')
        # Assigning a type to the variable 'tuple_assignment_207894' (line 3670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3670, 20), 'tuple_assignment_207894', x_216032)
        
        # Assigning a Name to a Name (line 3670):
        # Getting the type of 'tuple_assignment_207893' (line 3670)
        tuple_assignment_207893_216033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3670, 20), 'tuple_assignment_207893')
        # Assigning a type to the variable 'x0' (line 3670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3670, 20), 'x0', tuple_assignment_207893_216033)
        
        # Assigning a Name to a Name (line 3670):
        # Getting the type of 'tuple_assignment_207894' (line 3670)
        tuple_assignment_207894_216034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3670, 20), 'tuple_assignment_207894')
        # Assigning a type to the variable 'x1' (line 3670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3670, 24), 'x1', tuple_assignment_207894_216034)
        # SSA join for if statement (line 3667)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'x0' (line 3671)
        x0_216035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3671, 19), 'x0')
        # Getting the type of 'Xmin' (line 3671)
        Xmin_216036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3671, 24), 'Xmin')
        # Applying the binary operator '>' (line 3671)
        result_gt_216037 = python_operator(stypy.reporting.localization.Localization(__file__, 3671, 19), '>', x0_216035, Xmin_216036)
        
        # Testing the type of an if condition (line 3671)
        if_condition_216038 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3671, 16), result_gt_216037)
        # Assigning a type to the variable 'if_condition_216038' (line 3671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3671, 16), 'if_condition_216038', if_condition_216038)
        # SSA begins for if statement (line 3671)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3672):
        
        # Assigning a Name to a Name (line 3672):
        # Getting the type of 'Xmin' (line 3672)
        Xmin_216039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3672, 25), 'Xmin')
        # Assigning a type to the variable 'x0' (line 3672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3672, 20), 'x0', Xmin_216039)
        # SSA join for if statement (line 3671)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'x1' (line 3673)
        x1_216040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3673, 19), 'x1')
        # Getting the type of 'Xmax' (line 3673)
        Xmax_216041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3673, 24), 'Xmax')
        # Applying the binary operator '<' (line 3673)
        result_lt_216042 = python_operator(stypy.reporting.localization.Localization(__file__, 3673, 19), '<', x1_216040, Xmax_216041)
        
        # Testing the type of an if condition (line 3673)
        if_condition_216043 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3673, 16), result_lt_216042)
        # Assigning a type to the variable 'if_condition_216043' (line 3673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3673, 16), 'if_condition_216043', if_condition_216043)
        # SSA begins for if statement (line 3673)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3674):
        
        # Assigning a Name to a Name (line 3674):
        # Getting the type of 'Xmax' (line 3674)
        Xmax_216044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3674, 25), 'Xmax')
        # Assigning a type to the variable 'x1' (line 3674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3674, 20), 'x1', Xmax_216044)
        # SSA join for if statement (line 3673)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3657)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3654)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'twiny' (line 3676)
        twiny_216045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3676, 11), 'twiny')
        # Testing the type of an if condition (line 3676)
        if_condition_216046 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3676, 8), twiny_216045)
        # Assigning a type to the variable 'if_condition_216046' (line 3676)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3676, 8), 'if_condition_216046', if_condition_216046)
        # SSA begins for if statement (line 3676)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 3677):
        
        # Assigning a Name to a Name (line 3677):
        # Getting the type of 'Ymin' (line 3677)
        Ymin_216047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3677, 21), 'Ymin')
        # Assigning a type to the variable 'tuple_assignment_207895' (line 3677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3677, 12), 'tuple_assignment_207895', Ymin_216047)
        
        # Assigning a Name to a Name (line 3677):
        # Getting the type of 'Ymax' (line 3677)
        Ymax_216048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3677, 27), 'Ymax')
        # Assigning a type to the variable 'tuple_assignment_207896' (line 3677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3677, 12), 'tuple_assignment_207896', Ymax_216048)
        
        # Assigning a Name to a Name (line 3677):
        # Getting the type of 'tuple_assignment_207895' (line 3677)
        tuple_assignment_207895_216049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3677, 12), 'tuple_assignment_207895')
        # Assigning a type to the variable 'y0' (line 3677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3677, 12), 'y0', tuple_assignment_207895_216049)
        
        # Assigning a Name to a Name (line 3677):
        # Getting the type of 'tuple_assignment_207896' (line 3677)
        tuple_assignment_207896_216050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3677, 12), 'tuple_assignment_207896')
        # Assigning a type to the variable 'y1' (line 3677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3677, 16), 'y1', tuple_assignment_207896_216050)
        # SSA branch for the else part of an if statement (line 3676)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'Ymin' (line 3679)
        Ymin_216051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3679, 15), 'Ymin')
        # Getting the type of 'Ymax' (line 3679)
        Ymax_216052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3679, 22), 'Ymax')
        # Applying the binary operator '<' (line 3679)
        result_lt_216053 = python_operator(stypy.reporting.localization.Localization(__file__, 3679, 15), '<', Ymin_216051, Ymax_216052)
        
        # Testing the type of an if condition (line 3679)
        if_condition_216054 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3679, 12), result_lt_216053)
        # Assigning a type to the variable 'if_condition_216054' (line 3679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3679, 12), 'if_condition_216054', if_condition_216054)
        # SSA begins for if statement (line 3679)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'y' (line 3680)
        y_216055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3680, 19), 'y')
        # Getting the type of 'lasty' (line 3680)
        lasty_216056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3680, 23), 'lasty')
        # Applying the binary operator '<' (line 3680)
        result_lt_216057 = python_operator(stypy.reporting.localization.Localization(__file__, 3680, 19), '<', y_216055, lasty_216056)
        
        # Testing the type of an if condition (line 3680)
        if_condition_216058 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3680, 16), result_lt_216057)
        # Assigning a type to the variable 'if_condition_216058' (line 3680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3680, 16), 'if_condition_216058', if_condition_216058)
        # SSA begins for if statement (line 3680)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 3681):
        
        # Assigning a Name to a Name (line 3681):
        # Getting the type of 'y' (line 3681)
        y_216059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3681, 29), 'y')
        # Assigning a type to the variable 'tuple_assignment_207897' (line 3681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3681, 20), 'tuple_assignment_207897', y_216059)
        
        # Assigning a Name to a Name (line 3681):
        # Getting the type of 'lasty' (line 3681)
        lasty_216060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3681, 32), 'lasty')
        # Assigning a type to the variable 'tuple_assignment_207898' (line 3681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3681, 20), 'tuple_assignment_207898', lasty_216060)
        
        # Assigning a Name to a Name (line 3681):
        # Getting the type of 'tuple_assignment_207897' (line 3681)
        tuple_assignment_207897_216061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3681, 20), 'tuple_assignment_207897')
        # Assigning a type to the variable 'y0' (line 3681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3681, 20), 'y0', tuple_assignment_207897_216061)
        
        # Assigning a Name to a Name (line 3681):
        # Getting the type of 'tuple_assignment_207898' (line 3681)
        tuple_assignment_207898_216062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3681, 20), 'tuple_assignment_207898')
        # Assigning a type to the variable 'y1' (line 3681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3681, 24), 'y1', tuple_assignment_207898_216062)
        # SSA branch for the else part of an if statement (line 3680)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Tuple (line 3683):
        
        # Assigning a Name to a Name (line 3683):
        # Getting the type of 'lasty' (line 3683)
        lasty_216063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3683, 29), 'lasty')
        # Assigning a type to the variable 'tuple_assignment_207899' (line 3683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3683, 20), 'tuple_assignment_207899', lasty_216063)
        
        # Assigning a Name to a Name (line 3683):
        # Getting the type of 'y' (line 3683)
        y_216064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3683, 36), 'y')
        # Assigning a type to the variable 'tuple_assignment_207900' (line 3683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3683, 20), 'tuple_assignment_207900', y_216064)
        
        # Assigning a Name to a Name (line 3683):
        # Getting the type of 'tuple_assignment_207899' (line 3683)
        tuple_assignment_207899_216065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3683, 20), 'tuple_assignment_207899')
        # Assigning a type to the variable 'y0' (line 3683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3683, 20), 'y0', tuple_assignment_207899_216065)
        
        # Assigning a Name to a Name (line 3683):
        # Getting the type of 'tuple_assignment_207900' (line 3683)
        tuple_assignment_207900_216066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3683, 20), 'tuple_assignment_207900')
        # Assigning a type to the variable 'y1' (line 3683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3683, 24), 'y1', tuple_assignment_207900_216066)
        # SSA join for if statement (line 3680)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'y0' (line 3684)
        y0_216067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3684, 19), 'y0')
        # Getting the type of 'Ymin' (line 3684)
        Ymin_216068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3684, 24), 'Ymin')
        # Applying the binary operator '<' (line 3684)
        result_lt_216069 = python_operator(stypy.reporting.localization.Localization(__file__, 3684, 19), '<', y0_216067, Ymin_216068)
        
        # Testing the type of an if condition (line 3684)
        if_condition_216070 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3684, 16), result_lt_216069)
        # Assigning a type to the variable 'if_condition_216070' (line 3684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3684, 16), 'if_condition_216070', if_condition_216070)
        # SSA begins for if statement (line 3684)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3685):
        
        # Assigning a Name to a Name (line 3685):
        # Getting the type of 'Ymin' (line 3685)
        Ymin_216071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3685, 25), 'Ymin')
        # Assigning a type to the variable 'y0' (line 3685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3685, 20), 'y0', Ymin_216071)
        # SSA join for if statement (line 3684)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'y1' (line 3686)
        y1_216072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3686, 19), 'y1')
        # Getting the type of 'Ymax' (line 3686)
        Ymax_216073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3686, 24), 'Ymax')
        # Applying the binary operator '>' (line 3686)
        result_gt_216074 = python_operator(stypy.reporting.localization.Localization(__file__, 3686, 19), '>', y1_216072, Ymax_216073)
        
        # Testing the type of an if condition (line 3686)
        if_condition_216075 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3686, 16), result_gt_216074)
        # Assigning a type to the variable 'if_condition_216075' (line 3686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3686, 16), 'if_condition_216075', if_condition_216075)
        # SSA begins for if statement (line 3686)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3687):
        
        # Assigning a Name to a Name (line 3687):
        # Getting the type of 'Ymax' (line 3687)
        Ymax_216076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3687, 25), 'Ymax')
        # Assigning a type to the variable 'y1' (line 3687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3687, 20), 'y1', Ymax_216076)
        # SSA join for if statement (line 3686)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 3679)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'y' (line 3689)
        y_216077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3689, 19), 'y')
        # Getting the type of 'lasty' (line 3689)
        lasty_216078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3689, 23), 'lasty')
        # Applying the binary operator '>' (line 3689)
        result_gt_216079 = python_operator(stypy.reporting.localization.Localization(__file__, 3689, 19), '>', y_216077, lasty_216078)
        
        # Testing the type of an if condition (line 3689)
        if_condition_216080 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3689, 16), result_gt_216079)
        # Assigning a type to the variable 'if_condition_216080' (line 3689)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3689, 16), 'if_condition_216080', if_condition_216080)
        # SSA begins for if statement (line 3689)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 3690):
        
        # Assigning a Name to a Name (line 3690):
        # Getting the type of 'y' (line 3690)
        y_216081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3690, 29), 'y')
        # Assigning a type to the variable 'tuple_assignment_207901' (line 3690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3690, 20), 'tuple_assignment_207901', y_216081)
        
        # Assigning a Name to a Name (line 3690):
        # Getting the type of 'lasty' (line 3690)
        lasty_216082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3690, 32), 'lasty')
        # Assigning a type to the variable 'tuple_assignment_207902' (line 3690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3690, 20), 'tuple_assignment_207902', lasty_216082)
        
        # Assigning a Name to a Name (line 3690):
        # Getting the type of 'tuple_assignment_207901' (line 3690)
        tuple_assignment_207901_216083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3690, 20), 'tuple_assignment_207901')
        # Assigning a type to the variable 'y0' (line 3690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3690, 20), 'y0', tuple_assignment_207901_216083)
        
        # Assigning a Name to a Name (line 3690):
        # Getting the type of 'tuple_assignment_207902' (line 3690)
        tuple_assignment_207902_216084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3690, 20), 'tuple_assignment_207902')
        # Assigning a type to the variable 'y1' (line 3690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3690, 24), 'y1', tuple_assignment_207902_216084)
        # SSA branch for the else part of an if statement (line 3689)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Tuple (line 3692):
        
        # Assigning a Name to a Name (line 3692):
        # Getting the type of 'lasty' (line 3692)
        lasty_216085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3692, 29), 'lasty')
        # Assigning a type to the variable 'tuple_assignment_207903' (line 3692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3692, 20), 'tuple_assignment_207903', lasty_216085)
        
        # Assigning a Name to a Name (line 3692):
        # Getting the type of 'y' (line 3692)
        y_216086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3692, 36), 'y')
        # Assigning a type to the variable 'tuple_assignment_207904' (line 3692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3692, 20), 'tuple_assignment_207904', y_216086)
        
        # Assigning a Name to a Name (line 3692):
        # Getting the type of 'tuple_assignment_207903' (line 3692)
        tuple_assignment_207903_216087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3692, 20), 'tuple_assignment_207903')
        # Assigning a type to the variable 'y0' (line 3692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3692, 20), 'y0', tuple_assignment_207903_216087)
        
        # Assigning a Name to a Name (line 3692):
        # Getting the type of 'tuple_assignment_207904' (line 3692)
        tuple_assignment_207904_216088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3692, 20), 'tuple_assignment_207904')
        # Assigning a type to the variable 'y1' (line 3692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3692, 24), 'y1', tuple_assignment_207904_216088)
        # SSA join for if statement (line 3689)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'y0' (line 3693)
        y0_216089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3693, 19), 'y0')
        # Getting the type of 'Ymin' (line 3693)
        Ymin_216090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3693, 24), 'Ymin')
        # Applying the binary operator '>' (line 3693)
        result_gt_216091 = python_operator(stypy.reporting.localization.Localization(__file__, 3693, 19), '>', y0_216089, Ymin_216090)
        
        # Testing the type of an if condition (line 3693)
        if_condition_216092 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3693, 16), result_gt_216091)
        # Assigning a type to the variable 'if_condition_216092' (line 3693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3693, 16), 'if_condition_216092', if_condition_216092)
        # SSA begins for if statement (line 3693)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3694):
        
        # Assigning a Name to a Name (line 3694):
        # Getting the type of 'Ymin' (line 3694)
        Ymin_216093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3694, 25), 'Ymin')
        # Assigning a type to the variable 'y0' (line 3694)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3694, 20), 'y0', Ymin_216093)
        # SSA join for if statement (line 3693)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'y1' (line 3695)
        y1_216094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3695, 19), 'y1')
        # Getting the type of 'Ymax' (line 3695)
        Ymax_216095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3695, 24), 'Ymax')
        # Applying the binary operator '<' (line 3695)
        result_lt_216096 = python_operator(stypy.reporting.localization.Localization(__file__, 3695, 19), '<', y1_216094, Ymax_216095)
        
        # Testing the type of an if condition (line 3695)
        if_condition_216097 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3695, 16), result_lt_216096)
        # Assigning a type to the variable 'if_condition_216097' (line 3695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3695, 16), 'if_condition_216097', if_condition_216097)
        # SSA begins for if statement (line 3695)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3696):
        
        # Assigning a Name to a Name (line 3696):
        # Getting the type of 'Ymax' (line 3696)
        Ymax_216098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3696, 25), 'Ymax')
        # Assigning a type to the variable 'y1' (line 3696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3696, 20), 'y1', Ymax_216098)
        # SSA join for if statement (line 3695)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3679)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3676)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'direction' (line 3698)
        direction_216099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3698, 11), 'direction')
        unicode_216100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3698, 24), 'unicode', u'in')
        # Applying the binary operator '==' (line 3698)
        result_eq_216101 = python_operator(stypy.reporting.localization.Localization(__file__, 3698, 11), '==', direction_216099, unicode_216100)
        
        # Testing the type of an if condition (line 3698)
        if_condition_216102 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3698, 8), result_eq_216101)
        # Assigning a type to the variable 'if_condition_216102' (line 3698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3698, 8), 'if_condition_216102', if_condition_216102)
        # SSA begins for if statement (line 3698)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'mode' (line 3699)
        mode_216103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3699, 15), 'mode')
        unicode_216104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3699, 23), 'unicode', u'x')
        # Applying the binary operator '==' (line 3699)
        result_eq_216105 = python_operator(stypy.reporting.localization.Localization(__file__, 3699, 15), '==', mode_216103, unicode_216104)
        
        # Testing the type of an if condition (line 3699)
        if_condition_216106 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3699, 12), result_eq_216105)
        # Assigning a type to the variable 'if_condition_216106' (line 3699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3699, 12), 'if_condition_216106', if_condition_216106)
        # SSA begins for if statement (line 3699)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_xlim(...): (line 3700)
        # Processing the call arguments (line 3700)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3700)
        tuple_216109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3700, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3700)
        # Adding element type (line 3700)
        # Getting the type of 'x0' (line 3700)
        x0_216110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3700, 31), 'x0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3700, 31), tuple_216109, x0_216110)
        # Adding element type (line 3700)
        # Getting the type of 'x1' (line 3700)
        x1_216111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3700, 35), 'x1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3700, 31), tuple_216109, x1_216111)
        
        # Processing the call keyword arguments (line 3700)
        kwargs_216112 = {}
        # Getting the type of 'self' (line 3700)
        self_216107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3700, 16), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 3700)
        set_xlim_216108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3700, 16), self_216107, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 3700)
        set_xlim_call_result_216113 = invoke(stypy.reporting.localization.Localization(__file__, 3700, 16), set_xlim_216108, *[tuple_216109], **kwargs_216112)
        
        # SSA branch for the else part of an if statement (line 3699)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'mode' (line 3701)
        mode_216114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3701, 17), 'mode')
        unicode_216115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3701, 25), 'unicode', u'y')
        # Applying the binary operator '==' (line 3701)
        result_eq_216116 = python_operator(stypy.reporting.localization.Localization(__file__, 3701, 17), '==', mode_216114, unicode_216115)
        
        # Testing the type of an if condition (line 3701)
        if_condition_216117 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3701, 17), result_eq_216116)
        # Assigning a type to the variable 'if_condition_216117' (line 3701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3701, 17), 'if_condition_216117', if_condition_216117)
        # SSA begins for if statement (line 3701)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_ylim(...): (line 3702)
        # Processing the call arguments (line 3702)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3702)
        tuple_216120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3702, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3702)
        # Adding element type (line 3702)
        # Getting the type of 'y0' (line 3702)
        y0_216121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3702, 31), 'y0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3702, 31), tuple_216120, y0_216121)
        # Adding element type (line 3702)
        # Getting the type of 'y1' (line 3702)
        y1_216122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3702, 35), 'y1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3702, 31), tuple_216120, y1_216122)
        
        # Processing the call keyword arguments (line 3702)
        kwargs_216123 = {}
        # Getting the type of 'self' (line 3702)
        self_216118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3702, 16), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 3702)
        set_ylim_216119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3702, 16), self_216118, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 3702)
        set_ylim_call_result_216124 = invoke(stypy.reporting.localization.Localization(__file__, 3702, 16), set_ylim_216119, *[tuple_216120], **kwargs_216123)
        
        # SSA branch for the else part of an if statement (line 3701)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_xlim(...): (line 3704)
        # Processing the call arguments (line 3704)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3704)
        tuple_216127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3704, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3704)
        # Adding element type (line 3704)
        # Getting the type of 'x0' (line 3704)
        x0_216128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3704, 31), 'x0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3704, 31), tuple_216127, x0_216128)
        # Adding element type (line 3704)
        # Getting the type of 'x1' (line 3704)
        x1_216129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3704, 35), 'x1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3704, 31), tuple_216127, x1_216129)
        
        # Processing the call keyword arguments (line 3704)
        kwargs_216130 = {}
        # Getting the type of 'self' (line 3704)
        self_216125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3704, 16), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 3704)
        set_xlim_216126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3704, 16), self_216125, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 3704)
        set_xlim_call_result_216131 = invoke(stypy.reporting.localization.Localization(__file__, 3704, 16), set_xlim_216126, *[tuple_216127], **kwargs_216130)
        
        
        # Call to set_ylim(...): (line 3705)
        # Processing the call arguments (line 3705)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3705)
        tuple_216134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3705, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3705)
        # Adding element type (line 3705)
        # Getting the type of 'y0' (line 3705)
        y0_216135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3705, 31), 'y0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3705, 31), tuple_216134, y0_216135)
        # Adding element type (line 3705)
        # Getting the type of 'y1' (line 3705)
        y1_216136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3705, 35), 'y1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3705, 31), tuple_216134, y1_216136)
        
        # Processing the call keyword arguments (line 3705)
        kwargs_216137 = {}
        # Getting the type of 'self' (line 3705)
        self_216132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3705, 16), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 3705)
        set_ylim_216133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3705, 16), self_216132, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 3705)
        set_ylim_call_result_216138 = invoke(stypy.reporting.localization.Localization(__file__, 3705, 16), set_ylim_216133, *[tuple_216134], **kwargs_216137)
        
        # SSA join for if statement (line 3701)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3699)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 3698)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'direction' (line 3706)
        direction_216139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3706, 13), 'direction')
        unicode_216140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3706, 26), 'unicode', u'out')
        # Applying the binary operator '==' (line 3706)
        result_eq_216141 = python_operator(stypy.reporting.localization.Localization(__file__, 3706, 13), '==', direction_216139, unicode_216140)
        
        # Testing the type of an if condition (line 3706)
        if_condition_216142 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3706, 13), result_eq_216141)
        # Assigning a type to the variable 'if_condition_216142' (line 3706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3706, 13), 'if_condition_216142', if_condition_216142)
        # SSA begins for if statement (line 3706)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to get_xscale(...): (line 3707)
        # Processing the call keyword arguments (line 3707)
        kwargs_216145 = {}
        # Getting the type of 'self' (line 3707)
        self_216143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3707, 15), 'self', False)
        # Obtaining the member 'get_xscale' of a type (line 3707)
        get_xscale_216144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3707, 15), self_216143, 'get_xscale')
        # Calling get_xscale(args, kwargs) (line 3707)
        get_xscale_call_result_216146 = invoke(stypy.reporting.localization.Localization(__file__, 3707, 15), get_xscale_216144, *[], **kwargs_216145)
        
        unicode_216147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3707, 36), 'unicode', u'log')
        # Applying the binary operator '==' (line 3707)
        result_eq_216148 = python_operator(stypy.reporting.localization.Localization(__file__, 3707, 15), '==', get_xscale_call_result_216146, unicode_216147)
        
        # Testing the type of an if condition (line 3707)
        if_condition_216149 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3707, 12), result_eq_216148)
        # Assigning a type to the variable 'if_condition_216149' (line 3707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3707, 12), 'if_condition_216149', if_condition_216149)
        # SSA begins for if statement (line 3707)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 3708):
        
        # Assigning a BinOp to a Name (line 3708):
        
        # Call to log(...): (line 3708)
        # Processing the call arguments (line 3708)
        # Getting the type of 'Xmax' (line 3708)
        Xmax_216152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 31), 'Xmax', False)
        # Getting the type of 'Xmin' (line 3708)
        Xmin_216153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 38), 'Xmin', False)
        # Applying the binary operator 'div' (line 3708)
        result_div_216154 = python_operator(stypy.reporting.localization.Localization(__file__, 3708, 31), 'div', Xmax_216152, Xmin_216153)
        
        # Processing the call keyword arguments (line 3708)
        kwargs_216155 = {}
        # Getting the type of 'np' (line 3708)
        np_216150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 24), 'np', False)
        # Obtaining the member 'log' of a type (line 3708)
        log_216151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3708, 24), np_216150, 'log')
        # Calling log(args, kwargs) (line 3708)
        log_call_result_216156 = invoke(stypy.reporting.localization.Localization(__file__, 3708, 24), log_216151, *[result_div_216154], **kwargs_216155)
        
        
        # Call to log(...): (line 3708)
        # Processing the call arguments (line 3708)
        # Getting the type of 'x1' (line 3708)
        x1_216159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 53), 'x1', False)
        # Getting the type of 'x0' (line 3708)
        x0_216160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 58), 'x0', False)
        # Applying the binary operator 'div' (line 3708)
        result_div_216161 = python_operator(stypy.reporting.localization.Localization(__file__, 3708, 53), 'div', x1_216159, x0_216160)
        
        # Processing the call keyword arguments (line 3708)
        kwargs_216162 = {}
        # Getting the type of 'np' (line 3708)
        np_216157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 46), 'np', False)
        # Obtaining the member 'log' of a type (line 3708)
        log_216158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3708, 46), np_216157, 'log')
        # Calling log(args, kwargs) (line 3708)
        log_call_result_216163 = invoke(stypy.reporting.localization.Localization(__file__, 3708, 46), log_216158, *[result_div_216161], **kwargs_216162)
        
        # Applying the binary operator 'div' (line 3708)
        result_div_216164 = python_operator(stypy.reporting.localization.Localization(__file__, 3708, 24), 'div', log_call_result_216156, log_call_result_216163)
        
        # Assigning a type to the variable 'alpha' (line 3708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3708, 16), 'alpha', result_div_216164)
        
        # Assigning a BinOp to a Name (line 3709):
        
        # Assigning a BinOp to a Name (line 3709):
        
        # Call to pow(...): (line 3709)
        # Processing the call arguments (line 3709)
        # Getting the type of 'Xmin' (line 3709)
        Xmin_216166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3709, 26), 'Xmin', False)
        # Getting the type of 'x0' (line 3709)
        x0_216167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3709, 33), 'x0', False)
        # Applying the binary operator 'div' (line 3709)
        result_div_216168 = python_operator(stypy.reporting.localization.Localization(__file__, 3709, 26), 'div', Xmin_216166, x0_216167)
        
        # Getting the type of 'alpha' (line 3709)
        alpha_216169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3709, 37), 'alpha', False)
        # Processing the call keyword arguments (line 3709)
        kwargs_216170 = {}
        # Getting the type of 'pow' (line 3709)
        pow_216165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3709, 22), 'pow', False)
        # Calling pow(args, kwargs) (line 3709)
        pow_call_result_216171 = invoke(stypy.reporting.localization.Localization(__file__, 3709, 22), pow_216165, *[result_div_216168, alpha_216169], **kwargs_216170)
        
        # Getting the type of 'Xmin' (line 3709)
        Xmin_216172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3709, 46), 'Xmin')
        # Applying the binary operator '*' (line 3709)
        result_mul_216173 = python_operator(stypy.reporting.localization.Localization(__file__, 3709, 22), '*', pow_call_result_216171, Xmin_216172)
        
        # Assigning a type to the variable 'rx1' (line 3709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3709, 16), 'rx1', result_mul_216173)
        
        # Assigning a BinOp to a Name (line 3710):
        
        # Assigning a BinOp to a Name (line 3710):
        
        # Call to pow(...): (line 3710)
        # Processing the call arguments (line 3710)
        # Getting the type of 'Xmax' (line 3710)
        Xmax_216175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 26), 'Xmax', False)
        # Getting the type of 'x0' (line 3710)
        x0_216176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 33), 'x0', False)
        # Applying the binary operator 'div' (line 3710)
        result_div_216177 = python_operator(stypy.reporting.localization.Localization(__file__, 3710, 26), 'div', Xmax_216175, x0_216176)
        
        # Getting the type of 'alpha' (line 3710)
        alpha_216178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 37), 'alpha', False)
        # Processing the call keyword arguments (line 3710)
        kwargs_216179 = {}
        # Getting the type of 'pow' (line 3710)
        pow_216174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 22), 'pow', False)
        # Calling pow(args, kwargs) (line 3710)
        pow_call_result_216180 = invoke(stypy.reporting.localization.Localization(__file__, 3710, 22), pow_216174, *[result_div_216177, alpha_216178], **kwargs_216179)
        
        # Getting the type of 'Xmin' (line 3710)
        Xmin_216181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 46), 'Xmin')
        # Applying the binary operator '*' (line 3710)
        result_mul_216182 = python_operator(stypy.reporting.localization.Localization(__file__, 3710, 22), '*', pow_call_result_216180, Xmin_216181)
        
        # Assigning a type to the variable 'rx2' (line 3710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3710, 16), 'rx2', result_mul_216182)
        # SSA branch for the else part of an if statement (line 3707)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 3712):
        
        # Assigning a BinOp to a Name (line 3712):
        # Getting the type of 'Xmax' (line 3712)
        Xmax_216183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3712, 25), 'Xmax')
        # Getting the type of 'Xmin' (line 3712)
        Xmin_216184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3712, 32), 'Xmin')
        # Applying the binary operator '-' (line 3712)
        result_sub_216185 = python_operator(stypy.reporting.localization.Localization(__file__, 3712, 25), '-', Xmax_216183, Xmin_216184)
        
        # Getting the type of 'x1' (line 3712)
        x1_216186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3712, 41), 'x1')
        # Getting the type of 'x0' (line 3712)
        x0_216187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3712, 46), 'x0')
        # Applying the binary operator '-' (line 3712)
        result_sub_216188 = python_operator(stypy.reporting.localization.Localization(__file__, 3712, 41), '-', x1_216186, x0_216187)
        
        # Applying the binary operator 'div' (line 3712)
        result_div_216189 = python_operator(stypy.reporting.localization.Localization(__file__, 3712, 24), 'div', result_sub_216185, result_sub_216188)
        
        # Assigning a type to the variable 'alpha' (line 3712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3712, 16), 'alpha', result_div_216189)
        
        # Assigning a BinOp to a Name (line 3713):
        
        # Assigning a BinOp to a Name (line 3713):
        # Getting the type of 'alpha' (line 3713)
        alpha_216190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 22), 'alpha')
        # Getting the type of 'Xmin' (line 3713)
        Xmin_216191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 31), 'Xmin')
        # Getting the type of 'x0' (line 3713)
        x0_216192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 38), 'x0')
        # Applying the binary operator '-' (line 3713)
        result_sub_216193 = python_operator(stypy.reporting.localization.Localization(__file__, 3713, 31), '-', Xmin_216191, x0_216192)
        
        # Applying the binary operator '*' (line 3713)
        result_mul_216194 = python_operator(stypy.reporting.localization.Localization(__file__, 3713, 22), '*', alpha_216190, result_sub_216193)
        
        # Getting the type of 'Xmin' (line 3713)
        Xmin_216195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 44), 'Xmin')
        # Applying the binary operator '+' (line 3713)
        result_add_216196 = python_operator(stypy.reporting.localization.Localization(__file__, 3713, 22), '+', result_mul_216194, Xmin_216195)
        
        # Assigning a type to the variable 'rx1' (line 3713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3713, 16), 'rx1', result_add_216196)
        
        # Assigning a BinOp to a Name (line 3714):
        
        # Assigning a BinOp to a Name (line 3714):
        # Getting the type of 'alpha' (line 3714)
        alpha_216197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3714, 22), 'alpha')
        # Getting the type of 'Xmax' (line 3714)
        Xmax_216198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3714, 31), 'Xmax')
        # Getting the type of 'x0' (line 3714)
        x0_216199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3714, 38), 'x0')
        # Applying the binary operator '-' (line 3714)
        result_sub_216200 = python_operator(stypy.reporting.localization.Localization(__file__, 3714, 31), '-', Xmax_216198, x0_216199)
        
        # Applying the binary operator '*' (line 3714)
        result_mul_216201 = python_operator(stypy.reporting.localization.Localization(__file__, 3714, 22), '*', alpha_216197, result_sub_216200)
        
        # Getting the type of 'Xmin' (line 3714)
        Xmin_216202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3714, 44), 'Xmin')
        # Applying the binary operator '+' (line 3714)
        result_add_216203 = python_operator(stypy.reporting.localization.Localization(__file__, 3714, 22), '+', result_mul_216201, Xmin_216202)
        
        # Assigning a type to the variable 'rx2' (line 3714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3714, 16), 'rx2', result_add_216203)
        # SSA join for if statement (line 3707)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to get_yscale(...): (line 3715)
        # Processing the call keyword arguments (line 3715)
        kwargs_216206 = {}
        # Getting the type of 'self' (line 3715)
        self_216204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3715, 15), 'self', False)
        # Obtaining the member 'get_yscale' of a type (line 3715)
        get_yscale_216205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3715, 15), self_216204, 'get_yscale')
        # Calling get_yscale(args, kwargs) (line 3715)
        get_yscale_call_result_216207 = invoke(stypy.reporting.localization.Localization(__file__, 3715, 15), get_yscale_216205, *[], **kwargs_216206)
        
        unicode_216208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3715, 36), 'unicode', u'log')
        # Applying the binary operator '==' (line 3715)
        result_eq_216209 = python_operator(stypy.reporting.localization.Localization(__file__, 3715, 15), '==', get_yscale_call_result_216207, unicode_216208)
        
        # Testing the type of an if condition (line 3715)
        if_condition_216210 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3715, 12), result_eq_216209)
        # Assigning a type to the variable 'if_condition_216210' (line 3715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3715, 12), 'if_condition_216210', if_condition_216210)
        # SSA begins for if statement (line 3715)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 3716):
        
        # Assigning a BinOp to a Name (line 3716):
        
        # Call to log(...): (line 3716)
        # Processing the call arguments (line 3716)
        # Getting the type of 'Ymax' (line 3716)
        Ymax_216213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 31), 'Ymax', False)
        # Getting the type of 'Ymin' (line 3716)
        Ymin_216214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 38), 'Ymin', False)
        # Applying the binary operator 'div' (line 3716)
        result_div_216215 = python_operator(stypy.reporting.localization.Localization(__file__, 3716, 31), 'div', Ymax_216213, Ymin_216214)
        
        # Processing the call keyword arguments (line 3716)
        kwargs_216216 = {}
        # Getting the type of 'np' (line 3716)
        np_216211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 24), 'np', False)
        # Obtaining the member 'log' of a type (line 3716)
        log_216212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3716, 24), np_216211, 'log')
        # Calling log(args, kwargs) (line 3716)
        log_call_result_216217 = invoke(stypy.reporting.localization.Localization(__file__, 3716, 24), log_216212, *[result_div_216215], **kwargs_216216)
        
        
        # Call to log(...): (line 3716)
        # Processing the call arguments (line 3716)
        # Getting the type of 'y1' (line 3716)
        y1_216220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 53), 'y1', False)
        # Getting the type of 'y0' (line 3716)
        y0_216221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 58), 'y0', False)
        # Applying the binary operator 'div' (line 3716)
        result_div_216222 = python_operator(stypy.reporting.localization.Localization(__file__, 3716, 53), 'div', y1_216220, y0_216221)
        
        # Processing the call keyword arguments (line 3716)
        kwargs_216223 = {}
        # Getting the type of 'np' (line 3716)
        np_216218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 46), 'np', False)
        # Obtaining the member 'log' of a type (line 3716)
        log_216219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3716, 46), np_216218, 'log')
        # Calling log(args, kwargs) (line 3716)
        log_call_result_216224 = invoke(stypy.reporting.localization.Localization(__file__, 3716, 46), log_216219, *[result_div_216222], **kwargs_216223)
        
        # Applying the binary operator 'div' (line 3716)
        result_div_216225 = python_operator(stypy.reporting.localization.Localization(__file__, 3716, 24), 'div', log_call_result_216217, log_call_result_216224)
        
        # Assigning a type to the variable 'alpha' (line 3716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3716, 16), 'alpha', result_div_216225)
        
        # Assigning a BinOp to a Name (line 3717):
        
        # Assigning a BinOp to a Name (line 3717):
        
        # Call to pow(...): (line 3717)
        # Processing the call arguments (line 3717)
        # Getting the type of 'Ymin' (line 3717)
        Ymin_216227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3717, 26), 'Ymin', False)
        # Getting the type of 'y0' (line 3717)
        y0_216228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3717, 33), 'y0', False)
        # Applying the binary operator 'div' (line 3717)
        result_div_216229 = python_operator(stypy.reporting.localization.Localization(__file__, 3717, 26), 'div', Ymin_216227, y0_216228)
        
        # Getting the type of 'alpha' (line 3717)
        alpha_216230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3717, 37), 'alpha', False)
        # Processing the call keyword arguments (line 3717)
        kwargs_216231 = {}
        # Getting the type of 'pow' (line 3717)
        pow_216226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3717, 22), 'pow', False)
        # Calling pow(args, kwargs) (line 3717)
        pow_call_result_216232 = invoke(stypy.reporting.localization.Localization(__file__, 3717, 22), pow_216226, *[result_div_216229, alpha_216230], **kwargs_216231)
        
        # Getting the type of 'Ymin' (line 3717)
        Ymin_216233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3717, 46), 'Ymin')
        # Applying the binary operator '*' (line 3717)
        result_mul_216234 = python_operator(stypy.reporting.localization.Localization(__file__, 3717, 22), '*', pow_call_result_216232, Ymin_216233)
        
        # Assigning a type to the variable 'ry1' (line 3717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3717, 16), 'ry1', result_mul_216234)
        
        # Assigning a BinOp to a Name (line 3718):
        
        # Assigning a BinOp to a Name (line 3718):
        
        # Call to pow(...): (line 3718)
        # Processing the call arguments (line 3718)
        # Getting the type of 'Ymax' (line 3718)
        Ymax_216236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3718, 26), 'Ymax', False)
        # Getting the type of 'y0' (line 3718)
        y0_216237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3718, 33), 'y0', False)
        # Applying the binary operator 'div' (line 3718)
        result_div_216238 = python_operator(stypy.reporting.localization.Localization(__file__, 3718, 26), 'div', Ymax_216236, y0_216237)
        
        # Getting the type of 'alpha' (line 3718)
        alpha_216239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3718, 37), 'alpha', False)
        # Processing the call keyword arguments (line 3718)
        kwargs_216240 = {}
        # Getting the type of 'pow' (line 3718)
        pow_216235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3718, 22), 'pow', False)
        # Calling pow(args, kwargs) (line 3718)
        pow_call_result_216241 = invoke(stypy.reporting.localization.Localization(__file__, 3718, 22), pow_216235, *[result_div_216238, alpha_216239], **kwargs_216240)
        
        # Getting the type of 'Ymin' (line 3718)
        Ymin_216242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3718, 46), 'Ymin')
        # Applying the binary operator '*' (line 3718)
        result_mul_216243 = python_operator(stypy.reporting.localization.Localization(__file__, 3718, 22), '*', pow_call_result_216241, Ymin_216242)
        
        # Assigning a type to the variable 'ry2' (line 3718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3718, 16), 'ry2', result_mul_216243)
        # SSA branch for the else part of an if statement (line 3715)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 3720):
        
        # Assigning a BinOp to a Name (line 3720):
        # Getting the type of 'Ymax' (line 3720)
        Ymax_216244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3720, 25), 'Ymax')
        # Getting the type of 'Ymin' (line 3720)
        Ymin_216245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3720, 32), 'Ymin')
        # Applying the binary operator '-' (line 3720)
        result_sub_216246 = python_operator(stypy.reporting.localization.Localization(__file__, 3720, 25), '-', Ymax_216244, Ymin_216245)
        
        # Getting the type of 'y1' (line 3720)
        y1_216247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3720, 41), 'y1')
        # Getting the type of 'y0' (line 3720)
        y0_216248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3720, 46), 'y0')
        # Applying the binary operator '-' (line 3720)
        result_sub_216249 = python_operator(stypy.reporting.localization.Localization(__file__, 3720, 41), '-', y1_216247, y0_216248)
        
        # Applying the binary operator 'div' (line 3720)
        result_div_216250 = python_operator(stypy.reporting.localization.Localization(__file__, 3720, 24), 'div', result_sub_216246, result_sub_216249)
        
        # Assigning a type to the variable 'alpha' (line 3720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3720, 16), 'alpha', result_div_216250)
        
        # Assigning a BinOp to a Name (line 3721):
        
        # Assigning a BinOp to a Name (line 3721):
        # Getting the type of 'alpha' (line 3721)
        alpha_216251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 22), 'alpha')
        # Getting the type of 'Ymin' (line 3721)
        Ymin_216252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 31), 'Ymin')
        # Getting the type of 'y0' (line 3721)
        y0_216253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 38), 'y0')
        # Applying the binary operator '-' (line 3721)
        result_sub_216254 = python_operator(stypy.reporting.localization.Localization(__file__, 3721, 31), '-', Ymin_216252, y0_216253)
        
        # Applying the binary operator '*' (line 3721)
        result_mul_216255 = python_operator(stypy.reporting.localization.Localization(__file__, 3721, 22), '*', alpha_216251, result_sub_216254)
        
        # Getting the type of 'Ymin' (line 3721)
        Ymin_216256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 44), 'Ymin')
        # Applying the binary operator '+' (line 3721)
        result_add_216257 = python_operator(stypy.reporting.localization.Localization(__file__, 3721, 22), '+', result_mul_216255, Ymin_216256)
        
        # Assigning a type to the variable 'ry1' (line 3721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3721, 16), 'ry1', result_add_216257)
        
        # Assigning a BinOp to a Name (line 3722):
        
        # Assigning a BinOp to a Name (line 3722):
        # Getting the type of 'alpha' (line 3722)
        alpha_216258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3722, 22), 'alpha')
        # Getting the type of 'Ymax' (line 3722)
        Ymax_216259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3722, 31), 'Ymax')
        # Getting the type of 'y0' (line 3722)
        y0_216260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3722, 38), 'y0')
        # Applying the binary operator '-' (line 3722)
        result_sub_216261 = python_operator(stypy.reporting.localization.Localization(__file__, 3722, 31), '-', Ymax_216259, y0_216260)
        
        # Applying the binary operator '*' (line 3722)
        result_mul_216262 = python_operator(stypy.reporting.localization.Localization(__file__, 3722, 22), '*', alpha_216258, result_sub_216261)
        
        # Getting the type of 'Ymin' (line 3722)
        Ymin_216263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3722, 44), 'Ymin')
        # Applying the binary operator '+' (line 3722)
        result_add_216264 = python_operator(stypy.reporting.localization.Localization(__file__, 3722, 22), '+', result_mul_216262, Ymin_216263)
        
        # Assigning a type to the variable 'ry2' (line 3722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3722, 16), 'ry2', result_add_216264)
        # SSA join for if statement (line 3715)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'mode' (line 3724)
        mode_216265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3724, 15), 'mode')
        unicode_216266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3724, 23), 'unicode', u'x')
        # Applying the binary operator '==' (line 3724)
        result_eq_216267 = python_operator(stypy.reporting.localization.Localization(__file__, 3724, 15), '==', mode_216265, unicode_216266)
        
        # Testing the type of an if condition (line 3724)
        if_condition_216268 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3724, 12), result_eq_216267)
        # Assigning a type to the variable 'if_condition_216268' (line 3724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3724, 12), 'if_condition_216268', if_condition_216268)
        # SSA begins for if statement (line 3724)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_xlim(...): (line 3725)
        # Processing the call arguments (line 3725)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3725)
        tuple_216271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3725, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3725)
        # Adding element type (line 3725)
        # Getting the type of 'rx1' (line 3725)
        rx1_216272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3725, 31), 'rx1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3725, 31), tuple_216271, rx1_216272)
        # Adding element type (line 3725)
        # Getting the type of 'rx2' (line 3725)
        rx2_216273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3725, 36), 'rx2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3725, 31), tuple_216271, rx2_216273)
        
        # Processing the call keyword arguments (line 3725)
        kwargs_216274 = {}
        # Getting the type of 'self' (line 3725)
        self_216269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3725, 16), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 3725)
        set_xlim_216270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3725, 16), self_216269, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 3725)
        set_xlim_call_result_216275 = invoke(stypy.reporting.localization.Localization(__file__, 3725, 16), set_xlim_216270, *[tuple_216271], **kwargs_216274)
        
        # SSA branch for the else part of an if statement (line 3724)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'mode' (line 3726)
        mode_216276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3726, 17), 'mode')
        unicode_216277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3726, 25), 'unicode', u'y')
        # Applying the binary operator '==' (line 3726)
        result_eq_216278 = python_operator(stypy.reporting.localization.Localization(__file__, 3726, 17), '==', mode_216276, unicode_216277)
        
        # Testing the type of an if condition (line 3726)
        if_condition_216279 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3726, 17), result_eq_216278)
        # Assigning a type to the variable 'if_condition_216279' (line 3726)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3726, 17), 'if_condition_216279', if_condition_216279)
        # SSA begins for if statement (line 3726)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_ylim(...): (line 3727)
        # Processing the call arguments (line 3727)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3727)
        tuple_216282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3727, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3727)
        # Adding element type (line 3727)
        # Getting the type of 'ry1' (line 3727)
        ry1_216283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3727, 31), 'ry1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3727, 31), tuple_216282, ry1_216283)
        # Adding element type (line 3727)
        # Getting the type of 'ry2' (line 3727)
        ry2_216284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3727, 36), 'ry2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3727, 31), tuple_216282, ry2_216284)
        
        # Processing the call keyword arguments (line 3727)
        kwargs_216285 = {}
        # Getting the type of 'self' (line 3727)
        self_216280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3727, 16), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 3727)
        set_ylim_216281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3727, 16), self_216280, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 3727)
        set_ylim_call_result_216286 = invoke(stypy.reporting.localization.Localization(__file__, 3727, 16), set_ylim_216281, *[tuple_216282], **kwargs_216285)
        
        # SSA branch for the else part of an if statement (line 3726)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_xlim(...): (line 3729)
        # Processing the call arguments (line 3729)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3729)
        tuple_216289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3729, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3729)
        # Adding element type (line 3729)
        # Getting the type of 'rx1' (line 3729)
        rx1_216290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3729, 31), 'rx1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3729, 31), tuple_216289, rx1_216290)
        # Adding element type (line 3729)
        # Getting the type of 'rx2' (line 3729)
        rx2_216291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3729, 36), 'rx2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3729, 31), tuple_216289, rx2_216291)
        
        # Processing the call keyword arguments (line 3729)
        kwargs_216292 = {}
        # Getting the type of 'self' (line 3729)
        self_216287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3729, 16), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 3729)
        set_xlim_216288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3729, 16), self_216287, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 3729)
        set_xlim_call_result_216293 = invoke(stypy.reporting.localization.Localization(__file__, 3729, 16), set_xlim_216288, *[tuple_216289], **kwargs_216292)
        
        
        # Call to set_ylim(...): (line 3730)
        # Processing the call arguments (line 3730)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3730)
        tuple_216296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3730, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3730)
        # Adding element type (line 3730)
        # Getting the type of 'ry1' (line 3730)
        ry1_216297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 31), 'ry1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3730, 31), tuple_216296, ry1_216297)
        # Adding element type (line 3730)
        # Getting the type of 'ry2' (line 3730)
        ry2_216298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 36), 'ry2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3730, 31), tuple_216296, ry2_216298)
        
        # Processing the call keyword arguments (line 3730)
        kwargs_216299 = {}
        # Getting the type of 'self' (line 3730)
        self_216294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 16), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 3730)
        set_ylim_216295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3730, 16), self_216294, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 3730)
        set_ylim_call_result_216300 = invoke(stypy.reporting.localization.Localization(__file__, 3730, 16), set_ylim_216295, *[tuple_216296], **kwargs_216299)
        
        # SSA join for if statement (line 3726)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3724)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3706)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3698)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_set_view_from_bbox(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_view_from_bbox' in the type store
        # Getting the type of 'stypy_return_type' (line 3570)
        stypy_return_type_216301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3570, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_216301)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_view_from_bbox'
        return stypy_return_type_216301


    @norecursion
    def start_pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'start_pan'
        module_type_store = module_type_store.open_function_context('start_pan', 3732, 4, False)
        # Assigning a type to the variable 'self' (line 3733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3733, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.start_pan.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.start_pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.start_pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.start_pan.__dict__.__setitem__('stypy_function_name', '_AxesBase.start_pan')
        _AxesBase.start_pan.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'button'])
        _AxesBase.start_pan.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.start_pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.start_pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.start_pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.start_pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.start_pan.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.start_pan', ['x', 'y', 'button'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'start_pan', localization, ['x', 'y', 'button'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'start_pan(...)' code ##################

        unicode_216302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3747, (-1)), 'unicode', u'\n        Called when a pan operation has started.\n\n        *x*, *y* are the mouse coordinates in display coords.\n        button is the mouse button number:\n\n        * 1: LEFT\n        * 2: MIDDLE\n        * 3: RIGHT\n\n        .. note::\n\n            Intended to be overridden by new projection types.\n\n        ')
        
        # Assigning a Call to a Attribute (line 3748):
        
        # Assigning a Call to a Attribute (line 3748):
        
        # Call to Bunch(...): (line 3748)
        # Processing the call keyword arguments (line 3748)
        
        # Call to frozen(...): (line 3749)
        # Processing the call keyword arguments (line 3749)
        kwargs_216308 = {}
        # Getting the type of 'self' (line 3749)
        self_216305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3749, 16), 'self', False)
        # Obtaining the member 'viewLim' of a type (line 3749)
        viewLim_216306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3749, 16), self_216305, 'viewLim')
        # Obtaining the member 'frozen' of a type (line 3749)
        frozen_216307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3749, 16), viewLim_216306, 'frozen')
        # Calling frozen(args, kwargs) (line 3749)
        frozen_call_result_216309 = invoke(stypy.reporting.localization.Localization(__file__, 3749, 16), frozen_216307, *[], **kwargs_216308)
        
        keyword_216310 = frozen_call_result_216309
        
        # Call to frozen(...): (line 3750)
        # Processing the call keyword arguments (line 3750)
        kwargs_216314 = {}
        # Getting the type of 'self' (line 3750)
        self_216311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3750, 18), 'self', False)
        # Obtaining the member 'transData' of a type (line 3750)
        transData_216312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3750, 18), self_216311, 'transData')
        # Obtaining the member 'frozen' of a type (line 3750)
        frozen_216313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3750, 18), transData_216312, 'frozen')
        # Calling frozen(args, kwargs) (line 3750)
        frozen_call_result_216315 = invoke(stypy.reporting.localization.Localization(__file__, 3750, 18), frozen_216313, *[], **kwargs_216314)
        
        keyword_216316 = frozen_call_result_216315
        
        # Call to frozen(...): (line 3751)
        # Processing the call keyword arguments (line 3751)
        kwargs_216323 = {}
        
        # Call to inverted(...): (line 3751)
        # Processing the call keyword arguments (line 3751)
        kwargs_216320 = {}
        # Getting the type of 'self' (line 3751)
        self_216317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3751, 26), 'self', False)
        # Obtaining the member 'transData' of a type (line 3751)
        transData_216318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3751, 26), self_216317, 'transData')
        # Obtaining the member 'inverted' of a type (line 3751)
        inverted_216319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3751, 26), transData_216318, 'inverted')
        # Calling inverted(args, kwargs) (line 3751)
        inverted_call_result_216321 = invoke(stypy.reporting.localization.Localization(__file__, 3751, 26), inverted_216319, *[], **kwargs_216320)
        
        # Obtaining the member 'frozen' of a type (line 3751)
        frozen_216322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3751, 26), inverted_call_result_216321, 'frozen')
        # Calling frozen(args, kwargs) (line 3751)
        frozen_call_result_216324 = invoke(stypy.reporting.localization.Localization(__file__, 3751, 26), frozen_216322, *[], **kwargs_216323)
        
        keyword_216325 = frozen_call_result_216324
        
        # Call to frozen(...): (line 3752)
        # Processing the call keyword arguments (line 3752)
        kwargs_216329 = {}
        # Getting the type of 'self' (line 3752)
        self_216326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3752, 17), 'self', False)
        # Obtaining the member 'bbox' of a type (line 3752)
        bbox_216327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3752, 17), self_216326, 'bbox')
        # Obtaining the member 'frozen' of a type (line 3752)
        frozen_216328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3752, 17), bbox_216327, 'frozen')
        # Calling frozen(args, kwargs) (line 3752)
        frozen_call_result_216330 = invoke(stypy.reporting.localization.Localization(__file__, 3752, 17), frozen_216328, *[], **kwargs_216329)
        
        keyword_216331 = frozen_call_result_216330
        # Getting the type of 'x' (line 3753)
        x_216332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3753, 14), 'x', False)
        keyword_216333 = x_216332
        # Getting the type of 'y' (line 3754)
        y_216334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3754, 14), 'y', False)
        keyword_216335 = y_216334
        kwargs_216336 = {'lim': keyword_216310, 'trans_inverse': keyword_216325, 'bbox': keyword_216331, 'y': keyword_216335, 'x': keyword_216333, 'trans': keyword_216316}
        # Getting the type of 'cbook' (line 3748)
        cbook_216303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3748, 26), 'cbook', False)
        # Obtaining the member 'Bunch' of a type (line 3748)
        Bunch_216304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3748, 26), cbook_216303, 'Bunch')
        # Calling Bunch(args, kwargs) (line 3748)
        Bunch_call_result_216337 = invoke(stypy.reporting.localization.Localization(__file__, 3748, 26), Bunch_216304, *[], **kwargs_216336)
        
        # Getting the type of 'self' (line 3748)
        self_216338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3748, 8), 'self')
        # Setting the type of the member '_pan_start' of a type (line 3748)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3748, 8), self_216338, '_pan_start', Bunch_call_result_216337)
        
        # ################# End of 'start_pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'start_pan' in the type store
        # Getting the type of 'stypy_return_type' (line 3732)
        stypy_return_type_216339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3732, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_216339)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'start_pan'
        return stypy_return_type_216339


    @norecursion
    def end_pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'end_pan'
        module_type_store = module_type_store.open_function_context('end_pan', 3756, 4, False)
        # Assigning a type to the variable 'self' (line 3757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3757, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.end_pan.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.end_pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.end_pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.end_pan.__dict__.__setitem__('stypy_function_name', '_AxesBase.end_pan')
        _AxesBase.end_pan.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.end_pan.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.end_pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.end_pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.end_pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.end_pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.end_pan.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.end_pan', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'end_pan', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'end_pan(...)' code ##################

        unicode_216340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3765, (-1)), 'unicode', u'\n        Called when a pan operation completes (when the mouse button\n        is up.)\n\n        .. note::\n\n            Intended to be overridden by new projection types.\n\n        ')
        # Deleting a member
        # Getting the type of 'self' (line 3766)
        self_216341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3766, 8), 'self')
        module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 3766, 8), self_216341, '_pan_start')
        
        # ################# End of 'end_pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'end_pan' in the type store
        # Getting the type of 'stypy_return_type' (line 3756)
        stypy_return_type_216342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3756, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_216342)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'end_pan'
        return stypy_return_type_216342


    @norecursion
    def drag_pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'drag_pan'
        module_type_store = module_type_store.open_function_context('drag_pan', 3768, 4, False)
        # Assigning a type to the variable 'self' (line 3769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3769, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.drag_pan.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.drag_pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.drag_pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.drag_pan.__dict__.__setitem__('stypy_function_name', '_AxesBase.drag_pan')
        _AxesBase.drag_pan.__dict__.__setitem__('stypy_param_names_list', ['button', 'key', 'x', 'y'])
        _AxesBase.drag_pan.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.drag_pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.drag_pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.drag_pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.drag_pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.drag_pan.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.drag_pan', ['button', 'key', 'x', 'y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'drag_pan', localization, ['button', 'key', 'x', 'y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'drag_pan(...)' code ##################

        unicode_216343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3786, (-1)), 'unicode', u'\n        Called when the mouse moves during a pan operation.\n\n        *button* is the mouse button number:\n\n        * 1: LEFT\n        * 2: MIDDLE\n        * 3: RIGHT\n\n        *key* is a "shift" key\n\n        *x*, *y* are the mouse coordinates in display coords.\n\n        .. note::\n\n            Intended to be overridden by new projection types.\n\n        ')

        @norecursion
        def format_deltas(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'format_deltas'
            module_type_store = module_type_store.open_function_context('format_deltas', 3787, 8, False)
            
            # Passed parameters checking function
            format_deltas.stypy_localization = localization
            format_deltas.stypy_type_of_self = None
            format_deltas.stypy_type_store = module_type_store
            format_deltas.stypy_function_name = 'format_deltas'
            format_deltas.stypy_param_names_list = ['key', 'dx', 'dy']
            format_deltas.stypy_varargs_param_name = None
            format_deltas.stypy_kwargs_param_name = None
            format_deltas.stypy_call_defaults = defaults
            format_deltas.stypy_call_varargs = varargs
            format_deltas.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'format_deltas', ['key', 'dx', 'dy'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'format_deltas', localization, ['key', 'dx', 'dy'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'format_deltas(...)' code ##################

            
            
            # Getting the type of 'key' (line 3788)
            key_216344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3788, 15), 'key')
            unicode_216345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3788, 22), 'unicode', u'control')
            # Applying the binary operator '==' (line 3788)
            result_eq_216346 = python_operator(stypy.reporting.localization.Localization(__file__, 3788, 15), '==', key_216344, unicode_216345)
            
            # Testing the type of an if condition (line 3788)
            if_condition_216347 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3788, 12), result_eq_216346)
            # Assigning a type to the variable 'if_condition_216347' (line 3788)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3788, 12), 'if_condition_216347', if_condition_216347)
            # SSA begins for if statement (line 3788)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            
            # Call to abs(...): (line 3789)
            # Processing the call arguments (line 3789)
            # Getting the type of 'dx' (line 3789)
            dx_216349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3789, 23), 'dx', False)
            # Processing the call keyword arguments (line 3789)
            kwargs_216350 = {}
            # Getting the type of 'abs' (line 3789)
            abs_216348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3789, 19), 'abs', False)
            # Calling abs(args, kwargs) (line 3789)
            abs_call_result_216351 = invoke(stypy.reporting.localization.Localization(__file__, 3789, 19), abs_216348, *[dx_216349], **kwargs_216350)
            
            
            # Call to abs(...): (line 3789)
            # Processing the call arguments (line 3789)
            # Getting the type of 'dy' (line 3789)
            dy_216353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3789, 33), 'dy', False)
            # Processing the call keyword arguments (line 3789)
            kwargs_216354 = {}
            # Getting the type of 'abs' (line 3789)
            abs_216352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3789, 29), 'abs', False)
            # Calling abs(args, kwargs) (line 3789)
            abs_call_result_216355 = invoke(stypy.reporting.localization.Localization(__file__, 3789, 29), abs_216352, *[dy_216353], **kwargs_216354)
            
            # Applying the binary operator '>' (line 3789)
            result_gt_216356 = python_operator(stypy.reporting.localization.Localization(__file__, 3789, 19), '>', abs_call_result_216351, abs_call_result_216355)
            
            # Testing the type of an if condition (line 3789)
            if_condition_216357 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3789, 16), result_gt_216356)
            # Assigning a type to the variable 'if_condition_216357' (line 3789)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3789, 16), 'if_condition_216357', if_condition_216357)
            # SSA begins for if statement (line 3789)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Name (line 3790):
            
            # Assigning a Name to a Name (line 3790):
            # Getting the type of 'dx' (line 3790)
            dx_216358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3790, 25), 'dx')
            # Assigning a type to the variable 'dy' (line 3790)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3790, 20), 'dy', dx_216358)
            # SSA branch for the else part of an if statement (line 3789)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Name (line 3792):
            
            # Assigning a Name to a Name (line 3792):
            # Getting the type of 'dy' (line 3792)
            dy_216359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3792, 25), 'dy')
            # Assigning a type to the variable 'dx' (line 3792)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3792, 20), 'dx', dy_216359)
            # SSA join for if statement (line 3789)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 3788)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'key' (line 3793)
            key_216360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3793, 17), 'key')
            unicode_216361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3793, 24), 'unicode', u'x')
            # Applying the binary operator '==' (line 3793)
            result_eq_216362 = python_operator(stypy.reporting.localization.Localization(__file__, 3793, 17), '==', key_216360, unicode_216361)
            
            # Testing the type of an if condition (line 3793)
            if_condition_216363 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3793, 17), result_eq_216362)
            # Assigning a type to the variable 'if_condition_216363' (line 3793)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3793, 17), 'if_condition_216363', if_condition_216363)
            # SSA begins for if statement (line 3793)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Name (line 3794):
            
            # Assigning a Num to a Name (line 3794):
            int_216364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3794, 21), 'int')
            # Assigning a type to the variable 'dy' (line 3794)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3794, 16), 'dy', int_216364)
            # SSA branch for the else part of an if statement (line 3793)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'key' (line 3795)
            key_216365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3795, 17), 'key')
            unicode_216366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3795, 24), 'unicode', u'y')
            # Applying the binary operator '==' (line 3795)
            result_eq_216367 = python_operator(stypy.reporting.localization.Localization(__file__, 3795, 17), '==', key_216365, unicode_216366)
            
            # Testing the type of an if condition (line 3795)
            if_condition_216368 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3795, 17), result_eq_216367)
            # Assigning a type to the variable 'if_condition_216368' (line 3795)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3795, 17), 'if_condition_216368', if_condition_216368)
            # SSA begins for if statement (line 3795)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Name (line 3796):
            
            # Assigning a Num to a Name (line 3796):
            int_216369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3796, 21), 'int')
            # Assigning a type to the variable 'dx' (line 3796)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3796, 16), 'dx', int_216369)
            # SSA branch for the else part of an if statement (line 3795)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'key' (line 3797)
            key_216370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3797, 17), 'key')
            unicode_216371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3797, 24), 'unicode', u'shift')
            # Applying the binary operator '==' (line 3797)
            result_eq_216372 = python_operator(stypy.reporting.localization.Localization(__file__, 3797, 17), '==', key_216370, unicode_216371)
            
            # Testing the type of an if condition (line 3797)
            if_condition_216373 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3797, 17), result_eq_216372)
            # Assigning a type to the variable 'if_condition_216373' (line 3797)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3797, 17), 'if_condition_216373', if_condition_216373)
            # SSA begins for if statement (line 3797)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            int_216374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3798, 19), 'int')
            
            # Call to abs(...): (line 3798)
            # Processing the call arguments (line 3798)
            # Getting the type of 'dx' (line 3798)
            dx_216376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3798, 27), 'dx', False)
            # Processing the call keyword arguments (line 3798)
            kwargs_216377 = {}
            # Getting the type of 'abs' (line 3798)
            abs_216375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3798, 23), 'abs', False)
            # Calling abs(args, kwargs) (line 3798)
            abs_call_result_216378 = invoke(stypy.reporting.localization.Localization(__file__, 3798, 23), abs_216375, *[dx_216376], **kwargs_216377)
            
            # Applying the binary operator '*' (line 3798)
            result_mul_216379 = python_operator(stypy.reporting.localization.Localization(__file__, 3798, 19), '*', int_216374, abs_call_result_216378)
            
            
            # Call to abs(...): (line 3798)
            # Processing the call arguments (line 3798)
            # Getting the type of 'dy' (line 3798)
            dy_216381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3798, 37), 'dy', False)
            # Processing the call keyword arguments (line 3798)
            kwargs_216382 = {}
            # Getting the type of 'abs' (line 3798)
            abs_216380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3798, 33), 'abs', False)
            # Calling abs(args, kwargs) (line 3798)
            abs_call_result_216383 = invoke(stypy.reporting.localization.Localization(__file__, 3798, 33), abs_216380, *[dy_216381], **kwargs_216382)
            
            # Applying the binary operator '<' (line 3798)
            result_lt_216384 = python_operator(stypy.reporting.localization.Localization(__file__, 3798, 19), '<', result_mul_216379, abs_call_result_216383)
            
            # Testing the type of an if condition (line 3798)
            if_condition_216385 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3798, 16), result_lt_216384)
            # Assigning a type to the variable 'if_condition_216385' (line 3798)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3798, 16), 'if_condition_216385', if_condition_216385)
            # SSA begins for if statement (line 3798)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Name (line 3799):
            
            # Assigning a Num to a Name (line 3799):
            int_216386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3799, 25), 'int')
            # Assigning a type to the variable 'dx' (line 3799)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3799, 20), 'dx', int_216386)
            # SSA branch for the else part of an if statement (line 3798)
            module_type_store.open_ssa_branch('else')
            
            
            int_216387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3800, 21), 'int')
            
            # Call to abs(...): (line 3800)
            # Processing the call arguments (line 3800)
            # Getting the type of 'dy' (line 3800)
            dy_216389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3800, 29), 'dy', False)
            # Processing the call keyword arguments (line 3800)
            kwargs_216390 = {}
            # Getting the type of 'abs' (line 3800)
            abs_216388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3800, 25), 'abs', False)
            # Calling abs(args, kwargs) (line 3800)
            abs_call_result_216391 = invoke(stypy.reporting.localization.Localization(__file__, 3800, 25), abs_216388, *[dy_216389], **kwargs_216390)
            
            # Applying the binary operator '*' (line 3800)
            result_mul_216392 = python_operator(stypy.reporting.localization.Localization(__file__, 3800, 21), '*', int_216387, abs_call_result_216391)
            
            
            # Call to abs(...): (line 3800)
            # Processing the call arguments (line 3800)
            # Getting the type of 'dx' (line 3800)
            dx_216394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3800, 39), 'dx', False)
            # Processing the call keyword arguments (line 3800)
            kwargs_216395 = {}
            # Getting the type of 'abs' (line 3800)
            abs_216393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3800, 35), 'abs', False)
            # Calling abs(args, kwargs) (line 3800)
            abs_call_result_216396 = invoke(stypy.reporting.localization.Localization(__file__, 3800, 35), abs_216393, *[dx_216394], **kwargs_216395)
            
            # Applying the binary operator '<' (line 3800)
            result_lt_216397 = python_operator(stypy.reporting.localization.Localization(__file__, 3800, 21), '<', result_mul_216392, abs_call_result_216396)
            
            # Testing the type of an if condition (line 3800)
            if_condition_216398 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3800, 21), result_lt_216397)
            # Assigning a type to the variable 'if_condition_216398' (line 3800)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3800, 21), 'if_condition_216398', if_condition_216398)
            # SSA begins for if statement (line 3800)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Name (line 3801):
            
            # Assigning a Num to a Name (line 3801):
            int_216399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3801, 25), 'int')
            # Assigning a type to the variable 'dy' (line 3801)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3801, 20), 'dy', int_216399)
            # SSA branch for the else part of an if statement (line 3800)
            module_type_store.open_ssa_branch('else')
            
            
            
            # Call to abs(...): (line 3802)
            # Processing the call arguments (line 3802)
            # Getting the type of 'dx' (line 3802)
            dx_216401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3802, 25), 'dx', False)
            # Processing the call keyword arguments (line 3802)
            kwargs_216402 = {}
            # Getting the type of 'abs' (line 3802)
            abs_216400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3802, 21), 'abs', False)
            # Calling abs(args, kwargs) (line 3802)
            abs_call_result_216403 = invoke(stypy.reporting.localization.Localization(__file__, 3802, 21), abs_216400, *[dx_216401], **kwargs_216402)
            
            
            # Call to abs(...): (line 3802)
            # Processing the call arguments (line 3802)
            # Getting the type of 'dy' (line 3802)
            dy_216405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3802, 35), 'dy', False)
            # Processing the call keyword arguments (line 3802)
            kwargs_216406 = {}
            # Getting the type of 'abs' (line 3802)
            abs_216404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3802, 31), 'abs', False)
            # Calling abs(args, kwargs) (line 3802)
            abs_call_result_216407 = invoke(stypy.reporting.localization.Localization(__file__, 3802, 31), abs_216404, *[dy_216405], **kwargs_216406)
            
            # Applying the binary operator '>' (line 3802)
            result_gt_216408 = python_operator(stypy.reporting.localization.Localization(__file__, 3802, 21), '>', abs_call_result_216403, abs_call_result_216407)
            
            # Testing the type of an if condition (line 3802)
            if_condition_216409 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3802, 21), result_gt_216408)
            # Assigning a type to the variable 'if_condition_216409' (line 3802)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3802, 21), 'if_condition_216409', if_condition_216409)
            # SSA begins for if statement (line 3802)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 3803):
            
            # Assigning a BinOp to a Name (line 3803):
            # Getting the type of 'dy' (line 3803)
            dy_216410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3803, 25), 'dy')
            
            # Call to abs(...): (line 3803)
            # Processing the call arguments (line 3803)
            # Getting the type of 'dy' (line 3803)
            dy_216412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3803, 34), 'dy', False)
            # Processing the call keyword arguments (line 3803)
            kwargs_216413 = {}
            # Getting the type of 'abs' (line 3803)
            abs_216411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3803, 30), 'abs', False)
            # Calling abs(args, kwargs) (line 3803)
            abs_call_result_216414 = invoke(stypy.reporting.localization.Localization(__file__, 3803, 30), abs_216411, *[dy_216412], **kwargs_216413)
            
            # Applying the binary operator 'div' (line 3803)
            result_div_216415 = python_operator(stypy.reporting.localization.Localization(__file__, 3803, 25), 'div', dy_216410, abs_call_result_216414)
            
            
            # Call to abs(...): (line 3803)
            # Processing the call arguments (line 3803)
            # Getting the type of 'dx' (line 3803)
            dx_216417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3803, 44), 'dx', False)
            # Processing the call keyword arguments (line 3803)
            kwargs_216418 = {}
            # Getting the type of 'abs' (line 3803)
            abs_216416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3803, 40), 'abs', False)
            # Calling abs(args, kwargs) (line 3803)
            abs_call_result_216419 = invoke(stypy.reporting.localization.Localization(__file__, 3803, 40), abs_216416, *[dx_216417], **kwargs_216418)
            
            # Applying the binary operator '*' (line 3803)
            result_mul_216420 = python_operator(stypy.reporting.localization.Localization(__file__, 3803, 38), '*', result_div_216415, abs_call_result_216419)
            
            # Assigning a type to the variable 'dy' (line 3803)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3803, 20), 'dy', result_mul_216420)
            # SSA branch for the else part of an if statement (line 3802)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a BinOp to a Name (line 3805):
            
            # Assigning a BinOp to a Name (line 3805):
            # Getting the type of 'dx' (line 3805)
            dx_216421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 25), 'dx')
            
            # Call to abs(...): (line 3805)
            # Processing the call arguments (line 3805)
            # Getting the type of 'dx' (line 3805)
            dx_216423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 34), 'dx', False)
            # Processing the call keyword arguments (line 3805)
            kwargs_216424 = {}
            # Getting the type of 'abs' (line 3805)
            abs_216422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 30), 'abs', False)
            # Calling abs(args, kwargs) (line 3805)
            abs_call_result_216425 = invoke(stypy.reporting.localization.Localization(__file__, 3805, 30), abs_216422, *[dx_216423], **kwargs_216424)
            
            # Applying the binary operator 'div' (line 3805)
            result_div_216426 = python_operator(stypy.reporting.localization.Localization(__file__, 3805, 25), 'div', dx_216421, abs_call_result_216425)
            
            
            # Call to abs(...): (line 3805)
            # Processing the call arguments (line 3805)
            # Getting the type of 'dy' (line 3805)
            dy_216428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 44), 'dy', False)
            # Processing the call keyword arguments (line 3805)
            kwargs_216429 = {}
            # Getting the type of 'abs' (line 3805)
            abs_216427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 40), 'abs', False)
            # Calling abs(args, kwargs) (line 3805)
            abs_call_result_216430 = invoke(stypy.reporting.localization.Localization(__file__, 3805, 40), abs_216427, *[dy_216428], **kwargs_216429)
            
            # Applying the binary operator '*' (line 3805)
            result_mul_216431 = python_operator(stypy.reporting.localization.Localization(__file__, 3805, 38), '*', result_div_216426, abs_call_result_216430)
            
            # Assigning a type to the variable 'dx' (line 3805)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3805, 20), 'dx', result_mul_216431)
            # SSA join for if statement (line 3802)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 3800)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 3798)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 3797)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 3795)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 3793)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 3788)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Obtaining an instance of the builtin type 'tuple' (line 3806)
            tuple_216432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3806, 20), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3806)
            # Adding element type (line 3806)
            # Getting the type of 'dx' (line 3806)
            dx_216433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3806, 20), 'dx')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3806, 20), tuple_216432, dx_216433)
            # Adding element type (line 3806)
            # Getting the type of 'dy' (line 3806)
            dy_216434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3806, 24), 'dy')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3806, 20), tuple_216432, dy_216434)
            
            # Assigning a type to the variable 'stypy_return_type' (line 3806)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3806, 12), 'stypy_return_type', tuple_216432)
            
            # ################# End of 'format_deltas(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'format_deltas' in the type store
            # Getting the type of 'stypy_return_type' (line 3787)
            stypy_return_type_216435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_216435)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'format_deltas'
            return stypy_return_type_216435

        # Assigning a type to the variable 'format_deltas' (line 3787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3787, 8), 'format_deltas', format_deltas)
        
        # Assigning a Attribute to a Name (line 3808):
        
        # Assigning a Attribute to a Name (line 3808):
        # Getting the type of 'self' (line 3808)
        self_216436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3808, 12), 'self')
        # Obtaining the member '_pan_start' of a type (line 3808)
        _pan_start_216437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3808, 12), self_216436, '_pan_start')
        # Assigning a type to the variable 'p' (line 3808)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3808, 8), 'p', _pan_start_216437)
        
        # Assigning a BinOp to a Name (line 3809):
        
        # Assigning a BinOp to a Name (line 3809):
        # Getting the type of 'x' (line 3809)
        x_216438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 13), 'x')
        # Getting the type of 'p' (line 3809)
        p_216439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 17), 'p')
        # Obtaining the member 'x' of a type (line 3809)
        x_216440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3809, 17), p_216439, 'x')
        # Applying the binary operator '-' (line 3809)
        result_sub_216441 = python_operator(stypy.reporting.localization.Localization(__file__, 3809, 13), '-', x_216438, x_216440)
        
        # Assigning a type to the variable 'dx' (line 3809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3809, 8), 'dx', result_sub_216441)
        
        # Assigning a BinOp to a Name (line 3810):
        
        # Assigning a BinOp to a Name (line 3810):
        # Getting the type of 'y' (line 3810)
        y_216442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3810, 13), 'y')
        # Getting the type of 'p' (line 3810)
        p_216443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3810, 17), 'p')
        # Obtaining the member 'y' of a type (line 3810)
        y_216444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3810, 17), p_216443, 'y')
        # Applying the binary operator '-' (line 3810)
        result_sub_216445 = python_operator(stypy.reporting.localization.Localization(__file__, 3810, 13), '-', y_216442, y_216444)
        
        # Assigning a type to the variable 'dy' (line 3810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3810, 8), 'dy', result_sub_216445)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'dx' (line 3811)
        dx_216446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 11), 'dx')
        int_216447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3811, 17), 'int')
        # Applying the binary operator '==' (line 3811)
        result_eq_216448 = python_operator(stypy.reporting.localization.Localization(__file__, 3811, 11), '==', dx_216446, int_216447)
        
        
        # Getting the type of 'dy' (line 3811)
        dy_216449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 23), 'dy')
        int_216450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3811, 29), 'int')
        # Applying the binary operator '==' (line 3811)
        result_eq_216451 = python_operator(stypy.reporting.localization.Localization(__file__, 3811, 23), '==', dy_216449, int_216450)
        
        # Applying the binary operator 'and' (line 3811)
        result_and_keyword_216452 = python_operator(stypy.reporting.localization.Localization(__file__, 3811, 11), 'and', result_eq_216448, result_eq_216451)
        
        # Testing the type of an if condition (line 3811)
        if_condition_216453 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3811, 8), result_and_keyword_216452)
        # Assigning a type to the variable 'if_condition_216453' (line 3811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3811, 8), 'if_condition_216453', if_condition_216453)
        # SSA begins for if statement (line 3811)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 3812)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3812, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 3811)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'button' (line 3813)
        button_216454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3813, 11), 'button')
        int_216455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3813, 21), 'int')
        # Applying the binary operator '==' (line 3813)
        result_eq_216456 = python_operator(stypy.reporting.localization.Localization(__file__, 3813, 11), '==', button_216454, int_216455)
        
        # Testing the type of an if condition (line 3813)
        if_condition_216457 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3813, 8), result_eq_216456)
        # Assigning a type to the variable 'if_condition_216457' (line 3813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3813, 8), 'if_condition_216457', if_condition_216457)
        # SSA begins for if statement (line 3813)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 3814):
        
        # Assigning a Call to a Name:
        
        # Call to format_deltas(...): (line 3814)
        # Processing the call arguments (line 3814)
        # Getting the type of 'key' (line 3814)
        key_216459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3814, 35), 'key', False)
        # Getting the type of 'dx' (line 3814)
        dx_216460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3814, 40), 'dx', False)
        # Getting the type of 'dy' (line 3814)
        dy_216461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3814, 44), 'dy', False)
        # Processing the call keyword arguments (line 3814)
        kwargs_216462 = {}
        # Getting the type of 'format_deltas' (line 3814)
        format_deltas_216458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3814, 21), 'format_deltas', False)
        # Calling format_deltas(args, kwargs) (line 3814)
        format_deltas_call_result_216463 = invoke(stypy.reporting.localization.Localization(__file__, 3814, 21), format_deltas_216458, *[key_216459, dx_216460, dy_216461], **kwargs_216462)
        
        # Assigning a type to the variable 'call_assignment_207905' (line 3814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3814, 12), 'call_assignment_207905', format_deltas_call_result_216463)
        
        # Assigning a Call to a Name (line 3814):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_216466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3814, 12), 'int')
        # Processing the call keyword arguments
        kwargs_216467 = {}
        # Getting the type of 'call_assignment_207905' (line 3814)
        call_assignment_207905_216464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3814, 12), 'call_assignment_207905', False)
        # Obtaining the member '__getitem__' of a type (line 3814)
        getitem___216465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3814, 12), call_assignment_207905_216464, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_216468 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___216465, *[int_216466], **kwargs_216467)
        
        # Assigning a type to the variable 'call_assignment_207906' (line 3814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3814, 12), 'call_assignment_207906', getitem___call_result_216468)
        
        # Assigning a Name to a Name (line 3814):
        # Getting the type of 'call_assignment_207906' (line 3814)
        call_assignment_207906_216469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3814, 12), 'call_assignment_207906')
        # Assigning a type to the variable 'dx' (line 3814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3814, 12), 'dx', call_assignment_207906_216469)
        
        # Assigning a Call to a Name (line 3814):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_216472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3814, 12), 'int')
        # Processing the call keyword arguments
        kwargs_216473 = {}
        # Getting the type of 'call_assignment_207905' (line 3814)
        call_assignment_207905_216470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3814, 12), 'call_assignment_207905', False)
        # Obtaining the member '__getitem__' of a type (line 3814)
        getitem___216471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3814, 12), call_assignment_207905_216470, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_216474 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___216471, *[int_216472], **kwargs_216473)
        
        # Assigning a type to the variable 'call_assignment_207907' (line 3814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3814, 12), 'call_assignment_207907', getitem___call_result_216474)
        
        # Assigning a Name to a Name (line 3814):
        # Getting the type of 'call_assignment_207907' (line 3814)
        call_assignment_207907_216475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3814, 12), 'call_assignment_207907')
        # Assigning a type to the variable 'dy' (line 3814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3814, 16), 'dy', call_assignment_207907_216475)
        
        # Assigning a Call to a Name (line 3815):
        
        # Assigning a Call to a Name (line 3815):
        
        # Call to transformed(...): (line 3815)
        # Processing the call arguments (line 3815)
        # Getting the type of 'p' (line 3816)
        p_216486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3816, 29), 'p', False)
        # Obtaining the member 'trans_inverse' of a type (line 3816)
        trans_inverse_216487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3816, 29), p_216486, 'trans_inverse')
        # Processing the call keyword arguments (line 3815)
        kwargs_216488 = {}
        
        # Call to translated(...): (line 3815)
        # Processing the call arguments (line 3815)
        
        # Getting the type of 'dx' (line 3815)
        dx_216479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3815, 40), 'dx', False)
        # Applying the 'usub' unary operator (line 3815)
        result___neg___216480 = python_operator(stypy.reporting.localization.Localization(__file__, 3815, 39), 'usub', dx_216479)
        
        
        # Getting the type of 'dy' (line 3815)
        dy_216481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3815, 45), 'dy', False)
        # Applying the 'usub' unary operator (line 3815)
        result___neg___216482 = python_operator(stypy.reporting.localization.Localization(__file__, 3815, 44), 'usub', dy_216481)
        
        # Processing the call keyword arguments (line 3815)
        kwargs_216483 = {}
        # Getting the type of 'p' (line 3815)
        p_216476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3815, 21), 'p', False)
        # Obtaining the member 'bbox' of a type (line 3815)
        bbox_216477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3815, 21), p_216476, 'bbox')
        # Obtaining the member 'translated' of a type (line 3815)
        translated_216478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3815, 21), bbox_216477, 'translated')
        # Calling translated(args, kwargs) (line 3815)
        translated_call_result_216484 = invoke(stypy.reporting.localization.Localization(__file__, 3815, 21), translated_216478, *[result___neg___216480, result___neg___216482], **kwargs_216483)
        
        # Obtaining the member 'transformed' of a type (line 3815)
        transformed_216485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3815, 21), translated_call_result_216484, 'transformed')
        # Calling transformed(args, kwargs) (line 3815)
        transformed_call_result_216489 = invoke(stypy.reporting.localization.Localization(__file__, 3815, 21), transformed_216485, *[trans_inverse_216487], **kwargs_216488)
        
        # Assigning a type to the variable 'result' (line 3815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3815, 12), 'result', transformed_call_result_216489)
        # SSA branch for the else part of an if statement (line 3813)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'button' (line 3817)
        button_216490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3817, 13), 'button')
        int_216491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3817, 23), 'int')
        # Applying the binary operator '==' (line 3817)
        result_eq_216492 = python_operator(stypy.reporting.localization.Localization(__file__, 3817, 13), '==', button_216490, int_216491)
        
        # Testing the type of an if condition (line 3817)
        if_condition_216493 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3817, 13), result_eq_216492)
        # Assigning a type to the variable 'if_condition_216493' (line 3817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3817, 13), 'if_condition_216493', if_condition_216493)
        # SSA begins for if statement (line 3817)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 3818)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a BinOp to a Name (line 3819):
        
        # Assigning a BinOp to a Name (line 3819):
        
        # Getting the type of 'dx' (line 3819)
        dx_216494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3819, 22), 'dx')
        # Applying the 'usub' unary operator (line 3819)
        result___neg___216495 = python_operator(stypy.reporting.localization.Localization(__file__, 3819, 21), 'usub', dx_216494)
        
        
        # Call to float(...): (line 3819)
        # Processing the call arguments (line 3819)
        # Getting the type of 'self' (line 3819)
        self_216497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3819, 33), 'self', False)
        # Obtaining the member 'bbox' of a type (line 3819)
        bbox_216498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3819, 33), self_216497, 'bbox')
        # Obtaining the member 'width' of a type (line 3819)
        width_216499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3819, 33), bbox_216498, 'width')
        # Processing the call keyword arguments (line 3819)
        kwargs_216500 = {}
        # Getting the type of 'float' (line 3819)
        float_216496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3819, 27), 'float', False)
        # Calling float(args, kwargs) (line 3819)
        float_call_result_216501 = invoke(stypy.reporting.localization.Localization(__file__, 3819, 27), float_216496, *[width_216499], **kwargs_216500)
        
        # Applying the binary operator 'div' (line 3819)
        result_div_216502 = python_operator(stypy.reporting.localization.Localization(__file__, 3819, 21), 'div', result___neg___216495, float_call_result_216501)
        
        # Assigning a type to the variable 'dx' (line 3819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3819, 16), 'dx', result_div_216502)
        
        # Assigning a BinOp to a Name (line 3820):
        
        # Assigning a BinOp to a Name (line 3820):
        
        # Getting the type of 'dy' (line 3820)
        dy_216503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3820, 22), 'dy')
        # Applying the 'usub' unary operator (line 3820)
        result___neg___216504 = python_operator(stypy.reporting.localization.Localization(__file__, 3820, 21), 'usub', dy_216503)
        
        
        # Call to float(...): (line 3820)
        # Processing the call arguments (line 3820)
        # Getting the type of 'self' (line 3820)
        self_216506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3820, 33), 'self', False)
        # Obtaining the member 'bbox' of a type (line 3820)
        bbox_216507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3820, 33), self_216506, 'bbox')
        # Obtaining the member 'height' of a type (line 3820)
        height_216508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3820, 33), bbox_216507, 'height')
        # Processing the call keyword arguments (line 3820)
        kwargs_216509 = {}
        # Getting the type of 'float' (line 3820)
        float_216505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3820, 27), 'float', False)
        # Calling float(args, kwargs) (line 3820)
        float_call_result_216510 = invoke(stypy.reporting.localization.Localization(__file__, 3820, 27), float_216505, *[height_216508], **kwargs_216509)
        
        # Applying the binary operator 'div' (line 3820)
        result_div_216511 = python_operator(stypy.reporting.localization.Localization(__file__, 3820, 21), 'div', result___neg___216504, float_call_result_216510)
        
        # Assigning a type to the variable 'dy' (line 3820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3820, 16), 'dy', result_div_216511)
        
        # Assigning a Call to a Tuple (line 3821):
        
        # Assigning a Call to a Name:
        
        # Call to format_deltas(...): (line 3821)
        # Processing the call arguments (line 3821)
        # Getting the type of 'key' (line 3821)
        key_216513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 39), 'key', False)
        # Getting the type of 'dx' (line 3821)
        dx_216514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 44), 'dx', False)
        # Getting the type of 'dy' (line 3821)
        dy_216515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 48), 'dy', False)
        # Processing the call keyword arguments (line 3821)
        kwargs_216516 = {}
        # Getting the type of 'format_deltas' (line 3821)
        format_deltas_216512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 25), 'format_deltas', False)
        # Calling format_deltas(args, kwargs) (line 3821)
        format_deltas_call_result_216517 = invoke(stypy.reporting.localization.Localization(__file__, 3821, 25), format_deltas_216512, *[key_216513, dx_216514, dy_216515], **kwargs_216516)
        
        # Assigning a type to the variable 'call_assignment_207908' (line 3821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3821, 16), 'call_assignment_207908', format_deltas_call_result_216517)
        
        # Assigning a Call to a Name (line 3821):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_216520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3821, 16), 'int')
        # Processing the call keyword arguments
        kwargs_216521 = {}
        # Getting the type of 'call_assignment_207908' (line 3821)
        call_assignment_207908_216518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 16), 'call_assignment_207908', False)
        # Obtaining the member '__getitem__' of a type (line 3821)
        getitem___216519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3821, 16), call_assignment_207908_216518, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_216522 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___216519, *[int_216520], **kwargs_216521)
        
        # Assigning a type to the variable 'call_assignment_207909' (line 3821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3821, 16), 'call_assignment_207909', getitem___call_result_216522)
        
        # Assigning a Name to a Name (line 3821):
        # Getting the type of 'call_assignment_207909' (line 3821)
        call_assignment_207909_216523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 16), 'call_assignment_207909')
        # Assigning a type to the variable 'dx' (line 3821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3821, 16), 'dx', call_assignment_207909_216523)
        
        # Assigning a Call to a Name (line 3821):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_216526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3821, 16), 'int')
        # Processing the call keyword arguments
        kwargs_216527 = {}
        # Getting the type of 'call_assignment_207908' (line 3821)
        call_assignment_207908_216524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 16), 'call_assignment_207908', False)
        # Obtaining the member '__getitem__' of a type (line 3821)
        getitem___216525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3821, 16), call_assignment_207908_216524, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_216528 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___216525, *[int_216526], **kwargs_216527)
        
        # Assigning a type to the variable 'call_assignment_207910' (line 3821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3821, 16), 'call_assignment_207910', getitem___call_result_216528)
        
        # Assigning a Name to a Name (line 3821):
        # Getting the type of 'call_assignment_207910' (line 3821)
        call_assignment_207910_216529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 16), 'call_assignment_207910')
        # Assigning a type to the variable 'dy' (line 3821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3821, 20), 'dy', call_assignment_207910_216529)
        
        
        
        # Call to get_aspect(...): (line 3822)
        # Processing the call keyword arguments (line 3822)
        kwargs_216532 = {}
        # Getting the type of 'self' (line 3822)
        self_216530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3822, 19), 'self', False)
        # Obtaining the member 'get_aspect' of a type (line 3822)
        get_aspect_216531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3822, 19), self_216530, 'get_aspect')
        # Calling get_aspect(args, kwargs) (line 3822)
        get_aspect_call_result_216533 = invoke(stypy.reporting.localization.Localization(__file__, 3822, 19), get_aspect_216531, *[], **kwargs_216532)
        
        unicode_216534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3822, 40), 'unicode', u'auto')
        # Applying the binary operator '!=' (line 3822)
        result_ne_216535 = python_operator(stypy.reporting.localization.Localization(__file__, 3822, 19), '!=', get_aspect_call_result_216533, unicode_216534)
        
        # Testing the type of an if condition (line 3822)
        if_condition_216536 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3822, 16), result_ne_216535)
        # Assigning a type to the variable 'if_condition_216536' (line 3822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3822, 16), 'if_condition_216536', if_condition_216536)
        # SSA begins for if statement (line 3822)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 3823):
        
        # Assigning a BinOp to a Name (line 3823):
        float_216537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3823, 25), 'float')
        # Getting the type of 'dx' (line 3823)
        dx_216538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3823, 32), 'dx')
        # Getting the type of 'dy' (line 3823)
        dy_216539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3823, 37), 'dy')
        # Applying the binary operator '+' (line 3823)
        result_add_216540 = python_operator(stypy.reporting.localization.Localization(__file__, 3823, 32), '+', dx_216538, dy_216539)
        
        # Applying the binary operator '*' (line 3823)
        result_mul_216541 = python_operator(stypy.reporting.localization.Localization(__file__, 3823, 25), '*', float_216537, result_add_216540)
        
        # Assigning a type to the variable 'dx' (line 3823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3823, 20), 'dx', result_mul_216541)
        
        # Assigning a Name to a Name (line 3824):
        
        # Assigning a Name to a Name (line 3824):
        # Getting the type of 'dx' (line 3824)
        dx_216542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3824, 25), 'dx')
        # Assigning a type to the variable 'dy' (line 3824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3824, 20), 'dy', dx_216542)
        # SSA join for if statement (line 3822)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3826):
        
        # Assigning a Call to a Name (line 3826):
        
        # Call to power(...): (line 3826)
        # Processing the call arguments (line 3826)
        float_216545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3826, 33), 'float')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3826)
        tuple_216546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3826, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3826)
        # Adding element type (line 3826)
        # Getting the type of 'dx' (line 3826)
        dx_216547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 40), 'dx', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3826, 40), tuple_216546, dx_216547)
        # Adding element type (line 3826)
        # Getting the type of 'dy' (line 3826)
        dy_216548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 44), 'dy', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3826, 40), tuple_216546, dy_216548)
        
        # Processing the call keyword arguments (line 3826)
        kwargs_216549 = {}
        # Getting the type of 'np' (line 3826)
        np_216543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 24), 'np', False)
        # Obtaining the member 'power' of a type (line 3826)
        power_216544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3826, 24), np_216543, 'power')
        # Calling power(args, kwargs) (line 3826)
        power_call_result_216550 = invoke(stypy.reporting.localization.Localization(__file__, 3826, 24), power_216544, *[float_216545, tuple_216546], **kwargs_216549)
        
        # Assigning a type to the variable 'alpha' (line 3826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3826, 16), 'alpha', power_call_result_216550)
        
        # Assigning a Call to a Name (line 3827):
        
        # Assigning a Call to a Name (line 3827):
        
        # Call to array(...): (line 3827)
        # Processing the call arguments (line 3827)
        
        # Obtaining an instance of the builtin type 'list' (line 3827)
        list_216553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3827, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3827)
        # Adding element type (line 3827)
        # Getting the type of 'p' (line 3827)
        p_216554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3827, 34), 'p', False)
        # Obtaining the member 'x' of a type (line 3827)
        x_216555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3827, 34), p_216554, 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3827, 33), list_216553, x_216555)
        # Adding element type (line 3827)
        # Getting the type of 'p' (line 3827)
        p_216556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3827, 39), 'p', False)
        # Obtaining the member 'y' of a type (line 3827)
        y_216557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3827, 39), p_216556, 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3827, 33), list_216553, y_216557)
        
        # Processing the call keyword arguments (line 3827)
        kwargs_216558 = {}
        # Getting the type of 'np' (line 3827)
        np_216551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3827, 24), 'np', False)
        # Obtaining the member 'array' of a type (line 3827)
        array_216552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3827, 24), np_216551, 'array')
        # Calling array(args, kwargs) (line 3827)
        array_call_result_216559 = invoke(stypy.reporting.localization.Localization(__file__, 3827, 24), array_216552, *[list_216553], **kwargs_216558)
        
        # Assigning a type to the variable 'start' (line 3827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3827, 16), 'start', array_call_result_216559)
        
        # Assigning a Call to a Name (line 3828):
        
        # Assigning a Call to a Name (line 3828):
        
        # Call to transformed(...): (line 3828)
        # Processing the call arguments (line 3828)
        # Getting the type of 'p' (line 3828)
        p_216563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3828, 46), 'p', False)
        # Obtaining the member 'trans' of a type (line 3828)
        trans_216564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3828, 46), p_216563, 'trans')
        # Processing the call keyword arguments (line 3828)
        kwargs_216565 = {}
        # Getting the type of 'p' (line 3828)
        p_216560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3828, 28), 'p', False)
        # Obtaining the member 'lim' of a type (line 3828)
        lim_216561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3828, 28), p_216560, 'lim')
        # Obtaining the member 'transformed' of a type (line 3828)
        transformed_216562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3828, 28), lim_216561, 'transformed')
        # Calling transformed(args, kwargs) (line 3828)
        transformed_call_result_216566 = invoke(stypy.reporting.localization.Localization(__file__, 3828, 28), transformed_216562, *[trans_216564], **kwargs_216565)
        
        # Assigning a type to the variable 'oldpoints' (line 3828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3828, 16), 'oldpoints', transformed_call_result_216566)
        
        # Assigning a BinOp to a Name (line 3829):
        
        # Assigning a BinOp to a Name (line 3829):
        # Getting the type of 'start' (line 3829)
        start_216567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3829, 28), 'start')
        # Getting the type of 'alpha' (line 3829)
        alpha_216568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3829, 36), 'alpha')
        # Getting the type of 'oldpoints' (line 3829)
        oldpoints_216569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3829, 45), 'oldpoints')
        # Getting the type of 'start' (line 3829)
        start_216570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3829, 57), 'start')
        # Applying the binary operator '-' (line 3829)
        result_sub_216571 = python_operator(stypy.reporting.localization.Localization(__file__, 3829, 45), '-', oldpoints_216569, start_216570)
        
        # Applying the binary operator '*' (line 3829)
        result_mul_216572 = python_operator(stypy.reporting.localization.Localization(__file__, 3829, 36), '*', alpha_216568, result_sub_216571)
        
        # Applying the binary operator '+' (line 3829)
        result_add_216573 = python_operator(stypy.reporting.localization.Localization(__file__, 3829, 28), '+', start_216567, result_mul_216572)
        
        # Assigning a type to the variable 'newpoints' (line 3829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3829, 16), 'newpoints', result_add_216573)
        
        # Assigning a Call to a Name (line 3830):
        
        # Assigning a Call to a Name (line 3830):
        
        # Call to transformed(...): (line 3830)
        # Processing the call arguments (line 3830)
        # Getting the type of 'p' (line 3831)
        p_216580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3831, 33), 'p', False)
        # Obtaining the member 'trans_inverse' of a type (line 3831)
        trans_inverse_216581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3831, 33), p_216580, 'trans_inverse')
        # Processing the call keyword arguments (line 3830)
        kwargs_216582 = {}
        
        # Call to Bbox(...): (line 3830)
        # Processing the call arguments (line 3830)
        # Getting the type of 'newpoints' (line 3830)
        newpoints_216576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3830, 42), 'newpoints', False)
        # Processing the call keyword arguments (line 3830)
        kwargs_216577 = {}
        # Getting the type of 'mtransforms' (line 3830)
        mtransforms_216574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3830, 25), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 3830)
        Bbox_216575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3830, 25), mtransforms_216574, 'Bbox')
        # Calling Bbox(args, kwargs) (line 3830)
        Bbox_call_result_216578 = invoke(stypy.reporting.localization.Localization(__file__, 3830, 25), Bbox_216575, *[newpoints_216576], **kwargs_216577)
        
        # Obtaining the member 'transformed' of a type (line 3830)
        transformed_216579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3830, 25), Bbox_call_result_216578, 'transformed')
        # Calling transformed(args, kwargs) (line 3830)
        transformed_call_result_216583 = invoke(stypy.reporting.localization.Localization(__file__, 3830, 25), transformed_216579, *[trans_inverse_216581], **kwargs_216582)
        
        # Assigning a type to the variable 'result' (line 3830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3830, 16), 'result', transformed_call_result_216583)
        # SSA branch for the except part of a try statement (line 3818)
        # SSA branch for the except 'OverflowError' branch of a try statement (line 3818)
        module_type_store.open_ssa_branch('except')
        
        # Call to warn(...): (line 3833)
        # Processing the call arguments (line 3833)
        unicode_216586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3833, 30), 'unicode', u'Overflow while panning')
        # Processing the call keyword arguments (line 3833)
        kwargs_216587 = {}
        # Getting the type of 'warnings' (line 3833)
        warnings_216584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3833, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3833)
        warn_216585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3833, 16), warnings_216584, 'warn')
        # Calling warn(args, kwargs) (line 3833)
        warn_call_result_216588 = invoke(stypy.reporting.localization.Localization(__file__, 3833, 16), warn_216585, *[unicode_216586], **kwargs_216587)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3834)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3834, 16), 'stypy_return_type', types.NoneType)
        # SSA join for try-except statement (line 3818)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3817)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3813)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_xlim(...): (line 3836)
        # Getting the type of 'result' (line 3836)
        result_216591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3836, 23), 'result', False)
        # Obtaining the member 'intervalx' of a type (line 3836)
        intervalx_216592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3836, 23), result_216591, 'intervalx')
        # Processing the call keyword arguments (line 3836)
        kwargs_216593 = {}
        # Getting the type of 'self' (line 3836)
        self_216589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3836, 8), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 3836)
        set_xlim_216590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3836, 8), self_216589, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 3836)
        set_xlim_call_result_216594 = invoke(stypy.reporting.localization.Localization(__file__, 3836, 8), set_xlim_216590, *[intervalx_216592], **kwargs_216593)
        
        
        # Call to set_ylim(...): (line 3837)
        # Getting the type of 'result' (line 3837)
        result_216597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3837, 23), 'result', False)
        # Obtaining the member 'intervaly' of a type (line 3837)
        intervaly_216598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3837, 23), result_216597, 'intervaly')
        # Processing the call keyword arguments (line 3837)
        kwargs_216599 = {}
        # Getting the type of 'self' (line 3837)
        self_216595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3837, 8), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 3837)
        set_ylim_216596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3837, 8), self_216595, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 3837)
        set_ylim_call_result_216600 = invoke(stypy.reporting.localization.Localization(__file__, 3837, 8), set_ylim_216596, *[intervaly_216598], **kwargs_216599)
        
        
        # ################# End of 'drag_pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'drag_pan' in the type store
        # Getting the type of 'stypy_return_type' (line 3768)
        stypy_return_type_216601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3768, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_216601)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'drag_pan'
        return stypy_return_type_216601


    @norecursion
    def get_cursor_props(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_cursor_props'
        module_type_store = module_type_store.open_function_context('get_cursor_props', 3839, 4, False)
        # Assigning a type to the variable 'self' (line 3840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3840, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_cursor_props.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_cursor_props.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_cursor_props.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_cursor_props.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_cursor_props')
        _AxesBase.get_cursor_props.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_cursor_props.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_cursor_props.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_cursor_props.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_cursor_props.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_cursor_props.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_cursor_props.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_cursor_props', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_cursor_props', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_cursor_props(...)' code ##################

        unicode_216602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3845, (-1)), 'unicode', u'\n        Return the cursor propertiess as a (*linewidth*, *color*)\n        tuple, where *linewidth* is a float and *color* is an RGBA\n        tuple\n        ')
        # Getting the type of 'self' (line 3846)
        self_216603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3846, 15), 'self')
        # Obtaining the member '_cursorProps' of a type (line 3846)
        _cursorProps_216604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3846, 15), self_216603, '_cursorProps')
        # Assigning a type to the variable 'stypy_return_type' (line 3846)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3846, 8), 'stypy_return_type', _cursorProps_216604)
        
        # ################# End of 'get_cursor_props(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_cursor_props' in the type store
        # Getting the type of 'stypy_return_type' (line 3839)
        stypy_return_type_216605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3839, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_216605)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_cursor_props'
        return stypy_return_type_216605


    @norecursion
    def set_cursor_props(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_cursor_props'
        module_type_store = module_type_store.open_function_context('set_cursor_props', 3848, 4, False)
        # Assigning a type to the variable 'self' (line 3849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3849, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.set_cursor_props.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.set_cursor_props.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.set_cursor_props.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.set_cursor_props.__dict__.__setitem__('stypy_function_name', '_AxesBase.set_cursor_props')
        _AxesBase.set_cursor_props.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.set_cursor_props.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _AxesBase.set_cursor_props.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.set_cursor_props.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.set_cursor_props.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.set_cursor_props.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.set_cursor_props.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.set_cursor_props', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_cursor_props', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_cursor_props(...)' code ##################

        unicode_216606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3861, (-1)), 'unicode', u'Set the cursor property as\n\n        Call signature ::\n\n          ax.set_cursor_props(linewidth, color)\n\n        or::\n\n          ax.set_cursor_props((linewidth, color))\n\n        ACCEPTS: a (*float*, *color*) tuple\n        ')
        
        
        
        # Call to len(...): (line 3862)
        # Processing the call arguments (line 3862)
        # Getting the type of 'args' (line 3862)
        args_216608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3862, 15), 'args', False)
        # Processing the call keyword arguments (line 3862)
        kwargs_216609 = {}
        # Getting the type of 'len' (line 3862)
        len_216607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3862, 11), 'len', False)
        # Calling len(args, kwargs) (line 3862)
        len_call_result_216610 = invoke(stypy.reporting.localization.Localization(__file__, 3862, 11), len_216607, *[args_216608], **kwargs_216609)
        
        int_216611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3862, 24), 'int')
        # Applying the binary operator '==' (line 3862)
        result_eq_216612 = python_operator(stypy.reporting.localization.Localization(__file__, 3862, 11), '==', len_call_result_216610, int_216611)
        
        # Testing the type of an if condition (line 3862)
        if_condition_216613 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3862, 8), result_eq_216612)
        # Assigning a type to the variable 'if_condition_216613' (line 3862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3862, 8), 'if_condition_216613', if_condition_216613)
        # SSA begins for if statement (line 3862)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Tuple (line 3863):
        
        # Assigning a Subscript to a Name (line 3863):
        
        # Obtaining the type of the subscript
        int_216614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3863, 12), 'int')
        
        # Obtaining the type of the subscript
        int_216615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3863, 25), 'int')
        # Getting the type of 'args' (line 3863)
        args_216616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3863, 20), 'args')
        # Obtaining the member '__getitem__' of a type (line 3863)
        getitem___216617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3863, 20), args_216616, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3863)
        subscript_call_result_216618 = invoke(stypy.reporting.localization.Localization(__file__, 3863, 20), getitem___216617, int_216615)
        
        # Obtaining the member '__getitem__' of a type (line 3863)
        getitem___216619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3863, 12), subscript_call_result_216618, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3863)
        subscript_call_result_216620 = invoke(stypy.reporting.localization.Localization(__file__, 3863, 12), getitem___216619, int_216614)
        
        # Assigning a type to the variable 'tuple_var_assignment_207911' (line 3863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3863, 12), 'tuple_var_assignment_207911', subscript_call_result_216620)
        
        # Assigning a Subscript to a Name (line 3863):
        
        # Obtaining the type of the subscript
        int_216621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3863, 12), 'int')
        
        # Obtaining the type of the subscript
        int_216622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3863, 25), 'int')
        # Getting the type of 'args' (line 3863)
        args_216623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3863, 20), 'args')
        # Obtaining the member '__getitem__' of a type (line 3863)
        getitem___216624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3863, 20), args_216623, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3863)
        subscript_call_result_216625 = invoke(stypy.reporting.localization.Localization(__file__, 3863, 20), getitem___216624, int_216622)
        
        # Obtaining the member '__getitem__' of a type (line 3863)
        getitem___216626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3863, 12), subscript_call_result_216625, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3863)
        subscript_call_result_216627 = invoke(stypy.reporting.localization.Localization(__file__, 3863, 12), getitem___216626, int_216621)
        
        # Assigning a type to the variable 'tuple_var_assignment_207912' (line 3863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3863, 12), 'tuple_var_assignment_207912', subscript_call_result_216627)
        
        # Assigning a Name to a Name (line 3863):
        # Getting the type of 'tuple_var_assignment_207911' (line 3863)
        tuple_var_assignment_207911_216628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3863, 12), 'tuple_var_assignment_207911')
        # Assigning a type to the variable 'lw' (line 3863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3863, 12), 'lw', tuple_var_assignment_207911_216628)
        
        # Assigning a Name to a Name (line 3863):
        # Getting the type of 'tuple_var_assignment_207912' (line 3863)
        tuple_var_assignment_207912_216629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3863, 12), 'tuple_var_assignment_207912')
        # Assigning a type to the variable 'c' (line 3863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3863, 16), 'c', tuple_var_assignment_207912_216629)
        # SSA branch for the else part of an if statement (line 3862)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to len(...): (line 3864)
        # Processing the call arguments (line 3864)
        # Getting the type of 'args' (line 3864)
        args_216631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3864, 17), 'args', False)
        # Processing the call keyword arguments (line 3864)
        kwargs_216632 = {}
        # Getting the type of 'len' (line 3864)
        len_216630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3864, 13), 'len', False)
        # Calling len(args, kwargs) (line 3864)
        len_call_result_216633 = invoke(stypy.reporting.localization.Localization(__file__, 3864, 13), len_216630, *[args_216631], **kwargs_216632)
        
        int_216634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3864, 26), 'int')
        # Applying the binary operator '==' (line 3864)
        result_eq_216635 = python_operator(stypy.reporting.localization.Localization(__file__, 3864, 13), '==', len_call_result_216633, int_216634)
        
        # Testing the type of an if condition (line 3864)
        if_condition_216636 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3864, 13), result_eq_216635)
        # Assigning a type to the variable 'if_condition_216636' (line 3864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3864, 13), 'if_condition_216636', if_condition_216636)
        # SSA begins for if statement (line 3864)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 3865):
        
        # Assigning a Subscript to a Name (line 3865):
        
        # Obtaining the type of the subscript
        int_216637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3865, 12), 'int')
        # Getting the type of 'args' (line 3865)
        args_216638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3865, 20), 'args')
        # Obtaining the member '__getitem__' of a type (line 3865)
        getitem___216639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3865, 12), args_216638, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3865)
        subscript_call_result_216640 = invoke(stypy.reporting.localization.Localization(__file__, 3865, 12), getitem___216639, int_216637)
        
        # Assigning a type to the variable 'tuple_var_assignment_207913' (line 3865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3865, 12), 'tuple_var_assignment_207913', subscript_call_result_216640)
        
        # Assigning a Subscript to a Name (line 3865):
        
        # Obtaining the type of the subscript
        int_216641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3865, 12), 'int')
        # Getting the type of 'args' (line 3865)
        args_216642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3865, 20), 'args')
        # Obtaining the member '__getitem__' of a type (line 3865)
        getitem___216643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3865, 12), args_216642, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3865)
        subscript_call_result_216644 = invoke(stypy.reporting.localization.Localization(__file__, 3865, 12), getitem___216643, int_216641)
        
        # Assigning a type to the variable 'tuple_var_assignment_207914' (line 3865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3865, 12), 'tuple_var_assignment_207914', subscript_call_result_216644)
        
        # Assigning a Name to a Name (line 3865):
        # Getting the type of 'tuple_var_assignment_207913' (line 3865)
        tuple_var_assignment_207913_216645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3865, 12), 'tuple_var_assignment_207913')
        # Assigning a type to the variable 'lw' (line 3865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3865, 12), 'lw', tuple_var_assignment_207913_216645)
        
        # Assigning a Name to a Name (line 3865):
        # Getting the type of 'tuple_var_assignment_207914' (line 3865)
        tuple_var_assignment_207914_216646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3865, 12), 'tuple_var_assignment_207914')
        # Assigning a type to the variable 'c' (line 3865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3865, 16), 'c', tuple_var_assignment_207914_216646)
        # SSA branch for the else part of an if statement (line 3864)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 3867)
        # Processing the call arguments (line 3867)
        unicode_216648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3867, 29), 'unicode', u'args must be a (linewidth, color) tuple')
        # Processing the call keyword arguments (line 3867)
        kwargs_216649 = {}
        # Getting the type of 'ValueError' (line 3867)
        ValueError_216647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3867, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 3867)
        ValueError_call_result_216650 = invoke(stypy.reporting.localization.Localization(__file__, 3867, 18), ValueError_216647, *[unicode_216648], **kwargs_216649)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3867, 12), ValueError_call_result_216650, 'raise parameter', BaseException)
        # SSA join for if statement (line 3864)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3862)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3868):
        
        # Assigning a Call to a Name (line 3868):
        
        # Call to to_rgba(...): (line 3868)
        # Processing the call arguments (line 3868)
        # Getting the type of 'c' (line 3868)
        c_216653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3868, 28), 'c', False)
        # Processing the call keyword arguments (line 3868)
        kwargs_216654 = {}
        # Getting the type of 'mcolors' (line 3868)
        mcolors_216651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3868, 12), 'mcolors', False)
        # Obtaining the member 'to_rgba' of a type (line 3868)
        to_rgba_216652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3868, 12), mcolors_216651, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 3868)
        to_rgba_call_result_216655 = invoke(stypy.reporting.localization.Localization(__file__, 3868, 12), to_rgba_216652, *[c_216653], **kwargs_216654)
        
        # Assigning a type to the variable 'c' (line 3868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3868, 8), 'c', to_rgba_call_result_216655)
        
        # Assigning a Tuple to a Attribute (line 3869):
        
        # Assigning a Tuple to a Attribute (line 3869):
        
        # Obtaining an instance of the builtin type 'tuple' (line 3869)
        tuple_216656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3869, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3869)
        # Adding element type (line 3869)
        # Getting the type of 'lw' (line 3869)
        lw_216657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3869, 28), 'lw')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3869, 28), tuple_216656, lw_216657)
        # Adding element type (line 3869)
        # Getting the type of 'c' (line 3869)
        c_216658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3869, 32), 'c')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3869, 28), tuple_216656, c_216658)
        
        # Getting the type of 'self' (line 3869)
        self_216659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3869, 8), 'self')
        # Setting the type of the member '_cursorProps' of a type (line 3869)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3869, 8), self_216659, '_cursorProps', tuple_216656)
        
        # ################# End of 'set_cursor_props(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_cursor_props' in the type store
        # Getting the type of 'stypy_return_type' (line 3848)
        stypy_return_type_216660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3848, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_216660)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_cursor_props'
        return stypy_return_type_216660


    @norecursion
    def get_children(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_children'
        module_type_store = module_type_store.open_function_context('get_children', 3871, 4, False)
        # Assigning a type to the variable 'self' (line 3872)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3872, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_children.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_children.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_children.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_children.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_children')
        _AxesBase.get_children.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_children.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_children.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_children.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_children.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_children.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_children.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_children', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_children', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_children(...)' code ##################

        unicode_216661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3872, 8), 'unicode', u'return a list of child artists')
        
        # Assigning a List to a Name (line 3873):
        
        # Assigning a List to a Name (line 3873):
        
        # Obtaining an instance of the builtin type 'list' (line 3873)
        list_216662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3873, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3873)
        
        # Assigning a type to the variable 'children' (line 3873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3873, 8), 'children', list_216662)
        
        # Call to extend(...): (line 3874)
        # Processing the call arguments (line 3874)
        # Getting the type of 'self' (line 3874)
        self_216665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 24), 'self', False)
        # Obtaining the member 'collections' of a type (line 3874)
        collections_216666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3874, 24), self_216665, 'collections')
        # Processing the call keyword arguments (line 3874)
        kwargs_216667 = {}
        # Getting the type of 'children' (line 3874)
        children_216663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 3874)
        extend_216664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3874, 8), children_216663, 'extend')
        # Calling extend(args, kwargs) (line 3874)
        extend_call_result_216668 = invoke(stypy.reporting.localization.Localization(__file__, 3874, 8), extend_216664, *[collections_216666], **kwargs_216667)
        
        
        # Call to extend(...): (line 3875)
        # Processing the call arguments (line 3875)
        # Getting the type of 'self' (line 3875)
        self_216671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3875, 24), 'self', False)
        # Obtaining the member 'patches' of a type (line 3875)
        patches_216672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3875, 24), self_216671, 'patches')
        # Processing the call keyword arguments (line 3875)
        kwargs_216673 = {}
        # Getting the type of 'children' (line 3875)
        children_216669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3875, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 3875)
        extend_216670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3875, 8), children_216669, 'extend')
        # Calling extend(args, kwargs) (line 3875)
        extend_call_result_216674 = invoke(stypy.reporting.localization.Localization(__file__, 3875, 8), extend_216670, *[patches_216672], **kwargs_216673)
        
        
        # Call to extend(...): (line 3876)
        # Processing the call arguments (line 3876)
        # Getting the type of 'self' (line 3876)
        self_216677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3876, 24), 'self', False)
        # Obtaining the member 'lines' of a type (line 3876)
        lines_216678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3876, 24), self_216677, 'lines')
        # Processing the call keyword arguments (line 3876)
        kwargs_216679 = {}
        # Getting the type of 'children' (line 3876)
        children_216675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3876, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 3876)
        extend_216676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3876, 8), children_216675, 'extend')
        # Calling extend(args, kwargs) (line 3876)
        extend_call_result_216680 = invoke(stypy.reporting.localization.Localization(__file__, 3876, 8), extend_216676, *[lines_216678], **kwargs_216679)
        
        
        # Call to extend(...): (line 3877)
        # Processing the call arguments (line 3877)
        # Getting the type of 'self' (line 3877)
        self_216683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3877, 24), 'self', False)
        # Obtaining the member 'texts' of a type (line 3877)
        texts_216684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3877, 24), self_216683, 'texts')
        # Processing the call keyword arguments (line 3877)
        kwargs_216685 = {}
        # Getting the type of 'children' (line 3877)
        children_216681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3877, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 3877)
        extend_216682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3877, 8), children_216681, 'extend')
        # Calling extend(args, kwargs) (line 3877)
        extend_call_result_216686 = invoke(stypy.reporting.localization.Localization(__file__, 3877, 8), extend_216682, *[texts_216684], **kwargs_216685)
        
        
        # Call to extend(...): (line 3878)
        # Processing the call arguments (line 3878)
        # Getting the type of 'self' (line 3878)
        self_216689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3878, 24), 'self', False)
        # Obtaining the member 'artists' of a type (line 3878)
        artists_216690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3878, 24), self_216689, 'artists')
        # Processing the call keyword arguments (line 3878)
        kwargs_216691 = {}
        # Getting the type of 'children' (line 3878)
        children_216687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3878, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 3878)
        extend_216688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3878, 8), children_216687, 'extend')
        # Calling extend(args, kwargs) (line 3878)
        extend_call_result_216692 = invoke(stypy.reporting.localization.Localization(__file__, 3878, 8), extend_216688, *[artists_216690], **kwargs_216691)
        
        
        # Call to extend(...): (line 3879)
        # Processing the call arguments (line 3879)
        
        # Call to itervalues(...): (line 3879)
        # Processing the call arguments (line 3879)
        # Getting the type of 'self' (line 3879)
        self_216697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3879, 39), 'self', False)
        # Obtaining the member 'spines' of a type (line 3879)
        spines_216698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3879, 39), self_216697, 'spines')
        # Processing the call keyword arguments (line 3879)
        kwargs_216699 = {}
        # Getting the type of 'six' (line 3879)
        six_216695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3879, 24), 'six', False)
        # Obtaining the member 'itervalues' of a type (line 3879)
        itervalues_216696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3879, 24), six_216695, 'itervalues')
        # Calling itervalues(args, kwargs) (line 3879)
        itervalues_call_result_216700 = invoke(stypy.reporting.localization.Localization(__file__, 3879, 24), itervalues_216696, *[spines_216698], **kwargs_216699)
        
        # Processing the call keyword arguments (line 3879)
        kwargs_216701 = {}
        # Getting the type of 'children' (line 3879)
        children_216693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3879, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 3879)
        extend_216694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3879, 8), children_216693, 'extend')
        # Calling extend(args, kwargs) (line 3879)
        extend_call_result_216702 = invoke(stypy.reporting.localization.Localization(__file__, 3879, 8), extend_216694, *[itervalues_call_result_216700], **kwargs_216701)
        
        
        # Call to append(...): (line 3880)
        # Processing the call arguments (line 3880)
        # Getting the type of 'self' (line 3880)
        self_216705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3880, 24), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 3880)
        xaxis_216706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3880, 24), self_216705, 'xaxis')
        # Processing the call keyword arguments (line 3880)
        kwargs_216707 = {}
        # Getting the type of 'children' (line 3880)
        children_216703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3880, 8), 'children', False)
        # Obtaining the member 'append' of a type (line 3880)
        append_216704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3880, 8), children_216703, 'append')
        # Calling append(args, kwargs) (line 3880)
        append_call_result_216708 = invoke(stypy.reporting.localization.Localization(__file__, 3880, 8), append_216704, *[xaxis_216706], **kwargs_216707)
        
        
        # Call to append(...): (line 3881)
        # Processing the call arguments (line 3881)
        # Getting the type of 'self' (line 3881)
        self_216711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3881, 24), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 3881)
        yaxis_216712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3881, 24), self_216711, 'yaxis')
        # Processing the call keyword arguments (line 3881)
        kwargs_216713 = {}
        # Getting the type of 'children' (line 3881)
        children_216709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3881, 8), 'children', False)
        # Obtaining the member 'append' of a type (line 3881)
        append_216710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3881, 8), children_216709, 'append')
        # Calling append(args, kwargs) (line 3881)
        append_call_result_216714 = invoke(stypy.reporting.localization.Localization(__file__, 3881, 8), append_216710, *[yaxis_216712], **kwargs_216713)
        
        
        # Call to append(...): (line 3882)
        # Processing the call arguments (line 3882)
        # Getting the type of 'self' (line 3882)
        self_216717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3882, 24), 'self', False)
        # Obtaining the member 'title' of a type (line 3882)
        title_216718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3882, 24), self_216717, 'title')
        # Processing the call keyword arguments (line 3882)
        kwargs_216719 = {}
        # Getting the type of 'children' (line 3882)
        children_216715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3882, 8), 'children', False)
        # Obtaining the member 'append' of a type (line 3882)
        append_216716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3882, 8), children_216715, 'append')
        # Calling append(args, kwargs) (line 3882)
        append_call_result_216720 = invoke(stypy.reporting.localization.Localization(__file__, 3882, 8), append_216716, *[title_216718], **kwargs_216719)
        
        
        # Call to append(...): (line 3883)
        # Processing the call arguments (line 3883)
        # Getting the type of 'self' (line 3883)
        self_216723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3883, 24), 'self', False)
        # Obtaining the member '_left_title' of a type (line 3883)
        _left_title_216724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3883, 24), self_216723, '_left_title')
        # Processing the call keyword arguments (line 3883)
        kwargs_216725 = {}
        # Getting the type of 'children' (line 3883)
        children_216721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3883, 8), 'children', False)
        # Obtaining the member 'append' of a type (line 3883)
        append_216722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3883, 8), children_216721, 'append')
        # Calling append(args, kwargs) (line 3883)
        append_call_result_216726 = invoke(stypy.reporting.localization.Localization(__file__, 3883, 8), append_216722, *[_left_title_216724], **kwargs_216725)
        
        
        # Call to append(...): (line 3884)
        # Processing the call arguments (line 3884)
        # Getting the type of 'self' (line 3884)
        self_216729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3884, 24), 'self', False)
        # Obtaining the member '_right_title' of a type (line 3884)
        _right_title_216730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3884, 24), self_216729, '_right_title')
        # Processing the call keyword arguments (line 3884)
        kwargs_216731 = {}
        # Getting the type of 'children' (line 3884)
        children_216727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3884, 8), 'children', False)
        # Obtaining the member 'append' of a type (line 3884)
        append_216728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3884, 8), children_216727, 'append')
        # Calling append(args, kwargs) (line 3884)
        append_call_result_216732 = invoke(stypy.reporting.localization.Localization(__file__, 3884, 8), append_216728, *[_right_title_216730], **kwargs_216731)
        
        
        # Call to extend(...): (line 3885)
        # Processing the call arguments (line 3885)
        # Getting the type of 'self' (line 3885)
        self_216735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3885, 24), 'self', False)
        # Obtaining the member 'tables' of a type (line 3885)
        tables_216736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3885, 24), self_216735, 'tables')
        # Processing the call keyword arguments (line 3885)
        kwargs_216737 = {}
        # Getting the type of 'children' (line 3885)
        children_216733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3885, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 3885)
        extend_216734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3885, 8), children_216733, 'extend')
        # Calling extend(args, kwargs) (line 3885)
        extend_call_result_216738 = invoke(stypy.reporting.localization.Localization(__file__, 3885, 8), extend_216734, *[tables_216736], **kwargs_216737)
        
        
        # Call to extend(...): (line 3886)
        # Processing the call arguments (line 3886)
        # Getting the type of 'self' (line 3886)
        self_216741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3886, 24), 'self', False)
        # Obtaining the member 'images' of a type (line 3886)
        images_216742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3886, 24), self_216741, 'images')
        # Processing the call keyword arguments (line 3886)
        kwargs_216743 = {}
        # Getting the type of 'children' (line 3886)
        children_216739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3886, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 3886)
        extend_216740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3886, 8), children_216739, 'extend')
        # Calling extend(args, kwargs) (line 3886)
        extend_call_result_216744 = invoke(stypy.reporting.localization.Localization(__file__, 3886, 8), extend_216740, *[images_216742], **kwargs_216743)
        
        
        
        # Getting the type of 'self' (line 3887)
        self_216745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3887, 11), 'self')
        # Obtaining the member 'legend_' of a type (line 3887)
        legend__216746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3887, 11), self_216745, 'legend_')
        # Getting the type of 'None' (line 3887)
        None_216747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3887, 31), 'None')
        # Applying the binary operator 'isnot' (line 3887)
        result_is_not_216748 = python_operator(stypy.reporting.localization.Localization(__file__, 3887, 11), 'isnot', legend__216746, None_216747)
        
        # Testing the type of an if condition (line 3887)
        if_condition_216749 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3887, 8), result_is_not_216748)
        # Assigning a type to the variable 'if_condition_216749' (line 3887)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3887, 8), 'if_condition_216749', if_condition_216749)
        # SSA begins for if statement (line 3887)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 3888)
        # Processing the call arguments (line 3888)
        # Getting the type of 'self' (line 3888)
        self_216752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3888, 28), 'self', False)
        # Obtaining the member 'legend_' of a type (line 3888)
        legend__216753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3888, 28), self_216752, 'legend_')
        # Processing the call keyword arguments (line 3888)
        kwargs_216754 = {}
        # Getting the type of 'children' (line 3888)
        children_216750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3888, 12), 'children', False)
        # Obtaining the member 'append' of a type (line 3888)
        append_216751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3888, 12), children_216750, 'append')
        # Calling append(args, kwargs) (line 3888)
        append_call_result_216755 = invoke(stypy.reporting.localization.Localization(__file__, 3888, 12), append_216751, *[legend__216753], **kwargs_216754)
        
        # SSA join for if statement (line 3887)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 3889)
        # Processing the call arguments (line 3889)
        # Getting the type of 'self' (line 3889)
        self_216758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3889, 24), 'self', False)
        # Obtaining the member 'patch' of a type (line 3889)
        patch_216759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3889, 24), self_216758, 'patch')
        # Processing the call keyword arguments (line 3889)
        kwargs_216760 = {}
        # Getting the type of 'children' (line 3889)
        children_216756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3889, 8), 'children', False)
        # Obtaining the member 'append' of a type (line 3889)
        append_216757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3889, 8), children_216756, 'append')
        # Calling append(args, kwargs) (line 3889)
        append_call_result_216761 = invoke(stypy.reporting.localization.Localization(__file__, 3889, 8), append_216757, *[patch_216759], **kwargs_216760)
        
        # Getting the type of 'children' (line 3890)
        children_216762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3890, 15), 'children')
        # Assigning a type to the variable 'stypy_return_type' (line 3890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3890, 8), 'stypy_return_type', children_216762)
        
        # ################# End of 'get_children(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_children' in the type store
        # Getting the type of 'stypy_return_type' (line 3871)
        stypy_return_type_216763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3871, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_216763)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_children'
        return stypy_return_type_216763


    @norecursion
    def contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains'
        module_type_store = module_type_store.open_function_context('contains', 3892, 4, False)
        # Assigning a type to the variable 'self' (line 3893)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3893, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.contains.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.contains.__dict__.__setitem__('stypy_function_name', '_AxesBase.contains')
        _AxesBase.contains.__dict__.__setitem__('stypy_param_names_list', ['mouseevent'])
        _AxesBase.contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.contains.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.contains', ['mouseevent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains', localization, ['mouseevent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains(...)' code ##################

        unicode_216764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3897, (-1)), 'unicode', u'\n        Test whether the mouse event occurred in the axes.\n\n        Returns *True* / *False*, {}\n        ')
        
        
        # Call to callable(...): (line 3898)
        # Processing the call arguments (line 3898)
        # Getting the type of 'self' (line 3898)
        self_216766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3898, 20), 'self', False)
        # Obtaining the member '_contains' of a type (line 3898)
        _contains_216767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3898, 20), self_216766, '_contains')
        # Processing the call keyword arguments (line 3898)
        kwargs_216768 = {}
        # Getting the type of 'callable' (line 3898)
        callable_216765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3898, 11), 'callable', False)
        # Calling callable(args, kwargs) (line 3898)
        callable_call_result_216769 = invoke(stypy.reporting.localization.Localization(__file__, 3898, 11), callable_216765, *[_contains_216767], **kwargs_216768)
        
        # Testing the type of an if condition (line 3898)
        if_condition_216770 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3898, 8), callable_call_result_216769)
        # Assigning a type to the variable 'if_condition_216770' (line 3898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3898, 8), 'if_condition_216770', if_condition_216770)
        # SSA begins for if statement (line 3898)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _contains(...): (line 3899)
        # Processing the call arguments (line 3899)
        # Getting the type of 'self' (line 3899)
        self_216773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3899, 34), 'self', False)
        # Getting the type of 'mouseevent' (line 3899)
        mouseevent_216774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3899, 40), 'mouseevent', False)
        # Processing the call keyword arguments (line 3899)
        kwargs_216775 = {}
        # Getting the type of 'self' (line 3899)
        self_216771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3899, 19), 'self', False)
        # Obtaining the member '_contains' of a type (line 3899)
        _contains_216772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3899, 19), self_216771, '_contains')
        # Calling _contains(args, kwargs) (line 3899)
        _contains_call_result_216776 = invoke(stypy.reporting.localization.Localization(__file__, 3899, 19), _contains_216772, *[self_216773, mouseevent_216774], **kwargs_216775)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3899)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3899, 12), 'stypy_return_type', _contains_call_result_216776)
        # SSA join for if statement (line 3898)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to contains(...): (line 3900)
        # Processing the call arguments (line 3900)
        # Getting the type of 'mouseevent' (line 3900)
        mouseevent_216780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3900, 35), 'mouseevent', False)
        # Processing the call keyword arguments (line 3900)
        kwargs_216781 = {}
        # Getting the type of 'self' (line 3900)
        self_216777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3900, 15), 'self', False)
        # Obtaining the member 'patch' of a type (line 3900)
        patch_216778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3900, 15), self_216777, 'patch')
        # Obtaining the member 'contains' of a type (line 3900)
        contains_216779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3900, 15), patch_216778, 'contains')
        # Calling contains(args, kwargs) (line 3900)
        contains_call_result_216782 = invoke(stypy.reporting.localization.Localization(__file__, 3900, 15), contains_216779, *[mouseevent_216780], **kwargs_216781)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3900)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3900, 8), 'stypy_return_type', contains_call_result_216782)
        
        # ################# End of 'contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains' in the type store
        # Getting the type of 'stypy_return_type' (line 3892)
        stypy_return_type_216783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3892, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_216783)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains'
        return stypy_return_type_216783


    @norecursion
    def contains_point(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains_point'
        module_type_store = module_type_store.open_function_context('contains_point', 3902, 4, False)
        # Assigning a type to the variable 'self' (line 3903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3903, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.contains_point.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.contains_point.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.contains_point.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.contains_point.__dict__.__setitem__('stypy_function_name', '_AxesBase.contains_point')
        _AxesBase.contains_point.__dict__.__setitem__('stypy_param_names_list', ['point'])
        _AxesBase.contains_point.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.contains_point.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.contains_point.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.contains_point.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.contains_point.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.contains_point.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.contains_point', ['point'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains_point', localization, ['point'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains_point(...)' code ##################

        unicode_216784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3908, (-1)), 'unicode', u'\n        Returns *True* if the point (tuple of x,y) is inside the axes\n        (the area defined by the its patch). A pixel coordinate is\n        required.\n\n        ')
        
        # Call to contains_point(...): (line 3909)
        # Processing the call arguments (line 3909)
        # Getting the type of 'point' (line 3909)
        point_216788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3909, 41), 'point', False)
        # Processing the call keyword arguments (line 3909)
        float_216789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3909, 55), 'float')
        keyword_216790 = float_216789
        kwargs_216791 = {'radius': keyword_216790}
        # Getting the type of 'self' (line 3909)
        self_216785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3909, 15), 'self', False)
        # Obtaining the member 'patch' of a type (line 3909)
        patch_216786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3909, 15), self_216785, 'patch')
        # Obtaining the member 'contains_point' of a type (line 3909)
        contains_point_216787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3909, 15), patch_216786, 'contains_point')
        # Calling contains_point(args, kwargs) (line 3909)
        contains_point_call_result_216792 = invoke(stypy.reporting.localization.Localization(__file__, 3909, 15), contains_point_216787, *[point_216788], **kwargs_216791)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3909)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3909, 8), 'stypy_return_type', contains_point_call_result_216792)
        
        # ################# End of 'contains_point(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains_point' in the type store
        # Getting the type of 'stypy_return_type' (line 3902)
        stypy_return_type_216793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3902, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_216793)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains_point'
        return stypy_return_type_216793


    @norecursion
    def pick(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pick'
        module_type_store = module_type_store.open_function_context('pick', 3911, 4, False)
        # Assigning a type to the variable 'self' (line 3912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3912, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.pick.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.pick.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.pick.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.pick.__dict__.__setitem__('stypy_function_name', '_AxesBase.pick')
        _AxesBase.pick.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.pick.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _AxesBase.pick.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.pick.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.pick.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.pick.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.pick.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.pick', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pick', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pick(...)' code ##################

        unicode_216794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3920, (-1)), 'unicode', u'Trigger pick event\n\n        Call signature::\n\n            pick(mouseevent)\n\n        each child artist will fire a pick event if mouseevent is over\n        the artist and the artist has picker set\n        ')
        
        # Call to pick(...): (line 3921)
        # Processing the call arguments (line 3921)
        # Getting the type of 'self' (line 3921)
        self_216798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3921, 28), 'self', False)
        
        # Obtaining the type of the subscript
        int_216799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3921, 39), 'int')
        # Getting the type of 'args' (line 3921)
        args_216800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3921, 34), 'args', False)
        # Obtaining the member '__getitem__' of a type (line 3921)
        getitem___216801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3921, 34), args_216800, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3921)
        subscript_call_result_216802 = invoke(stypy.reporting.localization.Localization(__file__, 3921, 34), getitem___216801, int_216799)
        
        # Processing the call keyword arguments (line 3921)
        kwargs_216803 = {}
        # Getting the type of 'martist' (line 3921)
        martist_216795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3921, 8), 'martist', False)
        # Obtaining the member 'Artist' of a type (line 3921)
        Artist_216796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3921, 8), martist_216795, 'Artist')
        # Obtaining the member 'pick' of a type (line 3921)
        pick_216797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3921, 8), Artist_216796, 'pick')
        # Calling pick(args, kwargs) (line 3921)
        pick_call_result_216804 = invoke(stypy.reporting.localization.Localization(__file__, 3921, 8), pick_216797, *[self_216798, subscript_call_result_216802], **kwargs_216803)
        
        
        # ################# End of 'pick(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pick' in the type store
        # Getting the type of 'stypy_return_type' (line 3911)
        stypy_return_type_216805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3911, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_216805)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pick'
        return stypy_return_type_216805


    @norecursion
    def get_default_bbox_extra_artists(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_default_bbox_extra_artists'
        module_type_store = module_type_store.open_function_context('get_default_bbox_extra_artists', 3923, 4, False)
        # Assigning a type to the variable 'self' (line 3924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3924, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_default_bbox_extra_artists')
        _AxesBase.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_default_bbox_extra_artists', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_default_bbox_extra_artists', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_default_bbox_extra_artists(...)' code ##################

        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to get_children(...): (line 3924)
        # Processing the call keyword arguments (line 3924)
        kwargs_216813 = {}
        # Getting the type of 'self' (line 3924)
        self_216811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3924, 37), 'self', False)
        # Obtaining the member 'get_children' of a type (line 3924)
        get_children_216812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3924, 37), self_216811, 'get_children')
        # Calling get_children(args, kwargs) (line 3924)
        get_children_call_result_216814 = invoke(stypy.reporting.localization.Localization(__file__, 3924, 37), get_children_216812, *[], **kwargs_216813)
        
        comprehension_216815 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3924, 16), get_children_call_result_216814)
        # Assigning a type to the variable 'artist' (line 3924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3924, 16), 'artist', comprehension_216815)
        
        # Call to get_visible(...): (line 3925)
        # Processing the call keyword arguments (line 3925)
        kwargs_216809 = {}
        # Getting the type of 'artist' (line 3925)
        artist_216807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3925, 19), 'artist', False)
        # Obtaining the member 'get_visible' of a type (line 3925)
        get_visible_216808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3925, 19), artist_216807, 'get_visible')
        # Calling get_visible(args, kwargs) (line 3925)
        get_visible_call_result_216810 = invoke(stypy.reporting.localization.Localization(__file__, 3925, 19), get_visible_216808, *[], **kwargs_216809)
        
        # Getting the type of 'artist' (line 3924)
        artist_216806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3924, 16), 'artist')
        list_216816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3924, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3924, 16), list_216816, artist_216806)
        # Assigning a type to the variable 'stypy_return_type' (line 3924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3924, 8), 'stypy_return_type', list_216816)
        
        # ################# End of 'get_default_bbox_extra_artists(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_default_bbox_extra_artists' in the type store
        # Getting the type of 'stypy_return_type' (line 3923)
        stypy_return_type_216817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_216817)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_default_bbox_extra_artists'
        return stypy_return_type_216817


    @norecursion
    def get_tightbbox(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 3927)
        True_216818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3927, 56), 'True')
        defaults = [True_216818]
        # Create a new context for function 'get_tightbbox'
        module_type_store = module_type_store.open_function_context('get_tightbbox', 3927, 4, False)
        # Assigning a type to the variable 'self' (line 3928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3928, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_tightbbox.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_tightbbox.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_tightbbox.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_tightbbox.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_tightbbox')
        _AxesBase.get_tightbbox.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'call_axes_locator'])
        _AxesBase.get_tightbbox.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_tightbbox.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_tightbbox.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_tightbbox.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_tightbbox.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_tightbbox.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_tightbbox', ['renderer', 'call_axes_locator'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_tightbbox', localization, ['renderer', 'call_axes_locator'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_tightbbox(...)' code ##################

        unicode_216819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3937, (-1)), 'unicode', u'\n        Return the tight bounding box of the axes.\n        The dimension of the Bbox in canvas coordinate.\n\n        If *call_axes_locator* is *False*, it does not call the\n        _axes_locator attribute, which is necessary to get the correct\n        bounding box. ``call_axes_locator==False`` can be used if the\n        caller is only intereted in the relative size of the tightbbox\n        compared to the axes bbox.\n        ')
        
        # Assigning a List to a Name (line 3939):
        
        # Assigning a List to a Name (line 3939):
        
        # Obtaining an instance of the builtin type 'list' (line 3939)
        list_216820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3939, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3939)
        
        # Assigning a type to the variable 'bb' (line 3939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3939, 8), 'bb', list_216820)
        
        
        
        # Call to get_visible(...): (line 3941)
        # Processing the call keyword arguments (line 3941)
        kwargs_216823 = {}
        # Getting the type of 'self' (line 3941)
        self_216821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3941, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 3941)
        get_visible_216822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3941, 15), self_216821, 'get_visible')
        # Calling get_visible(args, kwargs) (line 3941)
        get_visible_call_result_216824 = invoke(stypy.reporting.localization.Localization(__file__, 3941, 15), get_visible_216822, *[], **kwargs_216823)
        
        # Applying the 'not' unary operator (line 3941)
        result_not__216825 = python_operator(stypy.reporting.localization.Localization(__file__, 3941, 11), 'not', get_visible_call_result_216824)
        
        # Testing the type of an if condition (line 3941)
        if_condition_216826 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3941, 8), result_not__216825)
        # Assigning a type to the variable 'if_condition_216826' (line 3941)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3941, 8), 'if_condition_216826', if_condition_216826)
        # SSA begins for if statement (line 3941)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'None' (line 3942)
        None_216827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3942, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 3942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3942, 12), 'stypy_return_type', None_216827)
        # SSA join for if statement (line 3941)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3944):
        
        # Assigning a Call to a Name (line 3944):
        
        # Call to get_axes_locator(...): (line 3944)
        # Processing the call keyword arguments (line 3944)
        kwargs_216830 = {}
        # Getting the type of 'self' (line 3944)
        self_216828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3944, 18), 'self', False)
        # Obtaining the member 'get_axes_locator' of a type (line 3944)
        get_axes_locator_216829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3944, 18), self_216828, 'get_axes_locator')
        # Calling get_axes_locator(args, kwargs) (line 3944)
        get_axes_locator_call_result_216831 = invoke(stypy.reporting.localization.Localization(__file__, 3944, 18), get_axes_locator_216829, *[], **kwargs_216830)
        
        # Assigning a type to the variable 'locator' (line 3944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3944, 8), 'locator', get_axes_locator_call_result_216831)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'locator' (line 3945)
        locator_216832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3945, 11), 'locator')
        # Getting the type of 'call_axes_locator' (line 3945)
        call_axes_locator_216833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3945, 23), 'call_axes_locator')
        # Applying the binary operator 'and' (line 3945)
        result_and_keyword_216834 = python_operator(stypy.reporting.localization.Localization(__file__, 3945, 11), 'and', locator_216832, call_axes_locator_216833)
        
        # Testing the type of an if condition (line 3945)
        if_condition_216835 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3945, 8), result_and_keyword_216834)
        # Assigning a type to the variable 'if_condition_216835' (line 3945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3945, 8), 'if_condition_216835', if_condition_216835)
        # SSA begins for if statement (line 3945)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 3946):
        
        # Assigning a Call to a Name (line 3946):
        
        # Call to locator(...): (line 3946)
        # Processing the call arguments (line 3946)
        # Getting the type of 'self' (line 3946)
        self_216837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3946, 26), 'self', False)
        # Getting the type of 'renderer' (line 3946)
        renderer_216838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3946, 32), 'renderer', False)
        # Processing the call keyword arguments (line 3946)
        kwargs_216839 = {}
        # Getting the type of 'locator' (line 3946)
        locator_216836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3946, 18), 'locator', False)
        # Calling locator(args, kwargs) (line 3946)
        locator_call_result_216840 = invoke(stypy.reporting.localization.Localization(__file__, 3946, 18), locator_216836, *[self_216837, renderer_216838], **kwargs_216839)
        
        # Assigning a type to the variable 'pos' (line 3946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3946, 12), 'pos', locator_call_result_216840)
        
        # Call to apply_aspect(...): (line 3947)
        # Processing the call arguments (line 3947)
        # Getting the type of 'pos' (line 3947)
        pos_216843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3947, 30), 'pos', False)
        # Processing the call keyword arguments (line 3947)
        kwargs_216844 = {}
        # Getting the type of 'self' (line 3947)
        self_216841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3947, 12), 'self', False)
        # Obtaining the member 'apply_aspect' of a type (line 3947)
        apply_aspect_216842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3947, 12), self_216841, 'apply_aspect')
        # Calling apply_aspect(args, kwargs) (line 3947)
        apply_aspect_call_result_216845 = invoke(stypy.reporting.localization.Localization(__file__, 3947, 12), apply_aspect_216842, *[pos_216843], **kwargs_216844)
        
        # SSA branch for the else part of an if statement (line 3945)
        module_type_store.open_ssa_branch('else')
        
        # Call to apply_aspect(...): (line 3949)
        # Processing the call keyword arguments (line 3949)
        kwargs_216848 = {}
        # Getting the type of 'self' (line 3949)
        self_216846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3949, 12), 'self', False)
        # Obtaining the member 'apply_aspect' of a type (line 3949)
        apply_aspect_216847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3949, 12), self_216846, 'apply_aspect')
        # Calling apply_aspect(args, kwargs) (line 3949)
        apply_aspect_call_result_216849 = invoke(stypy.reporting.localization.Localization(__file__, 3949, 12), apply_aspect_216847, *[], **kwargs_216848)
        
        # SSA join for if statement (line 3945)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 3951)
        # Processing the call arguments (line 3951)
        
        # Call to get_window_extent(...): (line 3951)
        # Processing the call arguments (line 3951)
        # Getting the type of 'renderer' (line 3951)
        renderer_216854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3951, 41), 'renderer', False)
        # Processing the call keyword arguments (line 3951)
        kwargs_216855 = {}
        # Getting the type of 'self' (line 3951)
        self_216852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3951, 18), 'self', False)
        # Obtaining the member 'get_window_extent' of a type (line 3951)
        get_window_extent_216853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3951, 18), self_216852, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 3951)
        get_window_extent_call_result_216856 = invoke(stypy.reporting.localization.Localization(__file__, 3951, 18), get_window_extent_216853, *[renderer_216854], **kwargs_216855)
        
        # Processing the call keyword arguments (line 3951)
        kwargs_216857 = {}
        # Getting the type of 'bb' (line 3951)
        bb_216850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3951, 8), 'bb', False)
        # Obtaining the member 'append' of a type (line 3951)
        append_216851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3951, 8), bb_216850, 'append')
        # Calling append(args, kwargs) (line 3951)
        append_call_result_216858 = invoke(stypy.reporting.localization.Localization(__file__, 3951, 8), append_216851, *[get_window_extent_call_result_216856], **kwargs_216857)
        
        
        
        # Call to get_visible(...): (line 3953)
        # Processing the call keyword arguments (line 3953)
        kwargs_216862 = {}
        # Getting the type of 'self' (line 3953)
        self_216859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3953, 11), 'self', False)
        # Obtaining the member 'title' of a type (line 3953)
        title_216860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3953, 11), self_216859, 'title')
        # Obtaining the member 'get_visible' of a type (line 3953)
        get_visible_216861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3953, 11), title_216860, 'get_visible')
        # Calling get_visible(args, kwargs) (line 3953)
        get_visible_call_result_216863 = invoke(stypy.reporting.localization.Localization(__file__, 3953, 11), get_visible_216861, *[], **kwargs_216862)
        
        # Testing the type of an if condition (line 3953)
        if_condition_216864 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3953, 8), get_visible_call_result_216863)
        # Assigning a type to the variable 'if_condition_216864' (line 3953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3953, 8), 'if_condition_216864', if_condition_216864)
        # SSA begins for if statement (line 3953)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 3954)
        # Processing the call arguments (line 3954)
        
        # Call to get_window_extent(...): (line 3954)
        # Processing the call arguments (line 3954)
        # Getting the type of 'renderer' (line 3954)
        renderer_216870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3954, 51), 'renderer', False)
        # Processing the call keyword arguments (line 3954)
        kwargs_216871 = {}
        # Getting the type of 'self' (line 3954)
        self_216867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3954, 22), 'self', False)
        # Obtaining the member 'title' of a type (line 3954)
        title_216868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3954, 22), self_216867, 'title')
        # Obtaining the member 'get_window_extent' of a type (line 3954)
        get_window_extent_216869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3954, 22), title_216868, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 3954)
        get_window_extent_call_result_216872 = invoke(stypy.reporting.localization.Localization(__file__, 3954, 22), get_window_extent_216869, *[renderer_216870], **kwargs_216871)
        
        # Processing the call keyword arguments (line 3954)
        kwargs_216873 = {}
        # Getting the type of 'bb' (line 3954)
        bb_216865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3954, 12), 'bb', False)
        # Obtaining the member 'append' of a type (line 3954)
        append_216866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3954, 12), bb_216865, 'append')
        # Calling append(args, kwargs) (line 3954)
        append_call_result_216874 = invoke(stypy.reporting.localization.Localization(__file__, 3954, 12), append_216866, *[get_window_extent_call_result_216872], **kwargs_216873)
        
        # SSA join for if statement (line 3953)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to get_visible(...): (line 3955)
        # Processing the call keyword arguments (line 3955)
        kwargs_216878 = {}
        # Getting the type of 'self' (line 3955)
        self_216875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3955, 11), 'self', False)
        # Obtaining the member '_left_title' of a type (line 3955)
        _left_title_216876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3955, 11), self_216875, '_left_title')
        # Obtaining the member 'get_visible' of a type (line 3955)
        get_visible_216877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3955, 11), _left_title_216876, 'get_visible')
        # Calling get_visible(args, kwargs) (line 3955)
        get_visible_call_result_216879 = invoke(stypy.reporting.localization.Localization(__file__, 3955, 11), get_visible_216877, *[], **kwargs_216878)
        
        # Testing the type of an if condition (line 3955)
        if_condition_216880 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3955, 8), get_visible_call_result_216879)
        # Assigning a type to the variable 'if_condition_216880' (line 3955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3955, 8), 'if_condition_216880', if_condition_216880)
        # SSA begins for if statement (line 3955)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 3956)
        # Processing the call arguments (line 3956)
        
        # Call to get_window_extent(...): (line 3956)
        # Processing the call arguments (line 3956)
        # Getting the type of 'renderer' (line 3956)
        renderer_216886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3956, 57), 'renderer', False)
        # Processing the call keyword arguments (line 3956)
        kwargs_216887 = {}
        # Getting the type of 'self' (line 3956)
        self_216883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3956, 22), 'self', False)
        # Obtaining the member '_left_title' of a type (line 3956)
        _left_title_216884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3956, 22), self_216883, '_left_title')
        # Obtaining the member 'get_window_extent' of a type (line 3956)
        get_window_extent_216885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3956, 22), _left_title_216884, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 3956)
        get_window_extent_call_result_216888 = invoke(stypy.reporting.localization.Localization(__file__, 3956, 22), get_window_extent_216885, *[renderer_216886], **kwargs_216887)
        
        # Processing the call keyword arguments (line 3956)
        kwargs_216889 = {}
        # Getting the type of 'bb' (line 3956)
        bb_216881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3956, 12), 'bb', False)
        # Obtaining the member 'append' of a type (line 3956)
        append_216882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3956, 12), bb_216881, 'append')
        # Calling append(args, kwargs) (line 3956)
        append_call_result_216890 = invoke(stypy.reporting.localization.Localization(__file__, 3956, 12), append_216882, *[get_window_extent_call_result_216888], **kwargs_216889)
        
        # SSA join for if statement (line 3955)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to get_visible(...): (line 3957)
        # Processing the call keyword arguments (line 3957)
        kwargs_216894 = {}
        # Getting the type of 'self' (line 3957)
        self_216891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3957, 11), 'self', False)
        # Obtaining the member '_right_title' of a type (line 3957)
        _right_title_216892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3957, 11), self_216891, '_right_title')
        # Obtaining the member 'get_visible' of a type (line 3957)
        get_visible_216893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3957, 11), _right_title_216892, 'get_visible')
        # Calling get_visible(args, kwargs) (line 3957)
        get_visible_call_result_216895 = invoke(stypy.reporting.localization.Localization(__file__, 3957, 11), get_visible_216893, *[], **kwargs_216894)
        
        # Testing the type of an if condition (line 3957)
        if_condition_216896 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3957, 8), get_visible_call_result_216895)
        # Assigning a type to the variable 'if_condition_216896' (line 3957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3957, 8), 'if_condition_216896', if_condition_216896)
        # SSA begins for if statement (line 3957)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 3958)
        # Processing the call arguments (line 3958)
        
        # Call to get_window_extent(...): (line 3958)
        # Processing the call arguments (line 3958)
        # Getting the type of 'renderer' (line 3958)
        renderer_216902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3958, 58), 'renderer', False)
        # Processing the call keyword arguments (line 3958)
        kwargs_216903 = {}
        # Getting the type of 'self' (line 3958)
        self_216899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3958, 22), 'self', False)
        # Obtaining the member '_right_title' of a type (line 3958)
        _right_title_216900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3958, 22), self_216899, '_right_title')
        # Obtaining the member 'get_window_extent' of a type (line 3958)
        get_window_extent_216901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3958, 22), _right_title_216900, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 3958)
        get_window_extent_call_result_216904 = invoke(stypy.reporting.localization.Localization(__file__, 3958, 22), get_window_extent_216901, *[renderer_216902], **kwargs_216903)
        
        # Processing the call keyword arguments (line 3958)
        kwargs_216905 = {}
        # Getting the type of 'bb' (line 3958)
        bb_216897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3958, 12), 'bb', False)
        # Obtaining the member 'append' of a type (line 3958)
        append_216898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3958, 12), bb_216897, 'append')
        # Calling append(args, kwargs) (line 3958)
        append_call_result_216906 = invoke(stypy.reporting.localization.Localization(__file__, 3958, 12), append_216898, *[get_window_extent_call_result_216904], **kwargs_216905)
        
        # SSA join for if statement (line 3957)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3960):
        
        # Assigning a Call to a Name (line 3960):
        
        # Call to get_tightbbox(...): (line 3960)
        # Processing the call arguments (line 3960)
        # Getting the type of 'renderer' (line 3960)
        renderer_216910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3960, 44), 'renderer', False)
        # Processing the call keyword arguments (line 3960)
        kwargs_216911 = {}
        # Getting the type of 'self' (line 3960)
        self_216907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3960, 19), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 3960)
        xaxis_216908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3960, 19), self_216907, 'xaxis')
        # Obtaining the member 'get_tightbbox' of a type (line 3960)
        get_tightbbox_216909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3960, 19), xaxis_216908, 'get_tightbbox')
        # Calling get_tightbbox(args, kwargs) (line 3960)
        get_tightbbox_call_result_216912 = invoke(stypy.reporting.localization.Localization(__file__, 3960, 19), get_tightbbox_216909, *[renderer_216910], **kwargs_216911)
        
        # Assigning a type to the variable 'bb_xaxis' (line 3960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3960, 8), 'bb_xaxis', get_tightbbox_call_result_216912)
        
        # Getting the type of 'bb_xaxis' (line 3961)
        bb_xaxis_216913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3961, 11), 'bb_xaxis')
        # Testing the type of an if condition (line 3961)
        if_condition_216914 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3961, 8), bb_xaxis_216913)
        # Assigning a type to the variable 'if_condition_216914' (line 3961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3961, 8), 'if_condition_216914', if_condition_216914)
        # SSA begins for if statement (line 3961)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 3962)
        # Processing the call arguments (line 3962)
        # Getting the type of 'bb_xaxis' (line 3962)
        bb_xaxis_216917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3962, 22), 'bb_xaxis', False)
        # Processing the call keyword arguments (line 3962)
        kwargs_216918 = {}
        # Getting the type of 'bb' (line 3962)
        bb_216915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3962, 12), 'bb', False)
        # Obtaining the member 'append' of a type (line 3962)
        append_216916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3962, 12), bb_216915, 'append')
        # Calling append(args, kwargs) (line 3962)
        append_call_result_216919 = invoke(stypy.reporting.localization.Localization(__file__, 3962, 12), append_216916, *[bb_xaxis_216917], **kwargs_216918)
        
        # SSA join for if statement (line 3961)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3964):
        
        # Assigning a Call to a Name (line 3964):
        
        # Call to get_tightbbox(...): (line 3964)
        # Processing the call arguments (line 3964)
        # Getting the type of 'renderer' (line 3964)
        renderer_216923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3964, 44), 'renderer', False)
        # Processing the call keyword arguments (line 3964)
        kwargs_216924 = {}
        # Getting the type of 'self' (line 3964)
        self_216920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3964, 19), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 3964)
        yaxis_216921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3964, 19), self_216920, 'yaxis')
        # Obtaining the member 'get_tightbbox' of a type (line 3964)
        get_tightbbox_216922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3964, 19), yaxis_216921, 'get_tightbbox')
        # Calling get_tightbbox(args, kwargs) (line 3964)
        get_tightbbox_call_result_216925 = invoke(stypy.reporting.localization.Localization(__file__, 3964, 19), get_tightbbox_216922, *[renderer_216923], **kwargs_216924)
        
        # Assigning a type to the variable 'bb_yaxis' (line 3964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3964, 8), 'bb_yaxis', get_tightbbox_call_result_216925)
        
        # Getting the type of 'bb_yaxis' (line 3965)
        bb_yaxis_216926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3965, 11), 'bb_yaxis')
        # Testing the type of an if condition (line 3965)
        if_condition_216927 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3965, 8), bb_yaxis_216926)
        # Assigning a type to the variable 'if_condition_216927' (line 3965)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3965, 8), 'if_condition_216927', if_condition_216927)
        # SSA begins for if statement (line 3965)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 3966)
        # Processing the call arguments (line 3966)
        # Getting the type of 'bb_yaxis' (line 3966)
        bb_yaxis_216930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3966, 22), 'bb_yaxis', False)
        # Processing the call keyword arguments (line 3966)
        kwargs_216931 = {}
        # Getting the type of 'bb' (line 3966)
        bb_216928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3966, 12), 'bb', False)
        # Obtaining the member 'append' of a type (line 3966)
        append_216929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3966, 12), bb_216928, 'append')
        # Calling append(args, kwargs) (line 3966)
        append_call_result_216932 = invoke(stypy.reporting.localization.Localization(__file__, 3966, 12), append_216929, *[bb_yaxis_216930], **kwargs_216931)
        
        # SSA join for if statement (line 3965)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to get_children(...): (line 3968)
        # Processing the call keyword arguments (line 3968)
        kwargs_216935 = {}
        # Getting the type of 'self' (line 3968)
        self_216933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3968, 21), 'self', False)
        # Obtaining the member 'get_children' of a type (line 3968)
        get_children_216934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3968, 21), self_216933, 'get_children')
        # Calling get_children(args, kwargs) (line 3968)
        get_children_call_result_216936 = invoke(stypy.reporting.localization.Localization(__file__, 3968, 21), get_children_216934, *[], **kwargs_216935)
        
        # Testing the type of a for loop iterable (line 3968)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3968, 8), get_children_call_result_216936)
        # Getting the type of the for loop variable (line 3968)
        for_loop_var_216937 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3968, 8), get_children_call_result_216936)
        # Assigning a type to the variable 'child' (line 3968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3968, 8), 'child', for_loop_var_216937)
        # SSA begins for a for statement (line 3968)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 3969)
        # Processing the call arguments (line 3969)
        # Getting the type of 'child' (line 3969)
        child_216939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3969, 26), 'child', False)
        # Getting the type of 'OffsetBox' (line 3969)
        OffsetBox_216940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3969, 33), 'OffsetBox', False)
        # Processing the call keyword arguments (line 3969)
        kwargs_216941 = {}
        # Getting the type of 'isinstance' (line 3969)
        isinstance_216938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3969, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 3969)
        isinstance_call_result_216942 = invoke(stypy.reporting.localization.Localization(__file__, 3969, 15), isinstance_216938, *[child_216939, OffsetBox_216940], **kwargs_216941)
        
        
        # Call to get_visible(...): (line 3969)
        # Processing the call keyword arguments (line 3969)
        kwargs_216945 = {}
        # Getting the type of 'child' (line 3969)
        child_216943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3969, 48), 'child', False)
        # Obtaining the member 'get_visible' of a type (line 3969)
        get_visible_216944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3969, 48), child_216943, 'get_visible')
        # Calling get_visible(args, kwargs) (line 3969)
        get_visible_call_result_216946 = invoke(stypy.reporting.localization.Localization(__file__, 3969, 48), get_visible_216944, *[], **kwargs_216945)
        
        # Applying the binary operator 'and' (line 3969)
        result_and_keyword_216947 = python_operator(stypy.reporting.localization.Localization(__file__, 3969, 15), 'and', isinstance_call_result_216942, get_visible_call_result_216946)
        
        # Testing the type of an if condition (line 3969)
        if_condition_216948 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3969, 12), result_and_keyword_216947)
        # Assigning a type to the variable 'if_condition_216948' (line 3969)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3969, 12), 'if_condition_216948', if_condition_216948)
        # SSA begins for if statement (line 3969)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 3970)
        # Processing the call arguments (line 3970)
        
        # Call to get_window_extent(...): (line 3970)
        # Processing the call arguments (line 3970)
        # Getting the type of 'renderer' (line 3970)
        renderer_216953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3970, 50), 'renderer', False)
        # Processing the call keyword arguments (line 3970)
        kwargs_216954 = {}
        # Getting the type of 'child' (line 3970)
        child_216951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3970, 26), 'child', False)
        # Obtaining the member 'get_window_extent' of a type (line 3970)
        get_window_extent_216952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3970, 26), child_216951, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 3970)
        get_window_extent_call_result_216955 = invoke(stypy.reporting.localization.Localization(__file__, 3970, 26), get_window_extent_216952, *[renderer_216953], **kwargs_216954)
        
        # Processing the call keyword arguments (line 3970)
        kwargs_216956 = {}
        # Getting the type of 'bb' (line 3970)
        bb_216949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3970, 16), 'bb', False)
        # Obtaining the member 'append' of a type (line 3970)
        append_216950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3970, 16), bb_216949, 'append')
        # Calling append(args, kwargs) (line 3970)
        append_call_result_216957 = invoke(stypy.reporting.localization.Localization(__file__, 3970, 16), append_216950, *[get_window_extent_call_result_216955], **kwargs_216956)
        
        # SSA join for if statement (line 3969)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3972):
        
        # Assigning a Call to a Name (line 3972):
        
        # Call to union(...): (line 3972)
        # Processing the call arguments (line 3972)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'bb' (line 3973)
        bb_216971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3973, 24), 'bb', False)
        comprehension_216972 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3973, 13), bb_216971)
        # Assigning a type to the variable 'b' (line 3973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3973, 13), 'b', comprehension_216972)
        
        # Evaluating a boolean operation
        
        # Getting the type of 'b' (line 3973)
        b_216962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3973, 30), 'b', False)
        # Obtaining the member 'width' of a type (line 3973)
        width_216963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3973, 30), b_216962, 'width')
        int_216964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3973, 41), 'int')
        # Applying the binary operator '!=' (line 3973)
        result_ne_216965 = python_operator(stypy.reporting.localization.Localization(__file__, 3973, 30), '!=', width_216963, int_216964)
        
        
        # Getting the type of 'b' (line 3973)
        b_216966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3973, 46), 'b', False)
        # Obtaining the member 'height' of a type (line 3973)
        height_216967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3973, 46), b_216966, 'height')
        int_216968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3973, 58), 'int')
        # Applying the binary operator '!=' (line 3973)
        result_ne_216969 = python_operator(stypy.reporting.localization.Localization(__file__, 3973, 46), '!=', height_216967, int_216968)
        
        # Applying the binary operator 'or' (line 3973)
        result_or_keyword_216970 = python_operator(stypy.reporting.localization.Localization(__file__, 3973, 30), 'or', result_ne_216965, result_ne_216969)
        
        # Getting the type of 'b' (line 3973)
        b_216961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3973, 13), 'b', False)
        list_216973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3973, 13), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3973, 13), list_216973, b_216961)
        # Processing the call keyword arguments (line 3972)
        kwargs_216974 = {}
        # Getting the type of 'mtransforms' (line 3972)
        mtransforms_216958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3972, 16), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 3972)
        Bbox_216959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3972, 16), mtransforms_216958, 'Bbox')
        # Obtaining the member 'union' of a type (line 3972)
        union_216960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3972, 16), Bbox_216959, 'union')
        # Calling union(args, kwargs) (line 3972)
        union_call_result_216975 = invoke(stypy.reporting.localization.Localization(__file__, 3972, 16), union_216960, *[list_216973], **kwargs_216974)
        
        # Assigning a type to the variable '_bbox' (line 3972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3972, 8), '_bbox', union_call_result_216975)
        # Getting the type of '_bbox' (line 3975)
        _bbox_216976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3975, 15), '_bbox')
        # Assigning a type to the variable 'stypy_return_type' (line 3975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3975, 8), 'stypy_return_type', _bbox_216976)
        
        # ################# End of 'get_tightbbox(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_tightbbox' in the type store
        # Getting the type of 'stypy_return_type' (line 3927)
        stypy_return_type_216977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3927, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_216977)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_tightbbox'
        return stypy_return_type_216977


    @norecursion
    def _make_twin_axes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_make_twin_axes'
        module_type_store = module_type_store.open_function_context('_make_twin_axes', 3977, 4, False)
        # Assigning a type to the variable 'self' (line 3978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3978, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase._make_twin_axes.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase._make_twin_axes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase._make_twin_axes.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase._make_twin_axes.__dict__.__setitem__('stypy_function_name', '_AxesBase._make_twin_axes')
        _AxesBase._make_twin_axes.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase._make_twin_axes.__dict__.__setitem__('stypy_varargs_param_name', 'kl')
        _AxesBase._make_twin_axes.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _AxesBase._make_twin_axes.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase._make_twin_axes.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase._make_twin_axes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase._make_twin_axes.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase._make_twin_axes', [], 'kl', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_make_twin_axes', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_make_twin_axes(...)' code ##################

        unicode_216978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3980, (-1)), 'unicode', u'\n        make a twinx axes of self. This is used for twinx and twiny.\n        ')
        
        # Assigning a Call to a Name (line 3981):
        
        # Assigning a Call to a Name (line 3981):
        
        # Call to add_axes(...): (line 3981)
        # Processing the call arguments (line 3981)
        
        # Call to get_position(...): (line 3981)
        # Processing the call arguments (line 3981)
        # Getting the type of 'True' (line 3981)
        True_216984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3981, 53), 'True', False)
        # Processing the call keyword arguments (line 3981)
        kwargs_216985 = {}
        # Getting the type of 'self' (line 3981)
        self_216982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3981, 35), 'self', False)
        # Obtaining the member 'get_position' of a type (line 3981)
        get_position_216983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3981, 35), self_216982, 'get_position')
        # Calling get_position(args, kwargs) (line 3981)
        get_position_call_result_216986 = invoke(stypy.reporting.localization.Localization(__file__, 3981, 35), get_position_216983, *[True_216984], **kwargs_216985)
        
        # Getting the type of 'kl' (line 3981)
        kl_216987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3981, 61), 'kl', False)
        # Processing the call keyword arguments (line 3981)
        # Getting the type of 'kwargs' (line 3981)
        kwargs_216988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3981, 67), 'kwargs', False)
        kwargs_216989 = {'kwargs_216988': kwargs_216988}
        # Getting the type of 'self' (line 3981)
        self_216979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3981, 14), 'self', False)
        # Obtaining the member 'figure' of a type (line 3981)
        figure_216980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3981, 14), self_216979, 'figure')
        # Obtaining the member 'add_axes' of a type (line 3981)
        add_axes_216981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3981, 14), figure_216980, 'add_axes')
        # Calling add_axes(args, kwargs) (line 3981)
        add_axes_call_result_216990 = invoke(stypy.reporting.localization.Localization(__file__, 3981, 14), add_axes_216981, *[get_position_call_result_216986, kl_216987], **kwargs_216989)
        
        # Assigning a type to the variable 'ax2' (line 3981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3981, 8), 'ax2', add_axes_call_result_216990)
        # Getting the type of 'ax2' (line 3982)
        ax2_216991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3982, 15), 'ax2')
        # Assigning a type to the variable 'stypy_return_type' (line 3982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3982, 8), 'stypy_return_type', ax2_216991)
        
        # ################# End of '_make_twin_axes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_make_twin_axes' in the type store
        # Getting the type of 'stypy_return_type' (line 3977)
        stypy_return_type_216992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3977, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_216992)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_make_twin_axes'
        return stypy_return_type_216992


    @norecursion
    def twinx(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'twinx'
        module_type_store = module_type_store.open_function_context('twinx', 3984, 4, False)
        # Assigning a type to the variable 'self' (line 3985)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3985, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.twinx.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.twinx.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.twinx.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.twinx.__dict__.__setitem__('stypy_function_name', '_AxesBase.twinx')
        _AxesBase.twinx.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.twinx.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.twinx.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.twinx.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.twinx.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.twinx.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.twinx.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.twinx', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'twinx', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'twinx(...)' code ##################

        unicode_216993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4003, (-1)), 'unicode', u"\n        Create a twin Axes sharing the xaxis\n\n        Create a new Axes instance with an invisible x-axis and an independent\n        y-axis positioned opposite to the original one (i.e. at right). The\n        x-axis autoscale setting will be inherited from the original Axes.\n        To ensure that the tick marks of both y-axes align, see\n        `~matplotlib.ticker.LinearLocator`\n\n        Returns\n        -------\n        ax_twin : Axes\n            The newly created Axes instance\n\n        Notes\n        -----\n        For those who are 'picking' artists while using twinx, pick\n        events are only called for the artists in the top-most axes.\n        ")
        
        # Assigning a Call to a Name (line 4004):
        
        # Assigning a Call to a Name (line 4004):
        
        # Call to _make_twin_axes(...): (line 4004)
        # Processing the call keyword arguments (line 4004)
        # Getting the type of 'self' (line 4004)
        self_216996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4004, 42), 'self', False)
        keyword_216997 = self_216996
        kwargs_216998 = {'sharex': keyword_216997}
        # Getting the type of 'self' (line 4004)
        self_216994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4004, 14), 'self', False)
        # Obtaining the member '_make_twin_axes' of a type (line 4004)
        _make_twin_axes_216995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4004, 14), self_216994, '_make_twin_axes')
        # Calling _make_twin_axes(args, kwargs) (line 4004)
        _make_twin_axes_call_result_216999 = invoke(stypy.reporting.localization.Localization(__file__, 4004, 14), _make_twin_axes_216995, *[], **kwargs_216998)
        
        # Assigning a type to the variable 'ax2' (line 4004)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4004, 8), 'ax2', _make_twin_axes_call_result_216999)
        
        # Call to tick_right(...): (line 4005)
        # Processing the call keyword arguments (line 4005)
        kwargs_217003 = {}
        # Getting the type of 'ax2' (line 4005)
        ax2_217000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4005, 8), 'ax2', False)
        # Obtaining the member 'yaxis' of a type (line 4005)
        yaxis_217001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4005, 8), ax2_217000, 'yaxis')
        # Obtaining the member 'tick_right' of a type (line 4005)
        tick_right_217002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4005, 8), yaxis_217001, 'tick_right')
        # Calling tick_right(args, kwargs) (line 4005)
        tick_right_call_result_217004 = invoke(stypy.reporting.localization.Localization(__file__, 4005, 8), tick_right_217002, *[], **kwargs_217003)
        
        
        # Call to set_label_position(...): (line 4006)
        # Processing the call arguments (line 4006)
        unicode_217008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4006, 37), 'unicode', u'right')
        # Processing the call keyword arguments (line 4006)
        kwargs_217009 = {}
        # Getting the type of 'ax2' (line 4006)
        ax2_217005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4006, 8), 'ax2', False)
        # Obtaining the member 'yaxis' of a type (line 4006)
        yaxis_217006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4006, 8), ax2_217005, 'yaxis')
        # Obtaining the member 'set_label_position' of a type (line 4006)
        set_label_position_217007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4006, 8), yaxis_217006, 'set_label_position')
        # Calling set_label_position(args, kwargs) (line 4006)
        set_label_position_call_result_217010 = invoke(stypy.reporting.localization.Localization(__file__, 4006, 8), set_label_position_217007, *[unicode_217008], **kwargs_217009)
        
        
        # Call to set_offset_position(...): (line 4007)
        # Processing the call arguments (line 4007)
        unicode_217014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4007, 38), 'unicode', u'right')
        # Processing the call keyword arguments (line 4007)
        kwargs_217015 = {}
        # Getting the type of 'ax2' (line 4007)
        ax2_217011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4007, 8), 'ax2', False)
        # Obtaining the member 'yaxis' of a type (line 4007)
        yaxis_217012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4007, 8), ax2_217011, 'yaxis')
        # Obtaining the member 'set_offset_position' of a type (line 4007)
        set_offset_position_217013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4007, 8), yaxis_217012, 'set_offset_position')
        # Calling set_offset_position(args, kwargs) (line 4007)
        set_offset_position_call_result_217016 = invoke(stypy.reporting.localization.Localization(__file__, 4007, 8), set_offset_position_217013, *[unicode_217014], **kwargs_217015)
        
        
        # Call to set_autoscalex_on(...): (line 4008)
        # Processing the call arguments (line 4008)
        
        # Call to get_autoscalex_on(...): (line 4008)
        # Processing the call keyword arguments (line 4008)
        kwargs_217021 = {}
        # Getting the type of 'self' (line 4008)
        self_217019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4008, 30), 'self', False)
        # Obtaining the member 'get_autoscalex_on' of a type (line 4008)
        get_autoscalex_on_217020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4008, 30), self_217019, 'get_autoscalex_on')
        # Calling get_autoscalex_on(args, kwargs) (line 4008)
        get_autoscalex_on_call_result_217022 = invoke(stypy.reporting.localization.Localization(__file__, 4008, 30), get_autoscalex_on_217020, *[], **kwargs_217021)
        
        # Processing the call keyword arguments (line 4008)
        kwargs_217023 = {}
        # Getting the type of 'ax2' (line 4008)
        ax2_217017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4008, 8), 'ax2', False)
        # Obtaining the member 'set_autoscalex_on' of a type (line 4008)
        set_autoscalex_on_217018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4008, 8), ax2_217017, 'set_autoscalex_on')
        # Calling set_autoscalex_on(args, kwargs) (line 4008)
        set_autoscalex_on_call_result_217024 = invoke(stypy.reporting.localization.Localization(__file__, 4008, 8), set_autoscalex_on_217018, *[get_autoscalex_on_call_result_217022], **kwargs_217023)
        
        
        # Call to tick_left(...): (line 4009)
        # Processing the call keyword arguments (line 4009)
        kwargs_217028 = {}
        # Getting the type of 'self' (line 4009)
        self_217025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4009, 8), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 4009)
        yaxis_217026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4009, 8), self_217025, 'yaxis')
        # Obtaining the member 'tick_left' of a type (line 4009)
        tick_left_217027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4009, 8), yaxis_217026, 'tick_left')
        # Calling tick_left(args, kwargs) (line 4009)
        tick_left_call_result_217029 = invoke(stypy.reporting.localization.Localization(__file__, 4009, 8), tick_left_217027, *[], **kwargs_217028)
        
        
        # Call to set_visible(...): (line 4010)
        # Processing the call arguments (line 4010)
        # Getting the type of 'False' (line 4010)
        False_217033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4010, 30), 'False', False)
        # Processing the call keyword arguments (line 4010)
        kwargs_217034 = {}
        # Getting the type of 'ax2' (line 4010)
        ax2_217030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4010, 8), 'ax2', False)
        # Obtaining the member 'xaxis' of a type (line 4010)
        xaxis_217031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4010, 8), ax2_217030, 'xaxis')
        # Obtaining the member 'set_visible' of a type (line 4010)
        set_visible_217032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4010, 8), xaxis_217031, 'set_visible')
        # Calling set_visible(args, kwargs) (line 4010)
        set_visible_call_result_217035 = invoke(stypy.reporting.localization.Localization(__file__, 4010, 8), set_visible_217032, *[False_217033], **kwargs_217034)
        
        
        # Call to set_visible(...): (line 4011)
        # Processing the call arguments (line 4011)
        # Getting the type of 'False' (line 4011)
        False_217039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4011, 30), 'False', False)
        # Processing the call keyword arguments (line 4011)
        kwargs_217040 = {}
        # Getting the type of 'ax2' (line 4011)
        ax2_217036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4011, 8), 'ax2', False)
        # Obtaining the member 'patch' of a type (line 4011)
        patch_217037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4011, 8), ax2_217036, 'patch')
        # Obtaining the member 'set_visible' of a type (line 4011)
        set_visible_217038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4011, 8), patch_217037, 'set_visible')
        # Calling set_visible(args, kwargs) (line 4011)
        set_visible_call_result_217041 = invoke(stypy.reporting.localization.Localization(__file__, 4011, 8), set_visible_217038, *[False_217039], **kwargs_217040)
        
        # Getting the type of 'ax2' (line 4012)
        ax2_217042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4012, 15), 'ax2')
        # Assigning a type to the variable 'stypy_return_type' (line 4012)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4012, 8), 'stypy_return_type', ax2_217042)
        
        # ################# End of 'twinx(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'twinx' in the type store
        # Getting the type of 'stypy_return_type' (line 3984)
        stypy_return_type_217043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3984, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_217043)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'twinx'
        return stypy_return_type_217043


    @norecursion
    def twiny(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'twiny'
        module_type_store = module_type_store.open_function_context('twiny', 4014, 4, False)
        # Assigning a type to the variable 'self' (line 4015)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4015, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.twiny.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.twiny.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.twiny.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.twiny.__dict__.__setitem__('stypy_function_name', '_AxesBase.twiny')
        _AxesBase.twiny.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.twiny.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.twiny.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.twiny.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.twiny.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.twiny.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.twiny.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.twiny', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'twiny', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'twiny(...)' code ##################

        unicode_217044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4033, (-1)), 'unicode', u"\n        Create a twin Axes sharing the yaxis\n\n        Create a new Axes instance with an invisible y-axis and an independent\n        x-axis positioned opposite to the original one (i.e. at top). The\n        y-axis autoscale setting will be inherited from the original Axes.\n        To ensure that the tick marks of both x-axes align, see\n        `~matplotlib.ticker.LinearLocator`\n\n        Returns\n        -------\n        ax_twin : Axes\n            The newly created Axes instance\n\n        Notes\n        -----\n        For those who are 'picking' artists while using twiny, pick\n        events are only called for the artists in the top-most axes.\n        ")
        
        # Assigning a Call to a Name (line 4034):
        
        # Assigning a Call to a Name (line 4034):
        
        # Call to _make_twin_axes(...): (line 4034)
        # Processing the call keyword arguments (line 4034)
        # Getting the type of 'self' (line 4034)
        self_217047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4034, 42), 'self', False)
        keyword_217048 = self_217047
        kwargs_217049 = {'sharey': keyword_217048}
        # Getting the type of 'self' (line 4034)
        self_217045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4034, 14), 'self', False)
        # Obtaining the member '_make_twin_axes' of a type (line 4034)
        _make_twin_axes_217046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4034, 14), self_217045, '_make_twin_axes')
        # Calling _make_twin_axes(args, kwargs) (line 4034)
        _make_twin_axes_call_result_217050 = invoke(stypy.reporting.localization.Localization(__file__, 4034, 14), _make_twin_axes_217046, *[], **kwargs_217049)
        
        # Assigning a type to the variable 'ax2' (line 4034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4034, 8), 'ax2', _make_twin_axes_call_result_217050)
        
        # Call to tick_top(...): (line 4035)
        # Processing the call keyword arguments (line 4035)
        kwargs_217054 = {}
        # Getting the type of 'ax2' (line 4035)
        ax2_217051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4035, 8), 'ax2', False)
        # Obtaining the member 'xaxis' of a type (line 4035)
        xaxis_217052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4035, 8), ax2_217051, 'xaxis')
        # Obtaining the member 'tick_top' of a type (line 4035)
        tick_top_217053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4035, 8), xaxis_217052, 'tick_top')
        # Calling tick_top(args, kwargs) (line 4035)
        tick_top_call_result_217055 = invoke(stypy.reporting.localization.Localization(__file__, 4035, 8), tick_top_217053, *[], **kwargs_217054)
        
        
        # Call to set_label_position(...): (line 4036)
        # Processing the call arguments (line 4036)
        unicode_217059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4036, 37), 'unicode', u'top')
        # Processing the call keyword arguments (line 4036)
        kwargs_217060 = {}
        # Getting the type of 'ax2' (line 4036)
        ax2_217056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4036, 8), 'ax2', False)
        # Obtaining the member 'xaxis' of a type (line 4036)
        xaxis_217057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4036, 8), ax2_217056, 'xaxis')
        # Obtaining the member 'set_label_position' of a type (line 4036)
        set_label_position_217058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4036, 8), xaxis_217057, 'set_label_position')
        # Calling set_label_position(args, kwargs) (line 4036)
        set_label_position_call_result_217061 = invoke(stypy.reporting.localization.Localization(__file__, 4036, 8), set_label_position_217058, *[unicode_217059], **kwargs_217060)
        
        
        # Call to set_autoscaley_on(...): (line 4037)
        # Processing the call arguments (line 4037)
        
        # Call to get_autoscaley_on(...): (line 4037)
        # Processing the call keyword arguments (line 4037)
        kwargs_217066 = {}
        # Getting the type of 'self' (line 4037)
        self_217064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4037, 30), 'self', False)
        # Obtaining the member 'get_autoscaley_on' of a type (line 4037)
        get_autoscaley_on_217065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4037, 30), self_217064, 'get_autoscaley_on')
        # Calling get_autoscaley_on(args, kwargs) (line 4037)
        get_autoscaley_on_call_result_217067 = invoke(stypy.reporting.localization.Localization(__file__, 4037, 30), get_autoscaley_on_217065, *[], **kwargs_217066)
        
        # Processing the call keyword arguments (line 4037)
        kwargs_217068 = {}
        # Getting the type of 'ax2' (line 4037)
        ax2_217062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4037, 8), 'ax2', False)
        # Obtaining the member 'set_autoscaley_on' of a type (line 4037)
        set_autoscaley_on_217063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4037, 8), ax2_217062, 'set_autoscaley_on')
        # Calling set_autoscaley_on(args, kwargs) (line 4037)
        set_autoscaley_on_call_result_217069 = invoke(stypy.reporting.localization.Localization(__file__, 4037, 8), set_autoscaley_on_217063, *[get_autoscaley_on_call_result_217067], **kwargs_217068)
        
        
        # Call to tick_bottom(...): (line 4038)
        # Processing the call keyword arguments (line 4038)
        kwargs_217073 = {}
        # Getting the type of 'self' (line 4038)
        self_217070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4038, 8), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 4038)
        xaxis_217071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4038, 8), self_217070, 'xaxis')
        # Obtaining the member 'tick_bottom' of a type (line 4038)
        tick_bottom_217072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4038, 8), xaxis_217071, 'tick_bottom')
        # Calling tick_bottom(args, kwargs) (line 4038)
        tick_bottom_call_result_217074 = invoke(stypy.reporting.localization.Localization(__file__, 4038, 8), tick_bottom_217072, *[], **kwargs_217073)
        
        
        # Call to set_visible(...): (line 4039)
        # Processing the call arguments (line 4039)
        # Getting the type of 'False' (line 4039)
        False_217078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4039, 30), 'False', False)
        # Processing the call keyword arguments (line 4039)
        kwargs_217079 = {}
        # Getting the type of 'ax2' (line 4039)
        ax2_217075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4039, 8), 'ax2', False)
        # Obtaining the member 'yaxis' of a type (line 4039)
        yaxis_217076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4039, 8), ax2_217075, 'yaxis')
        # Obtaining the member 'set_visible' of a type (line 4039)
        set_visible_217077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4039, 8), yaxis_217076, 'set_visible')
        # Calling set_visible(args, kwargs) (line 4039)
        set_visible_call_result_217080 = invoke(stypy.reporting.localization.Localization(__file__, 4039, 8), set_visible_217077, *[False_217078], **kwargs_217079)
        
        
        # Call to set_visible(...): (line 4040)
        # Processing the call arguments (line 4040)
        # Getting the type of 'False' (line 4040)
        False_217084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4040, 30), 'False', False)
        # Processing the call keyword arguments (line 4040)
        kwargs_217085 = {}
        # Getting the type of 'ax2' (line 4040)
        ax2_217081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4040, 8), 'ax2', False)
        # Obtaining the member 'patch' of a type (line 4040)
        patch_217082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4040, 8), ax2_217081, 'patch')
        # Obtaining the member 'set_visible' of a type (line 4040)
        set_visible_217083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4040, 8), patch_217082, 'set_visible')
        # Calling set_visible(args, kwargs) (line 4040)
        set_visible_call_result_217086 = invoke(stypy.reporting.localization.Localization(__file__, 4040, 8), set_visible_217083, *[False_217084], **kwargs_217085)
        
        # Getting the type of 'ax2' (line 4041)
        ax2_217087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4041, 15), 'ax2')
        # Assigning a type to the variable 'stypy_return_type' (line 4041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4041, 8), 'stypy_return_type', ax2_217087)
        
        # ################# End of 'twiny(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'twiny' in the type store
        # Getting the type of 'stypy_return_type' (line 4014)
        stypy_return_type_217088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4014, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_217088)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'twiny'
        return stypy_return_type_217088


    @norecursion
    def get_shared_x_axes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_shared_x_axes'
        module_type_store = module_type_store.open_function_context('get_shared_x_axes', 4043, 4, False)
        # Assigning a type to the variable 'self' (line 4044)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4044, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_shared_x_axes.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_shared_x_axes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_shared_x_axes.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_shared_x_axes.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_shared_x_axes')
        _AxesBase.get_shared_x_axes.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_shared_x_axes.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_shared_x_axes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_shared_x_axes.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_shared_x_axes.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_shared_x_axes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_shared_x_axes.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_shared_x_axes', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_shared_x_axes', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_shared_x_axes(...)' code ##################

        unicode_217089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4044, 8), 'unicode', u'Return a copy of the shared axes Grouper object for x axes')
        # Getting the type of 'self' (line 4045)
        self_217090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4045, 15), 'self')
        # Obtaining the member '_shared_x_axes' of a type (line 4045)
        _shared_x_axes_217091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4045, 15), self_217090, '_shared_x_axes')
        # Assigning a type to the variable 'stypy_return_type' (line 4045)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4045, 8), 'stypy_return_type', _shared_x_axes_217091)
        
        # ################# End of 'get_shared_x_axes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_shared_x_axes' in the type store
        # Getting the type of 'stypy_return_type' (line 4043)
        stypy_return_type_217092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4043, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_217092)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_shared_x_axes'
        return stypy_return_type_217092


    @norecursion
    def get_shared_y_axes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_shared_y_axes'
        module_type_store = module_type_store.open_function_context('get_shared_y_axes', 4047, 4, False)
        # Assigning a type to the variable 'self' (line 4048)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4048, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxesBase.get_shared_y_axes.__dict__.__setitem__('stypy_localization', localization)
        _AxesBase.get_shared_y_axes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxesBase.get_shared_y_axes.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxesBase.get_shared_y_axes.__dict__.__setitem__('stypy_function_name', '_AxesBase.get_shared_y_axes')
        _AxesBase.get_shared_y_axes.__dict__.__setitem__('stypy_param_names_list', [])
        _AxesBase.get_shared_y_axes.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxesBase.get_shared_y_axes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxesBase.get_shared_y_axes.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxesBase.get_shared_y_axes.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxesBase.get_shared_y_axes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxesBase.get_shared_y_axes.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxesBase.get_shared_y_axes', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_shared_y_axes', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_shared_y_axes(...)' code ##################

        unicode_217093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4048, 8), 'unicode', u'Return a copy of the shared axes Grouper object for y axes')
        # Getting the type of 'self' (line 4049)
        self_217094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4049, 15), 'self')
        # Obtaining the member '_shared_y_axes' of a type (line 4049)
        _shared_y_axes_217095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4049, 15), self_217094, '_shared_y_axes')
        # Assigning a type to the variable 'stypy_return_type' (line 4049)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4049, 8), 'stypy_return_type', _shared_y_axes_217095)
        
        # ################# End of 'get_shared_y_axes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_shared_y_axes' in the type store
        # Getting the type of 'stypy_return_type' (line 4047)
        stypy_return_type_217096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4047, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_217096)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_shared_y_axes'
        return stypy_return_type_217096


# Assigning a type to the variable '_AxesBase' (line 408)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 0), '_AxesBase', _AxesBase)

# Assigning a Str to a Name (line 411):
unicode_217097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 411, 11), 'unicode', u'rectilinear')
# Getting the type of '_AxesBase'
_AxesBase_217098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_AxesBase')
# Setting the type of the member 'name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _AxesBase_217098, 'name', unicode_217097)

# Assigning a Call to a Name (line 413):

# Call to Grouper(...): (line 413)
# Processing the call keyword arguments (line 413)
kwargs_217101 = {}
# Getting the type of 'cbook' (line 413)
cbook_217099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 21), 'cbook', False)
# Obtaining the member 'Grouper' of a type (line 413)
Grouper_217100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 21), cbook_217099, 'Grouper')
# Calling Grouper(args, kwargs) (line 413)
Grouper_call_result_217102 = invoke(stypy.reporting.localization.Localization(__file__, 413, 21), Grouper_217100, *[], **kwargs_217101)

# Getting the type of '_AxesBase'
_AxesBase_217103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_AxesBase')
# Setting the type of the member '_shared_x_axes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _AxesBase_217103, '_shared_x_axes', Grouper_call_result_217102)

# Assigning a Call to a Name (line 414):

# Call to Grouper(...): (line 414)
# Processing the call keyword arguments (line 414)
kwargs_217106 = {}
# Getting the type of 'cbook' (line 414)
cbook_217104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 21), 'cbook', False)
# Obtaining the member 'Grouper' of a type (line 414)
Grouper_217105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 21), cbook_217104, 'Grouper')
# Calling Grouper(args, kwargs) (line 414)
Grouper_call_result_217107 = invoke(stypy.reporting.localization.Localization(__file__, 414, 21), Grouper_217105, *[], **kwargs_217106)

# Getting the type of '_AxesBase'
_AxesBase_217108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_AxesBase')
# Setting the type of the member '_shared_y_axes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _AxesBase_217108, '_shared_y_axes', Grouper_call_result_217107)

# Assigning a Name to a Name (line 1110):
# Getting the type of '_AxesBase'
_AxesBase_217109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_AxesBase')
# Obtaining the member 'get_facecolor' of a type
get_facecolor_217110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _AxesBase_217109, 'get_facecolor')
# Getting the type of '_AxesBase'
_AxesBase_217111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_AxesBase')
# Setting the type of the member 'get_fc' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _AxesBase_217111, 'get_fc', get_facecolor_217110)

# Assigning a Name to a Name (line 1115):
# Getting the type of '_AxesBase'
_AxesBase_217112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_AxesBase')
# Obtaining the member 'set_facecolor' of a type
set_facecolor_217113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _AxesBase_217112, 'set_facecolor')
# Getting the type of '_AxesBase'
_AxesBase_217114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_AxesBase')
# Setting the type of the member 'set_fc' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _AxesBase_217114, 'set_fc', set_facecolor_217113)

# Assigning a BinOp to a Attribute (line 2946):
unicode_217115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2946, 25), 'unicode', u'Return the xaxis scale string: %s')

# Call to join(...): (line 2947)
# Processing the call arguments (line 2947)

# Call to get_scale_names(...): (line 2947)
# Processing the call keyword arguments (line 2947)
kwargs_217120 = {}
# Getting the type of 'mscale' (line 2947)
mscale_217118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 18), 'mscale', False)
# Obtaining the member 'get_scale_names' of a type (line 2947)
get_scale_names_217119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2947, 18), mscale_217118, 'get_scale_names')
# Calling get_scale_names(args, kwargs) (line 2947)
get_scale_names_call_result_217121 = invoke(stypy.reporting.localization.Localization(__file__, 2947, 18), get_scale_names_217119, *[], **kwargs_217120)

# Processing the call keyword arguments (line 2947)
kwargs_217122 = {}
unicode_217116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2947, 8), 'unicode', u', ')
# Obtaining the member 'join' of a type (line 2947)
join_217117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2947, 8), unicode_217116, 'join')
# Calling join(args, kwargs) (line 2947)
join_call_result_217123 = invoke(stypy.reporting.localization.Localization(__file__, 2947, 8), join_217117, *[get_scale_names_call_result_217121], **kwargs_217122)

# Applying the binary operator '%' (line 2946)
result_mod_217124 = python_operator(stypy.reporting.localization.Localization(__file__, 2946, 25), '%', unicode_217115, join_call_result_217123)

# Getting the type of '_AxesBase'
_AxesBase_217125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_AxesBase')
# Obtaining the member 'get_xscale' of a type
get_xscale_217126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _AxesBase_217125, 'get_xscale')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_xscale_217126, '__doc__', result_mod_217124)

# Assigning a BinOp to a Attribute (line 3268):
unicode_217127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3268, 25), 'unicode', u'Return the yaxis scale string: %s')

# Call to join(...): (line 3269)
# Processing the call arguments (line 3269)

# Call to get_scale_names(...): (line 3269)
# Processing the call keyword arguments (line 3269)
kwargs_217132 = {}
# Getting the type of 'mscale' (line 3269)
mscale_217130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3269, 18), 'mscale', False)
# Obtaining the member 'get_scale_names' of a type (line 3269)
get_scale_names_217131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3269, 18), mscale_217130, 'get_scale_names')
# Calling get_scale_names(args, kwargs) (line 3269)
get_scale_names_call_result_217133 = invoke(stypy.reporting.localization.Localization(__file__, 3269, 18), get_scale_names_217131, *[], **kwargs_217132)

# Processing the call keyword arguments (line 3269)
kwargs_217134 = {}
unicode_217128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3269, 8), 'unicode', u', ')
# Obtaining the member 'join' of a type (line 3269)
join_217129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3269, 8), unicode_217128, 'join')
# Calling join(args, kwargs) (line 3269)
join_call_result_217135 = invoke(stypy.reporting.localization.Localization(__file__, 3269, 8), join_217129, *[get_scale_names_call_result_217133], **kwargs_217134)

# Applying the binary operator '%' (line 3268)
result_mod_217136 = python_operator(stypy.reporting.localization.Localization(__file__, 3268, 25), '%', unicode_217127, join_call_result_217135)

# Getting the type of '_AxesBase'
_AxesBase_217137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_AxesBase')
# Obtaining the member 'get_yscale' of a type
get_yscale_217138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _AxesBase_217137, 'get_yscale')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_yscale_217138, '__doc__', result_mod_217136)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
