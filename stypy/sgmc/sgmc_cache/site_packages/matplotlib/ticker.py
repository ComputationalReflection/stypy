
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: Tick locating and formatting
3: ============================
4: 
5: This module contains classes to support completely configurable tick
6: locating and formatting. Although the locators know nothing about major
7: or minor ticks, they are used by the Axis class to support major and
8: minor tick locating and formatting. Generic tick locators and
9: formatters are provided, as well as domain specific custom ones.
10: 
11: Default Formatter
12: -----------------
13: 
14: The default formatter identifies when the x-data being plotted is a
15: small range on top of a large off set. To reduce the chances that the
16: ticklabels overlap the ticks are labeled as deltas from a fixed offset.
17: For example::
18: 
19:    ax.plot(np.arange(2000, 2010), range(10))
20: 
21: will have tick of 0-9 with an offset of +2e3. If this is not desired
22: turn off the use of the offset on the default formatter::
23: 
24:    ax.get_xaxis().get_major_formatter().set_useOffset(False)
25: 
26: set the rcParam ``axes.formatter.useoffset=False`` to turn it off
27: globally, or set a different formatter.
28: 
29: Tick locating
30: -------------
31: 
32: The Locator class is the base class for all tick locators. The locators
33: handle autoscaling of the view limits based on the data limits, and the
34: choosing of tick locations. A useful semi-automatic tick locator is
35: `MultipleLocator`. It is initialized with a base, e.g., 10, and it picks
36: axis limits and ticks that are multiples of that base.
37: 
38: The Locator subclasses defined here are
39: 
40: :class:`NullLocator`
41:     No ticks
42: 
43: :class:`FixedLocator`
44:     Tick locations are fixed
45: 
46: :class:`IndexLocator`
47:     locator for index plots (e.g., where x = range(len(y)))
48: 
49: :class:`LinearLocator`
50:     evenly spaced ticks from min to max
51: 
52: :class:`LogLocator`
53:     logarithmically ticks from min to max
54: 
55: :class:`SymmetricalLogLocator`
56:     locator for use with with the symlog norm, works like the
57:     `LogLocator` for the part outside of the threshold and add 0 if
58:     inside the limits
59: 
60: :class:`MultipleLocator`
61:     ticks and range are a multiple of base; either integer or float
62: 
63: :class:`OldAutoLocator`
64:     choose a MultipleLocator and dyamically reassign it for
65:     intelligent ticking during navigation
66: 
67: :class:`MaxNLocator`
68:     finds up to a max number of ticks at nice locations
69: 
70: :class:`AutoLocator`
71:     :class:`MaxNLocator` with simple defaults. This is the default
72:     tick locator for most plotting.
73: 
74: :class:`AutoMinorLocator`
75:     locator for minor ticks when the axis is linear and the
76:     major ticks are uniformly spaced. It subdivides the major
77:     tick interval into a specified number of minor intervals,
78:     defaulting to 4 or 5 depending on the major interval.
79: 
80: :class:`LogitLocator`
81:     Locator for logit scaling.
82: 
83: 
84: There are a number of locators specialized for date locations - see
85: the dates module
86: 
87: You can define your own locator by deriving from Locator. You must
88: override the ``__call__`` method, which returns a sequence of locations,
89: and you will probably want to override the autoscale method to set the
90: view limits from the data limits.
91: 
92: If you want to override the default locator, use one of the above or a
93: custom locator and pass it to the x or y axis instance. The relevant
94: methods are::
95: 
96:   ax.xaxis.set_major_locator( xmajorLocator )
97:   ax.xaxis.set_minor_locator( xminorLocator )
98:   ax.yaxis.set_major_locator( ymajorLocator )
99:   ax.yaxis.set_minor_locator( yminorLocator )
100: 
101: The default minor locator is the NullLocator, e.g., no minor ticks on by
102: default.
103: 
104: Tick formatting
105: ---------------
106: 
107: Tick formatting is controlled by classes derived from Formatter. The
108: formatter operates on a single tick value and returns a string to the
109: axis.
110: 
111: :class:`NullFormatter`
112:     No labels on the ticks
113: 
114: :class:`IndexFormatter`
115:     Set the strings from a list of labels
116: 
117: :class:`FixedFormatter`
118:     Set the strings manually for the labels
119: 
120: :class:`FuncFormatter`
121:     User defined function sets the labels
122: 
123: :class:`StrMethodFormatter`
124:     Use string `format` method
125: 
126: :class:`FormatStrFormatter`
127:     Use an old-style sprintf format string
128: 
129: :class:`ScalarFormatter`
130:     Default formatter for scalars: autopick the format string
131: 
132: :class:`LogFormatter`
133:     Formatter for log axes
134: 
135: :class:`LogFormatterExponent`
136:     Format values for log axis using ``exponent = log_base(value)``.
137: 
138: :class:`LogFormatterMathtext`
139:     Format values for log axis using ``exponent = log_base(value)``
140:     using Math text.
141: 
142: :class:`LogFormatterSciNotation`
143:     Format values for log axis using scientific notation.
144: 
145: :class:`LogitFormatter`
146:     Probability formatter.
147: 
148: :class:`EngFormatter`
149:     Format labels in engineering notation
150: 
151: :class:`PercentFormatter`
152:     Format labels as a percentage
153: 
154: You can derive your own formatter from the Formatter base class by
155: simply overriding the ``__call__`` method. The formatter class has
156: access to the axis view and data limits.
157: 
158: To control the major and minor tick label formats, use one of the
159: following methods::
160: 
161:   ax.xaxis.set_major_formatter( xmajorFormatter )
162:   ax.xaxis.set_minor_formatter( xminorFormatter )
163:   ax.yaxis.set_major_formatter( ymajorFormatter )
164:   ax.yaxis.set_minor_formatter( yminorFormatter )
165: 
166: See :ref:`sphx_glr_gallery_ticks_and_spines_major_minor_demo.py` for an
167: example of setting major and minor ticks. See the :mod:`matplotlib.dates`
168: module for more information and examples of using date locators and formatters.
169: '''
170: 
171: from __future__ import (absolute_import, division, print_function,
172:                         unicode_literals)
173: 
174: import six
175: 
176: import itertools
177: import locale
178: import math
179: import numpy as np
180: from matplotlib import rcParams
181: from matplotlib import cbook
182: from matplotlib import transforms as mtransforms
183: from matplotlib.cbook import mplDeprecation
184: 
185: import warnings
186: 
187: 
188: __all__ = ('TickHelper', 'Formatter', 'FixedFormatter',
189:            'NullFormatter', 'FuncFormatter', 'FormatStrFormatter',
190:            'StrMethodFormatter', 'ScalarFormatter', 'LogFormatter',
191:            'LogFormatterExponent', 'LogFormatterMathtext',
192:            'IndexFormatter', 'LogFormatterSciNotation',
193:            'LogitFormatter', 'EngFormatter', 'PercentFormatter',
194:            'Locator', 'IndexLocator', 'FixedLocator', 'NullLocator',
195:            'LinearLocator', 'LogLocator', 'AutoLocator',
196:            'MultipleLocator', 'MaxNLocator', 'AutoMinorLocator',
197:            'SymmetricalLogLocator', 'LogitLocator')
198: 
199: 
200: if six.PY3:
201:     long = int
202: 
203: 
204: # Work around numpy/numpy#6127.
205: def _divmod(x, y):
206:     if isinstance(x, np.generic):
207:         x = x.item()
208:     if isinstance(y, np.generic):
209:         y = y.item()
210:     return six.moves.builtins.divmod(x, y)
211: 
212: 
213: def _mathdefault(s):
214:     return '\\mathdefault{%s}' % s
215: 
216: 
217: class _DummyAxis(object):
218:     def __init__(self, minpos=0):
219:         self.dataLim = mtransforms.Bbox.unit()
220:         self.viewLim = mtransforms.Bbox.unit()
221:         self._minpos = minpos
222: 
223:     def get_view_interval(self):
224:         return self.viewLim.intervalx
225: 
226:     def set_view_interval(self, vmin, vmax):
227:         self.viewLim.intervalx = vmin, vmax
228: 
229:     def get_minpos(self):
230:         return self._minpos
231: 
232:     def get_data_interval(self):
233:         return self.dataLim.intervalx
234: 
235:     def set_data_interval(self, vmin, vmax):
236:         self.dataLim.intervalx = vmin, vmax
237: 
238:     def get_tick_space(self):
239:         # Just use the long-standing default of nbins==9
240:         return 9
241: 
242: 
243: class TickHelper(object):
244:     axis = None
245: 
246:     def set_axis(self, axis):
247:         self.axis = axis
248: 
249:     def create_dummy_axis(self, **kwargs):
250:         if self.axis is None:
251:             self.axis = _DummyAxis(**kwargs)
252: 
253:     def set_view_interval(self, vmin, vmax):
254:         self.axis.set_view_interval(vmin, vmax)
255: 
256:     def set_data_interval(self, vmin, vmax):
257:         self.axis.set_data_interval(vmin, vmax)
258: 
259:     def set_bounds(self, vmin, vmax):
260:         self.set_view_interval(vmin, vmax)
261:         self.set_data_interval(vmin, vmax)
262: 
263: 
264: class Formatter(TickHelper):
265:     '''
266:     Create a string based on a tick value and location.
267:     '''
268:     # some classes want to see all the locs to help format
269:     # individual ones
270:     locs = []
271: 
272:     def __call__(self, x, pos=None):
273:         '''
274:         Return the format for tick value `x` at position pos.
275:         ``pos=None`` indicates an unspecified location.
276:         '''
277:         raise NotImplementedError('Derived must override')
278: 
279:     def format_data(self, value):
280:         '''
281:         Returns the full string representation of the value with the
282:         position unspecified.
283:         '''
284:         return self.__call__(value)
285: 
286:     def format_data_short(self, value):
287:         '''
288:         Return a short string version of the tick value.
289: 
290:         Defaults to the position-independent long value.
291:         '''
292:         return self.format_data(value)
293: 
294:     def get_offset(self):
295:         return ''
296: 
297:     def set_locs(self, locs):
298:         self.locs = locs
299: 
300:     def fix_minus(self, s):
301:         '''
302:         Some classes may want to replace a hyphen for minus with the
303:         proper unicode symbol (U+2212) for typographical correctness.
304:         The default is to not replace it.
305: 
306:         Note, if you use this method, e.g., in :meth:`format_data` or
307:         call, you probably don't want to use it for
308:         :meth:`format_data_short` since the toolbar uses this for
309:         interactive coord reporting and I doubt we can expect GUIs
310:         across platforms will handle the unicode correctly.  So for
311:         now the classes that override :meth:`fix_minus` should have an
312:         explicit :meth:`format_data_short` method
313:         '''
314:         return s
315: 
316: 
317: class IndexFormatter(Formatter):
318:     '''
319:     Format the position x to the nearest i-th label where i=int(x+0.5)
320:     '''
321:     def __init__(self, labels):
322:         self.labels = labels
323:         self.n = len(labels)
324: 
325:     def __call__(self, x, pos=None):
326:         '''
327:         Return the format for tick value `x` at position pos.
328: 
329:         The position is ignored and the value is rounded to the nearest
330:         integer, which is used to look up the label.
331:         '''
332:         i = int(x + 0.5)
333:         if i < 0 or i >= self.n:
334:             return ''
335:         else:
336:             return self.labels[i]
337: 
338: 
339: class NullFormatter(Formatter):
340:     '''
341:     Always return the empty string.
342:     '''
343:     def __call__(self, x, pos=None):
344:         '''
345:         Returns an empty string for all inputs.
346:         '''
347:         return ''
348: 
349: 
350: class FixedFormatter(Formatter):
351:     '''
352:     Return fixed strings for tick labels based only on position, not
353:     value.
354:     '''
355:     def __init__(self, seq):
356:         '''
357:         Set the sequence of strings that will be used for labels.
358:         '''
359:         self.seq = seq
360:         self.offset_string = ''
361: 
362:     def __call__(self, x, pos=None):
363:         '''
364:         Returns the label that matches the position regardless of the
365:         value.
366: 
367:         For positions ``pos < len(seq)``, return `seq[i]` regardless of
368:         `x`. Otherwise return empty string. `seq` is the sequence of
369:         strings that this object was initialized with.
370:         '''
371:         if pos is None or pos >= len(self.seq):
372:             return ''
373:         else:
374:             return self.seq[pos]
375: 
376:     def get_offset(self):
377:         return self.offset_string
378: 
379:     def set_offset_string(self, ofs):
380:         self.offset_string = ofs
381: 
382: 
383: class FuncFormatter(Formatter):
384:     '''
385:     Use a user-defined function for formatting.
386: 
387:     The function should take in two inputs (a tick value ``x`` and a
388:     position ``pos``), and return a string containing the corresponding
389:     tick label.
390:     '''
391:     def __init__(self, func):
392:         self.func = func
393: 
394:     def __call__(self, x, pos=None):
395:         '''
396:         Return the value of the user defined function.
397: 
398:         `x` and `pos` are passed through as-is.
399:         '''
400:         return self.func(x, pos)
401: 
402: 
403: class FormatStrFormatter(Formatter):
404:     '''
405:     Use an old-style ('%' operator) format string to format the tick.
406: 
407:     The format string should have a single variable format (%) in it.
408:     It will be applied to the value (not the position) of the tick.
409:     '''
410:     def __init__(self, fmt):
411:         self.fmt = fmt
412: 
413:     def __call__(self, x, pos=None):
414:         '''
415:         Return the formatted label string.
416: 
417:         Only the value `x` is formatted. The position is ignored.
418:         '''
419:         return self.fmt % x
420: 
421: 
422: class StrMethodFormatter(Formatter):
423:     '''
424:     Use a new-style format string (as used by `str.format()`)
425:     to format the tick.
426: 
427:     The field used for the value must be labeled `x` and the field used
428:     for the position must be labeled `pos`.
429:     '''
430:     def __init__(self, fmt):
431:         self.fmt = fmt
432: 
433:     def __call__(self, x, pos=None):
434:         '''
435:         Return the formatted label string.
436: 
437:         `x` and `pos` are passed to `str.format` as keyword arguments
438:         with those exact names.
439:         '''
440:         return self.fmt.format(x=x, pos=pos)
441: 
442: 
443: class OldScalarFormatter(Formatter):
444:     '''
445:     Tick location is a plain old number.
446:     '''
447: 
448:     def __call__(self, x, pos=None):
449:         '''
450:         Return the format for tick val `x` based on the width of the
451:         axis.
452: 
453:         The position `pos` is ignored.
454:         '''
455:         xmin, xmax = self.axis.get_view_interval()
456:         d = abs(xmax - xmin)
457: 
458:         return self.pprint_val(x, d)
459: 
460:     def pprint_val(self, x, d):
461:         '''
462:         Formats the value `x` based on the size of the axis range `d`.
463:         '''
464:         #if the number is not too big and it's an int, format it as an
465:         #int
466:         if abs(x) < 1e4 and x == int(x):
467:             return '%d' % x
468: 
469:         if d < 1e-2:
470:             fmt = '%1.3e'
471:         elif d < 1e-1:
472:             fmt = '%1.3f'
473:         elif d > 1e5:
474:             fmt = '%1.1e'
475:         elif d > 10:
476:             fmt = '%1.1f'
477:         elif d > 1:
478:             fmt = '%1.2f'
479:         else:
480:             fmt = '%1.3f'
481:         s = fmt % x
482:         #print d, x, fmt, s
483:         tup = s.split('e')
484:         if len(tup) == 2:
485:             mantissa = tup[0].rstrip('0').rstrip('.')
486:             sign = tup[1][0].replace('+', '')
487:             exponent = tup[1][1:].lstrip('0')
488:             s = '%se%s%s' % (mantissa, sign, exponent)
489:         else:
490:             s = s.rstrip('0').rstrip('.')
491:         return s
492: 
493: 
494: class ScalarFormatter(Formatter):
495:     '''
496:     Format tick values as a number.
497: 
498:     Tick value is interpreted as a plain old number. If
499:     ``useOffset==True`` and the data range is much smaller than the data
500:     average, then an offset will be determined such that the tick labels
501:     are meaningful. Scientific notation is used for ``data < 10^-n`` or
502:     ``data >= 10^m``, where ``n`` and ``m`` are the power limits set
503:     using ``set_powerlimits((n,m))``. The defaults for these are
504:     controlled by the ``axes.formatter.limits`` rc parameter.
505:     '''
506:     def __init__(self, useOffset=None, useMathText=None, useLocale=None):
507:         # useOffset allows plotting small data ranges with large offsets: for
508:         # example: [1+1e-9,1+2e-9,1+3e-9] useMathText will render the offset
509:         # and scientific notation in mathtext
510: 
511:         if useOffset is None:
512:             useOffset = rcParams['axes.formatter.useoffset']
513:         self._offset_threshold = rcParams['axes.formatter.offset_threshold']
514:         self.set_useOffset(useOffset)
515:         self._usetex = rcParams['text.usetex']
516:         if useMathText is None:
517:             useMathText = rcParams['axes.formatter.use_mathtext']
518:         self.set_useMathText(useMathText)
519:         self.orderOfMagnitude = 0
520:         self.format = ''
521:         self._scientific = True
522:         self._powerlimits = rcParams['axes.formatter.limits']
523:         if useLocale is None:
524:             useLocale = rcParams['axes.formatter.use_locale']
525:         self._useLocale = useLocale
526: 
527:     def get_useOffset(self):
528:         return self._useOffset
529: 
530:     def set_useOffset(self, val):
531:         if val in [True, False]:
532:             self.offset = 0
533:             self._useOffset = val
534:         else:
535:             self._useOffset = False
536:             self.offset = val
537: 
538:     useOffset = property(fget=get_useOffset, fset=set_useOffset)
539: 
540:     def get_useLocale(self):
541:         return self._useLocale
542: 
543:     def set_useLocale(self, val):
544:         if val is None:
545:             self._useLocale = rcParams['axes.formatter.use_locale']
546:         else:
547:             self._useLocale = val
548: 
549:     useLocale = property(fget=get_useLocale, fset=set_useLocale)
550: 
551:     def get_useMathText(self):
552:         return self._useMathText
553: 
554:     def set_useMathText(self, val):
555:         if val is None:
556:             self._useMathText = rcParams['axes.formatter.use_mathtext']
557:         else:
558:             self._useMathText = val
559: 
560:     useMathText = property(fget=get_useMathText, fset=set_useMathText)
561: 
562:     def fix_minus(self, s):
563:         '''
564:         Replace hyphens with a unicode minus.
565:         '''
566:         if rcParams['text.usetex'] or not rcParams['axes.unicode_minus']:
567:             return s
568:         else:
569:             return s.replace('-', '\N{MINUS SIGN}')
570: 
571:     def __call__(self, x, pos=None):
572:         '''
573:         Return the format for tick value `x` at position `pos`.
574:         '''
575:         if len(self.locs) == 0:
576:             return ''
577:         else:
578:             s = self.pprint_val(x)
579:             return self.fix_minus(s)
580: 
581:     def set_scientific(self, b):
582:         '''
583:         Turn scientific notation on or off.
584: 
585:         .. seealso:: Method :meth:`set_powerlimits`
586:         '''
587:         self._scientific = bool(b)
588: 
589:     def set_powerlimits(self, lims):
590:         '''
591:         Sets size thresholds for scientific notation.
592: 
593:         ``lims`` is a two-element sequence containing the powers of 10
594:         that determine the switchover threshold. Numbers below
595:         ``10**lims[0]`` and above ``10**lims[1]`` will be displayed in
596:         scientific notation.
597: 
598:         For example, ``formatter.set_powerlimits((-3, 4))`` sets the
599:         pre-2007 default in which scientific notation is used for
600:         numbers less than 1e-3 or greater than 1e4.
601: 
602:         .. seealso:: Method :meth:`set_scientific`
603:         '''
604:         if len(lims) != 2:
605:             raise ValueError("'lims' must be a sequence of length 2")
606:         self._powerlimits = lims
607: 
608:     def format_data_short(self, value):
609:         '''
610:         Return a short formatted string representation of a number.
611:         '''
612:         if self._useLocale:
613:             return locale.format_string('%-12g', (value,))
614:         else:
615:             return '%-12g' % value
616: 
617:     def format_data(self, value):
618:         '''
619:         Return a formatted string representation of a number.
620:         '''
621:         if self._useLocale:
622:             s = locale.format_string('%1.10e', (value,))
623:         else:
624:             s = '%1.10e' % value
625:         s = self._formatSciNotation(s)
626:         return self.fix_minus(s)
627: 
628:     def get_offset(self):
629:         '''
630:         Return scientific notation, plus offset.
631:         '''
632:         if len(self.locs) == 0:
633:             return ''
634:         s = ''
635:         if self.orderOfMagnitude or self.offset:
636:             offsetStr = ''
637:             sciNotStr = ''
638:             if self.offset:
639:                 offsetStr = self.format_data(self.offset)
640:                 if self.offset > 0:
641:                     offsetStr = '+' + offsetStr
642:             if self.orderOfMagnitude:
643:                 if self._usetex or self._useMathText:
644:                     sciNotStr = self.format_data(10 ** self.orderOfMagnitude)
645:                 else:
646:                     sciNotStr = '1e%d' % self.orderOfMagnitude
647:             if self._useMathText:
648:                 if sciNotStr != '':
649:                     sciNotStr = r'\times%s' % _mathdefault(sciNotStr)
650:                 s = ''.join(('$', sciNotStr, _mathdefault(offsetStr), '$'))
651:             elif self._usetex:
652:                 if sciNotStr != '':
653:                     sciNotStr = r'\times%s' % sciNotStr
654:                 s = ''.join(('$', sciNotStr, offsetStr, '$'))
655:             else:
656:                 s = ''.join((sciNotStr, offsetStr))
657: 
658:         return self.fix_minus(s)
659: 
660:     def set_locs(self, locs):
661:         '''
662:         Set the locations of the ticks.
663:         '''
664:         self.locs = locs
665:         if len(self.locs) > 0:
666:             vmin, vmax = self.axis.get_view_interval()
667:             d = abs(vmax - vmin)
668:             if self._useOffset:
669:                 self._compute_offset()
670:             self._set_orderOfMagnitude(d)
671:             self._set_format(vmin, vmax)
672: 
673:     def _compute_offset(self):
674:         locs = self.locs
675:         if locs is None or not len(locs):
676:             self.offset = 0
677:             return
678:         # Restrict to visible ticks.
679:         vmin, vmax = sorted(self.axis.get_view_interval())
680:         locs = np.asarray(locs)
681:         locs = locs[(vmin <= locs) & (locs <= vmax)]
682:         if not len(locs):
683:             self.offset = 0
684:             return
685:         lmin, lmax = locs.min(), locs.max()
686:         # Only use offset if there are at least two ticks and every tick has
687:         # the same sign.
688:         if lmin == lmax or lmin <= 0 <= lmax:
689:             self.offset = 0
690:             return
691:         # min, max comparing absolute values (we want division to round towards
692:         # zero so we work on absolute values).
693:         abs_min, abs_max = sorted([abs(float(lmin)), abs(float(lmax))])
694:         sign = math.copysign(1, lmin)
695:         # What is the smallest power of ten such that abs_min and abs_max are
696:         # equal up to that precision?
697:         # Note: Internally using oom instead of 10 ** oom avoids some numerical
698:         # accuracy issues.
699:         oom_max = np.ceil(math.log10(abs_max))
700:         oom = 1 + next(oom for oom in itertools.count(oom_max, -1)
701:                        if abs_min // 10 ** oom != abs_max // 10 ** oom)
702:         if (abs_max - abs_min) / 10 ** oom <= 1e-2:
703:             # Handle the case of straddling a multiple of a large power of ten
704:             # (relative to the span).
705:             # What is the smallest power of ten such that abs_min and abs_max
706:             # are no more than 1 apart at that precision?
707:             oom = 1 + next(oom for oom in itertools.count(oom_max, -1)
708:                            if abs_max // 10 ** oom - abs_min // 10 ** oom > 1)
709:         # Only use offset if it saves at least _offset_threshold digits.
710:         n = self._offset_threshold - 1
711:         self.offset = (sign * (abs_max // 10 ** oom) * 10 ** oom
712:                        if abs_max // 10 ** oom >= 10**n
713:                        else 0)
714: 
715:     def _set_orderOfMagnitude(self, range):
716:         # if scientific notation is to be used, find the appropriate exponent
717:         # if using an numerical offset, find the exponent after applying the
718:         # offset
719:         if not self._scientific:
720:             self.orderOfMagnitude = 0
721:             return
722:         locs = np.abs(self.locs)
723:         if self.offset:
724:             oom = math.floor(math.log10(range))
725:         else:
726:             if locs[0] > locs[-1]:
727:                 val = locs[0]
728:             else:
729:                 val = locs[-1]
730:             if val == 0:
731:                 oom = 0
732:             else:
733:                 oom = math.floor(math.log10(val))
734:         if oom <= self._powerlimits[0]:
735:             self.orderOfMagnitude = oom
736:         elif oom >= self._powerlimits[1]:
737:             self.orderOfMagnitude = oom
738:         else:
739:             self.orderOfMagnitude = 0
740: 
741:     def _set_format(self, vmin, vmax):
742:         # set the format string to format all the ticklabels
743:         if len(self.locs) < 2:
744:             # Temporarily augment the locations with the axis end points.
745:             _locs = list(self.locs) + [vmin, vmax]
746:         else:
747:             _locs = self.locs
748:         locs = (np.asarray(_locs) - self.offset) / 10. ** self.orderOfMagnitude
749:         loc_range = np.ptp(locs)
750:         # Curvilinear coordinates can yield two identical points.
751:         if loc_range == 0:
752:             loc_range = np.max(np.abs(locs))
753:         # Both points might be zero.
754:         if loc_range == 0:
755:             loc_range = 1
756:         if len(self.locs) < 2:
757:             # We needed the end points only for the loc_range calculation.
758:             locs = locs[:-2]
759:         loc_range_oom = int(math.floor(math.log10(loc_range)))
760:         # first estimate:
761:         sigfigs = max(0, 3 - loc_range_oom)
762:         # refined estimate:
763:         thresh = 1e-3 * 10 ** loc_range_oom
764:         while sigfigs >= 0:
765:             if np.abs(locs - np.round(locs, decimals=sigfigs)).max() < thresh:
766:                 sigfigs -= 1
767:             else:
768:                 break
769:         sigfigs += 1
770:         self.format = '%1.' + str(sigfigs) + 'f'
771:         if self._usetex:
772:             self.format = '$%s$' % self.format
773:         elif self._useMathText:
774:             self.format = '$%s$' % _mathdefault(self.format)
775: 
776:     def pprint_val(self, x):
777:         xp = (x - self.offset) / (10. ** self.orderOfMagnitude)
778:         if np.abs(xp) < 1e-8:
779:             xp = 0
780:         if self._useLocale:
781:             return locale.format_string(self.format, (xp,))
782:         else:
783:             return self.format % xp
784: 
785:     def _formatSciNotation(self, s):
786:         # transform 1e+004 into 1e4, for example
787:         if self._useLocale:
788:             decimal_point = locale.localeconv()['decimal_point']
789:             positive_sign = locale.localeconv()['positive_sign']
790:         else:
791:             decimal_point = '.'
792:             positive_sign = '+'
793:         tup = s.split('e')
794:         try:
795:             significand = tup[0].rstrip('0').rstrip(decimal_point)
796:             sign = tup[1][0].replace(positive_sign, '')
797:             exponent = tup[1][1:].lstrip('0')
798:             if self._useMathText or self._usetex:
799:                 if significand == '1' and exponent != '':
800:                     # reformat 1x10^y as 10^y
801:                     significand = ''
802:                 if exponent:
803:                     exponent = '10^{%s%s}' % (sign, exponent)
804:                 if significand and exponent:
805:                     return r'%s{\times}%s' % (significand, exponent)
806:                 else:
807:                     return r'%s%s' % (significand, exponent)
808:             else:
809:                 s = ('%se%s%s' % (significand, sign, exponent)).rstrip('e')
810:                 return s
811:         except IndexError:
812:             return s
813: 
814: 
815: class LogFormatter(Formatter):
816:     '''
817:     Base class for formatting ticks on a log or symlog scale.
818: 
819:     It may be instantiated directly, or subclassed.
820: 
821:     Parameters
822:     ----------
823:     base : float, optional, default: 10.
824:         Base of the logarithm used in all calculations.
825: 
826:     labelOnlyBase : bool, optional, default: False
827:         If True, label ticks only at integer powers of base.
828:         This is normally True for major ticks and False for
829:         minor ticks.
830: 
831:     minor_thresholds : (subset, all), optional, default: (1, 0.4)
832:         If labelOnlyBase is False, these two numbers control
833:         the labeling of ticks that are not at integer powers of
834:         base; normally these are the minor ticks. The controlling
835:         parameter is the log of the axis data range.  In the typical
836:         case where base is 10 it is the number of decades spanned
837:         by the axis, so we can call it 'numdec'. If ``numdec <= all``,
838:         all minor ticks will be labeled.  If ``all < numdec <= subset``,
839:         then only a subset of minor ticks will be labeled, so as to
840:         avoid crowding. If ``numdec > subset`` then no minor ticks will
841:         be labeled.
842: 
843:     linthresh : None or float, optional, default: None
844:         If a symmetric log scale is in use, its ``linthresh``
845:         parameter must be supplied here.
846: 
847:     Notes
848:     -----
849:     The `set_locs` method must be called to enable the subsetting
850:     logic controlled by the ``minor_thresholds`` parameter.
851: 
852:     In some cases such as the colorbar, there is no distinction between
853:     major and minor ticks; the tick locations might be set manually,
854:     or by a locator that puts ticks at integer powers of base and
855:     at intermediate locations.  For this situation, disable the
856:     minor_thresholds logic by using ``minor_thresholds=(np.inf, np.inf)``,
857:     so that all ticks will be labeled.
858: 
859:     To disable labeling of minor ticks when 'labelOnlyBase' is False,
860:     use ``minor_thresholds=(0, 0)``.  This is the default for the
861:     "classic" style.
862: 
863:     Examples
864:     --------
865:     To label a subset of minor ticks when the view limits span up
866:     to 2 decades, and all of the ticks when zoomed in to 0.5 decades
867:     or less, use ``minor_thresholds=(2, 0.5)``.
868: 
869:     To label all minor ticks when the view limits span up to 1.5
870:     decades, use ``minor_thresholds=(1.5, 1.5)``.
871: 
872:     '''
873:     def __init__(self, base=10.0, labelOnlyBase=False,
874:                  minor_thresholds=None,
875:                  linthresh=None):
876: 
877:         self._base = float(base)
878:         self.labelOnlyBase = labelOnlyBase
879:         if minor_thresholds is None:
880:             if rcParams['_internal.classic_mode']:
881:                 minor_thresholds = (0, 0)
882:             else:
883:                 minor_thresholds = (1, 0.4)
884:         self.minor_thresholds = minor_thresholds
885:         self._sublabels = None
886:         self._linthresh = linthresh
887: 
888:     def base(self, base):
889:         '''
890:         change the `base` for labeling.
891: 
892:         .. warning::
893:            Should always match the base used for :class:`LogLocator`
894: 
895:         '''
896:         self._base = base
897: 
898:     def label_minor(self, labelOnlyBase):
899:         '''
900:         Switch minor tick labeling on or off.
901: 
902:         Parameters
903:         ----------
904:         labelOnlyBase : bool
905:             If True, label ticks only at integer powers of base.
906: 
907:         '''
908:         self.labelOnlyBase = labelOnlyBase
909: 
910:     def set_locs(self, locs=None):
911:         '''
912:         Use axis view limits to control which ticks are labeled.
913: 
914:         The ``locs`` parameter is ignored in the present algorithm.
915: 
916:         '''
917:         if np.isinf(self.minor_thresholds[0]):
918:             self._sublabels = None
919:             return
920: 
921:         # Handle symlog case:
922:         linthresh = self._linthresh
923:         if linthresh is None:
924:             try:
925:                 linthresh = self.axis.get_transform().linthresh
926:             except AttributeError:
927:                 pass
928: 
929:         vmin, vmax = self.axis.get_view_interval()
930:         if vmin > vmax:
931:             vmin, vmax = vmax, vmin
932: 
933:         if linthresh is None and vmin <= 0:
934:             # It's probably a colorbar with
935:             # a format kwarg setting a LogFormatter in the manner
936:             # that worked with 1.5.x, but that doesn't work now.
937:             self._sublabels = set((1,))  # label powers of base
938:             return
939: 
940:         b = self._base
941:         if linthresh is not None:  # symlog
942:             # Only compute the number of decades in the logarithmic part of the
943:             # axis
944:             numdec = 0
945:             if vmin < -linthresh:
946:                 rhs = min(vmax, -linthresh)
947:                 numdec += math.log(vmin / rhs) / math.log(b)
948:             if vmax > linthresh:
949:                 lhs = max(vmin, linthresh)
950:                 numdec += math.log(vmax / lhs) / math.log(b)
951:         else:
952:             vmin = math.log(vmin) / math.log(b)
953:             vmax = math.log(vmax) / math.log(b)
954:             numdec = abs(vmax - vmin)
955: 
956:         if numdec > self.minor_thresholds[0]:
957:             # Label only bases
958:             self._sublabels = {1}
959:         elif numdec > self.minor_thresholds[1]:
960:             # Add labels between bases at log-spaced coefficients;
961:             # include base powers in case the locations include
962:             # "major" and "minor" points, as in colorbar.
963:             c = np.logspace(0, 1, int(b)//2 + 1, base=b)
964:             self._sublabels = set(np.round(c))
965:             # For base 10, this yields (1, 2, 3, 4, 6, 10).
966:         else:
967:             # Label all integer multiples of base**n.
968:             self._sublabels = set(np.arange(1, b + 1))
969: 
970:     def _num_to_string(self, x, vmin, vmax):
971:         if x > 10000:
972:             s = '%1.0e' % x
973:         elif x < 1:
974:             s = '%1.0e' % x
975:         else:
976:             s = self.pprint_val(x, vmax - vmin)
977:         return s
978: 
979:     def __call__(self, x, pos=None):
980:         '''
981:         Return the format for tick val `x`.
982:         '''
983:         if x == 0.0:  # Symlog
984:             return '0'
985: 
986:         sign = np.sign(x)
987:         x = abs(x)
988:         b = self._base
989:         # only label the decades
990:         fx = math.log(x) / math.log(b)
991:         is_x_decade = is_close_to_int(fx)
992:         exponent = np.round(fx) if is_x_decade else np.floor(fx)
993:         coeff = np.round(x / b ** exponent)
994: 
995:         if self.labelOnlyBase and not is_x_decade:
996:             return ''
997:         if self._sublabels is not None and coeff not in self._sublabels:
998:             return ''
999: 
1000:         vmin, vmax = self.axis.get_view_interval()
1001:         vmin, vmax = mtransforms.nonsingular(vmin, vmax, expander=0.05)
1002:         s = self._num_to_string(x, vmin, vmax)
1003:         return self.fix_minus(s)
1004: 
1005:     def format_data(self, value):
1006:         b = self.labelOnlyBase
1007:         self.labelOnlyBase = False
1008:         value = cbook.strip_math(self.__call__(value))
1009:         self.labelOnlyBase = b
1010:         return value
1011: 
1012:     def format_data_short(self, value):
1013:         '''
1014:         Return a short formatted string representation of a number.
1015:         '''
1016:         return '%-12g' % value
1017: 
1018:     def pprint_val(self, x, d):
1019:         #if the number is not too big and it's an int, format it as an
1020:         #int
1021:         if abs(x) < 1e4 and x == int(x):
1022:             return '%d' % x
1023: 
1024:         if d < 1e-2:
1025:             fmt = '%1.3e'
1026:         elif d < 1e-1:
1027:             fmt = '%1.3f'
1028:         elif d > 1e5:
1029:             fmt = '%1.1e'
1030:         elif d > 10:
1031:             fmt = '%1.1f'
1032:         elif d > 1:
1033:             fmt = '%1.2f'
1034:         else:
1035:             fmt = '%1.3f'
1036:         s = fmt % x
1037: 
1038:         tup = s.split('e')
1039:         if len(tup) == 2:
1040:             mantissa = tup[0].rstrip('0').rstrip('.')
1041:             exponent = int(tup[1])
1042:             if exponent:
1043:                 s = '%se%d' % (mantissa, exponent)
1044:             else:
1045:                 s = mantissa
1046:         else:
1047:             s = s.rstrip('0').rstrip('.')
1048:         return s
1049: 
1050: 
1051: class LogFormatterExponent(LogFormatter):
1052:     '''
1053:     Format values for log axis using ``exponent = log_base(value)``.
1054:     '''
1055:     def _num_to_string(self, x, vmin, vmax):
1056:         fx = math.log(x) / math.log(self._base)
1057:         if abs(fx) > 10000:
1058:             s = '%1.0g' % fx
1059:         elif abs(fx) < 1:
1060:             s = '%1.0g' % fx
1061:         else:
1062:             fd = math.log(vmax - vmin) / math.log(self._base)
1063:             s = self.pprint_val(fx, fd)
1064:         return s
1065: 
1066: 
1067: class LogFormatterMathtext(LogFormatter):
1068:     '''
1069:     Format values for log axis using ``exponent = log_base(value)``.
1070:     '''
1071: 
1072:     def _non_decade_format(self, sign_string, base, fx, usetex):
1073:         'Return string for non-decade locations'
1074:         if usetex:
1075:             return (r'$%s%s^{%.2f}$') % (sign_string, base, fx)
1076:         else:
1077:             return ('$%s$' % _mathdefault('%s%s^{%.2f}' %
1078:                                           (sign_string, base, fx)))
1079: 
1080:     def __call__(self, x, pos=None):
1081:         '''
1082:         Return the format for tick value `x`.
1083: 
1084:         The position `pos` is ignored.
1085:         '''
1086:         usetex = rcParams['text.usetex']
1087:         min_exp = rcParams['axes.formatter.min_exponent']
1088: 
1089:         if x == 0:  # Symlog
1090:             if usetex:
1091:                 return '$0$'
1092:             else:
1093:                 return '$%s$' % _mathdefault('0')
1094: 
1095:         sign_string = '-' if x < 0 else ''
1096:         x = abs(x)
1097:         b = self._base
1098: 
1099:         # only label the decades
1100:         fx = math.log(x) / math.log(b)
1101:         is_x_decade = is_close_to_int(fx)
1102:         exponent = np.round(fx) if is_x_decade else np.floor(fx)
1103:         coeff = np.round(x / b ** exponent)
1104:         if is_x_decade:
1105:             fx = nearest_long(fx)
1106: 
1107:         if self.labelOnlyBase and not is_x_decade:
1108:             return ''
1109:         if self._sublabels is not None and coeff not in self._sublabels:
1110:             return ''
1111: 
1112:         # use string formatting of the base if it is not an integer
1113:         if b % 1 == 0.0:
1114:             base = '%d' % b
1115:         else:
1116:             base = '%s' % b
1117: 
1118:         if np.abs(fx) < min_exp:
1119:             if usetex:
1120:                 return r'${0}{1:g}$'.format(sign_string, x)
1121:             else:
1122:                 return '${0}$'.format(_mathdefault(
1123:                     '{0}{1:g}'.format(sign_string, x)))
1124:         elif not is_x_decade:
1125:             return self._non_decade_format(sign_string, base, fx, usetex)
1126:         else:
1127:             if usetex:
1128:                 return (r'$%s%s^{%d}$') % (sign_string,
1129:                                            base,
1130:                                            nearest_long(fx))
1131:             else:
1132:                 return ('$%s$' % _mathdefault(
1133:                     '%s%s^{%d}' %
1134:                     (sign_string, base, nearest_long(fx))))
1135: 
1136: 
1137: class LogFormatterSciNotation(LogFormatterMathtext):
1138:     '''
1139:     Format values following scientific notation in a logarithmic axis
1140:     '''
1141: 
1142:     def _non_decade_format(self, sign_string, base, fx, usetex):
1143:         'Return string for non-decade locations'
1144:         b = float(base)
1145:         exponent = math.floor(fx)
1146:         coeff = b ** fx / b ** exponent
1147:         if is_close_to_int(coeff):
1148:             coeff = nearest_long(coeff)
1149:         if usetex:
1150:             return (r'$%s%g\times%s^{%d}$') % \
1151:                                         (sign_string, coeff, base, exponent)
1152:         else:
1153:             return ('$%s$' % _mathdefault(r'%s%g\times%s^{%d}' %
1154:                                         (sign_string, coeff, base, exponent)))
1155: 
1156: 
1157: class LogitFormatter(Formatter):
1158:     '''
1159:     Probability formatter (using Math text).
1160:     '''
1161:     def __call__(self, x, pos=None):
1162:         s = ''
1163:         if 0.01 <= x <= 0.99:
1164:             s = '{:.2f}'.format(x)
1165:         elif x < 0.01:
1166:             if is_decade(x):
1167:                 s = '$10^{{{:.0f}}}$'.format(np.log10(x))
1168:             else:
1169:                 s = '${:.5f}$'.format(x)
1170:         else:  # x > 0.99
1171:             if is_decade(1-x):
1172:                 s = '$1-10^{{{:.0f}}}$'.format(np.log10(1-x))
1173:             else:
1174:                 s = '$1-{:.5f}$'.format(1-x)
1175:         return s
1176: 
1177:     def format_data_short(self, value):
1178:         'return a short formatted string representation of a number'
1179:         return '%-12g' % value
1180: 
1181: 
1182: class EngFormatter(Formatter):
1183:     '''
1184:     Formats axis values using engineering prefixes to represent powers
1185:     of 1000, plus a specified unit, e.g., 10 MHz instead of 1e7.
1186:     '''
1187: 
1188:     # The SI engineering prefixes
1189:     ENG_PREFIXES = {
1190:         -24: "y",
1191:         -21: "z",
1192:         -18: "a",
1193:         -15: "f",
1194:         -12: "p",
1195:          -9: "n",
1196:          -6: "\N{GREEK SMALL LETTER MU}",
1197:          -3: "m",
1198:           0: "",
1199:           3: "k",
1200:           6: "M",
1201:           9: "G",
1202:          12: "T",
1203:          15: "P",
1204:          18: "E",
1205:          21: "Z",
1206:          24: "Y"
1207:     }
1208: 
1209:     def __init__(self, unit="", places=None, sep=" "):
1210:         '''
1211:         Parameters
1212:         ----------
1213:         unit : str (default: "")
1214:             Unit symbol to use, suitable for use with single-letter
1215:             representations of powers of 1000. For example, 'Hz' or 'm'.
1216: 
1217:         places : int (default: None)
1218:             Precision with which to display the number, specified in
1219:             digits after the decimal point (there will be between one
1220:             and three digits before the decimal point). If it is None,
1221:             the formatting falls back to the floating point format '%g',
1222:             which displays up to 6 *significant* digits, i.e. the equivalent
1223:             value for *places* varies between 0 and 5 (inclusive).
1224: 
1225:         sep : str (default: " ")
1226:             Separator used between the value and the prefix/unit. For
1227:             example, one get '3.14 mV' if ``sep`` is " " (default) and
1228:             '3.14mV' if ``sep`` is "". Besides the default behavior, some
1229:             other useful options may be:
1230: 
1231:             * ``sep=""`` to append directly the prefix/unit to the value;
1232:             * ``sep="\\N{THIN SPACE}"`` (``U+2009``);
1233:             * ``sep="\\N{NARROW NO-BREAK SPACE}"`` (``U+202F``);
1234:             * ``sep="\\N{NO-BREAK SPACE}"`` (``U+00A0``).
1235:         '''
1236:         self.unit = unit
1237:         self.places = places
1238:         self.sep = sep
1239: 
1240:     def __call__(self, x, pos=None):
1241:         s = "%s%s" % (self.format_eng(x), self.unit)
1242:         # Remove the trailing separator when there is neither prefix nor unit
1243:         if len(self.sep) > 0 and s.endswith(self.sep):
1244:             s = s[:-len(self.sep)]
1245:         return self.fix_minus(s)
1246: 
1247:     def format_eng(self, num):
1248:         '''
1249:         Formats a number in engineering notation, appending a letter
1250:         representing the power of 1000 of the original number.
1251:         Some examples:
1252: 
1253:         >>> format_eng(0)       # for self.places = 0
1254:         '0'
1255: 
1256:         >>> format_eng(1000000) # for self.places = 1
1257:         '1.0 M'
1258: 
1259:         >>> format_eng("-1e-6") # for self.places = 2
1260:         u'-1.00 \N{GREEK SMALL LETTER MU}'
1261: 
1262:         `num` may be a numeric value or a string that can be converted
1263:         to a numeric value with ``float(num)``.
1264:         '''
1265:         if isinstance(num, six.string_types):
1266:             warnings.warn(
1267:                 "Passing a string as *num* argument is deprecated since"
1268:                 "Matplotlib 2.1, and is expected to be removed in 2.3.",
1269:                 mplDeprecation)
1270: 
1271:         dnum = float(num)
1272:         sign = 1
1273:         fmt = "g" if self.places is None else ".{:d}f".format(self.places)
1274: 
1275:         if dnum < 0:
1276:             sign = -1
1277:             dnum = -dnum
1278: 
1279:         if dnum != 0:
1280:             pow10 = int(math.floor(math.log10(dnum) / 3) * 3)
1281:         else:
1282:             pow10 = 0
1283:             # Force dnum to zero, to avoid inconsistencies like
1284:             # format_eng(-0) = "0" and format_eng(0.0) = "0"
1285:             # but format_eng(-0.0) = "-0.0"
1286:             dnum = 0.0
1287: 
1288:         pow10 = np.clip(pow10, min(self.ENG_PREFIXES), max(self.ENG_PREFIXES))
1289: 
1290:         mant = sign * dnum / (10.0 ** pow10)
1291:         # Taking care of the cases like 999.9..., which
1292:         # may be rounded to 1000 instead of 1 k.  Beware
1293:         # of the corner case of values that are beyond
1294:         # the range of SI prefixes (i.e. > 'Y').
1295:         _fmant = float("{mant:{fmt}}".format(mant=mant, fmt=fmt))
1296:         if _fmant >= 1000 and pow10 != max(self.ENG_PREFIXES):
1297:             mant /= 1000
1298:             pow10 += 3
1299: 
1300:         prefix = self.ENG_PREFIXES[int(pow10)]
1301: 
1302:         formatted = "{mant:{fmt}}{sep}{prefix}".format(
1303:             mant=mant, sep=self.sep, prefix=prefix, fmt=fmt)
1304: 
1305:         return formatted
1306: 
1307: 
1308: class PercentFormatter(Formatter):
1309:     '''
1310:     Format numbers as a percentage.
1311: 
1312:     How the number is converted into a percentage is determined by the
1313:     `xmax` parameter. `xmax` is the data value that corresponds to 100%.
1314:     Percentages are computed as ``x / xmax * 100``. So if the data is
1315:     already scaled to be percentages, `xmax` will be 100. Another common
1316:     situation is where `xmax` is 1.0.
1317: 
1318:     `symbol` is a string which will be appended to the label. It may be
1319:     `None` or empty to indicate that no symbol should be used. LaTeX
1320:     special characters are escaped in `symbol` whenever latex mode is
1321:     enabled, unless `is_latex` is `True`.
1322: 
1323:     `decimals` is the number of decimal places to place after the point.
1324:     If it is set to `None` (the default), the number will be computed
1325:     automatically.
1326:     '''
1327:     def __init__(self, xmax=100, decimals=None, symbol='%', is_latex=False):
1328:         self.xmax = xmax + 0.0
1329:         self.decimals = decimals
1330:         self._symbol = symbol
1331:         self._is_latex = is_latex
1332: 
1333:     def __call__(self, x, pos=None):
1334:         '''
1335:         Formats the tick as a percentage with the appropriate scaling.
1336:         '''
1337:         ax_min, ax_max = self.axis.get_view_interval()
1338:         display_range = abs(ax_max - ax_min)
1339: 
1340:         return self.fix_minus(self.format_pct(x, display_range))
1341: 
1342:     def format_pct(self, x, display_range):
1343:         '''
1344:         Formats the number as a percentage number with the correct
1345:         number of decimals and adds the percent symbol, if any.
1346: 
1347:         If `self.decimals` is `None`, the number of digits after the
1348:         decimal point is set based on the `display_range` of the axis
1349:         as follows:
1350: 
1351:         +---------------+----------+------------------------+
1352:         | display_range | decimals |          sample        |
1353:         +---------------+----------+------------------------+
1354:         | >50           |     0    | ``x = 34.5`` => 35%    |
1355:         +---------------+----------+------------------------+
1356:         | >5            |     1    | ``x = 34.5`` => 34.5%  |
1357:         +---------------+----------+------------------------+
1358:         | >0.5          |     2    | ``x = 34.5`` => 34.50% |
1359:         +---------------+----------+------------------------+
1360:         |      ...      |    ...   |          ...           |
1361:         +---------------+----------+------------------------+
1362: 
1363:         This method will not be very good for tiny axis ranges or
1364:         extremely large ones. It assumes that the values on the chart
1365:         are percentages displayed on a reasonable scale.
1366:         '''
1367:         x = self.convert_to_pct(x)
1368:         if self.decimals is None:
1369:             # conversion works because display_range is a difference
1370:             scaled_range = self.convert_to_pct(display_range)
1371:             if scaled_range <= 0:
1372:                 decimals = 0
1373:             else:
1374:                 # Luckily Python's built-in ceil rounds to +inf, not away from
1375:                 # zero. This is very important since the equation for decimals
1376:                 # starts out as `scaled_range > 0.5 * 10**(2 - decimals)`
1377:                 # and ends up with `decimals > 2 - log10(2 * scaled_range)`.
1378:                 decimals = math.ceil(2.0 - math.log10(2.0 * scaled_range))
1379:                 if decimals > 5:
1380:                     decimals = 5
1381:                 elif decimals < 0:
1382:                     decimals = 0
1383:         else:
1384:             decimals = self.decimals
1385:         s = '{x:0.{decimals}f}'.format(x=x, decimals=int(decimals))
1386: 
1387:         return s + self.symbol
1388: 
1389:     def convert_to_pct(self, x):
1390:         return 100.0 * (x / self.xmax)
1391: 
1392:     @property
1393:     def symbol(self):
1394:         '''
1395:         The configured percent symbol as a string.
1396: 
1397:         If LaTeX is enabled via ``rcParams['text.usetex']``, the special
1398:         characters `{'#', '$', '%', '&', '~', '_', '^', '\\', '{', '}'}`
1399:         are automatically escaped in the string.
1400:         '''
1401:         symbol = self._symbol
1402:         if not symbol:
1403:             symbol = ''
1404:         elif rcParams['text.usetex'] and not self._is_latex:
1405:             # Source: http://www.personal.ceu.hu/tex/specchar.htm
1406:             # Backslash must be first for this to work correctly since
1407:             # it keeps getting added in
1408:             for spec in r'\#$%&~_^{}':
1409:                 symbol = symbol.replace(spec, '\\' + spec)
1410:         return symbol
1411: 
1412:     @symbol.setter
1413:     def symbol(self):
1414:         self._symbol = symbol
1415: 
1416: 
1417: class Locator(TickHelper):
1418:     '''
1419:     Determine the tick locations;
1420: 
1421:     Note, you should not use the same locator between different
1422:     :class:`~matplotlib.axis.Axis` because the locator stores references to
1423:     the Axis data and view limits
1424:     '''
1425: 
1426:     # Some automatic tick locators can generate so many ticks they
1427:     # kill the machine when you try and render them.
1428:     # This parameter is set to cause locators to raise an error if too
1429:     # many ticks are generated.
1430:     MAXTICKS = 1000
1431: 
1432:     def tick_values(self, vmin, vmax):
1433:         '''
1434:         Return the values of the located ticks given **vmin** and **vmax**.
1435: 
1436:         .. note::
1437:             To get tick locations with the vmin and vmax values defined
1438:             automatically for the associated :attr:`axis` simply call
1439:             the Locator instance::
1440: 
1441:                 >>> print((type(loc)))
1442:                 <type 'Locator'>
1443:                 >>> print((loc()))
1444:                 [1, 2, 3, 4]
1445: 
1446:         '''
1447:         raise NotImplementedError('Derived must override')
1448: 
1449:     def set_params(self, **kwargs):
1450:         '''
1451:         Do nothing, and rase a warning. Any locator class not supporting the
1452:         set_params() function will call this.
1453:         '''
1454:         warnings.warn("'set_params()' not defined for locator of type " +
1455:                       str(type(self)))
1456: 
1457:     def __call__(self):
1458:         '''Return the locations of the ticks'''
1459:         # note: some locators return data limits, other return view limits,
1460:         # hence there is no *one* interface to call self.tick_values.
1461:         raise NotImplementedError('Derived must override')
1462: 
1463:     def raise_if_exceeds(self, locs):
1464:         '''raise a RuntimeError if Locator attempts to create more than
1465:            MAXTICKS locs'''
1466:         if len(locs) >= self.MAXTICKS:
1467:             msg = ('Locator attempting to generate %d ticks from %s to %s: ' +
1468:                    'exceeds Locator.MAXTICKS') % (len(locs), locs[0], locs[-1])
1469:             raise RuntimeError(msg)
1470: 
1471:         return locs
1472: 
1473:     def view_limits(self, vmin, vmax):
1474:         '''
1475:         select a scale for the range from vmin to vmax
1476: 
1477:         Normally this method is overridden by subclasses to
1478:         change locator behaviour.
1479:         '''
1480:         return mtransforms.nonsingular(vmin, vmax)
1481: 
1482:     def autoscale(self):
1483:         '''autoscale the view limits'''
1484:         return self.view_limits(*self.axis.get_view_interval())
1485: 
1486:     def pan(self, numsteps):
1487:         '''Pan numticks (can be positive or negative)'''
1488:         ticks = self()
1489:         numticks = len(ticks)
1490: 
1491:         vmin, vmax = self.axis.get_view_interval()
1492:         vmin, vmax = mtransforms.nonsingular(vmin, vmax, expander=0.05)
1493:         if numticks > 2:
1494:             step = numsteps * abs(ticks[0] - ticks[1])
1495:         else:
1496:             d = abs(vmax - vmin)
1497:             step = numsteps * d / 6.
1498: 
1499:         vmin += step
1500:         vmax += step
1501:         self.axis.set_view_interval(vmin, vmax, ignore=True)
1502: 
1503:     def zoom(self, direction):
1504:         "Zoom in/out on axis; if direction is >0 zoom in, else zoom out"
1505: 
1506:         vmin, vmax = self.axis.get_view_interval()
1507:         vmin, vmax = mtransforms.nonsingular(vmin, vmax, expander=0.05)
1508:         interval = abs(vmax - vmin)
1509:         step = 0.1 * interval * direction
1510:         self.axis.set_view_interval(vmin + step, vmax - step, ignore=True)
1511: 
1512:     def refresh(self):
1513:         '''refresh internal information based on current lim'''
1514:         pass
1515: 
1516: 
1517: class IndexLocator(Locator):
1518:     '''
1519:     Place a tick on every multiple of some base number of points
1520:     plotted, e.g., on every 5th point.  It is assumed that you are doing
1521:     index plotting; i.e., the axis is 0, len(data).  This is mainly
1522:     useful for x ticks.
1523:     '''
1524:     def __init__(self, base, offset):
1525:         'place ticks on the i-th data points where (i-offset)%base==0'
1526:         self._base = base
1527:         self.offset = offset
1528: 
1529:     def set_params(self, base=None, offset=None):
1530:         '''Set parameters within this locator'''
1531:         if base is not None:
1532:             self._base = base
1533:         if offset is not None:
1534:             self.offset = offset
1535: 
1536:     def __call__(self):
1537:         '''Return the locations of the ticks'''
1538:         dmin, dmax = self.axis.get_data_interval()
1539:         return self.tick_values(dmin, dmax)
1540: 
1541:     def tick_values(self, vmin, vmax):
1542:         return self.raise_if_exceeds(
1543:             np.arange(vmin + self.offset, vmax + 1, self._base))
1544: 
1545: 
1546: class FixedLocator(Locator):
1547:     '''
1548:     Tick locations are fixed.  If nbins is not None,
1549:     the array of possible positions will be subsampled to
1550:     keep the number of ticks <= nbins +1.
1551:     The subsampling will be done so as to include the smallest
1552:     absolute value; for example, if zero is included in the
1553:     array of possibilities, then it is guaranteed to be one of
1554:     the chosen ticks.
1555:     '''
1556: 
1557:     def __init__(self, locs, nbins=None):
1558:         self.locs = np.asarray(locs)
1559:         self.nbins = nbins
1560:         if self.nbins is not None:
1561:             self.nbins = max(self.nbins, 2)
1562: 
1563:     def set_params(self, nbins=None):
1564:         '''Set parameters within this locator.'''
1565:         if nbins is not None:
1566:             self.nbins = nbins
1567: 
1568:     def __call__(self):
1569:         return self.tick_values(None, None)
1570: 
1571:     def tick_values(self, vmin, vmax):
1572:         '''"
1573:         Return the locations of the ticks.
1574: 
1575:         .. note::
1576: 
1577:             Because the values are fixed, vmin and vmax are not used in this
1578:             method.
1579: 
1580:         '''
1581:         if self.nbins is None:
1582:             return self.locs
1583:         step = max(int(0.99 + len(self.locs) / float(self.nbins)), 1)
1584:         ticks = self.locs[::step]
1585:         for i in range(1, step):
1586:             ticks1 = self.locs[i::step]
1587:             if np.abs(ticks1).min() < np.abs(ticks).min():
1588:                 ticks = ticks1
1589:         return self.raise_if_exceeds(ticks)
1590: 
1591: 
1592: class NullLocator(Locator):
1593:     '''
1594:     No ticks
1595:     '''
1596: 
1597:     def __call__(self):
1598:         return self.tick_values(None, None)
1599: 
1600:     def tick_values(self, vmin, vmax):
1601:         '''"
1602:         Return the locations of the ticks.
1603: 
1604:         .. note::
1605: 
1606:             Because the values are Null, vmin and vmax are not used in this
1607:             method.
1608:         '''
1609:         return []
1610: 
1611: 
1612: class LinearLocator(Locator):
1613:     '''
1614:     Determine the tick locations
1615: 
1616:     The first time this function is called it will try to set the
1617:     number of ticks to make a nice tick partitioning.  Thereafter the
1618:     number of ticks will be fixed so that interactive navigation will
1619:     be nice
1620: 
1621:     '''
1622:     def __init__(self, numticks=None, presets=None):
1623:         '''
1624:         Use presets to set locs based on lom.  A dict mapping vmin, vmax->locs
1625:         '''
1626:         self.numticks = numticks
1627:         if presets is None:
1628:             self.presets = {}
1629:         else:
1630:             self.presets = presets
1631: 
1632:     def set_params(self, numticks=None, presets=None):
1633:         '''Set parameters within this locator.'''
1634:         if presets is not None:
1635:             self.presets = presets
1636:         if numticks is not None:
1637:             self.numticks = numticks
1638: 
1639:     def __call__(self):
1640:         'Return the locations of the ticks'
1641:         vmin, vmax = self.axis.get_view_interval()
1642:         return self.tick_values(vmin, vmax)
1643: 
1644:     def tick_values(self, vmin, vmax):
1645:         vmin, vmax = mtransforms.nonsingular(vmin, vmax, expander=0.05)
1646:         if vmax < vmin:
1647:             vmin, vmax = vmax, vmin
1648: 
1649:         if (vmin, vmax) in self.presets:
1650:             return self.presets[(vmin, vmax)]
1651: 
1652:         if self.numticks is None:
1653:             self._set_numticks()
1654: 
1655:         if self.numticks == 0:
1656:             return []
1657:         ticklocs = np.linspace(vmin, vmax, self.numticks)
1658: 
1659:         return self.raise_if_exceeds(ticklocs)
1660: 
1661:     def _set_numticks(self):
1662:         self.numticks = 11  # todo; be smart here; this is just for dev
1663: 
1664:     def view_limits(self, vmin, vmax):
1665:         'Try to choose the view limits intelligently'
1666: 
1667:         if vmax < vmin:
1668:             vmin, vmax = vmax, vmin
1669: 
1670:         if vmin == vmax:
1671:             vmin -= 1
1672:             vmax += 1
1673: 
1674:         if rcParams['axes.autolimit_mode'] == 'round_numbers':
1675:             exponent, remainder = _divmod(
1676:                 math.log10(vmax - vmin), math.log10(max(self.numticks - 1, 1)))
1677:             exponent -= (remainder < .5)
1678:             scale = max(self.numticks - 1, 1) ** (-exponent)
1679:             vmin = math.floor(scale * vmin) / scale
1680:             vmax = math.ceil(scale * vmax) / scale
1681: 
1682:         return mtransforms.nonsingular(vmin, vmax)
1683: 
1684: 
1685: def closeto(x, y):
1686:     if abs(x - y) < 1e-10:
1687:         return True
1688:     else:
1689:         return False
1690: 
1691: 
1692: class Base(object):
1693:     'this solution has some hacks to deal with floating point inaccuracies'
1694:     def __init__(self, base):
1695:         if base <= 0:
1696:             raise ValueError("'base' must be positive")
1697:         self._base = base
1698: 
1699:     def lt(self, x):
1700:         'return the largest multiple of base < x'
1701:         d, m = _divmod(x, self._base)
1702:         if closeto(m, 0) and not closeto(m / self._base, 1):
1703:             return (d - 1) * self._base
1704:         return d * self._base
1705: 
1706:     def le(self, x):
1707:         'return the largest multiple of base <= x'
1708:         d, m = _divmod(x, self._base)
1709:         if closeto(m / self._base, 1):  # was closeto(m, self._base)
1710:             #looks like floating point error
1711:             return (d + 1) * self._base
1712:         return d * self._base
1713: 
1714:     def gt(self, x):
1715:         'return the smallest multiple of base > x'
1716:         d, m = _divmod(x, self._base)
1717:         if closeto(m / self._base, 1):
1718:             #looks like floating point error
1719:             return (d + 2) * self._base
1720:         return (d + 1) * self._base
1721: 
1722:     def ge(self, x):
1723:         'return the smallest multiple of base >= x'
1724:         d, m = _divmod(x, self._base)
1725:         if closeto(m, 0) and not closeto(m / self._base, 1):
1726:             return d * self._base
1727:         return (d + 1) * self._base
1728: 
1729:     def get_base(self):
1730:         return self._base
1731: 
1732: 
1733: class MultipleLocator(Locator):
1734:     '''
1735:     Set a tick on every integer that is multiple of base in the
1736:     view interval
1737:     '''
1738: 
1739:     def __init__(self, base=1.0):
1740:         self._base = Base(base)
1741: 
1742:     def set_params(self, base):
1743:         '''Set parameters within this locator.'''
1744:         if base is not None:
1745:             self._base = base
1746: 
1747:     def __call__(self):
1748:         'Return the locations of the ticks'
1749:         vmin, vmax = self.axis.get_view_interval()
1750:         return self.tick_values(vmin, vmax)
1751: 
1752:     def tick_values(self, vmin, vmax):
1753:         if vmax < vmin:
1754:             vmin, vmax = vmax, vmin
1755:         vmin = self._base.ge(vmin)
1756:         base = self._base.get_base()
1757:         n = (vmax - vmin + 0.001 * base) // base
1758:         locs = vmin - base + np.arange(n + 3) * base
1759:         return self.raise_if_exceeds(locs)
1760: 
1761:     def view_limits(self, dmin, dmax):
1762:         '''
1763:         Set the view limits to the nearest multiples of base that
1764:         contain the data
1765:         '''
1766:         if rcParams['axes.autolimit_mode'] == 'round_numbers':
1767:             vmin = self._base.le(dmin)
1768:             vmax = self._base.ge(dmax)
1769:             if vmin == vmax:
1770:                 vmin -= 1
1771:                 vmax += 1
1772:         else:
1773:             vmin = dmin
1774:             vmax = dmax
1775: 
1776:         return mtransforms.nonsingular(vmin, vmax)
1777: 
1778: 
1779: def scale_range(vmin, vmax, n=1, threshold=100):
1780:     dv = abs(vmax - vmin)  # > 0 as nonsingular is called before.
1781:     meanv = (vmax + vmin) / 2
1782:     if abs(meanv) / dv < threshold:
1783:         offset = 0
1784:     else:
1785:         offset = math.copysign(10 ** (math.log10(abs(meanv)) // 1), meanv)
1786:     scale = 10 ** (math.log10(dv / n) // 1)
1787:     return scale, offset
1788: 
1789: 
1790: class MaxNLocator(Locator):
1791:     '''
1792:     Select no more than N intervals at nice locations.
1793:     '''
1794:     default_params = dict(nbins=10,
1795:                           steps=None,
1796:                           integer=False,
1797:                           symmetric=False,
1798:                           prune=None,
1799:                           min_n_ticks=2)
1800: 
1801:     def __init__(self, *args, **kwargs):
1802:         '''
1803:         Keyword args:
1804: 
1805:         *nbins*
1806:             Maximum number of intervals; one less than max number of
1807:             ticks.  If the string `'auto'`, the number of bins will be
1808:             automatically determined based on the length of the axis.
1809: 
1810:         *steps*
1811:             Sequence of nice numbers starting with 1 and ending with 10;
1812:             e.g., [1, 2, 4, 5, 10]
1813: 
1814:         *integer*
1815:             If True, ticks will take only integer values, provided
1816:             at least `min_n_ticks` integers are found within the
1817:             view limits.
1818: 
1819:         *symmetric*
1820:             If True, autoscaling will result in a range symmetric
1821:             about zero.
1822: 
1823:         *prune*
1824:             ['lower' | 'upper' | 'both' | None]
1825:             Remove edge ticks -- useful for stacked or ganged plots
1826:             where the upper tick of one axes overlaps with the lower
1827:             tick of the axes above it, primarily when
1828:             `rcParams['axes.autolimit_mode']` is `'round_numbers'`.
1829:             If `prune=='lower'`, the smallest tick will
1830:             be removed.  If `prune=='upper'`, the largest tick will be
1831:             removed.  If `prune=='both'`, the largest and smallest ticks
1832:             will be removed.  If `prune==None`, no ticks will be removed.
1833: 
1834:         *min_n_ticks*
1835:             Relax `nbins` and `integer` constraints if necessary to
1836:             obtain this minimum number of ticks.
1837: 
1838:         '''
1839:         if args:
1840:             kwargs['nbins'] = args[0]
1841:             if len(args) > 1:
1842:                 raise ValueError(
1843:                     "Keywords are required for all arguments except 'nbins'")
1844:         self.set_params(**self.default_params)
1845:         self.set_params(**kwargs)
1846: 
1847:     @staticmethod
1848:     def _validate_steps(steps):
1849:         if not np.iterable(steps):
1850:             raise ValueError('steps argument must be a sequence of numbers '
1851:                              'from 1 to 10')
1852:         steps = np.asarray(steps)
1853:         if np.any(np.diff(steps) <= 0):
1854:             raise ValueError('steps argument must be uniformly increasing')
1855:         if steps[-1] > 10 or steps[0] < 1:
1856:             warnings.warn('Steps argument should be a sequence of numbers\n'
1857:                           'increasing from 1 to 10, inclusive. Behavior with\n'
1858:                           'values outside this range is undefined, and will\n'
1859:                           'raise a ValueError in future versions of mpl.')
1860:         if steps[0] != 1:
1861:             steps = np.hstack((1, steps))
1862:         if steps[-1] != 10:
1863:             steps = np.hstack((steps, 10))
1864:         return steps
1865: 
1866:     @staticmethod
1867:     def _staircase(steps):
1868:         # Make an extended staircase within which the needed
1869:         # step will be found.  This is probably much larger
1870:         # than necessary.
1871:         flights = (0.1 * steps[:-1], steps, 10 * steps[1])
1872:         return np.hstack(flights)
1873: 
1874:     def set_params(self, **kwargs):
1875:         '''Set parameters within this locator.'''
1876:         if 'nbins' in kwargs:
1877:             self._nbins = kwargs['nbins']
1878:             if self._nbins != 'auto':
1879:                 self._nbins = int(self._nbins)
1880:         if 'trim' in kwargs:
1881:             warnings.warn(
1882:                 "The 'trim' keyword has no effect since version 2.0.",
1883:                 mplDeprecation)
1884:         if 'symmetric' in kwargs:
1885:             self._symmetric = kwargs['symmetric']
1886:         if 'prune' in kwargs:
1887:             prune = kwargs['prune']
1888:             if prune is not None and prune not in ['upper', 'lower', 'both']:
1889:                 raise ValueError(
1890:                     "prune must be 'upper', 'lower', 'both', or None")
1891:             self._prune = prune
1892:         if 'min_n_ticks' in kwargs:
1893:             self._min_n_ticks = max(1, kwargs['min_n_ticks'])
1894:         if 'steps' in kwargs:
1895:             steps = kwargs['steps']
1896:             if steps is None:
1897:                 self._steps = np.array([1, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10])
1898:             else:
1899:                 self._steps = self._validate_steps(steps)
1900:             self._extended_steps = self._staircase(self._steps)
1901:         if 'integer' in kwargs:
1902:             self._integer = kwargs['integer']
1903: 
1904:     def _raw_ticks(self, vmin, vmax):
1905:         if self._nbins == 'auto':
1906:             if self.axis is not None:
1907:                 nbins = np.clip(self.axis.get_tick_space(),
1908:                                 max(1, self._min_n_ticks - 1), 9)
1909:             else:
1910:                 nbins = 9
1911:         else:
1912:             nbins = self._nbins
1913: 
1914:         scale, offset = scale_range(vmin, vmax, nbins)
1915:         _vmin = vmin - offset
1916:         _vmax = vmax - offset
1917:         raw_step = (vmax - vmin) / nbins
1918:         steps = self._extended_steps * scale
1919:         if self._integer:
1920:             # For steps > 1, keep only integer values.
1921:             igood = (steps < 1) | (np.abs(steps - np.round(steps)) < 0.001)
1922:             steps = steps[igood]
1923: 
1924:         istep = np.nonzero(steps >= raw_step)[0][0]
1925: 
1926:         # Classic round_numbers mode may require a larger step.
1927:         if rcParams['axes.autolimit_mode'] == 'round_numbers':
1928:             for istep in range(istep, len(steps)):
1929:                 step = steps[istep]
1930:                 best_vmin = (_vmin // step) * step
1931:                 best_vmax = best_vmin + step * nbins
1932:                 if (best_vmax >= _vmax):
1933:                     break
1934: 
1935:         # This is an upper limit; move to smaller steps if necessary.
1936:         for i in range(istep):
1937:             step = steps[istep - i]
1938:             if (self._integer and
1939:                     np.floor(_vmax) - np.ceil(_vmin) >= self._min_n_ticks - 1):
1940:                 step = max(1, step)
1941:             best_vmin = (_vmin // step) * step
1942: 
1943:             low = np.round(Base(step).le(_vmin - best_vmin) / step)
1944:             high = np.round(Base(step).ge(_vmax - best_vmin) / step)
1945:             ticks = np.arange(low, high + 1) * step + best_vmin + offset
1946:             nticks = ((ticks <= vmax) & (ticks >= vmin)).sum()
1947:             if nticks >= self._min_n_ticks:
1948:                 break
1949:         return ticks
1950: 
1951:     @cbook.deprecated("2.0")
1952:     def bin_boundaries(self, vmin, vmax):
1953:         return self._raw_ticks(vmin, vmax)
1954: 
1955:     def __call__(self):
1956:         vmin, vmax = self.axis.get_view_interval()
1957:         return self.tick_values(vmin, vmax)
1958: 
1959:     def tick_values(self, vmin, vmax):
1960:         if self._symmetric:
1961:             vmax = max(abs(vmin), abs(vmax))
1962:             vmin = -vmax
1963:         vmin, vmax = mtransforms.nonsingular(
1964:             vmin, vmax, expander=1e-13, tiny=1e-14)
1965:         locs = self._raw_ticks(vmin, vmax)
1966: 
1967:         prune = self._prune
1968:         if prune == 'lower':
1969:             locs = locs[1:]
1970:         elif prune == 'upper':
1971:             locs = locs[:-1]
1972:         elif prune == 'both':
1973:             locs = locs[1:-1]
1974:         return self.raise_if_exceeds(locs)
1975: 
1976:     def view_limits(self, dmin, dmax):
1977:         if self._symmetric:
1978:             dmax = max(abs(dmin), abs(dmax))
1979:             dmin = -dmax
1980: 
1981:         dmin, dmax = mtransforms.nonsingular(
1982:             dmin, dmax, expander=1e-12, tiny=1e-13)
1983: 
1984:         if rcParams['axes.autolimit_mode'] == 'round_numbers':
1985:             return self._raw_ticks(dmin, dmax)[[0, -1]]
1986:         else:
1987:             return dmin, dmax
1988: 
1989: 
1990: def decade_down(x, base=10):
1991:     'floor x to the nearest lower decade'
1992:     if x == 0.0:
1993:         return -base
1994:     lx = np.floor(np.log(x) / np.log(base))
1995:     return base ** lx
1996: 
1997: 
1998: def decade_up(x, base=10):
1999:     'ceil x to the nearest higher decade'
2000:     if x == 0.0:
2001:         return base
2002:     lx = np.ceil(np.log(x) / np.log(base))
2003:     return base ** lx
2004: 
2005: 
2006: def nearest_long(x):
2007:     if x == 0:
2008:         return long(0)
2009:     elif x > 0:
2010:         return long(x + 0.5)
2011:     else:
2012:         return long(x - 0.5)
2013: 
2014: 
2015: def is_decade(x, base=10):
2016:     if not np.isfinite(x):
2017:         return False
2018:     if x == 0.0:
2019:         return True
2020:     lx = np.log(np.abs(x)) / np.log(base)
2021:     return is_close_to_int(lx)
2022: 
2023: 
2024: def is_close_to_int(x):
2025:     if not np.isfinite(x):
2026:         return False
2027:     return abs(x - nearest_long(x)) < 1e-10
2028: 
2029: 
2030: class LogLocator(Locator):
2031:     '''
2032:     Determine the tick locations for log axes
2033:     '''
2034: 
2035:     def __init__(self, base=10.0, subs=(1.0,), numdecs=4, numticks=None):
2036:         '''
2037:         Place ticks on the locations : subs[j] * base**i
2038: 
2039:         Parameters
2040:         ----------
2041:         subs : None, string, or sequence of float, optional, default (1.0,)
2042:             Gives the multiples of integer powers of the base at which
2043:             to place ticks.  The default places ticks only at
2044:             integer powers of the base.
2045:             The permitted string values are ``'auto'`` and ``'all'``,
2046:             both of which use an algorithm based on the axis view
2047:             limits to determine whether and how to put ticks between
2048:             integer powers of the base.  With ``'auto'``, ticks are
2049:             placed only between integer powers; with ``'all'``, the
2050:             integer powers are included.  A value of None is
2051:             equivalent to ``'auto'``.
2052: 
2053:         '''
2054:         if numticks is None:
2055:             if rcParams['_internal.classic_mode']:
2056:                 numticks = 15
2057:             else:
2058:                 numticks = 'auto'
2059:         self.base(base)
2060:         self.subs(subs)
2061:         self.numdecs = numdecs
2062:         self.numticks = numticks
2063: 
2064:     def set_params(self, base=None, subs=None, numdecs=None, numticks=None):
2065:         '''Set parameters within this locator.'''
2066:         if base is not None:
2067:             self.base(base)
2068:         if subs is not None:
2069:             self.subs(subs)
2070:         if numdecs is not None:
2071:             self.numdecs = numdecs
2072:         if numticks is not None:
2073:             self.numticks = numticks
2074: 
2075:     # FIXME: these base and subs functions are contrary to our
2076:     # usual and desired API.
2077: 
2078:     def base(self, base):
2079:         '''
2080:         set the base of the log scaling (major tick every base**i, i integer)
2081:         '''
2082:         self._base = float(base)
2083: 
2084:     def subs(self, subs):
2085:         '''
2086:         set the minor ticks for the log scaling every base**i*subs[j]
2087:         '''
2088:         if subs is None:  # consistency with previous bad API
2089:             self._subs = 'auto'
2090:         elif isinstance(subs, six.string_types):
2091:             if subs not in ('all', 'auto'):
2092:                 raise ValueError("A subs string must be 'all' or 'auto'; "
2093:                                  "found '%s'." % subs)
2094:             self._subs = subs
2095:         else:
2096:             self._subs = np.asarray(subs, dtype=float)
2097: 
2098:     def __call__(self):
2099:         'Return the locations of the ticks'
2100:         vmin, vmax = self.axis.get_view_interval()
2101:         return self.tick_values(vmin, vmax)
2102: 
2103:     def tick_values(self, vmin, vmax):
2104:         if self.numticks == 'auto':
2105:             if self.axis is not None:
2106:                 numticks = np.clip(self.axis.get_tick_space(), 2, 9)
2107:             else:
2108:                 numticks = 9
2109:         else:
2110:             numticks = self.numticks
2111: 
2112:         b = self._base
2113:         # dummy axis has no axes attribute
2114:         if hasattr(self.axis, 'axes') and self.axis.axes.name == 'polar':
2115:             vmax = math.ceil(math.log(vmax) / math.log(b))
2116:             decades = np.arange(vmax - self.numdecs, vmax)
2117:             ticklocs = b ** decades
2118: 
2119:             return ticklocs
2120: 
2121:         if vmin <= 0.0:
2122:             if self.axis is not None:
2123:                 vmin = self.axis.get_minpos()
2124: 
2125:             if vmin <= 0.0 or not np.isfinite(vmin):
2126:                 raise ValueError(
2127:                     "Data has no positive values, and therefore can not be "
2128:                     "log-scaled.")
2129: 
2130:         vmin = math.log(vmin) / math.log(b)
2131:         vmax = math.log(vmax) / math.log(b)
2132: 
2133:         if vmax < vmin:
2134:             vmin, vmax = vmax, vmin
2135: 
2136:         numdec = math.floor(vmax) - math.ceil(vmin)
2137: 
2138:         if isinstance(self._subs, six.string_types):
2139:             _first = 2.0 if self._subs == 'auto' else 1.0
2140:             if numdec > 10 or b < 3:
2141:                 if self._subs == 'auto':
2142:                     return np.array([])  # no minor or major ticks
2143:                 else:
2144:                     subs = np.array([1.0])  # major ticks
2145:             else:
2146:                 subs = np.arange(_first, b)
2147:         else:
2148:             subs = self._subs
2149: 
2150:         stride = 1
2151: 
2152:         if rcParams['_internal.classic_mode']:
2153:             # Leave the bug left over from the PY2-PY3 transition.
2154:             while numdec / stride + 1 > numticks:
2155:                 stride += 1
2156:         else:
2157:             while numdec // stride + 1 > numticks:
2158:                 stride += 1
2159: 
2160:         # Does subs include anything other than 1?
2161:         have_subs = len(subs) > 1 or (len(subs == 1) and subs[0] != 1.0)
2162: 
2163:         decades = np.arange(math.floor(vmin) - stride,
2164:                             math.ceil(vmax) + 2 * stride, stride)
2165: 
2166:         if hasattr(self, '_transform'):
2167:             ticklocs = self._transform.inverted().transform(decades)
2168:             if have_subs:
2169:                 if stride == 1:
2170:                     ticklocs = np.ravel(np.outer(subs, ticklocs))
2171:                 else:
2172:                     ticklocs = []
2173:         else:
2174:             if have_subs:
2175:                 ticklocs = []
2176:                 if stride == 1:
2177:                     for decadeStart in b ** decades:
2178:                         ticklocs.extend(subs * decadeStart)
2179:             else:
2180:                 ticklocs = b ** decades
2181: 
2182:         return self.raise_if_exceeds(np.asarray(ticklocs))
2183: 
2184:     def view_limits(self, vmin, vmax):
2185:         'Try to choose the view limits intelligently'
2186:         b = self._base
2187: 
2188:         vmin, vmax = self.nonsingular(vmin, vmax)
2189: 
2190:         if self.axis.axes.name == 'polar':
2191:             vmax = math.ceil(math.log(vmax) / math.log(b))
2192:             vmin = b ** (vmax - self.numdecs)
2193: 
2194:         if rcParams['axes.autolimit_mode'] == 'round_numbers':
2195:             if not is_decade(vmin, self._base):
2196:                 vmin = decade_down(vmin, self._base)
2197:             if not is_decade(vmax, self._base):
2198:                 vmax = decade_up(vmax, self._base)
2199: 
2200:         return vmin, vmax
2201: 
2202:     def nonsingular(self, vmin, vmax):
2203:         if not np.isfinite(vmin) or not np.isfinite(vmax):
2204:             return 1, 10  # initial range, no data plotted yet
2205: 
2206:         if vmin > vmax:
2207:             vmin, vmax = vmax, vmin
2208:         if vmax <= 0:
2209:             warnings.warn(
2210:                 "Data has no positive values, and therefore cannot be "
2211:                 "log-scaled.")
2212:             return 1, 10
2213: 
2214:         minpos = self.axis.get_minpos()
2215:         if not np.isfinite(minpos):
2216:             minpos = 1e-300  # This should never take effect.
2217:         if vmin <= 0:
2218:             vmin = minpos
2219:         if vmin == vmax:
2220:             vmin = decade_down(vmin, self._base)
2221:             vmax = decade_up(vmax, self._base)
2222:         return vmin, vmax
2223: 
2224: 
2225: class SymmetricalLogLocator(Locator):
2226:     '''
2227:     Determine the tick locations for symmetric log axes
2228:     '''
2229: 
2230:     def __init__(self, transform=None, subs=None, linthresh=None, base=None):
2231:         '''
2232:         place ticks on the location= base**i*subs[j]
2233:         '''
2234:         if transform is not None:
2235:             self._base = transform.base
2236:             self._linthresh = transform.linthresh
2237:         elif linthresh is not None and base is not None:
2238:             self._base = base
2239:             self._linthresh = linthresh
2240:         else:
2241:             raise ValueError("Either transform, or both linthresh "
2242:                              "and base, must be provided.")
2243:         if subs is None:
2244:             self._subs = [1.0]
2245:         else:
2246:             self._subs = subs
2247:         self.numticks = 15
2248: 
2249:     def set_params(self, subs=None, numticks=None):
2250:         '''Set parameters within this locator.'''
2251:         if numticks is not None:
2252:             self.numticks = numticks
2253:         if subs is not None:
2254:             self._subs = subs
2255: 
2256:     def __call__(self):
2257:         'Return the locations of the ticks'
2258:         # Note, these are untransformed coordinates
2259:         vmin, vmax = self.axis.get_view_interval()
2260:         return self.tick_values(vmin, vmax)
2261: 
2262:     def tick_values(self, vmin, vmax):
2263:         b = self._base
2264:         t = self._linthresh
2265: 
2266:         if vmax < vmin:
2267:             vmin, vmax = vmax, vmin
2268: 
2269:         # The domain is divided into three sections, only some of
2270:         # which may actually be present.
2271:         #
2272:         # <======== -t ==0== t ========>
2273:         # aaaaaaaaa    bbbbb   ccccccccc
2274:         #
2275:         # a) and c) will have ticks at integral log positions.  The
2276:         # number of ticks needs to be reduced if there are more
2277:         # than self.numticks of them.
2278:         #
2279:         # b) has a tick at 0 and only 0 (we assume t is a small
2280:         # number, and the linear segment is just an implementation
2281:         # detail and not interesting.)
2282:         #
2283:         # We could also add ticks at t, but that seems to usually be
2284:         # uninteresting.
2285:         #
2286:         # "simple" mode is when the range falls entirely within (-t,
2287:         # t) -- it should just display (vmin, 0, vmax)
2288: 
2289:         has_a = has_b = has_c = False
2290:         if vmin < -t:
2291:             has_a = True
2292:             if vmax > -t:
2293:                 has_b = True
2294:                 if vmax > t:
2295:                     has_c = True
2296:         elif vmin < 0:
2297:             if vmax > 0:
2298:                 has_b = True
2299:                 if vmax > t:
2300:                     has_c = True
2301:             else:
2302:                 return [vmin, vmax]
2303:         elif vmin < t:
2304:             if vmax > t:
2305:                 has_b = True
2306:                 has_c = True
2307:             else:
2308:                 return [vmin, vmax]
2309:         else:
2310:             has_c = True
2311: 
2312:         def get_log_range(lo, hi):
2313:             lo = np.floor(np.log(lo) / np.log(b))
2314:             hi = np.ceil(np.log(hi) / np.log(b))
2315:             return lo, hi
2316: 
2317:         # First, calculate all the ranges, so we can determine striding
2318:         if has_a:
2319:             if has_b:
2320:                 a_range = get_log_range(t, -vmin + 1)
2321:             else:
2322:                 a_range = get_log_range(-vmax, -vmin + 1)
2323:         else:
2324:             a_range = (0, 0)
2325: 
2326:         if has_c:
2327:             if has_b:
2328:                 c_range = get_log_range(t, vmax + 1)
2329:             else:
2330:                 c_range = get_log_range(vmin, vmax + 1)
2331:         else:
2332:             c_range = (0, 0)
2333: 
2334:         total_ticks = (a_range[1] - a_range[0]) + (c_range[1] - c_range[0])
2335:         if has_b:
2336:             total_ticks += 1
2337:         stride = max(np.floor(float(total_ticks) / (self.numticks - 1)), 1)
2338: 
2339:         decades = []
2340:         if has_a:
2341:             decades.extend(-1 * (b ** (np.arange(a_range[0], a_range[1],
2342:                                                  stride)[::-1])))
2343: 
2344:         if has_b:
2345:             decades.append(0.0)
2346: 
2347:         if has_c:
2348:             decades.extend(b ** (np.arange(c_range[0], c_range[1], stride)))
2349: 
2350:         # Add the subticks if requested
2351:         if self._subs is None:
2352:             subs = np.arange(2.0, b)
2353:         else:
2354:             subs = np.asarray(self._subs)
2355: 
2356:         if len(subs) > 1 or subs[0] != 1.0:
2357:             ticklocs = []
2358:             for decade in decades:
2359:                 ticklocs.extend(subs * decade)
2360:         else:
2361:             ticklocs = decades
2362: 
2363:         return self.raise_if_exceeds(np.array(ticklocs))
2364: 
2365:     def view_limits(self, vmin, vmax):
2366:         'Try to choose the view limits intelligently'
2367:         b = self._base
2368:         if vmax < vmin:
2369:             vmin, vmax = vmax, vmin
2370: 
2371:         if rcParams['axes.autolimit_mode'] == 'round_numbers':
2372:             if not is_decade(abs(vmin), b):
2373:                 if vmin < 0:
2374:                     vmin = -decade_up(-vmin, b)
2375:                 else:
2376:                     vmin = decade_down(vmin, b)
2377:             if not is_decade(abs(vmax), b):
2378:                 if vmax < 0:
2379:                     vmax = -decade_down(-vmax, b)
2380:                 else:
2381:                     vmax = decade_up(vmax, b)
2382: 
2383:             if vmin == vmax:
2384:                 if vmin < 0:
2385:                     vmin = -decade_up(-vmin, b)
2386:                     vmax = -decade_down(-vmax, b)
2387:                 else:
2388:                     vmin = decade_down(vmin, b)
2389:                     vmax = decade_up(vmax, b)
2390: 
2391:         result = mtransforms.nonsingular(vmin, vmax)
2392:         return result
2393: 
2394: 
2395: class LogitLocator(Locator):
2396:     '''
2397:     Determine the tick locations for logit axes
2398:     '''
2399: 
2400:     def __init__(self, minor=False):
2401:         '''
2402:         place ticks on the logit locations
2403:         '''
2404:         self.minor = minor
2405: 
2406:     def set_params(self, minor=None):
2407:         '''Set parameters within this locator.'''
2408:         if minor is not None:
2409:             self.minor = minor
2410: 
2411:     def __call__(self):
2412:         'Return the locations of the ticks'
2413:         vmin, vmax = self.axis.get_view_interval()
2414:         return self.tick_values(vmin, vmax)
2415: 
2416:     def tick_values(self, vmin, vmax):
2417:         # dummy axis has no axes attribute
2418:         if hasattr(self.axis, 'axes') and self.axis.axes.name == 'polar':
2419:             raise NotImplementedError('Polar axis cannot be logit scaled yet')
2420: 
2421:         vmin, vmax = self.nonsingular(vmin, vmax)
2422:         vmin = np.log10(vmin / (1 - vmin))
2423:         vmax = np.log10(vmax / (1 - vmax))
2424: 
2425:         decade_min = np.floor(vmin)
2426:         decade_max = np.ceil(vmax)
2427: 
2428:         # major ticks
2429:         if not self.minor:
2430:             ticklocs = []
2431:             if (decade_min <= -1):
2432:                 expo = np.arange(decade_min, min(0, decade_max + 1))
2433:                 ticklocs.extend(list(10**expo))
2434:             if (decade_min <= 0) and (decade_max >= 0):
2435:                 ticklocs.append(0.5)
2436:             if (decade_max >= 1):
2437:                 expo = -np.arange(max(1, decade_min), decade_max + 1)
2438:                 ticklocs.extend(list(1 - 10**expo))
2439: 
2440:         # minor ticks
2441:         else:
2442:             ticklocs = []
2443:             if (decade_min <= -2):
2444:                 expo = np.arange(decade_min, min(-1, decade_max))
2445:                 newticks = np.outer(np.arange(2, 10), 10**expo).ravel()
2446:                 ticklocs.extend(list(newticks))
2447:             if (decade_min <= 0) and (decade_max >= 0):
2448:                 ticklocs.extend([0.2, 0.3, 0.4, 0.6, 0.7, 0.8])
2449:             if (decade_max >= 2):
2450:                 expo = -np.arange(max(2, decade_min), decade_max + 1)
2451:                 newticks = 1 - np.outer(np.arange(2, 10), 10**expo).ravel()
2452:                 ticklocs.extend(list(newticks))
2453: 
2454:         return self.raise_if_exceeds(np.array(ticklocs))
2455: 
2456:     def nonsingular(self, vmin, vmax):
2457:         initial_range = (1e-7, 1 - 1e-7)
2458:         if not np.isfinite(vmin) or not np.isfinite(vmax):
2459:             return initial_range  # no data plotted yet
2460: 
2461:         if vmin > vmax:
2462:             vmin, vmax = vmax, vmin
2463: 
2464:         # what to do if a window beyond ]0, 1[ is chosen
2465:         if self.axis is not None:
2466:             minpos = self.axis.get_minpos()
2467:             if not np.isfinite(minpos):
2468:                 return initial_range  # again, no data plotted
2469:         else:
2470:             minpos = 1e-7  # should not occur in normal use
2471: 
2472:         # NOTE: for vmax, we should query a property similar to get_minpos, but
2473:         # related to the maximal, less-than-one data point. Unfortunately,
2474:         # Bbox._minpos is defined very deep in the BBox and updated with data,
2475:         # so for now we use 1 - minpos as a substitute.
2476: 
2477:         if vmin <= 0:
2478:             vmin = minpos
2479:         if vmax >= 1:
2480:             vmax = 1 - minpos
2481:         if vmin == vmax:
2482:             return 0.1 * vmin, 1 - 0.1 * vmin
2483: 
2484:         return vmin, vmax
2485: 
2486: 
2487: class AutoLocator(MaxNLocator):
2488:     def __init__(self):
2489:         if rcParams['_internal.classic_mode']:
2490:             nbins = 9
2491:             steps = [1, 2, 5, 10]
2492:         else:
2493:             nbins = 'auto'
2494:             steps = [1, 2, 2.5, 5, 10]
2495:         MaxNLocator.__init__(self, nbins=nbins, steps=steps)
2496: 
2497: 
2498: class AutoMinorLocator(Locator):
2499:     '''
2500:     Dynamically find minor tick positions based on the positions of
2501:     major ticks. The scale must be linear with major ticks evenly spaced.
2502:     '''
2503:     def __init__(self, n=None):
2504:         '''
2505:         *n* is the number of subdivisions of the interval between
2506:         major ticks; e.g., n=2 will place a single minor tick midway
2507:         between major ticks.
2508: 
2509:         If *n* is omitted or None, it will be set to 5 or 4.
2510:         '''
2511:         self.ndivs = n
2512: 
2513:     def __call__(self):
2514:         'Return the locations of the ticks'
2515:         if self.axis.get_scale() == 'log':
2516:             warnings.warn('AutoMinorLocator does not work with logarithmic '
2517:                           'scale')
2518:             return []
2519: 
2520:         majorlocs = self.axis.get_majorticklocs()
2521:         try:
2522:             majorstep = majorlocs[1] - majorlocs[0]
2523:         except IndexError:
2524:             # Need at least two major ticks to find minor tick locations
2525:             # TODO: Figure out a way to still be able to display minor
2526:             # ticks without two major ticks visible. For now, just display
2527:             # no ticks at all.
2528:             majorstep = 0
2529: 
2530:         if self.ndivs is None:
2531:             if majorstep == 0:
2532:                 # TODO: Need a better way to figure out ndivs
2533:                 ndivs = 1
2534:             else:
2535:                 x = int(np.round(10 ** (np.log10(majorstep) % 1)))
2536:                 if x in [1, 5, 10]:
2537:                     ndivs = 5
2538:                 else:
2539:                     ndivs = 4
2540:         else:
2541:             ndivs = self.ndivs
2542: 
2543:         minorstep = majorstep / ndivs
2544: 
2545:         vmin, vmax = self.axis.get_view_interval()
2546:         if vmin > vmax:
2547:             vmin, vmax = vmax, vmin
2548: 
2549:         if len(majorlocs) > 0:
2550:             t0 = majorlocs[0]
2551:             tmin = ((vmin - t0) // minorstep + 1) * minorstep
2552:             tmax = ((vmax - t0) // minorstep + 1) * minorstep
2553:             locs = np.arange(tmin, tmax, minorstep) + t0
2554:             cond = np.abs((locs - t0) % majorstep) > minorstep / 10.0
2555:             locs = locs.compress(cond)
2556:         else:
2557:             locs = []
2558: 
2559:         return self.raise_if_exceeds(np.array(locs))
2560: 
2561:     def tick_values(self, vmin, vmax):
2562:         raise NotImplementedError('Cannot get tick locations for a '
2563:                                   '%s type.' % type(self))
2564: 
2565: 
2566: class OldAutoLocator(Locator):
2567:     '''
2568:     On autoscale this class picks the best MultipleLocator to set the
2569:     view limits and the tick locs.
2570: 
2571:     '''
2572:     def __init__(self):
2573:         self._locator = LinearLocator()
2574: 
2575:     def __call__(self):
2576:         'Return the locations of the ticks'
2577:         self.refresh()
2578:         return self.raise_if_exceeds(self._locator())
2579: 
2580:     def tick_values(self, vmin, vmax):
2581:         raise NotImplementedError('Cannot get tick locations for a '
2582:                                   '%s type.' % type(self))
2583: 
2584:     def refresh(self):
2585:         'refresh internal information based on current lim'
2586:         vmin, vmax = self.axis.get_view_interval()
2587:         vmin, vmax = mtransforms.nonsingular(vmin, vmax, expander=0.05)
2588:         d = abs(vmax - vmin)
2589:         self._locator = self.get_locator(d)
2590: 
2591:     def view_limits(self, vmin, vmax):
2592:         'Try to choose the view limits intelligently'
2593: 
2594:         d = abs(vmax - vmin)
2595:         self._locator = self.get_locator(d)
2596:         return self._locator.view_limits(vmin, vmax)
2597: 
2598:     def get_locator(self, d):
2599:         'pick the best locator based on a distance'
2600:         d = abs(d)
2601:         if d <= 0:
2602:             locator = MultipleLocator(0.2)
2603:         else:
2604: 
2605:             try:
2606:                 ld = math.log10(d)
2607:             except OverflowError:
2608:                 raise RuntimeError('AutoLocator illegal data interval range')
2609: 
2610:             fld = math.floor(ld)
2611:             base = 10 ** fld
2612: 
2613:             #if ld==fld:  base = 10**(fld-1)
2614:             #else:        base = 10**fld
2615: 
2616:             if d >= 5 * base:
2617:                 ticksize = base
2618:             elif d >= 2 * base:
2619:                 ticksize = base / 2.0
2620:             else:
2621:                 ticksize = base / 5.0
2622:             locator = MultipleLocator(ticksize)
2623: 
2624:         return locator
2625: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_146373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, (-1)), 'unicode', u'\nTick locating and formatting\n============================\n\nThis module contains classes to support completely configurable tick\nlocating and formatting. Although the locators know nothing about major\nor minor ticks, they are used by the Axis class to support major and\nminor tick locating and formatting. Generic tick locators and\nformatters are provided, as well as domain specific custom ones.\n\nDefault Formatter\n-----------------\n\nThe default formatter identifies when the x-data being plotted is a\nsmall range on top of a large off set. To reduce the chances that the\nticklabels overlap the ticks are labeled as deltas from a fixed offset.\nFor example::\n\n   ax.plot(np.arange(2000, 2010), range(10))\n\nwill have tick of 0-9 with an offset of +2e3. If this is not desired\nturn off the use of the offset on the default formatter::\n\n   ax.get_xaxis().get_major_formatter().set_useOffset(False)\n\nset the rcParam ``axes.formatter.useoffset=False`` to turn it off\nglobally, or set a different formatter.\n\nTick locating\n-------------\n\nThe Locator class is the base class for all tick locators. The locators\nhandle autoscaling of the view limits based on the data limits, and the\nchoosing of tick locations. A useful semi-automatic tick locator is\n`MultipleLocator`. It is initialized with a base, e.g., 10, and it picks\naxis limits and ticks that are multiples of that base.\n\nThe Locator subclasses defined here are\n\n:class:`NullLocator`\n    No ticks\n\n:class:`FixedLocator`\n    Tick locations are fixed\n\n:class:`IndexLocator`\n    locator for index plots (e.g., where x = range(len(y)))\n\n:class:`LinearLocator`\n    evenly spaced ticks from min to max\n\n:class:`LogLocator`\n    logarithmically ticks from min to max\n\n:class:`SymmetricalLogLocator`\n    locator for use with with the symlog norm, works like the\n    `LogLocator` for the part outside of the threshold and add 0 if\n    inside the limits\n\n:class:`MultipleLocator`\n    ticks and range are a multiple of base; either integer or float\n\n:class:`OldAutoLocator`\n    choose a MultipleLocator and dyamically reassign it for\n    intelligent ticking during navigation\n\n:class:`MaxNLocator`\n    finds up to a max number of ticks at nice locations\n\n:class:`AutoLocator`\n    :class:`MaxNLocator` with simple defaults. This is the default\n    tick locator for most plotting.\n\n:class:`AutoMinorLocator`\n    locator for minor ticks when the axis is linear and the\n    major ticks are uniformly spaced. It subdivides the major\n    tick interval into a specified number of minor intervals,\n    defaulting to 4 or 5 depending on the major interval.\n\n:class:`LogitLocator`\n    Locator for logit scaling.\n\n\nThere are a number of locators specialized for date locations - see\nthe dates module\n\nYou can define your own locator by deriving from Locator. You must\noverride the ``__call__`` method, which returns a sequence of locations,\nand you will probably want to override the autoscale method to set the\nview limits from the data limits.\n\nIf you want to override the default locator, use one of the above or a\ncustom locator and pass it to the x or y axis instance. The relevant\nmethods are::\n\n  ax.xaxis.set_major_locator( xmajorLocator )\n  ax.xaxis.set_minor_locator( xminorLocator )\n  ax.yaxis.set_major_locator( ymajorLocator )\n  ax.yaxis.set_minor_locator( yminorLocator )\n\nThe default minor locator is the NullLocator, e.g., no minor ticks on by\ndefault.\n\nTick formatting\n---------------\n\nTick formatting is controlled by classes derived from Formatter. The\nformatter operates on a single tick value and returns a string to the\naxis.\n\n:class:`NullFormatter`\n    No labels on the ticks\n\n:class:`IndexFormatter`\n    Set the strings from a list of labels\n\n:class:`FixedFormatter`\n    Set the strings manually for the labels\n\n:class:`FuncFormatter`\n    User defined function sets the labels\n\n:class:`StrMethodFormatter`\n    Use string `format` method\n\n:class:`FormatStrFormatter`\n    Use an old-style sprintf format string\n\n:class:`ScalarFormatter`\n    Default formatter for scalars: autopick the format string\n\n:class:`LogFormatter`\n    Formatter for log axes\n\n:class:`LogFormatterExponent`\n    Format values for log axis using ``exponent = log_base(value)``.\n\n:class:`LogFormatterMathtext`\n    Format values for log axis using ``exponent = log_base(value)``\n    using Math text.\n\n:class:`LogFormatterSciNotation`\n    Format values for log axis using scientific notation.\n\n:class:`LogitFormatter`\n    Probability formatter.\n\n:class:`EngFormatter`\n    Format labels in engineering notation\n\n:class:`PercentFormatter`\n    Format labels as a percentage\n\nYou can derive your own formatter from the Formatter base class by\nsimply overriding the ``__call__`` method. The formatter class has\naccess to the axis view and data limits.\n\nTo control the major and minor tick label formats, use one of the\nfollowing methods::\n\n  ax.xaxis.set_major_formatter( xmajorFormatter )\n  ax.xaxis.set_minor_formatter( xminorFormatter )\n  ax.yaxis.set_major_formatter( ymajorFormatter )\n  ax.yaxis.set_minor_formatter( yminorFormatter )\n\nSee :ref:`sphx_glr_gallery_ticks_and_spines_major_minor_demo.py` for an\nexample of setting major and minor ticks. See the :mod:`matplotlib.dates`\nmodule for more information and examples of using date locators and formatters.\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 174, 0))

# 'import six' statement (line 174)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_146374 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 174, 0), 'six')

if (type(import_146374) is not StypyTypeError):

    if (import_146374 != 'pyd_module'):
        __import__(import_146374)
        sys_modules_146375 = sys.modules[import_146374]
        import_module(stypy.reporting.localization.Localization(__file__, 174, 0), 'six', sys_modules_146375.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 174, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 174)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 174, 0), 'six', import_146374)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 176, 0))

# 'import itertools' statement (line 176)
import itertools

import_module(stypy.reporting.localization.Localization(__file__, 176, 0), 'itertools', itertools, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 177, 0))

# 'import locale' statement (line 177)
import locale

import_module(stypy.reporting.localization.Localization(__file__, 177, 0), 'locale', locale, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 178, 0))

# 'import math' statement (line 178)
import math

import_module(stypy.reporting.localization.Localization(__file__, 178, 0), 'math', math, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 179, 0))

# 'import numpy' statement (line 179)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_146376 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 179, 0), 'numpy')

if (type(import_146376) is not StypyTypeError):

    if (import_146376 != 'pyd_module'):
        __import__(import_146376)
        sys_modules_146377 = sys.modules[import_146376]
        import_module(stypy.reporting.localization.Localization(__file__, 179, 0), 'np', sys_modules_146377.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 179, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 179)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 179, 0), 'numpy', import_146376)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 180, 0))

# 'from matplotlib import rcParams' statement (line 180)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_146378 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 180, 0), 'matplotlib')

if (type(import_146378) is not StypyTypeError):

    if (import_146378 != 'pyd_module'):
        __import__(import_146378)
        sys_modules_146379 = sys.modules[import_146378]
        import_from_module(stypy.reporting.localization.Localization(__file__, 180, 0), 'matplotlib', sys_modules_146379.module_type_store, module_type_store, ['rcParams'])
        nest_module(stypy.reporting.localization.Localization(__file__, 180, 0), __file__, sys_modules_146379, sys_modules_146379.module_type_store, module_type_store)
    else:
        from matplotlib import rcParams

        import_from_module(stypy.reporting.localization.Localization(__file__, 180, 0), 'matplotlib', None, module_type_store, ['rcParams'], [rcParams])

else:
    # Assigning a type to the variable 'matplotlib' (line 180)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 180, 0), 'matplotlib', import_146378)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 181, 0))

# 'from matplotlib import cbook' statement (line 181)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_146380 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 181, 0), 'matplotlib')

if (type(import_146380) is not StypyTypeError):

    if (import_146380 != 'pyd_module'):
        __import__(import_146380)
        sys_modules_146381 = sys.modules[import_146380]
        import_from_module(stypy.reporting.localization.Localization(__file__, 181, 0), 'matplotlib', sys_modules_146381.module_type_store, module_type_store, ['cbook'])
        nest_module(stypy.reporting.localization.Localization(__file__, 181, 0), __file__, sys_modules_146381, sys_modules_146381.module_type_store, module_type_store)
    else:
        from matplotlib import cbook

        import_from_module(stypy.reporting.localization.Localization(__file__, 181, 0), 'matplotlib', None, module_type_store, ['cbook'], [cbook])

else:
    # Assigning a type to the variable 'matplotlib' (line 181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 0), 'matplotlib', import_146380)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 182, 0))

# 'from matplotlib import mtransforms' statement (line 182)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_146382 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 182, 0), 'matplotlib')

if (type(import_146382) is not StypyTypeError):

    if (import_146382 != 'pyd_module'):
        __import__(import_146382)
        sys_modules_146383 = sys.modules[import_146382]
        import_from_module(stypy.reporting.localization.Localization(__file__, 182, 0), 'matplotlib', sys_modules_146383.module_type_store, module_type_store, ['transforms'])
        nest_module(stypy.reporting.localization.Localization(__file__, 182, 0), __file__, sys_modules_146383, sys_modules_146383.module_type_store, module_type_store)
    else:
        from matplotlib import transforms as mtransforms

        import_from_module(stypy.reporting.localization.Localization(__file__, 182, 0), 'matplotlib', None, module_type_store, ['transforms'], [mtransforms])

else:
    # Assigning a type to the variable 'matplotlib' (line 182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 182, 0), 'matplotlib', import_146382)

# Adding an alias
module_type_store.add_alias('mtransforms', 'transforms')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 183, 0))

# 'from matplotlib.cbook import mplDeprecation' statement (line 183)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_146384 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 183, 0), 'matplotlib.cbook')

if (type(import_146384) is not StypyTypeError):

    if (import_146384 != 'pyd_module'):
        __import__(import_146384)
        sys_modules_146385 = sys.modules[import_146384]
        import_from_module(stypy.reporting.localization.Localization(__file__, 183, 0), 'matplotlib.cbook', sys_modules_146385.module_type_store, module_type_store, ['mplDeprecation'])
        nest_module(stypy.reporting.localization.Localization(__file__, 183, 0), __file__, sys_modules_146385, sys_modules_146385.module_type_store, module_type_store)
    else:
        from matplotlib.cbook import mplDeprecation

        import_from_module(stypy.reporting.localization.Localization(__file__, 183, 0), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 0), 'matplotlib.cbook', import_146384)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 185, 0))

# 'import warnings' statement (line 185)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 185, 0), 'warnings', warnings, module_type_store)


# Assigning a Tuple to a Name (line 188):

# Assigning a Tuple to a Name (line 188):

# Obtaining an instance of the builtin type 'tuple' (line 188)
tuple_146386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 11), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 188)
# Adding element type (line 188)
unicode_146387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 11), 'unicode', u'TickHelper')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146387)
# Adding element type (line 188)
unicode_146388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 25), 'unicode', u'Formatter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146388)
# Adding element type (line 188)
unicode_146389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 38), 'unicode', u'FixedFormatter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146389)
# Adding element type (line 188)
unicode_146390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 11), 'unicode', u'NullFormatter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146390)
# Adding element type (line 188)
unicode_146391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 28), 'unicode', u'FuncFormatter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146391)
# Adding element type (line 188)
unicode_146392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 45), 'unicode', u'FormatStrFormatter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146392)
# Adding element type (line 188)
unicode_146393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 11), 'unicode', u'StrMethodFormatter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146393)
# Adding element type (line 188)
unicode_146394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 33), 'unicode', u'ScalarFormatter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146394)
# Adding element type (line 188)
unicode_146395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 52), 'unicode', u'LogFormatter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146395)
# Adding element type (line 188)
unicode_146396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 11), 'unicode', u'LogFormatterExponent')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146396)
# Adding element type (line 188)
unicode_146397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 35), 'unicode', u'LogFormatterMathtext')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146397)
# Adding element type (line 188)
unicode_146398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 11), 'unicode', u'IndexFormatter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146398)
# Adding element type (line 188)
unicode_146399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 29), 'unicode', u'LogFormatterSciNotation')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146399)
# Adding element type (line 188)
unicode_146400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 11), 'unicode', u'LogitFormatter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146400)
# Adding element type (line 188)
unicode_146401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 29), 'unicode', u'EngFormatter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146401)
# Adding element type (line 188)
unicode_146402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 45), 'unicode', u'PercentFormatter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146402)
# Adding element type (line 188)
unicode_146403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 11), 'unicode', u'Locator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146403)
# Adding element type (line 188)
unicode_146404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 22), 'unicode', u'IndexLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146404)
# Adding element type (line 188)
unicode_146405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 38), 'unicode', u'FixedLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146405)
# Adding element type (line 188)
unicode_146406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 54), 'unicode', u'NullLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146406)
# Adding element type (line 188)
unicode_146407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 11), 'unicode', u'LinearLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146407)
# Adding element type (line 188)
unicode_146408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 28), 'unicode', u'LogLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146408)
# Adding element type (line 188)
unicode_146409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 42), 'unicode', u'AutoLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146409)
# Adding element type (line 188)
unicode_146410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 11), 'unicode', u'MultipleLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146410)
# Adding element type (line 188)
unicode_146411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 30), 'unicode', u'MaxNLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146411)
# Adding element type (line 188)
unicode_146412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 45), 'unicode', u'AutoMinorLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146412)
# Adding element type (line 188)
unicode_146413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 197, 11), 'unicode', u'SymmetricalLogLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146413)
# Adding element type (line 188)
unicode_146414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 197, 36), 'unicode', u'LogitLocator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 11), tuple_146386, unicode_146414)

# Assigning a type to the variable '__all__' (line 188)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 188, 0), '__all__', tuple_146386)

# Getting the type of 'six' (line 200)
six_146415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 3), 'six')
# Obtaining the member 'PY3' of a type (line 200)
PY3_146416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 3), six_146415, 'PY3')
# Testing the type of an if condition (line 200)
if_condition_146417 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 200, 0), PY3_146416)
# Assigning a type to the variable 'if_condition_146417' (line 200)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 200, 0), 'if_condition_146417', if_condition_146417)
# SSA begins for if statement (line 200)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Name to a Name (line 201):

# Assigning a Name to a Name (line 201):
# Getting the type of 'int' (line 201)
int_146418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 11), 'int')
# Assigning a type to the variable 'long' (line 201)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 4), 'long', int_146418)
# SSA join for if statement (line 200)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def _divmod(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_divmod'
    module_type_store = module_type_store.open_function_context('_divmod', 205, 0, False)
    
    # Passed parameters checking function
    _divmod.stypy_localization = localization
    _divmod.stypy_type_of_self = None
    _divmod.stypy_type_store = module_type_store
    _divmod.stypy_function_name = '_divmod'
    _divmod.stypy_param_names_list = ['x', 'y']
    _divmod.stypy_varargs_param_name = None
    _divmod.stypy_kwargs_param_name = None
    _divmod.stypy_call_defaults = defaults
    _divmod.stypy_call_varargs = varargs
    _divmod.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_divmod', ['x', 'y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_divmod', localization, ['x', 'y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_divmod(...)' code ##################

    
    
    # Call to isinstance(...): (line 206)
    # Processing the call arguments (line 206)
    # Getting the type of 'x' (line 206)
    x_146420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 18), 'x', False)
    # Getting the type of 'np' (line 206)
    np_146421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 21), 'np', False)
    # Obtaining the member 'generic' of a type (line 206)
    generic_146422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 21), np_146421, 'generic')
    # Processing the call keyword arguments (line 206)
    kwargs_146423 = {}
    # Getting the type of 'isinstance' (line 206)
    isinstance_146419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 206)
    isinstance_call_result_146424 = invoke(stypy.reporting.localization.Localization(__file__, 206, 7), isinstance_146419, *[x_146420, generic_146422], **kwargs_146423)
    
    # Testing the type of an if condition (line 206)
    if_condition_146425 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 206, 4), isinstance_call_result_146424)
    # Assigning a type to the variable 'if_condition_146425' (line 206)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 4), 'if_condition_146425', if_condition_146425)
    # SSA begins for if statement (line 206)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 207):
    
    # Assigning a Call to a Name (line 207):
    
    # Call to item(...): (line 207)
    # Processing the call keyword arguments (line 207)
    kwargs_146428 = {}
    # Getting the type of 'x' (line 207)
    x_146426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 12), 'x', False)
    # Obtaining the member 'item' of a type (line 207)
    item_146427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 12), x_146426, 'item')
    # Calling item(args, kwargs) (line 207)
    item_call_result_146429 = invoke(stypy.reporting.localization.Localization(__file__, 207, 12), item_146427, *[], **kwargs_146428)
    
    # Assigning a type to the variable 'x' (line 207)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 8), 'x', item_call_result_146429)
    # SSA join for if statement (line 206)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isinstance(...): (line 208)
    # Processing the call arguments (line 208)
    # Getting the type of 'y' (line 208)
    y_146431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 18), 'y', False)
    # Getting the type of 'np' (line 208)
    np_146432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 21), 'np', False)
    # Obtaining the member 'generic' of a type (line 208)
    generic_146433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 21), np_146432, 'generic')
    # Processing the call keyword arguments (line 208)
    kwargs_146434 = {}
    # Getting the type of 'isinstance' (line 208)
    isinstance_146430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 208)
    isinstance_call_result_146435 = invoke(stypy.reporting.localization.Localization(__file__, 208, 7), isinstance_146430, *[y_146431, generic_146433], **kwargs_146434)
    
    # Testing the type of an if condition (line 208)
    if_condition_146436 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 208, 4), isinstance_call_result_146435)
    # Assigning a type to the variable 'if_condition_146436' (line 208)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 4), 'if_condition_146436', if_condition_146436)
    # SSA begins for if statement (line 208)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 209):
    
    # Assigning a Call to a Name (line 209):
    
    # Call to item(...): (line 209)
    # Processing the call keyword arguments (line 209)
    kwargs_146439 = {}
    # Getting the type of 'y' (line 209)
    y_146437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 12), 'y', False)
    # Obtaining the member 'item' of a type (line 209)
    item_146438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 12), y_146437, 'item')
    # Calling item(args, kwargs) (line 209)
    item_call_result_146440 = invoke(stypy.reporting.localization.Localization(__file__, 209, 12), item_146438, *[], **kwargs_146439)
    
    # Assigning a type to the variable 'y' (line 209)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 209, 8), 'y', item_call_result_146440)
    # SSA join for if statement (line 208)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to divmod(...): (line 210)
    # Processing the call arguments (line 210)
    # Getting the type of 'x' (line 210)
    x_146445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 37), 'x', False)
    # Getting the type of 'y' (line 210)
    y_146446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 40), 'y', False)
    # Processing the call keyword arguments (line 210)
    kwargs_146447 = {}
    # Getting the type of 'six' (line 210)
    six_146441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 11), 'six', False)
    # Obtaining the member 'moves' of a type (line 210)
    moves_146442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 11), six_146441, 'moves')
    # Obtaining the member 'builtins' of a type (line 210)
    builtins_146443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 11), moves_146442, 'builtins')
    # Obtaining the member 'divmod' of a type (line 210)
    divmod_146444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 11), builtins_146443, 'divmod')
    # Calling divmod(args, kwargs) (line 210)
    divmod_call_result_146448 = invoke(stypy.reporting.localization.Localization(__file__, 210, 11), divmod_146444, *[x_146445, y_146446], **kwargs_146447)
    
    # Assigning a type to the variable 'stypy_return_type' (line 210)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'stypy_return_type', divmod_call_result_146448)
    
    # ################# End of '_divmod(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_divmod' in the type store
    # Getting the type of 'stypy_return_type' (line 205)
    stypy_return_type_146449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_146449)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_divmod'
    return stypy_return_type_146449

# Assigning a type to the variable '_divmod' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), '_divmod', _divmod)

@norecursion
def _mathdefault(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_mathdefault'
    module_type_store = module_type_store.open_function_context('_mathdefault', 213, 0, False)
    
    # Passed parameters checking function
    _mathdefault.stypy_localization = localization
    _mathdefault.stypy_type_of_self = None
    _mathdefault.stypy_type_store = module_type_store
    _mathdefault.stypy_function_name = '_mathdefault'
    _mathdefault.stypy_param_names_list = ['s']
    _mathdefault.stypy_varargs_param_name = None
    _mathdefault.stypy_kwargs_param_name = None
    _mathdefault.stypy_call_defaults = defaults
    _mathdefault.stypy_call_varargs = varargs
    _mathdefault.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_mathdefault', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_mathdefault', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_mathdefault(...)' code ##################

    unicode_146450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 11), 'unicode', u'\\mathdefault{%s}')
    # Getting the type of 's' (line 214)
    s_146451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 33), 's')
    # Applying the binary operator '%' (line 214)
    result_mod_146452 = python_operator(stypy.reporting.localization.Localization(__file__, 214, 11), '%', unicode_146450, s_146451)
    
    # Assigning a type to the variable 'stypy_return_type' (line 214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 4), 'stypy_return_type', result_mod_146452)
    
    # ################# End of '_mathdefault(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_mathdefault' in the type store
    # Getting the type of 'stypy_return_type' (line 213)
    stypy_return_type_146453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_146453)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_mathdefault'
    return stypy_return_type_146453

# Assigning a type to the variable '_mathdefault' (line 213)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 0), '_mathdefault', _mathdefault)
# Declaration of the '_DummyAxis' class

class _DummyAxis(object, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_146454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 30), 'int')
        defaults = [int_146454]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 218, 4, False)
        # Assigning a type to the variable 'self' (line 219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DummyAxis.__init__', ['minpos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['minpos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 219):
        
        # Assigning a Call to a Attribute (line 219):
        
        # Call to unit(...): (line 219)
        # Processing the call keyword arguments (line 219)
        kwargs_146458 = {}
        # Getting the type of 'mtransforms' (line 219)
        mtransforms_146455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 23), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 219)
        Bbox_146456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 23), mtransforms_146455, 'Bbox')
        # Obtaining the member 'unit' of a type (line 219)
        unit_146457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 23), Bbox_146456, 'unit')
        # Calling unit(args, kwargs) (line 219)
        unit_call_result_146459 = invoke(stypy.reporting.localization.Localization(__file__, 219, 23), unit_146457, *[], **kwargs_146458)
        
        # Getting the type of 'self' (line 219)
        self_146460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 8), 'self')
        # Setting the type of the member 'dataLim' of a type (line 219)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 8), self_146460, 'dataLim', unit_call_result_146459)
        
        # Assigning a Call to a Attribute (line 220):
        
        # Assigning a Call to a Attribute (line 220):
        
        # Call to unit(...): (line 220)
        # Processing the call keyword arguments (line 220)
        kwargs_146464 = {}
        # Getting the type of 'mtransforms' (line 220)
        mtransforms_146461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 23), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 220)
        Bbox_146462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 23), mtransforms_146461, 'Bbox')
        # Obtaining the member 'unit' of a type (line 220)
        unit_146463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 23), Bbox_146462, 'unit')
        # Calling unit(args, kwargs) (line 220)
        unit_call_result_146465 = invoke(stypy.reporting.localization.Localization(__file__, 220, 23), unit_146463, *[], **kwargs_146464)
        
        # Getting the type of 'self' (line 220)
        self_146466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 8), 'self')
        # Setting the type of the member 'viewLim' of a type (line 220)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 8), self_146466, 'viewLim', unit_call_result_146465)
        
        # Assigning a Name to a Attribute (line 221):
        
        # Assigning a Name to a Attribute (line 221):
        # Getting the type of 'minpos' (line 221)
        minpos_146467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 23), 'minpos')
        # Getting the type of 'self' (line 221)
        self_146468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'self')
        # Setting the type of the member '_minpos' of a type (line 221)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 8), self_146468, '_minpos', minpos_146467)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_view_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_view_interval'
        module_type_store = module_type_store.open_function_context('get_view_interval', 223, 4, False)
        # Assigning a type to the variable 'self' (line 224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _DummyAxis.get_view_interval.__dict__.__setitem__('stypy_localization', localization)
        _DummyAxis.get_view_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _DummyAxis.get_view_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        _DummyAxis.get_view_interval.__dict__.__setitem__('stypy_function_name', '_DummyAxis.get_view_interval')
        _DummyAxis.get_view_interval.__dict__.__setitem__('stypy_param_names_list', [])
        _DummyAxis.get_view_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        _DummyAxis.get_view_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _DummyAxis.get_view_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        _DummyAxis.get_view_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        _DummyAxis.get_view_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _DummyAxis.get_view_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DummyAxis.get_view_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_view_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_view_interval(...)' code ##################

        # Getting the type of 'self' (line 224)
        self_146469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 15), 'self')
        # Obtaining the member 'viewLim' of a type (line 224)
        viewLim_146470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 15), self_146469, 'viewLim')
        # Obtaining the member 'intervalx' of a type (line 224)
        intervalx_146471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 15), viewLim_146470, 'intervalx')
        # Assigning a type to the variable 'stypy_return_type' (line 224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 8), 'stypy_return_type', intervalx_146471)
        
        # ################# End of 'get_view_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_view_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 223)
        stypy_return_type_146472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146472)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_view_interval'
        return stypy_return_type_146472


    @norecursion
    def set_view_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_view_interval'
        module_type_store = module_type_store.open_function_context('set_view_interval', 226, 4, False)
        # Assigning a type to the variable 'self' (line 227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 227, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _DummyAxis.set_view_interval.__dict__.__setitem__('stypy_localization', localization)
        _DummyAxis.set_view_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _DummyAxis.set_view_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        _DummyAxis.set_view_interval.__dict__.__setitem__('stypy_function_name', '_DummyAxis.set_view_interval')
        _DummyAxis.set_view_interval.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        _DummyAxis.set_view_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        _DummyAxis.set_view_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _DummyAxis.set_view_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        _DummyAxis.set_view_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        _DummyAxis.set_view_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _DummyAxis.set_view_interval.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DummyAxis.set_view_interval', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_view_interval', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_view_interval(...)' code ##################

        
        # Assigning a Tuple to a Attribute (line 227):
        
        # Assigning a Tuple to a Attribute (line 227):
        
        # Obtaining an instance of the builtin type 'tuple' (line 227)
        tuple_146473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 227)
        # Adding element type (line 227)
        # Getting the type of 'vmin' (line 227)
        vmin_146474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 33), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 227, 33), tuple_146473, vmin_146474)
        # Adding element type (line 227)
        # Getting the type of 'vmax' (line 227)
        vmax_146475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 39), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 227, 33), tuple_146473, vmax_146475)
        
        # Getting the type of 'self' (line 227)
        self_146476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 8), 'self')
        # Obtaining the member 'viewLim' of a type (line 227)
        viewLim_146477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 8), self_146476, 'viewLim')
        # Setting the type of the member 'intervalx' of a type (line 227)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 8), viewLim_146477, 'intervalx', tuple_146473)
        
        # ################# End of 'set_view_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_view_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 226)
        stypy_return_type_146478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146478)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_view_interval'
        return stypy_return_type_146478


    @norecursion
    def get_minpos(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_minpos'
        module_type_store = module_type_store.open_function_context('get_minpos', 229, 4, False)
        # Assigning a type to the variable 'self' (line 230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 230, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _DummyAxis.get_minpos.__dict__.__setitem__('stypy_localization', localization)
        _DummyAxis.get_minpos.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _DummyAxis.get_minpos.__dict__.__setitem__('stypy_type_store', module_type_store)
        _DummyAxis.get_minpos.__dict__.__setitem__('stypy_function_name', '_DummyAxis.get_minpos')
        _DummyAxis.get_minpos.__dict__.__setitem__('stypy_param_names_list', [])
        _DummyAxis.get_minpos.__dict__.__setitem__('stypy_varargs_param_name', None)
        _DummyAxis.get_minpos.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _DummyAxis.get_minpos.__dict__.__setitem__('stypy_call_defaults', defaults)
        _DummyAxis.get_minpos.__dict__.__setitem__('stypy_call_varargs', varargs)
        _DummyAxis.get_minpos.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _DummyAxis.get_minpos.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DummyAxis.get_minpos', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_minpos', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_minpos(...)' code ##################

        # Getting the type of 'self' (line 230)
        self_146479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 15), 'self')
        # Obtaining the member '_minpos' of a type (line 230)
        _minpos_146480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 15), self_146479, '_minpos')
        # Assigning a type to the variable 'stypy_return_type' (line 230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 230, 8), 'stypy_return_type', _minpos_146480)
        
        # ################# End of 'get_minpos(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_minpos' in the type store
        # Getting the type of 'stypy_return_type' (line 229)
        stypy_return_type_146481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146481)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_minpos'
        return stypy_return_type_146481


    @norecursion
    def get_data_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_data_interval'
        module_type_store = module_type_store.open_function_context('get_data_interval', 232, 4, False)
        # Assigning a type to the variable 'self' (line 233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _DummyAxis.get_data_interval.__dict__.__setitem__('stypy_localization', localization)
        _DummyAxis.get_data_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _DummyAxis.get_data_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        _DummyAxis.get_data_interval.__dict__.__setitem__('stypy_function_name', '_DummyAxis.get_data_interval')
        _DummyAxis.get_data_interval.__dict__.__setitem__('stypy_param_names_list', [])
        _DummyAxis.get_data_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        _DummyAxis.get_data_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _DummyAxis.get_data_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        _DummyAxis.get_data_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        _DummyAxis.get_data_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _DummyAxis.get_data_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DummyAxis.get_data_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_data_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_data_interval(...)' code ##################

        # Getting the type of 'self' (line 233)
        self_146482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 15), 'self')
        # Obtaining the member 'dataLim' of a type (line 233)
        dataLim_146483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 15), self_146482, 'dataLim')
        # Obtaining the member 'intervalx' of a type (line 233)
        intervalx_146484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 15), dataLim_146483, 'intervalx')
        # Assigning a type to the variable 'stypy_return_type' (line 233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 8), 'stypy_return_type', intervalx_146484)
        
        # ################# End of 'get_data_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_data_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 232)
        stypy_return_type_146485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146485)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_data_interval'
        return stypy_return_type_146485


    @norecursion
    def set_data_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_data_interval'
        module_type_store = module_type_store.open_function_context('set_data_interval', 235, 4, False)
        # Assigning a type to the variable 'self' (line 236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 236, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _DummyAxis.set_data_interval.__dict__.__setitem__('stypy_localization', localization)
        _DummyAxis.set_data_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _DummyAxis.set_data_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        _DummyAxis.set_data_interval.__dict__.__setitem__('stypy_function_name', '_DummyAxis.set_data_interval')
        _DummyAxis.set_data_interval.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        _DummyAxis.set_data_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        _DummyAxis.set_data_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _DummyAxis.set_data_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        _DummyAxis.set_data_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        _DummyAxis.set_data_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _DummyAxis.set_data_interval.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DummyAxis.set_data_interval', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_data_interval', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_data_interval(...)' code ##################

        
        # Assigning a Tuple to a Attribute (line 236):
        
        # Assigning a Tuple to a Attribute (line 236):
        
        # Obtaining an instance of the builtin type 'tuple' (line 236)
        tuple_146486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 236)
        # Adding element type (line 236)
        # Getting the type of 'vmin' (line 236)
        vmin_146487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 33), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 236, 33), tuple_146486, vmin_146487)
        # Adding element type (line 236)
        # Getting the type of 'vmax' (line 236)
        vmax_146488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 39), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 236, 33), tuple_146486, vmax_146488)
        
        # Getting the type of 'self' (line 236)
        self_146489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 8), 'self')
        # Obtaining the member 'dataLim' of a type (line 236)
        dataLim_146490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 8), self_146489, 'dataLim')
        # Setting the type of the member 'intervalx' of a type (line 236)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 8), dataLim_146490, 'intervalx', tuple_146486)
        
        # ################# End of 'set_data_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_data_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 235)
        stypy_return_type_146491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146491)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_data_interval'
        return stypy_return_type_146491


    @norecursion
    def get_tick_space(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_tick_space'
        module_type_store = module_type_store.open_function_context('get_tick_space', 238, 4, False)
        # Assigning a type to the variable 'self' (line 239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 239, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _DummyAxis.get_tick_space.__dict__.__setitem__('stypy_localization', localization)
        _DummyAxis.get_tick_space.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _DummyAxis.get_tick_space.__dict__.__setitem__('stypy_type_store', module_type_store)
        _DummyAxis.get_tick_space.__dict__.__setitem__('stypy_function_name', '_DummyAxis.get_tick_space')
        _DummyAxis.get_tick_space.__dict__.__setitem__('stypy_param_names_list', [])
        _DummyAxis.get_tick_space.__dict__.__setitem__('stypy_varargs_param_name', None)
        _DummyAxis.get_tick_space.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _DummyAxis.get_tick_space.__dict__.__setitem__('stypy_call_defaults', defaults)
        _DummyAxis.get_tick_space.__dict__.__setitem__('stypy_call_varargs', varargs)
        _DummyAxis.get_tick_space.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _DummyAxis.get_tick_space.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DummyAxis.get_tick_space', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_tick_space', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_tick_space(...)' code ##################

        int_146492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 15), 'int')
        # Assigning a type to the variable 'stypy_return_type' (line 240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'stypy_return_type', int_146492)
        
        # ################# End of 'get_tick_space(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_tick_space' in the type store
        # Getting the type of 'stypy_return_type' (line 238)
        stypy_return_type_146493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146493)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_tick_space'
        return stypy_return_type_146493


# Assigning a type to the variable '_DummyAxis' (line 217)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 0), '_DummyAxis', _DummyAxis)
# Declaration of the 'TickHelper' class

class TickHelper(object, ):
    
    # Assigning a Name to a Name (line 244):

    @norecursion
    def set_axis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_axis'
        module_type_store = module_type_store.open_function_context('set_axis', 246, 4, False)
        # Assigning a type to the variable 'self' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TickHelper.set_axis.__dict__.__setitem__('stypy_localization', localization)
        TickHelper.set_axis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TickHelper.set_axis.__dict__.__setitem__('stypy_type_store', module_type_store)
        TickHelper.set_axis.__dict__.__setitem__('stypy_function_name', 'TickHelper.set_axis')
        TickHelper.set_axis.__dict__.__setitem__('stypy_param_names_list', ['axis'])
        TickHelper.set_axis.__dict__.__setitem__('stypy_varargs_param_name', None)
        TickHelper.set_axis.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TickHelper.set_axis.__dict__.__setitem__('stypy_call_defaults', defaults)
        TickHelper.set_axis.__dict__.__setitem__('stypy_call_varargs', varargs)
        TickHelper.set_axis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TickHelper.set_axis.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TickHelper.set_axis', ['axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_axis', localization, ['axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_axis(...)' code ##################

        
        # Assigning a Name to a Attribute (line 247):
        
        # Assigning a Name to a Attribute (line 247):
        # Getting the type of 'axis' (line 247)
        axis_146494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 20), 'axis')
        # Getting the type of 'self' (line 247)
        self_146495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 8), 'self')
        # Setting the type of the member 'axis' of a type (line 247)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 8), self_146495, 'axis', axis_146494)
        
        # ################# End of 'set_axis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_axis' in the type store
        # Getting the type of 'stypy_return_type' (line 246)
        stypy_return_type_146496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146496)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_axis'
        return stypy_return_type_146496


    @norecursion
    def create_dummy_axis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'create_dummy_axis'
        module_type_store = module_type_store.open_function_context('create_dummy_axis', 249, 4, False)
        # Assigning a type to the variable 'self' (line 250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 250, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TickHelper.create_dummy_axis.__dict__.__setitem__('stypy_localization', localization)
        TickHelper.create_dummy_axis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TickHelper.create_dummy_axis.__dict__.__setitem__('stypy_type_store', module_type_store)
        TickHelper.create_dummy_axis.__dict__.__setitem__('stypy_function_name', 'TickHelper.create_dummy_axis')
        TickHelper.create_dummy_axis.__dict__.__setitem__('stypy_param_names_list', [])
        TickHelper.create_dummy_axis.__dict__.__setitem__('stypy_varargs_param_name', None)
        TickHelper.create_dummy_axis.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        TickHelper.create_dummy_axis.__dict__.__setitem__('stypy_call_defaults', defaults)
        TickHelper.create_dummy_axis.__dict__.__setitem__('stypy_call_varargs', varargs)
        TickHelper.create_dummy_axis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TickHelper.create_dummy_axis.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TickHelper.create_dummy_axis', [], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'create_dummy_axis', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'create_dummy_axis(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 250)
        # Getting the type of 'self' (line 250)
        self_146497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 11), 'self')
        # Obtaining the member 'axis' of a type (line 250)
        axis_146498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 250, 11), self_146497, 'axis')
        # Getting the type of 'None' (line 250)
        None_146499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 24), 'None')
        
        (may_be_146500, more_types_in_union_146501) = may_be_none(axis_146498, None_146499)

        if may_be_146500:

            if more_types_in_union_146501:
                # Runtime conditional SSA (line 250)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 251):
            
            # Assigning a Call to a Attribute (line 251):
            
            # Call to _DummyAxis(...): (line 251)
            # Processing the call keyword arguments (line 251)
            # Getting the type of 'kwargs' (line 251)
            kwargs_146503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 37), 'kwargs', False)
            kwargs_146504 = {'kwargs_146503': kwargs_146503}
            # Getting the type of '_DummyAxis' (line 251)
            _DummyAxis_146502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 24), '_DummyAxis', False)
            # Calling _DummyAxis(args, kwargs) (line 251)
            _DummyAxis_call_result_146505 = invoke(stypy.reporting.localization.Localization(__file__, 251, 24), _DummyAxis_146502, *[], **kwargs_146504)
            
            # Getting the type of 'self' (line 251)
            self_146506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 12), 'self')
            # Setting the type of the member 'axis' of a type (line 251)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 12), self_146506, 'axis', _DummyAxis_call_result_146505)

            if more_types_in_union_146501:
                # SSA join for if statement (line 250)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'create_dummy_axis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'create_dummy_axis' in the type store
        # Getting the type of 'stypy_return_type' (line 249)
        stypy_return_type_146507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146507)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'create_dummy_axis'
        return stypy_return_type_146507


    @norecursion
    def set_view_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_view_interval'
        module_type_store = module_type_store.open_function_context('set_view_interval', 253, 4, False)
        # Assigning a type to the variable 'self' (line 254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 254, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TickHelper.set_view_interval.__dict__.__setitem__('stypy_localization', localization)
        TickHelper.set_view_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TickHelper.set_view_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        TickHelper.set_view_interval.__dict__.__setitem__('stypy_function_name', 'TickHelper.set_view_interval')
        TickHelper.set_view_interval.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        TickHelper.set_view_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        TickHelper.set_view_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TickHelper.set_view_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        TickHelper.set_view_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        TickHelper.set_view_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TickHelper.set_view_interval.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TickHelper.set_view_interval', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_view_interval', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_view_interval(...)' code ##################

        
        # Call to set_view_interval(...): (line 254)
        # Processing the call arguments (line 254)
        # Getting the type of 'vmin' (line 254)
        vmin_146511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 36), 'vmin', False)
        # Getting the type of 'vmax' (line 254)
        vmax_146512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 42), 'vmax', False)
        # Processing the call keyword arguments (line 254)
        kwargs_146513 = {}
        # Getting the type of 'self' (line 254)
        self_146508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 8), 'self', False)
        # Obtaining the member 'axis' of a type (line 254)
        axis_146509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 8), self_146508, 'axis')
        # Obtaining the member 'set_view_interval' of a type (line 254)
        set_view_interval_146510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 8), axis_146509, 'set_view_interval')
        # Calling set_view_interval(args, kwargs) (line 254)
        set_view_interval_call_result_146514 = invoke(stypy.reporting.localization.Localization(__file__, 254, 8), set_view_interval_146510, *[vmin_146511, vmax_146512], **kwargs_146513)
        
        
        # ################# End of 'set_view_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_view_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 253)
        stypy_return_type_146515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146515)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_view_interval'
        return stypy_return_type_146515


    @norecursion
    def set_data_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_data_interval'
        module_type_store = module_type_store.open_function_context('set_data_interval', 256, 4, False)
        # Assigning a type to the variable 'self' (line 257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TickHelper.set_data_interval.__dict__.__setitem__('stypy_localization', localization)
        TickHelper.set_data_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TickHelper.set_data_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        TickHelper.set_data_interval.__dict__.__setitem__('stypy_function_name', 'TickHelper.set_data_interval')
        TickHelper.set_data_interval.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        TickHelper.set_data_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        TickHelper.set_data_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TickHelper.set_data_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        TickHelper.set_data_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        TickHelper.set_data_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TickHelper.set_data_interval.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TickHelper.set_data_interval', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_data_interval', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_data_interval(...)' code ##################

        
        # Call to set_data_interval(...): (line 257)
        # Processing the call arguments (line 257)
        # Getting the type of 'vmin' (line 257)
        vmin_146519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 36), 'vmin', False)
        # Getting the type of 'vmax' (line 257)
        vmax_146520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 42), 'vmax', False)
        # Processing the call keyword arguments (line 257)
        kwargs_146521 = {}
        # Getting the type of 'self' (line 257)
        self_146516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 8), 'self', False)
        # Obtaining the member 'axis' of a type (line 257)
        axis_146517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 8), self_146516, 'axis')
        # Obtaining the member 'set_data_interval' of a type (line 257)
        set_data_interval_146518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 8), axis_146517, 'set_data_interval')
        # Calling set_data_interval(args, kwargs) (line 257)
        set_data_interval_call_result_146522 = invoke(stypy.reporting.localization.Localization(__file__, 257, 8), set_data_interval_146518, *[vmin_146519, vmax_146520], **kwargs_146521)
        
        
        # ################# End of 'set_data_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_data_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 256)
        stypy_return_type_146523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146523)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_data_interval'
        return stypy_return_type_146523


    @norecursion
    def set_bounds(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_bounds'
        module_type_store = module_type_store.open_function_context('set_bounds', 259, 4, False)
        # Assigning a type to the variable 'self' (line 260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 260, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TickHelper.set_bounds.__dict__.__setitem__('stypy_localization', localization)
        TickHelper.set_bounds.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TickHelper.set_bounds.__dict__.__setitem__('stypy_type_store', module_type_store)
        TickHelper.set_bounds.__dict__.__setitem__('stypy_function_name', 'TickHelper.set_bounds')
        TickHelper.set_bounds.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        TickHelper.set_bounds.__dict__.__setitem__('stypy_varargs_param_name', None)
        TickHelper.set_bounds.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TickHelper.set_bounds.__dict__.__setitem__('stypy_call_defaults', defaults)
        TickHelper.set_bounds.__dict__.__setitem__('stypy_call_varargs', varargs)
        TickHelper.set_bounds.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TickHelper.set_bounds.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TickHelper.set_bounds', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_bounds', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_bounds(...)' code ##################

        
        # Call to set_view_interval(...): (line 260)
        # Processing the call arguments (line 260)
        # Getting the type of 'vmin' (line 260)
        vmin_146526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 31), 'vmin', False)
        # Getting the type of 'vmax' (line 260)
        vmax_146527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 37), 'vmax', False)
        # Processing the call keyword arguments (line 260)
        kwargs_146528 = {}
        # Getting the type of 'self' (line 260)
        self_146524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 8), 'self', False)
        # Obtaining the member 'set_view_interval' of a type (line 260)
        set_view_interval_146525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 8), self_146524, 'set_view_interval')
        # Calling set_view_interval(args, kwargs) (line 260)
        set_view_interval_call_result_146529 = invoke(stypy.reporting.localization.Localization(__file__, 260, 8), set_view_interval_146525, *[vmin_146526, vmax_146527], **kwargs_146528)
        
        
        # Call to set_data_interval(...): (line 261)
        # Processing the call arguments (line 261)
        # Getting the type of 'vmin' (line 261)
        vmin_146532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 31), 'vmin', False)
        # Getting the type of 'vmax' (line 261)
        vmax_146533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 37), 'vmax', False)
        # Processing the call keyword arguments (line 261)
        kwargs_146534 = {}
        # Getting the type of 'self' (line 261)
        self_146530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 8), 'self', False)
        # Obtaining the member 'set_data_interval' of a type (line 261)
        set_data_interval_146531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 8), self_146530, 'set_data_interval')
        # Calling set_data_interval(args, kwargs) (line 261)
        set_data_interval_call_result_146535 = invoke(stypy.reporting.localization.Localization(__file__, 261, 8), set_data_interval_146531, *[vmin_146532, vmax_146533], **kwargs_146534)
        
        
        # ################# End of 'set_bounds(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_bounds' in the type store
        # Getting the type of 'stypy_return_type' (line 259)
        stypy_return_type_146536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146536)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_bounds'
        return stypy_return_type_146536


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 243, 0, False)
        # Assigning a type to the variable 'self' (line 244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TickHelper.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'TickHelper' (line 243)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 243, 0), 'TickHelper', TickHelper)

# Assigning a Name to a Name (line 244):
# Getting the type of 'None' (line 244)
None_146537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 11), 'None')
# Getting the type of 'TickHelper'
TickHelper_146538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TickHelper')
# Setting the type of the member 'axis' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TickHelper_146538, 'axis', None_146537)
# Declaration of the 'Formatter' class
# Getting the type of 'TickHelper' (line 264)
TickHelper_146539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 16), 'TickHelper')

class Formatter(TickHelper_146539, ):
    unicode_146540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, (-1)), 'unicode', u'\n    Create a string based on a tick value and location.\n    ')
    
    # Assigning a List to a Name (line 270):

    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 272)
        None_146541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 30), 'None')
        defaults = [None_146541]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 272, 4, False)
        # Assigning a type to the variable 'self' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Formatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        Formatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Formatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Formatter.__call__.__dict__.__setitem__('stypy_function_name', 'Formatter.__call__')
        Formatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        Formatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Formatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Formatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Formatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Formatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Formatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Formatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_146542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, (-1)), 'unicode', u'\n        Return the format for tick value `x` at position pos.\n        ``pos=None`` indicates an unspecified location.\n        ')
        
        # Call to NotImplementedError(...): (line 277)
        # Processing the call arguments (line 277)
        unicode_146544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 277)
        kwargs_146545 = {}
        # Getting the type of 'NotImplementedError' (line 277)
        NotImplementedError_146543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 277)
        NotImplementedError_call_result_146546 = invoke(stypy.reporting.localization.Localization(__file__, 277, 14), NotImplementedError_146543, *[unicode_146544], **kwargs_146545)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 277, 8), NotImplementedError_call_result_146546, 'raise parameter', BaseException)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 272)
        stypy_return_type_146547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146547)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_146547


    @norecursion
    def format_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'format_data'
        module_type_store = module_type_store.open_function_context('format_data', 279, 4, False)
        # Assigning a type to the variable 'self' (line 280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 280, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Formatter.format_data.__dict__.__setitem__('stypy_localization', localization)
        Formatter.format_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Formatter.format_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        Formatter.format_data.__dict__.__setitem__('stypy_function_name', 'Formatter.format_data')
        Formatter.format_data.__dict__.__setitem__('stypy_param_names_list', ['value'])
        Formatter.format_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        Formatter.format_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Formatter.format_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        Formatter.format_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        Formatter.format_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Formatter.format_data.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Formatter.format_data', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'format_data', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'format_data(...)' code ##################

        unicode_146548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 283, (-1)), 'unicode', u'\n        Returns the full string representation of the value with the\n        position unspecified.\n        ')
        
        # Call to __call__(...): (line 284)
        # Processing the call arguments (line 284)
        # Getting the type of 'value' (line 284)
        value_146551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 29), 'value', False)
        # Processing the call keyword arguments (line 284)
        kwargs_146552 = {}
        # Getting the type of 'self' (line 284)
        self_146549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 15), 'self', False)
        # Obtaining the member '__call__' of a type (line 284)
        call___146550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 15), self_146549, '__call__')
        # Calling __call__(args, kwargs) (line 284)
        call___call_result_146553 = invoke(stypy.reporting.localization.Localization(__file__, 284, 15), call___146550, *[value_146551], **kwargs_146552)
        
        # Assigning a type to the variable 'stypy_return_type' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 8), 'stypy_return_type', call___call_result_146553)
        
        # ################# End of 'format_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'format_data' in the type store
        # Getting the type of 'stypy_return_type' (line 279)
        stypy_return_type_146554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146554)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'format_data'
        return stypy_return_type_146554


    @norecursion
    def format_data_short(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'format_data_short'
        module_type_store = module_type_store.open_function_context('format_data_short', 286, 4, False)
        # Assigning a type to the variable 'self' (line 287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Formatter.format_data_short.__dict__.__setitem__('stypy_localization', localization)
        Formatter.format_data_short.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Formatter.format_data_short.__dict__.__setitem__('stypy_type_store', module_type_store)
        Formatter.format_data_short.__dict__.__setitem__('stypy_function_name', 'Formatter.format_data_short')
        Formatter.format_data_short.__dict__.__setitem__('stypy_param_names_list', ['value'])
        Formatter.format_data_short.__dict__.__setitem__('stypy_varargs_param_name', None)
        Formatter.format_data_short.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Formatter.format_data_short.__dict__.__setitem__('stypy_call_defaults', defaults)
        Formatter.format_data_short.__dict__.__setitem__('stypy_call_varargs', varargs)
        Formatter.format_data_short.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Formatter.format_data_short.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Formatter.format_data_short', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'format_data_short', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'format_data_short(...)' code ##################

        unicode_146555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, (-1)), 'unicode', u'\n        Return a short string version of the tick value.\n\n        Defaults to the position-independent long value.\n        ')
        
        # Call to format_data(...): (line 292)
        # Processing the call arguments (line 292)
        # Getting the type of 'value' (line 292)
        value_146558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 32), 'value', False)
        # Processing the call keyword arguments (line 292)
        kwargs_146559 = {}
        # Getting the type of 'self' (line 292)
        self_146556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 15), 'self', False)
        # Obtaining the member 'format_data' of a type (line 292)
        format_data_146557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 15), self_146556, 'format_data')
        # Calling format_data(args, kwargs) (line 292)
        format_data_call_result_146560 = invoke(stypy.reporting.localization.Localization(__file__, 292, 15), format_data_146557, *[value_146558], **kwargs_146559)
        
        # Assigning a type to the variable 'stypy_return_type' (line 292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 8), 'stypy_return_type', format_data_call_result_146560)
        
        # ################# End of 'format_data_short(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'format_data_short' in the type store
        # Getting the type of 'stypy_return_type' (line 286)
        stypy_return_type_146561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146561)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'format_data_short'
        return stypy_return_type_146561


    @norecursion
    def get_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_offset'
        module_type_store = module_type_store.open_function_context('get_offset', 294, 4, False)
        # Assigning a type to the variable 'self' (line 295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 295, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Formatter.get_offset.__dict__.__setitem__('stypy_localization', localization)
        Formatter.get_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Formatter.get_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        Formatter.get_offset.__dict__.__setitem__('stypy_function_name', 'Formatter.get_offset')
        Formatter.get_offset.__dict__.__setitem__('stypy_param_names_list', [])
        Formatter.get_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        Formatter.get_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Formatter.get_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        Formatter.get_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        Formatter.get_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Formatter.get_offset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Formatter.get_offset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_offset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_offset(...)' code ##################

        unicode_146562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, 15), 'unicode', u'')
        # Assigning a type to the variable 'stypy_return_type' (line 295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 295, 8), 'stypy_return_type', unicode_146562)
        
        # ################# End of 'get_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 294)
        stypy_return_type_146563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146563)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_offset'
        return stypy_return_type_146563


    @norecursion
    def set_locs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_locs'
        module_type_store = module_type_store.open_function_context('set_locs', 297, 4, False)
        # Assigning a type to the variable 'self' (line 298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Formatter.set_locs.__dict__.__setitem__('stypy_localization', localization)
        Formatter.set_locs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Formatter.set_locs.__dict__.__setitem__('stypy_type_store', module_type_store)
        Formatter.set_locs.__dict__.__setitem__('stypy_function_name', 'Formatter.set_locs')
        Formatter.set_locs.__dict__.__setitem__('stypy_param_names_list', ['locs'])
        Formatter.set_locs.__dict__.__setitem__('stypy_varargs_param_name', None)
        Formatter.set_locs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Formatter.set_locs.__dict__.__setitem__('stypy_call_defaults', defaults)
        Formatter.set_locs.__dict__.__setitem__('stypy_call_varargs', varargs)
        Formatter.set_locs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Formatter.set_locs.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Formatter.set_locs', ['locs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_locs', localization, ['locs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_locs(...)' code ##################

        
        # Assigning a Name to a Attribute (line 298):
        
        # Assigning a Name to a Attribute (line 298):
        # Getting the type of 'locs' (line 298)
        locs_146564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 20), 'locs')
        # Getting the type of 'self' (line 298)
        self_146565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 8), 'self')
        # Setting the type of the member 'locs' of a type (line 298)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 8), self_146565, 'locs', locs_146564)
        
        # ################# End of 'set_locs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_locs' in the type store
        # Getting the type of 'stypy_return_type' (line 297)
        stypy_return_type_146566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146566)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_locs'
        return stypy_return_type_146566


    @norecursion
    def fix_minus(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fix_minus'
        module_type_store = module_type_store.open_function_context('fix_minus', 300, 4, False)
        # Assigning a type to the variable 'self' (line 301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Formatter.fix_minus.__dict__.__setitem__('stypy_localization', localization)
        Formatter.fix_minus.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Formatter.fix_minus.__dict__.__setitem__('stypy_type_store', module_type_store)
        Formatter.fix_minus.__dict__.__setitem__('stypy_function_name', 'Formatter.fix_minus')
        Formatter.fix_minus.__dict__.__setitem__('stypy_param_names_list', ['s'])
        Formatter.fix_minus.__dict__.__setitem__('stypy_varargs_param_name', None)
        Formatter.fix_minus.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Formatter.fix_minus.__dict__.__setitem__('stypy_call_defaults', defaults)
        Formatter.fix_minus.__dict__.__setitem__('stypy_call_varargs', varargs)
        Formatter.fix_minus.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Formatter.fix_minus.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Formatter.fix_minus', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fix_minus', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fix_minus(...)' code ##################

        unicode_146567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 313, (-1)), 'unicode', u"\n        Some classes may want to replace a hyphen for minus with the\n        proper unicode symbol (U+2212) for typographical correctness.\n        The default is to not replace it.\n\n        Note, if you use this method, e.g., in :meth:`format_data` or\n        call, you probably don't want to use it for\n        :meth:`format_data_short` since the toolbar uses this for\n        interactive coord reporting and I doubt we can expect GUIs\n        across platforms will handle the unicode correctly.  So for\n        now the classes that override :meth:`fix_minus` should have an\n        explicit :meth:`format_data_short` method\n        ")
        # Getting the type of 's' (line 314)
        s_146568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 15), 's')
        # Assigning a type to the variable 'stypy_return_type' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'stypy_return_type', s_146568)
        
        # ################# End of 'fix_minus(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fix_minus' in the type store
        # Getting the type of 'stypy_return_type' (line 300)
        stypy_return_type_146569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146569)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fix_minus'
        return stypy_return_type_146569


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 264, 0, False)
        # Assigning a type to the variable 'self' (line 265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Formatter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'Formatter' (line 264)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 264, 0), 'Formatter', Formatter)

# Assigning a List to a Name (line 270):

# Obtaining an instance of the builtin type 'list' (line 270)
list_146570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 11), 'list')
# Adding type elements to the builtin type 'list' instance (line 270)

# Getting the type of 'Formatter'
Formatter_146571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Formatter')
# Setting the type of the member 'locs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Formatter_146571, 'locs', list_146570)
# Declaration of the 'IndexFormatter' class
# Getting the type of 'Formatter' (line 317)
Formatter_146572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 21), 'Formatter')

class IndexFormatter(Formatter_146572, ):
    unicode_146573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 320, (-1)), 'unicode', u'\n    Format the position x to the nearest i-th label where i=int(x+0.5)\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 321, 4, False)
        # Assigning a type to the variable 'self' (line 322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IndexFormatter.__init__', ['labels'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['labels'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 322):
        
        # Assigning a Name to a Attribute (line 322):
        # Getting the type of 'labels' (line 322)
        labels_146574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 22), 'labels')
        # Getting the type of 'self' (line 322)
        self_146575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'self')
        # Setting the type of the member 'labels' of a type (line 322)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 8), self_146575, 'labels', labels_146574)
        
        # Assigning a Call to a Attribute (line 323):
        
        # Assigning a Call to a Attribute (line 323):
        
        # Call to len(...): (line 323)
        # Processing the call arguments (line 323)
        # Getting the type of 'labels' (line 323)
        labels_146577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 21), 'labels', False)
        # Processing the call keyword arguments (line 323)
        kwargs_146578 = {}
        # Getting the type of 'len' (line 323)
        len_146576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 17), 'len', False)
        # Calling len(args, kwargs) (line 323)
        len_call_result_146579 = invoke(stypy.reporting.localization.Localization(__file__, 323, 17), len_146576, *[labels_146577], **kwargs_146578)
        
        # Getting the type of 'self' (line 323)
        self_146580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 8), 'self')
        # Setting the type of the member 'n' of a type (line 323)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 8), self_146580, 'n', len_call_result_146579)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 325)
        None_146581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 30), 'None')
        defaults = [None_146581]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 325, 4, False)
        # Assigning a type to the variable 'self' (line 326)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 326, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IndexFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        IndexFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IndexFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        IndexFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'IndexFormatter.__call__')
        IndexFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        IndexFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        IndexFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IndexFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        IndexFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        IndexFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IndexFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IndexFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_146582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, (-1)), 'unicode', u'\n        Return the format for tick value `x` at position pos.\n\n        The position is ignored and the value is rounded to the nearest\n        integer, which is used to look up the label.\n        ')
        
        # Assigning a Call to a Name (line 332):
        
        # Assigning a Call to a Name (line 332):
        
        # Call to int(...): (line 332)
        # Processing the call arguments (line 332)
        # Getting the type of 'x' (line 332)
        x_146584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 16), 'x', False)
        float_146585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, 20), 'float')
        # Applying the binary operator '+' (line 332)
        result_add_146586 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 16), '+', x_146584, float_146585)
        
        # Processing the call keyword arguments (line 332)
        kwargs_146587 = {}
        # Getting the type of 'int' (line 332)
        int_146583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 12), 'int', False)
        # Calling int(args, kwargs) (line 332)
        int_call_result_146588 = invoke(stypy.reporting.localization.Localization(__file__, 332, 12), int_146583, *[result_add_146586], **kwargs_146587)
        
        # Assigning a type to the variable 'i' (line 332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 8), 'i', int_call_result_146588)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 333)
        i_146589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 11), 'i')
        int_146590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, 15), 'int')
        # Applying the binary operator '<' (line 333)
        result_lt_146591 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 11), '<', i_146589, int_146590)
        
        
        # Getting the type of 'i' (line 333)
        i_146592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 20), 'i')
        # Getting the type of 'self' (line 333)
        self_146593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 25), 'self')
        # Obtaining the member 'n' of a type (line 333)
        n_146594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 25), self_146593, 'n')
        # Applying the binary operator '>=' (line 333)
        result_ge_146595 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 20), '>=', i_146592, n_146594)
        
        # Applying the binary operator 'or' (line 333)
        result_or_keyword_146596 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 11), 'or', result_lt_146591, result_ge_146595)
        
        # Testing the type of an if condition (line 333)
        if_condition_146597 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 333, 8), result_or_keyword_146596)
        # Assigning a type to the variable 'if_condition_146597' (line 333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 333, 8), 'if_condition_146597', if_condition_146597)
        # SSA begins for if statement (line 333)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_146598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, 19), 'unicode', u'')
        # Assigning a type to the variable 'stypy_return_type' (line 334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 12), 'stypy_return_type', unicode_146598)
        # SSA branch for the else part of an if statement (line 333)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 336)
        i_146599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 31), 'i')
        # Getting the type of 'self' (line 336)
        self_146600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 19), 'self')
        # Obtaining the member 'labels' of a type (line 336)
        labels_146601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 336, 19), self_146600, 'labels')
        # Obtaining the member '__getitem__' of a type (line 336)
        getitem___146602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 336, 19), labels_146601, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 336)
        subscript_call_result_146603 = invoke(stypy.reporting.localization.Localization(__file__, 336, 19), getitem___146602, i_146599)
        
        # Assigning a type to the variable 'stypy_return_type' (line 336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 12), 'stypy_return_type', subscript_call_result_146603)
        # SSA join for if statement (line 333)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 325)
        stypy_return_type_146604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146604)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_146604


# Assigning a type to the variable 'IndexFormatter' (line 317)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 0), 'IndexFormatter', IndexFormatter)
# Declaration of the 'NullFormatter' class
# Getting the type of 'Formatter' (line 339)
Formatter_146605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 20), 'Formatter')

class NullFormatter(Formatter_146605, ):
    unicode_146606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, (-1)), 'unicode', u'\n    Always return the empty string.\n    ')

    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 343)
        None_146607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 30), 'None')
        defaults = [None_146607]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 343, 4, False)
        # Assigning a type to the variable 'self' (line 344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NullFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        NullFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NullFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        NullFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'NullFormatter.__call__')
        NullFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        NullFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        NullFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NullFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        NullFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        NullFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NullFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NullFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_146608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 346, (-1)), 'unicode', u'\n        Returns an empty string for all inputs.\n        ')
        unicode_146609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 347, 15), 'unicode', u'')
        # Assigning a type to the variable 'stypy_return_type' (line 347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 347, 8), 'stypy_return_type', unicode_146609)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 343)
        stypy_return_type_146610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146610)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_146610


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 339, 0, False)
        # Assigning a type to the variable 'self' (line 340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 340, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NullFormatter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'NullFormatter' (line 339)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 339, 0), 'NullFormatter', NullFormatter)
# Declaration of the 'FixedFormatter' class
# Getting the type of 'Formatter' (line 350)
Formatter_146611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 21), 'Formatter')

class FixedFormatter(Formatter_146611, ):
    unicode_146612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, (-1)), 'unicode', u'\n    Return fixed strings for tick labels based only on position, not\n    value.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 355, 4, False)
        # Assigning a type to the variable 'self' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FixedFormatter.__init__', ['seq'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['seq'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_146613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, (-1)), 'unicode', u'\n        Set the sequence of strings that will be used for labels.\n        ')
        
        # Assigning a Name to a Attribute (line 359):
        
        # Assigning a Name to a Attribute (line 359):
        # Getting the type of 'seq' (line 359)
        seq_146614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 19), 'seq')
        # Getting the type of 'self' (line 359)
        self_146615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 8), 'self')
        # Setting the type of the member 'seq' of a type (line 359)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 8), self_146615, 'seq', seq_146614)
        
        # Assigning a Str to a Attribute (line 360):
        
        # Assigning a Str to a Attribute (line 360):
        unicode_146616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 29), 'unicode', u'')
        # Getting the type of 'self' (line 360)
        self_146617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 8), 'self')
        # Setting the type of the member 'offset_string' of a type (line 360)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 360, 8), self_146617, 'offset_string', unicode_146616)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 362)
        None_146618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 30), 'None')
        defaults = [None_146618]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 362, 4, False)
        # Assigning a type to the variable 'self' (line 363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FixedFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        FixedFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FixedFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        FixedFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'FixedFormatter.__call__')
        FixedFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        FixedFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        FixedFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FixedFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        FixedFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        FixedFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FixedFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FixedFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_146619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, (-1)), 'unicode', u'\n        Returns the label that matches the position regardless of the\n        value.\n\n        For positions ``pos < len(seq)``, return `seq[i]` regardless of\n        `x`. Otherwise return empty string. `seq` is the sequence of\n        strings that this object was initialized with.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'pos' (line 371)
        pos_146620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 11), 'pos')
        # Getting the type of 'None' (line 371)
        None_146621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 18), 'None')
        # Applying the binary operator 'is' (line 371)
        result_is__146622 = python_operator(stypy.reporting.localization.Localization(__file__, 371, 11), 'is', pos_146620, None_146621)
        
        
        # Getting the type of 'pos' (line 371)
        pos_146623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 26), 'pos')
        
        # Call to len(...): (line 371)
        # Processing the call arguments (line 371)
        # Getting the type of 'self' (line 371)
        self_146625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 37), 'self', False)
        # Obtaining the member 'seq' of a type (line 371)
        seq_146626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 371, 37), self_146625, 'seq')
        # Processing the call keyword arguments (line 371)
        kwargs_146627 = {}
        # Getting the type of 'len' (line 371)
        len_146624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 33), 'len', False)
        # Calling len(args, kwargs) (line 371)
        len_call_result_146628 = invoke(stypy.reporting.localization.Localization(__file__, 371, 33), len_146624, *[seq_146626], **kwargs_146627)
        
        # Applying the binary operator '>=' (line 371)
        result_ge_146629 = python_operator(stypy.reporting.localization.Localization(__file__, 371, 26), '>=', pos_146623, len_call_result_146628)
        
        # Applying the binary operator 'or' (line 371)
        result_or_keyword_146630 = python_operator(stypy.reporting.localization.Localization(__file__, 371, 11), 'or', result_is__146622, result_ge_146629)
        
        # Testing the type of an if condition (line 371)
        if_condition_146631 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 371, 8), result_or_keyword_146630)
        # Assigning a type to the variable 'if_condition_146631' (line 371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 8), 'if_condition_146631', if_condition_146631)
        # SSA begins for if statement (line 371)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_146632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 372, 19), 'unicode', u'')
        # Assigning a type to the variable 'stypy_return_type' (line 372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 12), 'stypy_return_type', unicode_146632)
        # SSA branch for the else part of an if statement (line 371)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining the type of the subscript
        # Getting the type of 'pos' (line 374)
        pos_146633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 28), 'pos')
        # Getting the type of 'self' (line 374)
        self_146634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 19), 'self')
        # Obtaining the member 'seq' of a type (line 374)
        seq_146635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 374, 19), self_146634, 'seq')
        # Obtaining the member '__getitem__' of a type (line 374)
        getitem___146636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 374, 19), seq_146635, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 374)
        subscript_call_result_146637 = invoke(stypy.reporting.localization.Localization(__file__, 374, 19), getitem___146636, pos_146633)
        
        # Assigning a type to the variable 'stypy_return_type' (line 374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 12), 'stypy_return_type', subscript_call_result_146637)
        # SSA join for if statement (line 371)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 362)
        stypy_return_type_146638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146638)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_146638


    @norecursion
    def get_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_offset'
        module_type_store = module_type_store.open_function_context('get_offset', 376, 4, False)
        # Assigning a type to the variable 'self' (line 377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FixedFormatter.get_offset.__dict__.__setitem__('stypy_localization', localization)
        FixedFormatter.get_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FixedFormatter.get_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        FixedFormatter.get_offset.__dict__.__setitem__('stypy_function_name', 'FixedFormatter.get_offset')
        FixedFormatter.get_offset.__dict__.__setitem__('stypy_param_names_list', [])
        FixedFormatter.get_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        FixedFormatter.get_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FixedFormatter.get_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        FixedFormatter.get_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        FixedFormatter.get_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FixedFormatter.get_offset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FixedFormatter.get_offset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_offset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_offset(...)' code ##################

        # Getting the type of 'self' (line 377)
        self_146639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 15), 'self')
        # Obtaining the member 'offset_string' of a type (line 377)
        offset_string_146640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 15), self_146639, 'offset_string')
        # Assigning a type to the variable 'stypy_return_type' (line 377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'stypy_return_type', offset_string_146640)
        
        # ################# End of 'get_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 376)
        stypy_return_type_146641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146641)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_offset'
        return stypy_return_type_146641


    @norecursion
    def set_offset_string(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_offset_string'
        module_type_store = module_type_store.open_function_context('set_offset_string', 379, 4, False)
        # Assigning a type to the variable 'self' (line 380)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FixedFormatter.set_offset_string.__dict__.__setitem__('stypy_localization', localization)
        FixedFormatter.set_offset_string.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FixedFormatter.set_offset_string.__dict__.__setitem__('stypy_type_store', module_type_store)
        FixedFormatter.set_offset_string.__dict__.__setitem__('stypy_function_name', 'FixedFormatter.set_offset_string')
        FixedFormatter.set_offset_string.__dict__.__setitem__('stypy_param_names_list', ['ofs'])
        FixedFormatter.set_offset_string.__dict__.__setitem__('stypy_varargs_param_name', None)
        FixedFormatter.set_offset_string.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FixedFormatter.set_offset_string.__dict__.__setitem__('stypy_call_defaults', defaults)
        FixedFormatter.set_offset_string.__dict__.__setitem__('stypy_call_varargs', varargs)
        FixedFormatter.set_offset_string.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FixedFormatter.set_offset_string.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FixedFormatter.set_offset_string', ['ofs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_offset_string', localization, ['ofs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_offset_string(...)' code ##################

        
        # Assigning a Name to a Attribute (line 380):
        
        # Assigning a Name to a Attribute (line 380):
        # Getting the type of 'ofs' (line 380)
        ofs_146642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 29), 'ofs')
        # Getting the type of 'self' (line 380)
        self_146643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 8), 'self')
        # Setting the type of the member 'offset_string' of a type (line 380)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 380, 8), self_146643, 'offset_string', ofs_146642)
        
        # ################# End of 'set_offset_string(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_offset_string' in the type store
        # Getting the type of 'stypy_return_type' (line 379)
        stypy_return_type_146644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146644)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_offset_string'
        return stypy_return_type_146644


# Assigning a type to the variable 'FixedFormatter' (line 350)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 350, 0), 'FixedFormatter', FixedFormatter)
# Declaration of the 'FuncFormatter' class
# Getting the type of 'Formatter' (line 383)
Formatter_146645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 20), 'Formatter')

class FuncFormatter(Formatter_146645, ):
    unicode_146646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, (-1)), 'unicode', u'\n    Use a user-defined function for formatting.\n\n    The function should take in two inputs (a tick value ``x`` and a\n    position ``pos``), and return a string containing the corresponding\n    tick label.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 391, 4, False)
        # Assigning a type to the variable 'self' (line 392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FuncFormatter.__init__', ['func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 392):
        
        # Assigning a Name to a Attribute (line 392):
        # Getting the type of 'func' (line 392)
        func_146647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 20), 'func')
        # Getting the type of 'self' (line 392)
        self_146648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 8), 'self')
        # Setting the type of the member 'func' of a type (line 392)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 8), self_146648, 'func', func_146647)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 394)
        None_146649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 30), 'None')
        defaults = [None_146649]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 394, 4, False)
        # Assigning a type to the variable 'self' (line 395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FuncFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        FuncFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FuncFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        FuncFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'FuncFormatter.__call__')
        FuncFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        FuncFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        FuncFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FuncFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        FuncFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        FuncFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FuncFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FuncFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_146650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, (-1)), 'unicode', u'\n        Return the value of the user defined function.\n\n        `x` and `pos` are passed through as-is.\n        ')
        
        # Call to func(...): (line 400)
        # Processing the call arguments (line 400)
        # Getting the type of 'x' (line 400)
        x_146653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 25), 'x', False)
        # Getting the type of 'pos' (line 400)
        pos_146654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 28), 'pos', False)
        # Processing the call keyword arguments (line 400)
        kwargs_146655 = {}
        # Getting the type of 'self' (line 400)
        self_146651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 15), 'self', False)
        # Obtaining the member 'func' of a type (line 400)
        func_146652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 15), self_146651, 'func')
        # Calling func(args, kwargs) (line 400)
        func_call_result_146656 = invoke(stypy.reporting.localization.Localization(__file__, 400, 15), func_146652, *[x_146653, pos_146654], **kwargs_146655)
        
        # Assigning a type to the variable 'stypy_return_type' (line 400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 8), 'stypy_return_type', func_call_result_146656)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 394)
        stypy_return_type_146657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146657)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_146657


# Assigning a type to the variable 'FuncFormatter' (line 383)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 0), 'FuncFormatter', FuncFormatter)
# Declaration of the 'FormatStrFormatter' class
# Getting the type of 'Formatter' (line 403)
Formatter_146658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 25), 'Formatter')

class FormatStrFormatter(Formatter_146658, ):
    unicode_146659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 409, (-1)), 'unicode', u"\n    Use an old-style ('%' operator) format string to format the tick.\n\n    The format string should have a single variable format (%) in it.\n    It will be applied to the value (not the position) of the tick.\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 410, 4, False)
        # Assigning a type to the variable 'self' (line 411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatStrFormatter.__init__', ['fmt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fmt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 411):
        
        # Assigning a Name to a Attribute (line 411):
        # Getting the type of 'fmt' (line 411)
        fmt_146660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 19), 'fmt')
        # Getting the type of 'self' (line 411)
        self_146661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 8), 'self')
        # Setting the type of the member 'fmt' of a type (line 411)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 8), self_146661, 'fmt', fmt_146660)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 413)
        None_146662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 30), 'None')
        defaults = [None_146662]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 413, 4, False)
        # Assigning a type to the variable 'self' (line 414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatStrFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        FormatStrFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatStrFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatStrFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'FormatStrFormatter.__call__')
        FormatStrFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        FormatStrFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatStrFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatStrFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatStrFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatStrFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatStrFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatStrFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_146663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, (-1)), 'unicode', u'\n        Return the formatted label string.\n\n        Only the value `x` is formatted. The position is ignored.\n        ')
        # Getting the type of 'self' (line 419)
        self_146664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 15), 'self')
        # Obtaining the member 'fmt' of a type (line 419)
        fmt_146665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 419, 15), self_146664, 'fmt')
        # Getting the type of 'x' (line 419)
        x_146666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 26), 'x')
        # Applying the binary operator '%' (line 419)
        result_mod_146667 = python_operator(stypy.reporting.localization.Localization(__file__, 419, 15), '%', fmt_146665, x_146666)
        
        # Assigning a type to the variable 'stypy_return_type' (line 419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 419, 8), 'stypy_return_type', result_mod_146667)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 413)
        stypy_return_type_146668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146668)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_146668


# Assigning a type to the variable 'FormatStrFormatter' (line 403)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 0), 'FormatStrFormatter', FormatStrFormatter)
# Declaration of the 'StrMethodFormatter' class
# Getting the type of 'Formatter' (line 422)
Formatter_146669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 25), 'Formatter')

class StrMethodFormatter(Formatter_146669, ):
    unicode_146670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 429, (-1)), 'unicode', u'\n    Use a new-style format string (as used by `str.format()`)\n    to format the tick.\n\n    The field used for the value must be labeled `x` and the field used\n    for the position must be labeled `pos`.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 430, 4, False)
        # Assigning a type to the variable 'self' (line 431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 431, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StrMethodFormatter.__init__', ['fmt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fmt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 431):
        
        # Assigning a Name to a Attribute (line 431):
        # Getting the type of 'fmt' (line 431)
        fmt_146671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 19), 'fmt')
        # Getting the type of 'self' (line 431)
        self_146672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 8), 'self')
        # Setting the type of the member 'fmt' of a type (line 431)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 8), self_146672, 'fmt', fmt_146671)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 433)
        None_146673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 30), 'None')
        defaults = [None_146673]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 433, 4, False)
        # Assigning a type to the variable 'self' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StrMethodFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        StrMethodFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StrMethodFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        StrMethodFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'StrMethodFormatter.__call__')
        StrMethodFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        StrMethodFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        StrMethodFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StrMethodFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        StrMethodFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        StrMethodFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StrMethodFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StrMethodFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_146674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 439, (-1)), 'unicode', u'\n        Return the formatted label string.\n\n        `x` and `pos` are passed to `str.format` as keyword arguments\n        with those exact names.\n        ')
        
        # Call to format(...): (line 440)
        # Processing the call keyword arguments (line 440)
        # Getting the type of 'x' (line 440)
        x_146678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 33), 'x', False)
        keyword_146679 = x_146678
        # Getting the type of 'pos' (line 440)
        pos_146680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 40), 'pos', False)
        keyword_146681 = pos_146680
        kwargs_146682 = {'x': keyword_146679, 'pos': keyword_146681}
        # Getting the type of 'self' (line 440)
        self_146675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 15), 'self', False)
        # Obtaining the member 'fmt' of a type (line 440)
        fmt_146676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 15), self_146675, 'fmt')
        # Obtaining the member 'format' of a type (line 440)
        format_146677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 15), fmt_146676, 'format')
        # Calling format(args, kwargs) (line 440)
        format_call_result_146683 = invoke(stypy.reporting.localization.Localization(__file__, 440, 15), format_146677, *[], **kwargs_146682)
        
        # Assigning a type to the variable 'stypy_return_type' (line 440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 8), 'stypy_return_type', format_call_result_146683)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 433)
        stypy_return_type_146684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146684)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_146684


# Assigning a type to the variable 'StrMethodFormatter' (line 422)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 0), 'StrMethodFormatter', StrMethodFormatter)
# Declaration of the 'OldScalarFormatter' class
# Getting the type of 'Formatter' (line 443)
Formatter_146685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 25), 'Formatter')

class OldScalarFormatter(Formatter_146685, ):
    unicode_146686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, (-1)), 'unicode', u'\n    Tick location is a plain old number.\n    ')

    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 448)
        None_146687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 30), 'None')
        defaults = [None_146687]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 448, 4, False)
        # Assigning a type to the variable 'self' (line 449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 449, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OldScalarFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        OldScalarFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OldScalarFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        OldScalarFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'OldScalarFormatter.__call__')
        OldScalarFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        OldScalarFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        OldScalarFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OldScalarFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        OldScalarFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        OldScalarFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OldScalarFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OldScalarFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_146688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 454, (-1)), 'unicode', u'\n        Return the format for tick val `x` based on the width of the\n        axis.\n\n        The position `pos` is ignored.\n        ')
        
        # Assigning a Call to a Tuple (line 455):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 455)
        # Processing the call keyword arguments (line 455)
        kwargs_146692 = {}
        # Getting the type of 'self' (line 455)
        self_146689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 455)
        axis_146690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 21), self_146689, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 455)
        get_view_interval_146691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 21), axis_146690, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 455)
        get_view_interval_call_result_146693 = invoke(stypy.reporting.localization.Localization(__file__, 455, 21), get_view_interval_146691, *[], **kwargs_146692)
        
        # Assigning a type to the variable 'call_assignment_146252' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 8), 'call_assignment_146252', get_view_interval_call_result_146693)
        
        # Assigning a Call to a Name (line 455):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_146696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 455, 8), 'int')
        # Processing the call keyword arguments
        kwargs_146697 = {}
        # Getting the type of 'call_assignment_146252' (line 455)
        call_assignment_146252_146694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 8), 'call_assignment_146252', False)
        # Obtaining the member '__getitem__' of a type (line 455)
        getitem___146695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 8), call_assignment_146252_146694, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_146698 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___146695, *[int_146696], **kwargs_146697)
        
        # Assigning a type to the variable 'call_assignment_146253' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 8), 'call_assignment_146253', getitem___call_result_146698)
        
        # Assigning a Name to a Name (line 455):
        # Getting the type of 'call_assignment_146253' (line 455)
        call_assignment_146253_146699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 8), 'call_assignment_146253')
        # Assigning a type to the variable 'xmin' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 8), 'xmin', call_assignment_146253_146699)
        
        # Assigning a Call to a Name (line 455):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_146702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 455, 8), 'int')
        # Processing the call keyword arguments
        kwargs_146703 = {}
        # Getting the type of 'call_assignment_146252' (line 455)
        call_assignment_146252_146700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 8), 'call_assignment_146252', False)
        # Obtaining the member '__getitem__' of a type (line 455)
        getitem___146701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 8), call_assignment_146252_146700, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_146704 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___146701, *[int_146702], **kwargs_146703)
        
        # Assigning a type to the variable 'call_assignment_146254' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 8), 'call_assignment_146254', getitem___call_result_146704)
        
        # Assigning a Name to a Name (line 455):
        # Getting the type of 'call_assignment_146254' (line 455)
        call_assignment_146254_146705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 8), 'call_assignment_146254')
        # Assigning a type to the variable 'xmax' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 14), 'xmax', call_assignment_146254_146705)
        
        # Assigning a Call to a Name (line 456):
        
        # Assigning a Call to a Name (line 456):
        
        # Call to abs(...): (line 456)
        # Processing the call arguments (line 456)
        # Getting the type of 'xmax' (line 456)
        xmax_146707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 16), 'xmax', False)
        # Getting the type of 'xmin' (line 456)
        xmin_146708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 23), 'xmin', False)
        # Applying the binary operator '-' (line 456)
        result_sub_146709 = python_operator(stypy.reporting.localization.Localization(__file__, 456, 16), '-', xmax_146707, xmin_146708)
        
        # Processing the call keyword arguments (line 456)
        kwargs_146710 = {}
        # Getting the type of 'abs' (line 456)
        abs_146706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 12), 'abs', False)
        # Calling abs(args, kwargs) (line 456)
        abs_call_result_146711 = invoke(stypy.reporting.localization.Localization(__file__, 456, 12), abs_146706, *[result_sub_146709], **kwargs_146710)
        
        # Assigning a type to the variable 'd' (line 456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 8), 'd', abs_call_result_146711)
        
        # Call to pprint_val(...): (line 458)
        # Processing the call arguments (line 458)
        # Getting the type of 'x' (line 458)
        x_146714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 31), 'x', False)
        # Getting the type of 'd' (line 458)
        d_146715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 34), 'd', False)
        # Processing the call keyword arguments (line 458)
        kwargs_146716 = {}
        # Getting the type of 'self' (line 458)
        self_146712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 15), 'self', False)
        # Obtaining the member 'pprint_val' of a type (line 458)
        pprint_val_146713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 15), self_146712, 'pprint_val')
        # Calling pprint_val(args, kwargs) (line 458)
        pprint_val_call_result_146717 = invoke(stypy.reporting.localization.Localization(__file__, 458, 15), pprint_val_146713, *[x_146714, d_146715], **kwargs_146716)
        
        # Assigning a type to the variable 'stypy_return_type' (line 458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 458, 8), 'stypy_return_type', pprint_val_call_result_146717)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 448)
        stypy_return_type_146718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146718)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_146718


    @norecursion
    def pprint_val(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pprint_val'
        module_type_store = module_type_store.open_function_context('pprint_val', 460, 4, False)
        # Assigning a type to the variable 'self' (line 461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OldScalarFormatter.pprint_val.__dict__.__setitem__('stypy_localization', localization)
        OldScalarFormatter.pprint_val.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OldScalarFormatter.pprint_val.__dict__.__setitem__('stypy_type_store', module_type_store)
        OldScalarFormatter.pprint_val.__dict__.__setitem__('stypy_function_name', 'OldScalarFormatter.pprint_val')
        OldScalarFormatter.pprint_val.__dict__.__setitem__('stypy_param_names_list', ['x', 'd'])
        OldScalarFormatter.pprint_val.__dict__.__setitem__('stypy_varargs_param_name', None)
        OldScalarFormatter.pprint_val.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OldScalarFormatter.pprint_val.__dict__.__setitem__('stypy_call_defaults', defaults)
        OldScalarFormatter.pprint_val.__dict__.__setitem__('stypy_call_varargs', varargs)
        OldScalarFormatter.pprint_val.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OldScalarFormatter.pprint_val.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OldScalarFormatter.pprint_val', ['x', 'd'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pprint_val', localization, ['x', 'd'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pprint_val(...)' code ##################

        unicode_146719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 463, (-1)), 'unicode', u'\n        Formats the value `x` based on the size of the axis range `d`.\n        ')
        
        
        # Evaluating a boolean operation
        
        
        # Call to abs(...): (line 466)
        # Processing the call arguments (line 466)
        # Getting the type of 'x' (line 466)
        x_146721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 15), 'x', False)
        # Processing the call keyword arguments (line 466)
        kwargs_146722 = {}
        # Getting the type of 'abs' (line 466)
        abs_146720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 11), 'abs', False)
        # Calling abs(args, kwargs) (line 466)
        abs_call_result_146723 = invoke(stypy.reporting.localization.Localization(__file__, 466, 11), abs_146720, *[x_146721], **kwargs_146722)
        
        float_146724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, 20), 'float')
        # Applying the binary operator '<' (line 466)
        result_lt_146725 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 11), '<', abs_call_result_146723, float_146724)
        
        
        # Getting the type of 'x' (line 466)
        x_146726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 28), 'x')
        
        # Call to int(...): (line 466)
        # Processing the call arguments (line 466)
        # Getting the type of 'x' (line 466)
        x_146728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 37), 'x', False)
        # Processing the call keyword arguments (line 466)
        kwargs_146729 = {}
        # Getting the type of 'int' (line 466)
        int_146727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 33), 'int', False)
        # Calling int(args, kwargs) (line 466)
        int_call_result_146730 = invoke(stypy.reporting.localization.Localization(__file__, 466, 33), int_146727, *[x_146728], **kwargs_146729)
        
        # Applying the binary operator '==' (line 466)
        result_eq_146731 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 28), '==', x_146726, int_call_result_146730)
        
        # Applying the binary operator 'and' (line 466)
        result_and_keyword_146732 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 11), 'and', result_lt_146725, result_eq_146731)
        
        # Testing the type of an if condition (line 466)
        if_condition_146733 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 466, 8), result_and_keyword_146732)
        # Assigning a type to the variable 'if_condition_146733' (line 466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 8), 'if_condition_146733', if_condition_146733)
        # SSA begins for if statement (line 466)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_146734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 19), 'unicode', u'%d')
        # Getting the type of 'x' (line 467)
        x_146735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 26), 'x')
        # Applying the binary operator '%' (line 467)
        result_mod_146736 = python_operator(stypy.reporting.localization.Localization(__file__, 467, 19), '%', unicode_146734, x_146735)
        
        # Assigning a type to the variable 'stypy_return_type' (line 467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 467, 12), 'stypy_return_type', result_mod_146736)
        # SSA join for if statement (line 466)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'd' (line 469)
        d_146737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 11), 'd')
        float_146738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 15), 'float')
        # Applying the binary operator '<' (line 469)
        result_lt_146739 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 11), '<', d_146737, float_146738)
        
        # Testing the type of an if condition (line 469)
        if_condition_146740 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 469, 8), result_lt_146739)
        # Assigning a type to the variable 'if_condition_146740' (line 469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'if_condition_146740', if_condition_146740)
        # SSA begins for if statement (line 469)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 470):
        
        # Assigning a Str to a Name (line 470):
        unicode_146741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 18), 'unicode', u'%1.3e')
        # Assigning a type to the variable 'fmt' (line 470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 12), 'fmt', unicode_146741)
        # SSA branch for the else part of an if statement (line 469)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'd' (line 471)
        d_146742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 13), 'd')
        float_146743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, 17), 'float')
        # Applying the binary operator '<' (line 471)
        result_lt_146744 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 13), '<', d_146742, float_146743)
        
        # Testing the type of an if condition (line 471)
        if_condition_146745 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 471, 13), result_lt_146744)
        # Assigning a type to the variable 'if_condition_146745' (line 471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 13), 'if_condition_146745', if_condition_146745)
        # SSA begins for if statement (line 471)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 472):
        
        # Assigning a Str to a Name (line 472):
        unicode_146746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 472, 18), 'unicode', u'%1.3f')
        # Assigning a type to the variable 'fmt' (line 472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 12), 'fmt', unicode_146746)
        # SSA branch for the else part of an if statement (line 471)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'd' (line 473)
        d_146747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 13), 'd')
        float_146748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 17), 'float')
        # Applying the binary operator '>' (line 473)
        result_gt_146749 = python_operator(stypy.reporting.localization.Localization(__file__, 473, 13), '>', d_146747, float_146748)
        
        # Testing the type of an if condition (line 473)
        if_condition_146750 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 473, 13), result_gt_146749)
        # Assigning a type to the variable 'if_condition_146750' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 13), 'if_condition_146750', if_condition_146750)
        # SSA begins for if statement (line 473)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 474):
        
        # Assigning a Str to a Name (line 474):
        unicode_146751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 18), 'unicode', u'%1.1e')
        # Assigning a type to the variable 'fmt' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 12), 'fmt', unicode_146751)
        # SSA branch for the else part of an if statement (line 473)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'd' (line 475)
        d_146752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 13), 'd')
        int_146753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 17), 'int')
        # Applying the binary operator '>' (line 475)
        result_gt_146754 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 13), '>', d_146752, int_146753)
        
        # Testing the type of an if condition (line 475)
        if_condition_146755 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 475, 13), result_gt_146754)
        # Assigning a type to the variable 'if_condition_146755' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 13), 'if_condition_146755', if_condition_146755)
        # SSA begins for if statement (line 475)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 476):
        
        # Assigning a Str to a Name (line 476):
        unicode_146756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 476, 18), 'unicode', u'%1.1f')
        # Assigning a type to the variable 'fmt' (line 476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 12), 'fmt', unicode_146756)
        # SSA branch for the else part of an if statement (line 475)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'd' (line 477)
        d_146757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 13), 'd')
        int_146758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 17), 'int')
        # Applying the binary operator '>' (line 477)
        result_gt_146759 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 13), '>', d_146757, int_146758)
        
        # Testing the type of an if condition (line 477)
        if_condition_146760 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 477, 13), result_gt_146759)
        # Assigning a type to the variable 'if_condition_146760' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 13), 'if_condition_146760', if_condition_146760)
        # SSA begins for if statement (line 477)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 478):
        
        # Assigning a Str to a Name (line 478):
        unicode_146761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 18), 'unicode', u'%1.2f')
        # Assigning a type to the variable 'fmt' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 12), 'fmt', unicode_146761)
        # SSA branch for the else part of an if statement (line 477)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 480):
        
        # Assigning a Str to a Name (line 480):
        unicode_146762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 18), 'unicode', u'%1.3f')
        # Assigning a type to the variable 'fmt' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 12), 'fmt', unicode_146762)
        # SSA join for if statement (line 477)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 475)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 473)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 471)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 469)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 481):
        
        # Assigning a BinOp to a Name (line 481):
        # Getting the type of 'fmt' (line 481)
        fmt_146763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 12), 'fmt')
        # Getting the type of 'x' (line 481)
        x_146764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 18), 'x')
        # Applying the binary operator '%' (line 481)
        result_mod_146765 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 12), '%', fmt_146763, x_146764)
        
        # Assigning a type to the variable 's' (line 481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 8), 's', result_mod_146765)
        
        # Assigning a Call to a Name (line 483):
        
        # Assigning a Call to a Name (line 483):
        
        # Call to split(...): (line 483)
        # Processing the call arguments (line 483)
        unicode_146768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 22), 'unicode', u'e')
        # Processing the call keyword arguments (line 483)
        kwargs_146769 = {}
        # Getting the type of 's' (line 483)
        s_146766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 14), 's', False)
        # Obtaining the member 'split' of a type (line 483)
        split_146767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 14), s_146766, 'split')
        # Calling split(args, kwargs) (line 483)
        split_call_result_146770 = invoke(stypy.reporting.localization.Localization(__file__, 483, 14), split_146767, *[unicode_146768], **kwargs_146769)
        
        # Assigning a type to the variable 'tup' (line 483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'tup', split_call_result_146770)
        
        
        
        # Call to len(...): (line 484)
        # Processing the call arguments (line 484)
        # Getting the type of 'tup' (line 484)
        tup_146772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 15), 'tup', False)
        # Processing the call keyword arguments (line 484)
        kwargs_146773 = {}
        # Getting the type of 'len' (line 484)
        len_146771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 11), 'len', False)
        # Calling len(args, kwargs) (line 484)
        len_call_result_146774 = invoke(stypy.reporting.localization.Localization(__file__, 484, 11), len_146771, *[tup_146772], **kwargs_146773)
        
        int_146775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 23), 'int')
        # Applying the binary operator '==' (line 484)
        result_eq_146776 = python_operator(stypy.reporting.localization.Localization(__file__, 484, 11), '==', len_call_result_146774, int_146775)
        
        # Testing the type of an if condition (line 484)
        if_condition_146777 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 484, 8), result_eq_146776)
        # Assigning a type to the variable 'if_condition_146777' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'if_condition_146777', if_condition_146777)
        # SSA begins for if statement (line 484)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 485):
        
        # Assigning a Call to a Name (line 485):
        
        # Call to rstrip(...): (line 485)
        # Processing the call arguments (line 485)
        unicode_146787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 49), 'unicode', u'.')
        # Processing the call keyword arguments (line 485)
        kwargs_146788 = {}
        
        # Call to rstrip(...): (line 485)
        # Processing the call arguments (line 485)
        unicode_146783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 37), 'unicode', u'0')
        # Processing the call keyword arguments (line 485)
        kwargs_146784 = {}
        
        # Obtaining the type of the subscript
        int_146778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 27), 'int')
        # Getting the type of 'tup' (line 485)
        tup_146779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 23), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 485)
        getitem___146780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 23), tup_146779, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 485)
        subscript_call_result_146781 = invoke(stypy.reporting.localization.Localization(__file__, 485, 23), getitem___146780, int_146778)
        
        # Obtaining the member 'rstrip' of a type (line 485)
        rstrip_146782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 23), subscript_call_result_146781, 'rstrip')
        # Calling rstrip(args, kwargs) (line 485)
        rstrip_call_result_146785 = invoke(stypy.reporting.localization.Localization(__file__, 485, 23), rstrip_146782, *[unicode_146783], **kwargs_146784)
        
        # Obtaining the member 'rstrip' of a type (line 485)
        rstrip_146786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 23), rstrip_call_result_146785, 'rstrip')
        # Calling rstrip(args, kwargs) (line 485)
        rstrip_call_result_146789 = invoke(stypy.reporting.localization.Localization(__file__, 485, 23), rstrip_146786, *[unicode_146787], **kwargs_146788)
        
        # Assigning a type to the variable 'mantissa' (line 485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 12), 'mantissa', rstrip_call_result_146789)
        
        # Assigning a Call to a Name (line 486):
        
        # Assigning a Call to a Name (line 486):
        
        # Call to replace(...): (line 486)
        # Processing the call arguments (line 486)
        unicode_146798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 37), 'unicode', u'+')
        unicode_146799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 42), 'unicode', u'')
        # Processing the call keyword arguments (line 486)
        kwargs_146800 = {}
        
        # Obtaining the type of the subscript
        int_146790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 26), 'int')
        
        # Obtaining the type of the subscript
        int_146791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 23), 'int')
        # Getting the type of 'tup' (line 486)
        tup_146792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 19), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 486)
        getitem___146793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 19), tup_146792, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 486)
        subscript_call_result_146794 = invoke(stypy.reporting.localization.Localization(__file__, 486, 19), getitem___146793, int_146791)
        
        # Obtaining the member '__getitem__' of a type (line 486)
        getitem___146795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 19), subscript_call_result_146794, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 486)
        subscript_call_result_146796 = invoke(stypy.reporting.localization.Localization(__file__, 486, 19), getitem___146795, int_146790)
        
        # Obtaining the member 'replace' of a type (line 486)
        replace_146797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 19), subscript_call_result_146796, 'replace')
        # Calling replace(args, kwargs) (line 486)
        replace_call_result_146801 = invoke(stypy.reporting.localization.Localization(__file__, 486, 19), replace_146797, *[unicode_146798, unicode_146799], **kwargs_146800)
        
        # Assigning a type to the variable 'sign' (line 486)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 486, 12), 'sign', replace_call_result_146801)
        
        # Assigning a Call to a Name (line 487):
        
        # Assigning a Call to a Name (line 487):
        
        # Call to lstrip(...): (line 487)
        # Processing the call arguments (line 487)
        unicode_146811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 41), 'unicode', u'0')
        # Processing the call keyword arguments (line 487)
        kwargs_146812 = {}
        
        # Obtaining the type of the subscript
        int_146802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 30), 'int')
        slice_146803 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 487, 23), int_146802, None, None)
        
        # Obtaining the type of the subscript
        int_146804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 27), 'int')
        # Getting the type of 'tup' (line 487)
        tup_146805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 23), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 487)
        getitem___146806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 23), tup_146805, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 487)
        subscript_call_result_146807 = invoke(stypy.reporting.localization.Localization(__file__, 487, 23), getitem___146806, int_146804)
        
        # Obtaining the member '__getitem__' of a type (line 487)
        getitem___146808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 23), subscript_call_result_146807, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 487)
        subscript_call_result_146809 = invoke(stypy.reporting.localization.Localization(__file__, 487, 23), getitem___146808, slice_146803)
        
        # Obtaining the member 'lstrip' of a type (line 487)
        lstrip_146810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 23), subscript_call_result_146809, 'lstrip')
        # Calling lstrip(args, kwargs) (line 487)
        lstrip_call_result_146813 = invoke(stypy.reporting.localization.Localization(__file__, 487, 23), lstrip_146810, *[unicode_146811], **kwargs_146812)
        
        # Assigning a type to the variable 'exponent' (line 487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 12), 'exponent', lstrip_call_result_146813)
        
        # Assigning a BinOp to a Name (line 488):
        
        # Assigning a BinOp to a Name (line 488):
        unicode_146814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 488, 16), 'unicode', u'%se%s%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 488)
        tuple_146815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 488, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 488)
        # Adding element type (line 488)
        # Getting the type of 'mantissa' (line 488)
        mantissa_146816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 29), 'mantissa')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 488, 29), tuple_146815, mantissa_146816)
        # Adding element type (line 488)
        # Getting the type of 'sign' (line 488)
        sign_146817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 39), 'sign')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 488, 29), tuple_146815, sign_146817)
        # Adding element type (line 488)
        # Getting the type of 'exponent' (line 488)
        exponent_146818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 45), 'exponent')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 488, 29), tuple_146815, exponent_146818)
        
        # Applying the binary operator '%' (line 488)
        result_mod_146819 = python_operator(stypy.reporting.localization.Localization(__file__, 488, 16), '%', unicode_146814, tuple_146815)
        
        # Assigning a type to the variable 's' (line 488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 12), 's', result_mod_146819)
        # SSA branch for the else part of an if statement (line 484)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 490):
        
        # Assigning a Call to a Name (line 490):
        
        # Call to rstrip(...): (line 490)
        # Processing the call arguments (line 490)
        unicode_146826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 37), 'unicode', u'.')
        # Processing the call keyword arguments (line 490)
        kwargs_146827 = {}
        
        # Call to rstrip(...): (line 490)
        # Processing the call arguments (line 490)
        unicode_146822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 25), 'unicode', u'0')
        # Processing the call keyword arguments (line 490)
        kwargs_146823 = {}
        # Getting the type of 's' (line 490)
        s_146820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 16), 's', False)
        # Obtaining the member 'rstrip' of a type (line 490)
        rstrip_146821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 16), s_146820, 'rstrip')
        # Calling rstrip(args, kwargs) (line 490)
        rstrip_call_result_146824 = invoke(stypy.reporting.localization.Localization(__file__, 490, 16), rstrip_146821, *[unicode_146822], **kwargs_146823)
        
        # Obtaining the member 'rstrip' of a type (line 490)
        rstrip_146825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 16), rstrip_call_result_146824, 'rstrip')
        # Calling rstrip(args, kwargs) (line 490)
        rstrip_call_result_146828 = invoke(stypy.reporting.localization.Localization(__file__, 490, 16), rstrip_146825, *[unicode_146826], **kwargs_146827)
        
        # Assigning a type to the variable 's' (line 490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 12), 's', rstrip_call_result_146828)
        # SSA join for if statement (line 484)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 's' (line 491)
        s_146829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 15), 's')
        # Assigning a type to the variable 'stypy_return_type' (line 491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 491, 8), 'stypy_return_type', s_146829)
        
        # ################# End of 'pprint_val(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pprint_val' in the type store
        # Getting the type of 'stypy_return_type' (line 460)
        stypy_return_type_146830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146830)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pprint_val'
        return stypy_return_type_146830


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 443, 0, False)
        # Assigning a type to the variable 'self' (line 444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OldScalarFormatter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'OldScalarFormatter' (line 443)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 0), 'OldScalarFormatter', OldScalarFormatter)
# Declaration of the 'ScalarFormatter' class
# Getting the type of 'Formatter' (line 494)
Formatter_146831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 22), 'Formatter')

class ScalarFormatter(Formatter_146831, ):
    unicode_146832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, (-1)), 'unicode', u'\n    Format tick values as a number.\n\n    Tick value is interpreted as a plain old number. If\n    ``useOffset==True`` and the data range is much smaller than the data\n    average, then an offset will be determined such that the tick labels\n    are meaningful. Scientific notation is used for ``data < 10^-n`` or\n    ``data >= 10^m``, where ``n`` and ``m`` are the power limits set\n    using ``set_powerlimits((n,m))``. The defaults for these are\n    controlled by the ``axes.formatter.limits`` rc parameter.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 506)
        None_146833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 33), 'None')
        # Getting the type of 'None' (line 506)
        None_146834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 51), 'None')
        # Getting the type of 'None' (line 506)
        None_146835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 67), 'None')
        defaults = [None_146833, None_146834, None_146835]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 506, 4, False)
        # Assigning a type to the variable 'self' (line 507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 507, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.__init__', ['useOffset', 'useMathText', 'useLocale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['useOffset', 'useMathText', 'useLocale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 511)
        # Getting the type of 'useOffset' (line 511)
        useOffset_146836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 11), 'useOffset')
        # Getting the type of 'None' (line 511)
        None_146837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 24), 'None')
        
        (may_be_146838, more_types_in_union_146839) = may_be_none(useOffset_146836, None_146837)

        if may_be_146838:

            if more_types_in_union_146839:
                # Runtime conditional SSA (line 511)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 512):
            
            # Assigning a Subscript to a Name (line 512):
            
            # Obtaining the type of the subscript
            unicode_146840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 33), 'unicode', u'axes.formatter.useoffset')
            # Getting the type of 'rcParams' (line 512)
            rcParams_146841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 24), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 512)
            getitem___146842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 24), rcParams_146841, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 512)
            subscript_call_result_146843 = invoke(stypy.reporting.localization.Localization(__file__, 512, 24), getitem___146842, unicode_146840)
            
            # Assigning a type to the variable 'useOffset' (line 512)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 12), 'useOffset', subscript_call_result_146843)

            if more_types_in_union_146839:
                # SSA join for if statement (line 511)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Subscript to a Attribute (line 513):
        
        # Assigning a Subscript to a Attribute (line 513):
        
        # Obtaining the type of the subscript
        unicode_146844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, 42), 'unicode', u'axes.formatter.offset_threshold')
        # Getting the type of 'rcParams' (line 513)
        rcParams_146845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 33), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 513)
        getitem___146846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 33), rcParams_146845, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 513)
        subscript_call_result_146847 = invoke(stypy.reporting.localization.Localization(__file__, 513, 33), getitem___146846, unicode_146844)
        
        # Getting the type of 'self' (line 513)
        self_146848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 8), 'self')
        # Setting the type of the member '_offset_threshold' of a type (line 513)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 8), self_146848, '_offset_threshold', subscript_call_result_146847)
        
        # Call to set_useOffset(...): (line 514)
        # Processing the call arguments (line 514)
        # Getting the type of 'useOffset' (line 514)
        useOffset_146851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 27), 'useOffset', False)
        # Processing the call keyword arguments (line 514)
        kwargs_146852 = {}
        # Getting the type of 'self' (line 514)
        self_146849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 8), 'self', False)
        # Obtaining the member 'set_useOffset' of a type (line 514)
        set_useOffset_146850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 8), self_146849, 'set_useOffset')
        # Calling set_useOffset(args, kwargs) (line 514)
        set_useOffset_call_result_146853 = invoke(stypy.reporting.localization.Localization(__file__, 514, 8), set_useOffset_146850, *[useOffset_146851], **kwargs_146852)
        
        
        # Assigning a Subscript to a Attribute (line 515):
        
        # Assigning a Subscript to a Attribute (line 515):
        
        # Obtaining the type of the subscript
        unicode_146854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 32), 'unicode', u'text.usetex')
        # Getting the type of 'rcParams' (line 515)
        rcParams_146855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 23), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 515)
        getitem___146856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 23), rcParams_146855, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 515)
        subscript_call_result_146857 = invoke(stypy.reporting.localization.Localization(__file__, 515, 23), getitem___146856, unicode_146854)
        
        # Getting the type of 'self' (line 515)
        self_146858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 8), 'self')
        # Setting the type of the member '_usetex' of a type (line 515)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 8), self_146858, '_usetex', subscript_call_result_146857)
        
        # Type idiom detected: calculating its left and rigth part (line 516)
        # Getting the type of 'useMathText' (line 516)
        useMathText_146859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 11), 'useMathText')
        # Getting the type of 'None' (line 516)
        None_146860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 26), 'None')
        
        (may_be_146861, more_types_in_union_146862) = may_be_none(useMathText_146859, None_146860)

        if may_be_146861:

            if more_types_in_union_146862:
                # Runtime conditional SSA (line 516)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 517):
            
            # Assigning a Subscript to a Name (line 517):
            
            # Obtaining the type of the subscript
            unicode_146863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 35), 'unicode', u'axes.formatter.use_mathtext')
            # Getting the type of 'rcParams' (line 517)
            rcParams_146864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 26), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 517)
            getitem___146865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 26), rcParams_146864, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 517)
            subscript_call_result_146866 = invoke(stypy.reporting.localization.Localization(__file__, 517, 26), getitem___146865, unicode_146863)
            
            # Assigning a type to the variable 'useMathText' (line 517)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 12), 'useMathText', subscript_call_result_146866)

            if more_types_in_union_146862:
                # SSA join for if statement (line 516)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to set_useMathText(...): (line 518)
        # Processing the call arguments (line 518)
        # Getting the type of 'useMathText' (line 518)
        useMathText_146869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 29), 'useMathText', False)
        # Processing the call keyword arguments (line 518)
        kwargs_146870 = {}
        # Getting the type of 'self' (line 518)
        self_146867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 8), 'self', False)
        # Obtaining the member 'set_useMathText' of a type (line 518)
        set_useMathText_146868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 8), self_146867, 'set_useMathText')
        # Calling set_useMathText(args, kwargs) (line 518)
        set_useMathText_call_result_146871 = invoke(stypy.reporting.localization.Localization(__file__, 518, 8), set_useMathText_146868, *[useMathText_146869], **kwargs_146870)
        
        
        # Assigning a Num to a Attribute (line 519):
        
        # Assigning a Num to a Attribute (line 519):
        int_146872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 32), 'int')
        # Getting the type of 'self' (line 519)
        self_146873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 8), 'self')
        # Setting the type of the member 'orderOfMagnitude' of a type (line 519)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 8), self_146873, 'orderOfMagnitude', int_146872)
        
        # Assigning a Str to a Attribute (line 520):
        
        # Assigning a Str to a Attribute (line 520):
        unicode_146874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 22), 'unicode', u'')
        # Getting the type of 'self' (line 520)
        self_146875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 8), 'self')
        # Setting the type of the member 'format' of a type (line 520)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 8), self_146875, 'format', unicode_146874)
        
        # Assigning a Name to a Attribute (line 521):
        
        # Assigning a Name to a Attribute (line 521):
        # Getting the type of 'True' (line 521)
        True_146876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 27), 'True')
        # Getting the type of 'self' (line 521)
        self_146877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 8), 'self')
        # Setting the type of the member '_scientific' of a type (line 521)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 8), self_146877, '_scientific', True_146876)
        
        # Assigning a Subscript to a Attribute (line 522):
        
        # Assigning a Subscript to a Attribute (line 522):
        
        # Obtaining the type of the subscript
        unicode_146878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 522, 37), 'unicode', u'axes.formatter.limits')
        # Getting the type of 'rcParams' (line 522)
        rcParams_146879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 28), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 522)
        getitem___146880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 28), rcParams_146879, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 522)
        subscript_call_result_146881 = invoke(stypy.reporting.localization.Localization(__file__, 522, 28), getitem___146880, unicode_146878)
        
        # Getting the type of 'self' (line 522)
        self_146882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 8), 'self')
        # Setting the type of the member '_powerlimits' of a type (line 522)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 8), self_146882, '_powerlimits', subscript_call_result_146881)
        
        # Type idiom detected: calculating its left and rigth part (line 523)
        # Getting the type of 'useLocale' (line 523)
        useLocale_146883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 11), 'useLocale')
        # Getting the type of 'None' (line 523)
        None_146884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 24), 'None')
        
        (may_be_146885, more_types_in_union_146886) = may_be_none(useLocale_146883, None_146884)

        if may_be_146885:

            if more_types_in_union_146886:
                # Runtime conditional SSA (line 523)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 524):
            
            # Assigning a Subscript to a Name (line 524):
            
            # Obtaining the type of the subscript
            unicode_146887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 33), 'unicode', u'axes.formatter.use_locale')
            # Getting the type of 'rcParams' (line 524)
            rcParams_146888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 24), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 524)
            getitem___146889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 24), rcParams_146888, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 524)
            subscript_call_result_146890 = invoke(stypy.reporting.localization.Localization(__file__, 524, 24), getitem___146889, unicode_146887)
            
            # Assigning a type to the variable 'useLocale' (line 524)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 12), 'useLocale', subscript_call_result_146890)

            if more_types_in_union_146886:
                # SSA join for if statement (line 523)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 525):
        
        # Assigning a Name to a Attribute (line 525):
        # Getting the type of 'useLocale' (line 525)
        useLocale_146891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 26), 'useLocale')
        # Getting the type of 'self' (line 525)
        self_146892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 8), 'self')
        # Setting the type of the member '_useLocale' of a type (line 525)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 525, 8), self_146892, '_useLocale', useLocale_146891)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_useOffset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_useOffset'
        module_type_store = module_type_store.open_function_context('get_useOffset', 527, 4, False)
        # Assigning a type to the variable 'self' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter.get_useOffset.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter.get_useOffset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter.get_useOffset.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter.get_useOffset.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter.get_useOffset')
        ScalarFormatter.get_useOffset.__dict__.__setitem__('stypy_param_names_list', [])
        ScalarFormatter.get_useOffset.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter.get_useOffset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter.get_useOffset.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter.get_useOffset.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter.get_useOffset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter.get_useOffset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.get_useOffset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_useOffset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_useOffset(...)' code ##################

        # Getting the type of 'self' (line 528)
        self_146893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 15), 'self')
        # Obtaining the member '_useOffset' of a type (line 528)
        _useOffset_146894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 15), self_146893, '_useOffset')
        # Assigning a type to the variable 'stypy_return_type' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'stypy_return_type', _useOffset_146894)
        
        # ################# End of 'get_useOffset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_useOffset' in the type store
        # Getting the type of 'stypy_return_type' (line 527)
        stypy_return_type_146895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146895)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_useOffset'
        return stypy_return_type_146895


    @norecursion
    def set_useOffset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_useOffset'
        module_type_store = module_type_store.open_function_context('set_useOffset', 530, 4, False)
        # Assigning a type to the variable 'self' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter.set_useOffset.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter.set_useOffset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter.set_useOffset.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter.set_useOffset.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter.set_useOffset')
        ScalarFormatter.set_useOffset.__dict__.__setitem__('stypy_param_names_list', ['val'])
        ScalarFormatter.set_useOffset.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter.set_useOffset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter.set_useOffset.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter.set_useOffset.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter.set_useOffset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter.set_useOffset.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.set_useOffset', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_useOffset', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_useOffset(...)' code ##################

        
        
        # Getting the type of 'val' (line 531)
        val_146896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 11), 'val')
        
        # Obtaining an instance of the builtin type 'list' (line 531)
        list_146897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 531)
        # Adding element type (line 531)
        # Getting the type of 'True' (line 531)
        True_146898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 19), 'True')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 531, 18), list_146897, True_146898)
        # Adding element type (line 531)
        # Getting the type of 'False' (line 531)
        False_146899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 25), 'False')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 531, 18), list_146897, False_146899)
        
        # Applying the binary operator 'in' (line 531)
        result_contains_146900 = python_operator(stypy.reporting.localization.Localization(__file__, 531, 11), 'in', val_146896, list_146897)
        
        # Testing the type of an if condition (line 531)
        if_condition_146901 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 531, 8), result_contains_146900)
        # Assigning a type to the variable 'if_condition_146901' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'if_condition_146901', if_condition_146901)
        # SSA begins for if statement (line 531)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 532):
        
        # Assigning a Num to a Attribute (line 532):
        int_146902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, 26), 'int')
        # Getting the type of 'self' (line 532)
        self_146903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 12), 'self')
        # Setting the type of the member 'offset' of a type (line 532)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 12), self_146903, 'offset', int_146902)
        
        # Assigning a Name to a Attribute (line 533):
        
        # Assigning a Name to a Attribute (line 533):
        # Getting the type of 'val' (line 533)
        val_146904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 30), 'val')
        # Getting the type of 'self' (line 533)
        self_146905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 12), 'self')
        # Setting the type of the member '_useOffset' of a type (line 533)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 12), self_146905, '_useOffset', val_146904)
        # SSA branch for the else part of an if statement (line 531)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 535):
        
        # Assigning a Name to a Attribute (line 535):
        # Getting the type of 'False' (line 535)
        False_146906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 30), 'False')
        # Getting the type of 'self' (line 535)
        self_146907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 12), 'self')
        # Setting the type of the member '_useOffset' of a type (line 535)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 12), self_146907, '_useOffset', False_146906)
        
        # Assigning a Name to a Attribute (line 536):
        
        # Assigning a Name to a Attribute (line 536):
        # Getting the type of 'val' (line 536)
        val_146908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 26), 'val')
        # Getting the type of 'self' (line 536)
        self_146909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 12), 'self')
        # Setting the type of the member 'offset' of a type (line 536)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 536, 12), self_146909, 'offset', val_146908)
        # SSA join for if statement (line 531)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_useOffset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_useOffset' in the type store
        # Getting the type of 'stypy_return_type' (line 530)
        stypy_return_type_146910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146910)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_useOffset'
        return stypy_return_type_146910

    
    # Assigning a Call to a Name (line 538):

    @norecursion
    def get_useLocale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_useLocale'
        module_type_store = module_type_store.open_function_context('get_useLocale', 540, 4, False)
        # Assigning a type to the variable 'self' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter.get_useLocale.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter.get_useLocale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter.get_useLocale.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter.get_useLocale.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter.get_useLocale')
        ScalarFormatter.get_useLocale.__dict__.__setitem__('stypy_param_names_list', [])
        ScalarFormatter.get_useLocale.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter.get_useLocale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter.get_useLocale.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter.get_useLocale.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter.get_useLocale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter.get_useLocale.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.get_useLocale', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_useLocale', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_useLocale(...)' code ##################

        # Getting the type of 'self' (line 541)
        self_146911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 15), 'self')
        # Obtaining the member '_useLocale' of a type (line 541)
        _useLocale_146912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 15), self_146911, '_useLocale')
        # Assigning a type to the variable 'stypy_return_type' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'stypy_return_type', _useLocale_146912)
        
        # ################# End of 'get_useLocale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_useLocale' in the type store
        # Getting the type of 'stypy_return_type' (line 540)
        stypy_return_type_146913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146913)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_useLocale'
        return stypy_return_type_146913


    @norecursion
    def set_useLocale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_useLocale'
        module_type_store = module_type_store.open_function_context('set_useLocale', 543, 4, False)
        # Assigning a type to the variable 'self' (line 544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter.set_useLocale.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter.set_useLocale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter.set_useLocale.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter.set_useLocale.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter.set_useLocale')
        ScalarFormatter.set_useLocale.__dict__.__setitem__('stypy_param_names_list', ['val'])
        ScalarFormatter.set_useLocale.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter.set_useLocale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter.set_useLocale.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter.set_useLocale.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter.set_useLocale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter.set_useLocale.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.set_useLocale', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_useLocale', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_useLocale(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 544)
        # Getting the type of 'val' (line 544)
        val_146914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 11), 'val')
        # Getting the type of 'None' (line 544)
        None_146915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 18), 'None')
        
        (may_be_146916, more_types_in_union_146917) = may_be_none(val_146914, None_146915)

        if may_be_146916:

            if more_types_in_union_146917:
                # Runtime conditional SSA (line 544)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Attribute (line 545):
            
            # Assigning a Subscript to a Attribute (line 545):
            
            # Obtaining the type of the subscript
            unicode_146918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 39), 'unicode', u'axes.formatter.use_locale')
            # Getting the type of 'rcParams' (line 545)
            rcParams_146919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 30), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 545)
            getitem___146920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 30), rcParams_146919, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 545)
            subscript_call_result_146921 = invoke(stypy.reporting.localization.Localization(__file__, 545, 30), getitem___146920, unicode_146918)
            
            # Getting the type of 'self' (line 545)
            self_146922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 12), 'self')
            # Setting the type of the member '_useLocale' of a type (line 545)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 12), self_146922, '_useLocale', subscript_call_result_146921)

            if more_types_in_union_146917:
                # Runtime conditional SSA for else branch (line 544)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_146916) or more_types_in_union_146917):
            
            # Assigning a Name to a Attribute (line 547):
            
            # Assigning a Name to a Attribute (line 547):
            # Getting the type of 'val' (line 547)
            val_146923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 30), 'val')
            # Getting the type of 'self' (line 547)
            self_146924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'self')
            # Setting the type of the member '_useLocale' of a type (line 547)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 12), self_146924, '_useLocale', val_146923)

            if (may_be_146916 and more_types_in_union_146917):
                # SSA join for if statement (line 544)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'set_useLocale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_useLocale' in the type store
        # Getting the type of 'stypy_return_type' (line 543)
        stypy_return_type_146925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146925)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_useLocale'
        return stypy_return_type_146925

    
    # Assigning a Call to a Name (line 549):

    @norecursion
    def get_useMathText(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_useMathText'
        module_type_store = module_type_store.open_function_context('get_useMathText', 551, 4, False)
        # Assigning a type to the variable 'self' (line 552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter.get_useMathText.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter.get_useMathText.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter.get_useMathText.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter.get_useMathText.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter.get_useMathText')
        ScalarFormatter.get_useMathText.__dict__.__setitem__('stypy_param_names_list', [])
        ScalarFormatter.get_useMathText.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter.get_useMathText.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter.get_useMathText.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter.get_useMathText.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter.get_useMathText.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter.get_useMathText.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.get_useMathText', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_useMathText', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_useMathText(...)' code ##################

        # Getting the type of 'self' (line 552)
        self_146926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 15), 'self')
        # Obtaining the member '_useMathText' of a type (line 552)
        _useMathText_146927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 15), self_146926, '_useMathText')
        # Assigning a type to the variable 'stypy_return_type' (line 552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 8), 'stypy_return_type', _useMathText_146927)
        
        # ################# End of 'get_useMathText(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_useMathText' in the type store
        # Getting the type of 'stypy_return_type' (line 551)
        stypy_return_type_146928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146928)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_useMathText'
        return stypy_return_type_146928


    @norecursion
    def set_useMathText(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_useMathText'
        module_type_store = module_type_store.open_function_context('set_useMathText', 554, 4, False)
        # Assigning a type to the variable 'self' (line 555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter.set_useMathText.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter.set_useMathText.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter.set_useMathText.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter.set_useMathText.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter.set_useMathText')
        ScalarFormatter.set_useMathText.__dict__.__setitem__('stypy_param_names_list', ['val'])
        ScalarFormatter.set_useMathText.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter.set_useMathText.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter.set_useMathText.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter.set_useMathText.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter.set_useMathText.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter.set_useMathText.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.set_useMathText', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_useMathText', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_useMathText(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 555)
        # Getting the type of 'val' (line 555)
        val_146929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 11), 'val')
        # Getting the type of 'None' (line 555)
        None_146930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 18), 'None')
        
        (may_be_146931, more_types_in_union_146932) = may_be_none(val_146929, None_146930)

        if may_be_146931:

            if more_types_in_union_146932:
                # Runtime conditional SSA (line 555)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Attribute (line 556):
            
            # Assigning a Subscript to a Attribute (line 556):
            
            # Obtaining the type of the subscript
            unicode_146933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 556, 41), 'unicode', u'axes.formatter.use_mathtext')
            # Getting the type of 'rcParams' (line 556)
            rcParams_146934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 32), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 556)
            getitem___146935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 32), rcParams_146934, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 556)
            subscript_call_result_146936 = invoke(stypy.reporting.localization.Localization(__file__, 556, 32), getitem___146935, unicode_146933)
            
            # Getting the type of 'self' (line 556)
            self_146937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 12), 'self')
            # Setting the type of the member '_useMathText' of a type (line 556)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 12), self_146937, '_useMathText', subscript_call_result_146936)

            if more_types_in_union_146932:
                # Runtime conditional SSA for else branch (line 555)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_146931) or more_types_in_union_146932):
            
            # Assigning a Name to a Attribute (line 558):
            
            # Assigning a Name to a Attribute (line 558):
            # Getting the type of 'val' (line 558)
            val_146938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 32), 'val')
            # Getting the type of 'self' (line 558)
            self_146939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 12), 'self')
            # Setting the type of the member '_useMathText' of a type (line 558)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 558, 12), self_146939, '_useMathText', val_146938)

            if (may_be_146931 and more_types_in_union_146932):
                # SSA join for if statement (line 555)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'set_useMathText(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_useMathText' in the type store
        # Getting the type of 'stypy_return_type' (line 554)
        stypy_return_type_146940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146940)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_useMathText'
        return stypy_return_type_146940

    
    # Assigning a Call to a Name (line 560):

    @norecursion
    def fix_minus(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fix_minus'
        module_type_store = module_type_store.open_function_context('fix_minus', 562, 4, False)
        # Assigning a type to the variable 'self' (line 563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 563, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter.fix_minus.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter.fix_minus.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter.fix_minus.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter.fix_minus.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter.fix_minus')
        ScalarFormatter.fix_minus.__dict__.__setitem__('stypy_param_names_list', ['s'])
        ScalarFormatter.fix_minus.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter.fix_minus.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter.fix_minus.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter.fix_minus.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter.fix_minus.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter.fix_minus.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.fix_minus', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fix_minus', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fix_minus(...)' code ##################

        unicode_146941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, (-1)), 'unicode', u'\n        Replace hyphens with a unicode minus.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Obtaining the type of the subscript
        unicode_146942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 566, 20), 'unicode', u'text.usetex')
        # Getting the type of 'rcParams' (line 566)
        rcParams_146943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 11), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 566)
        getitem___146944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 11), rcParams_146943, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 566)
        subscript_call_result_146945 = invoke(stypy.reporting.localization.Localization(__file__, 566, 11), getitem___146944, unicode_146942)
        
        
        
        # Obtaining the type of the subscript
        unicode_146946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 566, 51), 'unicode', u'axes.unicode_minus')
        # Getting the type of 'rcParams' (line 566)
        rcParams_146947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 42), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 566)
        getitem___146948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 42), rcParams_146947, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 566)
        subscript_call_result_146949 = invoke(stypy.reporting.localization.Localization(__file__, 566, 42), getitem___146948, unicode_146946)
        
        # Applying the 'not' unary operator (line 566)
        result_not__146950 = python_operator(stypy.reporting.localization.Localization(__file__, 566, 38), 'not', subscript_call_result_146949)
        
        # Applying the binary operator 'or' (line 566)
        result_or_keyword_146951 = python_operator(stypy.reporting.localization.Localization(__file__, 566, 11), 'or', subscript_call_result_146945, result_not__146950)
        
        # Testing the type of an if condition (line 566)
        if_condition_146952 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 566, 8), result_or_keyword_146951)
        # Assigning a type to the variable 'if_condition_146952' (line 566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 8), 'if_condition_146952', if_condition_146952)
        # SSA begins for if statement (line 566)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 's' (line 567)
        s_146953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 19), 's')
        # Assigning a type to the variable 'stypy_return_type' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 12), 'stypy_return_type', s_146953)
        # SSA branch for the else part of an if statement (line 566)
        module_type_store.open_ssa_branch('else')
        
        # Call to replace(...): (line 569)
        # Processing the call arguments (line 569)
        unicode_146956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, 29), 'unicode', u'-')
        unicode_146957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, 34), 'unicode', u'\u2212')
        # Processing the call keyword arguments (line 569)
        kwargs_146958 = {}
        # Getting the type of 's' (line 569)
        s_146954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 19), 's', False)
        # Obtaining the member 'replace' of a type (line 569)
        replace_146955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 19), s_146954, 'replace')
        # Calling replace(args, kwargs) (line 569)
        replace_call_result_146959 = invoke(stypy.reporting.localization.Localization(__file__, 569, 19), replace_146955, *[unicode_146956, unicode_146957], **kwargs_146958)
        
        # Assigning a type to the variable 'stypy_return_type' (line 569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 12), 'stypy_return_type', replace_call_result_146959)
        # SSA join for if statement (line 566)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'fix_minus(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fix_minus' in the type store
        # Getting the type of 'stypy_return_type' (line 562)
        stypy_return_type_146960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146960)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fix_minus'
        return stypy_return_type_146960


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 571)
        None_146961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 30), 'None')
        defaults = [None_146961]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 571, 4, False)
        # Assigning a type to the variable 'self' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter.__call__')
        ScalarFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        ScalarFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_146962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 574, (-1)), 'unicode', u'\n        Return the format for tick value `x` at position `pos`.\n        ')
        
        
        
        # Call to len(...): (line 575)
        # Processing the call arguments (line 575)
        # Getting the type of 'self' (line 575)
        self_146964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 15), 'self', False)
        # Obtaining the member 'locs' of a type (line 575)
        locs_146965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 15), self_146964, 'locs')
        # Processing the call keyword arguments (line 575)
        kwargs_146966 = {}
        # Getting the type of 'len' (line 575)
        len_146963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 11), 'len', False)
        # Calling len(args, kwargs) (line 575)
        len_call_result_146967 = invoke(stypy.reporting.localization.Localization(__file__, 575, 11), len_146963, *[locs_146965], **kwargs_146966)
        
        int_146968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 575, 29), 'int')
        # Applying the binary operator '==' (line 575)
        result_eq_146969 = python_operator(stypy.reporting.localization.Localization(__file__, 575, 11), '==', len_call_result_146967, int_146968)
        
        # Testing the type of an if condition (line 575)
        if_condition_146970 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 575, 8), result_eq_146969)
        # Assigning a type to the variable 'if_condition_146970' (line 575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 575, 8), 'if_condition_146970', if_condition_146970)
        # SSA begins for if statement (line 575)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_146971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 19), 'unicode', u'')
        # Assigning a type to the variable 'stypy_return_type' (line 576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 12), 'stypy_return_type', unicode_146971)
        # SSA branch for the else part of an if statement (line 575)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 578):
        
        # Assigning a Call to a Name (line 578):
        
        # Call to pprint_val(...): (line 578)
        # Processing the call arguments (line 578)
        # Getting the type of 'x' (line 578)
        x_146974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 32), 'x', False)
        # Processing the call keyword arguments (line 578)
        kwargs_146975 = {}
        # Getting the type of 'self' (line 578)
        self_146972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 16), 'self', False)
        # Obtaining the member 'pprint_val' of a type (line 578)
        pprint_val_146973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 16), self_146972, 'pprint_val')
        # Calling pprint_val(args, kwargs) (line 578)
        pprint_val_call_result_146976 = invoke(stypy.reporting.localization.Localization(__file__, 578, 16), pprint_val_146973, *[x_146974], **kwargs_146975)
        
        # Assigning a type to the variable 's' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 12), 's', pprint_val_call_result_146976)
        
        # Call to fix_minus(...): (line 579)
        # Processing the call arguments (line 579)
        # Getting the type of 's' (line 579)
        s_146979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 34), 's', False)
        # Processing the call keyword arguments (line 579)
        kwargs_146980 = {}
        # Getting the type of 'self' (line 579)
        self_146977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 19), 'self', False)
        # Obtaining the member 'fix_minus' of a type (line 579)
        fix_minus_146978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 579, 19), self_146977, 'fix_minus')
        # Calling fix_minus(args, kwargs) (line 579)
        fix_minus_call_result_146981 = invoke(stypy.reporting.localization.Localization(__file__, 579, 19), fix_minus_146978, *[s_146979], **kwargs_146980)
        
        # Assigning a type to the variable 'stypy_return_type' (line 579)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 579, 12), 'stypy_return_type', fix_minus_call_result_146981)
        # SSA join for if statement (line 575)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 571)
        stypy_return_type_146982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146982)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_146982


    @norecursion
    def set_scientific(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_scientific'
        module_type_store = module_type_store.open_function_context('set_scientific', 581, 4, False)
        # Assigning a type to the variable 'self' (line 582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter.set_scientific.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter.set_scientific.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter.set_scientific.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter.set_scientific.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter.set_scientific')
        ScalarFormatter.set_scientific.__dict__.__setitem__('stypy_param_names_list', ['b'])
        ScalarFormatter.set_scientific.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter.set_scientific.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter.set_scientific.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter.set_scientific.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter.set_scientific.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter.set_scientific.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.set_scientific', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_scientific', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_scientific(...)' code ##################

        unicode_146983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 586, (-1)), 'unicode', u'\n        Turn scientific notation on or off.\n\n        .. seealso:: Method :meth:`set_powerlimits`\n        ')
        
        # Assigning a Call to a Attribute (line 587):
        
        # Assigning a Call to a Attribute (line 587):
        
        # Call to bool(...): (line 587)
        # Processing the call arguments (line 587)
        # Getting the type of 'b' (line 587)
        b_146985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 32), 'b', False)
        # Processing the call keyword arguments (line 587)
        kwargs_146986 = {}
        # Getting the type of 'bool' (line 587)
        bool_146984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 27), 'bool', False)
        # Calling bool(args, kwargs) (line 587)
        bool_call_result_146987 = invoke(stypy.reporting.localization.Localization(__file__, 587, 27), bool_146984, *[b_146985], **kwargs_146986)
        
        # Getting the type of 'self' (line 587)
        self_146988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 8), 'self')
        # Setting the type of the member '_scientific' of a type (line 587)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 8), self_146988, '_scientific', bool_call_result_146987)
        
        # ################# End of 'set_scientific(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_scientific' in the type store
        # Getting the type of 'stypy_return_type' (line 581)
        stypy_return_type_146989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146989)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_scientific'
        return stypy_return_type_146989


    @norecursion
    def set_powerlimits(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_powerlimits'
        module_type_store = module_type_store.open_function_context('set_powerlimits', 589, 4, False)
        # Assigning a type to the variable 'self' (line 590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter.set_powerlimits.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter.set_powerlimits.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter.set_powerlimits.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter.set_powerlimits.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter.set_powerlimits')
        ScalarFormatter.set_powerlimits.__dict__.__setitem__('stypy_param_names_list', ['lims'])
        ScalarFormatter.set_powerlimits.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter.set_powerlimits.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter.set_powerlimits.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter.set_powerlimits.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter.set_powerlimits.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter.set_powerlimits.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.set_powerlimits', ['lims'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_powerlimits', localization, ['lims'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_powerlimits(...)' code ##################

        unicode_146990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, (-1)), 'unicode', u'\n        Sets size thresholds for scientific notation.\n\n        ``lims`` is a two-element sequence containing the powers of 10\n        that determine the switchover threshold. Numbers below\n        ``10**lims[0]`` and above ``10**lims[1]`` will be displayed in\n        scientific notation.\n\n        For example, ``formatter.set_powerlimits((-3, 4))`` sets the\n        pre-2007 default in which scientific notation is used for\n        numbers less than 1e-3 or greater than 1e4.\n\n        .. seealso:: Method :meth:`set_scientific`\n        ')
        
        
        
        # Call to len(...): (line 604)
        # Processing the call arguments (line 604)
        # Getting the type of 'lims' (line 604)
        lims_146992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 15), 'lims', False)
        # Processing the call keyword arguments (line 604)
        kwargs_146993 = {}
        # Getting the type of 'len' (line 604)
        len_146991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 11), 'len', False)
        # Calling len(args, kwargs) (line 604)
        len_call_result_146994 = invoke(stypy.reporting.localization.Localization(__file__, 604, 11), len_146991, *[lims_146992], **kwargs_146993)
        
        int_146995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 604, 24), 'int')
        # Applying the binary operator '!=' (line 604)
        result_ne_146996 = python_operator(stypy.reporting.localization.Localization(__file__, 604, 11), '!=', len_call_result_146994, int_146995)
        
        # Testing the type of an if condition (line 604)
        if_condition_146997 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 604, 8), result_ne_146996)
        # Assigning a type to the variable 'if_condition_146997' (line 604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 8), 'if_condition_146997', if_condition_146997)
        # SSA begins for if statement (line 604)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 605)
        # Processing the call arguments (line 605)
        unicode_146999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 29), 'unicode', u"'lims' must be a sequence of length 2")
        # Processing the call keyword arguments (line 605)
        kwargs_147000 = {}
        # Getting the type of 'ValueError' (line 605)
        ValueError_146998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 605)
        ValueError_call_result_147001 = invoke(stypy.reporting.localization.Localization(__file__, 605, 18), ValueError_146998, *[unicode_146999], **kwargs_147000)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 605, 12), ValueError_call_result_147001, 'raise parameter', BaseException)
        # SSA join for if statement (line 604)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 606):
        
        # Assigning a Name to a Attribute (line 606):
        # Getting the type of 'lims' (line 606)
        lims_147002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 28), 'lims')
        # Getting the type of 'self' (line 606)
        self_147003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 8), 'self')
        # Setting the type of the member '_powerlimits' of a type (line 606)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 8), self_147003, '_powerlimits', lims_147002)
        
        # ################# End of 'set_powerlimits(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_powerlimits' in the type store
        # Getting the type of 'stypy_return_type' (line 589)
        stypy_return_type_147004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147004)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_powerlimits'
        return stypy_return_type_147004


    @norecursion
    def format_data_short(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'format_data_short'
        module_type_store = module_type_store.open_function_context('format_data_short', 608, 4, False)
        # Assigning a type to the variable 'self' (line 609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter.format_data_short.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter.format_data_short.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter.format_data_short.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter.format_data_short.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter.format_data_short')
        ScalarFormatter.format_data_short.__dict__.__setitem__('stypy_param_names_list', ['value'])
        ScalarFormatter.format_data_short.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter.format_data_short.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter.format_data_short.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter.format_data_short.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter.format_data_short.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter.format_data_short.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.format_data_short', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'format_data_short', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'format_data_short(...)' code ##################

        unicode_147005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, (-1)), 'unicode', u'\n        Return a short formatted string representation of a number.\n        ')
        
        # Getting the type of 'self' (line 612)
        self_147006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 11), 'self')
        # Obtaining the member '_useLocale' of a type (line 612)
        _useLocale_147007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 11), self_147006, '_useLocale')
        # Testing the type of an if condition (line 612)
        if_condition_147008 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 612, 8), _useLocale_147007)
        # Assigning a type to the variable 'if_condition_147008' (line 612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'if_condition_147008', if_condition_147008)
        # SSA begins for if statement (line 612)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to format_string(...): (line 613)
        # Processing the call arguments (line 613)
        unicode_147011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 40), 'unicode', u'%-12g')
        
        # Obtaining an instance of the builtin type 'tuple' (line 613)
        tuple_147012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 613)
        # Adding element type (line 613)
        # Getting the type of 'value' (line 613)
        value_147013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 50), 'value', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 613, 50), tuple_147012, value_147013)
        
        # Processing the call keyword arguments (line 613)
        kwargs_147014 = {}
        # Getting the type of 'locale' (line 613)
        locale_147009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 19), 'locale', False)
        # Obtaining the member 'format_string' of a type (line 613)
        format_string_147010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 19), locale_147009, 'format_string')
        # Calling format_string(args, kwargs) (line 613)
        format_string_call_result_147015 = invoke(stypy.reporting.localization.Localization(__file__, 613, 19), format_string_147010, *[unicode_147011, tuple_147012], **kwargs_147014)
        
        # Assigning a type to the variable 'stypy_return_type' (line 613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 12), 'stypy_return_type', format_string_call_result_147015)
        # SSA branch for the else part of an if statement (line 612)
        module_type_store.open_ssa_branch('else')
        unicode_147016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 19), 'unicode', u'%-12g')
        # Getting the type of 'value' (line 615)
        value_147017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 29), 'value')
        # Applying the binary operator '%' (line 615)
        result_mod_147018 = python_operator(stypy.reporting.localization.Localization(__file__, 615, 19), '%', unicode_147016, value_147017)
        
        # Assigning a type to the variable 'stypy_return_type' (line 615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 12), 'stypy_return_type', result_mod_147018)
        # SSA join for if statement (line 612)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'format_data_short(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'format_data_short' in the type store
        # Getting the type of 'stypy_return_type' (line 608)
        stypy_return_type_147019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147019)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'format_data_short'
        return stypy_return_type_147019


    @norecursion
    def format_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'format_data'
        module_type_store = module_type_store.open_function_context('format_data', 617, 4, False)
        # Assigning a type to the variable 'self' (line 618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter.format_data.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter.format_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter.format_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter.format_data.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter.format_data')
        ScalarFormatter.format_data.__dict__.__setitem__('stypy_param_names_list', ['value'])
        ScalarFormatter.format_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter.format_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter.format_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter.format_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter.format_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter.format_data.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.format_data', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'format_data', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'format_data(...)' code ##################

        unicode_147020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, (-1)), 'unicode', u'\n        Return a formatted string representation of a number.\n        ')
        
        # Getting the type of 'self' (line 621)
        self_147021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 11), 'self')
        # Obtaining the member '_useLocale' of a type (line 621)
        _useLocale_147022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 11), self_147021, '_useLocale')
        # Testing the type of an if condition (line 621)
        if_condition_147023 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 621, 8), _useLocale_147022)
        # Assigning a type to the variable 'if_condition_147023' (line 621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 8), 'if_condition_147023', if_condition_147023)
        # SSA begins for if statement (line 621)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 622):
        
        # Assigning a Call to a Name (line 622):
        
        # Call to format_string(...): (line 622)
        # Processing the call arguments (line 622)
        unicode_147026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 622, 37), 'unicode', u'%1.10e')
        
        # Obtaining an instance of the builtin type 'tuple' (line 622)
        tuple_147027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 622, 48), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 622)
        # Adding element type (line 622)
        # Getting the type of 'value' (line 622)
        value_147028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 48), 'value', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 622, 48), tuple_147027, value_147028)
        
        # Processing the call keyword arguments (line 622)
        kwargs_147029 = {}
        # Getting the type of 'locale' (line 622)
        locale_147024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 16), 'locale', False)
        # Obtaining the member 'format_string' of a type (line 622)
        format_string_147025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 16), locale_147024, 'format_string')
        # Calling format_string(args, kwargs) (line 622)
        format_string_call_result_147030 = invoke(stypy.reporting.localization.Localization(__file__, 622, 16), format_string_147025, *[unicode_147026, tuple_147027], **kwargs_147029)
        
        # Assigning a type to the variable 's' (line 622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 12), 's', format_string_call_result_147030)
        # SSA branch for the else part of an if statement (line 621)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 624):
        
        # Assigning a BinOp to a Name (line 624):
        unicode_147031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 624, 16), 'unicode', u'%1.10e')
        # Getting the type of 'value' (line 624)
        value_147032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 27), 'value')
        # Applying the binary operator '%' (line 624)
        result_mod_147033 = python_operator(stypy.reporting.localization.Localization(__file__, 624, 16), '%', unicode_147031, value_147032)
        
        # Assigning a type to the variable 's' (line 624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 12), 's', result_mod_147033)
        # SSA join for if statement (line 621)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 625):
        
        # Assigning a Call to a Name (line 625):
        
        # Call to _formatSciNotation(...): (line 625)
        # Processing the call arguments (line 625)
        # Getting the type of 's' (line 625)
        s_147036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 36), 's', False)
        # Processing the call keyword arguments (line 625)
        kwargs_147037 = {}
        # Getting the type of 'self' (line 625)
        self_147034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 12), 'self', False)
        # Obtaining the member '_formatSciNotation' of a type (line 625)
        _formatSciNotation_147035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 12), self_147034, '_formatSciNotation')
        # Calling _formatSciNotation(args, kwargs) (line 625)
        _formatSciNotation_call_result_147038 = invoke(stypy.reporting.localization.Localization(__file__, 625, 12), _formatSciNotation_147035, *[s_147036], **kwargs_147037)
        
        # Assigning a type to the variable 's' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 's', _formatSciNotation_call_result_147038)
        
        # Call to fix_minus(...): (line 626)
        # Processing the call arguments (line 626)
        # Getting the type of 's' (line 626)
        s_147041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 30), 's', False)
        # Processing the call keyword arguments (line 626)
        kwargs_147042 = {}
        # Getting the type of 'self' (line 626)
        self_147039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 15), 'self', False)
        # Obtaining the member 'fix_minus' of a type (line 626)
        fix_minus_147040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 15), self_147039, 'fix_minus')
        # Calling fix_minus(args, kwargs) (line 626)
        fix_minus_call_result_147043 = invoke(stypy.reporting.localization.Localization(__file__, 626, 15), fix_minus_147040, *[s_147041], **kwargs_147042)
        
        # Assigning a type to the variable 'stypy_return_type' (line 626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 8), 'stypy_return_type', fix_minus_call_result_147043)
        
        # ################# End of 'format_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'format_data' in the type store
        # Getting the type of 'stypy_return_type' (line 617)
        stypy_return_type_147044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147044)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'format_data'
        return stypy_return_type_147044


    @norecursion
    def get_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_offset'
        module_type_store = module_type_store.open_function_context('get_offset', 628, 4, False)
        # Assigning a type to the variable 'self' (line 629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter.get_offset.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter.get_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter.get_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter.get_offset.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter.get_offset')
        ScalarFormatter.get_offset.__dict__.__setitem__('stypy_param_names_list', [])
        ScalarFormatter.get_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter.get_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter.get_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter.get_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter.get_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter.get_offset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.get_offset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_offset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_offset(...)' code ##################

        unicode_147045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 631, (-1)), 'unicode', u'\n        Return scientific notation, plus offset.\n        ')
        
        
        
        # Call to len(...): (line 632)
        # Processing the call arguments (line 632)
        # Getting the type of 'self' (line 632)
        self_147047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 15), 'self', False)
        # Obtaining the member 'locs' of a type (line 632)
        locs_147048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 632, 15), self_147047, 'locs')
        # Processing the call keyword arguments (line 632)
        kwargs_147049 = {}
        # Getting the type of 'len' (line 632)
        len_147046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 11), 'len', False)
        # Calling len(args, kwargs) (line 632)
        len_call_result_147050 = invoke(stypy.reporting.localization.Localization(__file__, 632, 11), len_147046, *[locs_147048], **kwargs_147049)
        
        int_147051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 632, 29), 'int')
        # Applying the binary operator '==' (line 632)
        result_eq_147052 = python_operator(stypy.reporting.localization.Localization(__file__, 632, 11), '==', len_call_result_147050, int_147051)
        
        # Testing the type of an if condition (line 632)
        if_condition_147053 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 632, 8), result_eq_147052)
        # Assigning a type to the variable 'if_condition_147053' (line 632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 632, 8), 'if_condition_147053', if_condition_147053)
        # SSA begins for if statement (line 632)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_147054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 633, 19), 'unicode', u'')
        # Assigning a type to the variable 'stypy_return_type' (line 633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 12), 'stypy_return_type', unicode_147054)
        # SSA join for if statement (line 632)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Str to a Name (line 634):
        
        # Assigning a Str to a Name (line 634):
        unicode_147055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 12), 'unicode', u'')
        # Assigning a type to the variable 's' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 's', unicode_147055)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 635)
        self_147056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 11), 'self')
        # Obtaining the member 'orderOfMagnitude' of a type (line 635)
        orderOfMagnitude_147057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 11), self_147056, 'orderOfMagnitude')
        # Getting the type of 'self' (line 635)
        self_147058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 36), 'self')
        # Obtaining the member 'offset' of a type (line 635)
        offset_147059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 36), self_147058, 'offset')
        # Applying the binary operator 'or' (line 635)
        result_or_keyword_147060 = python_operator(stypy.reporting.localization.Localization(__file__, 635, 11), 'or', orderOfMagnitude_147057, offset_147059)
        
        # Testing the type of an if condition (line 635)
        if_condition_147061 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 635, 8), result_or_keyword_147060)
        # Assigning a type to the variable 'if_condition_147061' (line 635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 8), 'if_condition_147061', if_condition_147061)
        # SSA begins for if statement (line 635)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 636):
        
        # Assigning a Str to a Name (line 636):
        unicode_147062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 24), 'unicode', u'')
        # Assigning a type to the variable 'offsetStr' (line 636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 12), 'offsetStr', unicode_147062)
        
        # Assigning a Str to a Name (line 637):
        
        # Assigning a Str to a Name (line 637):
        unicode_147063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 24), 'unicode', u'')
        # Assigning a type to the variable 'sciNotStr' (line 637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 637, 12), 'sciNotStr', unicode_147063)
        
        # Getting the type of 'self' (line 638)
        self_147064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 15), 'self')
        # Obtaining the member 'offset' of a type (line 638)
        offset_147065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 15), self_147064, 'offset')
        # Testing the type of an if condition (line 638)
        if_condition_147066 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 638, 12), offset_147065)
        # Assigning a type to the variable 'if_condition_147066' (line 638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 12), 'if_condition_147066', if_condition_147066)
        # SSA begins for if statement (line 638)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 639):
        
        # Assigning a Call to a Name (line 639):
        
        # Call to format_data(...): (line 639)
        # Processing the call arguments (line 639)
        # Getting the type of 'self' (line 639)
        self_147069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 45), 'self', False)
        # Obtaining the member 'offset' of a type (line 639)
        offset_147070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 45), self_147069, 'offset')
        # Processing the call keyword arguments (line 639)
        kwargs_147071 = {}
        # Getting the type of 'self' (line 639)
        self_147067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 28), 'self', False)
        # Obtaining the member 'format_data' of a type (line 639)
        format_data_147068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 28), self_147067, 'format_data')
        # Calling format_data(args, kwargs) (line 639)
        format_data_call_result_147072 = invoke(stypy.reporting.localization.Localization(__file__, 639, 28), format_data_147068, *[offset_147070], **kwargs_147071)
        
        # Assigning a type to the variable 'offsetStr' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 16), 'offsetStr', format_data_call_result_147072)
        
        
        # Getting the type of 'self' (line 640)
        self_147073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 19), 'self')
        # Obtaining the member 'offset' of a type (line 640)
        offset_147074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 19), self_147073, 'offset')
        int_147075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 33), 'int')
        # Applying the binary operator '>' (line 640)
        result_gt_147076 = python_operator(stypy.reporting.localization.Localization(__file__, 640, 19), '>', offset_147074, int_147075)
        
        # Testing the type of an if condition (line 640)
        if_condition_147077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 640, 16), result_gt_147076)
        # Assigning a type to the variable 'if_condition_147077' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 16), 'if_condition_147077', if_condition_147077)
        # SSA begins for if statement (line 640)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 641):
        
        # Assigning a BinOp to a Name (line 641):
        unicode_147078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 641, 32), 'unicode', u'+')
        # Getting the type of 'offsetStr' (line 641)
        offsetStr_147079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 38), 'offsetStr')
        # Applying the binary operator '+' (line 641)
        result_add_147080 = python_operator(stypy.reporting.localization.Localization(__file__, 641, 32), '+', unicode_147078, offsetStr_147079)
        
        # Assigning a type to the variable 'offsetStr' (line 641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 20), 'offsetStr', result_add_147080)
        # SSA join for if statement (line 640)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 638)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 642)
        self_147081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 15), 'self')
        # Obtaining the member 'orderOfMagnitude' of a type (line 642)
        orderOfMagnitude_147082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 642, 15), self_147081, 'orderOfMagnitude')
        # Testing the type of an if condition (line 642)
        if_condition_147083 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 642, 12), orderOfMagnitude_147082)
        # Assigning a type to the variable 'if_condition_147083' (line 642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 12), 'if_condition_147083', if_condition_147083)
        # SSA begins for if statement (line 642)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 643)
        self_147084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 19), 'self')
        # Obtaining the member '_usetex' of a type (line 643)
        _usetex_147085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 19), self_147084, '_usetex')
        # Getting the type of 'self' (line 643)
        self_147086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 35), 'self')
        # Obtaining the member '_useMathText' of a type (line 643)
        _useMathText_147087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 35), self_147086, '_useMathText')
        # Applying the binary operator 'or' (line 643)
        result_or_keyword_147088 = python_operator(stypy.reporting.localization.Localization(__file__, 643, 19), 'or', _usetex_147085, _useMathText_147087)
        
        # Testing the type of an if condition (line 643)
        if_condition_147089 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 643, 16), result_or_keyword_147088)
        # Assigning a type to the variable 'if_condition_147089' (line 643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 16), 'if_condition_147089', if_condition_147089)
        # SSA begins for if statement (line 643)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 644):
        
        # Assigning a Call to a Name (line 644):
        
        # Call to format_data(...): (line 644)
        # Processing the call arguments (line 644)
        int_147092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 49), 'int')
        # Getting the type of 'self' (line 644)
        self_147093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 55), 'self', False)
        # Obtaining the member 'orderOfMagnitude' of a type (line 644)
        orderOfMagnitude_147094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 55), self_147093, 'orderOfMagnitude')
        # Applying the binary operator '**' (line 644)
        result_pow_147095 = python_operator(stypy.reporting.localization.Localization(__file__, 644, 49), '**', int_147092, orderOfMagnitude_147094)
        
        # Processing the call keyword arguments (line 644)
        kwargs_147096 = {}
        # Getting the type of 'self' (line 644)
        self_147090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 32), 'self', False)
        # Obtaining the member 'format_data' of a type (line 644)
        format_data_147091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 32), self_147090, 'format_data')
        # Calling format_data(args, kwargs) (line 644)
        format_data_call_result_147097 = invoke(stypy.reporting.localization.Localization(__file__, 644, 32), format_data_147091, *[result_pow_147095], **kwargs_147096)
        
        # Assigning a type to the variable 'sciNotStr' (line 644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 644, 20), 'sciNotStr', format_data_call_result_147097)
        # SSA branch for the else part of an if statement (line 643)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 646):
        
        # Assigning a BinOp to a Name (line 646):
        unicode_147098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 646, 32), 'unicode', u'1e%d')
        # Getting the type of 'self' (line 646)
        self_147099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 41), 'self')
        # Obtaining the member 'orderOfMagnitude' of a type (line 646)
        orderOfMagnitude_147100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 41), self_147099, 'orderOfMagnitude')
        # Applying the binary operator '%' (line 646)
        result_mod_147101 = python_operator(stypy.reporting.localization.Localization(__file__, 646, 32), '%', unicode_147098, orderOfMagnitude_147100)
        
        # Assigning a type to the variable 'sciNotStr' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 20), 'sciNotStr', result_mod_147101)
        # SSA join for if statement (line 643)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 642)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 647)
        self_147102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 15), 'self')
        # Obtaining the member '_useMathText' of a type (line 647)
        _useMathText_147103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 15), self_147102, '_useMathText')
        # Testing the type of an if condition (line 647)
        if_condition_147104 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 647, 12), _useMathText_147103)
        # Assigning a type to the variable 'if_condition_147104' (line 647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 12), 'if_condition_147104', if_condition_147104)
        # SSA begins for if statement (line 647)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'sciNotStr' (line 648)
        sciNotStr_147105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 19), 'sciNotStr')
        unicode_147106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 32), 'unicode', u'')
        # Applying the binary operator '!=' (line 648)
        result_ne_147107 = python_operator(stypy.reporting.localization.Localization(__file__, 648, 19), '!=', sciNotStr_147105, unicode_147106)
        
        # Testing the type of an if condition (line 648)
        if_condition_147108 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 648, 16), result_ne_147107)
        # Assigning a type to the variable 'if_condition_147108' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 16), 'if_condition_147108', if_condition_147108)
        # SSA begins for if statement (line 648)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 649):
        
        # Assigning a BinOp to a Name (line 649):
        unicode_147109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 649, 32), 'unicode', u'\\times%s')
        
        # Call to _mathdefault(...): (line 649)
        # Processing the call arguments (line 649)
        # Getting the type of 'sciNotStr' (line 649)
        sciNotStr_147111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 59), 'sciNotStr', False)
        # Processing the call keyword arguments (line 649)
        kwargs_147112 = {}
        # Getting the type of '_mathdefault' (line 649)
        _mathdefault_147110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 46), '_mathdefault', False)
        # Calling _mathdefault(args, kwargs) (line 649)
        _mathdefault_call_result_147113 = invoke(stypy.reporting.localization.Localization(__file__, 649, 46), _mathdefault_147110, *[sciNotStr_147111], **kwargs_147112)
        
        # Applying the binary operator '%' (line 649)
        result_mod_147114 = python_operator(stypy.reporting.localization.Localization(__file__, 649, 32), '%', unicode_147109, _mathdefault_call_result_147113)
        
        # Assigning a type to the variable 'sciNotStr' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 20), 'sciNotStr', result_mod_147114)
        # SSA join for if statement (line 648)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 650):
        
        # Assigning a Call to a Name (line 650):
        
        # Call to join(...): (line 650)
        # Processing the call arguments (line 650)
        
        # Obtaining an instance of the builtin type 'tuple' (line 650)
        tuple_147117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 650)
        # Adding element type (line 650)
        unicode_147118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 29), 'unicode', u'$')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 650, 29), tuple_147117, unicode_147118)
        # Adding element type (line 650)
        # Getting the type of 'sciNotStr' (line 650)
        sciNotStr_147119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 34), 'sciNotStr', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 650, 29), tuple_147117, sciNotStr_147119)
        # Adding element type (line 650)
        
        # Call to _mathdefault(...): (line 650)
        # Processing the call arguments (line 650)
        # Getting the type of 'offsetStr' (line 650)
        offsetStr_147121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 58), 'offsetStr', False)
        # Processing the call keyword arguments (line 650)
        kwargs_147122 = {}
        # Getting the type of '_mathdefault' (line 650)
        _mathdefault_147120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 45), '_mathdefault', False)
        # Calling _mathdefault(args, kwargs) (line 650)
        _mathdefault_call_result_147123 = invoke(stypy.reporting.localization.Localization(__file__, 650, 45), _mathdefault_147120, *[offsetStr_147121], **kwargs_147122)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 650, 29), tuple_147117, _mathdefault_call_result_147123)
        # Adding element type (line 650)
        unicode_147124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 70), 'unicode', u'$')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 650, 29), tuple_147117, unicode_147124)
        
        # Processing the call keyword arguments (line 650)
        kwargs_147125 = {}
        unicode_147115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 20), 'unicode', u'')
        # Obtaining the member 'join' of a type (line 650)
        join_147116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 20), unicode_147115, 'join')
        # Calling join(args, kwargs) (line 650)
        join_call_result_147126 = invoke(stypy.reporting.localization.Localization(__file__, 650, 20), join_147116, *[tuple_147117], **kwargs_147125)
        
        # Assigning a type to the variable 's' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 16), 's', join_call_result_147126)
        # SSA branch for the else part of an if statement (line 647)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'self' (line 651)
        self_147127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 17), 'self')
        # Obtaining the member '_usetex' of a type (line 651)
        _usetex_147128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 17), self_147127, '_usetex')
        # Testing the type of an if condition (line 651)
        if_condition_147129 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 651, 17), _usetex_147128)
        # Assigning a type to the variable 'if_condition_147129' (line 651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 651, 17), 'if_condition_147129', if_condition_147129)
        # SSA begins for if statement (line 651)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'sciNotStr' (line 652)
        sciNotStr_147130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 19), 'sciNotStr')
        unicode_147131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 652, 32), 'unicode', u'')
        # Applying the binary operator '!=' (line 652)
        result_ne_147132 = python_operator(stypy.reporting.localization.Localization(__file__, 652, 19), '!=', sciNotStr_147130, unicode_147131)
        
        # Testing the type of an if condition (line 652)
        if_condition_147133 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 652, 16), result_ne_147132)
        # Assigning a type to the variable 'if_condition_147133' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 16), 'if_condition_147133', if_condition_147133)
        # SSA begins for if statement (line 652)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 653):
        
        # Assigning a BinOp to a Name (line 653):
        unicode_147134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 653, 32), 'unicode', u'\\times%s')
        # Getting the type of 'sciNotStr' (line 653)
        sciNotStr_147135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 46), 'sciNotStr')
        # Applying the binary operator '%' (line 653)
        result_mod_147136 = python_operator(stypy.reporting.localization.Localization(__file__, 653, 32), '%', unicode_147134, sciNotStr_147135)
        
        # Assigning a type to the variable 'sciNotStr' (line 653)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 653, 20), 'sciNotStr', result_mod_147136)
        # SSA join for if statement (line 652)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 654):
        
        # Assigning a Call to a Name (line 654):
        
        # Call to join(...): (line 654)
        # Processing the call arguments (line 654)
        
        # Obtaining an instance of the builtin type 'tuple' (line 654)
        tuple_147139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 654, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 654)
        # Adding element type (line 654)
        unicode_147140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 654, 29), 'unicode', u'$')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 654, 29), tuple_147139, unicode_147140)
        # Adding element type (line 654)
        # Getting the type of 'sciNotStr' (line 654)
        sciNotStr_147141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 34), 'sciNotStr', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 654, 29), tuple_147139, sciNotStr_147141)
        # Adding element type (line 654)
        # Getting the type of 'offsetStr' (line 654)
        offsetStr_147142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 45), 'offsetStr', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 654, 29), tuple_147139, offsetStr_147142)
        # Adding element type (line 654)
        unicode_147143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 654, 56), 'unicode', u'$')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 654, 29), tuple_147139, unicode_147143)
        
        # Processing the call keyword arguments (line 654)
        kwargs_147144 = {}
        unicode_147137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 654, 20), 'unicode', u'')
        # Obtaining the member 'join' of a type (line 654)
        join_147138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 20), unicode_147137, 'join')
        # Calling join(args, kwargs) (line 654)
        join_call_result_147145 = invoke(stypy.reporting.localization.Localization(__file__, 654, 20), join_147138, *[tuple_147139], **kwargs_147144)
        
        # Assigning a type to the variable 's' (line 654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 16), 's', join_call_result_147145)
        # SSA branch for the else part of an if statement (line 651)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 656):
        
        # Assigning a Call to a Name (line 656):
        
        # Call to join(...): (line 656)
        # Processing the call arguments (line 656)
        
        # Obtaining an instance of the builtin type 'tuple' (line 656)
        tuple_147148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 656)
        # Adding element type (line 656)
        # Getting the type of 'sciNotStr' (line 656)
        sciNotStr_147149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 29), 'sciNotStr', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 656, 29), tuple_147148, sciNotStr_147149)
        # Adding element type (line 656)
        # Getting the type of 'offsetStr' (line 656)
        offsetStr_147150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 40), 'offsetStr', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 656, 29), tuple_147148, offsetStr_147150)
        
        # Processing the call keyword arguments (line 656)
        kwargs_147151 = {}
        unicode_147146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 20), 'unicode', u'')
        # Obtaining the member 'join' of a type (line 656)
        join_147147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 20), unicode_147146, 'join')
        # Calling join(args, kwargs) (line 656)
        join_call_result_147152 = invoke(stypy.reporting.localization.Localization(__file__, 656, 20), join_147147, *[tuple_147148], **kwargs_147151)
        
        # Assigning a type to the variable 's' (line 656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 16), 's', join_call_result_147152)
        # SSA join for if statement (line 651)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 647)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 635)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to fix_minus(...): (line 658)
        # Processing the call arguments (line 658)
        # Getting the type of 's' (line 658)
        s_147155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 30), 's', False)
        # Processing the call keyword arguments (line 658)
        kwargs_147156 = {}
        # Getting the type of 'self' (line 658)
        self_147153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 15), 'self', False)
        # Obtaining the member 'fix_minus' of a type (line 658)
        fix_minus_147154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 15), self_147153, 'fix_minus')
        # Calling fix_minus(args, kwargs) (line 658)
        fix_minus_call_result_147157 = invoke(stypy.reporting.localization.Localization(__file__, 658, 15), fix_minus_147154, *[s_147155], **kwargs_147156)
        
        # Assigning a type to the variable 'stypy_return_type' (line 658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 8), 'stypy_return_type', fix_minus_call_result_147157)
        
        # ################# End of 'get_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 628)
        stypy_return_type_147158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147158)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_offset'
        return stypy_return_type_147158


    @norecursion
    def set_locs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_locs'
        module_type_store = module_type_store.open_function_context('set_locs', 660, 4, False)
        # Assigning a type to the variable 'self' (line 661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 661, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter.set_locs.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter.set_locs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter.set_locs.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter.set_locs.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter.set_locs')
        ScalarFormatter.set_locs.__dict__.__setitem__('stypy_param_names_list', ['locs'])
        ScalarFormatter.set_locs.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter.set_locs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter.set_locs.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter.set_locs.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter.set_locs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter.set_locs.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.set_locs', ['locs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_locs', localization, ['locs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_locs(...)' code ##################

        unicode_147159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, (-1)), 'unicode', u'\n        Set the locations of the ticks.\n        ')
        
        # Assigning a Name to a Attribute (line 664):
        
        # Assigning a Name to a Attribute (line 664):
        # Getting the type of 'locs' (line 664)
        locs_147160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 20), 'locs')
        # Getting the type of 'self' (line 664)
        self_147161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'self')
        # Setting the type of the member 'locs' of a type (line 664)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 8), self_147161, 'locs', locs_147160)
        
        
        
        # Call to len(...): (line 665)
        # Processing the call arguments (line 665)
        # Getting the type of 'self' (line 665)
        self_147163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 15), 'self', False)
        # Obtaining the member 'locs' of a type (line 665)
        locs_147164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 15), self_147163, 'locs')
        # Processing the call keyword arguments (line 665)
        kwargs_147165 = {}
        # Getting the type of 'len' (line 665)
        len_147162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 11), 'len', False)
        # Calling len(args, kwargs) (line 665)
        len_call_result_147166 = invoke(stypy.reporting.localization.Localization(__file__, 665, 11), len_147162, *[locs_147164], **kwargs_147165)
        
        int_147167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 665, 28), 'int')
        # Applying the binary operator '>' (line 665)
        result_gt_147168 = python_operator(stypy.reporting.localization.Localization(__file__, 665, 11), '>', len_call_result_147166, int_147167)
        
        # Testing the type of an if condition (line 665)
        if_condition_147169 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 665, 8), result_gt_147168)
        # Assigning a type to the variable 'if_condition_147169' (line 665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 8), 'if_condition_147169', if_condition_147169)
        # SSA begins for if statement (line 665)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 666):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 666)
        # Processing the call keyword arguments (line 666)
        kwargs_147173 = {}
        # Getting the type of 'self' (line 666)
        self_147170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 25), 'self', False)
        # Obtaining the member 'axis' of a type (line 666)
        axis_147171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 25), self_147170, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 666)
        get_view_interval_147172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 25), axis_147171, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 666)
        get_view_interval_call_result_147174 = invoke(stypy.reporting.localization.Localization(__file__, 666, 25), get_view_interval_147172, *[], **kwargs_147173)
        
        # Assigning a type to the variable 'call_assignment_146255' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 12), 'call_assignment_146255', get_view_interval_call_result_147174)
        
        # Assigning a Call to a Name (line 666):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_147177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 12), 'int')
        # Processing the call keyword arguments
        kwargs_147178 = {}
        # Getting the type of 'call_assignment_146255' (line 666)
        call_assignment_146255_147175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 12), 'call_assignment_146255', False)
        # Obtaining the member '__getitem__' of a type (line 666)
        getitem___147176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 12), call_assignment_146255_147175, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_147179 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___147176, *[int_147177], **kwargs_147178)
        
        # Assigning a type to the variable 'call_assignment_146256' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 12), 'call_assignment_146256', getitem___call_result_147179)
        
        # Assigning a Name to a Name (line 666):
        # Getting the type of 'call_assignment_146256' (line 666)
        call_assignment_146256_147180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 12), 'call_assignment_146256')
        # Assigning a type to the variable 'vmin' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 12), 'vmin', call_assignment_146256_147180)
        
        # Assigning a Call to a Name (line 666):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_147183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 12), 'int')
        # Processing the call keyword arguments
        kwargs_147184 = {}
        # Getting the type of 'call_assignment_146255' (line 666)
        call_assignment_146255_147181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 12), 'call_assignment_146255', False)
        # Obtaining the member '__getitem__' of a type (line 666)
        getitem___147182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 12), call_assignment_146255_147181, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_147185 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___147182, *[int_147183], **kwargs_147184)
        
        # Assigning a type to the variable 'call_assignment_146257' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 12), 'call_assignment_146257', getitem___call_result_147185)
        
        # Assigning a Name to a Name (line 666):
        # Getting the type of 'call_assignment_146257' (line 666)
        call_assignment_146257_147186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 12), 'call_assignment_146257')
        # Assigning a type to the variable 'vmax' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 18), 'vmax', call_assignment_146257_147186)
        
        # Assigning a Call to a Name (line 667):
        
        # Assigning a Call to a Name (line 667):
        
        # Call to abs(...): (line 667)
        # Processing the call arguments (line 667)
        # Getting the type of 'vmax' (line 667)
        vmax_147188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 20), 'vmax', False)
        # Getting the type of 'vmin' (line 667)
        vmin_147189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 27), 'vmin', False)
        # Applying the binary operator '-' (line 667)
        result_sub_147190 = python_operator(stypy.reporting.localization.Localization(__file__, 667, 20), '-', vmax_147188, vmin_147189)
        
        # Processing the call keyword arguments (line 667)
        kwargs_147191 = {}
        # Getting the type of 'abs' (line 667)
        abs_147187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 16), 'abs', False)
        # Calling abs(args, kwargs) (line 667)
        abs_call_result_147192 = invoke(stypy.reporting.localization.Localization(__file__, 667, 16), abs_147187, *[result_sub_147190], **kwargs_147191)
        
        # Assigning a type to the variable 'd' (line 667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 667, 12), 'd', abs_call_result_147192)
        
        # Getting the type of 'self' (line 668)
        self_147193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 15), 'self')
        # Obtaining the member '_useOffset' of a type (line 668)
        _useOffset_147194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 15), self_147193, '_useOffset')
        # Testing the type of an if condition (line 668)
        if_condition_147195 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 668, 12), _useOffset_147194)
        # Assigning a type to the variable 'if_condition_147195' (line 668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 668, 12), 'if_condition_147195', if_condition_147195)
        # SSA begins for if statement (line 668)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _compute_offset(...): (line 669)
        # Processing the call keyword arguments (line 669)
        kwargs_147198 = {}
        # Getting the type of 'self' (line 669)
        self_147196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 16), 'self', False)
        # Obtaining the member '_compute_offset' of a type (line 669)
        _compute_offset_147197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 16), self_147196, '_compute_offset')
        # Calling _compute_offset(args, kwargs) (line 669)
        _compute_offset_call_result_147199 = invoke(stypy.reporting.localization.Localization(__file__, 669, 16), _compute_offset_147197, *[], **kwargs_147198)
        
        # SSA join for if statement (line 668)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _set_orderOfMagnitude(...): (line 670)
        # Processing the call arguments (line 670)
        # Getting the type of 'd' (line 670)
        d_147202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 39), 'd', False)
        # Processing the call keyword arguments (line 670)
        kwargs_147203 = {}
        # Getting the type of 'self' (line 670)
        self_147200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 12), 'self', False)
        # Obtaining the member '_set_orderOfMagnitude' of a type (line 670)
        _set_orderOfMagnitude_147201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 12), self_147200, '_set_orderOfMagnitude')
        # Calling _set_orderOfMagnitude(args, kwargs) (line 670)
        _set_orderOfMagnitude_call_result_147204 = invoke(stypy.reporting.localization.Localization(__file__, 670, 12), _set_orderOfMagnitude_147201, *[d_147202], **kwargs_147203)
        
        
        # Call to _set_format(...): (line 671)
        # Processing the call arguments (line 671)
        # Getting the type of 'vmin' (line 671)
        vmin_147207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 29), 'vmin', False)
        # Getting the type of 'vmax' (line 671)
        vmax_147208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 35), 'vmax', False)
        # Processing the call keyword arguments (line 671)
        kwargs_147209 = {}
        # Getting the type of 'self' (line 671)
        self_147205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 12), 'self', False)
        # Obtaining the member '_set_format' of a type (line 671)
        _set_format_147206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 12), self_147205, '_set_format')
        # Calling _set_format(args, kwargs) (line 671)
        _set_format_call_result_147210 = invoke(stypy.reporting.localization.Localization(__file__, 671, 12), _set_format_147206, *[vmin_147207, vmax_147208], **kwargs_147209)
        
        # SSA join for if statement (line 665)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_locs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_locs' in the type store
        # Getting the type of 'stypy_return_type' (line 660)
        stypy_return_type_147211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147211)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_locs'
        return stypy_return_type_147211


    @norecursion
    def _compute_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_compute_offset'
        module_type_store = module_type_store.open_function_context('_compute_offset', 673, 4, False)
        # Assigning a type to the variable 'self' (line 674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter._compute_offset.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter._compute_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter._compute_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter._compute_offset.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter._compute_offset')
        ScalarFormatter._compute_offset.__dict__.__setitem__('stypy_param_names_list', [])
        ScalarFormatter._compute_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter._compute_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter._compute_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter._compute_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter._compute_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter._compute_offset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter._compute_offset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_compute_offset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_compute_offset(...)' code ##################

        
        # Assigning a Attribute to a Name (line 674):
        
        # Assigning a Attribute to a Name (line 674):
        # Getting the type of 'self' (line 674)
        self_147212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 15), 'self')
        # Obtaining the member 'locs' of a type (line 674)
        locs_147213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 15), self_147212, 'locs')
        # Assigning a type to the variable 'locs' (line 674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 8), 'locs', locs_147213)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'locs' (line 675)
        locs_147214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 11), 'locs')
        # Getting the type of 'None' (line 675)
        None_147215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 19), 'None')
        # Applying the binary operator 'is' (line 675)
        result_is__147216 = python_operator(stypy.reporting.localization.Localization(__file__, 675, 11), 'is', locs_147214, None_147215)
        
        
        
        # Call to len(...): (line 675)
        # Processing the call arguments (line 675)
        # Getting the type of 'locs' (line 675)
        locs_147218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 35), 'locs', False)
        # Processing the call keyword arguments (line 675)
        kwargs_147219 = {}
        # Getting the type of 'len' (line 675)
        len_147217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 31), 'len', False)
        # Calling len(args, kwargs) (line 675)
        len_call_result_147220 = invoke(stypy.reporting.localization.Localization(__file__, 675, 31), len_147217, *[locs_147218], **kwargs_147219)
        
        # Applying the 'not' unary operator (line 675)
        result_not__147221 = python_operator(stypy.reporting.localization.Localization(__file__, 675, 27), 'not', len_call_result_147220)
        
        # Applying the binary operator 'or' (line 675)
        result_or_keyword_147222 = python_operator(stypy.reporting.localization.Localization(__file__, 675, 11), 'or', result_is__147216, result_not__147221)
        
        # Testing the type of an if condition (line 675)
        if_condition_147223 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 675, 8), result_or_keyword_147222)
        # Assigning a type to the variable 'if_condition_147223' (line 675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 8), 'if_condition_147223', if_condition_147223)
        # SSA begins for if statement (line 675)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 676):
        
        # Assigning a Num to a Attribute (line 676):
        int_147224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 26), 'int')
        # Getting the type of 'self' (line 676)
        self_147225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 12), 'self')
        # Setting the type of the member 'offset' of a type (line 676)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 12), self_147225, 'offset', int_147224)
        # Assigning a type to the variable 'stypy_return_type' (line 677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 675)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 679):
        
        # Assigning a Call to a Name:
        
        # Call to sorted(...): (line 679)
        # Processing the call arguments (line 679)
        
        # Call to get_view_interval(...): (line 679)
        # Processing the call keyword arguments (line 679)
        kwargs_147230 = {}
        # Getting the type of 'self' (line 679)
        self_147227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 28), 'self', False)
        # Obtaining the member 'axis' of a type (line 679)
        axis_147228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 28), self_147227, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 679)
        get_view_interval_147229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 28), axis_147228, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 679)
        get_view_interval_call_result_147231 = invoke(stypy.reporting.localization.Localization(__file__, 679, 28), get_view_interval_147229, *[], **kwargs_147230)
        
        # Processing the call keyword arguments (line 679)
        kwargs_147232 = {}
        # Getting the type of 'sorted' (line 679)
        sorted_147226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 21), 'sorted', False)
        # Calling sorted(args, kwargs) (line 679)
        sorted_call_result_147233 = invoke(stypy.reporting.localization.Localization(__file__, 679, 21), sorted_147226, *[get_view_interval_call_result_147231], **kwargs_147232)
        
        # Assigning a type to the variable 'call_assignment_146258' (line 679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'call_assignment_146258', sorted_call_result_147233)
        
        # Assigning a Call to a Name (line 679):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_147236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 8), 'int')
        # Processing the call keyword arguments
        kwargs_147237 = {}
        # Getting the type of 'call_assignment_146258' (line 679)
        call_assignment_146258_147234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'call_assignment_146258', False)
        # Obtaining the member '__getitem__' of a type (line 679)
        getitem___147235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 8), call_assignment_146258_147234, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_147238 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___147235, *[int_147236], **kwargs_147237)
        
        # Assigning a type to the variable 'call_assignment_146259' (line 679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'call_assignment_146259', getitem___call_result_147238)
        
        # Assigning a Name to a Name (line 679):
        # Getting the type of 'call_assignment_146259' (line 679)
        call_assignment_146259_147239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'call_assignment_146259')
        # Assigning a type to the variable 'vmin' (line 679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'vmin', call_assignment_146259_147239)
        
        # Assigning a Call to a Name (line 679):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_147242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 8), 'int')
        # Processing the call keyword arguments
        kwargs_147243 = {}
        # Getting the type of 'call_assignment_146258' (line 679)
        call_assignment_146258_147240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'call_assignment_146258', False)
        # Obtaining the member '__getitem__' of a type (line 679)
        getitem___147241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 8), call_assignment_146258_147240, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_147244 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___147241, *[int_147242], **kwargs_147243)
        
        # Assigning a type to the variable 'call_assignment_146260' (line 679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'call_assignment_146260', getitem___call_result_147244)
        
        # Assigning a Name to a Name (line 679):
        # Getting the type of 'call_assignment_146260' (line 679)
        call_assignment_146260_147245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'call_assignment_146260')
        # Assigning a type to the variable 'vmax' (line 679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 14), 'vmax', call_assignment_146260_147245)
        
        # Assigning a Call to a Name (line 680):
        
        # Assigning a Call to a Name (line 680):
        
        # Call to asarray(...): (line 680)
        # Processing the call arguments (line 680)
        # Getting the type of 'locs' (line 680)
        locs_147248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 26), 'locs', False)
        # Processing the call keyword arguments (line 680)
        kwargs_147249 = {}
        # Getting the type of 'np' (line 680)
        np_147246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 15), 'np', False)
        # Obtaining the member 'asarray' of a type (line 680)
        asarray_147247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 15), np_147246, 'asarray')
        # Calling asarray(args, kwargs) (line 680)
        asarray_call_result_147250 = invoke(stypy.reporting.localization.Localization(__file__, 680, 15), asarray_147247, *[locs_147248], **kwargs_147249)
        
        # Assigning a type to the variable 'locs' (line 680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 8), 'locs', asarray_call_result_147250)
        
        # Assigning a Subscript to a Name (line 681):
        
        # Assigning a Subscript to a Name (line 681):
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'vmin' (line 681)
        vmin_147251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 21), 'vmin')
        # Getting the type of 'locs' (line 681)
        locs_147252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 29), 'locs')
        # Applying the binary operator '<=' (line 681)
        result_le_147253 = python_operator(stypy.reporting.localization.Localization(__file__, 681, 21), '<=', vmin_147251, locs_147252)
        
        
        # Getting the type of 'locs' (line 681)
        locs_147254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 38), 'locs')
        # Getting the type of 'vmax' (line 681)
        vmax_147255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 46), 'vmax')
        # Applying the binary operator '<=' (line 681)
        result_le_147256 = python_operator(stypy.reporting.localization.Localization(__file__, 681, 38), '<=', locs_147254, vmax_147255)
        
        # Applying the binary operator '&' (line 681)
        result_and__147257 = python_operator(stypy.reporting.localization.Localization(__file__, 681, 20), '&', result_le_147253, result_le_147256)
        
        # Getting the type of 'locs' (line 681)
        locs_147258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 15), 'locs')
        # Obtaining the member '__getitem__' of a type (line 681)
        getitem___147259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 15), locs_147258, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 681)
        subscript_call_result_147260 = invoke(stypy.reporting.localization.Localization(__file__, 681, 15), getitem___147259, result_and__147257)
        
        # Assigning a type to the variable 'locs' (line 681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 8), 'locs', subscript_call_result_147260)
        
        
        
        # Call to len(...): (line 682)
        # Processing the call arguments (line 682)
        # Getting the type of 'locs' (line 682)
        locs_147262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 19), 'locs', False)
        # Processing the call keyword arguments (line 682)
        kwargs_147263 = {}
        # Getting the type of 'len' (line 682)
        len_147261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 15), 'len', False)
        # Calling len(args, kwargs) (line 682)
        len_call_result_147264 = invoke(stypy.reporting.localization.Localization(__file__, 682, 15), len_147261, *[locs_147262], **kwargs_147263)
        
        # Applying the 'not' unary operator (line 682)
        result_not__147265 = python_operator(stypy.reporting.localization.Localization(__file__, 682, 11), 'not', len_call_result_147264)
        
        # Testing the type of an if condition (line 682)
        if_condition_147266 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 682, 8), result_not__147265)
        # Assigning a type to the variable 'if_condition_147266' (line 682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 8), 'if_condition_147266', if_condition_147266)
        # SSA begins for if statement (line 682)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 683):
        
        # Assigning a Num to a Attribute (line 683):
        int_147267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 683, 26), 'int')
        # Getting the type of 'self' (line 683)
        self_147268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 12), 'self')
        # Setting the type of the member 'offset' of a type (line 683)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 683, 12), self_147268, 'offset', int_147267)
        # Assigning a type to the variable 'stypy_return_type' (line 684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 684, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 682)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 685):
        
        # Assigning a Call to a Name (line 685):
        
        # Call to min(...): (line 685)
        # Processing the call keyword arguments (line 685)
        kwargs_147271 = {}
        # Getting the type of 'locs' (line 685)
        locs_147269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 21), 'locs', False)
        # Obtaining the member 'min' of a type (line 685)
        min_147270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 21), locs_147269, 'min')
        # Calling min(args, kwargs) (line 685)
        min_call_result_147272 = invoke(stypy.reporting.localization.Localization(__file__, 685, 21), min_147270, *[], **kwargs_147271)
        
        # Assigning a type to the variable 'tuple_assignment_146261' (line 685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 8), 'tuple_assignment_146261', min_call_result_147272)
        
        # Assigning a Call to a Name (line 685):
        
        # Call to max(...): (line 685)
        # Processing the call keyword arguments (line 685)
        kwargs_147275 = {}
        # Getting the type of 'locs' (line 685)
        locs_147273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 33), 'locs', False)
        # Obtaining the member 'max' of a type (line 685)
        max_147274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 33), locs_147273, 'max')
        # Calling max(args, kwargs) (line 685)
        max_call_result_147276 = invoke(stypy.reporting.localization.Localization(__file__, 685, 33), max_147274, *[], **kwargs_147275)
        
        # Assigning a type to the variable 'tuple_assignment_146262' (line 685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 8), 'tuple_assignment_146262', max_call_result_147276)
        
        # Assigning a Name to a Name (line 685):
        # Getting the type of 'tuple_assignment_146261' (line 685)
        tuple_assignment_146261_147277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 8), 'tuple_assignment_146261')
        # Assigning a type to the variable 'lmin' (line 685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 8), 'lmin', tuple_assignment_146261_147277)
        
        # Assigning a Name to a Name (line 685):
        # Getting the type of 'tuple_assignment_146262' (line 685)
        tuple_assignment_146262_147278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 8), 'tuple_assignment_146262')
        # Assigning a type to the variable 'lmax' (line 685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 14), 'lmax', tuple_assignment_146262_147278)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'lmin' (line 688)
        lmin_147279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 11), 'lmin')
        # Getting the type of 'lmax' (line 688)
        lmax_147280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 19), 'lmax')
        # Applying the binary operator '==' (line 688)
        result_eq_147281 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 11), '==', lmin_147279, lmax_147280)
        
        
        # Getting the type of 'lmin' (line 688)
        lmin_147282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 27), 'lmin')
        int_147283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 35), 'int')
        # Applying the binary operator '<=' (line 688)
        result_le_147284 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 27), '<=', lmin_147282, int_147283)
        # Getting the type of 'lmax' (line 688)
        lmax_147285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 40), 'lmax')
        # Applying the binary operator '<=' (line 688)
        result_le_147286 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 27), '<=', int_147283, lmax_147285)
        # Applying the binary operator '&' (line 688)
        result_and__147287 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 27), '&', result_le_147284, result_le_147286)
        
        # Applying the binary operator 'or' (line 688)
        result_or_keyword_147288 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 11), 'or', result_eq_147281, result_and__147287)
        
        # Testing the type of an if condition (line 688)
        if_condition_147289 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 688, 8), result_or_keyword_147288)
        # Assigning a type to the variable 'if_condition_147289' (line 688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 688, 8), 'if_condition_147289', if_condition_147289)
        # SSA begins for if statement (line 688)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 689):
        
        # Assigning a Num to a Attribute (line 689):
        int_147290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 689, 26), 'int')
        # Getting the type of 'self' (line 689)
        self_147291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 12), 'self')
        # Setting the type of the member 'offset' of a type (line 689)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 12), self_147291, 'offset', int_147290)
        # Assigning a type to the variable 'stypy_return_type' (line 690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 688)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 693):
        
        # Assigning a Call to a Name:
        
        # Call to sorted(...): (line 693)
        # Processing the call arguments (line 693)
        
        # Obtaining an instance of the builtin type 'list' (line 693)
        list_147293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 693)
        # Adding element type (line 693)
        
        # Call to abs(...): (line 693)
        # Processing the call arguments (line 693)
        
        # Call to float(...): (line 693)
        # Processing the call arguments (line 693)
        # Getting the type of 'lmin' (line 693)
        lmin_147296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 45), 'lmin', False)
        # Processing the call keyword arguments (line 693)
        kwargs_147297 = {}
        # Getting the type of 'float' (line 693)
        float_147295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 39), 'float', False)
        # Calling float(args, kwargs) (line 693)
        float_call_result_147298 = invoke(stypy.reporting.localization.Localization(__file__, 693, 39), float_147295, *[lmin_147296], **kwargs_147297)
        
        # Processing the call keyword arguments (line 693)
        kwargs_147299 = {}
        # Getting the type of 'abs' (line 693)
        abs_147294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 35), 'abs', False)
        # Calling abs(args, kwargs) (line 693)
        abs_call_result_147300 = invoke(stypy.reporting.localization.Localization(__file__, 693, 35), abs_147294, *[float_call_result_147298], **kwargs_147299)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 693, 34), list_147293, abs_call_result_147300)
        # Adding element type (line 693)
        
        # Call to abs(...): (line 693)
        # Processing the call arguments (line 693)
        
        # Call to float(...): (line 693)
        # Processing the call arguments (line 693)
        # Getting the type of 'lmax' (line 693)
        lmax_147303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 63), 'lmax', False)
        # Processing the call keyword arguments (line 693)
        kwargs_147304 = {}
        # Getting the type of 'float' (line 693)
        float_147302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 57), 'float', False)
        # Calling float(args, kwargs) (line 693)
        float_call_result_147305 = invoke(stypy.reporting.localization.Localization(__file__, 693, 57), float_147302, *[lmax_147303], **kwargs_147304)
        
        # Processing the call keyword arguments (line 693)
        kwargs_147306 = {}
        # Getting the type of 'abs' (line 693)
        abs_147301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 53), 'abs', False)
        # Calling abs(args, kwargs) (line 693)
        abs_call_result_147307 = invoke(stypy.reporting.localization.Localization(__file__, 693, 53), abs_147301, *[float_call_result_147305], **kwargs_147306)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 693, 34), list_147293, abs_call_result_147307)
        
        # Processing the call keyword arguments (line 693)
        kwargs_147308 = {}
        # Getting the type of 'sorted' (line 693)
        sorted_147292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 27), 'sorted', False)
        # Calling sorted(args, kwargs) (line 693)
        sorted_call_result_147309 = invoke(stypy.reporting.localization.Localization(__file__, 693, 27), sorted_147292, *[list_147293], **kwargs_147308)
        
        # Assigning a type to the variable 'call_assignment_146263' (line 693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 693, 8), 'call_assignment_146263', sorted_call_result_147309)
        
        # Assigning a Call to a Name (line 693):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_147312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 8), 'int')
        # Processing the call keyword arguments
        kwargs_147313 = {}
        # Getting the type of 'call_assignment_146263' (line 693)
        call_assignment_146263_147310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 8), 'call_assignment_146263', False)
        # Obtaining the member '__getitem__' of a type (line 693)
        getitem___147311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 693, 8), call_assignment_146263_147310, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_147314 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___147311, *[int_147312], **kwargs_147313)
        
        # Assigning a type to the variable 'call_assignment_146264' (line 693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 693, 8), 'call_assignment_146264', getitem___call_result_147314)
        
        # Assigning a Name to a Name (line 693):
        # Getting the type of 'call_assignment_146264' (line 693)
        call_assignment_146264_147315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 8), 'call_assignment_146264')
        # Assigning a type to the variable 'abs_min' (line 693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 693, 8), 'abs_min', call_assignment_146264_147315)
        
        # Assigning a Call to a Name (line 693):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_147318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 8), 'int')
        # Processing the call keyword arguments
        kwargs_147319 = {}
        # Getting the type of 'call_assignment_146263' (line 693)
        call_assignment_146263_147316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 8), 'call_assignment_146263', False)
        # Obtaining the member '__getitem__' of a type (line 693)
        getitem___147317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 693, 8), call_assignment_146263_147316, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_147320 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___147317, *[int_147318], **kwargs_147319)
        
        # Assigning a type to the variable 'call_assignment_146265' (line 693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 693, 8), 'call_assignment_146265', getitem___call_result_147320)
        
        # Assigning a Name to a Name (line 693):
        # Getting the type of 'call_assignment_146265' (line 693)
        call_assignment_146265_147321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 8), 'call_assignment_146265')
        # Assigning a type to the variable 'abs_max' (line 693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 693, 17), 'abs_max', call_assignment_146265_147321)
        
        # Assigning a Call to a Name (line 694):
        
        # Assigning a Call to a Name (line 694):
        
        # Call to copysign(...): (line 694)
        # Processing the call arguments (line 694)
        int_147324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 694, 29), 'int')
        # Getting the type of 'lmin' (line 694)
        lmin_147325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 32), 'lmin', False)
        # Processing the call keyword arguments (line 694)
        kwargs_147326 = {}
        # Getting the type of 'math' (line 694)
        math_147322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 15), 'math', False)
        # Obtaining the member 'copysign' of a type (line 694)
        copysign_147323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 15), math_147322, 'copysign')
        # Calling copysign(args, kwargs) (line 694)
        copysign_call_result_147327 = invoke(stypy.reporting.localization.Localization(__file__, 694, 15), copysign_147323, *[int_147324, lmin_147325], **kwargs_147326)
        
        # Assigning a type to the variable 'sign' (line 694)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 8), 'sign', copysign_call_result_147327)
        
        # Assigning a Call to a Name (line 699):
        
        # Assigning a Call to a Name (line 699):
        
        # Call to ceil(...): (line 699)
        # Processing the call arguments (line 699)
        
        # Call to log10(...): (line 699)
        # Processing the call arguments (line 699)
        # Getting the type of 'abs_max' (line 699)
        abs_max_147332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 37), 'abs_max', False)
        # Processing the call keyword arguments (line 699)
        kwargs_147333 = {}
        # Getting the type of 'math' (line 699)
        math_147330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 26), 'math', False)
        # Obtaining the member 'log10' of a type (line 699)
        log10_147331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 26), math_147330, 'log10')
        # Calling log10(args, kwargs) (line 699)
        log10_call_result_147334 = invoke(stypy.reporting.localization.Localization(__file__, 699, 26), log10_147331, *[abs_max_147332], **kwargs_147333)
        
        # Processing the call keyword arguments (line 699)
        kwargs_147335 = {}
        # Getting the type of 'np' (line 699)
        np_147328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 18), 'np', False)
        # Obtaining the member 'ceil' of a type (line 699)
        ceil_147329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 18), np_147328, 'ceil')
        # Calling ceil(args, kwargs) (line 699)
        ceil_call_result_147336 = invoke(stypy.reporting.localization.Localization(__file__, 699, 18), ceil_147329, *[log10_call_result_147334], **kwargs_147335)
        
        # Assigning a type to the variable 'oom_max' (line 699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'oom_max', ceil_call_result_147336)
        
        # Assigning a BinOp to a Name (line 700):
        
        # Assigning a BinOp to a Name (line 700):
        int_147337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 700, 14), 'int')
        
        # Call to next(...): (line 700)
        # Processing the call arguments (line 700)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 700, 23, True)
        # Calculating comprehension expression
        
        # Call to count(...): (line 700)
        # Processing the call arguments (line 700)
        # Getting the type of 'oom_max' (line 700)
        oom_max_147353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 54), 'oom_max', False)
        int_147354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 700, 63), 'int')
        # Processing the call keyword arguments (line 700)
        kwargs_147355 = {}
        # Getting the type of 'itertools' (line 700)
        itertools_147351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 38), 'itertools', False)
        # Obtaining the member 'count' of a type (line 700)
        count_147352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 700, 38), itertools_147351, 'count')
        # Calling count(args, kwargs) (line 700)
        count_call_result_147356 = invoke(stypy.reporting.localization.Localization(__file__, 700, 38), count_147352, *[oom_max_147353, int_147354], **kwargs_147355)
        
        comprehension_147357 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 700, 23), count_call_result_147356)
        # Assigning a type to the variable 'oom' (line 700)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 700, 23), 'oom', comprehension_147357)
        
        # Getting the type of 'abs_min' (line 701)
        abs_min_147340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 26), 'abs_min', False)
        int_147341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 37), 'int')
        # Getting the type of 'oom' (line 701)
        oom_147342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 43), 'oom', False)
        # Applying the binary operator '**' (line 701)
        result_pow_147343 = python_operator(stypy.reporting.localization.Localization(__file__, 701, 37), '**', int_147341, oom_147342)
        
        # Applying the binary operator '//' (line 701)
        result_floordiv_147344 = python_operator(stypy.reporting.localization.Localization(__file__, 701, 26), '//', abs_min_147340, result_pow_147343)
        
        # Getting the type of 'abs_max' (line 701)
        abs_max_147345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 50), 'abs_max', False)
        int_147346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 61), 'int')
        # Getting the type of 'oom' (line 701)
        oom_147347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 67), 'oom', False)
        # Applying the binary operator '**' (line 701)
        result_pow_147348 = python_operator(stypy.reporting.localization.Localization(__file__, 701, 61), '**', int_147346, oom_147347)
        
        # Applying the binary operator '//' (line 701)
        result_floordiv_147349 = python_operator(stypy.reporting.localization.Localization(__file__, 701, 50), '//', abs_max_147345, result_pow_147348)
        
        # Applying the binary operator '!=' (line 701)
        result_ne_147350 = python_operator(stypy.reporting.localization.Localization(__file__, 701, 26), '!=', result_floordiv_147344, result_floordiv_147349)
        
        # Getting the type of 'oom' (line 700)
        oom_147339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 23), 'oom', False)
        list_147358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 700, 23), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 700, 23), list_147358, oom_147339)
        # Processing the call keyword arguments (line 700)
        kwargs_147359 = {}
        # Getting the type of 'next' (line 700)
        next_147338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 18), 'next', False)
        # Calling next(args, kwargs) (line 700)
        next_call_result_147360 = invoke(stypy.reporting.localization.Localization(__file__, 700, 18), next_147338, *[list_147358], **kwargs_147359)
        
        # Applying the binary operator '+' (line 700)
        result_add_147361 = python_operator(stypy.reporting.localization.Localization(__file__, 700, 14), '+', int_147337, next_call_result_147360)
        
        # Assigning a type to the variable 'oom' (line 700)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 700, 8), 'oom', result_add_147361)
        
        
        # Getting the type of 'abs_max' (line 702)
        abs_max_147362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 12), 'abs_max')
        # Getting the type of 'abs_min' (line 702)
        abs_min_147363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 22), 'abs_min')
        # Applying the binary operator '-' (line 702)
        result_sub_147364 = python_operator(stypy.reporting.localization.Localization(__file__, 702, 12), '-', abs_max_147362, abs_min_147363)
        
        int_147365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, 33), 'int')
        # Getting the type of 'oom' (line 702)
        oom_147366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 39), 'oom')
        # Applying the binary operator '**' (line 702)
        result_pow_147367 = python_operator(stypy.reporting.localization.Localization(__file__, 702, 33), '**', int_147365, oom_147366)
        
        # Applying the binary operator 'div' (line 702)
        result_div_147368 = python_operator(stypy.reporting.localization.Localization(__file__, 702, 11), 'div', result_sub_147364, result_pow_147367)
        
        float_147369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, 46), 'float')
        # Applying the binary operator '<=' (line 702)
        result_le_147370 = python_operator(stypy.reporting.localization.Localization(__file__, 702, 11), '<=', result_div_147368, float_147369)
        
        # Testing the type of an if condition (line 702)
        if_condition_147371 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 702, 8), result_le_147370)
        # Assigning a type to the variable 'if_condition_147371' (line 702)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 702, 8), 'if_condition_147371', if_condition_147371)
        # SSA begins for if statement (line 702)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 707):
        
        # Assigning a BinOp to a Name (line 707):
        int_147372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 707, 18), 'int')
        
        # Call to next(...): (line 707)
        # Processing the call arguments (line 707)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 707, 27, True)
        # Calculating comprehension expression
        
        # Call to count(...): (line 707)
        # Processing the call arguments (line 707)
        # Getting the type of 'oom_max' (line 707)
        oom_max_147390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 58), 'oom_max', False)
        int_147391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 707, 67), 'int')
        # Processing the call keyword arguments (line 707)
        kwargs_147392 = {}
        # Getting the type of 'itertools' (line 707)
        itertools_147388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 42), 'itertools', False)
        # Obtaining the member 'count' of a type (line 707)
        count_147389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 42), itertools_147388, 'count')
        # Calling count(args, kwargs) (line 707)
        count_call_result_147393 = invoke(stypy.reporting.localization.Localization(__file__, 707, 42), count_147389, *[oom_max_147390, int_147391], **kwargs_147392)
        
        comprehension_147394 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 707, 27), count_call_result_147393)
        # Assigning a type to the variable 'oom' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 27), 'oom', comprehension_147394)
        
        # Getting the type of 'abs_max' (line 708)
        abs_max_147375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 30), 'abs_max', False)
        int_147376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 41), 'int')
        # Getting the type of 'oom' (line 708)
        oom_147377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 47), 'oom', False)
        # Applying the binary operator '**' (line 708)
        result_pow_147378 = python_operator(stypy.reporting.localization.Localization(__file__, 708, 41), '**', int_147376, oom_147377)
        
        # Applying the binary operator '//' (line 708)
        result_floordiv_147379 = python_operator(stypy.reporting.localization.Localization(__file__, 708, 30), '//', abs_max_147375, result_pow_147378)
        
        # Getting the type of 'abs_min' (line 708)
        abs_min_147380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 53), 'abs_min', False)
        int_147381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 64), 'int')
        # Getting the type of 'oom' (line 708)
        oom_147382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 70), 'oom', False)
        # Applying the binary operator '**' (line 708)
        result_pow_147383 = python_operator(stypy.reporting.localization.Localization(__file__, 708, 64), '**', int_147381, oom_147382)
        
        # Applying the binary operator '//' (line 708)
        result_floordiv_147384 = python_operator(stypy.reporting.localization.Localization(__file__, 708, 53), '//', abs_min_147380, result_pow_147383)
        
        # Applying the binary operator '-' (line 708)
        result_sub_147385 = python_operator(stypy.reporting.localization.Localization(__file__, 708, 30), '-', result_floordiv_147379, result_floordiv_147384)
        
        int_147386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 76), 'int')
        # Applying the binary operator '>' (line 708)
        result_gt_147387 = python_operator(stypy.reporting.localization.Localization(__file__, 708, 30), '>', result_sub_147385, int_147386)
        
        # Getting the type of 'oom' (line 707)
        oom_147374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 27), 'oom', False)
        list_147395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 707, 27), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 707, 27), list_147395, oom_147374)
        # Processing the call keyword arguments (line 707)
        kwargs_147396 = {}
        # Getting the type of 'next' (line 707)
        next_147373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 22), 'next', False)
        # Calling next(args, kwargs) (line 707)
        next_call_result_147397 = invoke(stypy.reporting.localization.Localization(__file__, 707, 22), next_147373, *[list_147395], **kwargs_147396)
        
        # Applying the binary operator '+' (line 707)
        result_add_147398 = python_operator(stypy.reporting.localization.Localization(__file__, 707, 18), '+', int_147372, next_call_result_147397)
        
        # Assigning a type to the variable 'oom' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 12), 'oom', result_add_147398)
        # SSA join for if statement (line 702)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 710):
        
        # Assigning a BinOp to a Name (line 710):
        # Getting the type of 'self' (line 710)
        self_147399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'self')
        # Obtaining the member '_offset_threshold' of a type (line 710)
        _offset_threshold_147400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 12), self_147399, '_offset_threshold')
        int_147401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 37), 'int')
        # Applying the binary operator '-' (line 710)
        result_sub_147402 = python_operator(stypy.reporting.localization.Localization(__file__, 710, 12), '-', _offset_threshold_147400, int_147401)
        
        # Assigning a type to the variable 'n' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 8), 'n', result_sub_147402)
        
        # Assigning a IfExp to a Attribute (line 711):
        
        # Assigning a IfExp to a Attribute (line 711):
        
        
        # Getting the type of 'abs_max' (line 712)
        abs_max_147403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 26), 'abs_max')
        int_147404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 37), 'int')
        # Getting the type of 'oom' (line 712)
        oom_147405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 43), 'oom')
        # Applying the binary operator '**' (line 712)
        result_pow_147406 = python_operator(stypy.reporting.localization.Localization(__file__, 712, 37), '**', int_147404, oom_147405)
        
        # Applying the binary operator '//' (line 712)
        result_floordiv_147407 = python_operator(stypy.reporting.localization.Localization(__file__, 712, 26), '//', abs_max_147403, result_pow_147406)
        
        int_147408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 50), 'int')
        # Getting the type of 'n' (line 712)
        n_147409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 54), 'n')
        # Applying the binary operator '**' (line 712)
        result_pow_147410 = python_operator(stypy.reporting.localization.Localization(__file__, 712, 50), '**', int_147408, n_147409)
        
        # Applying the binary operator '>=' (line 712)
        result_ge_147411 = python_operator(stypy.reporting.localization.Localization(__file__, 712, 26), '>=', result_floordiv_147407, result_pow_147410)
        
        # Testing the type of an if expression (line 711)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 711, 23), result_ge_147411)
        # SSA begins for if expression (line 711)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        # Getting the type of 'sign' (line 711)
        sign_147412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 23), 'sign')
        # Getting the type of 'abs_max' (line 711)
        abs_max_147413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 31), 'abs_max')
        int_147414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 42), 'int')
        # Getting the type of 'oom' (line 711)
        oom_147415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 48), 'oom')
        # Applying the binary operator '**' (line 711)
        result_pow_147416 = python_operator(stypy.reporting.localization.Localization(__file__, 711, 42), '**', int_147414, oom_147415)
        
        # Applying the binary operator '//' (line 711)
        result_floordiv_147417 = python_operator(stypy.reporting.localization.Localization(__file__, 711, 31), '//', abs_max_147413, result_pow_147416)
        
        # Applying the binary operator '*' (line 711)
        result_mul_147418 = python_operator(stypy.reporting.localization.Localization(__file__, 711, 23), '*', sign_147412, result_floordiv_147417)
        
        int_147419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 55), 'int')
        # Getting the type of 'oom' (line 711)
        oom_147420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 61), 'oom')
        # Applying the binary operator '**' (line 711)
        result_pow_147421 = python_operator(stypy.reporting.localization.Localization(__file__, 711, 55), '**', int_147419, oom_147420)
        
        # Applying the binary operator '*' (line 711)
        result_mul_147422 = python_operator(stypy.reporting.localization.Localization(__file__, 711, 53), '*', result_mul_147418, result_pow_147421)
        
        # SSA branch for the else part of an if expression (line 711)
        module_type_store.open_ssa_branch('if expression else')
        int_147423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 28), 'int')
        # SSA join for if expression (line 711)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_147424 = union_type.UnionType.add(result_mul_147422, int_147423)
        
        # Getting the type of 'self' (line 711)
        self_147425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'self')
        # Setting the type of the member 'offset' of a type (line 711)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 8), self_147425, 'offset', if_exp_147424)
        
        # ################# End of '_compute_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_compute_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 673)
        stypy_return_type_147426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147426)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_compute_offset'
        return stypy_return_type_147426


    @norecursion
    def _set_orderOfMagnitude(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_orderOfMagnitude'
        module_type_store = module_type_store.open_function_context('_set_orderOfMagnitude', 715, 4, False)
        # Assigning a type to the variable 'self' (line 716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter._set_orderOfMagnitude.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter._set_orderOfMagnitude.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter._set_orderOfMagnitude.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter._set_orderOfMagnitude.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter._set_orderOfMagnitude')
        ScalarFormatter._set_orderOfMagnitude.__dict__.__setitem__('stypy_param_names_list', ['range'])
        ScalarFormatter._set_orderOfMagnitude.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter._set_orderOfMagnitude.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter._set_orderOfMagnitude.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter._set_orderOfMagnitude.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter._set_orderOfMagnitude.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter._set_orderOfMagnitude.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter._set_orderOfMagnitude', ['range'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_orderOfMagnitude', localization, ['range'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_orderOfMagnitude(...)' code ##################

        
        
        # Getting the type of 'self' (line 719)
        self_147427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 15), 'self')
        # Obtaining the member '_scientific' of a type (line 719)
        _scientific_147428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 15), self_147427, '_scientific')
        # Applying the 'not' unary operator (line 719)
        result_not__147429 = python_operator(stypy.reporting.localization.Localization(__file__, 719, 11), 'not', _scientific_147428)
        
        # Testing the type of an if condition (line 719)
        if_condition_147430 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 719, 8), result_not__147429)
        # Assigning a type to the variable 'if_condition_147430' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'if_condition_147430', if_condition_147430)
        # SSA begins for if statement (line 719)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 720):
        
        # Assigning a Num to a Attribute (line 720):
        int_147431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 36), 'int')
        # Getting the type of 'self' (line 720)
        self_147432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 12), 'self')
        # Setting the type of the member 'orderOfMagnitude' of a type (line 720)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 720, 12), self_147432, 'orderOfMagnitude', int_147431)
        # Assigning a type to the variable 'stypy_return_type' (line 721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 719)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 722):
        
        # Assigning a Call to a Name (line 722):
        
        # Call to abs(...): (line 722)
        # Processing the call arguments (line 722)
        # Getting the type of 'self' (line 722)
        self_147435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 22), 'self', False)
        # Obtaining the member 'locs' of a type (line 722)
        locs_147436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 22), self_147435, 'locs')
        # Processing the call keyword arguments (line 722)
        kwargs_147437 = {}
        # Getting the type of 'np' (line 722)
        np_147433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 15), 'np', False)
        # Obtaining the member 'abs' of a type (line 722)
        abs_147434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 15), np_147433, 'abs')
        # Calling abs(args, kwargs) (line 722)
        abs_call_result_147438 = invoke(stypy.reporting.localization.Localization(__file__, 722, 15), abs_147434, *[locs_147436], **kwargs_147437)
        
        # Assigning a type to the variable 'locs' (line 722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 722, 8), 'locs', abs_call_result_147438)
        
        # Getting the type of 'self' (line 723)
        self_147439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 11), 'self')
        # Obtaining the member 'offset' of a type (line 723)
        offset_147440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 11), self_147439, 'offset')
        # Testing the type of an if condition (line 723)
        if_condition_147441 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 723, 8), offset_147440)
        # Assigning a type to the variable 'if_condition_147441' (line 723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 8), 'if_condition_147441', if_condition_147441)
        # SSA begins for if statement (line 723)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 724):
        
        # Assigning a Call to a Name (line 724):
        
        # Call to floor(...): (line 724)
        # Processing the call arguments (line 724)
        
        # Call to log10(...): (line 724)
        # Processing the call arguments (line 724)
        # Getting the type of 'range' (line 724)
        range_147446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 40), 'range', False)
        # Processing the call keyword arguments (line 724)
        kwargs_147447 = {}
        # Getting the type of 'math' (line 724)
        math_147444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 29), 'math', False)
        # Obtaining the member 'log10' of a type (line 724)
        log10_147445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 724, 29), math_147444, 'log10')
        # Calling log10(args, kwargs) (line 724)
        log10_call_result_147448 = invoke(stypy.reporting.localization.Localization(__file__, 724, 29), log10_147445, *[range_147446], **kwargs_147447)
        
        # Processing the call keyword arguments (line 724)
        kwargs_147449 = {}
        # Getting the type of 'math' (line 724)
        math_147442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 18), 'math', False)
        # Obtaining the member 'floor' of a type (line 724)
        floor_147443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 724, 18), math_147442, 'floor')
        # Calling floor(args, kwargs) (line 724)
        floor_call_result_147450 = invoke(stypy.reporting.localization.Localization(__file__, 724, 18), floor_147443, *[log10_call_result_147448], **kwargs_147449)
        
        # Assigning a type to the variable 'oom' (line 724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 724, 12), 'oom', floor_call_result_147450)
        # SSA branch for the else part of an if statement (line 723)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Obtaining the type of the subscript
        int_147451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, 20), 'int')
        # Getting the type of 'locs' (line 726)
        locs_147452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 15), 'locs')
        # Obtaining the member '__getitem__' of a type (line 726)
        getitem___147453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 15), locs_147452, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 726)
        subscript_call_result_147454 = invoke(stypy.reporting.localization.Localization(__file__, 726, 15), getitem___147453, int_147451)
        
        
        # Obtaining the type of the subscript
        int_147455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, 30), 'int')
        # Getting the type of 'locs' (line 726)
        locs_147456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 25), 'locs')
        # Obtaining the member '__getitem__' of a type (line 726)
        getitem___147457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 25), locs_147456, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 726)
        subscript_call_result_147458 = invoke(stypy.reporting.localization.Localization(__file__, 726, 25), getitem___147457, int_147455)
        
        # Applying the binary operator '>' (line 726)
        result_gt_147459 = python_operator(stypy.reporting.localization.Localization(__file__, 726, 15), '>', subscript_call_result_147454, subscript_call_result_147458)
        
        # Testing the type of an if condition (line 726)
        if_condition_147460 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 726, 12), result_gt_147459)
        # Assigning a type to the variable 'if_condition_147460' (line 726)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 726, 12), 'if_condition_147460', if_condition_147460)
        # SSA begins for if statement (line 726)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 727):
        
        # Assigning a Subscript to a Name (line 727):
        
        # Obtaining the type of the subscript
        int_147461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 27), 'int')
        # Getting the type of 'locs' (line 727)
        locs_147462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 22), 'locs')
        # Obtaining the member '__getitem__' of a type (line 727)
        getitem___147463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 22), locs_147462, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 727)
        subscript_call_result_147464 = invoke(stypy.reporting.localization.Localization(__file__, 727, 22), getitem___147463, int_147461)
        
        # Assigning a type to the variable 'val' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 16), 'val', subscript_call_result_147464)
        # SSA branch for the else part of an if statement (line 726)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Name (line 729):
        
        # Assigning a Subscript to a Name (line 729):
        
        # Obtaining the type of the subscript
        int_147465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 27), 'int')
        # Getting the type of 'locs' (line 729)
        locs_147466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 22), 'locs')
        # Obtaining the member '__getitem__' of a type (line 729)
        getitem___147467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 22), locs_147466, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 729)
        subscript_call_result_147468 = invoke(stypy.reporting.localization.Localization(__file__, 729, 22), getitem___147467, int_147465)
        
        # Assigning a type to the variable 'val' (line 729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 16), 'val', subscript_call_result_147468)
        # SSA join for if statement (line 726)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'val' (line 730)
        val_147469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 15), 'val')
        int_147470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 730, 22), 'int')
        # Applying the binary operator '==' (line 730)
        result_eq_147471 = python_operator(stypy.reporting.localization.Localization(__file__, 730, 15), '==', val_147469, int_147470)
        
        # Testing the type of an if condition (line 730)
        if_condition_147472 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 730, 12), result_eq_147471)
        # Assigning a type to the variable 'if_condition_147472' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 12), 'if_condition_147472', if_condition_147472)
        # SSA begins for if statement (line 730)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 731):
        
        # Assigning a Num to a Name (line 731):
        int_147473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 22), 'int')
        # Assigning a type to the variable 'oom' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 16), 'oom', int_147473)
        # SSA branch for the else part of an if statement (line 730)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 733):
        
        # Assigning a Call to a Name (line 733):
        
        # Call to floor(...): (line 733)
        # Processing the call arguments (line 733)
        
        # Call to log10(...): (line 733)
        # Processing the call arguments (line 733)
        # Getting the type of 'val' (line 733)
        val_147478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 44), 'val', False)
        # Processing the call keyword arguments (line 733)
        kwargs_147479 = {}
        # Getting the type of 'math' (line 733)
        math_147476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 33), 'math', False)
        # Obtaining the member 'log10' of a type (line 733)
        log10_147477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 33), math_147476, 'log10')
        # Calling log10(args, kwargs) (line 733)
        log10_call_result_147480 = invoke(stypy.reporting.localization.Localization(__file__, 733, 33), log10_147477, *[val_147478], **kwargs_147479)
        
        # Processing the call keyword arguments (line 733)
        kwargs_147481 = {}
        # Getting the type of 'math' (line 733)
        math_147474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 22), 'math', False)
        # Obtaining the member 'floor' of a type (line 733)
        floor_147475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 22), math_147474, 'floor')
        # Calling floor(args, kwargs) (line 733)
        floor_call_result_147482 = invoke(stypy.reporting.localization.Localization(__file__, 733, 22), floor_147475, *[log10_call_result_147480], **kwargs_147481)
        
        # Assigning a type to the variable 'oom' (line 733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 16), 'oom', floor_call_result_147482)
        # SSA join for if statement (line 730)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 723)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'oom' (line 734)
        oom_147483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 11), 'oom')
        
        # Obtaining the type of the subscript
        int_147484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 36), 'int')
        # Getting the type of 'self' (line 734)
        self_147485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 18), 'self')
        # Obtaining the member '_powerlimits' of a type (line 734)
        _powerlimits_147486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 18), self_147485, '_powerlimits')
        # Obtaining the member '__getitem__' of a type (line 734)
        getitem___147487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 18), _powerlimits_147486, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 734)
        subscript_call_result_147488 = invoke(stypy.reporting.localization.Localization(__file__, 734, 18), getitem___147487, int_147484)
        
        # Applying the binary operator '<=' (line 734)
        result_le_147489 = python_operator(stypy.reporting.localization.Localization(__file__, 734, 11), '<=', oom_147483, subscript_call_result_147488)
        
        # Testing the type of an if condition (line 734)
        if_condition_147490 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 734, 8), result_le_147489)
        # Assigning a type to the variable 'if_condition_147490' (line 734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'if_condition_147490', if_condition_147490)
        # SSA begins for if statement (line 734)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 735):
        
        # Assigning a Name to a Attribute (line 735):
        # Getting the type of 'oom' (line 735)
        oom_147491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 36), 'oom')
        # Getting the type of 'self' (line 735)
        self_147492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 12), 'self')
        # Setting the type of the member 'orderOfMagnitude' of a type (line 735)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 12), self_147492, 'orderOfMagnitude', oom_147491)
        # SSA branch for the else part of an if statement (line 734)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'oom' (line 736)
        oom_147493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 13), 'oom')
        
        # Obtaining the type of the subscript
        int_147494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 736, 38), 'int')
        # Getting the type of 'self' (line 736)
        self_147495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 20), 'self')
        # Obtaining the member '_powerlimits' of a type (line 736)
        _powerlimits_147496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 20), self_147495, '_powerlimits')
        # Obtaining the member '__getitem__' of a type (line 736)
        getitem___147497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 20), _powerlimits_147496, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 736)
        subscript_call_result_147498 = invoke(stypy.reporting.localization.Localization(__file__, 736, 20), getitem___147497, int_147494)
        
        # Applying the binary operator '>=' (line 736)
        result_ge_147499 = python_operator(stypy.reporting.localization.Localization(__file__, 736, 13), '>=', oom_147493, subscript_call_result_147498)
        
        # Testing the type of an if condition (line 736)
        if_condition_147500 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 736, 13), result_ge_147499)
        # Assigning a type to the variable 'if_condition_147500' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 13), 'if_condition_147500', if_condition_147500)
        # SSA begins for if statement (line 736)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 737):
        
        # Assigning a Name to a Attribute (line 737):
        # Getting the type of 'oom' (line 737)
        oom_147501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 36), 'oom')
        # Getting the type of 'self' (line 737)
        self_147502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 12), 'self')
        # Setting the type of the member 'orderOfMagnitude' of a type (line 737)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 12), self_147502, 'orderOfMagnitude', oom_147501)
        # SSA branch for the else part of an if statement (line 736)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Attribute (line 739):
        
        # Assigning a Num to a Attribute (line 739):
        int_147503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 739, 36), 'int')
        # Getting the type of 'self' (line 739)
        self_147504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 12), 'self')
        # Setting the type of the member 'orderOfMagnitude' of a type (line 739)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 12), self_147504, 'orderOfMagnitude', int_147503)
        # SSA join for if statement (line 736)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 734)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_set_orderOfMagnitude(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_orderOfMagnitude' in the type store
        # Getting the type of 'stypy_return_type' (line 715)
        stypy_return_type_147505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147505)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_orderOfMagnitude'
        return stypy_return_type_147505


    @norecursion
    def _set_format(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_format'
        module_type_store = module_type_store.open_function_context('_set_format', 741, 4, False)
        # Assigning a type to the variable 'self' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter._set_format.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter._set_format.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter._set_format.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter._set_format.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter._set_format')
        ScalarFormatter._set_format.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        ScalarFormatter._set_format.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter._set_format.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter._set_format.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter._set_format.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter._set_format.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter._set_format.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter._set_format', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_format', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_format(...)' code ##################

        
        
        
        # Call to len(...): (line 743)
        # Processing the call arguments (line 743)
        # Getting the type of 'self' (line 743)
        self_147507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 15), 'self', False)
        # Obtaining the member 'locs' of a type (line 743)
        locs_147508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 15), self_147507, 'locs')
        # Processing the call keyword arguments (line 743)
        kwargs_147509 = {}
        # Getting the type of 'len' (line 743)
        len_147506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 11), 'len', False)
        # Calling len(args, kwargs) (line 743)
        len_call_result_147510 = invoke(stypy.reporting.localization.Localization(__file__, 743, 11), len_147506, *[locs_147508], **kwargs_147509)
        
        int_147511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 743, 28), 'int')
        # Applying the binary operator '<' (line 743)
        result_lt_147512 = python_operator(stypy.reporting.localization.Localization(__file__, 743, 11), '<', len_call_result_147510, int_147511)
        
        # Testing the type of an if condition (line 743)
        if_condition_147513 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 743, 8), result_lt_147512)
        # Assigning a type to the variable 'if_condition_147513' (line 743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 8), 'if_condition_147513', if_condition_147513)
        # SSA begins for if statement (line 743)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 745):
        
        # Assigning a BinOp to a Name (line 745):
        
        # Call to list(...): (line 745)
        # Processing the call arguments (line 745)
        # Getting the type of 'self' (line 745)
        self_147515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 25), 'self', False)
        # Obtaining the member 'locs' of a type (line 745)
        locs_147516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 25), self_147515, 'locs')
        # Processing the call keyword arguments (line 745)
        kwargs_147517 = {}
        # Getting the type of 'list' (line 745)
        list_147514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 20), 'list', False)
        # Calling list(args, kwargs) (line 745)
        list_call_result_147518 = invoke(stypy.reporting.localization.Localization(__file__, 745, 20), list_147514, *[locs_147516], **kwargs_147517)
        
        
        # Obtaining an instance of the builtin type 'list' (line 745)
        list_147519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 745, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 745)
        # Adding element type (line 745)
        # Getting the type of 'vmin' (line 745)
        vmin_147520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 39), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 745, 38), list_147519, vmin_147520)
        # Adding element type (line 745)
        # Getting the type of 'vmax' (line 745)
        vmax_147521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 45), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 745, 38), list_147519, vmax_147521)
        
        # Applying the binary operator '+' (line 745)
        result_add_147522 = python_operator(stypy.reporting.localization.Localization(__file__, 745, 20), '+', list_call_result_147518, list_147519)
        
        # Assigning a type to the variable '_locs' (line 745)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 745, 12), '_locs', result_add_147522)
        # SSA branch for the else part of an if statement (line 743)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 747):
        
        # Assigning a Attribute to a Name (line 747):
        # Getting the type of 'self' (line 747)
        self_147523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 20), 'self')
        # Obtaining the member 'locs' of a type (line 747)
        locs_147524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 20), self_147523, 'locs')
        # Assigning a type to the variable '_locs' (line 747)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 747, 12), '_locs', locs_147524)
        # SSA join for if statement (line 743)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 748):
        
        # Assigning a BinOp to a Name (line 748):
        
        # Call to asarray(...): (line 748)
        # Processing the call arguments (line 748)
        # Getting the type of '_locs' (line 748)
        _locs_147527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 27), '_locs', False)
        # Processing the call keyword arguments (line 748)
        kwargs_147528 = {}
        # Getting the type of 'np' (line 748)
        np_147525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 16), 'np', False)
        # Obtaining the member 'asarray' of a type (line 748)
        asarray_147526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 16), np_147525, 'asarray')
        # Calling asarray(args, kwargs) (line 748)
        asarray_call_result_147529 = invoke(stypy.reporting.localization.Localization(__file__, 748, 16), asarray_147526, *[_locs_147527], **kwargs_147528)
        
        # Getting the type of 'self' (line 748)
        self_147530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 36), 'self')
        # Obtaining the member 'offset' of a type (line 748)
        offset_147531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 36), self_147530, 'offset')
        # Applying the binary operator '-' (line 748)
        result_sub_147532 = python_operator(stypy.reporting.localization.Localization(__file__, 748, 16), '-', asarray_call_result_147529, offset_147531)
        
        float_147533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 51), 'float')
        # Getting the type of 'self' (line 748)
        self_147534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 58), 'self')
        # Obtaining the member 'orderOfMagnitude' of a type (line 748)
        orderOfMagnitude_147535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 58), self_147534, 'orderOfMagnitude')
        # Applying the binary operator '**' (line 748)
        result_pow_147536 = python_operator(stypy.reporting.localization.Localization(__file__, 748, 51), '**', float_147533, orderOfMagnitude_147535)
        
        # Applying the binary operator 'div' (line 748)
        result_div_147537 = python_operator(stypy.reporting.localization.Localization(__file__, 748, 15), 'div', result_sub_147532, result_pow_147536)
        
        # Assigning a type to the variable 'locs' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 8), 'locs', result_div_147537)
        
        # Assigning a Call to a Name (line 749):
        
        # Assigning a Call to a Name (line 749):
        
        # Call to ptp(...): (line 749)
        # Processing the call arguments (line 749)
        # Getting the type of 'locs' (line 749)
        locs_147540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 27), 'locs', False)
        # Processing the call keyword arguments (line 749)
        kwargs_147541 = {}
        # Getting the type of 'np' (line 749)
        np_147538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 20), 'np', False)
        # Obtaining the member 'ptp' of a type (line 749)
        ptp_147539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 749, 20), np_147538, 'ptp')
        # Calling ptp(args, kwargs) (line 749)
        ptp_call_result_147542 = invoke(stypy.reporting.localization.Localization(__file__, 749, 20), ptp_147539, *[locs_147540], **kwargs_147541)
        
        # Assigning a type to the variable 'loc_range' (line 749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 8), 'loc_range', ptp_call_result_147542)
        
        
        # Getting the type of 'loc_range' (line 751)
        loc_range_147543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 11), 'loc_range')
        int_147544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 24), 'int')
        # Applying the binary operator '==' (line 751)
        result_eq_147545 = python_operator(stypy.reporting.localization.Localization(__file__, 751, 11), '==', loc_range_147543, int_147544)
        
        # Testing the type of an if condition (line 751)
        if_condition_147546 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 751, 8), result_eq_147545)
        # Assigning a type to the variable 'if_condition_147546' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'if_condition_147546', if_condition_147546)
        # SSA begins for if statement (line 751)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 752):
        
        # Assigning a Call to a Name (line 752):
        
        # Call to max(...): (line 752)
        # Processing the call arguments (line 752)
        
        # Call to abs(...): (line 752)
        # Processing the call arguments (line 752)
        # Getting the type of 'locs' (line 752)
        locs_147551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 38), 'locs', False)
        # Processing the call keyword arguments (line 752)
        kwargs_147552 = {}
        # Getting the type of 'np' (line 752)
        np_147549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 31), 'np', False)
        # Obtaining the member 'abs' of a type (line 752)
        abs_147550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 31), np_147549, 'abs')
        # Calling abs(args, kwargs) (line 752)
        abs_call_result_147553 = invoke(stypy.reporting.localization.Localization(__file__, 752, 31), abs_147550, *[locs_147551], **kwargs_147552)
        
        # Processing the call keyword arguments (line 752)
        kwargs_147554 = {}
        # Getting the type of 'np' (line 752)
        np_147547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 24), 'np', False)
        # Obtaining the member 'max' of a type (line 752)
        max_147548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 24), np_147547, 'max')
        # Calling max(args, kwargs) (line 752)
        max_call_result_147555 = invoke(stypy.reporting.localization.Localization(__file__, 752, 24), max_147548, *[abs_call_result_147553], **kwargs_147554)
        
        # Assigning a type to the variable 'loc_range' (line 752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 752, 12), 'loc_range', max_call_result_147555)
        # SSA join for if statement (line 751)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'loc_range' (line 754)
        loc_range_147556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 11), 'loc_range')
        int_147557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 754, 24), 'int')
        # Applying the binary operator '==' (line 754)
        result_eq_147558 = python_operator(stypy.reporting.localization.Localization(__file__, 754, 11), '==', loc_range_147556, int_147557)
        
        # Testing the type of an if condition (line 754)
        if_condition_147559 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 754, 8), result_eq_147558)
        # Assigning a type to the variable 'if_condition_147559' (line 754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 8), 'if_condition_147559', if_condition_147559)
        # SSA begins for if statement (line 754)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 755):
        
        # Assigning a Num to a Name (line 755):
        int_147560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 24), 'int')
        # Assigning a type to the variable 'loc_range' (line 755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'loc_range', int_147560)
        # SSA join for if statement (line 754)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 756)
        # Processing the call arguments (line 756)
        # Getting the type of 'self' (line 756)
        self_147562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 15), 'self', False)
        # Obtaining the member 'locs' of a type (line 756)
        locs_147563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 15), self_147562, 'locs')
        # Processing the call keyword arguments (line 756)
        kwargs_147564 = {}
        # Getting the type of 'len' (line 756)
        len_147561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 11), 'len', False)
        # Calling len(args, kwargs) (line 756)
        len_call_result_147565 = invoke(stypy.reporting.localization.Localization(__file__, 756, 11), len_147561, *[locs_147563], **kwargs_147564)
        
        int_147566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 28), 'int')
        # Applying the binary operator '<' (line 756)
        result_lt_147567 = python_operator(stypy.reporting.localization.Localization(__file__, 756, 11), '<', len_call_result_147565, int_147566)
        
        # Testing the type of an if condition (line 756)
        if_condition_147568 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 756, 8), result_lt_147567)
        # Assigning a type to the variable 'if_condition_147568' (line 756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 8), 'if_condition_147568', if_condition_147568)
        # SSA begins for if statement (line 756)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 758):
        
        # Assigning a Subscript to a Name (line 758):
        
        # Obtaining the type of the subscript
        int_147569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 25), 'int')
        slice_147570 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 758, 19), None, int_147569, None)
        # Getting the type of 'locs' (line 758)
        locs_147571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 19), 'locs')
        # Obtaining the member '__getitem__' of a type (line 758)
        getitem___147572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 19), locs_147571, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 758)
        subscript_call_result_147573 = invoke(stypy.reporting.localization.Localization(__file__, 758, 19), getitem___147572, slice_147570)
        
        # Assigning a type to the variable 'locs' (line 758)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 758, 12), 'locs', subscript_call_result_147573)
        # SSA join for if statement (line 756)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 759):
        
        # Assigning a Call to a Name (line 759):
        
        # Call to int(...): (line 759)
        # Processing the call arguments (line 759)
        
        # Call to floor(...): (line 759)
        # Processing the call arguments (line 759)
        
        # Call to log10(...): (line 759)
        # Processing the call arguments (line 759)
        # Getting the type of 'loc_range' (line 759)
        loc_range_147579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 50), 'loc_range', False)
        # Processing the call keyword arguments (line 759)
        kwargs_147580 = {}
        # Getting the type of 'math' (line 759)
        math_147577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 39), 'math', False)
        # Obtaining the member 'log10' of a type (line 759)
        log10_147578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 39), math_147577, 'log10')
        # Calling log10(args, kwargs) (line 759)
        log10_call_result_147581 = invoke(stypy.reporting.localization.Localization(__file__, 759, 39), log10_147578, *[loc_range_147579], **kwargs_147580)
        
        # Processing the call keyword arguments (line 759)
        kwargs_147582 = {}
        # Getting the type of 'math' (line 759)
        math_147575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 28), 'math', False)
        # Obtaining the member 'floor' of a type (line 759)
        floor_147576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 28), math_147575, 'floor')
        # Calling floor(args, kwargs) (line 759)
        floor_call_result_147583 = invoke(stypy.reporting.localization.Localization(__file__, 759, 28), floor_147576, *[log10_call_result_147581], **kwargs_147582)
        
        # Processing the call keyword arguments (line 759)
        kwargs_147584 = {}
        # Getting the type of 'int' (line 759)
        int_147574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 24), 'int', False)
        # Calling int(args, kwargs) (line 759)
        int_call_result_147585 = invoke(stypy.reporting.localization.Localization(__file__, 759, 24), int_147574, *[floor_call_result_147583], **kwargs_147584)
        
        # Assigning a type to the variable 'loc_range_oom' (line 759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 8), 'loc_range_oom', int_call_result_147585)
        
        # Assigning a Call to a Name (line 761):
        
        # Assigning a Call to a Name (line 761):
        
        # Call to max(...): (line 761)
        # Processing the call arguments (line 761)
        int_147587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 761, 22), 'int')
        int_147588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 761, 25), 'int')
        # Getting the type of 'loc_range_oom' (line 761)
        loc_range_oom_147589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 29), 'loc_range_oom', False)
        # Applying the binary operator '-' (line 761)
        result_sub_147590 = python_operator(stypy.reporting.localization.Localization(__file__, 761, 25), '-', int_147588, loc_range_oom_147589)
        
        # Processing the call keyword arguments (line 761)
        kwargs_147591 = {}
        # Getting the type of 'max' (line 761)
        max_147586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 18), 'max', False)
        # Calling max(args, kwargs) (line 761)
        max_call_result_147592 = invoke(stypy.reporting.localization.Localization(__file__, 761, 18), max_147586, *[int_147587, result_sub_147590], **kwargs_147591)
        
        # Assigning a type to the variable 'sigfigs' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'sigfigs', max_call_result_147592)
        
        # Assigning a BinOp to a Name (line 763):
        
        # Assigning a BinOp to a Name (line 763):
        float_147593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 17), 'float')
        int_147594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 24), 'int')
        # Getting the type of 'loc_range_oom' (line 763)
        loc_range_oom_147595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 30), 'loc_range_oom')
        # Applying the binary operator '**' (line 763)
        result_pow_147596 = python_operator(stypy.reporting.localization.Localization(__file__, 763, 24), '**', int_147594, loc_range_oom_147595)
        
        # Applying the binary operator '*' (line 763)
        result_mul_147597 = python_operator(stypy.reporting.localization.Localization(__file__, 763, 17), '*', float_147593, result_pow_147596)
        
        # Assigning a type to the variable 'thresh' (line 763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 8), 'thresh', result_mul_147597)
        
        
        # Getting the type of 'sigfigs' (line 764)
        sigfigs_147598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 14), 'sigfigs')
        int_147599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 25), 'int')
        # Applying the binary operator '>=' (line 764)
        result_ge_147600 = python_operator(stypy.reporting.localization.Localization(__file__, 764, 14), '>=', sigfigs_147598, int_147599)
        
        # Testing the type of an if condition (line 764)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 764, 8), result_ge_147600)
        # SSA begins for while statement (line 764)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        
        
        # Call to max(...): (line 765)
        # Processing the call keyword arguments (line 765)
        kwargs_147615 = {}
        
        # Call to abs(...): (line 765)
        # Processing the call arguments (line 765)
        # Getting the type of 'locs' (line 765)
        locs_147603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 22), 'locs', False)
        
        # Call to round(...): (line 765)
        # Processing the call arguments (line 765)
        # Getting the type of 'locs' (line 765)
        locs_147606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 38), 'locs', False)
        # Processing the call keyword arguments (line 765)
        # Getting the type of 'sigfigs' (line 765)
        sigfigs_147607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 53), 'sigfigs', False)
        keyword_147608 = sigfigs_147607
        kwargs_147609 = {'decimals': keyword_147608}
        # Getting the type of 'np' (line 765)
        np_147604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 29), 'np', False)
        # Obtaining the member 'round' of a type (line 765)
        round_147605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 29), np_147604, 'round')
        # Calling round(args, kwargs) (line 765)
        round_call_result_147610 = invoke(stypy.reporting.localization.Localization(__file__, 765, 29), round_147605, *[locs_147606], **kwargs_147609)
        
        # Applying the binary operator '-' (line 765)
        result_sub_147611 = python_operator(stypy.reporting.localization.Localization(__file__, 765, 22), '-', locs_147603, round_call_result_147610)
        
        # Processing the call keyword arguments (line 765)
        kwargs_147612 = {}
        # Getting the type of 'np' (line 765)
        np_147601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 15), 'np', False)
        # Obtaining the member 'abs' of a type (line 765)
        abs_147602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 15), np_147601, 'abs')
        # Calling abs(args, kwargs) (line 765)
        abs_call_result_147613 = invoke(stypy.reporting.localization.Localization(__file__, 765, 15), abs_147602, *[result_sub_147611], **kwargs_147612)
        
        # Obtaining the member 'max' of a type (line 765)
        max_147614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 15), abs_call_result_147613, 'max')
        # Calling max(args, kwargs) (line 765)
        max_call_result_147616 = invoke(stypy.reporting.localization.Localization(__file__, 765, 15), max_147614, *[], **kwargs_147615)
        
        # Getting the type of 'thresh' (line 765)
        thresh_147617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 71), 'thresh')
        # Applying the binary operator '<' (line 765)
        result_lt_147618 = python_operator(stypy.reporting.localization.Localization(__file__, 765, 15), '<', max_call_result_147616, thresh_147617)
        
        # Testing the type of an if condition (line 765)
        if_condition_147619 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 765, 12), result_lt_147618)
        # Assigning a type to the variable 'if_condition_147619' (line 765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 12), 'if_condition_147619', if_condition_147619)
        # SSA begins for if statement (line 765)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'sigfigs' (line 766)
        sigfigs_147620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 16), 'sigfigs')
        int_147621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 27), 'int')
        # Applying the binary operator '-=' (line 766)
        result_isub_147622 = python_operator(stypy.reporting.localization.Localization(__file__, 766, 16), '-=', sigfigs_147620, int_147621)
        # Assigning a type to the variable 'sigfigs' (line 766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 16), 'sigfigs', result_isub_147622)
        
        # SSA branch for the else part of an if statement (line 765)
        module_type_store.open_ssa_branch('else')
        # SSA join for if statement (line 765)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for while statement (line 764)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'sigfigs' (line 769)
        sigfigs_147623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'sigfigs')
        int_147624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 19), 'int')
        # Applying the binary operator '+=' (line 769)
        result_iadd_147625 = python_operator(stypy.reporting.localization.Localization(__file__, 769, 8), '+=', sigfigs_147623, int_147624)
        # Assigning a type to the variable 'sigfigs' (line 769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'sigfigs', result_iadd_147625)
        
        
        # Assigning a BinOp to a Attribute (line 770):
        
        # Assigning a BinOp to a Attribute (line 770):
        unicode_147626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 22), 'unicode', u'%1.')
        
        # Call to str(...): (line 770)
        # Processing the call arguments (line 770)
        # Getting the type of 'sigfigs' (line 770)
        sigfigs_147628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 34), 'sigfigs', False)
        # Processing the call keyword arguments (line 770)
        kwargs_147629 = {}
        # Getting the type of 'str' (line 770)
        str_147627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 30), 'str', False)
        # Calling str(args, kwargs) (line 770)
        str_call_result_147630 = invoke(stypy.reporting.localization.Localization(__file__, 770, 30), str_147627, *[sigfigs_147628], **kwargs_147629)
        
        # Applying the binary operator '+' (line 770)
        result_add_147631 = python_operator(stypy.reporting.localization.Localization(__file__, 770, 22), '+', unicode_147626, str_call_result_147630)
        
        unicode_147632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 45), 'unicode', u'f')
        # Applying the binary operator '+' (line 770)
        result_add_147633 = python_operator(stypy.reporting.localization.Localization(__file__, 770, 43), '+', result_add_147631, unicode_147632)
        
        # Getting the type of 'self' (line 770)
        self_147634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 8), 'self')
        # Setting the type of the member 'format' of a type (line 770)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 8), self_147634, 'format', result_add_147633)
        
        # Getting the type of 'self' (line 771)
        self_147635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 11), 'self')
        # Obtaining the member '_usetex' of a type (line 771)
        _usetex_147636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 11), self_147635, '_usetex')
        # Testing the type of an if condition (line 771)
        if_condition_147637 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 771, 8), _usetex_147636)
        # Assigning a type to the variable 'if_condition_147637' (line 771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 771, 8), 'if_condition_147637', if_condition_147637)
        # SSA begins for if statement (line 771)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 772):
        
        # Assigning a BinOp to a Attribute (line 772):
        unicode_147638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 772, 26), 'unicode', u'$%s$')
        # Getting the type of 'self' (line 772)
        self_147639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 35), 'self')
        # Obtaining the member 'format' of a type (line 772)
        format_147640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 35), self_147639, 'format')
        # Applying the binary operator '%' (line 772)
        result_mod_147641 = python_operator(stypy.reporting.localization.Localization(__file__, 772, 26), '%', unicode_147638, format_147640)
        
        # Getting the type of 'self' (line 772)
        self_147642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 12), 'self')
        # Setting the type of the member 'format' of a type (line 772)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 12), self_147642, 'format', result_mod_147641)
        # SSA branch for the else part of an if statement (line 771)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'self' (line 773)
        self_147643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 13), 'self')
        # Obtaining the member '_useMathText' of a type (line 773)
        _useMathText_147644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 13), self_147643, '_useMathText')
        # Testing the type of an if condition (line 773)
        if_condition_147645 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 773, 13), _useMathText_147644)
        # Assigning a type to the variable 'if_condition_147645' (line 773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 773, 13), 'if_condition_147645', if_condition_147645)
        # SSA begins for if statement (line 773)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 774):
        
        # Assigning a BinOp to a Attribute (line 774):
        unicode_147646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 26), 'unicode', u'$%s$')
        
        # Call to _mathdefault(...): (line 774)
        # Processing the call arguments (line 774)
        # Getting the type of 'self' (line 774)
        self_147648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 48), 'self', False)
        # Obtaining the member 'format' of a type (line 774)
        format_147649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 48), self_147648, 'format')
        # Processing the call keyword arguments (line 774)
        kwargs_147650 = {}
        # Getting the type of '_mathdefault' (line 774)
        _mathdefault_147647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 35), '_mathdefault', False)
        # Calling _mathdefault(args, kwargs) (line 774)
        _mathdefault_call_result_147651 = invoke(stypy.reporting.localization.Localization(__file__, 774, 35), _mathdefault_147647, *[format_147649], **kwargs_147650)
        
        # Applying the binary operator '%' (line 774)
        result_mod_147652 = python_operator(stypy.reporting.localization.Localization(__file__, 774, 26), '%', unicode_147646, _mathdefault_call_result_147651)
        
        # Getting the type of 'self' (line 774)
        self_147653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 12), 'self')
        # Setting the type of the member 'format' of a type (line 774)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 12), self_147653, 'format', result_mod_147652)
        # SSA join for if statement (line 773)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 771)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_set_format(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_format' in the type store
        # Getting the type of 'stypy_return_type' (line 741)
        stypy_return_type_147654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147654)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_format'
        return stypy_return_type_147654


    @norecursion
    def pprint_val(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pprint_val'
        module_type_store = module_type_store.open_function_context('pprint_val', 776, 4, False)
        # Assigning a type to the variable 'self' (line 777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter.pprint_val.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter.pprint_val.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter.pprint_val.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter.pprint_val.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter.pprint_val')
        ScalarFormatter.pprint_val.__dict__.__setitem__('stypy_param_names_list', ['x'])
        ScalarFormatter.pprint_val.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter.pprint_val.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter.pprint_val.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter.pprint_val.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter.pprint_val.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter.pprint_val.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter.pprint_val', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pprint_val', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pprint_val(...)' code ##################

        
        # Assigning a BinOp to a Name (line 777):
        
        # Assigning a BinOp to a Name (line 777):
        # Getting the type of 'x' (line 777)
        x_147655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 14), 'x')
        # Getting the type of 'self' (line 777)
        self_147656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 18), 'self')
        # Obtaining the member 'offset' of a type (line 777)
        offset_147657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 18), self_147656, 'offset')
        # Applying the binary operator '-' (line 777)
        result_sub_147658 = python_operator(stypy.reporting.localization.Localization(__file__, 777, 14), '-', x_147655, offset_147657)
        
        float_147659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 777, 34), 'float')
        # Getting the type of 'self' (line 777)
        self_147660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 41), 'self')
        # Obtaining the member 'orderOfMagnitude' of a type (line 777)
        orderOfMagnitude_147661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 41), self_147660, 'orderOfMagnitude')
        # Applying the binary operator '**' (line 777)
        result_pow_147662 = python_operator(stypy.reporting.localization.Localization(__file__, 777, 34), '**', float_147659, orderOfMagnitude_147661)
        
        # Applying the binary operator 'div' (line 777)
        result_div_147663 = python_operator(stypy.reporting.localization.Localization(__file__, 777, 13), 'div', result_sub_147658, result_pow_147662)
        
        # Assigning a type to the variable 'xp' (line 777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 8), 'xp', result_div_147663)
        
        
        
        # Call to abs(...): (line 778)
        # Processing the call arguments (line 778)
        # Getting the type of 'xp' (line 778)
        xp_147666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 18), 'xp', False)
        # Processing the call keyword arguments (line 778)
        kwargs_147667 = {}
        # Getting the type of 'np' (line 778)
        np_147664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 11), 'np', False)
        # Obtaining the member 'abs' of a type (line 778)
        abs_147665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 11), np_147664, 'abs')
        # Calling abs(args, kwargs) (line 778)
        abs_call_result_147668 = invoke(stypy.reporting.localization.Localization(__file__, 778, 11), abs_147665, *[xp_147666], **kwargs_147667)
        
        float_147669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 778, 24), 'float')
        # Applying the binary operator '<' (line 778)
        result_lt_147670 = python_operator(stypy.reporting.localization.Localization(__file__, 778, 11), '<', abs_call_result_147668, float_147669)
        
        # Testing the type of an if condition (line 778)
        if_condition_147671 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 778, 8), result_lt_147670)
        # Assigning a type to the variable 'if_condition_147671' (line 778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 778, 8), 'if_condition_147671', if_condition_147671)
        # SSA begins for if statement (line 778)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 779):
        
        # Assigning a Num to a Name (line 779):
        int_147672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 779, 17), 'int')
        # Assigning a type to the variable 'xp' (line 779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 779, 12), 'xp', int_147672)
        # SSA join for if statement (line 778)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 780)
        self_147673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 11), 'self')
        # Obtaining the member '_useLocale' of a type (line 780)
        _useLocale_147674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 11), self_147673, '_useLocale')
        # Testing the type of an if condition (line 780)
        if_condition_147675 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 780, 8), _useLocale_147674)
        # Assigning a type to the variable 'if_condition_147675' (line 780)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 780, 8), 'if_condition_147675', if_condition_147675)
        # SSA begins for if statement (line 780)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to format_string(...): (line 781)
        # Processing the call arguments (line 781)
        # Getting the type of 'self' (line 781)
        self_147678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 40), 'self', False)
        # Obtaining the member 'format' of a type (line 781)
        format_147679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 781, 40), self_147678, 'format')
        
        # Obtaining an instance of the builtin type 'tuple' (line 781)
        tuple_147680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 781, 54), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 781)
        # Adding element type (line 781)
        # Getting the type of 'xp' (line 781)
        xp_147681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 54), 'xp', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 781, 54), tuple_147680, xp_147681)
        
        # Processing the call keyword arguments (line 781)
        kwargs_147682 = {}
        # Getting the type of 'locale' (line 781)
        locale_147676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 19), 'locale', False)
        # Obtaining the member 'format_string' of a type (line 781)
        format_string_147677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 781, 19), locale_147676, 'format_string')
        # Calling format_string(args, kwargs) (line 781)
        format_string_call_result_147683 = invoke(stypy.reporting.localization.Localization(__file__, 781, 19), format_string_147677, *[format_147679, tuple_147680], **kwargs_147682)
        
        # Assigning a type to the variable 'stypy_return_type' (line 781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 12), 'stypy_return_type', format_string_call_result_147683)
        # SSA branch for the else part of an if statement (line 780)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'self' (line 783)
        self_147684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 19), 'self')
        # Obtaining the member 'format' of a type (line 783)
        format_147685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 783, 19), self_147684, 'format')
        # Getting the type of 'xp' (line 783)
        xp_147686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 33), 'xp')
        # Applying the binary operator '%' (line 783)
        result_mod_147687 = python_operator(stypy.reporting.localization.Localization(__file__, 783, 19), '%', format_147685, xp_147686)
        
        # Assigning a type to the variable 'stypy_return_type' (line 783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 783, 12), 'stypy_return_type', result_mod_147687)
        # SSA join for if statement (line 780)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'pprint_val(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pprint_val' in the type store
        # Getting the type of 'stypy_return_type' (line 776)
        stypy_return_type_147688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147688)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pprint_val'
        return stypy_return_type_147688


    @norecursion
    def _formatSciNotation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_formatSciNotation'
        module_type_store = module_type_store.open_function_context('_formatSciNotation', 785, 4, False)
        # Assigning a type to the variable 'self' (line 786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ScalarFormatter._formatSciNotation.__dict__.__setitem__('stypy_localization', localization)
        ScalarFormatter._formatSciNotation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ScalarFormatter._formatSciNotation.__dict__.__setitem__('stypy_type_store', module_type_store)
        ScalarFormatter._formatSciNotation.__dict__.__setitem__('stypy_function_name', 'ScalarFormatter._formatSciNotation')
        ScalarFormatter._formatSciNotation.__dict__.__setitem__('stypy_param_names_list', ['s'])
        ScalarFormatter._formatSciNotation.__dict__.__setitem__('stypy_varargs_param_name', None)
        ScalarFormatter._formatSciNotation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ScalarFormatter._formatSciNotation.__dict__.__setitem__('stypy_call_defaults', defaults)
        ScalarFormatter._formatSciNotation.__dict__.__setitem__('stypy_call_varargs', varargs)
        ScalarFormatter._formatSciNotation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ScalarFormatter._formatSciNotation.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ScalarFormatter._formatSciNotation', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_formatSciNotation', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_formatSciNotation(...)' code ##################

        
        # Getting the type of 'self' (line 787)
        self_147689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 11), 'self')
        # Obtaining the member '_useLocale' of a type (line 787)
        _useLocale_147690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 11), self_147689, '_useLocale')
        # Testing the type of an if condition (line 787)
        if_condition_147691 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 787, 8), _useLocale_147690)
        # Assigning a type to the variable 'if_condition_147691' (line 787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 8), 'if_condition_147691', if_condition_147691)
        # SSA begins for if statement (line 787)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 788):
        
        # Assigning a Subscript to a Name (line 788):
        
        # Obtaining the type of the subscript
        unicode_147692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 788, 48), 'unicode', u'decimal_point')
        
        # Call to localeconv(...): (line 788)
        # Processing the call keyword arguments (line 788)
        kwargs_147695 = {}
        # Getting the type of 'locale' (line 788)
        locale_147693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 28), 'locale', False)
        # Obtaining the member 'localeconv' of a type (line 788)
        localeconv_147694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 28), locale_147693, 'localeconv')
        # Calling localeconv(args, kwargs) (line 788)
        localeconv_call_result_147696 = invoke(stypy.reporting.localization.Localization(__file__, 788, 28), localeconv_147694, *[], **kwargs_147695)
        
        # Obtaining the member '__getitem__' of a type (line 788)
        getitem___147697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 28), localeconv_call_result_147696, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 788)
        subscript_call_result_147698 = invoke(stypy.reporting.localization.Localization(__file__, 788, 28), getitem___147697, unicode_147692)
        
        # Assigning a type to the variable 'decimal_point' (line 788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 12), 'decimal_point', subscript_call_result_147698)
        
        # Assigning a Subscript to a Name (line 789):
        
        # Assigning a Subscript to a Name (line 789):
        
        # Obtaining the type of the subscript
        unicode_147699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, 48), 'unicode', u'positive_sign')
        
        # Call to localeconv(...): (line 789)
        # Processing the call keyword arguments (line 789)
        kwargs_147702 = {}
        # Getting the type of 'locale' (line 789)
        locale_147700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 28), 'locale', False)
        # Obtaining the member 'localeconv' of a type (line 789)
        localeconv_147701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 28), locale_147700, 'localeconv')
        # Calling localeconv(args, kwargs) (line 789)
        localeconv_call_result_147703 = invoke(stypy.reporting.localization.Localization(__file__, 789, 28), localeconv_147701, *[], **kwargs_147702)
        
        # Obtaining the member '__getitem__' of a type (line 789)
        getitem___147704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 28), localeconv_call_result_147703, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 789)
        subscript_call_result_147705 = invoke(stypy.reporting.localization.Localization(__file__, 789, 28), getitem___147704, unicode_147699)
        
        # Assigning a type to the variable 'positive_sign' (line 789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 12), 'positive_sign', subscript_call_result_147705)
        # SSA branch for the else part of an if statement (line 787)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 791):
        
        # Assigning a Str to a Name (line 791):
        unicode_147706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 28), 'unicode', u'.')
        # Assigning a type to the variable 'decimal_point' (line 791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 12), 'decimal_point', unicode_147706)
        
        # Assigning a Str to a Name (line 792):
        
        # Assigning a Str to a Name (line 792):
        unicode_147707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 28), 'unicode', u'+')
        # Assigning a type to the variable 'positive_sign' (line 792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 12), 'positive_sign', unicode_147707)
        # SSA join for if statement (line 787)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 793):
        
        # Assigning a Call to a Name (line 793):
        
        # Call to split(...): (line 793)
        # Processing the call arguments (line 793)
        unicode_147710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 22), 'unicode', u'e')
        # Processing the call keyword arguments (line 793)
        kwargs_147711 = {}
        # Getting the type of 's' (line 793)
        s_147708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 14), 's', False)
        # Obtaining the member 'split' of a type (line 793)
        split_147709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 14), s_147708, 'split')
        # Calling split(args, kwargs) (line 793)
        split_call_result_147712 = invoke(stypy.reporting.localization.Localization(__file__, 793, 14), split_147709, *[unicode_147710], **kwargs_147711)
        
        # Assigning a type to the variable 'tup' (line 793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 8), 'tup', split_call_result_147712)
        
        
        # SSA begins for try-except statement (line 794)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 795):
        
        # Assigning a Call to a Name (line 795):
        
        # Call to rstrip(...): (line 795)
        # Processing the call arguments (line 795)
        # Getting the type of 'decimal_point' (line 795)
        decimal_point_147722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 52), 'decimal_point', False)
        # Processing the call keyword arguments (line 795)
        kwargs_147723 = {}
        
        # Call to rstrip(...): (line 795)
        # Processing the call arguments (line 795)
        unicode_147718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 795, 40), 'unicode', u'0')
        # Processing the call keyword arguments (line 795)
        kwargs_147719 = {}
        
        # Obtaining the type of the subscript
        int_147713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 795, 30), 'int')
        # Getting the type of 'tup' (line 795)
        tup_147714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 26), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 795)
        getitem___147715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 26), tup_147714, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 795)
        subscript_call_result_147716 = invoke(stypy.reporting.localization.Localization(__file__, 795, 26), getitem___147715, int_147713)
        
        # Obtaining the member 'rstrip' of a type (line 795)
        rstrip_147717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 26), subscript_call_result_147716, 'rstrip')
        # Calling rstrip(args, kwargs) (line 795)
        rstrip_call_result_147720 = invoke(stypy.reporting.localization.Localization(__file__, 795, 26), rstrip_147717, *[unicode_147718], **kwargs_147719)
        
        # Obtaining the member 'rstrip' of a type (line 795)
        rstrip_147721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 26), rstrip_call_result_147720, 'rstrip')
        # Calling rstrip(args, kwargs) (line 795)
        rstrip_call_result_147724 = invoke(stypy.reporting.localization.Localization(__file__, 795, 26), rstrip_147721, *[decimal_point_147722], **kwargs_147723)
        
        # Assigning a type to the variable 'significand' (line 795)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 795, 12), 'significand', rstrip_call_result_147724)
        
        # Assigning a Call to a Name (line 796):
        
        # Assigning a Call to a Name (line 796):
        
        # Call to replace(...): (line 796)
        # Processing the call arguments (line 796)
        # Getting the type of 'positive_sign' (line 796)
        positive_sign_147733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 37), 'positive_sign', False)
        unicode_147734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 52), 'unicode', u'')
        # Processing the call keyword arguments (line 796)
        kwargs_147735 = {}
        
        # Obtaining the type of the subscript
        int_147725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 26), 'int')
        
        # Obtaining the type of the subscript
        int_147726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 23), 'int')
        # Getting the type of 'tup' (line 796)
        tup_147727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 19), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 796)
        getitem___147728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 19), tup_147727, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 796)
        subscript_call_result_147729 = invoke(stypy.reporting.localization.Localization(__file__, 796, 19), getitem___147728, int_147726)
        
        # Obtaining the member '__getitem__' of a type (line 796)
        getitem___147730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 19), subscript_call_result_147729, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 796)
        subscript_call_result_147731 = invoke(stypy.reporting.localization.Localization(__file__, 796, 19), getitem___147730, int_147725)
        
        # Obtaining the member 'replace' of a type (line 796)
        replace_147732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 19), subscript_call_result_147731, 'replace')
        # Calling replace(args, kwargs) (line 796)
        replace_call_result_147736 = invoke(stypy.reporting.localization.Localization(__file__, 796, 19), replace_147732, *[positive_sign_147733, unicode_147734], **kwargs_147735)
        
        # Assigning a type to the variable 'sign' (line 796)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 12), 'sign', replace_call_result_147736)
        
        # Assigning a Call to a Name (line 797):
        
        # Assigning a Call to a Name (line 797):
        
        # Call to lstrip(...): (line 797)
        # Processing the call arguments (line 797)
        unicode_147746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 41), 'unicode', u'0')
        # Processing the call keyword arguments (line 797)
        kwargs_147747 = {}
        
        # Obtaining the type of the subscript
        int_147737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 30), 'int')
        slice_147738 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 797, 23), int_147737, None, None)
        
        # Obtaining the type of the subscript
        int_147739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 27), 'int')
        # Getting the type of 'tup' (line 797)
        tup_147740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 23), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 797)
        getitem___147741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 23), tup_147740, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 797)
        subscript_call_result_147742 = invoke(stypy.reporting.localization.Localization(__file__, 797, 23), getitem___147741, int_147739)
        
        # Obtaining the member '__getitem__' of a type (line 797)
        getitem___147743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 23), subscript_call_result_147742, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 797)
        subscript_call_result_147744 = invoke(stypy.reporting.localization.Localization(__file__, 797, 23), getitem___147743, slice_147738)
        
        # Obtaining the member 'lstrip' of a type (line 797)
        lstrip_147745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 23), subscript_call_result_147744, 'lstrip')
        # Calling lstrip(args, kwargs) (line 797)
        lstrip_call_result_147748 = invoke(stypy.reporting.localization.Localization(__file__, 797, 23), lstrip_147745, *[unicode_147746], **kwargs_147747)
        
        # Assigning a type to the variable 'exponent' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'exponent', lstrip_call_result_147748)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 798)
        self_147749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 15), 'self')
        # Obtaining the member '_useMathText' of a type (line 798)
        _useMathText_147750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 15), self_147749, '_useMathText')
        # Getting the type of 'self' (line 798)
        self_147751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 36), 'self')
        # Obtaining the member '_usetex' of a type (line 798)
        _usetex_147752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 36), self_147751, '_usetex')
        # Applying the binary operator 'or' (line 798)
        result_or_keyword_147753 = python_operator(stypy.reporting.localization.Localization(__file__, 798, 15), 'or', _useMathText_147750, _usetex_147752)
        
        # Testing the type of an if condition (line 798)
        if_condition_147754 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 798, 12), result_or_keyword_147753)
        # Assigning a type to the variable 'if_condition_147754' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 12), 'if_condition_147754', if_condition_147754)
        # SSA begins for if statement (line 798)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'significand' (line 799)
        significand_147755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 19), 'significand')
        unicode_147756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 34), 'unicode', u'1')
        # Applying the binary operator '==' (line 799)
        result_eq_147757 = python_operator(stypy.reporting.localization.Localization(__file__, 799, 19), '==', significand_147755, unicode_147756)
        
        
        # Getting the type of 'exponent' (line 799)
        exponent_147758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 42), 'exponent')
        unicode_147759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 54), 'unicode', u'')
        # Applying the binary operator '!=' (line 799)
        result_ne_147760 = python_operator(stypy.reporting.localization.Localization(__file__, 799, 42), '!=', exponent_147758, unicode_147759)
        
        # Applying the binary operator 'and' (line 799)
        result_and_keyword_147761 = python_operator(stypy.reporting.localization.Localization(__file__, 799, 19), 'and', result_eq_147757, result_ne_147760)
        
        # Testing the type of an if condition (line 799)
        if_condition_147762 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 799, 16), result_and_keyword_147761)
        # Assigning a type to the variable 'if_condition_147762' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 16), 'if_condition_147762', if_condition_147762)
        # SSA begins for if statement (line 799)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 801):
        
        # Assigning a Str to a Name (line 801):
        unicode_147763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 801, 34), 'unicode', u'')
        # Assigning a type to the variable 'significand' (line 801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 801, 20), 'significand', unicode_147763)
        # SSA join for if statement (line 799)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'exponent' (line 802)
        exponent_147764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 19), 'exponent')
        # Testing the type of an if condition (line 802)
        if_condition_147765 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 802, 16), exponent_147764)
        # Assigning a type to the variable 'if_condition_147765' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 16), 'if_condition_147765', if_condition_147765)
        # SSA begins for if statement (line 802)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 803):
        
        # Assigning a BinOp to a Name (line 803):
        unicode_147766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 31), 'unicode', u'10^{%s%s}')
        
        # Obtaining an instance of the builtin type 'tuple' (line 803)
        tuple_147767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 803)
        # Adding element type (line 803)
        # Getting the type of 'sign' (line 803)
        sign_147768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 46), 'sign')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 803, 46), tuple_147767, sign_147768)
        # Adding element type (line 803)
        # Getting the type of 'exponent' (line 803)
        exponent_147769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 52), 'exponent')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 803, 46), tuple_147767, exponent_147769)
        
        # Applying the binary operator '%' (line 803)
        result_mod_147770 = python_operator(stypy.reporting.localization.Localization(__file__, 803, 31), '%', unicode_147766, tuple_147767)
        
        # Assigning a type to the variable 'exponent' (line 803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 20), 'exponent', result_mod_147770)
        # SSA join for if statement (line 802)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'significand' (line 804)
        significand_147771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 19), 'significand')
        # Getting the type of 'exponent' (line 804)
        exponent_147772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 35), 'exponent')
        # Applying the binary operator 'and' (line 804)
        result_and_keyword_147773 = python_operator(stypy.reporting.localization.Localization(__file__, 804, 19), 'and', significand_147771, exponent_147772)
        
        # Testing the type of an if condition (line 804)
        if_condition_147774 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 804, 16), result_and_keyword_147773)
        # Assigning a type to the variable 'if_condition_147774' (line 804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 804, 16), 'if_condition_147774', if_condition_147774)
        # SSA begins for if statement (line 804)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_147775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, 27), 'unicode', u'%s{\\times}%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 805)
        tuple_147776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 805)
        # Adding element type (line 805)
        # Getting the type of 'significand' (line 805)
        significand_147777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 46), 'significand')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 805, 46), tuple_147776, significand_147777)
        # Adding element type (line 805)
        # Getting the type of 'exponent' (line 805)
        exponent_147778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 59), 'exponent')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 805, 46), tuple_147776, exponent_147778)
        
        # Applying the binary operator '%' (line 805)
        result_mod_147779 = python_operator(stypy.reporting.localization.Localization(__file__, 805, 27), '%', unicode_147775, tuple_147776)
        
        # Assigning a type to the variable 'stypy_return_type' (line 805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 20), 'stypy_return_type', result_mod_147779)
        # SSA branch for the else part of an if statement (line 804)
        module_type_store.open_ssa_branch('else')
        unicode_147780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 807, 27), 'unicode', u'%s%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 807)
        tuple_147781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 807, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 807)
        # Adding element type (line 807)
        # Getting the type of 'significand' (line 807)
        significand_147782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 38), 'significand')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 807, 38), tuple_147781, significand_147782)
        # Adding element type (line 807)
        # Getting the type of 'exponent' (line 807)
        exponent_147783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 51), 'exponent')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 807, 38), tuple_147781, exponent_147783)
        
        # Applying the binary operator '%' (line 807)
        result_mod_147784 = python_operator(stypy.reporting.localization.Localization(__file__, 807, 27), '%', unicode_147780, tuple_147781)
        
        # Assigning a type to the variable 'stypy_return_type' (line 807)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 20), 'stypy_return_type', result_mod_147784)
        # SSA join for if statement (line 804)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 798)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 809):
        
        # Assigning a Call to a Name (line 809):
        
        # Call to rstrip(...): (line 809)
        # Processing the call arguments (line 809)
        unicode_147792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 71), 'unicode', u'e')
        # Processing the call keyword arguments (line 809)
        kwargs_147793 = {}
        unicode_147785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 21), 'unicode', u'%se%s%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 809)
        tuple_147786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 809)
        # Adding element type (line 809)
        # Getting the type of 'significand' (line 809)
        significand_147787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 34), 'significand', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 809, 34), tuple_147786, significand_147787)
        # Adding element type (line 809)
        # Getting the type of 'sign' (line 809)
        sign_147788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 47), 'sign', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 809, 34), tuple_147786, sign_147788)
        # Adding element type (line 809)
        # Getting the type of 'exponent' (line 809)
        exponent_147789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 53), 'exponent', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 809, 34), tuple_147786, exponent_147789)
        
        # Applying the binary operator '%' (line 809)
        result_mod_147790 = python_operator(stypy.reporting.localization.Localization(__file__, 809, 21), '%', unicode_147785, tuple_147786)
        
        # Obtaining the member 'rstrip' of a type (line 809)
        rstrip_147791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 21), result_mod_147790, 'rstrip')
        # Calling rstrip(args, kwargs) (line 809)
        rstrip_call_result_147794 = invoke(stypy.reporting.localization.Localization(__file__, 809, 21), rstrip_147791, *[unicode_147792], **kwargs_147793)
        
        # Assigning a type to the variable 's' (line 809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 809, 16), 's', rstrip_call_result_147794)
        # Getting the type of 's' (line 810)
        s_147795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 23), 's')
        # Assigning a type to the variable 'stypy_return_type' (line 810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 810, 16), 'stypy_return_type', s_147795)
        # SSA join for if statement (line 798)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 794)
        # SSA branch for the except 'IndexError' branch of a try statement (line 794)
        module_type_store.open_ssa_branch('except')
        # Getting the type of 's' (line 812)
        s_147796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 19), 's')
        # Assigning a type to the variable 'stypy_return_type' (line 812)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 812, 12), 'stypy_return_type', s_147796)
        # SSA join for try-except statement (line 794)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_formatSciNotation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_formatSciNotation' in the type store
        # Getting the type of 'stypy_return_type' (line 785)
        stypy_return_type_147797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147797)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_formatSciNotation'
        return stypy_return_type_147797


# Assigning a type to the variable 'ScalarFormatter' (line 494)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 494, 0), 'ScalarFormatter', ScalarFormatter)

# Assigning a Call to a Name (line 538):

# Call to property(...): (line 538)
# Processing the call keyword arguments (line 538)
# Getting the type of 'get_useOffset' (line 538)
get_useOffset_147799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 30), 'get_useOffset', False)
keyword_147800 = get_useOffset_147799
# Getting the type of 'set_useOffset' (line 538)
set_useOffset_147801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 50), 'set_useOffset', False)
keyword_147802 = set_useOffset_147801
kwargs_147803 = {'fset': keyword_147802, 'fget': keyword_147800}
# Getting the type of 'property' (line 538)
property_147798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 16), 'property', False)
# Calling property(args, kwargs) (line 538)
property_call_result_147804 = invoke(stypy.reporting.localization.Localization(__file__, 538, 16), property_147798, *[], **kwargs_147803)

# Getting the type of 'ScalarFormatter'
ScalarFormatter_147805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ScalarFormatter')
# Setting the type of the member 'useOffset' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ScalarFormatter_147805, 'useOffset', property_call_result_147804)

# Assigning a Call to a Name (line 549):

# Call to property(...): (line 549)
# Processing the call keyword arguments (line 549)
# Getting the type of 'get_useLocale' (line 549)
get_useLocale_147807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 30), 'get_useLocale', False)
keyword_147808 = get_useLocale_147807
# Getting the type of 'set_useLocale' (line 549)
set_useLocale_147809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 50), 'set_useLocale', False)
keyword_147810 = set_useLocale_147809
kwargs_147811 = {'fset': keyword_147810, 'fget': keyword_147808}
# Getting the type of 'property' (line 549)
property_147806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 16), 'property', False)
# Calling property(args, kwargs) (line 549)
property_call_result_147812 = invoke(stypy.reporting.localization.Localization(__file__, 549, 16), property_147806, *[], **kwargs_147811)

# Getting the type of 'ScalarFormatter'
ScalarFormatter_147813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ScalarFormatter')
# Setting the type of the member 'useLocale' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ScalarFormatter_147813, 'useLocale', property_call_result_147812)

# Assigning a Call to a Name (line 560):

# Call to property(...): (line 560)
# Processing the call keyword arguments (line 560)
# Getting the type of 'get_useMathText' (line 560)
get_useMathText_147815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 32), 'get_useMathText', False)
keyword_147816 = get_useMathText_147815
# Getting the type of 'set_useMathText' (line 560)
set_useMathText_147817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 54), 'set_useMathText', False)
keyword_147818 = set_useMathText_147817
kwargs_147819 = {'fset': keyword_147818, 'fget': keyword_147816}
# Getting the type of 'property' (line 560)
property_147814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 18), 'property', False)
# Calling property(args, kwargs) (line 560)
property_call_result_147820 = invoke(stypy.reporting.localization.Localization(__file__, 560, 18), property_147814, *[], **kwargs_147819)

# Getting the type of 'ScalarFormatter'
ScalarFormatter_147821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ScalarFormatter')
# Setting the type of the member 'useMathText' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ScalarFormatter_147821, 'useMathText', property_call_result_147820)
# Declaration of the 'LogFormatter' class
# Getting the type of 'Formatter' (line 815)
Formatter_147822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 19), 'Formatter')

class LogFormatter(Formatter_147822, ):
    unicode_147823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 872, (-1)), 'unicode', u'\n    Base class for formatting ticks on a log or symlog scale.\n\n    It may be instantiated directly, or subclassed.\n\n    Parameters\n    ----------\n    base : float, optional, default: 10.\n        Base of the logarithm used in all calculations.\n\n    labelOnlyBase : bool, optional, default: False\n        If True, label ticks only at integer powers of base.\n        This is normally True for major ticks and False for\n        minor ticks.\n\n    minor_thresholds : (subset, all), optional, default: (1, 0.4)\n        If labelOnlyBase is False, these two numbers control\n        the labeling of ticks that are not at integer powers of\n        base; normally these are the minor ticks. The controlling\n        parameter is the log of the axis data range.  In the typical\n        case where base is 10 it is the number of decades spanned\n        by the axis, so we can call it \'numdec\'. If ``numdec <= all``,\n        all minor ticks will be labeled.  If ``all < numdec <= subset``,\n        then only a subset of minor ticks will be labeled, so as to\n        avoid crowding. If ``numdec > subset`` then no minor ticks will\n        be labeled.\n\n    linthresh : None or float, optional, default: None\n        If a symmetric log scale is in use, its ``linthresh``\n        parameter must be supplied here.\n\n    Notes\n    -----\n    The `set_locs` method must be called to enable the subsetting\n    logic controlled by the ``minor_thresholds`` parameter.\n\n    In some cases such as the colorbar, there is no distinction between\n    major and minor ticks; the tick locations might be set manually,\n    or by a locator that puts ticks at integer powers of base and\n    at intermediate locations.  For this situation, disable the\n    minor_thresholds logic by using ``minor_thresholds=(np.inf, np.inf)``,\n    so that all ticks will be labeled.\n\n    To disable labeling of minor ticks when \'labelOnlyBase\' is False,\n    use ``minor_thresholds=(0, 0)``.  This is the default for the\n    "classic" style.\n\n    Examples\n    --------\n    To label a subset of minor ticks when the view limits span up\n    to 2 decades, and all of the ticks when zoomed in to 0.5 decades\n    or less, use ``minor_thresholds=(2, 0.5)``.\n\n    To label all minor ticks when the view limits span up to 1.5\n    decades, use ``minor_thresholds=(1.5, 1.5)``.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_147824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 873, 28), 'float')
        # Getting the type of 'False' (line 873)
        False_147825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 48), 'False')
        # Getting the type of 'None' (line 874)
        None_147826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 34), 'None')
        # Getting the type of 'None' (line 875)
        None_147827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 27), 'None')
        defaults = [float_147824, False_147825, None_147826, None_147827]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 873, 4, False)
        # Assigning a type to the variable 'self' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatter.__init__', ['base', 'labelOnlyBase', 'minor_thresholds', 'linthresh'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['base', 'labelOnlyBase', 'minor_thresholds', 'linthresh'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 877):
        
        # Assigning a Call to a Attribute (line 877):
        
        # Call to float(...): (line 877)
        # Processing the call arguments (line 877)
        # Getting the type of 'base' (line 877)
        base_147829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 27), 'base', False)
        # Processing the call keyword arguments (line 877)
        kwargs_147830 = {}
        # Getting the type of 'float' (line 877)
        float_147828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 21), 'float', False)
        # Calling float(args, kwargs) (line 877)
        float_call_result_147831 = invoke(stypy.reporting.localization.Localization(__file__, 877, 21), float_147828, *[base_147829], **kwargs_147830)
        
        # Getting the type of 'self' (line 877)
        self_147832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'self')
        # Setting the type of the member '_base' of a type (line 877)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 8), self_147832, '_base', float_call_result_147831)
        
        # Assigning a Name to a Attribute (line 878):
        
        # Assigning a Name to a Attribute (line 878):
        # Getting the type of 'labelOnlyBase' (line 878)
        labelOnlyBase_147833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 29), 'labelOnlyBase')
        # Getting the type of 'self' (line 878)
        self_147834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 8), 'self')
        # Setting the type of the member 'labelOnlyBase' of a type (line 878)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 8), self_147834, 'labelOnlyBase', labelOnlyBase_147833)
        
        # Type idiom detected: calculating its left and rigth part (line 879)
        # Getting the type of 'minor_thresholds' (line 879)
        minor_thresholds_147835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 11), 'minor_thresholds')
        # Getting the type of 'None' (line 879)
        None_147836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 31), 'None')
        
        (may_be_147837, more_types_in_union_147838) = may_be_none(minor_thresholds_147835, None_147836)

        if may_be_147837:

            if more_types_in_union_147838:
                # Runtime conditional SSA (line 879)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Obtaining the type of the subscript
            unicode_147839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, 24), 'unicode', u'_internal.classic_mode')
            # Getting the type of 'rcParams' (line 880)
            rcParams_147840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 15), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 880)
            getitem___147841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 880, 15), rcParams_147840, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 880)
            subscript_call_result_147842 = invoke(stypy.reporting.localization.Localization(__file__, 880, 15), getitem___147841, unicode_147839)
            
            # Testing the type of an if condition (line 880)
            if_condition_147843 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 880, 12), subscript_call_result_147842)
            # Assigning a type to the variable 'if_condition_147843' (line 880)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 880, 12), 'if_condition_147843', if_condition_147843)
            # SSA begins for if statement (line 880)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Name (line 881):
            
            # Assigning a Tuple to a Name (line 881):
            
            # Obtaining an instance of the builtin type 'tuple' (line 881)
            tuple_147844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, 36), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 881)
            # Adding element type (line 881)
            int_147845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, 36), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 881, 36), tuple_147844, int_147845)
            # Adding element type (line 881)
            int_147846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, 39), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 881, 36), tuple_147844, int_147846)
            
            # Assigning a type to the variable 'minor_thresholds' (line 881)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 881, 16), 'minor_thresholds', tuple_147844)
            # SSA branch for the else part of an if statement (line 880)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Tuple to a Name (line 883):
            
            # Assigning a Tuple to a Name (line 883):
            
            # Obtaining an instance of the builtin type 'tuple' (line 883)
            tuple_147847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 36), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 883)
            # Adding element type (line 883)
            int_147848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 36), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 883, 36), tuple_147847, int_147848)
            # Adding element type (line 883)
            float_147849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 39), 'float')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 883, 36), tuple_147847, float_147849)
            
            # Assigning a type to the variable 'minor_thresholds' (line 883)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 16), 'minor_thresholds', tuple_147847)
            # SSA join for if statement (line 880)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_147838:
                # SSA join for if statement (line 879)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 884):
        
        # Assigning a Name to a Attribute (line 884):
        # Getting the type of 'minor_thresholds' (line 884)
        minor_thresholds_147850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 32), 'minor_thresholds')
        # Getting the type of 'self' (line 884)
        self_147851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 8), 'self')
        # Setting the type of the member 'minor_thresholds' of a type (line 884)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 8), self_147851, 'minor_thresholds', minor_thresholds_147850)
        
        # Assigning a Name to a Attribute (line 885):
        
        # Assigning a Name to a Attribute (line 885):
        # Getting the type of 'None' (line 885)
        None_147852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 26), 'None')
        # Getting the type of 'self' (line 885)
        self_147853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 8), 'self')
        # Setting the type of the member '_sublabels' of a type (line 885)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 8), self_147853, '_sublabels', None_147852)
        
        # Assigning a Name to a Attribute (line 886):
        
        # Assigning a Name to a Attribute (line 886):
        # Getting the type of 'linthresh' (line 886)
        linthresh_147854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 26), 'linthresh')
        # Getting the type of 'self' (line 886)
        self_147855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 8), 'self')
        # Setting the type of the member '_linthresh' of a type (line 886)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 8), self_147855, '_linthresh', linthresh_147854)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def base(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'base'
        module_type_store = module_type_store.open_function_context('base', 888, 4, False)
        # Assigning a type to the variable 'self' (line 889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 889, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogFormatter.base.__dict__.__setitem__('stypy_localization', localization)
        LogFormatter.base.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogFormatter.base.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogFormatter.base.__dict__.__setitem__('stypy_function_name', 'LogFormatter.base')
        LogFormatter.base.__dict__.__setitem__('stypy_param_names_list', ['base'])
        LogFormatter.base.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogFormatter.base.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogFormatter.base.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogFormatter.base.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogFormatter.base.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogFormatter.base.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatter.base', ['base'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'base', localization, ['base'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'base(...)' code ##################

        unicode_147856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 895, (-1)), 'unicode', u'\n        change the `base` for labeling.\n\n        .. warning::\n           Should always match the base used for :class:`LogLocator`\n\n        ')
        
        # Assigning a Name to a Attribute (line 896):
        
        # Assigning a Name to a Attribute (line 896):
        # Getting the type of 'base' (line 896)
        base_147857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 21), 'base')
        # Getting the type of 'self' (line 896)
        self_147858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'self')
        # Setting the type of the member '_base' of a type (line 896)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 8), self_147858, '_base', base_147857)
        
        # ################# End of 'base(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'base' in the type store
        # Getting the type of 'stypy_return_type' (line 888)
        stypy_return_type_147859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147859)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'base'
        return stypy_return_type_147859


    @norecursion
    def label_minor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'label_minor'
        module_type_store = module_type_store.open_function_context('label_minor', 898, 4, False)
        # Assigning a type to the variable 'self' (line 899)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogFormatter.label_minor.__dict__.__setitem__('stypy_localization', localization)
        LogFormatter.label_minor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogFormatter.label_minor.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogFormatter.label_minor.__dict__.__setitem__('stypy_function_name', 'LogFormatter.label_minor')
        LogFormatter.label_minor.__dict__.__setitem__('stypy_param_names_list', ['labelOnlyBase'])
        LogFormatter.label_minor.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogFormatter.label_minor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogFormatter.label_minor.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogFormatter.label_minor.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogFormatter.label_minor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogFormatter.label_minor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatter.label_minor', ['labelOnlyBase'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'label_minor', localization, ['labelOnlyBase'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'label_minor(...)' code ##################

        unicode_147860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, (-1)), 'unicode', u'\n        Switch minor tick labeling on or off.\n\n        Parameters\n        ----------\n        labelOnlyBase : bool\n            If True, label ticks only at integer powers of base.\n\n        ')
        
        # Assigning a Name to a Attribute (line 908):
        
        # Assigning a Name to a Attribute (line 908):
        # Getting the type of 'labelOnlyBase' (line 908)
        labelOnlyBase_147861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 29), 'labelOnlyBase')
        # Getting the type of 'self' (line 908)
        self_147862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 8), 'self')
        # Setting the type of the member 'labelOnlyBase' of a type (line 908)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 908, 8), self_147862, 'labelOnlyBase', labelOnlyBase_147861)
        
        # ################# End of 'label_minor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'label_minor' in the type store
        # Getting the type of 'stypy_return_type' (line 898)
        stypy_return_type_147863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147863)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'label_minor'
        return stypy_return_type_147863


    @norecursion
    def set_locs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 910)
        None_147864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 28), 'None')
        defaults = [None_147864]
        # Create a new context for function 'set_locs'
        module_type_store = module_type_store.open_function_context('set_locs', 910, 4, False)
        # Assigning a type to the variable 'self' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogFormatter.set_locs.__dict__.__setitem__('stypy_localization', localization)
        LogFormatter.set_locs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogFormatter.set_locs.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogFormatter.set_locs.__dict__.__setitem__('stypy_function_name', 'LogFormatter.set_locs')
        LogFormatter.set_locs.__dict__.__setitem__('stypy_param_names_list', ['locs'])
        LogFormatter.set_locs.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogFormatter.set_locs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogFormatter.set_locs.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogFormatter.set_locs.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogFormatter.set_locs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogFormatter.set_locs.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatter.set_locs', ['locs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_locs', localization, ['locs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_locs(...)' code ##################

        unicode_147865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, (-1)), 'unicode', u'\n        Use axis view limits to control which ticks are labeled.\n\n        The ``locs`` parameter is ignored in the present algorithm.\n\n        ')
        
        
        # Call to isinf(...): (line 917)
        # Processing the call arguments (line 917)
        
        # Obtaining the type of the subscript
        int_147868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 917, 42), 'int')
        # Getting the type of 'self' (line 917)
        self_147869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 20), 'self', False)
        # Obtaining the member 'minor_thresholds' of a type (line 917)
        minor_thresholds_147870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 20), self_147869, 'minor_thresholds')
        # Obtaining the member '__getitem__' of a type (line 917)
        getitem___147871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 20), minor_thresholds_147870, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 917)
        subscript_call_result_147872 = invoke(stypy.reporting.localization.Localization(__file__, 917, 20), getitem___147871, int_147868)
        
        # Processing the call keyword arguments (line 917)
        kwargs_147873 = {}
        # Getting the type of 'np' (line 917)
        np_147866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 11), 'np', False)
        # Obtaining the member 'isinf' of a type (line 917)
        isinf_147867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 11), np_147866, 'isinf')
        # Calling isinf(args, kwargs) (line 917)
        isinf_call_result_147874 = invoke(stypy.reporting.localization.Localization(__file__, 917, 11), isinf_147867, *[subscript_call_result_147872], **kwargs_147873)
        
        # Testing the type of an if condition (line 917)
        if_condition_147875 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 917, 8), isinf_call_result_147874)
        # Assigning a type to the variable 'if_condition_147875' (line 917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 8), 'if_condition_147875', if_condition_147875)
        # SSA begins for if statement (line 917)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 918):
        
        # Assigning a Name to a Attribute (line 918):
        # Getting the type of 'None' (line 918)
        None_147876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 30), 'None')
        # Getting the type of 'self' (line 918)
        self_147877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 12), 'self')
        # Setting the type of the member '_sublabels' of a type (line 918)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 12), self_147877, '_sublabels', None_147876)
        # Assigning a type to the variable 'stypy_return_type' (line 919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 917)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 922):
        
        # Assigning a Attribute to a Name (line 922):
        # Getting the type of 'self' (line 922)
        self_147878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 20), 'self')
        # Obtaining the member '_linthresh' of a type (line 922)
        _linthresh_147879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 20), self_147878, '_linthresh')
        # Assigning a type to the variable 'linthresh' (line 922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 8), 'linthresh', _linthresh_147879)
        
        # Type idiom detected: calculating its left and rigth part (line 923)
        # Getting the type of 'linthresh' (line 923)
        linthresh_147880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 11), 'linthresh')
        # Getting the type of 'None' (line 923)
        None_147881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 24), 'None')
        
        (may_be_147882, more_types_in_union_147883) = may_be_none(linthresh_147880, None_147881)

        if may_be_147882:

            if more_types_in_union_147883:
                # Runtime conditional SSA (line 923)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # SSA begins for try-except statement (line 924)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Attribute to a Name (line 925):
            
            # Assigning a Attribute to a Name (line 925):
            
            # Call to get_transform(...): (line 925)
            # Processing the call keyword arguments (line 925)
            kwargs_147887 = {}
            # Getting the type of 'self' (line 925)
            self_147884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 28), 'self', False)
            # Obtaining the member 'axis' of a type (line 925)
            axis_147885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 28), self_147884, 'axis')
            # Obtaining the member 'get_transform' of a type (line 925)
            get_transform_147886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 28), axis_147885, 'get_transform')
            # Calling get_transform(args, kwargs) (line 925)
            get_transform_call_result_147888 = invoke(stypy.reporting.localization.Localization(__file__, 925, 28), get_transform_147886, *[], **kwargs_147887)
            
            # Obtaining the member 'linthresh' of a type (line 925)
            linthresh_147889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 28), get_transform_call_result_147888, 'linthresh')
            # Assigning a type to the variable 'linthresh' (line 925)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 16), 'linthresh', linthresh_147889)
            # SSA branch for the except part of a try statement (line 924)
            # SSA branch for the except 'AttributeError' branch of a try statement (line 924)
            module_type_store.open_ssa_branch('except')
            pass
            # SSA join for try-except statement (line 924)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_147883:
                # SSA join for if statement (line 923)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 929):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 929)
        # Processing the call keyword arguments (line 929)
        kwargs_147893 = {}
        # Getting the type of 'self' (line 929)
        self_147890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 929)
        axis_147891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 21), self_147890, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 929)
        get_view_interval_147892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 21), axis_147891, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 929)
        get_view_interval_call_result_147894 = invoke(stypy.reporting.localization.Localization(__file__, 929, 21), get_view_interval_147892, *[], **kwargs_147893)
        
        # Assigning a type to the variable 'call_assignment_146266' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'call_assignment_146266', get_view_interval_call_result_147894)
        
        # Assigning a Call to a Name (line 929):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_147897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 8), 'int')
        # Processing the call keyword arguments
        kwargs_147898 = {}
        # Getting the type of 'call_assignment_146266' (line 929)
        call_assignment_146266_147895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'call_assignment_146266', False)
        # Obtaining the member '__getitem__' of a type (line 929)
        getitem___147896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 8), call_assignment_146266_147895, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_147899 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___147896, *[int_147897], **kwargs_147898)
        
        # Assigning a type to the variable 'call_assignment_146267' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'call_assignment_146267', getitem___call_result_147899)
        
        # Assigning a Name to a Name (line 929):
        # Getting the type of 'call_assignment_146267' (line 929)
        call_assignment_146267_147900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'call_assignment_146267')
        # Assigning a type to the variable 'vmin' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'vmin', call_assignment_146267_147900)
        
        # Assigning a Call to a Name (line 929):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_147903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 8), 'int')
        # Processing the call keyword arguments
        kwargs_147904 = {}
        # Getting the type of 'call_assignment_146266' (line 929)
        call_assignment_146266_147901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'call_assignment_146266', False)
        # Obtaining the member '__getitem__' of a type (line 929)
        getitem___147902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 8), call_assignment_146266_147901, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_147905 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___147902, *[int_147903], **kwargs_147904)
        
        # Assigning a type to the variable 'call_assignment_146268' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'call_assignment_146268', getitem___call_result_147905)
        
        # Assigning a Name to a Name (line 929):
        # Getting the type of 'call_assignment_146268' (line 929)
        call_assignment_146268_147906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'call_assignment_146268')
        # Assigning a type to the variable 'vmax' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 14), 'vmax', call_assignment_146268_147906)
        
        
        # Getting the type of 'vmin' (line 930)
        vmin_147907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 11), 'vmin')
        # Getting the type of 'vmax' (line 930)
        vmax_147908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 18), 'vmax')
        # Applying the binary operator '>' (line 930)
        result_gt_147909 = python_operator(stypy.reporting.localization.Localization(__file__, 930, 11), '>', vmin_147907, vmax_147908)
        
        # Testing the type of an if condition (line 930)
        if_condition_147910 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 930, 8), result_gt_147909)
        # Assigning a type to the variable 'if_condition_147910' (line 930)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 8), 'if_condition_147910', if_condition_147910)
        # SSA begins for if statement (line 930)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 931):
        
        # Assigning a Name to a Name (line 931):
        # Getting the type of 'vmax' (line 931)
        vmax_147911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 25), 'vmax')
        # Assigning a type to the variable 'tuple_assignment_146269' (line 931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 12), 'tuple_assignment_146269', vmax_147911)
        
        # Assigning a Name to a Name (line 931):
        # Getting the type of 'vmin' (line 931)
        vmin_147912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 31), 'vmin')
        # Assigning a type to the variable 'tuple_assignment_146270' (line 931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 12), 'tuple_assignment_146270', vmin_147912)
        
        # Assigning a Name to a Name (line 931):
        # Getting the type of 'tuple_assignment_146269' (line 931)
        tuple_assignment_146269_147913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 12), 'tuple_assignment_146269')
        # Assigning a type to the variable 'vmin' (line 931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 12), 'vmin', tuple_assignment_146269_147913)
        
        # Assigning a Name to a Name (line 931):
        # Getting the type of 'tuple_assignment_146270' (line 931)
        tuple_assignment_146270_147914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 12), 'tuple_assignment_146270')
        # Assigning a type to the variable 'vmax' (line 931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 18), 'vmax', tuple_assignment_146270_147914)
        # SSA join for if statement (line 930)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'linthresh' (line 933)
        linthresh_147915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 11), 'linthresh')
        # Getting the type of 'None' (line 933)
        None_147916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 24), 'None')
        # Applying the binary operator 'is' (line 933)
        result_is__147917 = python_operator(stypy.reporting.localization.Localization(__file__, 933, 11), 'is', linthresh_147915, None_147916)
        
        
        # Getting the type of 'vmin' (line 933)
        vmin_147918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 33), 'vmin')
        int_147919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 933, 41), 'int')
        # Applying the binary operator '<=' (line 933)
        result_le_147920 = python_operator(stypy.reporting.localization.Localization(__file__, 933, 33), '<=', vmin_147918, int_147919)
        
        # Applying the binary operator 'and' (line 933)
        result_and_keyword_147921 = python_operator(stypy.reporting.localization.Localization(__file__, 933, 11), 'and', result_is__147917, result_le_147920)
        
        # Testing the type of an if condition (line 933)
        if_condition_147922 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 933, 8), result_and_keyword_147921)
        # Assigning a type to the variable 'if_condition_147922' (line 933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 8), 'if_condition_147922', if_condition_147922)
        # SSA begins for if statement (line 933)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 937):
        
        # Assigning a Call to a Attribute (line 937):
        
        # Call to set(...): (line 937)
        # Processing the call arguments (line 937)
        
        # Obtaining an instance of the builtin type 'tuple' (line 937)
        tuple_147924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 937, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 937)
        # Adding element type (line 937)
        int_147925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 937, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 937, 35), tuple_147924, int_147925)
        
        # Processing the call keyword arguments (line 937)
        kwargs_147926 = {}
        # Getting the type of 'set' (line 937)
        set_147923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 30), 'set', False)
        # Calling set(args, kwargs) (line 937)
        set_call_result_147927 = invoke(stypy.reporting.localization.Localization(__file__, 937, 30), set_147923, *[tuple_147924], **kwargs_147926)
        
        # Getting the type of 'self' (line 937)
        self_147928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 12), 'self')
        # Setting the type of the member '_sublabels' of a type (line 937)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 937, 12), self_147928, '_sublabels', set_call_result_147927)
        # Assigning a type to the variable 'stypy_return_type' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 933)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 940):
        
        # Assigning a Attribute to a Name (line 940):
        # Getting the type of 'self' (line 940)
        self_147929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 12), 'self')
        # Obtaining the member '_base' of a type (line 940)
        _base_147930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 12), self_147929, '_base')
        # Assigning a type to the variable 'b' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 8), 'b', _base_147930)
        
        # Type idiom detected: calculating its left and rigth part (line 941)
        # Getting the type of 'linthresh' (line 941)
        linthresh_147931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 8), 'linthresh')
        # Getting the type of 'None' (line 941)
        None_147932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 28), 'None')
        
        (may_be_147933, more_types_in_union_147934) = may_not_be_none(linthresh_147931, None_147932)

        if may_be_147933:

            if more_types_in_union_147934:
                # Runtime conditional SSA (line 941)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Num to a Name (line 944):
            
            # Assigning a Num to a Name (line 944):
            int_147935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 944, 21), 'int')
            # Assigning a type to the variable 'numdec' (line 944)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 12), 'numdec', int_147935)
            
            
            # Getting the type of 'vmin' (line 945)
            vmin_147936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 15), 'vmin')
            
            # Getting the type of 'linthresh' (line 945)
            linthresh_147937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 23), 'linthresh')
            # Applying the 'usub' unary operator (line 945)
            result___neg___147938 = python_operator(stypy.reporting.localization.Localization(__file__, 945, 22), 'usub', linthresh_147937)
            
            # Applying the binary operator '<' (line 945)
            result_lt_147939 = python_operator(stypy.reporting.localization.Localization(__file__, 945, 15), '<', vmin_147936, result___neg___147938)
            
            # Testing the type of an if condition (line 945)
            if_condition_147940 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 945, 12), result_lt_147939)
            # Assigning a type to the variable 'if_condition_147940' (line 945)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 12), 'if_condition_147940', if_condition_147940)
            # SSA begins for if statement (line 945)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 946):
            
            # Assigning a Call to a Name (line 946):
            
            # Call to min(...): (line 946)
            # Processing the call arguments (line 946)
            # Getting the type of 'vmax' (line 946)
            vmax_147942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 26), 'vmax', False)
            
            # Getting the type of 'linthresh' (line 946)
            linthresh_147943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 33), 'linthresh', False)
            # Applying the 'usub' unary operator (line 946)
            result___neg___147944 = python_operator(stypy.reporting.localization.Localization(__file__, 946, 32), 'usub', linthresh_147943)
            
            # Processing the call keyword arguments (line 946)
            kwargs_147945 = {}
            # Getting the type of 'min' (line 946)
            min_147941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 22), 'min', False)
            # Calling min(args, kwargs) (line 946)
            min_call_result_147946 = invoke(stypy.reporting.localization.Localization(__file__, 946, 22), min_147941, *[vmax_147942, result___neg___147944], **kwargs_147945)
            
            # Assigning a type to the variable 'rhs' (line 946)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 16), 'rhs', min_call_result_147946)
            
            # Getting the type of 'numdec' (line 947)
            numdec_147947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 16), 'numdec')
            
            # Call to log(...): (line 947)
            # Processing the call arguments (line 947)
            # Getting the type of 'vmin' (line 947)
            vmin_147950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 35), 'vmin', False)
            # Getting the type of 'rhs' (line 947)
            rhs_147951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 42), 'rhs', False)
            # Applying the binary operator 'div' (line 947)
            result_div_147952 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 35), 'div', vmin_147950, rhs_147951)
            
            # Processing the call keyword arguments (line 947)
            kwargs_147953 = {}
            # Getting the type of 'math' (line 947)
            math_147948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 26), 'math', False)
            # Obtaining the member 'log' of a type (line 947)
            log_147949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 26), math_147948, 'log')
            # Calling log(args, kwargs) (line 947)
            log_call_result_147954 = invoke(stypy.reporting.localization.Localization(__file__, 947, 26), log_147949, *[result_div_147952], **kwargs_147953)
            
            
            # Call to log(...): (line 947)
            # Processing the call arguments (line 947)
            # Getting the type of 'b' (line 947)
            b_147957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 58), 'b', False)
            # Processing the call keyword arguments (line 947)
            kwargs_147958 = {}
            # Getting the type of 'math' (line 947)
            math_147955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 49), 'math', False)
            # Obtaining the member 'log' of a type (line 947)
            log_147956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 49), math_147955, 'log')
            # Calling log(args, kwargs) (line 947)
            log_call_result_147959 = invoke(stypy.reporting.localization.Localization(__file__, 947, 49), log_147956, *[b_147957], **kwargs_147958)
            
            # Applying the binary operator 'div' (line 947)
            result_div_147960 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 26), 'div', log_call_result_147954, log_call_result_147959)
            
            # Applying the binary operator '+=' (line 947)
            result_iadd_147961 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 16), '+=', numdec_147947, result_div_147960)
            # Assigning a type to the variable 'numdec' (line 947)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 16), 'numdec', result_iadd_147961)
            
            # SSA join for if statement (line 945)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Getting the type of 'vmax' (line 948)
            vmax_147962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 15), 'vmax')
            # Getting the type of 'linthresh' (line 948)
            linthresh_147963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 22), 'linthresh')
            # Applying the binary operator '>' (line 948)
            result_gt_147964 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 15), '>', vmax_147962, linthresh_147963)
            
            # Testing the type of an if condition (line 948)
            if_condition_147965 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 948, 12), result_gt_147964)
            # Assigning a type to the variable 'if_condition_147965' (line 948)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 948, 12), 'if_condition_147965', if_condition_147965)
            # SSA begins for if statement (line 948)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 949):
            
            # Assigning a Call to a Name (line 949):
            
            # Call to max(...): (line 949)
            # Processing the call arguments (line 949)
            # Getting the type of 'vmin' (line 949)
            vmin_147967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 26), 'vmin', False)
            # Getting the type of 'linthresh' (line 949)
            linthresh_147968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 32), 'linthresh', False)
            # Processing the call keyword arguments (line 949)
            kwargs_147969 = {}
            # Getting the type of 'max' (line 949)
            max_147966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 22), 'max', False)
            # Calling max(args, kwargs) (line 949)
            max_call_result_147970 = invoke(stypy.reporting.localization.Localization(__file__, 949, 22), max_147966, *[vmin_147967, linthresh_147968], **kwargs_147969)
            
            # Assigning a type to the variable 'lhs' (line 949)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 16), 'lhs', max_call_result_147970)
            
            # Getting the type of 'numdec' (line 950)
            numdec_147971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 16), 'numdec')
            
            # Call to log(...): (line 950)
            # Processing the call arguments (line 950)
            # Getting the type of 'vmax' (line 950)
            vmax_147974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 35), 'vmax', False)
            # Getting the type of 'lhs' (line 950)
            lhs_147975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 42), 'lhs', False)
            # Applying the binary operator 'div' (line 950)
            result_div_147976 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 35), 'div', vmax_147974, lhs_147975)
            
            # Processing the call keyword arguments (line 950)
            kwargs_147977 = {}
            # Getting the type of 'math' (line 950)
            math_147972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 26), 'math', False)
            # Obtaining the member 'log' of a type (line 950)
            log_147973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 26), math_147972, 'log')
            # Calling log(args, kwargs) (line 950)
            log_call_result_147978 = invoke(stypy.reporting.localization.Localization(__file__, 950, 26), log_147973, *[result_div_147976], **kwargs_147977)
            
            
            # Call to log(...): (line 950)
            # Processing the call arguments (line 950)
            # Getting the type of 'b' (line 950)
            b_147981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 58), 'b', False)
            # Processing the call keyword arguments (line 950)
            kwargs_147982 = {}
            # Getting the type of 'math' (line 950)
            math_147979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 49), 'math', False)
            # Obtaining the member 'log' of a type (line 950)
            log_147980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 49), math_147979, 'log')
            # Calling log(args, kwargs) (line 950)
            log_call_result_147983 = invoke(stypy.reporting.localization.Localization(__file__, 950, 49), log_147980, *[b_147981], **kwargs_147982)
            
            # Applying the binary operator 'div' (line 950)
            result_div_147984 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 26), 'div', log_call_result_147978, log_call_result_147983)
            
            # Applying the binary operator '+=' (line 950)
            result_iadd_147985 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 16), '+=', numdec_147971, result_div_147984)
            # Assigning a type to the variable 'numdec' (line 950)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 16), 'numdec', result_iadd_147985)
            
            # SSA join for if statement (line 948)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_147934:
                # Runtime conditional SSA for else branch (line 941)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_147933) or more_types_in_union_147934):
            
            # Assigning a BinOp to a Name (line 952):
            
            # Assigning a BinOp to a Name (line 952):
            
            # Call to log(...): (line 952)
            # Processing the call arguments (line 952)
            # Getting the type of 'vmin' (line 952)
            vmin_147988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 28), 'vmin', False)
            # Processing the call keyword arguments (line 952)
            kwargs_147989 = {}
            # Getting the type of 'math' (line 952)
            math_147986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 19), 'math', False)
            # Obtaining the member 'log' of a type (line 952)
            log_147987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 19), math_147986, 'log')
            # Calling log(args, kwargs) (line 952)
            log_call_result_147990 = invoke(stypy.reporting.localization.Localization(__file__, 952, 19), log_147987, *[vmin_147988], **kwargs_147989)
            
            
            # Call to log(...): (line 952)
            # Processing the call arguments (line 952)
            # Getting the type of 'b' (line 952)
            b_147993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 45), 'b', False)
            # Processing the call keyword arguments (line 952)
            kwargs_147994 = {}
            # Getting the type of 'math' (line 952)
            math_147991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 36), 'math', False)
            # Obtaining the member 'log' of a type (line 952)
            log_147992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 36), math_147991, 'log')
            # Calling log(args, kwargs) (line 952)
            log_call_result_147995 = invoke(stypy.reporting.localization.Localization(__file__, 952, 36), log_147992, *[b_147993], **kwargs_147994)
            
            # Applying the binary operator 'div' (line 952)
            result_div_147996 = python_operator(stypy.reporting.localization.Localization(__file__, 952, 19), 'div', log_call_result_147990, log_call_result_147995)
            
            # Assigning a type to the variable 'vmin' (line 952)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 12), 'vmin', result_div_147996)
            
            # Assigning a BinOp to a Name (line 953):
            
            # Assigning a BinOp to a Name (line 953):
            
            # Call to log(...): (line 953)
            # Processing the call arguments (line 953)
            # Getting the type of 'vmax' (line 953)
            vmax_147999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 28), 'vmax', False)
            # Processing the call keyword arguments (line 953)
            kwargs_148000 = {}
            # Getting the type of 'math' (line 953)
            math_147997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 19), 'math', False)
            # Obtaining the member 'log' of a type (line 953)
            log_147998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 19), math_147997, 'log')
            # Calling log(args, kwargs) (line 953)
            log_call_result_148001 = invoke(stypy.reporting.localization.Localization(__file__, 953, 19), log_147998, *[vmax_147999], **kwargs_148000)
            
            
            # Call to log(...): (line 953)
            # Processing the call arguments (line 953)
            # Getting the type of 'b' (line 953)
            b_148004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 45), 'b', False)
            # Processing the call keyword arguments (line 953)
            kwargs_148005 = {}
            # Getting the type of 'math' (line 953)
            math_148002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 36), 'math', False)
            # Obtaining the member 'log' of a type (line 953)
            log_148003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 36), math_148002, 'log')
            # Calling log(args, kwargs) (line 953)
            log_call_result_148006 = invoke(stypy.reporting.localization.Localization(__file__, 953, 36), log_148003, *[b_148004], **kwargs_148005)
            
            # Applying the binary operator 'div' (line 953)
            result_div_148007 = python_operator(stypy.reporting.localization.Localization(__file__, 953, 19), 'div', log_call_result_148001, log_call_result_148006)
            
            # Assigning a type to the variable 'vmax' (line 953)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 12), 'vmax', result_div_148007)
            
            # Assigning a Call to a Name (line 954):
            
            # Assigning a Call to a Name (line 954):
            
            # Call to abs(...): (line 954)
            # Processing the call arguments (line 954)
            # Getting the type of 'vmax' (line 954)
            vmax_148009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 25), 'vmax', False)
            # Getting the type of 'vmin' (line 954)
            vmin_148010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 32), 'vmin', False)
            # Applying the binary operator '-' (line 954)
            result_sub_148011 = python_operator(stypy.reporting.localization.Localization(__file__, 954, 25), '-', vmax_148009, vmin_148010)
            
            # Processing the call keyword arguments (line 954)
            kwargs_148012 = {}
            # Getting the type of 'abs' (line 954)
            abs_148008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 21), 'abs', False)
            # Calling abs(args, kwargs) (line 954)
            abs_call_result_148013 = invoke(stypy.reporting.localization.Localization(__file__, 954, 21), abs_148008, *[result_sub_148011], **kwargs_148012)
            
            # Assigning a type to the variable 'numdec' (line 954)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 12), 'numdec', abs_call_result_148013)

            if (may_be_147933 and more_types_in_union_147934):
                # SSA join for if statement (line 941)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'numdec' (line 956)
        numdec_148014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 11), 'numdec')
        
        # Obtaining the type of the subscript
        int_148015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, 42), 'int')
        # Getting the type of 'self' (line 956)
        self_148016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 20), 'self')
        # Obtaining the member 'minor_thresholds' of a type (line 956)
        minor_thresholds_148017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 956, 20), self_148016, 'minor_thresholds')
        # Obtaining the member '__getitem__' of a type (line 956)
        getitem___148018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 956, 20), minor_thresholds_148017, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 956)
        subscript_call_result_148019 = invoke(stypy.reporting.localization.Localization(__file__, 956, 20), getitem___148018, int_148015)
        
        # Applying the binary operator '>' (line 956)
        result_gt_148020 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 11), '>', numdec_148014, subscript_call_result_148019)
        
        # Testing the type of an if condition (line 956)
        if_condition_148021 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 956, 8), result_gt_148020)
        # Assigning a type to the variable 'if_condition_148021' (line 956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 8), 'if_condition_148021', if_condition_148021)
        # SSA begins for if statement (line 956)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Set to a Attribute (line 958):
        
        # Assigning a Set to a Attribute (line 958):
        
        # Obtaining an instance of the builtin type 'set' (line 958)
        set_148022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 30), 'set')
        # Adding type elements to the builtin type 'set' instance (line 958)
        # Adding element type (line 958)
        int_148023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 31), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 958, 30), set_148022, int_148023)
        
        # Getting the type of 'self' (line 958)
        self_148024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'self')
        # Setting the type of the member '_sublabels' of a type (line 958)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 12), self_148024, '_sublabels', set_148022)
        # SSA branch for the else part of an if statement (line 956)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'numdec' (line 959)
        numdec_148025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 13), 'numdec')
        
        # Obtaining the type of the subscript
        int_148026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 44), 'int')
        # Getting the type of 'self' (line 959)
        self_148027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 22), 'self')
        # Obtaining the member 'minor_thresholds' of a type (line 959)
        minor_thresholds_148028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 22), self_148027, 'minor_thresholds')
        # Obtaining the member '__getitem__' of a type (line 959)
        getitem___148029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 22), minor_thresholds_148028, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 959)
        subscript_call_result_148030 = invoke(stypy.reporting.localization.Localization(__file__, 959, 22), getitem___148029, int_148026)
        
        # Applying the binary operator '>' (line 959)
        result_gt_148031 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 13), '>', numdec_148025, subscript_call_result_148030)
        
        # Testing the type of an if condition (line 959)
        if_condition_148032 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 959, 13), result_gt_148031)
        # Assigning a type to the variable 'if_condition_148032' (line 959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 13), 'if_condition_148032', if_condition_148032)
        # SSA begins for if statement (line 959)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 963):
        
        # Assigning a Call to a Name (line 963):
        
        # Call to logspace(...): (line 963)
        # Processing the call arguments (line 963)
        int_148035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 28), 'int')
        int_148036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 31), 'int')
        
        # Call to int(...): (line 963)
        # Processing the call arguments (line 963)
        # Getting the type of 'b' (line 963)
        b_148038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 38), 'b', False)
        # Processing the call keyword arguments (line 963)
        kwargs_148039 = {}
        # Getting the type of 'int' (line 963)
        int_148037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 34), 'int', False)
        # Calling int(args, kwargs) (line 963)
        int_call_result_148040 = invoke(stypy.reporting.localization.Localization(__file__, 963, 34), int_148037, *[b_148038], **kwargs_148039)
        
        int_148041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 42), 'int')
        # Applying the binary operator '//' (line 963)
        result_floordiv_148042 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 34), '//', int_call_result_148040, int_148041)
        
        int_148043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 46), 'int')
        # Applying the binary operator '+' (line 963)
        result_add_148044 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 34), '+', result_floordiv_148042, int_148043)
        
        # Processing the call keyword arguments (line 963)
        # Getting the type of 'b' (line 963)
        b_148045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 54), 'b', False)
        keyword_148046 = b_148045
        kwargs_148047 = {'base': keyword_148046}
        # Getting the type of 'np' (line 963)
        np_148033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 16), 'np', False)
        # Obtaining the member 'logspace' of a type (line 963)
        logspace_148034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 16), np_148033, 'logspace')
        # Calling logspace(args, kwargs) (line 963)
        logspace_call_result_148048 = invoke(stypy.reporting.localization.Localization(__file__, 963, 16), logspace_148034, *[int_148035, int_148036, result_add_148044], **kwargs_148047)
        
        # Assigning a type to the variable 'c' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 12), 'c', logspace_call_result_148048)
        
        # Assigning a Call to a Attribute (line 964):
        
        # Assigning a Call to a Attribute (line 964):
        
        # Call to set(...): (line 964)
        # Processing the call arguments (line 964)
        
        # Call to round(...): (line 964)
        # Processing the call arguments (line 964)
        # Getting the type of 'c' (line 964)
        c_148052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 43), 'c', False)
        # Processing the call keyword arguments (line 964)
        kwargs_148053 = {}
        # Getting the type of 'np' (line 964)
        np_148050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 34), 'np', False)
        # Obtaining the member 'round' of a type (line 964)
        round_148051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 34), np_148050, 'round')
        # Calling round(args, kwargs) (line 964)
        round_call_result_148054 = invoke(stypy.reporting.localization.Localization(__file__, 964, 34), round_148051, *[c_148052], **kwargs_148053)
        
        # Processing the call keyword arguments (line 964)
        kwargs_148055 = {}
        # Getting the type of 'set' (line 964)
        set_148049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 30), 'set', False)
        # Calling set(args, kwargs) (line 964)
        set_call_result_148056 = invoke(stypy.reporting.localization.Localization(__file__, 964, 30), set_148049, *[round_call_result_148054], **kwargs_148055)
        
        # Getting the type of 'self' (line 964)
        self_148057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 12), 'self')
        # Setting the type of the member '_sublabels' of a type (line 964)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 12), self_148057, '_sublabels', set_call_result_148056)
        # SSA branch for the else part of an if statement (line 959)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 968):
        
        # Assigning a Call to a Attribute (line 968):
        
        # Call to set(...): (line 968)
        # Processing the call arguments (line 968)
        
        # Call to arange(...): (line 968)
        # Processing the call arguments (line 968)
        int_148061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 44), 'int')
        # Getting the type of 'b' (line 968)
        b_148062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 47), 'b', False)
        int_148063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 51), 'int')
        # Applying the binary operator '+' (line 968)
        result_add_148064 = python_operator(stypy.reporting.localization.Localization(__file__, 968, 47), '+', b_148062, int_148063)
        
        # Processing the call keyword arguments (line 968)
        kwargs_148065 = {}
        # Getting the type of 'np' (line 968)
        np_148059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 34), 'np', False)
        # Obtaining the member 'arange' of a type (line 968)
        arange_148060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 34), np_148059, 'arange')
        # Calling arange(args, kwargs) (line 968)
        arange_call_result_148066 = invoke(stypy.reporting.localization.Localization(__file__, 968, 34), arange_148060, *[int_148061, result_add_148064], **kwargs_148065)
        
        # Processing the call keyword arguments (line 968)
        kwargs_148067 = {}
        # Getting the type of 'set' (line 968)
        set_148058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 30), 'set', False)
        # Calling set(args, kwargs) (line 968)
        set_call_result_148068 = invoke(stypy.reporting.localization.Localization(__file__, 968, 30), set_148058, *[arange_call_result_148066], **kwargs_148067)
        
        # Getting the type of 'self' (line 968)
        self_148069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 12), 'self')
        # Setting the type of the member '_sublabels' of a type (line 968)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 12), self_148069, '_sublabels', set_call_result_148068)
        # SSA join for if statement (line 959)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 956)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_locs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_locs' in the type store
        # Getting the type of 'stypy_return_type' (line 910)
        stypy_return_type_148070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148070)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_locs'
        return stypy_return_type_148070


    @norecursion
    def _num_to_string(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_num_to_string'
        module_type_store = module_type_store.open_function_context('_num_to_string', 970, 4, False)
        # Assigning a type to the variable 'self' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogFormatter._num_to_string.__dict__.__setitem__('stypy_localization', localization)
        LogFormatter._num_to_string.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogFormatter._num_to_string.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogFormatter._num_to_string.__dict__.__setitem__('stypy_function_name', 'LogFormatter._num_to_string')
        LogFormatter._num_to_string.__dict__.__setitem__('stypy_param_names_list', ['x', 'vmin', 'vmax'])
        LogFormatter._num_to_string.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogFormatter._num_to_string.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogFormatter._num_to_string.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogFormatter._num_to_string.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogFormatter._num_to_string.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogFormatter._num_to_string.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatter._num_to_string', ['x', 'vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_num_to_string', localization, ['x', 'vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_num_to_string(...)' code ##################

        
        
        # Getting the type of 'x' (line 971)
        x_148071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 11), 'x')
        int_148072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, 15), 'int')
        # Applying the binary operator '>' (line 971)
        result_gt_148073 = python_operator(stypy.reporting.localization.Localization(__file__, 971, 11), '>', x_148071, int_148072)
        
        # Testing the type of an if condition (line 971)
        if_condition_148074 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 971, 8), result_gt_148073)
        # Assigning a type to the variable 'if_condition_148074' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'if_condition_148074', if_condition_148074)
        # SSA begins for if statement (line 971)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 972):
        
        # Assigning a BinOp to a Name (line 972):
        unicode_148075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 972, 16), 'unicode', u'%1.0e')
        # Getting the type of 'x' (line 972)
        x_148076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 26), 'x')
        # Applying the binary operator '%' (line 972)
        result_mod_148077 = python_operator(stypy.reporting.localization.Localization(__file__, 972, 16), '%', unicode_148075, x_148076)
        
        # Assigning a type to the variable 's' (line 972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 12), 's', result_mod_148077)
        # SSA branch for the else part of an if statement (line 971)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'x' (line 973)
        x_148078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 13), 'x')
        int_148079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 973, 17), 'int')
        # Applying the binary operator '<' (line 973)
        result_lt_148080 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 13), '<', x_148078, int_148079)
        
        # Testing the type of an if condition (line 973)
        if_condition_148081 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 973, 13), result_lt_148080)
        # Assigning a type to the variable 'if_condition_148081' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 13), 'if_condition_148081', if_condition_148081)
        # SSA begins for if statement (line 973)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 974):
        
        # Assigning a BinOp to a Name (line 974):
        unicode_148082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 974, 16), 'unicode', u'%1.0e')
        # Getting the type of 'x' (line 974)
        x_148083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 26), 'x')
        # Applying the binary operator '%' (line 974)
        result_mod_148084 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 16), '%', unicode_148082, x_148083)
        
        # Assigning a type to the variable 's' (line 974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 12), 's', result_mod_148084)
        # SSA branch for the else part of an if statement (line 973)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 976):
        
        # Assigning a Call to a Name (line 976):
        
        # Call to pprint_val(...): (line 976)
        # Processing the call arguments (line 976)
        # Getting the type of 'x' (line 976)
        x_148087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 32), 'x', False)
        # Getting the type of 'vmax' (line 976)
        vmax_148088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 35), 'vmax', False)
        # Getting the type of 'vmin' (line 976)
        vmin_148089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 42), 'vmin', False)
        # Applying the binary operator '-' (line 976)
        result_sub_148090 = python_operator(stypy.reporting.localization.Localization(__file__, 976, 35), '-', vmax_148088, vmin_148089)
        
        # Processing the call keyword arguments (line 976)
        kwargs_148091 = {}
        # Getting the type of 'self' (line 976)
        self_148085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 16), 'self', False)
        # Obtaining the member 'pprint_val' of a type (line 976)
        pprint_val_148086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 16), self_148085, 'pprint_val')
        # Calling pprint_val(args, kwargs) (line 976)
        pprint_val_call_result_148092 = invoke(stypy.reporting.localization.Localization(__file__, 976, 16), pprint_val_148086, *[x_148087, result_sub_148090], **kwargs_148091)
        
        # Assigning a type to the variable 's' (line 976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 's', pprint_val_call_result_148092)
        # SSA join for if statement (line 973)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 971)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 's' (line 977)
        s_148093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 15), 's')
        # Assigning a type to the variable 'stypy_return_type' (line 977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 8), 'stypy_return_type', s_148093)
        
        # ################# End of '_num_to_string(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_num_to_string' in the type store
        # Getting the type of 'stypy_return_type' (line 970)
        stypy_return_type_148094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148094)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_num_to_string'
        return stypy_return_type_148094


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 979)
        None_148095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 30), 'None')
        defaults = [None_148095]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 979, 4, False)
        # Assigning a type to the variable 'self' (line 980)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 980, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        LogFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'LogFormatter.__call__')
        LogFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        LogFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_148096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 982, (-1)), 'unicode', u'\n        Return the format for tick val `x`.\n        ')
        
        
        # Getting the type of 'x' (line 983)
        x_148097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 11), 'x')
        float_148098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 983, 16), 'float')
        # Applying the binary operator '==' (line 983)
        result_eq_148099 = python_operator(stypy.reporting.localization.Localization(__file__, 983, 11), '==', x_148097, float_148098)
        
        # Testing the type of an if condition (line 983)
        if_condition_148100 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 983, 8), result_eq_148099)
        # Assigning a type to the variable 'if_condition_148100' (line 983)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 983, 8), 'if_condition_148100', if_condition_148100)
        # SSA begins for if statement (line 983)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_148101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, 19), 'unicode', u'0')
        # Assigning a type to the variable 'stypy_return_type' (line 984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 12), 'stypy_return_type', unicode_148101)
        # SSA join for if statement (line 983)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 986):
        
        # Assigning a Call to a Name (line 986):
        
        # Call to sign(...): (line 986)
        # Processing the call arguments (line 986)
        # Getting the type of 'x' (line 986)
        x_148104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 23), 'x', False)
        # Processing the call keyword arguments (line 986)
        kwargs_148105 = {}
        # Getting the type of 'np' (line 986)
        np_148102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 15), 'np', False)
        # Obtaining the member 'sign' of a type (line 986)
        sign_148103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 15), np_148102, 'sign')
        # Calling sign(args, kwargs) (line 986)
        sign_call_result_148106 = invoke(stypy.reporting.localization.Localization(__file__, 986, 15), sign_148103, *[x_148104], **kwargs_148105)
        
        # Assigning a type to the variable 'sign' (line 986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'sign', sign_call_result_148106)
        
        # Assigning a Call to a Name (line 987):
        
        # Assigning a Call to a Name (line 987):
        
        # Call to abs(...): (line 987)
        # Processing the call arguments (line 987)
        # Getting the type of 'x' (line 987)
        x_148108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 16), 'x', False)
        # Processing the call keyword arguments (line 987)
        kwargs_148109 = {}
        # Getting the type of 'abs' (line 987)
        abs_148107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 12), 'abs', False)
        # Calling abs(args, kwargs) (line 987)
        abs_call_result_148110 = invoke(stypy.reporting.localization.Localization(__file__, 987, 12), abs_148107, *[x_148108], **kwargs_148109)
        
        # Assigning a type to the variable 'x' (line 987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 8), 'x', abs_call_result_148110)
        
        # Assigning a Attribute to a Name (line 988):
        
        # Assigning a Attribute to a Name (line 988):
        # Getting the type of 'self' (line 988)
        self_148111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 12), 'self')
        # Obtaining the member '_base' of a type (line 988)
        _base_148112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 988, 12), self_148111, '_base')
        # Assigning a type to the variable 'b' (line 988)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 8), 'b', _base_148112)
        
        # Assigning a BinOp to a Name (line 990):
        
        # Assigning a BinOp to a Name (line 990):
        
        # Call to log(...): (line 990)
        # Processing the call arguments (line 990)
        # Getting the type of 'x' (line 990)
        x_148115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 22), 'x', False)
        # Processing the call keyword arguments (line 990)
        kwargs_148116 = {}
        # Getting the type of 'math' (line 990)
        math_148113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 13), 'math', False)
        # Obtaining the member 'log' of a type (line 990)
        log_148114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 13), math_148113, 'log')
        # Calling log(args, kwargs) (line 990)
        log_call_result_148117 = invoke(stypy.reporting.localization.Localization(__file__, 990, 13), log_148114, *[x_148115], **kwargs_148116)
        
        
        # Call to log(...): (line 990)
        # Processing the call arguments (line 990)
        # Getting the type of 'b' (line 990)
        b_148120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 36), 'b', False)
        # Processing the call keyword arguments (line 990)
        kwargs_148121 = {}
        # Getting the type of 'math' (line 990)
        math_148118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 27), 'math', False)
        # Obtaining the member 'log' of a type (line 990)
        log_148119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 27), math_148118, 'log')
        # Calling log(args, kwargs) (line 990)
        log_call_result_148122 = invoke(stypy.reporting.localization.Localization(__file__, 990, 27), log_148119, *[b_148120], **kwargs_148121)
        
        # Applying the binary operator 'div' (line 990)
        result_div_148123 = python_operator(stypy.reporting.localization.Localization(__file__, 990, 13), 'div', log_call_result_148117, log_call_result_148122)
        
        # Assigning a type to the variable 'fx' (line 990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 8), 'fx', result_div_148123)
        
        # Assigning a Call to a Name (line 991):
        
        # Assigning a Call to a Name (line 991):
        
        # Call to is_close_to_int(...): (line 991)
        # Processing the call arguments (line 991)
        # Getting the type of 'fx' (line 991)
        fx_148125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 38), 'fx', False)
        # Processing the call keyword arguments (line 991)
        kwargs_148126 = {}
        # Getting the type of 'is_close_to_int' (line 991)
        is_close_to_int_148124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 22), 'is_close_to_int', False)
        # Calling is_close_to_int(args, kwargs) (line 991)
        is_close_to_int_call_result_148127 = invoke(stypy.reporting.localization.Localization(__file__, 991, 22), is_close_to_int_148124, *[fx_148125], **kwargs_148126)
        
        # Assigning a type to the variable 'is_x_decade' (line 991)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 991, 8), 'is_x_decade', is_close_to_int_call_result_148127)
        
        # Assigning a IfExp to a Name (line 992):
        
        # Assigning a IfExp to a Name (line 992):
        
        # Getting the type of 'is_x_decade' (line 992)
        is_x_decade_148128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 35), 'is_x_decade')
        # Testing the type of an if expression (line 992)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 992, 19), is_x_decade_148128)
        # SSA begins for if expression (line 992)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Call to round(...): (line 992)
        # Processing the call arguments (line 992)
        # Getting the type of 'fx' (line 992)
        fx_148131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 28), 'fx', False)
        # Processing the call keyword arguments (line 992)
        kwargs_148132 = {}
        # Getting the type of 'np' (line 992)
        np_148129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 19), 'np', False)
        # Obtaining the member 'round' of a type (line 992)
        round_148130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 19), np_148129, 'round')
        # Calling round(args, kwargs) (line 992)
        round_call_result_148133 = invoke(stypy.reporting.localization.Localization(__file__, 992, 19), round_148130, *[fx_148131], **kwargs_148132)
        
        # SSA branch for the else part of an if expression (line 992)
        module_type_store.open_ssa_branch('if expression else')
        
        # Call to floor(...): (line 992)
        # Processing the call arguments (line 992)
        # Getting the type of 'fx' (line 992)
        fx_148136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 61), 'fx', False)
        # Processing the call keyword arguments (line 992)
        kwargs_148137 = {}
        # Getting the type of 'np' (line 992)
        np_148134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 52), 'np', False)
        # Obtaining the member 'floor' of a type (line 992)
        floor_148135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 52), np_148134, 'floor')
        # Calling floor(args, kwargs) (line 992)
        floor_call_result_148138 = invoke(stypy.reporting.localization.Localization(__file__, 992, 52), floor_148135, *[fx_148136], **kwargs_148137)
        
        # SSA join for if expression (line 992)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_148139 = union_type.UnionType.add(round_call_result_148133, floor_call_result_148138)
        
        # Assigning a type to the variable 'exponent' (line 992)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 8), 'exponent', if_exp_148139)
        
        # Assigning a Call to a Name (line 993):
        
        # Assigning a Call to a Name (line 993):
        
        # Call to round(...): (line 993)
        # Processing the call arguments (line 993)
        # Getting the type of 'x' (line 993)
        x_148142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 25), 'x', False)
        # Getting the type of 'b' (line 993)
        b_148143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 29), 'b', False)
        # Getting the type of 'exponent' (line 993)
        exponent_148144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 34), 'exponent', False)
        # Applying the binary operator '**' (line 993)
        result_pow_148145 = python_operator(stypy.reporting.localization.Localization(__file__, 993, 29), '**', b_148143, exponent_148144)
        
        # Applying the binary operator 'div' (line 993)
        result_div_148146 = python_operator(stypy.reporting.localization.Localization(__file__, 993, 25), 'div', x_148142, result_pow_148145)
        
        # Processing the call keyword arguments (line 993)
        kwargs_148147 = {}
        # Getting the type of 'np' (line 993)
        np_148140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 16), 'np', False)
        # Obtaining the member 'round' of a type (line 993)
        round_148141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 16), np_148140, 'round')
        # Calling round(args, kwargs) (line 993)
        round_call_result_148148 = invoke(stypy.reporting.localization.Localization(__file__, 993, 16), round_148141, *[result_div_148146], **kwargs_148147)
        
        # Assigning a type to the variable 'coeff' (line 993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 8), 'coeff', round_call_result_148148)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 995)
        self_148149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 11), 'self')
        # Obtaining the member 'labelOnlyBase' of a type (line 995)
        labelOnlyBase_148150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 11), self_148149, 'labelOnlyBase')
        
        # Getting the type of 'is_x_decade' (line 995)
        is_x_decade_148151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 38), 'is_x_decade')
        # Applying the 'not' unary operator (line 995)
        result_not__148152 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 34), 'not', is_x_decade_148151)
        
        # Applying the binary operator 'and' (line 995)
        result_and_keyword_148153 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 11), 'and', labelOnlyBase_148150, result_not__148152)
        
        # Testing the type of an if condition (line 995)
        if_condition_148154 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 995, 8), result_and_keyword_148153)
        # Assigning a type to the variable 'if_condition_148154' (line 995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 8), 'if_condition_148154', if_condition_148154)
        # SSA begins for if statement (line 995)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_148155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, 19), 'unicode', u'')
        # Assigning a type to the variable 'stypy_return_type' (line 996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 12), 'stypy_return_type', unicode_148155)
        # SSA join for if statement (line 995)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 997)
        self_148156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 11), 'self')
        # Obtaining the member '_sublabels' of a type (line 997)
        _sublabels_148157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 11), self_148156, '_sublabels')
        # Getting the type of 'None' (line 997)
        None_148158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 34), 'None')
        # Applying the binary operator 'isnot' (line 997)
        result_is_not_148159 = python_operator(stypy.reporting.localization.Localization(__file__, 997, 11), 'isnot', _sublabels_148157, None_148158)
        
        
        # Getting the type of 'coeff' (line 997)
        coeff_148160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 43), 'coeff')
        # Getting the type of 'self' (line 997)
        self_148161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 56), 'self')
        # Obtaining the member '_sublabels' of a type (line 997)
        _sublabels_148162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 56), self_148161, '_sublabels')
        # Applying the binary operator 'notin' (line 997)
        result_contains_148163 = python_operator(stypy.reporting.localization.Localization(__file__, 997, 43), 'notin', coeff_148160, _sublabels_148162)
        
        # Applying the binary operator 'and' (line 997)
        result_and_keyword_148164 = python_operator(stypy.reporting.localization.Localization(__file__, 997, 11), 'and', result_is_not_148159, result_contains_148163)
        
        # Testing the type of an if condition (line 997)
        if_condition_148165 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 997, 8), result_and_keyword_148164)
        # Assigning a type to the variable 'if_condition_148165' (line 997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 8), 'if_condition_148165', if_condition_148165)
        # SSA begins for if statement (line 997)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_148166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 19), 'unicode', u'')
        # Assigning a type to the variable 'stypy_return_type' (line 998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 12), 'stypy_return_type', unicode_148166)
        # SSA join for if statement (line 997)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1000):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 1000)
        # Processing the call keyword arguments (line 1000)
        kwargs_148170 = {}
        # Getting the type of 'self' (line 1000)
        self_148167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 1000)
        axis_148168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 21), self_148167, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 1000)
        get_view_interval_148169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 21), axis_148168, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 1000)
        get_view_interval_call_result_148171 = invoke(stypy.reporting.localization.Localization(__file__, 1000, 21), get_view_interval_148169, *[], **kwargs_148170)
        
        # Assigning a type to the variable 'call_assignment_146271' (line 1000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 8), 'call_assignment_146271', get_view_interval_call_result_148171)
        
        # Assigning a Call to a Name (line 1000):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_148174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1000, 8), 'int')
        # Processing the call keyword arguments
        kwargs_148175 = {}
        # Getting the type of 'call_assignment_146271' (line 1000)
        call_assignment_146271_148172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 8), 'call_assignment_146271', False)
        # Obtaining the member '__getitem__' of a type (line 1000)
        getitem___148173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 8), call_assignment_146271_148172, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_148176 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___148173, *[int_148174], **kwargs_148175)
        
        # Assigning a type to the variable 'call_assignment_146272' (line 1000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 8), 'call_assignment_146272', getitem___call_result_148176)
        
        # Assigning a Name to a Name (line 1000):
        # Getting the type of 'call_assignment_146272' (line 1000)
        call_assignment_146272_148177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 8), 'call_assignment_146272')
        # Assigning a type to the variable 'vmin' (line 1000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 8), 'vmin', call_assignment_146272_148177)
        
        # Assigning a Call to a Name (line 1000):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_148180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1000, 8), 'int')
        # Processing the call keyword arguments
        kwargs_148181 = {}
        # Getting the type of 'call_assignment_146271' (line 1000)
        call_assignment_146271_148178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 8), 'call_assignment_146271', False)
        # Obtaining the member '__getitem__' of a type (line 1000)
        getitem___148179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 8), call_assignment_146271_148178, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_148182 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___148179, *[int_148180], **kwargs_148181)
        
        # Assigning a type to the variable 'call_assignment_146273' (line 1000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 8), 'call_assignment_146273', getitem___call_result_148182)
        
        # Assigning a Name to a Name (line 1000):
        # Getting the type of 'call_assignment_146273' (line 1000)
        call_assignment_146273_148183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 8), 'call_assignment_146273')
        # Assigning a type to the variable 'vmax' (line 1000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 14), 'vmax', call_assignment_146273_148183)
        
        # Assigning a Call to a Tuple (line 1001):
        
        # Assigning a Call to a Name:
        
        # Call to nonsingular(...): (line 1001)
        # Processing the call arguments (line 1001)
        # Getting the type of 'vmin' (line 1001)
        vmin_148186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 45), 'vmin', False)
        # Getting the type of 'vmax' (line 1001)
        vmax_148187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 51), 'vmax', False)
        # Processing the call keyword arguments (line 1001)
        float_148188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1001, 66), 'float')
        keyword_148189 = float_148188
        kwargs_148190 = {'expander': keyword_148189}
        # Getting the type of 'mtransforms' (line 1001)
        mtransforms_148184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 21), 'mtransforms', False)
        # Obtaining the member 'nonsingular' of a type (line 1001)
        nonsingular_148185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 21), mtransforms_148184, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 1001)
        nonsingular_call_result_148191 = invoke(stypy.reporting.localization.Localization(__file__, 1001, 21), nonsingular_148185, *[vmin_148186, vmax_148187], **kwargs_148190)
        
        # Assigning a type to the variable 'call_assignment_146274' (line 1001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 8), 'call_assignment_146274', nonsingular_call_result_148191)
        
        # Assigning a Call to a Name (line 1001):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_148194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1001, 8), 'int')
        # Processing the call keyword arguments
        kwargs_148195 = {}
        # Getting the type of 'call_assignment_146274' (line 1001)
        call_assignment_146274_148192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 8), 'call_assignment_146274', False)
        # Obtaining the member '__getitem__' of a type (line 1001)
        getitem___148193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 8), call_assignment_146274_148192, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_148196 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___148193, *[int_148194], **kwargs_148195)
        
        # Assigning a type to the variable 'call_assignment_146275' (line 1001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 8), 'call_assignment_146275', getitem___call_result_148196)
        
        # Assigning a Name to a Name (line 1001):
        # Getting the type of 'call_assignment_146275' (line 1001)
        call_assignment_146275_148197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 8), 'call_assignment_146275')
        # Assigning a type to the variable 'vmin' (line 1001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 8), 'vmin', call_assignment_146275_148197)
        
        # Assigning a Call to a Name (line 1001):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_148200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1001, 8), 'int')
        # Processing the call keyword arguments
        kwargs_148201 = {}
        # Getting the type of 'call_assignment_146274' (line 1001)
        call_assignment_146274_148198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 8), 'call_assignment_146274', False)
        # Obtaining the member '__getitem__' of a type (line 1001)
        getitem___148199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 8), call_assignment_146274_148198, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_148202 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___148199, *[int_148200], **kwargs_148201)
        
        # Assigning a type to the variable 'call_assignment_146276' (line 1001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 8), 'call_assignment_146276', getitem___call_result_148202)
        
        # Assigning a Name to a Name (line 1001):
        # Getting the type of 'call_assignment_146276' (line 1001)
        call_assignment_146276_148203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 8), 'call_assignment_146276')
        # Assigning a type to the variable 'vmax' (line 1001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 14), 'vmax', call_assignment_146276_148203)
        
        # Assigning a Call to a Name (line 1002):
        
        # Assigning a Call to a Name (line 1002):
        
        # Call to _num_to_string(...): (line 1002)
        # Processing the call arguments (line 1002)
        # Getting the type of 'x' (line 1002)
        x_148206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 32), 'x', False)
        # Getting the type of 'vmin' (line 1002)
        vmin_148207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 35), 'vmin', False)
        # Getting the type of 'vmax' (line 1002)
        vmax_148208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 41), 'vmax', False)
        # Processing the call keyword arguments (line 1002)
        kwargs_148209 = {}
        # Getting the type of 'self' (line 1002)
        self_148204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 12), 'self', False)
        # Obtaining the member '_num_to_string' of a type (line 1002)
        _num_to_string_148205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 12), self_148204, '_num_to_string')
        # Calling _num_to_string(args, kwargs) (line 1002)
        _num_to_string_call_result_148210 = invoke(stypy.reporting.localization.Localization(__file__, 1002, 12), _num_to_string_148205, *[x_148206, vmin_148207, vmax_148208], **kwargs_148209)
        
        # Assigning a type to the variable 's' (line 1002)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1002, 8), 's', _num_to_string_call_result_148210)
        
        # Call to fix_minus(...): (line 1003)
        # Processing the call arguments (line 1003)
        # Getting the type of 's' (line 1003)
        s_148213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 30), 's', False)
        # Processing the call keyword arguments (line 1003)
        kwargs_148214 = {}
        # Getting the type of 'self' (line 1003)
        self_148211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 15), 'self', False)
        # Obtaining the member 'fix_minus' of a type (line 1003)
        fix_minus_148212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 15), self_148211, 'fix_minus')
        # Calling fix_minus(args, kwargs) (line 1003)
        fix_minus_call_result_148215 = invoke(stypy.reporting.localization.Localization(__file__, 1003, 15), fix_minus_148212, *[s_148213], **kwargs_148214)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1003)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1003, 8), 'stypy_return_type', fix_minus_call_result_148215)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 979)
        stypy_return_type_148216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148216)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_148216


    @norecursion
    def format_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'format_data'
        module_type_store = module_type_store.open_function_context('format_data', 1005, 4, False)
        # Assigning a type to the variable 'self' (line 1006)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1006, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogFormatter.format_data.__dict__.__setitem__('stypy_localization', localization)
        LogFormatter.format_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogFormatter.format_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogFormatter.format_data.__dict__.__setitem__('stypy_function_name', 'LogFormatter.format_data')
        LogFormatter.format_data.__dict__.__setitem__('stypy_param_names_list', ['value'])
        LogFormatter.format_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogFormatter.format_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogFormatter.format_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogFormatter.format_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogFormatter.format_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogFormatter.format_data.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatter.format_data', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'format_data', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'format_data(...)' code ##################

        
        # Assigning a Attribute to a Name (line 1006):
        
        # Assigning a Attribute to a Name (line 1006):
        # Getting the type of 'self' (line 1006)
        self_148217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 12), 'self')
        # Obtaining the member 'labelOnlyBase' of a type (line 1006)
        labelOnlyBase_148218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1006, 12), self_148217, 'labelOnlyBase')
        # Assigning a type to the variable 'b' (line 1006)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1006, 8), 'b', labelOnlyBase_148218)
        
        # Assigning a Name to a Attribute (line 1007):
        
        # Assigning a Name to a Attribute (line 1007):
        # Getting the type of 'False' (line 1007)
        False_148219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 29), 'False')
        # Getting the type of 'self' (line 1007)
        self_148220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 8), 'self')
        # Setting the type of the member 'labelOnlyBase' of a type (line 1007)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1007, 8), self_148220, 'labelOnlyBase', False_148219)
        
        # Assigning a Call to a Name (line 1008):
        
        # Assigning a Call to a Name (line 1008):
        
        # Call to strip_math(...): (line 1008)
        # Processing the call arguments (line 1008)
        
        # Call to __call__(...): (line 1008)
        # Processing the call arguments (line 1008)
        # Getting the type of 'value' (line 1008)
        value_148225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 47), 'value', False)
        # Processing the call keyword arguments (line 1008)
        kwargs_148226 = {}
        # Getting the type of 'self' (line 1008)
        self_148223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 33), 'self', False)
        # Obtaining the member '__call__' of a type (line 1008)
        call___148224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1008, 33), self_148223, '__call__')
        # Calling __call__(args, kwargs) (line 1008)
        call___call_result_148227 = invoke(stypy.reporting.localization.Localization(__file__, 1008, 33), call___148224, *[value_148225], **kwargs_148226)
        
        # Processing the call keyword arguments (line 1008)
        kwargs_148228 = {}
        # Getting the type of 'cbook' (line 1008)
        cbook_148221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 16), 'cbook', False)
        # Obtaining the member 'strip_math' of a type (line 1008)
        strip_math_148222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1008, 16), cbook_148221, 'strip_math')
        # Calling strip_math(args, kwargs) (line 1008)
        strip_math_call_result_148229 = invoke(stypy.reporting.localization.Localization(__file__, 1008, 16), strip_math_148222, *[call___call_result_148227], **kwargs_148228)
        
        # Assigning a type to the variable 'value' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 8), 'value', strip_math_call_result_148229)
        
        # Assigning a Name to a Attribute (line 1009):
        
        # Assigning a Name to a Attribute (line 1009):
        # Getting the type of 'b' (line 1009)
        b_148230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 29), 'b')
        # Getting the type of 'self' (line 1009)
        self_148231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 8), 'self')
        # Setting the type of the member 'labelOnlyBase' of a type (line 1009)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 8), self_148231, 'labelOnlyBase', b_148230)
        # Getting the type of 'value' (line 1010)
        value_148232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 15), 'value')
        # Assigning a type to the variable 'stypy_return_type' (line 1010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 8), 'stypy_return_type', value_148232)
        
        # ################# End of 'format_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'format_data' in the type store
        # Getting the type of 'stypy_return_type' (line 1005)
        stypy_return_type_148233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148233)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'format_data'
        return stypy_return_type_148233


    @norecursion
    def format_data_short(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'format_data_short'
        module_type_store = module_type_store.open_function_context('format_data_short', 1012, 4, False)
        # Assigning a type to the variable 'self' (line 1013)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1013, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogFormatter.format_data_short.__dict__.__setitem__('stypy_localization', localization)
        LogFormatter.format_data_short.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogFormatter.format_data_short.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogFormatter.format_data_short.__dict__.__setitem__('stypy_function_name', 'LogFormatter.format_data_short')
        LogFormatter.format_data_short.__dict__.__setitem__('stypy_param_names_list', ['value'])
        LogFormatter.format_data_short.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogFormatter.format_data_short.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogFormatter.format_data_short.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogFormatter.format_data_short.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogFormatter.format_data_short.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogFormatter.format_data_short.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatter.format_data_short', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'format_data_short', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'format_data_short(...)' code ##################

        unicode_148234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1015, (-1)), 'unicode', u'\n        Return a short formatted string representation of a number.\n        ')
        unicode_148235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1016, 15), 'unicode', u'%-12g')
        # Getting the type of 'value' (line 1016)
        value_148236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 25), 'value')
        # Applying the binary operator '%' (line 1016)
        result_mod_148237 = python_operator(stypy.reporting.localization.Localization(__file__, 1016, 15), '%', unicode_148235, value_148236)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1016)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 8), 'stypy_return_type', result_mod_148237)
        
        # ################# End of 'format_data_short(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'format_data_short' in the type store
        # Getting the type of 'stypy_return_type' (line 1012)
        stypy_return_type_148238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148238)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'format_data_short'
        return stypy_return_type_148238


    @norecursion
    def pprint_val(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pprint_val'
        module_type_store = module_type_store.open_function_context('pprint_val', 1018, 4, False)
        # Assigning a type to the variable 'self' (line 1019)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1019, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogFormatter.pprint_val.__dict__.__setitem__('stypy_localization', localization)
        LogFormatter.pprint_val.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogFormatter.pprint_val.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogFormatter.pprint_val.__dict__.__setitem__('stypy_function_name', 'LogFormatter.pprint_val')
        LogFormatter.pprint_val.__dict__.__setitem__('stypy_param_names_list', ['x', 'd'])
        LogFormatter.pprint_val.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogFormatter.pprint_val.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogFormatter.pprint_val.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogFormatter.pprint_val.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogFormatter.pprint_val.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogFormatter.pprint_val.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatter.pprint_val', ['x', 'd'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pprint_val', localization, ['x', 'd'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pprint_val(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        
        # Call to abs(...): (line 1021)
        # Processing the call arguments (line 1021)
        # Getting the type of 'x' (line 1021)
        x_148240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 15), 'x', False)
        # Processing the call keyword arguments (line 1021)
        kwargs_148241 = {}
        # Getting the type of 'abs' (line 1021)
        abs_148239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 11), 'abs', False)
        # Calling abs(args, kwargs) (line 1021)
        abs_call_result_148242 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 11), abs_148239, *[x_148240], **kwargs_148241)
        
        float_148243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 20), 'float')
        # Applying the binary operator '<' (line 1021)
        result_lt_148244 = python_operator(stypy.reporting.localization.Localization(__file__, 1021, 11), '<', abs_call_result_148242, float_148243)
        
        
        # Getting the type of 'x' (line 1021)
        x_148245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 28), 'x')
        
        # Call to int(...): (line 1021)
        # Processing the call arguments (line 1021)
        # Getting the type of 'x' (line 1021)
        x_148247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 37), 'x', False)
        # Processing the call keyword arguments (line 1021)
        kwargs_148248 = {}
        # Getting the type of 'int' (line 1021)
        int_148246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 33), 'int', False)
        # Calling int(args, kwargs) (line 1021)
        int_call_result_148249 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 33), int_148246, *[x_148247], **kwargs_148248)
        
        # Applying the binary operator '==' (line 1021)
        result_eq_148250 = python_operator(stypy.reporting.localization.Localization(__file__, 1021, 28), '==', x_148245, int_call_result_148249)
        
        # Applying the binary operator 'and' (line 1021)
        result_and_keyword_148251 = python_operator(stypy.reporting.localization.Localization(__file__, 1021, 11), 'and', result_lt_148244, result_eq_148250)
        
        # Testing the type of an if condition (line 1021)
        if_condition_148252 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1021, 8), result_and_keyword_148251)
        # Assigning a type to the variable 'if_condition_148252' (line 1021)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1021, 8), 'if_condition_148252', if_condition_148252)
        # SSA begins for if statement (line 1021)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_148253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1022, 19), 'unicode', u'%d')
        # Getting the type of 'x' (line 1022)
        x_148254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 26), 'x')
        # Applying the binary operator '%' (line 1022)
        result_mod_148255 = python_operator(stypy.reporting.localization.Localization(__file__, 1022, 19), '%', unicode_148253, x_148254)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1022, 12), 'stypy_return_type', result_mod_148255)
        # SSA join for if statement (line 1021)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'd' (line 1024)
        d_148256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 11), 'd')
        float_148257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1024, 15), 'float')
        # Applying the binary operator '<' (line 1024)
        result_lt_148258 = python_operator(stypy.reporting.localization.Localization(__file__, 1024, 11), '<', d_148256, float_148257)
        
        # Testing the type of an if condition (line 1024)
        if_condition_148259 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1024, 8), result_lt_148258)
        # Assigning a type to the variable 'if_condition_148259' (line 1024)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1024, 8), 'if_condition_148259', if_condition_148259)
        # SSA begins for if statement (line 1024)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1025):
        
        # Assigning a Str to a Name (line 1025):
        unicode_148260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1025, 18), 'unicode', u'%1.3e')
        # Assigning a type to the variable 'fmt' (line 1025)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1025, 12), 'fmt', unicode_148260)
        # SSA branch for the else part of an if statement (line 1024)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'd' (line 1026)
        d_148261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 13), 'd')
        float_148262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1026, 17), 'float')
        # Applying the binary operator '<' (line 1026)
        result_lt_148263 = python_operator(stypy.reporting.localization.Localization(__file__, 1026, 13), '<', d_148261, float_148262)
        
        # Testing the type of an if condition (line 1026)
        if_condition_148264 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1026, 13), result_lt_148263)
        # Assigning a type to the variable 'if_condition_148264' (line 1026)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1026, 13), 'if_condition_148264', if_condition_148264)
        # SSA begins for if statement (line 1026)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1027):
        
        # Assigning a Str to a Name (line 1027):
        unicode_148265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, 18), 'unicode', u'%1.3f')
        # Assigning a type to the variable 'fmt' (line 1027)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1027, 12), 'fmt', unicode_148265)
        # SSA branch for the else part of an if statement (line 1026)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'd' (line 1028)
        d_148266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 13), 'd')
        float_148267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 17), 'float')
        # Applying the binary operator '>' (line 1028)
        result_gt_148268 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 13), '>', d_148266, float_148267)
        
        # Testing the type of an if condition (line 1028)
        if_condition_148269 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1028, 13), result_gt_148268)
        # Assigning a type to the variable 'if_condition_148269' (line 1028)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 13), 'if_condition_148269', if_condition_148269)
        # SSA begins for if statement (line 1028)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1029):
        
        # Assigning a Str to a Name (line 1029):
        unicode_148270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 18), 'unicode', u'%1.1e')
        # Assigning a type to the variable 'fmt' (line 1029)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 12), 'fmt', unicode_148270)
        # SSA branch for the else part of an if statement (line 1028)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'd' (line 1030)
        d_148271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 13), 'd')
        int_148272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 17), 'int')
        # Applying the binary operator '>' (line 1030)
        result_gt_148273 = python_operator(stypy.reporting.localization.Localization(__file__, 1030, 13), '>', d_148271, int_148272)
        
        # Testing the type of an if condition (line 1030)
        if_condition_148274 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1030, 13), result_gt_148273)
        # Assigning a type to the variable 'if_condition_148274' (line 1030)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1030, 13), 'if_condition_148274', if_condition_148274)
        # SSA begins for if statement (line 1030)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1031):
        
        # Assigning a Str to a Name (line 1031):
        unicode_148275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1031, 18), 'unicode', u'%1.1f')
        # Assigning a type to the variable 'fmt' (line 1031)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1031, 12), 'fmt', unicode_148275)
        # SSA branch for the else part of an if statement (line 1030)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'd' (line 1032)
        d_148276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 13), 'd')
        int_148277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1032, 17), 'int')
        # Applying the binary operator '>' (line 1032)
        result_gt_148278 = python_operator(stypy.reporting.localization.Localization(__file__, 1032, 13), '>', d_148276, int_148277)
        
        # Testing the type of an if condition (line 1032)
        if_condition_148279 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1032, 13), result_gt_148278)
        # Assigning a type to the variable 'if_condition_148279' (line 1032)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1032, 13), 'if_condition_148279', if_condition_148279)
        # SSA begins for if statement (line 1032)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1033):
        
        # Assigning a Str to a Name (line 1033):
        unicode_148280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1033, 18), 'unicode', u'%1.2f')
        # Assigning a type to the variable 'fmt' (line 1033)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1033, 12), 'fmt', unicode_148280)
        # SSA branch for the else part of an if statement (line 1032)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 1035):
        
        # Assigning a Str to a Name (line 1035):
        unicode_148281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1035, 18), 'unicode', u'%1.3f')
        # Assigning a type to the variable 'fmt' (line 1035)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 12), 'fmt', unicode_148281)
        # SSA join for if statement (line 1032)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1030)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1028)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1026)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1024)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1036):
        
        # Assigning a BinOp to a Name (line 1036):
        # Getting the type of 'fmt' (line 1036)
        fmt_148282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 12), 'fmt')
        # Getting the type of 'x' (line 1036)
        x_148283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 18), 'x')
        # Applying the binary operator '%' (line 1036)
        result_mod_148284 = python_operator(stypy.reporting.localization.Localization(__file__, 1036, 12), '%', fmt_148282, x_148283)
        
        # Assigning a type to the variable 's' (line 1036)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1036, 8), 's', result_mod_148284)
        
        # Assigning a Call to a Name (line 1038):
        
        # Assigning a Call to a Name (line 1038):
        
        # Call to split(...): (line 1038)
        # Processing the call arguments (line 1038)
        unicode_148287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1038, 22), 'unicode', u'e')
        # Processing the call keyword arguments (line 1038)
        kwargs_148288 = {}
        # Getting the type of 's' (line 1038)
        s_148285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 14), 's', False)
        # Obtaining the member 'split' of a type (line 1038)
        split_148286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 14), s_148285, 'split')
        # Calling split(args, kwargs) (line 1038)
        split_call_result_148289 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 14), split_148286, *[unicode_148287], **kwargs_148288)
        
        # Assigning a type to the variable 'tup' (line 1038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'tup', split_call_result_148289)
        
        
        
        # Call to len(...): (line 1039)
        # Processing the call arguments (line 1039)
        # Getting the type of 'tup' (line 1039)
        tup_148291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 15), 'tup', False)
        # Processing the call keyword arguments (line 1039)
        kwargs_148292 = {}
        # Getting the type of 'len' (line 1039)
        len_148290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 11), 'len', False)
        # Calling len(args, kwargs) (line 1039)
        len_call_result_148293 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 11), len_148290, *[tup_148291], **kwargs_148292)
        
        int_148294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 23), 'int')
        # Applying the binary operator '==' (line 1039)
        result_eq_148295 = python_operator(stypy.reporting.localization.Localization(__file__, 1039, 11), '==', len_call_result_148293, int_148294)
        
        # Testing the type of an if condition (line 1039)
        if_condition_148296 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1039, 8), result_eq_148295)
        # Assigning a type to the variable 'if_condition_148296' (line 1039)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1039, 8), 'if_condition_148296', if_condition_148296)
        # SSA begins for if statement (line 1039)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1040):
        
        # Assigning a Call to a Name (line 1040):
        
        # Call to rstrip(...): (line 1040)
        # Processing the call arguments (line 1040)
        unicode_148306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 49), 'unicode', u'.')
        # Processing the call keyword arguments (line 1040)
        kwargs_148307 = {}
        
        # Call to rstrip(...): (line 1040)
        # Processing the call arguments (line 1040)
        unicode_148302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 37), 'unicode', u'0')
        # Processing the call keyword arguments (line 1040)
        kwargs_148303 = {}
        
        # Obtaining the type of the subscript
        int_148297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 27), 'int')
        # Getting the type of 'tup' (line 1040)
        tup_148298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 23), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 1040)
        getitem___148299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 23), tup_148298, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1040)
        subscript_call_result_148300 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 23), getitem___148299, int_148297)
        
        # Obtaining the member 'rstrip' of a type (line 1040)
        rstrip_148301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 23), subscript_call_result_148300, 'rstrip')
        # Calling rstrip(args, kwargs) (line 1040)
        rstrip_call_result_148304 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 23), rstrip_148301, *[unicode_148302], **kwargs_148303)
        
        # Obtaining the member 'rstrip' of a type (line 1040)
        rstrip_148305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 23), rstrip_call_result_148304, 'rstrip')
        # Calling rstrip(args, kwargs) (line 1040)
        rstrip_call_result_148308 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 23), rstrip_148305, *[unicode_148306], **kwargs_148307)
        
        # Assigning a type to the variable 'mantissa' (line 1040)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1040, 12), 'mantissa', rstrip_call_result_148308)
        
        # Assigning a Call to a Name (line 1041):
        
        # Assigning a Call to a Name (line 1041):
        
        # Call to int(...): (line 1041)
        # Processing the call arguments (line 1041)
        
        # Obtaining the type of the subscript
        int_148310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 31), 'int')
        # Getting the type of 'tup' (line 1041)
        tup_148311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 27), 'tup', False)
        # Obtaining the member '__getitem__' of a type (line 1041)
        getitem___148312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 27), tup_148311, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1041)
        subscript_call_result_148313 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 27), getitem___148312, int_148310)
        
        # Processing the call keyword arguments (line 1041)
        kwargs_148314 = {}
        # Getting the type of 'int' (line 1041)
        int_148309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 23), 'int', False)
        # Calling int(args, kwargs) (line 1041)
        int_call_result_148315 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 23), int_148309, *[subscript_call_result_148313], **kwargs_148314)
        
        # Assigning a type to the variable 'exponent' (line 1041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 12), 'exponent', int_call_result_148315)
        
        # Getting the type of 'exponent' (line 1042)
        exponent_148316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 15), 'exponent')
        # Testing the type of an if condition (line 1042)
        if_condition_148317 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1042, 12), exponent_148316)
        # Assigning a type to the variable 'if_condition_148317' (line 1042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 12), 'if_condition_148317', if_condition_148317)
        # SSA begins for if statement (line 1042)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1043):
        
        # Assigning a BinOp to a Name (line 1043):
        unicode_148318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 20), 'unicode', u'%se%d')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1043)
        tuple_148319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1043)
        # Adding element type (line 1043)
        # Getting the type of 'mantissa' (line 1043)
        mantissa_148320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 31), 'mantissa')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 31), tuple_148319, mantissa_148320)
        # Adding element type (line 1043)
        # Getting the type of 'exponent' (line 1043)
        exponent_148321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 41), 'exponent')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 31), tuple_148319, exponent_148321)
        
        # Applying the binary operator '%' (line 1043)
        result_mod_148322 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 20), '%', unicode_148318, tuple_148319)
        
        # Assigning a type to the variable 's' (line 1043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 16), 's', result_mod_148322)
        # SSA branch for the else part of an if statement (line 1042)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1045):
        
        # Assigning a Name to a Name (line 1045):
        # Getting the type of 'mantissa' (line 1045)
        mantissa_148323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 20), 'mantissa')
        # Assigning a type to the variable 's' (line 1045)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1045, 16), 's', mantissa_148323)
        # SSA join for if statement (line 1042)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1039)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1047):
        
        # Assigning a Call to a Name (line 1047):
        
        # Call to rstrip(...): (line 1047)
        # Processing the call arguments (line 1047)
        unicode_148330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 37), 'unicode', u'.')
        # Processing the call keyword arguments (line 1047)
        kwargs_148331 = {}
        
        # Call to rstrip(...): (line 1047)
        # Processing the call arguments (line 1047)
        unicode_148326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 25), 'unicode', u'0')
        # Processing the call keyword arguments (line 1047)
        kwargs_148327 = {}
        # Getting the type of 's' (line 1047)
        s_148324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 16), 's', False)
        # Obtaining the member 'rstrip' of a type (line 1047)
        rstrip_148325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 16), s_148324, 'rstrip')
        # Calling rstrip(args, kwargs) (line 1047)
        rstrip_call_result_148328 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 16), rstrip_148325, *[unicode_148326], **kwargs_148327)
        
        # Obtaining the member 'rstrip' of a type (line 1047)
        rstrip_148329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 16), rstrip_call_result_148328, 'rstrip')
        # Calling rstrip(args, kwargs) (line 1047)
        rstrip_call_result_148332 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 16), rstrip_148329, *[unicode_148330], **kwargs_148331)
        
        # Assigning a type to the variable 's' (line 1047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 's', rstrip_call_result_148332)
        # SSA join for if statement (line 1039)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 's' (line 1048)
        s_148333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 15), 's')
        # Assigning a type to the variable 'stypy_return_type' (line 1048)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 8), 'stypy_return_type', s_148333)
        
        # ################# End of 'pprint_val(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pprint_val' in the type store
        # Getting the type of 'stypy_return_type' (line 1018)
        stypy_return_type_148334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148334)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pprint_val'
        return stypy_return_type_148334


# Assigning a type to the variable 'LogFormatter' (line 815)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 0), 'LogFormatter', LogFormatter)
# Declaration of the 'LogFormatterExponent' class
# Getting the type of 'LogFormatter' (line 1051)
LogFormatter_148335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 27), 'LogFormatter')

class LogFormatterExponent(LogFormatter_148335, ):
    unicode_148336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1054, (-1)), 'unicode', u'\n    Format values for log axis using ``exponent = log_base(value)``.\n    ')

    @norecursion
    def _num_to_string(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_num_to_string'
        module_type_store = module_type_store.open_function_context('_num_to_string', 1055, 4, False)
        # Assigning a type to the variable 'self' (line 1056)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1056, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogFormatterExponent._num_to_string.__dict__.__setitem__('stypy_localization', localization)
        LogFormatterExponent._num_to_string.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogFormatterExponent._num_to_string.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogFormatterExponent._num_to_string.__dict__.__setitem__('stypy_function_name', 'LogFormatterExponent._num_to_string')
        LogFormatterExponent._num_to_string.__dict__.__setitem__('stypy_param_names_list', ['x', 'vmin', 'vmax'])
        LogFormatterExponent._num_to_string.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogFormatterExponent._num_to_string.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogFormatterExponent._num_to_string.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogFormatterExponent._num_to_string.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogFormatterExponent._num_to_string.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogFormatterExponent._num_to_string.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatterExponent._num_to_string', ['x', 'vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_num_to_string', localization, ['x', 'vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_num_to_string(...)' code ##################

        
        # Assigning a BinOp to a Name (line 1056):
        
        # Assigning a BinOp to a Name (line 1056):
        
        # Call to log(...): (line 1056)
        # Processing the call arguments (line 1056)
        # Getting the type of 'x' (line 1056)
        x_148339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 22), 'x', False)
        # Processing the call keyword arguments (line 1056)
        kwargs_148340 = {}
        # Getting the type of 'math' (line 1056)
        math_148337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 13), 'math', False)
        # Obtaining the member 'log' of a type (line 1056)
        log_148338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 13), math_148337, 'log')
        # Calling log(args, kwargs) (line 1056)
        log_call_result_148341 = invoke(stypy.reporting.localization.Localization(__file__, 1056, 13), log_148338, *[x_148339], **kwargs_148340)
        
        
        # Call to log(...): (line 1056)
        # Processing the call arguments (line 1056)
        # Getting the type of 'self' (line 1056)
        self_148344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 36), 'self', False)
        # Obtaining the member '_base' of a type (line 1056)
        _base_148345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 36), self_148344, '_base')
        # Processing the call keyword arguments (line 1056)
        kwargs_148346 = {}
        # Getting the type of 'math' (line 1056)
        math_148342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 27), 'math', False)
        # Obtaining the member 'log' of a type (line 1056)
        log_148343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 27), math_148342, 'log')
        # Calling log(args, kwargs) (line 1056)
        log_call_result_148347 = invoke(stypy.reporting.localization.Localization(__file__, 1056, 27), log_148343, *[_base_148345], **kwargs_148346)
        
        # Applying the binary operator 'div' (line 1056)
        result_div_148348 = python_operator(stypy.reporting.localization.Localization(__file__, 1056, 13), 'div', log_call_result_148341, log_call_result_148347)
        
        # Assigning a type to the variable 'fx' (line 1056)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1056, 8), 'fx', result_div_148348)
        
        
        
        # Call to abs(...): (line 1057)
        # Processing the call arguments (line 1057)
        # Getting the type of 'fx' (line 1057)
        fx_148350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 15), 'fx', False)
        # Processing the call keyword arguments (line 1057)
        kwargs_148351 = {}
        # Getting the type of 'abs' (line 1057)
        abs_148349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 11), 'abs', False)
        # Calling abs(args, kwargs) (line 1057)
        abs_call_result_148352 = invoke(stypy.reporting.localization.Localization(__file__, 1057, 11), abs_148349, *[fx_148350], **kwargs_148351)
        
        int_148353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1057, 21), 'int')
        # Applying the binary operator '>' (line 1057)
        result_gt_148354 = python_operator(stypy.reporting.localization.Localization(__file__, 1057, 11), '>', abs_call_result_148352, int_148353)
        
        # Testing the type of an if condition (line 1057)
        if_condition_148355 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1057, 8), result_gt_148354)
        # Assigning a type to the variable 'if_condition_148355' (line 1057)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1057, 8), 'if_condition_148355', if_condition_148355)
        # SSA begins for if statement (line 1057)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1058):
        
        # Assigning a BinOp to a Name (line 1058):
        unicode_148356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1058, 16), 'unicode', u'%1.0g')
        # Getting the type of 'fx' (line 1058)
        fx_148357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 26), 'fx')
        # Applying the binary operator '%' (line 1058)
        result_mod_148358 = python_operator(stypy.reporting.localization.Localization(__file__, 1058, 16), '%', unicode_148356, fx_148357)
        
        # Assigning a type to the variable 's' (line 1058)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1058, 12), 's', result_mod_148358)
        # SSA branch for the else part of an if statement (line 1057)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to abs(...): (line 1059)
        # Processing the call arguments (line 1059)
        # Getting the type of 'fx' (line 1059)
        fx_148360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 17), 'fx', False)
        # Processing the call keyword arguments (line 1059)
        kwargs_148361 = {}
        # Getting the type of 'abs' (line 1059)
        abs_148359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 13), 'abs', False)
        # Calling abs(args, kwargs) (line 1059)
        abs_call_result_148362 = invoke(stypy.reporting.localization.Localization(__file__, 1059, 13), abs_148359, *[fx_148360], **kwargs_148361)
        
        int_148363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1059, 23), 'int')
        # Applying the binary operator '<' (line 1059)
        result_lt_148364 = python_operator(stypy.reporting.localization.Localization(__file__, 1059, 13), '<', abs_call_result_148362, int_148363)
        
        # Testing the type of an if condition (line 1059)
        if_condition_148365 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1059, 13), result_lt_148364)
        # Assigning a type to the variable 'if_condition_148365' (line 1059)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1059, 13), 'if_condition_148365', if_condition_148365)
        # SSA begins for if statement (line 1059)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1060):
        
        # Assigning a BinOp to a Name (line 1060):
        unicode_148366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1060, 16), 'unicode', u'%1.0g')
        # Getting the type of 'fx' (line 1060)
        fx_148367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 26), 'fx')
        # Applying the binary operator '%' (line 1060)
        result_mod_148368 = python_operator(stypy.reporting.localization.Localization(__file__, 1060, 16), '%', unicode_148366, fx_148367)
        
        # Assigning a type to the variable 's' (line 1060)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 12), 's', result_mod_148368)
        # SSA branch for the else part of an if statement (line 1059)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1062):
        
        # Assigning a BinOp to a Name (line 1062):
        
        # Call to log(...): (line 1062)
        # Processing the call arguments (line 1062)
        # Getting the type of 'vmax' (line 1062)
        vmax_148371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 26), 'vmax', False)
        # Getting the type of 'vmin' (line 1062)
        vmin_148372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 33), 'vmin', False)
        # Applying the binary operator '-' (line 1062)
        result_sub_148373 = python_operator(stypy.reporting.localization.Localization(__file__, 1062, 26), '-', vmax_148371, vmin_148372)
        
        # Processing the call keyword arguments (line 1062)
        kwargs_148374 = {}
        # Getting the type of 'math' (line 1062)
        math_148369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 17), 'math', False)
        # Obtaining the member 'log' of a type (line 1062)
        log_148370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 17), math_148369, 'log')
        # Calling log(args, kwargs) (line 1062)
        log_call_result_148375 = invoke(stypy.reporting.localization.Localization(__file__, 1062, 17), log_148370, *[result_sub_148373], **kwargs_148374)
        
        
        # Call to log(...): (line 1062)
        # Processing the call arguments (line 1062)
        # Getting the type of 'self' (line 1062)
        self_148378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 50), 'self', False)
        # Obtaining the member '_base' of a type (line 1062)
        _base_148379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 50), self_148378, '_base')
        # Processing the call keyword arguments (line 1062)
        kwargs_148380 = {}
        # Getting the type of 'math' (line 1062)
        math_148376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 41), 'math', False)
        # Obtaining the member 'log' of a type (line 1062)
        log_148377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 41), math_148376, 'log')
        # Calling log(args, kwargs) (line 1062)
        log_call_result_148381 = invoke(stypy.reporting.localization.Localization(__file__, 1062, 41), log_148377, *[_base_148379], **kwargs_148380)
        
        # Applying the binary operator 'div' (line 1062)
        result_div_148382 = python_operator(stypy.reporting.localization.Localization(__file__, 1062, 17), 'div', log_call_result_148375, log_call_result_148381)
        
        # Assigning a type to the variable 'fd' (line 1062)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1062, 12), 'fd', result_div_148382)
        
        # Assigning a Call to a Name (line 1063):
        
        # Assigning a Call to a Name (line 1063):
        
        # Call to pprint_val(...): (line 1063)
        # Processing the call arguments (line 1063)
        # Getting the type of 'fx' (line 1063)
        fx_148385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 32), 'fx', False)
        # Getting the type of 'fd' (line 1063)
        fd_148386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 36), 'fd', False)
        # Processing the call keyword arguments (line 1063)
        kwargs_148387 = {}
        # Getting the type of 'self' (line 1063)
        self_148383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 16), 'self', False)
        # Obtaining the member 'pprint_val' of a type (line 1063)
        pprint_val_148384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1063, 16), self_148383, 'pprint_val')
        # Calling pprint_val(args, kwargs) (line 1063)
        pprint_val_call_result_148388 = invoke(stypy.reporting.localization.Localization(__file__, 1063, 16), pprint_val_148384, *[fx_148385, fd_148386], **kwargs_148387)
        
        # Assigning a type to the variable 's' (line 1063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1063, 12), 's', pprint_val_call_result_148388)
        # SSA join for if statement (line 1059)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1057)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 's' (line 1064)
        s_148389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 15), 's')
        # Assigning a type to the variable 'stypy_return_type' (line 1064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1064, 8), 'stypy_return_type', s_148389)
        
        # ################# End of '_num_to_string(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_num_to_string' in the type store
        # Getting the type of 'stypy_return_type' (line 1055)
        stypy_return_type_148390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148390)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_num_to_string'
        return stypy_return_type_148390


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1051, 0, False)
        # Assigning a type to the variable 'self' (line 1052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatterExponent.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'LogFormatterExponent' (line 1051)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 0), 'LogFormatterExponent', LogFormatterExponent)
# Declaration of the 'LogFormatterMathtext' class
# Getting the type of 'LogFormatter' (line 1067)
LogFormatter_148391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 27), 'LogFormatter')

class LogFormatterMathtext(LogFormatter_148391, ):
    unicode_148392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1070, (-1)), 'unicode', u'\n    Format values for log axis using ``exponent = log_base(value)``.\n    ')

    @norecursion
    def _non_decade_format(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_non_decade_format'
        module_type_store = module_type_store.open_function_context('_non_decade_format', 1072, 4, False)
        # Assigning a type to the variable 'self' (line 1073)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1073, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogFormatterMathtext._non_decade_format.__dict__.__setitem__('stypy_localization', localization)
        LogFormatterMathtext._non_decade_format.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogFormatterMathtext._non_decade_format.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogFormatterMathtext._non_decade_format.__dict__.__setitem__('stypy_function_name', 'LogFormatterMathtext._non_decade_format')
        LogFormatterMathtext._non_decade_format.__dict__.__setitem__('stypy_param_names_list', ['sign_string', 'base', 'fx', 'usetex'])
        LogFormatterMathtext._non_decade_format.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogFormatterMathtext._non_decade_format.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogFormatterMathtext._non_decade_format.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogFormatterMathtext._non_decade_format.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogFormatterMathtext._non_decade_format.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogFormatterMathtext._non_decade_format.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatterMathtext._non_decade_format', ['sign_string', 'base', 'fx', 'usetex'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_non_decade_format', localization, ['sign_string', 'base', 'fx', 'usetex'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_non_decade_format(...)' code ##################

        unicode_148393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1073, 8), 'unicode', u'Return string for non-decade locations')
        
        # Getting the type of 'usetex' (line 1074)
        usetex_148394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 11), 'usetex')
        # Testing the type of an if condition (line 1074)
        if_condition_148395 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1074, 8), usetex_148394)
        # Assigning a type to the variable 'if_condition_148395' (line 1074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'if_condition_148395', if_condition_148395)
        # SSA begins for if statement (line 1074)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_148396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1075, 20), 'unicode', u'$%s%s^{%.2f}$')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1075)
        tuple_148397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1075, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1075)
        # Adding element type (line 1075)
        # Getting the type of 'sign_string' (line 1075)
        sign_string_148398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 41), 'sign_string')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1075, 41), tuple_148397, sign_string_148398)
        # Adding element type (line 1075)
        # Getting the type of 'base' (line 1075)
        base_148399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 54), 'base')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1075, 41), tuple_148397, base_148399)
        # Adding element type (line 1075)
        # Getting the type of 'fx' (line 1075)
        fx_148400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 60), 'fx')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1075, 41), tuple_148397, fx_148400)
        
        # Applying the binary operator '%' (line 1075)
        result_mod_148401 = python_operator(stypy.reporting.localization.Localization(__file__, 1075, 19), '%', unicode_148396, tuple_148397)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1075, 12), 'stypy_return_type', result_mod_148401)
        # SSA branch for the else part of an if statement (line 1074)
        module_type_store.open_ssa_branch('else')
        unicode_148402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, 20), 'unicode', u'$%s$')
        
        # Call to _mathdefault(...): (line 1077)
        # Processing the call arguments (line 1077)
        unicode_148404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, 42), 'unicode', u'%s%s^{%.2f}')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1078)
        tuple_148405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1078, 43), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1078)
        # Adding element type (line 1078)
        # Getting the type of 'sign_string' (line 1078)
        sign_string_148406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 43), 'sign_string', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1078, 43), tuple_148405, sign_string_148406)
        # Adding element type (line 1078)
        # Getting the type of 'base' (line 1078)
        base_148407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 56), 'base', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1078, 43), tuple_148405, base_148407)
        # Adding element type (line 1078)
        # Getting the type of 'fx' (line 1078)
        fx_148408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 62), 'fx', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1078, 43), tuple_148405, fx_148408)
        
        # Applying the binary operator '%' (line 1077)
        result_mod_148409 = python_operator(stypy.reporting.localization.Localization(__file__, 1077, 42), '%', unicode_148404, tuple_148405)
        
        # Processing the call keyword arguments (line 1077)
        kwargs_148410 = {}
        # Getting the type of '_mathdefault' (line 1077)
        _mathdefault_148403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 29), '_mathdefault', False)
        # Calling _mathdefault(args, kwargs) (line 1077)
        _mathdefault_call_result_148411 = invoke(stypy.reporting.localization.Localization(__file__, 1077, 29), _mathdefault_148403, *[result_mod_148409], **kwargs_148410)
        
        # Applying the binary operator '%' (line 1077)
        result_mod_148412 = python_operator(stypy.reporting.localization.Localization(__file__, 1077, 20), '%', unicode_148402, _mathdefault_call_result_148411)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1077)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1077, 12), 'stypy_return_type', result_mod_148412)
        # SSA join for if statement (line 1074)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_non_decade_format(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_non_decade_format' in the type store
        # Getting the type of 'stypy_return_type' (line 1072)
        stypy_return_type_148413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148413)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_non_decade_format'
        return stypy_return_type_148413


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1080)
        None_148414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 30), 'None')
        defaults = [None_148414]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1080, 4, False)
        # Assigning a type to the variable 'self' (line 1081)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1081, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogFormatterMathtext.__call__.__dict__.__setitem__('stypy_localization', localization)
        LogFormatterMathtext.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogFormatterMathtext.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogFormatterMathtext.__call__.__dict__.__setitem__('stypy_function_name', 'LogFormatterMathtext.__call__')
        LogFormatterMathtext.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        LogFormatterMathtext.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogFormatterMathtext.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogFormatterMathtext.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogFormatterMathtext.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogFormatterMathtext.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogFormatterMathtext.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatterMathtext.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_148415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1085, (-1)), 'unicode', u'\n        Return the format for tick value `x`.\n\n        The position `pos` is ignored.\n        ')
        
        # Assigning a Subscript to a Name (line 1086):
        
        # Assigning a Subscript to a Name (line 1086):
        
        # Obtaining the type of the subscript
        unicode_148416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1086, 26), 'unicode', u'text.usetex')
        # Getting the type of 'rcParams' (line 1086)
        rcParams_148417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 17), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1086)
        getitem___148418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 17), rcParams_148417, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1086)
        subscript_call_result_148419 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 17), getitem___148418, unicode_148416)
        
        # Assigning a type to the variable 'usetex' (line 1086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 8), 'usetex', subscript_call_result_148419)
        
        # Assigning a Subscript to a Name (line 1087):
        
        # Assigning a Subscript to a Name (line 1087):
        
        # Obtaining the type of the subscript
        unicode_148420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 27), 'unicode', u'axes.formatter.min_exponent')
        # Getting the type of 'rcParams' (line 1087)
        rcParams_148421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 18), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1087)
        getitem___148422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 18), rcParams_148421, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1087)
        subscript_call_result_148423 = invoke(stypy.reporting.localization.Localization(__file__, 1087, 18), getitem___148422, unicode_148420)
        
        # Assigning a type to the variable 'min_exp' (line 1087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1087, 8), 'min_exp', subscript_call_result_148423)
        
        
        # Getting the type of 'x' (line 1089)
        x_148424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 11), 'x')
        int_148425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1089, 16), 'int')
        # Applying the binary operator '==' (line 1089)
        result_eq_148426 = python_operator(stypy.reporting.localization.Localization(__file__, 1089, 11), '==', x_148424, int_148425)
        
        # Testing the type of an if condition (line 1089)
        if_condition_148427 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1089, 8), result_eq_148426)
        # Assigning a type to the variable 'if_condition_148427' (line 1089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'if_condition_148427', if_condition_148427)
        # SSA begins for if statement (line 1089)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'usetex' (line 1090)
        usetex_148428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 15), 'usetex')
        # Testing the type of an if condition (line 1090)
        if_condition_148429 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1090, 12), usetex_148428)
        # Assigning a type to the variable 'if_condition_148429' (line 1090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 12), 'if_condition_148429', if_condition_148429)
        # SSA begins for if statement (line 1090)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_148430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1091, 23), 'unicode', u'$0$')
        # Assigning a type to the variable 'stypy_return_type' (line 1091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 16), 'stypy_return_type', unicode_148430)
        # SSA branch for the else part of an if statement (line 1090)
        module_type_store.open_ssa_branch('else')
        unicode_148431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1093, 23), 'unicode', u'$%s$')
        
        # Call to _mathdefault(...): (line 1093)
        # Processing the call arguments (line 1093)
        unicode_148433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1093, 45), 'unicode', u'0')
        # Processing the call keyword arguments (line 1093)
        kwargs_148434 = {}
        # Getting the type of '_mathdefault' (line 1093)
        _mathdefault_148432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 32), '_mathdefault', False)
        # Calling _mathdefault(args, kwargs) (line 1093)
        _mathdefault_call_result_148435 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 32), _mathdefault_148432, *[unicode_148433], **kwargs_148434)
        
        # Applying the binary operator '%' (line 1093)
        result_mod_148436 = python_operator(stypy.reporting.localization.Localization(__file__, 1093, 23), '%', unicode_148431, _mathdefault_call_result_148435)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1093, 16), 'stypy_return_type', result_mod_148436)
        # SSA join for if statement (line 1090)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1089)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a IfExp to a Name (line 1095):
        
        # Assigning a IfExp to a Name (line 1095):
        
        
        # Getting the type of 'x' (line 1095)
        x_148437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 29), 'x')
        int_148438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 33), 'int')
        # Applying the binary operator '<' (line 1095)
        result_lt_148439 = python_operator(stypy.reporting.localization.Localization(__file__, 1095, 29), '<', x_148437, int_148438)
        
        # Testing the type of an if expression (line 1095)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1095, 22), result_lt_148439)
        # SSA begins for if expression (line 1095)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        unicode_148440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 22), 'unicode', u'-')
        # SSA branch for the else part of an if expression (line 1095)
        module_type_store.open_ssa_branch('if expression else')
        unicode_148441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 40), 'unicode', u'')
        # SSA join for if expression (line 1095)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_148442 = union_type.UnionType.add(unicode_148440, unicode_148441)
        
        # Assigning a type to the variable 'sign_string' (line 1095)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1095, 8), 'sign_string', if_exp_148442)
        
        # Assigning a Call to a Name (line 1096):
        
        # Assigning a Call to a Name (line 1096):
        
        # Call to abs(...): (line 1096)
        # Processing the call arguments (line 1096)
        # Getting the type of 'x' (line 1096)
        x_148444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 16), 'x', False)
        # Processing the call keyword arguments (line 1096)
        kwargs_148445 = {}
        # Getting the type of 'abs' (line 1096)
        abs_148443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 12), 'abs', False)
        # Calling abs(args, kwargs) (line 1096)
        abs_call_result_148446 = invoke(stypy.reporting.localization.Localization(__file__, 1096, 12), abs_148443, *[x_148444], **kwargs_148445)
        
        # Assigning a type to the variable 'x' (line 1096)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 8), 'x', abs_call_result_148446)
        
        # Assigning a Attribute to a Name (line 1097):
        
        # Assigning a Attribute to a Name (line 1097):
        # Getting the type of 'self' (line 1097)
        self_148447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 12), 'self')
        # Obtaining the member '_base' of a type (line 1097)
        _base_148448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 12), self_148447, '_base')
        # Assigning a type to the variable 'b' (line 1097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1097, 8), 'b', _base_148448)
        
        # Assigning a BinOp to a Name (line 1100):
        
        # Assigning a BinOp to a Name (line 1100):
        
        # Call to log(...): (line 1100)
        # Processing the call arguments (line 1100)
        # Getting the type of 'x' (line 1100)
        x_148451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 22), 'x', False)
        # Processing the call keyword arguments (line 1100)
        kwargs_148452 = {}
        # Getting the type of 'math' (line 1100)
        math_148449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 13), 'math', False)
        # Obtaining the member 'log' of a type (line 1100)
        log_148450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1100, 13), math_148449, 'log')
        # Calling log(args, kwargs) (line 1100)
        log_call_result_148453 = invoke(stypy.reporting.localization.Localization(__file__, 1100, 13), log_148450, *[x_148451], **kwargs_148452)
        
        
        # Call to log(...): (line 1100)
        # Processing the call arguments (line 1100)
        # Getting the type of 'b' (line 1100)
        b_148456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 36), 'b', False)
        # Processing the call keyword arguments (line 1100)
        kwargs_148457 = {}
        # Getting the type of 'math' (line 1100)
        math_148454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 27), 'math', False)
        # Obtaining the member 'log' of a type (line 1100)
        log_148455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1100, 27), math_148454, 'log')
        # Calling log(args, kwargs) (line 1100)
        log_call_result_148458 = invoke(stypy.reporting.localization.Localization(__file__, 1100, 27), log_148455, *[b_148456], **kwargs_148457)
        
        # Applying the binary operator 'div' (line 1100)
        result_div_148459 = python_operator(stypy.reporting.localization.Localization(__file__, 1100, 13), 'div', log_call_result_148453, log_call_result_148458)
        
        # Assigning a type to the variable 'fx' (line 1100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1100, 8), 'fx', result_div_148459)
        
        # Assigning a Call to a Name (line 1101):
        
        # Assigning a Call to a Name (line 1101):
        
        # Call to is_close_to_int(...): (line 1101)
        # Processing the call arguments (line 1101)
        # Getting the type of 'fx' (line 1101)
        fx_148461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 38), 'fx', False)
        # Processing the call keyword arguments (line 1101)
        kwargs_148462 = {}
        # Getting the type of 'is_close_to_int' (line 1101)
        is_close_to_int_148460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 22), 'is_close_to_int', False)
        # Calling is_close_to_int(args, kwargs) (line 1101)
        is_close_to_int_call_result_148463 = invoke(stypy.reporting.localization.Localization(__file__, 1101, 22), is_close_to_int_148460, *[fx_148461], **kwargs_148462)
        
        # Assigning a type to the variable 'is_x_decade' (line 1101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1101, 8), 'is_x_decade', is_close_to_int_call_result_148463)
        
        # Assigning a IfExp to a Name (line 1102):
        
        # Assigning a IfExp to a Name (line 1102):
        
        # Getting the type of 'is_x_decade' (line 1102)
        is_x_decade_148464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 35), 'is_x_decade')
        # Testing the type of an if expression (line 1102)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1102, 19), is_x_decade_148464)
        # SSA begins for if expression (line 1102)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Call to round(...): (line 1102)
        # Processing the call arguments (line 1102)
        # Getting the type of 'fx' (line 1102)
        fx_148467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 28), 'fx', False)
        # Processing the call keyword arguments (line 1102)
        kwargs_148468 = {}
        # Getting the type of 'np' (line 1102)
        np_148465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 19), 'np', False)
        # Obtaining the member 'round' of a type (line 1102)
        round_148466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 19), np_148465, 'round')
        # Calling round(args, kwargs) (line 1102)
        round_call_result_148469 = invoke(stypy.reporting.localization.Localization(__file__, 1102, 19), round_148466, *[fx_148467], **kwargs_148468)
        
        # SSA branch for the else part of an if expression (line 1102)
        module_type_store.open_ssa_branch('if expression else')
        
        # Call to floor(...): (line 1102)
        # Processing the call arguments (line 1102)
        # Getting the type of 'fx' (line 1102)
        fx_148472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 61), 'fx', False)
        # Processing the call keyword arguments (line 1102)
        kwargs_148473 = {}
        # Getting the type of 'np' (line 1102)
        np_148470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 52), 'np', False)
        # Obtaining the member 'floor' of a type (line 1102)
        floor_148471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 52), np_148470, 'floor')
        # Calling floor(args, kwargs) (line 1102)
        floor_call_result_148474 = invoke(stypy.reporting.localization.Localization(__file__, 1102, 52), floor_148471, *[fx_148472], **kwargs_148473)
        
        # SSA join for if expression (line 1102)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_148475 = union_type.UnionType.add(round_call_result_148469, floor_call_result_148474)
        
        # Assigning a type to the variable 'exponent' (line 1102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1102, 8), 'exponent', if_exp_148475)
        
        # Assigning a Call to a Name (line 1103):
        
        # Assigning a Call to a Name (line 1103):
        
        # Call to round(...): (line 1103)
        # Processing the call arguments (line 1103)
        # Getting the type of 'x' (line 1103)
        x_148478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 25), 'x', False)
        # Getting the type of 'b' (line 1103)
        b_148479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 29), 'b', False)
        # Getting the type of 'exponent' (line 1103)
        exponent_148480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 34), 'exponent', False)
        # Applying the binary operator '**' (line 1103)
        result_pow_148481 = python_operator(stypy.reporting.localization.Localization(__file__, 1103, 29), '**', b_148479, exponent_148480)
        
        # Applying the binary operator 'div' (line 1103)
        result_div_148482 = python_operator(stypy.reporting.localization.Localization(__file__, 1103, 25), 'div', x_148478, result_pow_148481)
        
        # Processing the call keyword arguments (line 1103)
        kwargs_148483 = {}
        # Getting the type of 'np' (line 1103)
        np_148476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 16), 'np', False)
        # Obtaining the member 'round' of a type (line 1103)
        round_148477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 16), np_148476, 'round')
        # Calling round(args, kwargs) (line 1103)
        round_call_result_148484 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 16), round_148477, *[result_div_148482], **kwargs_148483)
        
        # Assigning a type to the variable 'coeff' (line 1103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1103, 8), 'coeff', round_call_result_148484)
        
        # Getting the type of 'is_x_decade' (line 1104)
        is_x_decade_148485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 11), 'is_x_decade')
        # Testing the type of an if condition (line 1104)
        if_condition_148486 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1104, 8), is_x_decade_148485)
        # Assigning a type to the variable 'if_condition_148486' (line 1104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1104, 8), 'if_condition_148486', if_condition_148486)
        # SSA begins for if statement (line 1104)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1105):
        
        # Assigning a Call to a Name (line 1105):
        
        # Call to nearest_long(...): (line 1105)
        # Processing the call arguments (line 1105)
        # Getting the type of 'fx' (line 1105)
        fx_148488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 30), 'fx', False)
        # Processing the call keyword arguments (line 1105)
        kwargs_148489 = {}
        # Getting the type of 'nearest_long' (line 1105)
        nearest_long_148487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 17), 'nearest_long', False)
        # Calling nearest_long(args, kwargs) (line 1105)
        nearest_long_call_result_148490 = invoke(stypy.reporting.localization.Localization(__file__, 1105, 17), nearest_long_148487, *[fx_148488], **kwargs_148489)
        
        # Assigning a type to the variable 'fx' (line 1105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1105, 12), 'fx', nearest_long_call_result_148490)
        # SSA join for if statement (line 1104)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 1107)
        self_148491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 11), 'self')
        # Obtaining the member 'labelOnlyBase' of a type (line 1107)
        labelOnlyBase_148492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 11), self_148491, 'labelOnlyBase')
        
        # Getting the type of 'is_x_decade' (line 1107)
        is_x_decade_148493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 38), 'is_x_decade')
        # Applying the 'not' unary operator (line 1107)
        result_not__148494 = python_operator(stypy.reporting.localization.Localization(__file__, 1107, 34), 'not', is_x_decade_148493)
        
        # Applying the binary operator 'and' (line 1107)
        result_and_keyword_148495 = python_operator(stypy.reporting.localization.Localization(__file__, 1107, 11), 'and', labelOnlyBase_148492, result_not__148494)
        
        # Testing the type of an if condition (line 1107)
        if_condition_148496 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1107, 8), result_and_keyword_148495)
        # Assigning a type to the variable 'if_condition_148496' (line 1107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 8), 'if_condition_148496', if_condition_148496)
        # SSA begins for if statement (line 1107)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_148497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1108, 19), 'unicode', u'')
        # Assigning a type to the variable 'stypy_return_type' (line 1108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1108, 12), 'stypy_return_type', unicode_148497)
        # SSA join for if statement (line 1107)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1109)
        self_148498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 11), 'self')
        # Obtaining the member '_sublabels' of a type (line 1109)
        _sublabels_148499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 11), self_148498, '_sublabels')
        # Getting the type of 'None' (line 1109)
        None_148500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 34), 'None')
        # Applying the binary operator 'isnot' (line 1109)
        result_is_not_148501 = python_operator(stypy.reporting.localization.Localization(__file__, 1109, 11), 'isnot', _sublabels_148499, None_148500)
        
        
        # Getting the type of 'coeff' (line 1109)
        coeff_148502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 43), 'coeff')
        # Getting the type of 'self' (line 1109)
        self_148503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 56), 'self')
        # Obtaining the member '_sublabels' of a type (line 1109)
        _sublabels_148504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 56), self_148503, '_sublabels')
        # Applying the binary operator 'notin' (line 1109)
        result_contains_148505 = python_operator(stypy.reporting.localization.Localization(__file__, 1109, 43), 'notin', coeff_148502, _sublabels_148504)
        
        # Applying the binary operator 'and' (line 1109)
        result_and_keyword_148506 = python_operator(stypy.reporting.localization.Localization(__file__, 1109, 11), 'and', result_is_not_148501, result_contains_148505)
        
        # Testing the type of an if condition (line 1109)
        if_condition_148507 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1109, 8), result_and_keyword_148506)
        # Assigning a type to the variable 'if_condition_148507' (line 1109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1109, 8), 'if_condition_148507', if_condition_148507)
        # SSA begins for if statement (line 1109)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_148508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1110, 19), 'unicode', u'')
        # Assigning a type to the variable 'stypy_return_type' (line 1110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1110, 12), 'stypy_return_type', unicode_148508)
        # SSA join for if statement (line 1109)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'b' (line 1113)
        b_148509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 11), 'b')
        int_148510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, 15), 'int')
        # Applying the binary operator '%' (line 1113)
        result_mod_148511 = python_operator(stypy.reporting.localization.Localization(__file__, 1113, 11), '%', b_148509, int_148510)
        
        float_148512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, 20), 'float')
        # Applying the binary operator '==' (line 1113)
        result_eq_148513 = python_operator(stypy.reporting.localization.Localization(__file__, 1113, 11), '==', result_mod_148511, float_148512)
        
        # Testing the type of an if condition (line 1113)
        if_condition_148514 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1113, 8), result_eq_148513)
        # Assigning a type to the variable 'if_condition_148514' (line 1113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 8), 'if_condition_148514', if_condition_148514)
        # SSA begins for if statement (line 1113)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1114):
        
        # Assigning a BinOp to a Name (line 1114):
        unicode_148515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, 19), 'unicode', u'%d')
        # Getting the type of 'b' (line 1114)
        b_148516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 26), 'b')
        # Applying the binary operator '%' (line 1114)
        result_mod_148517 = python_operator(stypy.reporting.localization.Localization(__file__, 1114, 19), '%', unicode_148515, b_148516)
        
        # Assigning a type to the variable 'base' (line 1114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1114, 12), 'base', result_mod_148517)
        # SSA branch for the else part of an if statement (line 1113)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1116):
        
        # Assigning a BinOp to a Name (line 1116):
        unicode_148518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1116, 19), 'unicode', u'%s')
        # Getting the type of 'b' (line 1116)
        b_148519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 26), 'b')
        # Applying the binary operator '%' (line 1116)
        result_mod_148520 = python_operator(stypy.reporting.localization.Localization(__file__, 1116, 19), '%', unicode_148518, b_148519)
        
        # Assigning a type to the variable 'base' (line 1116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1116, 12), 'base', result_mod_148520)
        # SSA join for if statement (line 1113)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to abs(...): (line 1118)
        # Processing the call arguments (line 1118)
        # Getting the type of 'fx' (line 1118)
        fx_148523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 18), 'fx', False)
        # Processing the call keyword arguments (line 1118)
        kwargs_148524 = {}
        # Getting the type of 'np' (line 1118)
        np_148521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 11), 'np', False)
        # Obtaining the member 'abs' of a type (line 1118)
        abs_148522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 11), np_148521, 'abs')
        # Calling abs(args, kwargs) (line 1118)
        abs_call_result_148525 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 11), abs_148522, *[fx_148523], **kwargs_148524)
        
        # Getting the type of 'min_exp' (line 1118)
        min_exp_148526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 24), 'min_exp')
        # Applying the binary operator '<' (line 1118)
        result_lt_148527 = python_operator(stypy.reporting.localization.Localization(__file__, 1118, 11), '<', abs_call_result_148525, min_exp_148526)
        
        # Testing the type of an if condition (line 1118)
        if_condition_148528 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1118, 8), result_lt_148527)
        # Assigning a type to the variable 'if_condition_148528' (line 1118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 8), 'if_condition_148528', if_condition_148528)
        # SSA begins for if statement (line 1118)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'usetex' (line 1119)
        usetex_148529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 15), 'usetex')
        # Testing the type of an if condition (line 1119)
        if_condition_148530 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1119, 12), usetex_148529)
        # Assigning a type to the variable 'if_condition_148530' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 12), 'if_condition_148530', if_condition_148530)
        # SSA begins for if statement (line 1119)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to format(...): (line 1120)
        # Processing the call arguments (line 1120)
        # Getting the type of 'sign_string' (line 1120)
        sign_string_148533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 44), 'sign_string', False)
        # Getting the type of 'x' (line 1120)
        x_148534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 57), 'x', False)
        # Processing the call keyword arguments (line 1120)
        kwargs_148535 = {}
        unicode_148531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1120, 23), 'unicode', u'${0}{1:g}$')
        # Obtaining the member 'format' of a type (line 1120)
        format_148532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 23), unicode_148531, 'format')
        # Calling format(args, kwargs) (line 1120)
        format_call_result_148536 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 23), format_148532, *[sign_string_148533, x_148534], **kwargs_148535)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1120, 16), 'stypy_return_type', format_call_result_148536)
        # SSA branch for the else part of an if statement (line 1119)
        module_type_store.open_ssa_branch('else')
        
        # Call to format(...): (line 1122)
        # Processing the call arguments (line 1122)
        
        # Call to _mathdefault(...): (line 1122)
        # Processing the call arguments (line 1122)
        
        # Call to format(...): (line 1123)
        # Processing the call arguments (line 1123)
        # Getting the type of 'sign_string' (line 1123)
        sign_string_148542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 38), 'sign_string', False)
        # Getting the type of 'x' (line 1123)
        x_148543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 51), 'x', False)
        # Processing the call keyword arguments (line 1123)
        kwargs_148544 = {}
        unicode_148540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 20), 'unicode', u'{0}{1:g}')
        # Obtaining the member 'format' of a type (line 1123)
        format_148541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 20), unicode_148540, 'format')
        # Calling format(args, kwargs) (line 1123)
        format_call_result_148545 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 20), format_148541, *[sign_string_148542, x_148543], **kwargs_148544)
        
        # Processing the call keyword arguments (line 1122)
        kwargs_148546 = {}
        # Getting the type of '_mathdefault' (line 1122)
        _mathdefault_148539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 38), '_mathdefault', False)
        # Calling _mathdefault(args, kwargs) (line 1122)
        _mathdefault_call_result_148547 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 38), _mathdefault_148539, *[format_call_result_148545], **kwargs_148546)
        
        # Processing the call keyword arguments (line 1122)
        kwargs_148548 = {}
        unicode_148537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1122, 23), 'unicode', u'${0}$')
        # Obtaining the member 'format' of a type (line 1122)
        format_148538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 23), unicode_148537, 'format')
        # Calling format(args, kwargs) (line 1122)
        format_call_result_148549 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 23), format_148538, *[_mathdefault_call_result_148547], **kwargs_148548)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1122, 16), 'stypy_return_type', format_call_result_148549)
        # SSA join for if statement (line 1119)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1118)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'is_x_decade' (line 1124)
        is_x_decade_148550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 17), 'is_x_decade')
        # Applying the 'not' unary operator (line 1124)
        result_not__148551 = python_operator(stypy.reporting.localization.Localization(__file__, 1124, 13), 'not', is_x_decade_148550)
        
        # Testing the type of an if condition (line 1124)
        if_condition_148552 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1124, 13), result_not__148551)
        # Assigning a type to the variable 'if_condition_148552' (line 1124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 13), 'if_condition_148552', if_condition_148552)
        # SSA begins for if statement (line 1124)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _non_decade_format(...): (line 1125)
        # Processing the call arguments (line 1125)
        # Getting the type of 'sign_string' (line 1125)
        sign_string_148555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 43), 'sign_string', False)
        # Getting the type of 'base' (line 1125)
        base_148556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 56), 'base', False)
        # Getting the type of 'fx' (line 1125)
        fx_148557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 62), 'fx', False)
        # Getting the type of 'usetex' (line 1125)
        usetex_148558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 66), 'usetex', False)
        # Processing the call keyword arguments (line 1125)
        kwargs_148559 = {}
        # Getting the type of 'self' (line 1125)
        self_148553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 19), 'self', False)
        # Obtaining the member '_non_decade_format' of a type (line 1125)
        _non_decade_format_148554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1125, 19), self_148553, '_non_decade_format')
        # Calling _non_decade_format(args, kwargs) (line 1125)
        _non_decade_format_call_result_148560 = invoke(stypy.reporting.localization.Localization(__file__, 1125, 19), _non_decade_format_148554, *[sign_string_148555, base_148556, fx_148557, usetex_148558], **kwargs_148559)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1125, 12), 'stypy_return_type', _non_decade_format_call_result_148560)
        # SSA branch for the else part of an if statement (line 1124)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'usetex' (line 1127)
        usetex_148561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 15), 'usetex')
        # Testing the type of an if condition (line 1127)
        if_condition_148562 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1127, 12), usetex_148561)
        # Assigning a type to the variable 'if_condition_148562' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 12), 'if_condition_148562', if_condition_148562)
        # SSA begins for if statement (line 1127)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_148563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 24), 'unicode', u'$%s%s^{%d}$')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1128)
        tuple_148564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 43), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1128)
        # Adding element type (line 1128)
        # Getting the type of 'sign_string' (line 1128)
        sign_string_148565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 43), 'sign_string')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1128, 43), tuple_148564, sign_string_148565)
        # Adding element type (line 1128)
        # Getting the type of 'base' (line 1129)
        base_148566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 43), 'base')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1128, 43), tuple_148564, base_148566)
        # Adding element type (line 1128)
        
        # Call to nearest_long(...): (line 1130)
        # Processing the call arguments (line 1130)
        # Getting the type of 'fx' (line 1130)
        fx_148568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 56), 'fx', False)
        # Processing the call keyword arguments (line 1130)
        kwargs_148569 = {}
        # Getting the type of 'nearest_long' (line 1130)
        nearest_long_148567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 43), 'nearest_long', False)
        # Calling nearest_long(args, kwargs) (line 1130)
        nearest_long_call_result_148570 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 43), nearest_long_148567, *[fx_148568], **kwargs_148569)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1128, 43), tuple_148564, nearest_long_call_result_148570)
        
        # Applying the binary operator '%' (line 1128)
        result_mod_148571 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 23), '%', unicode_148563, tuple_148564)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 16), 'stypy_return_type', result_mod_148571)
        # SSA branch for the else part of an if statement (line 1127)
        module_type_store.open_ssa_branch('else')
        unicode_148572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 24), 'unicode', u'$%s$')
        
        # Call to _mathdefault(...): (line 1132)
        # Processing the call arguments (line 1132)
        unicode_148574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1133, 20), 'unicode', u'%s%s^{%d}')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1134)
        tuple_148575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1134)
        # Adding element type (line 1134)
        # Getting the type of 'sign_string' (line 1134)
        sign_string_148576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 21), 'sign_string', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 21), tuple_148575, sign_string_148576)
        # Adding element type (line 1134)
        # Getting the type of 'base' (line 1134)
        base_148577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 34), 'base', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 21), tuple_148575, base_148577)
        # Adding element type (line 1134)
        
        # Call to nearest_long(...): (line 1134)
        # Processing the call arguments (line 1134)
        # Getting the type of 'fx' (line 1134)
        fx_148579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 53), 'fx', False)
        # Processing the call keyword arguments (line 1134)
        kwargs_148580 = {}
        # Getting the type of 'nearest_long' (line 1134)
        nearest_long_148578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 40), 'nearest_long', False)
        # Calling nearest_long(args, kwargs) (line 1134)
        nearest_long_call_result_148581 = invoke(stypy.reporting.localization.Localization(__file__, 1134, 40), nearest_long_148578, *[fx_148579], **kwargs_148580)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 21), tuple_148575, nearest_long_call_result_148581)
        
        # Applying the binary operator '%' (line 1133)
        result_mod_148582 = python_operator(stypy.reporting.localization.Localization(__file__, 1133, 20), '%', unicode_148574, tuple_148575)
        
        # Processing the call keyword arguments (line 1132)
        kwargs_148583 = {}
        # Getting the type of '_mathdefault' (line 1132)
        _mathdefault_148573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 33), '_mathdefault', False)
        # Calling _mathdefault(args, kwargs) (line 1132)
        _mathdefault_call_result_148584 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 33), _mathdefault_148573, *[result_mod_148582], **kwargs_148583)
        
        # Applying the binary operator '%' (line 1132)
        result_mod_148585 = python_operator(stypy.reporting.localization.Localization(__file__, 1132, 24), '%', unicode_148572, _mathdefault_call_result_148584)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 16), 'stypy_return_type', result_mod_148585)
        # SSA join for if statement (line 1127)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1124)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1118)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1080)
        stypy_return_type_148586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148586)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_148586


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1067, 0, False)
        # Assigning a type to the variable 'self' (line 1068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatterMathtext.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'LogFormatterMathtext' (line 1067)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 0), 'LogFormatterMathtext', LogFormatterMathtext)
# Declaration of the 'LogFormatterSciNotation' class
# Getting the type of 'LogFormatterMathtext' (line 1137)
LogFormatterMathtext_148587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 30), 'LogFormatterMathtext')

class LogFormatterSciNotation(LogFormatterMathtext_148587, ):
    unicode_148588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1140, (-1)), 'unicode', u'\n    Format values following scientific notation in a logarithmic axis\n    ')

    @norecursion
    def _non_decade_format(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_non_decade_format'
        module_type_store = module_type_store.open_function_context('_non_decade_format', 1142, 4, False)
        # Assigning a type to the variable 'self' (line 1143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1143, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogFormatterSciNotation._non_decade_format.__dict__.__setitem__('stypy_localization', localization)
        LogFormatterSciNotation._non_decade_format.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogFormatterSciNotation._non_decade_format.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogFormatterSciNotation._non_decade_format.__dict__.__setitem__('stypy_function_name', 'LogFormatterSciNotation._non_decade_format')
        LogFormatterSciNotation._non_decade_format.__dict__.__setitem__('stypy_param_names_list', ['sign_string', 'base', 'fx', 'usetex'])
        LogFormatterSciNotation._non_decade_format.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogFormatterSciNotation._non_decade_format.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogFormatterSciNotation._non_decade_format.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogFormatterSciNotation._non_decade_format.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogFormatterSciNotation._non_decade_format.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogFormatterSciNotation._non_decade_format.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatterSciNotation._non_decade_format', ['sign_string', 'base', 'fx', 'usetex'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_non_decade_format', localization, ['sign_string', 'base', 'fx', 'usetex'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_non_decade_format(...)' code ##################

        unicode_148589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1143, 8), 'unicode', u'Return string for non-decade locations')
        
        # Assigning a Call to a Name (line 1144):
        
        # Assigning a Call to a Name (line 1144):
        
        # Call to float(...): (line 1144)
        # Processing the call arguments (line 1144)
        # Getting the type of 'base' (line 1144)
        base_148591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 18), 'base', False)
        # Processing the call keyword arguments (line 1144)
        kwargs_148592 = {}
        # Getting the type of 'float' (line 1144)
        float_148590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 12), 'float', False)
        # Calling float(args, kwargs) (line 1144)
        float_call_result_148593 = invoke(stypy.reporting.localization.Localization(__file__, 1144, 12), float_148590, *[base_148591], **kwargs_148592)
        
        # Assigning a type to the variable 'b' (line 1144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 8), 'b', float_call_result_148593)
        
        # Assigning a Call to a Name (line 1145):
        
        # Assigning a Call to a Name (line 1145):
        
        # Call to floor(...): (line 1145)
        # Processing the call arguments (line 1145)
        # Getting the type of 'fx' (line 1145)
        fx_148596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 30), 'fx', False)
        # Processing the call keyword arguments (line 1145)
        kwargs_148597 = {}
        # Getting the type of 'math' (line 1145)
        math_148594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 19), 'math', False)
        # Obtaining the member 'floor' of a type (line 1145)
        floor_148595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 19), math_148594, 'floor')
        # Calling floor(args, kwargs) (line 1145)
        floor_call_result_148598 = invoke(stypy.reporting.localization.Localization(__file__, 1145, 19), floor_148595, *[fx_148596], **kwargs_148597)
        
        # Assigning a type to the variable 'exponent' (line 1145)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1145, 8), 'exponent', floor_call_result_148598)
        
        # Assigning a BinOp to a Name (line 1146):
        
        # Assigning a BinOp to a Name (line 1146):
        # Getting the type of 'b' (line 1146)
        b_148599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 16), 'b')
        # Getting the type of 'fx' (line 1146)
        fx_148600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 21), 'fx')
        # Applying the binary operator '**' (line 1146)
        result_pow_148601 = python_operator(stypy.reporting.localization.Localization(__file__, 1146, 16), '**', b_148599, fx_148600)
        
        # Getting the type of 'b' (line 1146)
        b_148602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 26), 'b')
        # Getting the type of 'exponent' (line 1146)
        exponent_148603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 31), 'exponent')
        # Applying the binary operator '**' (line 1146)
        result_pow_148604 = python_operator(stypy.reporting.localization.Localization(__file__, 1146, 26), '**', b_148602, exponent_148603)
        
        # Applying the binary operator 'div' (line 1146)
        result_div_148605 = python_operator(stypy.reporting.localization.Localization(__file__, 1146, 16), 'div', result_pow_148601, result_pow_148604)
        
        # Assigning a type to the variable 'coeff' (line 1146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1146, 8), 'coeff', result_div_148605)
        
        
        # Call to is_close_to_int(...): (line 1147)
        # Processing the call arguments (line 1147)
        # Getting the type of 'coeff' (line 1147)
        coeff_148607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 27), 'coeff', False)
        # Processing the call keyword arguments (line 1147)
        kwargs_148608 = {}
        # Getting the type of 'is_close_to_int' (line 1147)
        is_close_to_int_148606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 11), 'is_close_to_int', False)
        # Calling is_close_to_int(args, kwargs) (line 1147)
        is_close_to_int_call_result_148609 = invoke(stypy.reporting.localization.Localization(__file__, 1147, 11), is_close_to_int_148606, *[coeff_148607], **kwargs_148608)
        
        # Testing the type of an if condition (line 1147)
        if_condition_148610 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1147, 8), is_close_to_int_call_result_148609)
        # Assigning a type to the variable 'if_condition_148610' (line 1147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 8), 'if_condition_148610', if_condition_148610)
        # SSA begins for if statement (line 1147)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1148):
        
        # Assigning a Call to a Name (line 1148):
        
        # Call to nearest_long(...): (line 1148)
        # Processing the call arguments (line 1148)
        # Getting the type of 'coeff' (line 1148)
        coeff_148612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 33), 'coeff', False)
        # Processing the call keyword arguments (line 1148)
        kwargs_148613 = {}
        # Getting the type of 'nearest_long' (line 1148)
        nearest_long_148611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 20), 'nearest_long', False)
        # Calling nearest_long(args, kwargs) (line 1148)
        nearest_long_call_result_148614 = invoke(stypy.reporting.localization.Localization(__file__, 1148, 20), nearest_long_148611, *[coeff_148612], **kwargs_148613)
        
        # Assigning a type to the variable 'coeff' (line 1148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1148, 12), 'coeff', nearest_long_call_result_148614)
        # SSA join for if statement (line 1147)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'usetex' (line 1149)
        usetex_148615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 11), 'usetex')
        # Testing the type of an if condition (line 1149)
        if_condition_148616 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1149, 8), usetex_148615)
        # Assigning a type to the variable 'if_condition_148616' (line 1149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 8), 'if_condition_148616', if_condition_148616)
        # SSA begins for if statement (line 1149)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_148617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 20), 'unicode', u'$%s%g\\times%s^{%d}$')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1151)
        tuple_148618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1151, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1151)
        # Adding element type (line 1151)
        # Getting the type of 'sign_string' (line 1151)
        sign_string_148619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 41), 'sign_string')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1151, 41), tuple_148618, sign_string_148619)
        # Adding element type (line 1151)
        # Getting the type of 'coeff' (line 1151)
        coeff_148620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 54), 'coeff')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1151, 41), tuple_148618, coeff_148620)
        # Adding element type (line 1151)
        # Getting the type of 'base' (line 1151)
        base_148621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 61), 'base')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1151, 41), tuple_148618, base_148621)
        # Adding element type (line 1151)
        # Getting the type of 'exponent' (line 1151)
        exponent_148622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 67), 'exponent')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1151, 41), tuple_148618, exponent_148622)
        
        # Applying the binary operator '%' (line 1150)
        result_mod_148623 = python_operator(stypy.reporting.localization.Localization(__file__, 1150, 19), '%', unicode_148617, tuple_148618)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 12), 'stypy_return_type', result_mod_148623)
        # SSA branch for the else part of an if statement (line 1149)
        module_type_store.open_ssa_branch('else')
        unicode_148624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 20), 'unicode', u'$%s$')
        
        # Call to _mathdefault(...): (line 1153)
        # Processing the call arguments (line 1153)
        unicode_148626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 42), 'unicode', u'%s%g\\times%s^{%d}')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1154)
        tuple_148627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1154, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1154)
        # Adding element type (line 1154)
        # Getting the type of 'sign_string' (line 1154)
        sign_string_148628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 41), 'sign_string', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1154, 41), tuple_148627, sign_string_148628)
        # Adding element type (line 1154)
        # Getting the type of 'coeff' (line 1154)
        coeff_148629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 54), 'coeff', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1154, 41), tuple_148627, coeff_148629)
        # Adding element type (line 1154)
        # Getting the type of 'base' (line 1154)
        base_148630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 61), 'base', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1154, 41), tuple_148627, base_148630)
        # Adding element type (line 1154)
        # Getting the type of 'exponent' (line 1154)
        exponent_148631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 67), 'exponent', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1154, 41), tuple_148627, exponent_148631)
        
        # Applying the binary operator '%' (line 1153)
        result_mod_148632 = python_operator(stypy.reporting.localization.Localization(__file__, 1153, 42), '%', unicode_148626, tuple_148627)
        
        # Processing the call keyword arguments (line 1153)
        kwargs_148633 = {}
        # Getting the type of '_mathdefault' (line 1153)
        _mathdefault_148625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 29), '_mathdefault', False)
        # Calling _mathdefault(args, kwargs) (line 1153)
        _mathdefault_call_result_148634 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 29), _mathdefault_148625, *[result_mod_148632], **kwargs_148633)
        
        # Applying the binary operator '%' (line 1153)
        result_mod_148635 = python_operator(stypy.reporting.localization.Localization(__file__, 1153, 20), '%', unicode_148624, _mathdefault_call_result_148634)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 12), 'stypy_return_type', result_mod_148635)
        # SSA join for if statement (line 1149)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_non_decade_format(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_non_decade_format' in the type store
        # Getting the type of 'stypy_return_type' (line 1142)
        stypy_return_type_148636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148636)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_non_decade_format'
        return stypy_return_type_148636


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1137, 0, False)
        # Assigning a type to the variable 'self' (line 1138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogFormatterSciNotation.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'LogFormatterSciNotation' (line 1137)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 0), 'LogFormatterSciNotation', LogFormatterSciNotation)
# Declaration of the 'LogitFormatter' class
# Getting the type of 'Formatter' (line 1157)
Formatter_148637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 21), 'Formatter')

class LogitFormatter(Formatter_148637, ):
    unicode_148638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1160, (-1)), 'unicode', u'\n    Probability formatter (using Math text).\n    ')

    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1161)
        None_148639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 30), 'None')
        defaults = [None_148639]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1161, 4, False)
        # Assigning a type to the variable 'self' (line 1162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1162, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogitFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        LogitFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogitFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogitFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'LogitFormatter.__call__')
        LogitFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        LogitFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogitFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogitFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogitFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogitFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogitFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogitFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Assigning a Str to a Name (line 1162):
        
        # Assigning a Str to a Name (line 1162):
        unicode_148640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1162, 12), 'unicode', u'')
        # Assigning a type to the variable 's' (line 1162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1162, 8), 's', unicode_148640)
        
        
        float_148641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 11), 'float')
        # Getting the type of 'x' (line 1163)
        x_148642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 19), 'x')
        # Applying the binary operator '<=' (line 1163)
        result_le_148643 = python_operator(stypy.reporting.localization.Localization(__file__, 1163, 11), '<=', float_148641, x_148642)
        float_148644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 24), 'float')
        # Applying the binary operator '<=' (line 1163)
        result_le_148645 = python_operator(stypy.reporting.localization.Localization(__file__, 1163, 11), '<=', x_148642, float_148644)
        # Applying the binary operator '&' (line 1163)
        result_and__148646 = python_operator(stypy.reporting.localization.Localization(__file__, 1163, 11), '&', result_le_148643, result_le_148645)
        
        # Testing the type of an if condition (line 1163)
        if_condition_148647 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1163, 8), result_and__148646)
        # Assigning a type to the variable 'if_condition_148647' (line 1163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'if_condition_148647', if_condition_148647)
        # SSA begins for if statement (line 1163)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1164):
        
        # Assigning a Call to a Name (line 1164):
        
        # Call to format(...): (line 1164)
        # Processing the call arguments (line 1164)
        # Getting the type of 'x' (line 1164)
        x_148650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 32), 'x', False)
        # Processing the call keyword arguments (line 1164)
        kwargs_148651 = {}
        unicode_148648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1164, 16), 'unicode', u'{:.2f}')
        # Obtaining the member 'format' of a type (line 1164)
        format_148649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 16), unicode_148648, 'format')
        # Calling format(args, kwargs) (line 1164)
        format_call_result_148652 = invoke(stypy.reporting.localization.Localization(__file__, 1164, 16), format_148649, *[x_148650], **kwargs_148651)
        
        # Assigning a type to the variable 's' (line 1164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1164, 12), 's', format_call_result_148652)
        # SSA branch for the else part of an if statement (line 1163)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'x' (line 1165)
        x_148653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 13), 'x')
        float_148654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, 17), 'float')
        # Applying the binary operator '<' (line 1165)
        result_lt_148655 = python_operator(stypy.reporting.localization.Localization(__file__, 1165, 13), '<', x_148653, float_148654)
        
        # Testing the type of an if condition (line 1165)
        if_condition_148656 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1165, 13), result_lt_148655)
        # Assigning a type to the variable 'if_condition_148656' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 13), 'if_condition_148656', if_condition_148656)
        # SSA begins for if statement (line 1165)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to is_decade(...): (line 1166)
        # Processing the call arguments (line 1166)
        # Getting the type of 'x' (line 1166)
        x_148658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 25), 'x', False)
        # Processing the call keyword arguments (line 1166)
        kwargs_148659 = {}
        # Getting the type of 'is_decade' (line 1166)
        is_decade_148657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 15), 'is_decade', False)
        # Calling is_decade(args, kwargs) (line 1166)
        is_decade_call_result_148660 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 15), is_decade_148657, *[x_148658], **kwargs_148659)
        
        # Testing the type of an if condition (line 1166)
        if_condition_148661 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1166, 12), is_decade_call_result_148660)
        # Assigning a type to the variable 'if_condition_148661' (line 1166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 12), 'if_condition_148661', if_condition_148661)
        # SSA begins for if statement (line 1166)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1167):
        
        # Assigning a Call to a Name (line 1167):
        
        # Call to format(...): (line 1167)
        # Processing the call arguments (line 1167)
        
        # Call to log10(...): (line 1167)
        # Processing the call arguments (line 1167)
        # Getting the type of 'x' (line 1167)
        x_148666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 54), 'x', False)
        # Processing the call keyword arguments (line 1167)
        kwargs_148667 = {}
        # Getting the type of 'np' (line 1167)
        np_148664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 45), 'np', False)
        # Obtaining the member 'log10' of a type (line 1167)
        log10_148665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1167, 45), np_148664, 'log10')
        # Calling log10(args, kwargs) (line 1167)
        log10_call_result_148668 = invoke(stypy.reporting.localization.Localization(__file__, 1167, 45), log10_148665, *[x_148666], **kwargs_148667)
        
        # Processing the call keyword arguments (line 1167)
        kwargs_148669 = {}
        unicode_148662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1167, 20), 'unicode', u'$10^{{{:.0f}}}$')
        # Obtaining the member 'format' of a type (line 1167)
        format_148663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1167, 20), unicode_148662, 'format')
        # Calling format(args, kwargs) (line 1167)
        format_call_result_148670 = invoke(stypy.reporting.localization.Localization(__file__, 1167, 20), format_148663, *[log10_call_result_148668], **kwargs_148669)
        
        # Assigning a type to the variable 's' (line 1167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1167, 16), 's', format_call_result_148670)
        # SSA branch for the else part of an if statement (line 1166)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1169):
        
        # Assigning a Call to a Name (line 1169):
        
        # Call to format(...): (line 1169)
        # Processing the call arguments (line 1169)
        # Getting the type of 'x' (line 1169)
        x_148673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 38), 'x', False)
        # Processing the call keyword arguments (line 1169)
        kwargs_148674 = {}
        unicode_148671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1169, 20), 'unicode', u'${:.5f}$')
        # Obtaining the member 'format' of a type (line 1169)
        format_148672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 20), unicode_148671, 'format')
        # Calling format(args, kwargs) (line 1169)
        format_call_result_148675 = invoke(stypy.reporting.localization.Localization(__file__, 1169, 20), format_148672, *[x_148673], **kwargs_148674)
        
        # Assigning a type to the variable 's' (line 1169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 16), 's', format_call_result_148675)
        # SSA join for if statement (line 1166)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1165)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to is_decade(...): (line 1171)
        # Processing the call arguments (line 1171)
        int_148677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1171, 25), 'int')
        # Getting the type of 'x' (line 1171)
        x_148678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 27), 'x', False)
        # Applying the binary operator '-' (line 1171)
        result_sub_148679 = python_operator(stypy.reporting.localization.Localization(__file__, 1171, 25), '-', int_148677, x_148678)
        
        # Processing the call keyword arguments (line 1171)
        kwargs_148680 = {}
        # Getting the type of 'is_decade' (line 1171)
        is_decade_148676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 15), 'is_decade', False)
        # Calling is_decade(args, kwargs) (line 1171)
        is_decade_call_result_148681 = invoke(stypy.reporting.localization.Localization(__file__, 1171, 15), is_decade_148676, *[result_sub_148679], **kwargs_148680)
        
        # Testing the type of an if condition (line 1171)
        if_condition_148682 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1171, 12), is_decade_call_result_148681)
        # Assigning a type to the variable 'if_condition_148682' (line 1171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1171, 12), 'if_condition_148682', if_condition_148682)
        # SSA begins for if statement (line 1171)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1172):
        
        # Assigning a Call to a Name (line 1172):
        
        # Call to format(...): (line 1172)
        # Processing the call arguments (line 1172)
        
        # Call to log10(...): (line 1172)
        # Processing the call arguments (line 1172)
        int_148687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1172, 56), 'int')
        # Getting the type of 'x' (line 1172)
        x_148688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 58), 'x', False)
        # Applying the binary operator '-' (line 1172)
        result_sub_148689 = python_operator(stypy.reporting.localization.Localization(__file__, 1172, 56), '-', int_148687, x_148688)
        
        # Processing the call keyword arguments (line 1172)
        kwargs_148690 = {}
        # Getting the type of 'np' (line 1172)
        np_148685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 47), 'np', False)
        # Obtaining the member 'log10' of a type (line 1172)
        log10_148686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 47), np_148685, 'log10')
        # Calling log10(args, kwargs) (line 1172)
        log10_call_result_148691 = invoke(stypy.reporting.localization.Localization(__file__, 1172, 47), log10_148686, *[result_sub_148689], **kwargs_148690)
        
        # Processing the call keyword arguments (line 1172)
        kwargs_148692 = {}
        unicode_148683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1172, 20), 'unicode', u'$1-10^{{{:.0f}}}$')
        # Obtaining the member 'format' of a type (line 1172)
        format_148684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 20), unicode_148683, 'format')
        # Calling format(args, kwargs) (line 1172)
        format_call_result_148693 = invoke(stypy.reporting.localization.Localization(__file__, 1172, 20), format_148684, *[log10_call_result_148691], **kwargs_148692)
        
        # Assigning a type to the variable 's' (line 1172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1172, 16), 's', format_call_result_148693)
        # SSA branch for the else part of an if statement (line 1171)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1174):
        
        # Assigning a Call to a Name (line 1174):
        
        # Call to format(...): (line 1174)
        # Processing the call arguments (line 1174)
        int_148696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1174, 40), 'int')
        # Getting the type of 'x' (line 1174)
        x_148697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 42), 'x', False)
        # Applying the binary operator '-' (line 1174)
        result_sub_148698 = python_operator(stypy.reporting.localization.Localization(__file__, 1174, 40), '-', int_148696, x_148697)
        
        # Processing the call keyword arguments (line 1174)
        kwargs_148699 = {}
        unicode_148694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1174, 20), 'unicode', u'$1-{:.5f}$')
        # Obtaining the member 'format' of a type (line 1174)
        format_148695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1174, 20), unicode_148694, 'format')
        # Calling format(args, kwargs) (line 1174)
        format_call_result_148700 = invoke(stypy.reporting.localization.Localization(__file__, 1174, 20), format_148695, *[result_sub_148698], **kwargs_148699)
        
        # Assigning a type to the variable 's' (line 1174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1174, 16), 's', format_call_result_148700)
        # SSA join for if statement (line 1171)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1165)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1163)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 's' (line 1175)
        s_148701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 15), 's')
        # Assigning a type to the variable 'stypy_return_type' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 8), 'stypy_return_type', s_148701)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1161)
        stypy_return_type_148702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148702)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_148702


    @norecursion
    def format_data_short(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'format_data_short'
        module_type_store = module_type_store.open_function_context('format_data_short', 1177, 4, False)
        # Assigning a type to the variable 'self' (line 1178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1178, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogitFormatter.format_data_short.__dict__.__setitem__('stypy_localization', localization)
        LogitFormatter.format_data_short.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogitFormatter.format_data_short.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogitFormatter.format_data_short.__dict__.__setitem__('stypy_function_name', 'LogitFormatter.format_data_short')
        LogitFormatter.format_data_short.__dict__.__setitem__('stypy_param_names_list', ['value'])
        LogitFormatter.format_data_short.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogitFormatter.format_data_short.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogitFormatter.format_data_short.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogitFormatter.format_data_short.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogitFormatter.format_data_short.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogitFormatter.format_data_short.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogitFormatter.format_data_short', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'format_data_short', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'format_data_short(...)' code ##################

        unicode_148703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1178, 8), 'unicode', u'return a short formatted string representation of a number')
        unicode_148704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 15), 'unicode', u'%-12g')
        # Getting the type of 'value' (line 1179)
        value_148705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 25), 'value')
        # Applying the binary operator '%' (line 1179)
        result_mod_148706 = python_operator(stypy.reporting.localization.Localization(__file__, 1179, 15), '%', unicode_148704, value_148705)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 8), 'stypy_return_type', result_mod_148706)
        
        # ################# End of 'format_data_short(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'format_data_short' in the type store
        # Getting the type of 'stypy_return_type' (line 1177)
        stypy_return_type_148707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148707)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'format_data_short'
        return stypy_return_type_148707


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1157, 0, False)
        # Assigning a type to the variable 'self' (line 1158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1158, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogitFormatter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'LogitFormatter' (line 1157)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1157, 0), 'LogitFormatter', LogitFormatter)
# Declaration of the 'EngFormatter' class
# Getting the type of 'Formatter' (line 1182)
Formatter_148708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 19), 'Formatter')

class EngFormatter(Formatter_148708, ):
    unicode_148709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, (-1)), 'unicode', u'\n    Formats axis values using engineering prefixes to represent powers\n    of 1000, plus a specified unit, e.g., 10 MHz instead of 1e7.\n    ')
    
    # Assigning a Dict to a Name (line 1189):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_148710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1209, 28), 'unicode', u'')
        # Getting the type of 'None' (line 1209)
        None_148711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 39), 'None')
        unicode_148712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1209, 49), 'unicode', u' ')
        defaults = [unicode_148710, None_148711, unicode_148712]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1209, 4, False)
        # Assigning a type to the variable 'self' (line 1210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1210, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EngFormatter.__init__', ['unit', 'places', 'sep'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['unit', 'places', 'sep'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_148713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1235, (-1)), 'unicode', u'\n        Parameters\n        ----------\n        unit : str (default: "")\n            Unit symbol to use, suitable for use with single-letter\n            representations of powers of 1000. For example, \'Hz\' or \'m\'.\n\n        places : int (default: None)\n            Precision with which to display the number, specified in\n            digits after the decimal point (there will be between one\n            and three digits before the decimal point). If it is None,\n            the formatting falls back to the floating point format \'%g\',\n            which displays up to 6 *significant* digits, i.e. the equivalent\n            value for *places* varies between 0 and 5 (inclusive).\n\n        sep : str (default: " ")\n            Separator used between the value and the prefix/unit. For\n            example, one get \'3.14 mV\' if ``sep`` is " " (default) and\n            \'3.14mV\' if ``sep`` is "". Besides the default behavior, some\n            other useful options may be:\n\n            * ``sep=""`` to append directly the prefix/unit to the value;\n            * ``sep="\\N{THIN SPACE}"`` (``U+2009``);\n            * ``sep="\\N{NARROW NO-BREAK SPACE}"`` (``U+202F``);\n            * ``sep="\\N{NO-BREAK SPACE}"`` (``U+00A0``).\n        ')
        
        # Assigning a Name to a Attribute (line 1236):
        
        # Assigning a Name to a Attribute (line 1236):
        # Getting the type of 'unit' (line 1236)
        unit_148714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 20), 'unit')
        # Getting the type of 'self' (line 1236)
        self_148715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), 'self')
        # Setting the type of the member 'unit' of a type (line 1236)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1236, 8), self_148715, 'unit', unit_148714)
        
        # Assigning a Name to a Attribute (line 1237):
        
        # Assigning a Name to a Attribute (line 1237):
        # Getting the type of 'places' (line 1237)
        places_148716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 22), 'places')
        # Getting the type of 'self' (line 1237)
        self_148717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 8), 'self')
        # Setting the type of the member 'places' of a type (line 1237)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1237, 8), self_148717, 'places', places_148716)
        
        # Assigning a Name to a Attribute (line 1238):
        
        # Assigning a Name to a Attribute (line 1238):
        # Getting the type of 'sep' (line 1238)
        sep_148718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 19), 'sep')
        # Getting the type of 'self' (line 1238)
        self_148719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 8), 'self')
        # Setting the type of the member 'sep' of a type (line 1238)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 8), self_148719, 'sep', sep_148718)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1240)
        None_148720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 30), 'None')
        defaults = [None_148720]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1240, 4, False)
        # Assigning a type to the variable 'self' (line 1241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1241, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EngFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        EngFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EngFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        EngFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'EngFormatter.__call__')
        EngFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        EngFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        EngFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EngFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        EngFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        EngFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EngFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EngFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Assigning a BinOp to a Name (line 1241):
        
        # Assigning a BinOp to a Name (line 1241):
        unicode_148721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1241, 12), 'unicode', u'%s%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1241)
        tuple_148722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1241, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1241)
        # Adding element type (line 1241)
        
        # Call to format_eng(...): (line 1241)
        # Processing the call arguments (line 1241)
        # Getting the type of 'x' (line 1241)
        x_148725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 38), 'x', False)
        # Processing the call keyword arguments (line 1241)
        kwargs_148726 = {}
        # Getting the type of 'self' (line 1241)
        self_148723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 22), 'self', False)
        # Obtaining the member 'format_eng' of a type (line 1241)
        format_eng_148724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 22), self_148723, 'format_eng')
        # Calling format_eng(args, kwargs) (line 1241)
        format_eng_call_result_148727 = invoke(stypy.reporting.localization.Localization(__file__, 1241, 22), format_eng_148724, *[x_148725], **kwargs_148726)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1241, 22), tuple_148722, format_eng_call_result_148727)
        # Adding element type (line 1241)
        # Getting the type of 'self' (line 1241)
        self_148728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 42), 'self')
        # Obtaining the member 'unit' of a type (line 1241)
        unit_148729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 42), self_148728, 'unit')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1241, 22), tuple_148722, unit_148729)
        
        # Applying the binary operator '%' (line 1241)
        result_mod_148730 = python_operator(stypy.reporting.localization.Localization(__file__, 1241, 12), '%', unicode_148721, tuple_148722)
        
        # Assigning a type to the variable 's' (line 1241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1241, 8), 's', result_mod_148730)
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 1243)
        # Processing the call arguments (line 1243)
        # Getting the type of 'self' (line 1243)
        self_148732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 15), 'self', False)
        # Obtaining the member 'sep' of a type (line 1243)
        sep_148733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 15), self_148732, 'sep')
        # Processing the call keyword arguments (line 1243)
        kwargs_148734 = {}
        # Getting the type of 'len' (line 1243)
        len_148731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 11), 'len', False)
        # Calling len(args, kwargs) (line 1243)
        len_call_result_148735 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 11), len_148731, *[sep_148733], **kwargs_148734)
        
        int_148736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 27), 'int')
        # Applying the binary operator '>' (line 1243)
        result_gt_148737 = python_operator(stypy.reporting.localization.Localization(__file__, 1243, 11), '>', len_call_result_148735, int_148736)
        
        
        # Call to endswith(...): (line 1243)
        # Processing the call arguments (line 1243)
        # Getting the type of 'self' (line 1243)
        self_148740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 44), 'self', False)
        # Obtaining the member 'sep' of a type (line 1243)
        sep_148741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 44), self_148740, 'sep')
        # Processing the call keyword arguments (line 1243)
        kwargs_148742 = {}
        # Getting the type of 's' (line 1243)
        s_148738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 33), 's', False)
        # Obtaining the member 'endswith' of a type (line 1243)
        endswith_148739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 33), s_148738, 'endswith')
        # Calling endswith(args, kwargs) (line 1243)
        endswith_call_result_148743 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 33), endswith_148739, *[sep_148741], **kwargs_148742)
        
        # Applying the binary operator 'and' (line 1243)
        result_and_keyword_148744 = python_operator(stypy.reporting.localization.Localization(__file__, 1243, 11), 'and', result_gt_148737, endswith_call_result_148743)
        
        # Testing the type of an if condition (line 1243)
        if_condition_148745 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1243, 8), result_and_keyword_148744)
        # Assigning a type to the variable 'if_condition_148745' (line 1243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 8), 'if_condition_148745', if_condition_148745)
        # SSA begins for if statement (line 1243)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1244):
        
        # Assigning a Subscript to a Name (line 1244):
        
        # Obtaining the type of the subscript
        
        
        # Call to len(...): (line 1244)
        # Processing the call arguments (line 1244)
        # Getting the type of 'self' (line 1244)
        self_148747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 24), 'self', False)
        # Obtaining the member 'sep' of a type (line 1244)
        sep_148748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1244, 24), self_148747, 'sep')
        # Processing the call keyword arguments (line 1244)
        kwargs_148749 = {}
        # Getting the type of 'len' (line 1244)
        len_148746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 20), 'len', False)
        # Calling len(args, kwargs) (line 1244)
        len_call_result_148750 = invoke(stypy.reporting.localization.Localization(__file__, 1244, 20), len_148746, *[sep_148748], **kwargs_148749)
        
        # Applying the 'usub' unary operator (line 1244)
        result___neg___148751 = python_operator(stypy.reporting.localization.Localization(__file__, 1244, 19), 'usub', len_call_result_148750)
        
        slice_148752 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1244, 16), None, result___neg___148751, None)
        # Getting the type of 's' (line 1244)
        s_148753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 16), 's')
        # Obtaining the member '__getitem__' of a type (line 1244)
        getitem___148754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1244, 16), s_148753, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1244)
        subscript_call_result_148755 = invoke(stypy.reporting.localization.Localization(__file__, 1244, 16), getitem___148754, slice_148752)
        
        # Assigning a type to the variable 's' (line 1244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1244, 12), 's', subscript_call_result_148755)
        # SSA join for if statement (line 1243)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to fix_minus(...): (line 1245)
        # Processing the call arguments (line 1245)
        # Getting the type of 's' (line 1245)
        s_148758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 30), 's', False)
        # Processing the call keyword arguments (line 1245)
        kwargs_148759 = {}
        # Getting the type of 'self' (line 1245)
        self_148756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 15), 'self', False)
        # Obtaining the member 'fix_minus' of a type (line 1245)
        fix_minus_148757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1245, 15), self_148756, 'fix_minus')
        # Calling fix_minus(args, kwargs) (line 1245)
        fix_minus_call_result_148760 = invoke(stypy.reporting.localization.Localization(__file__, 1245, 15), fix_minus_148757, *[s_148758], **kwargs_148759)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 8), 'stypy_return_type', fix_minus_call_result_148760)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1240)
        stypy_return_type_148761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148761)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_148761


    @norecursion
    def format_eng(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'format_eng'
        module_type_store = module_type_store.open_function_context('format_eng', 1247, 4, False)
        # Assigning a type to the variable 'self' (line 1248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1248, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EngFormatter.format_eng.__dict__.__setitem__('stypy_localization', localization)
        EngFormatter.format_eng.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EngFormatter.format_eng.__dict__.__setitem__('stypy_type_store', module_type_store)
        EngFormatter.format_eng.__dict__.__setitem__('stypy_function_name', 'EngFormatter.format_eng')
        EngFormatter.format_eng.__dict__.__setitem__('stypy_param_names_list', ['num'])
        EngFormatter.format_eng.__dict__.__setitem__('stypy_varargs_param_name', None)
        EngFormatter.format_eng.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EngFormatter.format_eng.__dict__.__setitem__('stypy_call_defaults', defaults)
        EngFormatter.format_eng.__dict__.__setitem__('stypy_call_varargs', varargs)
        EngFormatter.format_eng.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EngFormatter.format_eng.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EngFormatter.format_eng', ['num'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'format_eng', localization, ['num'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'format_eng(...)' code ##################

        unicode_148762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1264, (-1)), 'unicode', u'\n        Formats a number in engineering notation, appending a letter\n        representing the power of 1000 of the original number.\n        Some examples:\n\n        >>> format_eng(0)       # for self.places = 0\n        \'0\'\n\n        >>> format_eng(1000000) # for self.places = 1\n        \'1.0 M\'\n\n        >>> format_eng("-1e-6") # for self.places = 2\n        u\'-1.00 \u03bc\'\n\n        `num` may be a numeric value or a string that can be converted\n        to a numeric value with ``float(num)``.\n        ')
        
        
        # Call to isinstance(...): (line 1265)
        # Processing the call arguments (line 1265)
        # Getting the type of 'num' (line 1265)
        num_148764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 22), 'num', False)
        # Getting the type of 'six' (line 1265)
        six_148765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 27), 'six', False)
        # Obtaining the member 'string_types' of a type (line 1265)
        string_types_148766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1265, 27), six_148765, 'string_types')
        # Processing the call keyword arguments (line 1265)
        kwargs_148767 = {}
        # Getting the type of 'isinstance' (line 1265)
        isinstance_148763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1265)
        isinstance_call_result_148768 = invoke(stypy.reporting.localization.Localization(__file__, 1265, 11), isinstance_148763, *[num_148764, string_types_148766], **kwargs_148767)
        
        # Testing the type of an if condition (line 1265)
        if_condition_148769 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1265, 8), isinstance_call_result_148768)
        # Assigning a type to the variable 'if_condition_148769' (line 1265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1265, 8), 'if_condition_148769', if_condition_148769)
        # SSA begins for if statement (line 1265)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1266)
        # Processing the call arguments (line 1266)
        unicode_148772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1267, 16), 'unicode', u'Passing a string as *num* argument is deprecated sinceMatplotlib 2.1, and is expected to be removed in 2.3.')
        # Getting the type of 'mplDeprecation' (line 1269)
        mplDeprecation_148773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 16), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 1266)
        kwargs_148774 = {}
        # Getting the type of 'warnings' (line 1266)
        warnings_148770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1266)
        warn_148771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 12), warnings_148770, 'warn')
        # Calling warn(args, kwargs) (line 1266)
        warn_call_result_148775 = invoke(stypy.reporting.localization.Localization(__file__, 1266, 12), warn_148771, *[unicode_148772, mplDeprecation_148773], **kwargs_148774)
        
        # SSA join for if statement (line 1265)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1271):
        
        # Assigning a Call to a Name (line 1271):
        
        # Call to float(...): (line 1271)
        # Processing the call arguments (line 1271)
        # Getting the type of 'num' (line 1271)
        num_148777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 21), 'num', False)
        # Processing the call keyword arguments (line 1271)
        kwargs_148778 = {}
        # Getting the type of 'float' (line 1271)
        float_148776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 15), 'float', False)
        # Calling float(args, kwargs) (line 1271)
        float_call_result_148779 = invoke(stypy.reporting.localization.Localization(__file__, 1271, 15), float_148776, *[num_148777], **kwargs_148778)
        
        # Assigning a type to the variable 'dnum' (line 1271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 8), 'dnum', float_call_result_148779)
        
        # Assigning a Num to a Name (line 1272):
        
        # Assigning a Num to a Name (line 1272):
        int_148780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1272, 15), 'int')
        # Assigning a type to the variable 'sign' (line 1272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 8), 'sign', int_148780)
        
        # Assigning a IfExp to a Name (line 1273):
        
        # Assigning a IfExp to a Name (line 1273):
        
        
        # Getting the type of 'self' (line 1273)
        self_148781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 21), 'self')
        # Obtaining the member 'places' of a type (line 1273)
        places_148782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1273, 21), self_148781, 'places')
        # Getting the type of 'None' (line 1273)
        None_148783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 36), 'None')
        # Applying the binary operator 'is' (line 1273)
        result_is__148784 = python_operator(stypy.reporting.localization.Localization(__file__, 1273, 21), 'is', places_148782, None_148783)
        
        # Testing the type of an if expression (line 1273)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1273, 14), result_is__148784)
        # SSA begins for if expression (line 1273)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        unicode_148785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1273, 14), 'unicode', u'g')
        # SSA branch for the else part of an if expression (line 1273)
        module_type_store.open_ssa_branch('if expression else')
        
        # Call to format(...): (line 1273)
        # Processing the call arguments (line 1273)
        # Getting the type of 'self' (line 1273)
        self_148788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 62), 'self', False)
        # Obtaining the member 'places' of a type (line 1273)
        places_148789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1273, 62), self_148788, 'places')
        # Processing the call keyword arguments (line 1273)
        kwargs_148790 = {}
        unicode_148786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1273, 46), 'unicode', u'.{:d}f')
        # Obtaining the member 'format' of a type (line 1273)
        format_148787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1273, 46), unicode_148786, 'format')
        # Calling format(args, kwargs) (line 1273)
        format_call_result_148791 = invoke(stypy.reporting.localization.Localization(__file__, 1273, 46), format_148787, *[places_148789], **kwargs_148790)
        
        # SSA join for if expression (line 1273)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_148792 = union_type.UnionType.add(unicode_148785, format_call_result_148791)
        
        # Assigning a type to the variable 'fmt' (line 1273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1273, 8), 'fmt', if_exp_148792)
        
        
        # Getting the type of 'dnum' (line 1275)
        dnum_148793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 11), 'dnum')
        int_148794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1275, 18), 'int')
        # Applying the binary operator '<' (line 1275)
        result_lt_148795 = python_operator(stypy.reporting.localization.Localization(__file__, 1275, 11), '<', dnum_148793, int_148794)
        
        # Testing the type of an if condition (line 1275)
        if_condition_148796 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1275, 8), result_lt_148795)
        # Assigning a type to the variable 'if_condition_148796' (line 1275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 8), 'if_condition_148796', if_condition_148796)
        # SSA begins for if statement (line 1275)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 1276):
        
        # Assigning a Num to a Name (line 1276):
        int_148797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1276, 19), 'int')
        # Assigning a type to the variable 'sign' (line 1276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 12), 'sign', int_148797)
        
        # Assigning a UnaryOp to a Name (line 1277):
        
        # Assigning a UnaryOp to a Name (line 1277):
        
        # Getting the type of 'dnum' (line 1277)
        dnum_148798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 20), 'dnum')
        # Applying the 'usub' unary operator (line 1277)
        result___neg___148799 = python_operator(stypy.reporting.localization.Localization(__file__, 1277, 19), 'usub', dnum_148798)
        
        # Assigning a type to the variable 'dnum' (line 1277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1277, 12), 'dnum', result___neg___148799)
        # SSA join for if statement (line 1275)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'dnum' (line 1279)
        dnum_148800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 11), 'dnum')
        int_148801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1279, 19), 'int')
        # Applying the binary operator '!=' (line 1279)
        result_ne_148802 = python_operator(stypy.reporting.localization.Localization(__file__, 1279, 11), '!=', dnum_148800, int_148801)
        
        # Testing the type of an if condition (line 1279)
        if_condition_148803 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1279, 8), result_ne_148802)
        # Assigning a type to the variable 'if_condition_148803' (line 1279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1279, 8), 'if_condition_148803', if_condition_148803)
        # SSA begins for if statement (line 1279)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1280):
        
        # Assigning a Call to a Name (line 1280):
        
        # Call to int(...): (line 1280)
        # Processing the call arguments (line 1280)
        
        # Call to floor(...): (line 1280)
        # Processing the call arguments (line 1280)
        
        # Call to log10(...): (line 1280)
        # Processing the call arguments (line 1280)
        # Getting the type of 'dnum' (line 1280)
        dnum_148809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 46), 'dnum', False)
        # Processing the call keyword arguments (line 1280)
        kwargs_148810 = {}
        # Getting the type of 'math' (line 1280)
        math_148807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 35), 'math', False)
        # Obtaining the member 'log10' of a type (line 1280)
        log10_148808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 35), math_148807, 'log10')
        # Calling log10(args, kwargs) (line 1280)
        log10_call_result_148811 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 35), log10_148808, *[dnum_148809], **kwargs_148810)
        
        int_148812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1280, 54), 'int')
        # Applying the binary operator 'div' (line 1280)
        result_div_148813 = python_operator(stypy.reporting.localization.Localization(__file__, 1280, 35), 'div', log10_call_result_148811, int_148812)
        
        # Processing the call keyword arguments (line 1280)
        kwargs_148814 = {}
        # Getting the type of 'math' (line 1280)
        math_148805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 24), 'math', False)
        # Obtaining the member 'floor' of a type (line 1280)
        floor_148806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 24), math_148805, 'floor')
        # Calling floor(args, kwargs) (line 1280)
        floor_call_result_148815 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 24), floor_148806, *[result_div_148813], **kwargs_148814)
        
        int_148816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1280, 59), 'int')
        # Applying the binary operator '*' (line 1280)
        result_mul_148817 = python_operator(stypy.reporting.localization.Localization(__file__, 1280, 24), '*', floor_call_result_148815, int_148816)
        
        # Processing the call keyword arguments (line 1280)
        kwargs_148818 = {}
        # Getting the type of 'int' (line 1280)
        int_148804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 20), 'int', False)
        # Calling int(args, kwargs) (line 1280)
        int_call_result_148819 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 20), int_148804, *[result_mul_148817], **kwargs_148818)
        
        # Assigning a type to the variable 'pow10' (line 1280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1280, 12), 'pow10', int_call_result_148819)
        # SSA branch for the else part of an if statement (line 1279)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 1282):
        
        # Assigning a Num to a Name (line 1282):
        int_148820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1282, 20), 'int')
        # Assigning a type to the variable 'pow10' (line 1282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1282, 12), 'pow10', int_148820)
        
        # Assigning a Num to a Name (line 1286):
        
        # Assigning a Num to a Name (line 1286):
        float_148821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1286, 19), 'float')
        # Assigning a type to the variable 'dnum' (line 1286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1286, 12), 'dnum', float_148821)
        # SSA join for if statement (line 1279)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1288):
        
        # Assigning a Call to a Name (line 1288):
        
        # Call to clip(...): (line 1288)
        # Processing the call arguments (line 1288)
        # Getting the type of 'pow10' (line 1288)
        pow10_148824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 24), 'pow10', False)
        
        # Call to min(...): (line 1288)
        # Processing the call arguments (line 1288)
        # Getting the type of 'self' (line 1288)
        self_148826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 35), 'self', False)
        # Obtaining the member 'ENG_PREFIXES' of a type (line 1288)
        ENG_PREFIXES_148827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1288, 35), self_148826, 'ENG_PREFIXES')
        # Processing the call keyword arguments (line 1288)
        kwargs_148828 = {}
        # Getting the type of 'min' (line 1288)
        min_148825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 31), 'min', False)
        # Calling min(args, kwargs) (line 1288)
        min_call_result_148829 = invoke(stypy.reporting.localization.Localization(__file__, 1288, 31), min_148825, *[ENG_PREFIXES_148827], **kwargs_148828)
        
        
        # Call to max(...): (line 1288)
        # Processing the call arguments (line 1288)
        # Getting the type of 'self' (line 1288)
        self_148831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 59), 'self', False)
        # Obtaining the member 'ENG_PREFIXES' of a type (line 1288)
        ENG_PREFIXES_148832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1288, 59), self_148831, 'ENG_PREFIXES')
        # Processing the call keyword arguments (line 1288)
        kwargs_148833 = {}
        # Getting the type of 'max' (line 1288)
        max_148830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 55), 'max', False)
        # Calling max(args, kwargs) (line 1288)
        max_call_result_148834 = invoke(stypy.reporting.localization.Localization(__file__, 1288, 55), max_148830, *[ENG_PREFIXES_148832], **kwargs_148833)
        
        # Processing the call keyword arguments (line 1288)
        kwargs_148835 = {}
        # Getting the type of 'np' (line 1288)
        np_148822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 16), 'np', False)
        # Obtaining the member 'clip' of a type (line 1288)
        clip_148823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1288, 16), np_148822, 'clip')
        # Calling clip(args, kwargs) (line 1288)
        clip_call_result_148836 = invoke(stypy.reporting.localization.Localization(__file__, 1288, 16), clip_148823, *[pow10_148824, min_call_result_148829, max_call_result_148834], **kwargs_148835)
        
        # Assigning a type to the variable 'pow10' (line 1288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1288, 8), 'pow10', clip_call_result_148836)
        
        # Assigning a BinOp to a Name (line 1290):
        
        # Assigning a BinOp to a Name (line 1290):
        # Getting the type of 'sign' (line 1290)
        sign_148837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 15), 'sign')
        # Getting the type of 'dnum' (line 1290)
        dnum_148838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 22), 'dnum')
        # Applying the binary operator '*' (line 1290)
        result_mul_148839 = python_operator(stypy.reporting.localization.Localization(__file__, 1290, 15), '*', sign_148837, dnum_148838)
        
        float_148840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1290, 30), 'float')
        # Getting the type of 'pow10' (line 1290)
        pow10_148841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 38), 'pow10')
        # Applying the binary operator '**' (line 1290)
        result_pow_148842 = python_operator(stypy.reporting.localization.Localization(__file__, 1290, 30), '**', float_148840, pow10_148841)
        
        # Applying the binary operator 'div' (line 1290)
        result_div_148843 = python_operator(stypy.reporting.localization.Localization(__file__, 1290, 27), 'div', result_mul_148839, result_pow_148842)
        
        # Assigning a type to the variable 'mant' (line 1290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 8), 'mant', result_div_148843)
        
        # Assigning a Call to a Name (line 1295):
        
        # Assigning a Call to a Name (line 1295):
        
        # Call to float(...): (line 1295)
        # Processing the call arguments (line 1295)
        
        # Call to format(...): (line 1295)
        # Processing the call keyword arguments (line 1295)
        # Getting the type of 'mant' (line 1295)
        mant_148847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 50), 'mant', False)
        keyword_148848 = mant_148847
        # Getting the type of 'fmt' (line 1295)
        fmt_148849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 60), 'fmt', False)
        keyword_148850 = fmt_148849
        kwargs_148851 = {'fmt': keyword_148850, 'mant': keyword_148848}
        unicode_148845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1295, 23), 'unicode', u'{mant:{fmt}}')
        # Obtaining the member 'format' of a type (line 1295)
        format_148846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 23), unicode_148845, 'format')
        # Calling format(args, kwargs) (line 1295)
        format_call_result_148852 = invoke(stypy.reporting.localization.Localization(__file__, 1295, 23), format_148846, *[], **kwargs_148851)
        
        # Processing the call keyword arguments (line 1295)
        kwargs_148853 = {}
        # Getting the type of 'float' (line 1295)
        float_148844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 17), 'float', False)
        # Calling float(args, kwargs) (line 1295)
        float_call_result_148854 = invoke(stypy.reporting.localization.Localization(__file__, 1295, 17), float_148844, *[format_call_result_148852], **kwargs_148853)
        
        # Assigning a type to the variable '_fmant' (line 1295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1295, 8), '_fmant', float_call_result_148854)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of '_fmant' (line 1296)
        _fmant_148855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 11), '_fmant')
        int_148856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1296, 21), 'int')
        # Applying the binary operator '>=' (line 1296)
        result_ge_148857 = python_operator(stypy.reporting.localization.Localization(__file__, 1296, 11), '>=', _fmant_148855, int_148856)
        
        
        # Getting the type of 'pow10' (line 1296)
        pow10_148858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 30), 'pow10')
        
        # Call to max(...): (line 1296)
        # Processing the call arguments (line 1296)
        # Getting the type of 'self' (line 1296)
        self_148860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 43), 'self', False)
        # Obtaining the member 'ENG_PREFIXES' of a type (line 1296)
        ENG_PREFIXES_148861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 43), self_148860, 'ENG_PREFIXES')
        # Processing the call keyword arguments (line 1296)
        kwargs_148862 = {}
        # Getting the type of 'max' (line 1296)
        max_148859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 39), 'max', False)
        # Calling max(args, kwargs) (line 1296)
        max_call_result_148863 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 39), max_148859, *[ENG_PREFIXES_148861], **kwargs_148862)
        
        # Applying the binary operator '!=' (line 1296)
        result_ne_148864 = python_operator(stypy.reporting.localization.Localization(__file__, 1296, 30), '!=', pow10_148858, max_call_result_148863)
        
        # Applying the binary operator 'and' (line 1296)
        result_and_keyword_148865 = python_operator(stypy.reporting.localization.Localization(__file__, 1296, 11), 'and', result_ge_148857, result_ne_148864)
        
        # Testing the type of an if condition (line 1296)
        if_condition_148866 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1296, 8), result_and_keyword_148865)
        # Assigning a type to the variable 'if_condition_148866' (line 1296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 8), 'if_condition_148866', if_condition_148866)
        # SSA begins for if statement (line 1296)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'mant' (line 1297)
        mant_148867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'mant')
        int_148868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 20), 'int')
        # Applying the binary operator 'div=' (line 1297)
        result_div_148869 = python_operator(stypy.reporting.localization.Localization(__file__, 1297, 12), 'div=', mant_148867, int_148868)
        # Assigning a type to the variable 'mant' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'mant', result_div_148869)
        
        
        # Getting the type of 'pow10' (line 1298)
        pow10_148870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 12), 'pow10')
        int_148871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 21), 'int')
        # Applying the binary operator '+=' (line 1298)
        result_iadd_148872 = python_operator(stypy.reporting.localization.Localization(__file__, 1298, 12), '+=', pow10_148870, int_148871)
        # Assigning a type to the variable 'pow10' (line 1298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 12), 'pow10', result_iadd_148872)
        
        # SSA join for if statement (line 1296)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 1300):
        
        # Assigning a Subscript to a Name (line 1300):
        
        # Obtaining the type of the subscript
        
        # Call to int(...): (line 1300)
        # Processing the call arguments (line 1300)
        # Getting the type of 'pow10' (line 1300)
        pow10_148874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 39), 'pow10', False)
        # Processing the call keyword arguments (line 1300)
        kwargs_148875 = {}
        # Getting the type of 'int' (line 1300)
        int_148873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 35), 'int', False)
        # Calling int(args, kwargs) (line 1300)
        int_call_result_148876 = invoke(stypy.reporting.localization.Localization(__file__, 1300, 35), int_148873, *[pow10_148874], **kwargs_148875)
        
        # Getting the type of 'self' (line 1300)
        self_148877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 17), 'self')
        # Obtaining the member 'ENG_PREFIXES' of a type (line 1300)
        ENG_PREFIXES_148878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1300, 17), self_148877, 'ENG_PREFIXES')
        # Obtaining the member '__getitem__' of a type (line 1300)
        getitem___148879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1300, 17), ENG_PREFIXES_148878, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1300)
        subscript_call_result_148880 = invoke(stypy.reporting.localization.Localization(__file__, 1300, 17), getitem___148879, int_call_result_148876)
        
        # Assigning a type to the variable 'prefix' (line 1300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1300, 8), 'prefix', subscript_call_result_148880)
        
        # Assigning a Call to a Name (line 1302):
        
        # Assigning a Call to a Name (line 1302):
        
        # Call to format(...): (line 1302)
        # Processing the call keyword arguments (line 1302)
        # Getting the type of 'mant' (line 1303)
        mant_148883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 17), 'mant', False)
        keyword_148884 = mant_148883
        # Getting the type of 'self' (line 1303)
        self_148885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 27), 'self', False)
        # Obtaining the member 'sep' of a type (line 1303)
        sep_148886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1303, 27), self_148885, 'sep')
        keyword_148887 = sep_148886
        # Getting the type of 'prefix' (line 1303)
        prefix_148888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 44), 'prefix', False)
        keyword_148889 = prefix_148888
        # Getting the type of 'fmt' (line 1303)
        fmt_148890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 56), 'fmt', False)
        keyword_148891 = fmt_148890
        kwargs_148892 = {'prefix': keyword_148889, 'mant': keyword_148884, 'fmt': keyword_148891, 'sep': keyword_148887}
        unicode_148881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1302, 20), 'unicode', u'{mant:{fmt}}{sep}{prefix}')
        # Obtaining the member 'format' of a type (line 1302)
        format_148882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 20), unicode_148881, 'format')
        # Calling format(args, kwargs) (line 1302)
        format_call_result_148893 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 20), format_148882, *[], **kwargs_148892)
        
        # Assigning a type to the variable 'formatted' (line 1302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 8), 'formatted', format_call_result_148893)
        # Getting the type of 'formatted' (line 1305)
        formatted_148894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 15), 'formatted')
        # Assigning a type to the variable 'stypy_return_type' (line 1305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 8), 'stypy_return_type', formatted_148894)
        
        # ################# End of 'format_eng(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'format_eng' in the type store
        # Getting the type of 'stypy_return_type' (line 1247)
        stypy_return_type_148895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148895)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'format_eng'
        return stypy_return_type_148895


# Assigning a type to the variable 'EngFormatter' (line 1182)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 0), 'EngFormatter', EngFormatter)

# Assigning a Dict to a Name (line 1189):

# Obtaining an instance of the builtin type 'dict' (line 1189)
dict_148896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 19), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 1189)
# Adding element type (key, value) (line 1189)
int_148897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 8), 'int')
unicode_148898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 13), 'unicode', u'y')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148897, unicode_148898))
# Adding element type (key, value) (line 1189)
int_148899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1191, 8), 'int')
unicode_148900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1191, 13), 'unicode', u'z')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148899, unicode_148900))
# Adding element type (key, value) (line 1189)
int_148901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1192, 8), 'int')
unicode_148902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1192, 13), 'unicode', u'a')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148901, unicode_148902))
# Adding element type (key, value) (line 1189)
int_148903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1193, 8), 'int')
unicode_148904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1193, 13), 'unicode', u'f')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148903, unicode_148904))
# Adding element type (key, value) (line 1189)
int_148905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 8), 'int')
unicode_148906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 13), 'unicode', u'p')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148905, unicode_148906))
# Adding element type (key, value) (line 1189)
int_148907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1195, 9), 'int')
unicode_148908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1195, 13), 'unicode', u'n')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148907, unicode_148908))
# Adding element type (key, value) (line 1189)
int_148909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, 9), 'int')
unicode_148910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, 13), 'unicode', u'\u03bc')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148909, unicode_148910))
# Adding element type (key, value) (line 1189)
int_148911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1197, 9), 'int')
unicode_148912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1197, 13), 'unicode', u'm')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148911, unicode_148912))
# Adding element type (key, value) (line 1189)
int_148913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 10), 'int')
unicode_148914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 13), 'unicode', u'')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148913, unicode_148914))
# Adding element type (key, value) (line 1189)
int_148915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 10), 'int')
unicode_148916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 13), 'unicode', u'k')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148915, unicode_148916))
# Adding element type (key, value) (line 1189)
int_148917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, 10), 'int')
unicode_148918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, 13), 'unicode', u'M')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148917, unicode_148918))
# Adding element type (key, value) (line 1189)
int_148919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 10), 'int')
unicode_148920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 13), 'unicode', u'G')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148919, unicode_148920))
# Adding element type (key, value) (line 1189)
int_148921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 9), 'int')
unicode_148922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 13), 'unicode', u'T')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148921, unicode_148922))
# Adding element type (key, value) (line 1189)
int_148923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 9), 'int')
unicode_148924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 13), 'unicode', u'P')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148923, unicode_148924))
# Adding element type (key, value) (line 1189)
int_148925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1204, 9), 'int')
unicode_148926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1204, 13), 'unicode', u'E')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148925, unicode_148926))
# Adding element type (key, value) (line 1189)
int_148927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1205, 9), 'int')
unicode_148928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1205, 13), 'unicode', u'Z')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148927, unicode_148928))
# Adding element type (key, value) (line 1189)
int_148929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1206, 9), 'int')
unicode_148930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1206, 13), 'unicode', u'Y')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), dict_148896, (int_148929, unicode_148930))

# Getting the type of 'EngFormatter'
EngFormatter_148931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'EngFormatter')
# Setting the type of the member 'ENG_PREFIXES' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), EngFormatter_148931, 'ENG_PREFIXES', dict_148896)
# Declaration of the 'PercentFormatter' class
# Getting the type of 'Formatter' (line 1308)
Formatter_148932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 23), 'Formatter')

class PercentFormatter(Formatter_148932, ):
    unicode_148933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1326, (-1)), 'unicode', u'\n    Format numbers as a percentage.\n\n    How the number is converted into a percentage is determined by the\n    `xmax` parameter. `xmax` is the data value that corresponds to 100%.\n    Percentages are computed as ``x / xmax * 100``. So if the data is\n    already scaled to be percentages, `xmax` will be 100. Another common\n    situation is where `xmax` is 1.0.\n\n    `symbol` is a string which will be appended to the label. It may be\n    `None` or empty to indicate that no symbol should be used. LaTeX\n    special characters are escaped in `symbol` whenever latex mode is\n    enabled, unless `is_latex` is `True`.\n\n    `decimals` is the number of decimal places to place after the point.\n    If it is set to `None` (the default), the number will be computed\n    automatically.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_148934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 28), 'int')
        # Getting the type of 'None' (line 1327)
        None_148935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 42), 'None')
        unicode_148936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 55), 'unicode', u'%')
        # Getting the type of 'False' (line 1327)
        False_148937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 69), 'False')
        defaults = [int_148934, None_148935, unicode_148936, False_148937]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1327, 4, False)
        # Assigning a type to the variable 'self' (line 1328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PercentFormatter.__init__', ['xmax', 'decimals', 'symbol', 'is_latex'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['xmax', 'decimals', 'symbol', 'is_latex'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a BinOp to a Attribute (line 1328):
        
        # Assigning a BinOp to a Attribute (line 1328):
        # Getting the type of 'xmax' (line 1328)
        xmax_148938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 20), 'xmax')
        float_148939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1328, 27), 'float')
        # Applying the binary operator '+' (line 1328)
        result_add_148940 = python_operator(stypy.reporting.localization.Localization(__file__, 1328, 20), '+', xmax_148938, float_148939)
        
        # Getting the type of 'self' (line 1328)
        self_148941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 8), 'self')
        # Setting the type of the member 'xmax' of a type (line 1328)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1328, 8), self_148941, 'xmax', result_add_148940)
        
        # Assigning a Name to a Attribute (line 1329):
        
        # Assigning a Name to a Attribute (line 1329):
        # Getting the type of 'decimals' (line 1329)
        decimals_148942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 24), 'decimals')
        # Getting the type of 'self' (line 1329)
        self_148943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 8), 'self')
        # Setting the type of the member 'decimals' of a type (line 1329)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1329, 8), self_148943, 'decimals', decimals_148942)
        
        # Assigning a Name to a Attribute (line 1330):
        
        # Assigning a Name to a Attribute (line 1330):
        # Getting the type of 'symbol' (line 1330)
        symbol_148944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 23), 'symbol')
        # Getting the type of 'self' (line 1330)
        self_148945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 8), 'self')
        # Setting the type of the member '_symbol' of a type (line 1330)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1330, 8), self_148945, '_symbol', symbol_148944)
        
        # Assigning a Name to a Attribute (line 1331):
        
        # Assigning a Name to a Attribute (line 1331):
        # Getting the type of 'is_latex' (line 1331)
        is_latex_148946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 25), 'is_latex')
        # Getting the type of 'self' (line 1331)
        self_148947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 8), 'self')
        # Setting the type of the member '_is_latex' of a type (line 1331)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1331, 8), self_148947, '_is_latex', is_latex_148946)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1333)
        None_148948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 30), 'None')
        defaults = [None_148948]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1333, 4, False)
        # Assigning a type to the variable 'self' (line 1334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1334, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PercentFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        PercentFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PercentFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        PercentFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'PercentFormatter.__call__')
        PercentFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        PercentFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        PercentFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PercentFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        PercentFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        PercentFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PercentFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PercentFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_148949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1336, (-1)), 'unicode', u'\n        Formats the tick as a percentage with the appropriate scaling.\n        ')
        
        # Assigning a Call to a Tuple (line 1337):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 1337)
        # Processing the call keyword arguments (line 1337)
        kwargs_148953 = {}
        # Getting the type of 'self' (line 1337)
        self_148950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 25), 'self', False)
        # Obtaining the member 'axis' of a type (line 1337)
        axis_148951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1337, 25), self_148950, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 1337)
        get_view_interval_148952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1337, 25), axis_148951, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 1337)
        get_view_interval_call_result_148954 = invoke(stypy.reporting.localization.Localization(__file__, 1337, 25), get_view_interval_148952, *[], **kwargs_148953)
        
        # Assigning a type to the variable 'call_assignment_146277' (line 1337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 8), 'call_assignment_146277', get_view_interval_call_result_148954)
        
        # Assigning a Call to a Name (line 1337):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_148957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1337, 8), 'int')
        # Processing the call keyword arguments
        kwargs_148958 = {}
        # Getting the type of 'call_assignment_146277' (line 1337)
        call_assignment_146277_148955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 8), 'call_assignment_146277', False)
        # Obtaining the member '__getitem__' of a type (line 1337)
        getitem___148956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1337, 8), call_assignment_146277_148955, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_148959 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___148956, *[int_148957], **kwargs_148958)
        
        # Assigning a type to the variable 'call_assignment_146278' (line 1337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 8), 'call_assignment_146278', getitem___call_result_148959)
        
        # Assigning a Name to a Name (line 1337):
        # Getting the type of 'call_assignment_146278' (line 1337)
        call_assignment_146278_148960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 8), 'call_assignment_146278')
        # Assigning a type to the variable 'ax_min' (line 1337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 8), 'ax_min', call_assignment_146278_148960)
        
        # Assigning a Call to a Name (line 1337):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_148963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1337, 8), 'int')
        # Processing the call keyword arguments
        kwargs_148964 = {}
        # Getting the type of 'call_assignment_146277' (line 1337)
        call_assignment_146277_148961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 8), 'call_assignment_146277', False)
        # Obtaining the member '__getitem__' of a type (line 1337)
        getitem___148962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1337, 8), call_assignment_146277_148961, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_148965 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___148962, *[int_148963], **kwargs_148964)
        
        # Assigning a type to the variable 'call_assignment_146279' (line 1337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 8), 'call_assignment_146279', getitem___call_result_148965)
        
        # Assigning a Name to a Name (line 1337):
        # Getting the type of 'call_assignment_146279' (line 1337)
        call_assignment_146279_148966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 8), 'call_assignment_146279')
        # Assigning a type to the variable 'ax_max' (line 1337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 16), 'ax_max', call_assignment_146279_148966)
        
        # Assigning a Call to a Name (line 1338):
        
        # Assigning a Call to a Name (line 1338):
        
        # Call to abs(...): (line 1338)
        # Processing the call arguments (line 1338)
        # Getting the type of 'ax_max' (line 1338)
        ax_max_148968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 28), 'ax_max', False)
        # Getting the type of 'ax_min' (line 1338)
        ax_min_148969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 37), 'ax_min', False)
        # Applying the binary operator '-' (line 1338)
        result_sub_148970 = python_operator(stypy.reporting.localization.Localization(__file__, 1338, 28), '-', ax_max_148968, ax_min_148969)
        
        # Processing the call keyword arguments (line 1338)
        kwargs_148971 = {}
        # Getting the type of 'abs' (line 1338)
        abs_148967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 24), 'abs', False)
        # Calling abs(args, kwargs) (line 1338)
        abs_call_result_148972 = invoke(stypy.reporting.localization.Localization(__file__, 1338, 24), abs_148967, *[result_sub_148970], **kwargs_148971)
        
        # Assigning a type to the variable 'display_range' (line 1338)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1338, 8), 'display_range', abs_call_result_148972)
        
        # Call to fix_minus(...): (line 1340)
        # Processing the call arguments (line 1340)
        
        # Call to format_pct(...): (line 1340)
        # Processing the call arguments (line 1340)
        # Getting the type of 'x' (line 1340)
        x_148977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 46), 'x', False)
        # Getting the type of 'display_range' (line 1340)
        display_range_148978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 49), 'display_range', False)
        # Processing the call keyword arguments (line 1340)
        kwargs_148979 = {}
        # Getting the type of 'self' (line 1340)
        self_148975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 30), 'self', False)
        # Obtaining the member 'format_pct' of a type (line 1340)
        format_pct_148976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 30), self_148975, 'format_pct')
        # Calling format_pct(args, kwargs) (line 1340)
        format_pct_call_result_148980 = invoke(stypy.reporting.localization.Localization(__file__, 1340, 30), format_pct_148976, *[x_148977, display_range_148978], **kwargs_148979)
        
        # Processing the call keyword arguments (line 1340)
        kwargs_148981 = {}
        # Getting the type of 'self' (line 1340)
        self_148973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 15), 'self', False)
        # Obtaining the member 'fix_minus' of a type (line 1340)
        fix_minus_148974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 15), self_148973, 'fix_minus')
        # Calling fix_minus(args, kwargs) (line 1340)
        fix_minus_call_result_148982 = invoke(stypy.reporting.localization.Localization(__file__, 1340, 15), fix_minus_148974, *[format_pct_call_result_148980], **kwargs_148981)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 8), 'stypy_return_type', fix_minus_call_result_148982)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1333)
        stypy_return_type_148983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148983)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_148983


    @norecursion
    def format_pct(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'format_pct'
        module_type_store = module_type_store.open_function_context('format_pct', 1342, 4, False)
        # Assigning a type to the variable 'self' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PercentFormatter.format_pct.__dict__.__setitem__('stypy_localization', localization)
        PercentFormatter.format_pct.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PercentFormatter.format_pct.__dict__.__setitem__('stypy_type_store', module_type_store)
        PercentFormatter.format_pct.__dict__.__setitem__('stypy_function_name', 'PercentFormatter.format_pct')
        PercentFormatter.format_pct.__dict__.__setitem__('stypy_param_names_list', ['x', 'display_range'])
        PercentFormatter.format_pct.__dict__.__setitem__('stypy_varargs_param_name', None)
        PercentFormatter.format_pct.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PercentFormatter.format_pct.__dict__.__setitem__('stypy_call_defaults', defaults)
        PercentFormatter.format_pct.__dict__.__setitem__('stypy_call_varargs', varargs)
        PercentFormatter.format_pct.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PercentFormatter.format_pct.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PercentFormatter.format_pct', ['x', 'display_range'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'format_pct', localization, ['x', 'display_range'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'format_pct(...)' code ##################

        unicode_148984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1366, (-1)), 'unicode', u'\n        Formats the number as a percentage number with the correct\n        number of decimals and adds the percent symbol, if any.\n\n        If `self.decimals` is `None`, the number of digits after the\n        decimal point is set based on the `display_range` of the axis\n        as follows:\n\n        +---------------+----------+------------------------+\n        | display_range | decimals |          sample        |\n        +---------------+----------+------------------------+\n        | >50           |     0    | ``x = 34.5`` => 35%    |\n        +---------------+----------+------------------------+\n        | >5            |     1    | ``x = 34.5`` => 34.5%  |\n        +---------------+----------+------------------------+\n        | >0.5          |     2    | ``x = 34.5`` => 34.50% |\n        +---------------+----------+------------------------+\n        |      ...      |    ...   |          ...           |\n        +---------------+----------+------------------------+\n\n        This method will not be very good for tiny axis ranges or\n        extremely large ones. It assumes that the values on the chart\n        are percentages displayed on a reasonable scale.\n        ')
        
        # Assigning a Call to a Name (line 1367):
        
        # Assigning a Call to a Name (line 1367):
        
        # Call to convert_to_pct(...): (line 1367)
        # Processing the call arguments (line 1367)
        # Getting the type of 'x' (line 1367)
        x_148987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 32), 'x', False)
        # Processing the call keyword arguments (line 1367)
        kwargs_148988 = {}
        # Getting the type of 'self' (line 1367)
        self_148985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 12), 'self', False)
        # Obtaining the member 'convert_to_pct' of a type (line 1367)
        convert_to_pct_148986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 12), self_148985, 'convert_to_pct')
        # Calling convert_to_pct(args, kwargs) (line 1367)
        convert_to_pct_call_result_148989 = invoke(stypy.reporting.localization.Localization(__file__, 1367, 12), convert_to_pct_148986, *[x_148987], **kwargs_148988)
        
        # Assigning a type to the variable 'x' (line 1367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1367, 8), 'x', convert_to_pct_call_result_148989)
        
        # Type idiom detected: calculating its left and rigth part (line 1368)
        # Getting the type of 'self' (line 1368)
        self_148990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 11), 'self')
        # Obtaining the member 'decimals' of a type (line 1368)
        decimals_148991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 11), self_148990, 'decimals')
        # Getting the type of 'None' (line 1368)
        None_148992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 28), 'None')
        
        (may_be_148993, more_types_in_union_148994) = may_be_none(decimals_148991, None_148992)

        if may_be_148993:

            if more_types_in_union_148994:
                # Runtime conditional SSA (line 1368)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1370):
            
            # Assigning a Call to a Name (line 1370):
            
            # Call to convert_to_pct(...): (line 1370)
            # Processing the call arguments (line 1370)
            # Getting the type of 'display_range' (line 1370)
            display_range_148997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 47), 'display_range', False)
            # Processing the call keyword arguments (line 1370)
            kwargs_148998 = {}
            # Getting the type of 'self' (line 1370)
            self_148995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 27), 'self', False)
            # Obtaining the member 'convert_to_pct' of a type (line 1370)
            convert_to_pct_148996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1370, 27), self_148995, 'convert_to_pct')
            # Calling convert_to_pct(args, kwargs) (line 1370)
            convert_to_pct_call_result_148999 = invoke(stypy.reporting.localization.Localization(__file__, 1370, 27), convert_to_pct_148996, *[display_range_148997], **kwargs_148998)
            
            # Assigning a type to the variable 'scaled_range' (line 1370)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 12), 'scaled_range', convert_to_pct_call_result_148999)
            
            
            # Getting the type of 'scaled_range' (line 1371)
            scaled_range_149000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 15), 'scaled_range')
            int_149001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 31), 'int')
            # Applying the binary operator '<=' (line 1371)
            result_le_149002 = python_operator(stypy.reporting.localization.Localization(__file__, 1371, 15), '<=', scaled_range_149000, int_149001)
            
            # Testing the type of an if condition (line 1371)
            if_condition_149003 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1371, 12), result_le_149002)
            # Assigning a type to the variable 'if_condition_149003' (line 1371)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 12), 'if_condition_149003', if_condition_149003)
            # SSA begins for if statement (line 1371)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Name (line 1372):
            
            # Assigning a Num to a Name (line 1372):
            int_149004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1372, 27), 'int')
            # Assigning a type to the variable 'decimals' (line 1372)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1372, 16), 'decimals', int_149004)
            # SSA branch for the else part of an if statement (line 1371)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Name (line 1378):
            
            # Assigning a Call to a Name (line 1378):
            
            # Call to ceil(...): (line 1378)
            # Processing the call arguments (line 1378)
            float_149007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1378, 37), 'float')
            
            # Call to log10(...): (line 1378)
            # Processing the call arguments (line 1378)
            float_149010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1378, 54), 'float')
            # Getting the type of 'scaled_range' (line 1378)
            scaled_range_149011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 60), 'scaled_range', False)
            # Applying the binary operator '*' (line 1378)
            result_mul_149012 = python_operator(stypy.reporting.localization.Localization(__file__, 1378, 54), '*', float_149010, scaled_range_149011)
            
            # Processing the call keyword arguments (line 1378)
            kwargs_149013 = {}
            # Getting the type of 'math' (line 1378)
            math_149008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 43), 'math', False)
            # Obtaining the member 'log10' of a type (line 1378)
            log10_149009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 43), math_149008, 'log10')
            # Calling log10(args, kwargs) (line 1378)
            log10_call_result_149014 = invoke(stypy.reporting.localization.Localization(__file__, 1378, 43), log10_149009, *[result_mul_149012], **kwargs_149013)
            
            # Applying the binary operator '-' (line 1378)
            result_sub_149015 = python_operator(stypy.reporting.localization.Localization(__file__, 1378, 37), '-', float_149007, log10_call_result_149014)
            
            # Processing the call keyword arguments (line 1378)
            kwargs_149016 = {}
            # Getting the type of 'math' (line 1378)
            math_149005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 27), 'math', False)
            # Obtaining the member 'ceil' of a type (line 1378)
            ceil_149006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 27), math_149005, 'ceil')
            # Calling ceil(args, kwargs) (line 1378)
            ceil_call_result_149017 = invoke(stypy.reporting.localization.Localization(__file__, 1378, 27), ceil_149006, *[result_sub_149015], **kwargs_149016)
            
            # Assigning a type to the variable 'decimals' (line 1378)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1378, 16), 'decimals', ceil_call_result_149017)
            
            
            # Getting the type of 'decimals' (line 1379)
            decimals_149018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 19), 'decimals')
            int_149019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1379, 30), 'int')
            # Applying the binary operator '>' (line 1379)
            result_gt_149020 = python_operator(stypy.reporting.localization.Localization(__file__, 1379, 19), '>', decimals_149018, int_149019)
            
            # Testing the type of an if condition (line 1379)
            if_condition_149021 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1379, 16), result_gt_149020)
            # Assigning a type to the variable 'if_condition_149021' (line 1379)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 16), 'if_condition_149021', if_condition_149021)
            # SSA begins for if statement (line 1379)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Name (line 1380):
            
            # Assigning a Num to a Name (line 1380):
            int_149022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1380, 31), 'int')
            # Assigning a type to the variable 'decimals' (line 1380)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1380, 20), 'decimals', int_149022)
            # SSA branch for the else part of an if statement (line 1379)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'decimals' (line 1381)
            decimals_149023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 21), 'decimals')
            int_149024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1381, 32), 'int')
            # Applying the binary operator '<' (line 1381)
            result_lt_149025 = python_operator(stypy.reporting.localization.Localization(__file__, 1381, 21), '<', decimals_149023, int_149024)
            
            # Testing the type of an if condition (line 1381)
            if_condition_149026 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1381, 21), result_lt_149025)
            # Assigning a type to the variable 'if_condition_149026' (line 1381)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 21), 'if_condition_149026', if_condition_149026)
            # SSA begins for if statement (line 1381)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Name (line 1382):
            
            # Assigning a Num to a Name (line 1382):
            int_149027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 31), 'int')
            # Assigning a type to the variable 'decimals' (line 1382)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 20), 'decimals', int_149027)
            # SSA join for if statement (line 1381)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1379)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1371)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_148994:
                # Runtime conditional SSA for else branch (line 1368)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_148993) or more_types_in_union_148994):
            
            # Assigning a Attribute to a Name (line 1384):
            
            # Assigning a Attribute to a Name (line 1384):
            # Getting the type of 'self' (line 1384)
            self_149028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 23), 'self')
            # Obtaining the member 'decimals' of a type (line 1384)
            decimals_149029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 23), self_149028, 'decimals')
            # Assigning a type to the variable 'decimals' (line 1384)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 12), 'decimals', decimals_149029)

            if (may_be_148993 and more_types_in_union_148994):
                # SSA join for if statement (line 1368)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1385):
        
        # Assigning a Call to a Name (line 1385):
        
        # Call to format(...): (line 1385)
        # Processing the call keyword arguments (line 1385)
        # Getting the type of 'x' (line 1385)
        x_149032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 41), 'x', False)
        keyword_149033 = x_149032
        
        # Call to int(...): (line 1385)
        # Processing the call arguments (line 1385)
        # Getting the type of 'decimals' (line 1385)
        decimals_149035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 57), 'decimals', False)
        # Processing the call keyword arguments (line 1385)
        kwargs_149036 = {}
        # Getting the type of 'int' (line 1385)
        int_149034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 53), 'int', False)
        # Calling int(args, kwargs) (line 1385)
        int_call_result_149037 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 53), int_149034, *[decimals_149035], **kwargs_149036)
        
        keyword_149038 = int_call_result_149037
        kwargs_149039 = {'x': keyword_149033, 'decimals': keyword_149038}
        unicode_149030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 12), 'unicode', u'{x:0.{decimals}f}')
        # Obtaining the member 'format' of a type (line 1385)
        format_149031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 12), unicode_149030, 'format')
        # Calling format(args, kwargs) (line 1385)
        format_call_result_149040 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 12), format_149031, *[], **kwargs_149039)
        
        # Assigning a type to the variable 's' (line 1385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1385, 8), 's', format_call_result_149040)
        # Getting the type of 's' (line 1387)
        s_149041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 15), 's')
        # Getting the type of 'self' (line 1387)
        self_149042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 19), 'self')
        # Obtaining the member 'symbol' of a type (line 1387)
        symbol_149043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1387, 19), self_149042, 'symbol')
        # Applying the binary operator '+' (line 1387)
        result_add_149044 = python_operator(stypy.reporting.localization.Localization(__file__, 1387, 15), '+', s_149041, symbol_149043)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 8), 'stypy_return_type', result_add_149044)
        
        # ################# End of 'format_pct(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'format_pct' in the type store
        # Getting the type of 'stypy_return_type' (line 1342)
        stypy_return_type_149045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149045)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'format_pct'
        return stypy_return_type_149045


    @norecursion
    def convert_to_pct(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'convert_to_pct'
        module_type_store = module_type_store.open_function_context('convert_to_pct', 1389, 4, False)
        # Assigning a type to the variable 'self' (line 1390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1390, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PercentFormatter.convert_to_pct.__dict__.__setitem__('stypy_localization', localization)
        PercentFormatter.convert_to_pct.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PercentFormatter.convert_to_pct.__dict__.__setitem__('stypy_type_store', module_type_store)
        PercentFormatter.convert_to_pct.__dict__.__setitem__('stypy_function_name', 'PercentFormatter.convert_to_pct')
        PercentFormatter.convert_to_pct.__dict__.__setitem__('stypy_param_names_list', ['x'])
        PercentFormatter.convert_to_pct.__dict__.__setitem__('stypy_varargs_param_name', None)
        PercentFormatter.convert_to_pct.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PercentFormatter.convert_to_pct.__dict__.__setitem__('stypy_call_defaults', defaults)
        PercentFormatter.convert_to_pct.__dict__.__setitem__('stypy_call_varargs', varargs)
        PercentFormatter.convert_to_pct.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PercentFormatter.convert_to_pct.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PercentFormatter.convert_to_pct', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'convert_to_pct', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'convert_to_pct(...)' code ##################

        float_149046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 15), 'float')
        # Getting the type of 'x' (line 1390)
        x_149047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 24), 'x')
        # Getting the type of 'self' (line 1390)
        self_149048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 28), 'self')
        # Obtaining the member 'xmax' of a type (line 1390)
        xmax_149049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1390, 28), self_149048, 'xmax')
        # Applying the binary operator 'div' (line 1390)
        result_div_149050 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 24), 'div', x_149047, xmax_149049)
        
        # Applying the binary operator '*' (line 1390)
        result_mul_149051 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 15), '*', float_149046, result_div_149050)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1390, 8), 'stypy_return_type', result_mul_149051)
        
        # ################# End of 'convert_to_pct(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'convert_to_pct' in the type store
        # Getting the type of 'stypy_return_type' (line 1389)
        stypy_return_type_149052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149052)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'convert_to_pct'
        return stypy_return_type_149052


    @norecursion
    def symbol(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'symbol'
        module_type_store = module_type_store.open_function_context('symbol', 1392, 4, False)
        # Assigning a type to the variable 'self' (line 1393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PercentFormatter.symbol.__dict__.__setitem__('stypy_localization', localization)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_type_store', module_type_store)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_function_name', 'PercentFormatter.symbol')
        PercentFormatter.symbol.__dict__.__setitem__('stypy_param_names_list', [])
        PercentFormatter.symbol.__dict__.__setitem__('stypy_varargs_param_name', None)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_call_defaults', defaults)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_call_varargs', varargs)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PercentFormatter.symbol', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'symbol', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'symbol(...)' code ##################

        unicode_149053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, (-1)), 'unicode', u"\n        The configured percent symbol as a string.\n\n        If LaTeX is enabled via ``rcParams['text.usetex']``, the special\n        characters `{'#', '$', '%', '&', '~', '_', '^', '\\', '{', '}'}`\n        are automatically escaped in the string.\n        ")
        
        # Assigning a Attribute to a Name (line 1401):
        
        # Assigning a Attribute to a Name (line 1401):
        # Getting the type of 'self' (line 1401)
        self_149054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 17), 'self')
        # Obtaining the member '_symbol' of a type (line 1401)
        _symbol_149055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 17), self_149054, '_symbol')
        # Assigning a type to the variable 'symbol' (line 1401)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1401, 8), 'symbol', _symbol_149055)
        
        
        # Getting the type of 'symbol' (line 1402)
        symbol_149056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 15), 'symbol')
        # Applying the 'not' unary operator (line 1402)
        result_not__149057 = python_operator(stypy.reporting.localization.Localization(__file__, 1402, 11), 'not', symbol_149056)
        
        # Testing the type of an if condition (line 1402)
        if_condition_149058 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1402, 8), result_not__149057)
        # Assigning a type to the variable 'if_condition_149058' (line 1402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1402, 8), 'if_condition_149058', if_condition_149058)
        # SSA begins for if statement (line 1402)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1403):
        
        # Assigning a Str to a Name (line 1403):
        unicode_149059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1403, 21), 'unicode', u'')
        # Assigning a type to the variable 'symbol' (line 1403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1403, 12), 'symbol', unicode_149059)
        # SSA branch for the else part of an if statement (line 1402)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Obtaining the type of the subscript
        unicode_149060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 22), 'unicode', u'text.usetex')
        # Getting the type of 'rcParams' (line 1404)
        rcParams_149061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 13), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1404)
        getitem___149062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 13), rcParams_149061, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1404)
        subscript_call_result_149063 = invoke(stypy.reporting.localization.Localization(__file__, 1404, 13), getitem___149062, unicode_149060)
        
        
        # Getting the type of 'self' (line 1404)
        self_149064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 45), 'self')
        # Obtaining the member '_is_latex' of a type (line 1404)
        _is_latex_149065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 45), self_149064, '_is_latex')
        # Applying the 'not' unary operator (line 1404)
        result_not__149066 = python_operator(stypy.reporting.localization.Localization(__file__, 1404, 41), 'not', _is_latex_149065)
        
        # Applying the binary operator 'and' (line 1404)
        result_and_keyword_149067 = python_operator(stypy.reporting.localization.Localization(__file__, 1404, 13), 'and', subscript_call_result_149063, result_not__149066)
        
        # Testing the type of an if condition (line 1404)
        if_condition_149068 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1404, 13), result_and_keyword_149067)
        # Assigning a type to the variable 'if_condition_149068' (line 1404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 13), 'if_condition_149068', if_condition_149068)
        # SSA begins for if statement (line 1404)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        unicode_149069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1408, 24), 'unicode', u'\\#$%&~_^{}')
        # Testing the type of a for loop iterable (line 1408)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1408, 12), unicode_149069)
        # Getting the type of the for loop variable (line 1408)
        for_loop_var_149070 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1408, 12), unicode_149069)
        # Assigning a type to the variable 'spec' (line 1408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 12), 'spec', for_loop_var_149070)
        # SSA begins for a for statement (line 1408)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1409):
        
        # Assigning a Call to a Name (line 1409):
        
        # Call to replace(...): (line 1409)
        # Processing the call arguments (line 1409)
        # Getting the type of 'spec' (line 1409)
        spec_149073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 40), 'spec', False)
        unicode_149074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1409, 46), 'unicode', u'\\')
        # Getting the type of 'spec' (line 1409)
        spec_149075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 53), 'spec', False)
        # Applying the binary operator '+' (line 1409)
        result_add_149076 = python_operator(stypy.reporting.localization.Localization(__file__, 1409, 46), '+', unicode_149074, spec_149075)
        
        # Processing the call keyword arguments (line 1409)
        kwargs_149077 = {}
        # Getting the type of 'symbol' (line 1409)
        symbol_149071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 25), 'symbol', False)
        # Obtaining the member 'replace' of a type (line 1409)
        replace_149072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 25), symbol_149071, 'replace')
        # Calling replace(args, kwargs) (line 1409)
        replace_call_result_149078 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 25), replace_149072, *[spec_149073, result_add_149076], **kwargs_149077)
        
        # Assigning a type to the variable 'symbol' (line 1409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 16), 'symbol', replace_call_result_149078)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1404)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1402)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'symbol' (line 1410)
        symbol_149079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 15), 'symbol')
        # Assigning a type to the variable 'stypy_return_type' (line 1410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1410, 8), 'stypy_return_type', symbol_149079)
        
        # ################# End of 'symbol(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'symbol' in the type store
        # Getting the type of 'stypy_return_type' (line 1392)
        stypy_return_type_149080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149080)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'symbol'
        return stypy_return_type_149080


    @norecursion
    def symbol(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'symbol'
        module_type_store = module_type_store.open_function_context('symbol', 1412, 4, False)
        # Assigning a type to the variable 'self' (line 1413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PercentFormatter.symbol.__dict__.__setitem__('stypy_localization', localization)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_type_store', module_type_store)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_function_name', 'PercentFormatter.symbol')
        PercentFormatter.symbol.__dict__.__setitem__('stypy_param_names_list', [])
        PercentFormatter.symbol.__dict__.__setitem__('stypy_varargs_param_name', None)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_call_defaults', defaults)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_call_varargs', varargs)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PercentFormatter.symbol.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PercentFormatter.symbol', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'symbol', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'symbol(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1414):
        
        # Assigning a Name to a Attribute (line 1414):
        # Getting the type of 'symbol' (line 1414)
        symbol_149081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 23), 'symbol')
        # Getting the type of 'self' (line 1414)
        self_149082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 8), 'self')
        # Setting the type of the member '_symbol' of a type (line 1414)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1414, 8), self_149082, '_symbol', symbol_149081)
        
        # ################# End of 'symbol(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'symbol' in the type store
        # Getting the type of 'stypy_return_type' (line 1412)
        stypy_return_type_149083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149083)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'symbol'
        return stypy_return_type_149083


# Assigning a type to the variable 'PercentFormatter' (line 1308)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1308, 0), 'PercentFormatter', PercentFormatter)
# Declaration of the 'Locator' class
# Getting the type of 'TickHelper' (line 1417)
TickHelper_149084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 14), 'TickHelper')

class Locator(TickHelper_149084, ):
    unicode_149085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1424, (-1)), 'unicode', u'\n    Determine the tick locations;\n\n    Note, you should not use the same locator between different\n    :class:`~matplotlib.axis.Axis` because the locator stores references to\n    the Axis data and view limits\n    ')
    
    # Assigning a Num to a Name (line 1430):

    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 1432, 4, False)
        # Assigning a type to the variable 'self' (line 1433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Locator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        Locator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Locator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        Locator.tick_values.__dict__.__setitem__('stypy_function_name', 'Locator.tick_values')
        Locator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        Locator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        Locator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Locator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        Locator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        Locator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Locator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Locator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        unicode_149086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1446, (-1)), 'unicode', u"\n        Return the values of the located ticks given **vmin** and **vmax**.\n\n        .. note::\n            To get tick locations with the vmin and vmax values defined\n            automatically for the associated :attr:`axis` simply call\n            the Locator instance::\n\n                >>> print((type(loc)))\n                <type 'Locator'>\n                >>> print((loc()))\n                [1, 2, 3, 4]\n\n        ")
        
        # Call to NotImplementedError(...): (line 1447)
        # Processing the call arguments (line 1447)
        unicode_149088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1447, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 1447)
        kwargs_149089 = {}
        # Getting the type of 'NotImplementedError' (line 1447)
        NotImplementedError_149087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1447)
        NotImplementedError_call_result_149090 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 14), NotImplementedError_149087, *[unicode_149088], **kwargs_149089)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1447, 8), NotImplementedError_call_result_149090, 'raise parameter', BaseException)
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 1432)
        stypy_return_type_149091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149091)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_149091


    @norecursion
    def set_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_params'
        module_type_store = module_type_store.open_function_context('set_params', 1449, 4, False)
        # Assigning a type to the variable 'self' (line 1450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1450, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Locator.set_params.__dict__.__setitem__('stypy_localization', localization)
        Locator.set_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Locator.set_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        Locator.set_params.__dict__.__setitem__('stypy_function_name', 'Locator.set_params')
        Locator.set_params.__dict__.__setitem__('stypy_param_names_list', [])
        Locator.set_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        Locator.set_params.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Locator.set_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        Locator.set_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        Locator.set_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Locator.set_params.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Locator.set_params', [], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_params', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_params(...)' code ##################

        unicode_149092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1453, (-1)), 'unicode', u'\n        Do nothing, and rase a warning. Any locator class not supporting the\n        set_params() function will call this.\n        ')
        
        # Call to warn(...): (line 1454)
        # Processing the call arguments (line 1454)
        unicode_149095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1454, 22), 'unicode', u"'set_params()' not defined for locator of type ")
        
        # Call to str(...): (line 1455)
        # Processing the call arguments (line 1455)
        
        # Call to type(...): (line 1455)
        # Processing the call arguments (line 1455)
        # Getting the type of 'self' (line 1455)
        self_149098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 31), 'self', False)
        # Processing the call keyword arguments (line 1455)
        kwargs_149099 = {}
        # Getting the type of 'type' (line 1455)
        type_149097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 26), 'type', False)
        # Calling type(args, kwargs) (line 1455)
        type_call_result_149100 = invoke(stypy.reporting.localization.Localization(__file__, 1455, 26), type_149097, *[self_149098], **kwargs_149099)
        
        # Processing the call keyword arguments (line 1455)
        kwargs_149101 = {}
        # Getting the type of 'str' (line 1455)
        str_149096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 22), 'str', False)
        # Calling str(args, kwargs) (line 1455)
        str_call_result_149102 = invoke(stypy.reporting.localization.Localization(__file__, 1455, 22), str_149096, *[type_call_result_149100], **kwargs_149101)
        
        # Applying the binary operator '+' (line 1454)
        result_add_149103 = python_operator(stypy.reporting.localization.Localization(__file__, 1454, 22), '+', unicode_149095, str_call_result_149102)
        
        # Processing the call keyword arguments (line 1454)
        kwargs_149104 = {}
        # Getting the type of 'warnings' (line 1454)
        warnings_149093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1454)
        warn_149094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1454, 8), warnings_149093, 'warn')
        # Calling warn(args, kwargs) (line 1454)
        warn_call_result_149105 = invoke(stypy.reporting.localization.Localization(__file__, 1454, 8), warn_149094, *[result_add_149103], **kwargs_149104)
        
        
        # ################# End of 'set_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_params' in the type store
        # Getting the type of 'stypy_return_type' (line 1449)
        stypy_return_type_149106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149106)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_params'
        return stypy_return_type_149106


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1457, 4, False)
        # Assigning a type to the variable 'self' (line 1458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Locator.__call__.__dict__.__setitem__('stypy_localization', localization)
        Locator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Locator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Locator.__call__.__dict__.__setitem__('stypy_function_name', 'Locator.__call__')
        Locator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        Locator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Locator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Locator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Locator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Locator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Locator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Locator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_149107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, 8), 'unicode', u'Return the locations of the ticks')
        
        # Call to NotImplementedError(...): (line 1461)
        # Processing the call arguments (line 1461)
        unicode_149109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1461, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 1461)
        kwargs_149110 = {}
        # Getting the type of 'NotImplementedError' (line 1461)
        NotImplementedError_149108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1461)
        NotImplementedError_call_result_149111 = invoke(stypy.reporting.localization.Localization(__file__, 1461, 14), NotImplementedError_149108, *[unicode_149109], **kwargs_149110)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1461, 8), NotImplementedError_call_result_149111, 'raise parameter', BaseException)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1457)
        stypy_return_type_149112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149112)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_149112


    @norecursion
    def raise_if_exceeds(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'raise_if_exceeds'
        module_type_store = module_type_store.open_function_context('raise_if_exceeds', 1463, 4, False)
        # Assigning a type to the variable 'self' (line 1464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1464, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Locator.raise_if_exceeds.__dict__.__setitem__('stypy_localization', localization)
        Locator.raise_if_exceeds.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Locator.raise_if_exceeds.__dict__.__setitem__('stypy_type_store', module_type_store)
        Locator.raise_if_exceeds.__dict__.__setitem__('stypy_function_name', 'Locator.raise_if_exceeds')
        Locator.raise_if_exceeds.__dict__.__setitem__('stypy_param_names_list', ['locs'])
        Locator.raise_if_exceeds.__dict__.__setitem__('stypy_varargs_param_name', None)
        Locator.raise_if_exceeds.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Locator.raise_if_exceeds.__dict__.__setitem__('stypy_call_defaults', defaults)
        Locator.raise_if_exceeds.__dict__.__setitem__('stypy_call_varargs', varargs)
        Locator.raise_if_exceeds.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Locator.raise_if_exceeds.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Locator.raise_if_exceeds', ['locs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'raise_if_exceeds', localization, ['locs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'raise_if_exceeds(...)' code ##################

        unicode_149113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1465, (-1)), 'unicode', u'raise a RuntimeError if Locator attempts to create more than\n           MAXTICKS locs')
        
        
        
        # Call to len(...): (line 1466)
        # Processing the call arguments (line 1466)
        # Getting the type of 'locs' (line 1466)
        locs_149115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 15), 'locs', False)
        # Processing the call keyword arguments (line 1466)
        kwargs_149116 = {}
        # Getting the type of 'len' (line 1466)
        len_149114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 11), 'len', False)
        # Calling len(args, kwargs) (line 1466)
        len_call_result_149117 = invoke(stypy.reporting.localization.Localization(__file__, 1466, 11), len_149114, *[locs_149115], **kwargs_149116)
        
        # Getting the type of 'self' (line 1466)
        self_149118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 24), 'self')
        # Obtaining the member 'MAXTICKS' of a type (line 1466)
        MAXTICKS_149119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1466, 24), self_149118, 'MAXTICKS')
        # Applying the binary operator '>=' (line 1466)
        result_ge_149120 = python_operator(stypy.reporting.localization.Localization(__file__, 1466, 11), '>=', len_call_result_149117, MAXTICKS_149119)
        
        # Testing the type of an if condition (line 1466)
        if_condition_149121 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1466, 8), result_ge_149120)
        # Assigning a type to the variable 'if_condition_149121' (line 1466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1466, 8), 'if_condition_149121', if_condition_149121)
        # SSA begins for if statement (line 1466)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1467):
        
        # Assigning a BinOp to a Name (line 1467):
        unicode_149122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, 19), 'unicode', u'Locator attempting to generate %d ticks from %s to %s: ')
        unicode_149123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1468, 19), 'unicode', u'exceeds Locator.MAXTICKS')
        # Applying the binary operator '+' (line 1467)
        result_add_149124 = python_operator(stypy.reporting.localization.Localization(__file__, 1467, 19), '+', unicode_149122, unicode_149123)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1468)
        tuple_149125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1468, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1468)
        # Adding element type (line 1468)
        
        # Call to len(...): (line 1468)
        # Processing the call arguments (line 1468)
        # Getting the type of 'locs' (line 1468)
        locs_149127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 54), 'locs', False)
        # Processing the call keyword arguments (line 1468)
        kwargs_149128 = {}
        # Getting the type of 'len' (line 1468)
        len_149126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 50), 'len', False)
        # Calling len(args, kwargs) (line 1468)
        len_call_result_149129 = invoke(stypy.reporting.localization.Localization(__file__, 1468, 50), len_149126, *[locs_149127], **kwargs_149128)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1468, 50), tuple_149125, len_call_result_149129)
        # Adding element type (line 1468)
        
        # Obtaining the type of the subscript
        int_149130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1468, 66), 'int')
        # Getting the type of 'locs' (line 1468)
        locs_149131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 61), 'locs')
        # Obtaining the member '__getitem__' of a type (line 1468)
        getitem___149132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 61), locs_149131, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1468)
        subscript_call_result_149133 = invoke(stypy.reporting.localization.Localization(__file__, 1468, 61), getitem___149132, int_149130)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1468, 50), tuple_149125, subscript_call_result_149133)
        # Adding element type (line 1468)
        
        # Obtaining the type of the subscript
        int_149134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1468, 75), 'int')
        # Getting the type of 'locs' (line 1468)
        locs_149135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 70), 'locs')
        # Obtaining the member '__getitem__' of a type (line 1468)
        getitem___149136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 70), locs_149135, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1468)
        subscript_call_result_149137 = invoke(stypy.reporting.localization.Localization(__file__, 1468, 70), getitem___149136, int_149134)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1468, 50), tuple_149125, subscript_call_result_149137)
        
        # Applying the binary operator '%' (line 1467)
        result_mod_149138 = python_operator(stypy.reporting.localization.Localization(__file__, 1467, 18), '%', result_add_149124, tuple_149125)
        
        # Assigning a type to the variable 'msg' (line 1467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1467, 12), 'msg', result_mod_149138)
        
        # Call to RuntimeError(...): (line 1469)
        # Processing the call arguments (line 1469)
        # Getting the type of 'msg' (line 1469)
        msg_149140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 31), 'msg', False)
        # Processing the call keyword arguments (line 1469)
        kwargs_149141 = {}
        # Getting the type of 'RuntimeError' (line 1469)
        RuntimeError_149139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 1469)
        RuntimeError_call_result_149142 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 18), RuntimeError_149139, *[msg_149140], **kwargs_149141)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1469, 12), RuntimeError_call_result_149142, 'raise parameter', BaseException)
        # SSA join for if statement (line 1466)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'locs' (line 1471)
        locs_149143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 15), 'locs')
        # Assigning a type to the variable 'stypy_return_type' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'stypy_return_type', locs_149143)
        
        # ################# End of 'raise_if_exceeds(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'raise_if_exceeds' in the type store
        # Getting the type of 'stypy_return_type' (line 1463)
        stypy_return_type_149144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149144)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'raise_if_exceeds'
        return stypy_return_type_149144


    @norecursion
    def view_limits(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'view_limits'
        module_type_store = module_type_store.open_function_context('view_limits', 1473, 4, False)
        # Assigning a type to the variable 'self' (line 1474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1474, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Locator.view_limits.__dict__.__setitem__('stypy_localization', localization)
        Locator.view_limits.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Locator.view_limits.__dict__.__setitem__('stypy_type_store', module_type_store)
        Locator.view_limits.__dict__.__setitem__('stypy_function_name', 'Locator.view_limits')
        Locator.view_limits.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        Locator.view_limits.__dict__.__setitem__('stypy_varargs_param_name', None)
        Locator.view_limits.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Locator.view_limits.__dict__.__setitem__('stypy_call_defaults', defaults)
        Locator.view_limits.__dict__.__setitem__('stypy_call_varargs', varargs)
        Locator.view_limits.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Locator.view_limits.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Locator.view_limits', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'view_limits', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'view_limits(...)' code ##################

        unicode_149145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, (-1)), 'unicode', u'\n        select a scale for the range from vmin to vmax\n\n        Normally this method is overridden by subclasses to\n        change locator behaviour.\n        ')
        
        # Call to nonsingular(...): (line 1480)
        # Processing the call arguments (line 1480)
        # Getting the type of 'vmin' (line 1480)
        vmin_149148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 39), 'vmin', False)
        # Getting the type of 'vmax' (line 1480)
        vmax_149149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 45), 'vmax', False)
        # Processing the call keyword arguments (line 1480)
        kwargs_149150 = {}
        # Getting the type of 'mtransforms' (line 1480)
        mtransforms_149146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 15), 'mtransforms', False)
        # Obtaining the member 'nonsingular' of a type (line 1480)
        nonsingular_149147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1480, 15), mtransforms_149146, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 1480)
        nonsingular_call_result_149151 = invoke(stypy.reporting.localization.Localization(__file__, 1480, 15), nonsingular_149147, *[vmin_149148, vmax_149149], **kwargs_149150)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1480, 8), 'stypy_return_type', nonsingular_call_result_149151)
        
        # ################# End of 'view_limits(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'view_limits' in the type store
        # Getting the type of 'stypy_return_type' (line 1473)
        stypy_return_type_149152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149152)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'view_limits'
        return stypy_return_type_149152


    @norecursion
    def autoscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'autoscale'
        module_type_store = module_type_store.open_function_context('autoscale', 1482, 4, False)
        # Assigning a type to the variable 'self' (line 1483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Locator.autoscale.__dict__.__setitem__('stypy_localization', localization)
        Locator.autoscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Locator.autoscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        Locator.autoscale.__dict__.__setitem__('stypy_function_name', 'Locator.autoscale')
        Locator.autoscale.__dict__.__setitem__('stypy_param_names_list', [])
        Locator.autoscale.__dict__.__setitem__('stypy_varargs_param_name', None)
        Locator.autoscale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Locator.autoscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        Locator.autoscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        Locator.autoscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Locator.autoscale.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Locator.autoscale', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale(...)' code ##################

        unicode_149153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, 8), 'unicode', u'autoscale the view limits')
        
        # Call to view_limits(...): (line 1484)
        
        # Call to get_view_interval(...): (line 1484)
        # Processing the call keyword arguments (line 1484)
        kwargs_149159 = {}
        # Getting the type of 'self' (line 1484)
        self_149156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 33), 'self', False)
        # Obtaining the member 'axis' of a type (line 1484)
        axis_149157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1484, 33), self_149156, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 1484)
        get_view_interval_149158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1484, 33), axis_149157, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 1484)
        get_view_interval_call_result_149160 = invoke(stypy.reporting.localization.Localization(__file__, 1484, 33), get_view_interval_149158, *[], **kwargs_149159)
        
        # Processing the call keyword arguments (line 1484)
        kwargs_149161 = {}
        # Getting the type of 'self' (line 1484)
        self_149154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 15), 'self', False)
        # Obtaining the member 'view_limits' of a type (line 1484)
        view_limits_149155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1484, 15), self_149154, 'view_limits')
        # Calling view_limits(args, kwargs) (line 1484)
        view_limits_call_result_149162 = invoke(stypy.reporting.localization.Localization(__file__, 1484, 15), view_limits_149155, *[get_view_interval_call_result_149160], **kwargs_149161)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1484, 8), 'stypy_return_type', view_limits_call_result_149162)
        
        # ################# End of 'autoscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale' in the type store
        # Getting the type of 'stypy_return_type' (line 1482)
        stypy_return_type_149163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149163)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale'
        return stypy_return_type_149163


    @norecursion
    def pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pan'
        module_type_store = module_type_store.open_function_context('pan', 1486, 4, False)
        # Assigning a type to the variable 'self' (line 1487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1487, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Locator.pan.__dict__.__setitem__('stypy_localization', localization)
        Locator.pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Locator.pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        Locator.pan.__dict__.__setitem__('stypy_function_name', 'Locator.pan')
        Locator.pan.__dict__.__setitem__('stypy_param_names_list', ['numsteps'])
        Locator.pan.__dict__.__setitem__('stypy_varargs_param_name', None)
        Locator.pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Locator.pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        Locator.pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        Locator.pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Locator.pan.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Locator.pan', ['numsteps'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pan', localization, ['numsteps'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pan(...)' code ##################

        unicode_149164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1487, 8), 'unicode', u'Pan numticks (can be positive or negative)')
        
        # Assigning a Call to a Name (line 1488):
        
        # Assigning a Call to a Name (line 1488):
        
        # Call to self(...): (line 1488)
        # Processing the call keyword arguments (line 1488)
        kwargs_149166 = {}
        # Getting the type of 'self' (line 1488)
        self_149165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 16), 'self', False)
        # Calling self(args, kwargs) (line 1488)
        self_call_result_149167 = invoke(stypy.reporting.localization.Localization(__file__, 1488, 16), self_149165, *[], **kwargs_149166)
        
        # Assigning a type to the variable 'ticks' (line 1488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 8), 'ticks', self_call_result_149167)
        
        # Assigning a Call to a Name (line 1489):
        
        # Assigning a Call to a Name (line 1489):
        
        # Call to len(...): (line 1489)
        # Processing the call arguments (line 1489)
        # Getting the type of 'ticks' (line 1489)
        ticks_149169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 23), 'ticks', False)
        # Processing the call keyword arguments (line 1489)
        kwargs_149170 = {}
        # Getting the type of 'len' (line 1489)
        len_149168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 19), 'len', False)
        # Calling len(args, kwargs) (line 1489)
        len_call_result_149171 = invoke(stypy.reporting.localization.Localization(__file__, 1489, 19), len_149168, *[ticks_149169], **kwargs_149170)
        
        # Assigning a type to the variable 'numticks' (line 1489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 8), 'numticks', len_call_result_149171)
        
        # Assigning a Call to a Tuple (line 1491):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 1491)
        # Processing the call keyword arguments (line 1491)
        kwargs_149175 = {}
        # Getting the type of 'self' (line 1491)
        self_149172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 1491)
        axis_149173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 21), self_149172, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 1491)
        get_view_interval_149174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 21), axis_149173, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 1491)
        get_view_interval_call_result_149176 = invoke(stypy.reporting.localization.Localization(__file__, 1491, 21), get_view_interval_149174, *[], **kwargs_149175)
        
        # Assigning a type to the variable 'call_assignment_146280' (line 1491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'call_assignment_146280', get_view_interval_call_result_149176)
        
        # Assigning a Call to a Name (line 1491):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1491, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149180 = {}
        # Getting the type of 'call_assignment_146280' (line 1491)
        call_assignment_146280_149177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'call_assignment_146280', False)
        # Obtaining the member '__getitem__' of a type (line 1491)
        getitem___149178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 8), call_assignment_146280_149177, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149181 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149178, *[int_149179], **kwargs_149180)
        
        # Assigning a type to the variable 'call_assignment_146281' (line 1491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'call_assignment_146281', getitem___call_result_149181)
        
        # Assigning a Name to a Name (line 1491):
        # Getting the type of 'call_assignment_146281' (line 1491)
        call_assignment_146281_149182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'call_assignment_146281')
        # Assigning a type to the variable 'vmin' (line 1491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'vmin', call_assignment_146281_149182)
        
        # Assigning a Call to a Name (line 1491):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1491, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149186 = {}
        # Getting the type of 'call_assignment_146280' (line 1491)
        call_assignment_146280_149183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'call_assignment_146280', False)
        # Obtaining the member '__getitem__' of a type (line 1491)
        getitem___149184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 8), call_assignment_146280_149183, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149187 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149184, *[int_149185], **kwargs_149186)
        
        # Assigning a type to the variable 'call_assignment_146282' (line 1491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'call_assignment_146282', getitem___call_result_149187)
        
        # Assigning a Name to a Name (line 1491):
        # Getting the type of 'call_assignment_146282' (line 1491)
        call_assignment_146282_149188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'call_assignment_146282')
        # Assigning a type to the variable 'vmax' (line 1491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 14), 'vmax', call_assignment_146282_149188)
        
        # Assigning a Call to a Tuple (line 1492):
        
        # Assigning a Call to a Name:
        
        # Call to nonsingular(...): (line 1492)
        # Processing the call arguments (line 1492)
        # Getting the type of 'vmin' (line 1492)
        vmin_149191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 45), 'vmin', False)
        # Getting the type of 'vmax' (line 1492)
        vmax_149192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 51), 'vmax', False)
        # Processing the call keyword arguments (line 1492)
        float_149193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1492, 66), 'float')
        keyword_149194 = float_149193
        kwargs_149195 = {'expander': keyword_149194}
        # Getting the type of 'mtransforms' (line 1492)
        mtransforms_149189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 21), 'mtransforms', False)
        # Obtaining the member 'nonsingular' of a type (line 1492)
        nonsingular_149190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1492, 21), mtransforms_149189, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 1492)
        nonsingular_call_result_149196 = invoke(stypy.reporting.localization.Localization(__file__, 1492, 21), nonsingular_149190, *[vmin_149191, vmax_149192], **kwargs_149195)
        
        # Assigning a type to the variable 'call_assignment_146283' (line 1492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'call_assignment_146283', nonsingular_call_result_149196)
        
        # Assigning a Call to a Name (line 1492):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1492, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149200 = {}
        # Getting the type of 'call_assignment_146283' (line 1492)
        call_assignment_146283_149197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'call_assignment_146283', False)
        # Obtaining the member '__getitem__' of a type (line 1492)
        getitem___149198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1492, 8), call_assignment_146283_149197, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149201 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149198, *[int_149199], **kwargs_149200)
        
        # Assigning a type to the variable 'call_assignment_146284' (line 1492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'call_assignment_146284', getitem___call_result_149201)
        
        # Assigning a Name to a Name (line 1492):
        # Getting the type of 'call_assignment_146284' (line 1492)
        call_assignment_146284_149202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'call_assignment_146284')
        # Assigning a type to the variable 'vmin' (line 1492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'vmin', call_assignment_146284_149202)
        
        # Assigning a Call to a Name (line 1492):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1492, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149206 = {}
        # Getting the type of 'call_assignment_146283' (line 1492)
        call_assignment_146283_149203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'call_assignment_146283', False)
        # Obtaining the member '__getitem__' of a type (line 1492)
        getitem___149204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1492, 8), call_assignment_146283_149203, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149207 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149204, *[int_149205], **kwargs_149206)
        
        # Assigning a type to the variable 'call_assignment_146285' (line 1492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'call_assignment_146285', getitem___call_result_149207)
        
        # Assigning a Name to a Name (line 1492):
        # Getting the type of 'call_assignment_146285' (line 1492)
        call_assignment_146285_149208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'call_assignment_146285')
        # Assigning a type to the variable 'vmax' (line 1492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 14), 'vmax', call_assignment_146285_149208)
        
        
        # Getting the type of 'numticks' (line 1493)
        numticks_149209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 11), 'numticks')
        int_149210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1493, 22), 'int')
        # Applying the binary operator '>' (line 1493)
        result_gt_149211 = python_operator(stypy.reporting.localization.Localization(__file__, 1493, 11), '>', numticks_149209, int_149210)
        
        # Testing the type of an if condition (line 1493)
        if_condition_149212 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1493, 8), result_gt_149211)
        # Assigning a type to the variable 'if_condition_149212' (line 1493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 8), 'if_condition_149212', if_condition_149212)
        # SSA begins for if statement (line 1493)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1494):
        
        # Assigning a BinOp to a Name (line 1494):
        # Getting the type of 'numsteps' (line 1494)
        numsteps_149213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 19), 'numsteps')
        
        # Call to abs(...): (line 1494)
        # Processing the call arguments (line 1494)
        
        # Obtaining the type of the subscript
        int_149215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1494, 40), 'int')
        # Getting the type of 'ticks' (line 1494)
        ticks_149216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 34), 'ticks', False)
        # Obtaining the member '__getitem__' of a type (line 1494)
        getitem___149217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 34), ticks_149216, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1494)
        subscript_call_result_149218 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 34), getitem___149217, int_149215)
        
        
        # Obtaining the type of the subscript
        int_149219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1494, 51), 'int')
        # Getting the type of 'ticks' (line 1494)
        ticks_149220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 45), 'ticks', False)
        # Obtaining the member '__getitem__' of a type (line 1494)
        getitem___149221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 45), ticks_149220, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1494)
        subscript_call_result_149222 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 45), getitem___149221, int_149219)
        
        # Applying the binary operator '-' (line 1494)
        result_sub_149223 = python_operator(stypy.reporting.localization.Localization(__file__, 1494, 34), '-', subscript_call_result_149218, subscript_call_result_149222)
        
        # Processing the call keyword arguments (line 1494)
        kwargs_149224 = {}
        # Getting the type of 'abs' (line 1494)
        abs_149214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 30), 'abs', False)
        # Calling abs(args, kwargs) (line 1494)
        abs_call_result_149225 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 30), abs_149214, *[result_sub_149223], **kwargs_149224)
        
        # Applying the binary operator '*' (line 1494)
        result_mul_149226 = python_operator(stypy.reporting.localization.Localization(__file__, 1494, 19), '*', numsteps_149213, abs_call_result_149225)
        
        # Assigning a type to the variable 'step' (line 1494)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1494, 12), 'step', result_mul_149226)
        # SSA branch for the else part of an if statement (line 1493)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1496):
        
        # Assigning a Call to a Name (line 1496):
        
        # Call to abs(...): (line 1496)
        # Processing the call arguments (line 1496)
        # Getting the type of 'vmax' (line 1496)
        vmax_149228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 20), 'vmax', False)
        # Getting the type of 'vmin' (line 1496)
        vmin_149229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 27), 'vmin', False)
        # Applying the binary operator '-' (line 1496)
        result_sub_149230 = python_operator(stypy.reporting.localization.Localization(__file__, 1496, 20), '-', vmax_149228, vmin_149229)
        
        # Processing the call keyword arguments (line 1496)
        kwargs_149231 = {}
        # Getting the type of 'abs' (line 1496)
        abs_149227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 16), 'abs', False)
        # Calling abs(args, kwargs) (line 1496)
        abs_call_result_149232 = invoke(stypy.reporting.localization.Localization(__file__, 1496, 16), abs_149227, *[result_sub_149230], **kwargs_149231)
        
        # Assigning a type to the variable 'd' (line 1496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1496, 12), 'd', abs_call_result_149232)
        
        # Assigning a BinOp to a Name (line 1497):
        
        # Assigning a BinOp to a Name (line 1497):
        # Getting the type of 'numsteps' (line 1497)
        numsteps_149233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 19), 'numsteps')
        # Getting the type of 'd' (line 1497)
        d_149234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 30), 'd')
        # Applying the binary operator '*' (line 1497)
        result_mul_149235 = python_operator(stypy.reporting.localization.Localization(__file__, 1497, 19), '*', numsteps_149233, d_149234)
        
        float_149236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1497, 34), 'float')
        # Applying the binary operator 'div' (line 1497)
        result_div_149237 = python_operator(stypy.reporting.localization.Localization(__file__, 1497, 32), 'div', result_mul_149235, float_149236)
        
        # Assigning a type to the variable 'step' (line 1497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 12), 'step', result_div_149237)
        # SSA join for if statement (line 1493)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'vmin' (line 1499)
        vmin_149238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 8), 'vmin')
        # Getting the type of 'step' (line 1499)
        step_149239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 16), 'step')
        # Applying the binary operator '+=' (line 1499)
        result_iadd_149240 = python_operator(stypy.reporting.localization.Localization(__file__, 1499, 8), '+=', vmin_149238, step_149239)
        # Assigning a type to the variable 'vmin' (line 1499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1499, 8), 'vmin', result_iadd_149240)
        
        
        # Getting the type of 'vmax' (line 1500)
        vmax_149241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 8), 'vmax')
        # Getting the type of 'step' (line 1500)
        step_149242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 16), 'step')
        # Applying the binary operator '+=' (line 1500)
        result_iadd_149243 = python_operator(stypy.reporting.localization.Localization(__file__, 1500, 8), '+=', vmax_149241, step_149242)
        # Assigning a type to the variable 'vmax' (line 1500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1500, 8), 'vmax', result_iadd_149243)
        
        
        # Call to set_view_interval(...): (line 1501)
        # Processing the call arguments (line 1501)
        # Getting the type of 'vmin' (line 1501)
        vmin_149247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 36), 'vmin', False)
        # Getting the type of 'vmax' (line 1501)
        vmax_149248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 42), 'vmax', False)
        # Processing the call keyword arguments (line 1501)
        # Getting the type of 'True' (line 1501)
        True_149249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 55), 'True', False)
        keyword_149250 = True_149249
        kwargs_149251 = {'ignore': keyword_149250}
        # Getting the type of 'self' (line 1501)
        self_149244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 8), 'self', False)
        # Obtaining the member 'axis' of a type (line 1501)
        axis_149245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1501, 8), self_149244, 'axis')
        # Obtaining the member 'set_view_interval' of a type (line 1501)
        set_view_interval_149246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1501, 8), axis_149245, 'set_view_interval')
        # Calling set_view_interval(args, kwargs) (line 1501)
        set_view_interval_call_result_149252 = invoke(stypy.reporting.localization.Localization(__file__, 1501, 8), set_view_interval_149246, *[vmin_149247, vmax_149248], **kwargs_149251)
        
        
        # ################# End of 'pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pan' in the type store
        # Getting the type of 'stypy_return_type' (line 1486)
        stypy_return_type_149253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149253)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pan'
        return stypy_return_type_149253


    @norecursion
    def zoom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'zoom'
        module_type_store = module_type_store.open_function_context('zoom', 1503, 4, False)
        # Assigning a type to the variable 'self' (line 1504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1504, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Locator.zoom.__dict__.__setitem__('stypy_localization', localization)
        Locator.zoom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Locator.zoom.__dict__.__setitem__('stypy_type_store', module_type_store)
        Locator.zoom.__dict__.__setitem__('stypy_function_name', 'Locator.zoom')
        Locator.zoom.__dict__.__setitem__('stypy_param_names_list', ['direction'])
        Locator.zoom.__dict__.__setitem__('stypy_varargs_param_name', None)
        Locator.zoom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Locator.zoom.__dict__.__setitem__('stypy_call_defaults', defaults)
        Locator.zoom.__dict__.__setitem__('stypy_call_varargs', varargs)
        Locator.zoom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Locator.zoom.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Locator.zoom', ['direction'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'zoom', localization, ['direction'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'zoom(...)' code ##################

        unicode_149254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1504, 8), 'unicode', u'Zoom in/out on axis; if direction is >0 zoom in, else zoom out')
        
        # Assigning a Call to a Tuple (line 1506):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 1506)
        # Processing the call keyword arguments (line 1506)
        kwargs_149258 = {}
        # Getting the type of 'self' (line 1506)
        self_149255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 1506)
        axis_149256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 21), self_149255, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 1506)
        get_view_interval_149257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 21), axis_149256, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 1506)
        get_view_interval_call_result_149259 = invoke(stypy.reporting.localization.Localization(__file__, 1506, 21), get_view_interval_149257, *[], **kwargs_149258)
        
        # Assigning a type to the variable 'call_assignment_146286' (line 1506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 8), 'call_assignment_146286', get_view_interval_call_result_149259)
        
        # Assigning a Call to a Name (line 1506):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1506, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149263 = {}
        # Getting the type of 'call_assignment_146286' (line 1506)
        call_assignment_146286_149260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 8), 'call_assignment_146286', False)
        # Obtaining the member '__getitem__' of a type (line 1506)
        getitem___149261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 8), call_assignment_146286_149260, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149264 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149261, *[int_149262], **kwargs_149263)
        
        # Assigning a type to the variable 'call_assignment_146287' (line 1506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 8), 'call_assignment_146287', getitem___call_result_149264)
        
        # Assigning a Name to a Name (line 1506):
        # Getting the type of 'call_assignment_146287' (line 1506)
        call_assignment_146287_149265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 8), 'call_assignment_146287')
        # Assigning a type to the variable 'vmin' (line 1506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 8), 'vmin', call_assignment_146287_149265)
        
        # Assigning a Call to a Name (line 1506):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1506, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149269 = {}
        # Getting the type of 'call_assignment_146286' (line 1506)
        call_assignment_146286_149266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 8), 'call_assignment_146286', False)
        # Obtaining the member '__getitem__' of a type (line 1506)
        getitem___149267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 8), call_assignment_146286_149266, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149270 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149267, *[int_149268], **kwargs_149269)
        
        # Assigning a type to the variable 'call_assignment_146288' (line 1506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 8), 'call_assignment_146288', getitem___call_result_149270)
        
        # Assigning a Name to a Name (line 1506):
        # Getting the type of 'call_assignment_146288' (line 1506)
        call_assignment_146288_149271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 8), 'call_assignment_146288')
        # Assigning a type to the variable 'vmax' (line 1506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 14), 'vmax', call_assignment_146288_149271)
        
        # Assigning a Call to a Tuple (line 1507):
        
        # Assigning a Call to a Name:
        
        # Call to nonsingular(...): (line 1507)
        # Processing the call arguments (line 1507)
        # Getting the type of 'vmin' (line 1507)
        vmin_149274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 45), 'vmin', False)
        # Getting the type of 'vmax' (line 1507)
        vmax_149275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 51), 'vmax', False)
        # Processing the call keyword arguments (line 1507)
        float_149276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1507, 66), 'float')
        keyword_149277 = float_149276
        kwargs_149278 = {'expander': keyword_149277}
        # Getting the type of 'mtransforms' (line 1507)
        mtransforms_149272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 21), 'mtransforms', False)
        # Obtaining the member 'nonsingular' of a type (line 1507)
        nonsingular_149273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1507, 21), mtransforms_149272, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 1507)
        nonsingular_call_result_149279 = invoke(stypy.reporting.localization.Localization(__file__, 1507, 21), nonsingular_149273, *[vmin_149274, vmax_149275], **kwargs_149278)
        
        # Assigning a type to the variable 'call_assignment_146289' (line 1507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'call_assignment_146289', nonsingular_call_result_149279)
        
        # Assigning a Call to a Name (line 1507):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1507, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149283 = {}
        # Getting the type of 'call_assignment_146289' (line 1507)
        call_assignment_146289_149280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'call_assignment_146289', False)
        # Obtaining the member '__getitem__' of a type (line 1507)
        getitem___149281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1507, 8), call_assignment_146289_149280, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149284 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149281, *[int_149282], **kwargs_149283)
        
        # Assigning a type to the variable 'call_assignment_146290' (line 1507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'call_assignment_146290', getitem___call_result_149284)
        
        # Assigning a Name to a Name (line 1507):
        # Getting the type of 'call_assignment_146290' (line 1507)
        call_assignment_146290_149285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'call_assignment_146290')
        # Assigning a type to the variable 'vmin' (line 1507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'vmin', call_assignment_146290_149285)
        
        # Assigning a Call to a Name (line 1507):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1507, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149289 = {}
        # Getting the type of 'call_assignment_146289' (line 1507)
        call_assignment_146289_149286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'call_assignment_146289', False)
        # Obtaining the member '__getitem__' of a type (line 1507)
        getitem___149287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1507, 8), call_assignment_146289_149286, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149290 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149287, *[int_149288], **kwargs_149289)
        
        # Assigning a type to the variable 'call_assignment_146291' (line 1507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'call_assignment_146291', getitem___call_result_149290)
        
        # Assigning a Name to a Name (line 1507):
        # Getting the type of 'call_assignment_146291' (line 1507)
        call_assignment_146291_149291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'call_assignment_146291')
        # Assigning a type to the variable 'vmax' (line 1507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 14), 'vmax', call_assignment_146291_149291)
        
        # Assigning a Call to a Name (line 1508):
        
        # Assigning a Call to a Name (line 1508):
        
        # Call to abs(...): (line 1508)
        # Processing the call arguments (line 1508)
        # Getting the type of 'vmax' (line 1508)
        vmax_149293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 23), 'vmax', False)
        # Getting the type of 'vmin' (line 1508)
        vmin_149294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 30), 'vmin', False)
        # Applying the binary operator '-' (line 1508)
        result_sub_149295 = python_operator(stypy.reporting.localization.Localization(__file__, 1508, 23), '-', vmax_149293, vmin_149294)
        
        # Processing the call keyword arguments (line 1508)
        kwargs_149296 = {}
        # Getting the type of 'abs' (line 1508)
        abs_149292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 19), 'abs', False)
        # Calling abs(args, kwargs) (line 1508)
        abs_call_result_149297 = invoke(stypy.reporting.localization.Localization(__file__, 1508, 19), abs_149292, *[result_sub_149295], **kwargs_149296)
        
        # Assigning a type to the variable 'interval' (line 1508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1508, 8), 'interval', abs_call_result_149297)
        
        # Assigning a BinOp to a Name (line 1509):
        
        # Assigning a BinOp to a Name (line 1509):
        float_149298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1509, 15), 'float')
        # Getting the type of 'interval' (line 1509)
        interval_149299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 21), 'interval')
        # Applying the binary operator '*' (line 1509)
        result_mul_149300 = python_operator(stypy.reporting.localization.Localization(__file__, 1509, 15), '*', float_149298, interval_149299)
        
        # Getting the type of 'direction' (line 1509)
        direction_149301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 32), 'direction')
        # Applying the binary operator '*' (line 1509)
        result_mul_149302 = python_operator(stypy.reporting.localization.Localization(__file__, 1509, 30), '*', result_mul_149300, direction_149301)
        
        # Assigning a type to the variable 'step' (line 1509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1509, 8), 'step', result_mul_149302)
        
        # Call to set_view_interval(...): (line 1510)
        # Processing the call arguments (line 1510)
        # Getting the type of 'vmin' (line 1510)
        vmin_149306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 36), 'vmin', False)
        # Getting the type of 'step' (line 1510)
        step_149307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 43), 'step', False)
        # Applying the binary operator '+' (line 1510)
        result_add_149308 = python_operator(stypy.reporting.localization.Localization(__file__, 1510, 36), '+', vmin_149306, step_149307)
        
        # Getting the type of 'vmax' (line 1510)
        vmax_149309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 49), 'vmax', False)
        # Getting the type of 'step' (line 1510)
        step_149310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 56), 'step', False)
        # Applying the binary operator '-' (line 1510)
        result_sub_149311 = python_operator(stypy.reporting.localization.Localization(__file__, 1510, 49), '-', vmax_149309, step_149310)
        
        # Processing the call keyword arguments (line 1510)
        # Getting the type of 'True' (line 1510)
        True_149312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 69), 'True', False)
        keyword_149313 = True_149312
        kwargs_149314 = {'ignore': keyword_149313}
        # Getting the type of 'self' (line 1510)
        self_149303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 8), 'self', False)
        # Obtaining the member 'axis' of a type (line 1510)
        axis_149304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1510, 8), self_149303, 'axis')
        # Obtaining the member 'set_view_interval' of a type (line 1510)
        set_view_interval_149305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1510, 8), axis_149304, 'set_view_interval')
        # Calling set_view_interval(args, kwargs) (line 1510)
        set_view_interval_call_result_149315 = invoke(stypy.reporting.localization.Localization(__file__, 1510, 8), set_view_interval_149305, *[result_add_149308, result_sub_149311], **kwargs_149314)
        
        
        # ################# End of 'zoom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'zoom' in the type store
        # Getting the type of 'stypy_return_type' (line 1503)
        stypy_return_type_149316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149316)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'zoom'
        return stypy_return_type_149316


    @norecursion
    def refresh(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'refresh'
        module_type_store = module_type_store.open_function_context('refresh', 1512, 4, False)
        # Assigning a type to the variable 'self' (line 1513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1513, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Locator.refresh.__dict__.__setitem__('stypy_localization', localization)
        Locator.refresh.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Locator.refresh.__dict__.__setitem__('stypy_type_store', module_type_store)
        Locator.refresh.__dict__.__setitem__('stypy_function_name', 'Locator.refresh')
        Locator.refresh.__dict__.__setitem__('stypy_param_names_list', [])
        Locator.refresh.__dict__.__setitem__('stypy_varargs_param_name', None)
        Locator.refresh.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Locator.refresh.__dict__.__setitem__('stypy_call_defaults', defaults)
        Locator.refresh.__dict__.__setitem__('stypy_call_varargs', varargs)
        Locator.refresh.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Locator.refresh.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Locator.refresh', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'refresh', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'refresh(...)' code ##################

        unicode_149317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1513, 8), 'unicode', u'refresh internal information based on current lim')
        pass
        
        # ################# End of 'refresh(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'refresh' in the type store
        # Getting the type of 'stypy_return_type' (line 1512)
        stypy_return_type_149318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149318)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'refresh'
        return stypy_return_type_149318


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1417, 0, False)
        # Assigning a type to the variable 'self' (line 1418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Locator.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'Locator' (line 1417)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 0), 'Locator', Locator)

# Assigning a Num to a Name (line 1430):
int_149319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, 15), 'int')
# Getting the type of 'Locator'
Locator_149320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Locator')
# Setting the type of the member 'MAXTICKS' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Locator_149320, 'MAXTICKS', int_149319)
# Declaration of the 'IndexLocator' class
# Getting the type of 'Locator' (line 1517)
Locator_149321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 19), 'Locator')

class IndexLocator(Locator_149321, ):
    unicode_149322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1523, (-1)), 'unicode', u'\n    Place a tick on every multiple of some base number of points\n    plotted, e.g., on every 5th point.  It is assumed that you are doing\n    index plotting; i.e., the axis is 0, len(data).  This is mainly\n    useful for x ticks.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1524, 4, False)
        # Assigning a type to the variable 'self' (line 1525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1525, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IndexLocator.__init__', ['base', 'offset'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['base', 'offset'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_149323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1525, 8), 'unicode', u'place ticks on the i-th data points where (i-offset)%base==0')
        
        # Assigning a Name to a Attribute (line 1526):
        
        # Assigning a Name to a Attribute (line 1526):
        # Getting the type of 'base' (line 1526)
        base_149324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 21), 'base')
        # Getting the type of 'self' (line 1526)
        self_149325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 8), 'self')
        # Setting the type of the member '_base' of a type (line 1526)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1526, 8), self_149325, '_base', base_149324)
        
        # Assigning a Name to a Attribute (line 1527):
        
        # Assigning a Name to a Attribute (line 1527):
        # Getting the type of 'offset' (line 1527)
        offset_149326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 22), 'offset')
        # Getting the type of 'self' (line 1527)
        self_149327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 8), 'self')
        # Setting the type of the member 'offset' of a type (line 1527)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 8), self_149327, 'offset', offset_149326)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1529)
        None_149328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 30), 'None')
        # Getting the type of 'None' (line 1529)
        None_149329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 43), 'None')
        defaults = [None_149328, None_149329]
        # Create a new context for function 'set_params'
        module_type_store = module_type_store.open_function_context('set_params', 1529, 4, False)
        # Assigning a type to the variable 'self' (line 1530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IndexLocator.set_params.__dict__.__setitem__('stypy_localization', localization)
        IndexLocator.set_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IndexLocator.set_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        IndexLocator.set_params.__dict__.__setitem__('stypy_function_name', 'IndexLocator.set_params')
        IndexLocator.set_params.__dict__.__setitem__('stypy_param_names_list', ['base', 'offset'])
        IndexLocator.set_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        IndexLocator.set_params.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IndexLocator.set_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        IndexLocator.set_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        IndexLocator.set_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IndexLocator.set_params.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IndexLocator.set_params', ['base', 'offset'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_params', localization, ['base', 'offset'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_params(...)' code ##################

        unicode_149330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1530, 8), 'unicode', u'Set parameters within this locator')
        
        # Type idiom detected: calculating its left and rigth part (line 1531)
        # Getting the type of 'base' (line 1531)
        base_149331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 8), 'base')
        # Getting the type of 'None' (line 1531)
        None_149332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 23), 'None')
        
        (may_be_149333, more_types_in_union_149334) = may_not_be_none(base_149331, None_149332)

        if may_be_149333:

            if more_types_in_union_149334:
                # Runtime conditional SSA (line 1531)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1532):
            
            # Assigning a Name to a Attribute (line 1532):
            # Getting the type of 'base' (line 1532)
            base_149335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 25), 'base')
            # Getting the type of 'self' (line 1532)
            self_149336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 12), 'self')
            # Setting the type of the member '_base' of a type (line 1532)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 12), self_149336, '_base', base_149335)

            if more_types_in_union_149334:
                # SSA join for if statement (line 1531)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1533)
        # Getting the type of 'offset' (line 1533)
        offset_149337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 8), 'offset')
        # Getting the type of 'None' (line 1533)
        None_149338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 25), 'None')
        
        (may_be_149339, more_types_in_union_149340) = may_not_be_none(offset_149337, None_149338)

        if may_be_149339:

            if more_types_in_union_149340:
                # Runtime conditional SSA (line 1533)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1534):
            
            # Assigning a Name to a Attribute (line 1534):
            # Getting the type of 'offset' (line 1534)
            offset_149341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 26), 'offset')
            # Getting the type of 'self' (line 1534)
            self_149342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 12), 'self')
            # Setting the type of the member 'offset' of a type (line 1534)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 12), self_149342, 'offset', offset_149341)

            if more_types_in_union_149340:
                # SSA join for if statement (line 1533)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'set_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_params' in the type store
        # Getting the type of 'stypy_return_type' (line 1529)
        stypy_return_type_149343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149343)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_params'
        return stypy_return_type_149343


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1536, 4, False)
        # Assigning a type to the variable 'self' (line 1537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IndexLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        IndexLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IndexLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        IndexLocator.__call__.__dict__.__setitem__('stypy_function_name', 'IndexLocator.__call__')
        IndexLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        IndexLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        IndexLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IndexLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        IndexLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        IndexLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IndexLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IndexLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_149344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1537, 8), 'unicode', u'Return the locations of the ticks')
        
        # Assigning a Call to a Tuple (line 1538):
        
        # Assigning a Call to a Name:
        
        # Call to get_data_interval(...): (line 1538)
        # Processing the call keyword arguments (line 1538)
        kwargs_149348 = {}
        # Getting the type of 'self' (line 1538)
        self_149345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 1538)
        axis_149346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 21), self_149345, 'axis')
        # Obtaining the member 'get_data_interval' of a type (line 1538)
        get_data_interval_149347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 21), axis_149346, 'get_data_interval')
        # Calling get_data_interval(args, kwargs) (line 1538)
        get_data_interval_call_result_149349 = invoke(stypy.reporting.localization.Localization(__file__, 1538, 21), get_data_interval_149347, *[], **kwargs_149348)
        
        # Assigning a type to the variable 'call_assignment_146292' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 8), 'call_assignment_146292', get_data_interval_call_result_149349)
        
        # Assigning a Call to a Name (line 1538):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1538, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149353 = {}
        # Getting the type of 'call_assignment_146292' (line 1538)
        call_assignment_146292_149350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 8), 'call_assignment_146292', False)
        # Obtaining the member '__getitem__' of a type (line 1538)
        getitem___149351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 8), call_assignment_146292_149350, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149354 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149351, *[int_149352], **kwargs_149353)
        
        # Assigning a type to the variable 'call_assignment_146293' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 8), 'call_assignment_146293', getitem___call_result_149354)
        
        # Assigning a Name to a Name (line 1538):
        # Getting the type of 'call_assignment_146293' (line 1538)
        call_assignment_146293_149355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 8), 'call_assignment_146293')
        # Assigning a type to the variable 'dmin' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 8), 'dmin', call_assignment_146293_149355)
        
        # Assigning a Call to a Name (line 1538):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1538, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149359 = {}
        # Getting the type of 'call_assignment_146292' (line 1538)
        call_assignment_146292_149356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 8), 'call_assignment_146292', False)
        # Obtaining the member '__getitem__' of a type (line 1538)
        getitem___149357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 8), call_assignment_146292_149356, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149360 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149357, *[int_149358], **kwargs_149359)
        
        # Assigning a type to the variable 'call_assignment_146294' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 8), 'call_assignment_146294', getitem___call_result_149360)
        
        # Assigning a Name to a Name (line 1538):
        # Getting the type of 'call_assignment_146294' (line 1538)
        call_assignment_146294_149361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 8), 'call_assignment_146294')
        # Assigning a type to the variable 'dmax' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 14), 'dmax', call_assignment_146294_149361)
        
        # Call to tick_values(...): (line 1539)
        # Processing the call arguments (line 1539)
        # Getting the type of 'dmin' (line 1539)
        dmin_149364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 32), 'dmin', False)
        # Getting the type of 'dmax' (line 1539)
        dmax_149365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 38), 'dmax', False)
        # Processing the call keyword arguments (line 1539)
        kwargs_149366 = {}
        # Getting the type of 'self' (line 1539)
        self_149362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 15), 'self', False)
        # Obtaining the member 'tick_values' of a type (line 1539)
        tick_values_149363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 15), self_149362, 'tick_values')
        # Calling tick_values(args, kwargs) (line 1539)
        tick_values_call_result_149367 = invoke(stypy.reporting.localization.Localization(__file__, 1539, 15), tick_values_149363, *[dmin_149364, dmax_149365], **kwargs_149366)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 8), 'stypy_return_type', tick_values_call_result_149367)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1536)
        stypy_return_type_149368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149368)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_149368


    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 1541, 4, False)
        # Assigning a type to the variable 'self' (line 1542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IndexLocator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        IndexLocator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IndexLocator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        IndexLocator.tick_values.__dict__.__setitem__('stypy_function_name', 'IndexLocator.tick_values')
        IndexLocator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        IndexLocator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        IndexLocator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IndexLocator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        IndexLocator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        IndexLocator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IndexLocator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IndexLocator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        
        # Call to raise_if_exceeds(...): (line 1542)
        # Processing the call arguments (line 1542)
        
        # Call to arange(...): (line 1543)
        # Processing the call arguments (line 1543)
        # Getting the type of 'vmin' (line 1543)
        vmin_149373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 22), 'vmin', False)
        # Getting the type of 'self' (line 1543)
        self_149374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 29), 'self', False)
        # Obtaining the member 'offset' of a type (line 1543)
        offset_149375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 29), self_149374, 'offset')
        # Applying the binary operator '+' (line 1543)
        result_add_149376 = python_operator(stypy.reporting.localization.Localization(__file__, 1543, 22), '+', vmin_149373, offset_149375)
        
        # Getting the type of 'vmax' (line 1543)
        vmax_149377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 42), 'vmax', False)
        int_149378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1543, 49), 'int')
        # Applying the binary operator '+' (line 1543)
        result_add_149379 = python_operator(stypy.reporting.localization.Localization(__file__, 1543, 42), '+', vmax_149377, int_149378)
        
        # Getting the type of 'self' (line 1543)
        self_149380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 52), 'self', False)
        # Obtaining the member '_base' of a type (line 1543)
        _base_149381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 52), self_149380, '_base')
        # Processing the call keyword arguments (line 1543)
        kwargs_149382 = {}
        # Getting the type of 'np' (line 1543)
        np_149371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 12), 'np', False)
        # Obtaining the member 'arange' of a type (line 1543)
        arange_149372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 12), np_149371, 'arange')
        # Calling arange(args, kwargs) (line 1543)
        arange_call_result_149383 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 12), arange_149372, *[result_add_149376, result_add_149379, _base_149381], **kwargs_149382)
        
        # Processing the call keyword arguments (line 1542)
        kwargs_149384 = {}
        # Getting the type of 'self' (line 1542)
        self_149369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 15), 'self', False)
        # Obtaining the member 'raise_if_exceeds' of a type (line 1542)
        raise_if_exceeds_149370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 15), self_149369, 'raise_if_exceeds')
        # Calling raise_if_exceeds(args, kwargs) (line 1542)
        raise_if_exceeds_call_result_149385 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 15), raise_if_exceeds_149370, *[arange_call_result_149383], **kwargs_149384)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 8), 'stypy_return_type', raise_if_exceeds_call_result_149385)
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 1541)
        stypy_return_type_149386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149386)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_149386


# Assigning a type to the variable 'IndexLocator' (line 1517)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1517, 0), 'IndexLocator', IndexLocator)
# Declaration of the 'FixedLocator' class
# Getting the type of 'Locator' (line 1546)
Locator_149387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 19), 'Locator')

class FixedLocator(Locator_149387, ):
    unicode_149388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1555, (-1)), 'unicode', u'\n    Tick locations are fixed.  If nbins is not None,\n    the array of possible positions will be subsampled to\n    keep the number of ticks <= nbins +1.\n    The subsampling will be done so as to include the smallest\n    absolute value; for example, if zero is included in the\n    array of possibilities, then it is guaranteed to be one of\n    the chosen ticks.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1557)
        None_149389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 35), 'None')
        defaults = [None_149389]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1557, 4, False)
        # Assigning a type to the variable 'self' (line 1558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1558, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FixedLocator.__init__', ['locs', 'nbins'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['locs', 'nbins'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1558):
        
        # Assigning a Call to a Attribute (line 1558):
        
        # Call to asarray(...): (line 1558)
        # Processing the call arguments (line 1558)
        # Getting the type of 'locs' (line 1558)
        locs_149392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 31), 'locs', False)
        # Processing the call keyword arguments (line 1558)
        kwargs_149393 = {}
        # Getting the type of 'np' (line 1558)
        np_149390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 20), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1558)
        asarray_149391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1558, 20), np_149390, 'asarray')
        # Calling asarray(args, kwargs) (line 1558)
        asarray_call_result_149394 = invoke(stypy.reporting.localization.Localization(__file__, 1558, 20), asarray_149391, *[locs_149392], **kwargs_149393)
        
        # Getting the type of 'self' (line 1558)
        self_149395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 8), 'self')
        # Setting the type of the member 'locs' of a type (line 1558)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1558, 8), self_149395, 'locs', asarray_call_result_149394)
        
        # Assigning a Name to a Attribute (line 1559):
        
        # Assigning a Name to a Attribute (line 1559):
        # Getting the type of 'nbins' (line 1559)
        nbins_149396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 21), 'nbins')
        # Getting the type of 'self' (line 1559)
        self_149397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 8), 'self')
        # Setting the type of the member 'nbins' of a type (line 1559)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1559, 8), self_149397, 'nbins', nbins_149396)
        
        
        # Getting the type of 'self' (line 1560)
        self_149398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 11), 'self')
        # Obtaining the member 'nbins' of a type (line 1560)
        nbins_149399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1560, 11), self_149398, 'nbins')
        # Getting the type of 'None' (line 1560)
        None_149400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 29), 'None')
        # Applying the binary operator 'isnot' (line 1560)
        result_is_not_149401 = python_operator(stypy.reporting.localization.Localization(__file__, 1560, 11), 'isnot', nbins_149399, None_149400)
        
        # Testing the type of an if condition (line 1560)
        if_condition_149402 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1560, 8), result_is_not_149401)
        # Assigning a type to the variable 'if_condition_149402' (line 1560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1560, 8), 'if_condition_149402', if_condition_149402)
        # SSA begins for if statement (line 1560)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1561):
        
        # Assigning a Call to a Attribute (line 1561):
        
        # Call to max(...): (line 1561)
        # Processing the call arguments (line 1561)
        # Getting the type of 'self' (line 1561)
        self_149404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 29), 'self', False)
        # Obtaining the member 'nbins' of a type (line 1561)
        nbins_149405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1561, 29), self_149404, 'nbins')
        int_149406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1561, 41), 'int')
        # Processing the call keyword arguments (line 1561)
        kwargs_149407 = {}
        # Getting the type of 'max' (line 1561)
        max_149403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 25), 'max', False)
        # Calling max(args, kwargs) (line 1561)
        max_call_result_149408 = invoke(stypy.reporting.localization.Localization(__file__, 1561, 25), max_149403, *[nbins_149405, int_149406], **kwargs_149407)
        
        # Getting the type of 'self' (line 1561)
        self_149409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 12), 'self')
        # Setting the type of the member 'nbins' of a type (line 1561)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1561, 12), self_149409, 'nbins', max_call_result_149408)
        # SSA join for if statement (line 1560)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1563)
        None_149410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 31), 'None')
        defaults = [None_149410]
        # Create a new context for function 'set_params'
        module_type_store = module_type_store.open_function_context('set_params', 1563, 4, False)
        # Assigning a type to the variable 'self' (line 1564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1564, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FixedLocator.set_params.__dict__.__setitem__('stypy_localization', localization)
        FixedLocator.set_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FixedLocator.set_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        FixedLocator.set_params.__dict__.__setitem__('stypy_function_name', 'FixedLocator.set_params')
        FixedLocator.set_params.__dict__.__setitem__('stypy_param_names_list', ['nbins'])
        FixedLocator.set_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        FixedLocator.set_params.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FixedLocator.set_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        FixedLocator.set_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        FixedLocator.set_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FixedLocator.set_params.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FixedLocator.set_params', ['nbins'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_params', localization, ['nbins'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_params(...)' code ##################

        unicode_149411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1564, 8), 'unicode', u'Set parameters within this locator.')
        
        # Type idiom detected: calculating its left and rigth part (line 1565)
        # Getting the type of 'nbins' (line 1565)
        nbins_149412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'nbins')
        # Getting the type of 'None' (line 1565)
        None_149413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 24), 'None')
        
        (may_be_149414, more_types_in_union_149415) = may_not_be_none(nbins_149412, None_149413)

        if may_be_149414:

            if more_types_in_union_149415:
                # Runtime conditional SSA (line 1565)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1566):
            
            # Assigning a Name to a Attribute (line 1566):
            # Getting the type of 'nbins' (line 1566)
            nbins_149416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 25), 'nbins')
            # Getting the type of 'self' (line 1566)
            self_149417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 12), 'self')
            # Setting the type of the member 'nbins' of a type (line 1566)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 12), self_149417, 'nbins', nbins_149416)

            if more_types_in_union_149415:
                # SSA join for if statement (line 1565)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'set_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_params' in the type store
        # Getting the type of 'stypy_return_type' (line 1563)
        stypy_return_type_149418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149418)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_params'
        return stypy_return_type_149418


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1568, 4, False)
        # Assigning a type to the variable 'self' (line 1569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1569, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FixedLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        FixedLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FixedLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        FixedLocator.__call__.__dict__.__setitem__('stypy_function_name', 'FixedLocator.__call__')
        FixedLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        FixedLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        FixedLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FixedLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        FixedLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        FixedLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FixedLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FixedLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Call to tick_values(...): (line 1569)
        # Processing the call arguments (line 1569)
        # Getting the type of 'None' (line 1569)
        None_149421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 32), 'None', False)
        # Getting the type of 'None' (line 1569)
        None_149422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 38), 'None', False)
        # Processing the call keyword arguments (line 1569)
        kwargs_149423 = {}
        # Getting the type of 'self' (line 1569)
        self_149419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 15), 'self', False)
        # Obtaining the member 'tick_values' of a type (line 1569)
        tick_values_149420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1569, 15), self_149419, 'tick_values')
        # Calling tick_values(args, kwargs) (line 1569)
        tick_values_call_result_149424 = invoke(stypy.reporting.localization.Localization(__file__, 1569, 15), tick_values_149420, *[None_149421, None_149422], **kwargs_149423)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1569, 8), 'stypy_return_type', tick_values_call_result_149424)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1568)
        stypy_return_type_149425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149425)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_149425


    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 1571, 4, False)
        # Assigning a type to the variable 'self' (line 1572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1572, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FixedLocator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        FixedLocator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FixedLocator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        FixedLocator.tick_values.__dict__.__setitem__('stypy_function_name', 'FixedLocator.tick_values')
        FixedLocator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        FixedLocator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        FixedLocator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FixedLocator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        FixedLocator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        FixedLocator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FixedLocator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FixedLocator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        unicode_149426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1580, (-1)), 'unicode', u'"\n        Return the locations of the ticks.\n\n        .. note::\n\n            Because the values are fixed, vmin and vmax are not used in this\n            method.\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1581)
        # Getting the type of 'self' (line 1581)
        self_149427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 11), 'self')
        # Obtaining the member 'nbins' of a type (line 1581)
        nbins_149428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1581, 11), self_149427, 'nbins')
        # Getting the type of 'None' (line 1581)
        None_149429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 25), 'None')
        
        (may_be_149430, more_types_in_union_149431) = may_be_none(nbins_149428, None_149429)

        if may_be_149430:

            if more_types_in_union_149431:
                # Runtime conditional SSA (line 1581)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'self' (line 1582)
            self_149432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 19), 'self')
            # Obtaining the member 'locs' of a type (line 1582)
            locs_149433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1582, 19), self_149432, 'locs')
            # Assigning a type to the variable 'stypy_return_type' (line 1582)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1582, 12), 'stypy_return_type', locs_149433)

            if more_types_in_union_149431:
                # SSA join for if statement (line 1581)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1583):
        
        # Assigning a Call to a Name (line 1583):
        
        # Call to max(...): (line 1583)
        # Processing the call arguments (line 1583)
        
        # Call to int(...): (line 1583)
        # Processing the call arguments (line 1583)
        float_149436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1583, 23), 'float')
        
        # Call to len(...): (line 1583)
        # Processing the call arguments (line 1583)
        # Getting the type of 'self' (line 1583)
        self_149438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 34), 'self', False)
        # Obtaining the member 'locs' of a type (line 1583)
        locs_149439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 34), self_149438, 'locs')
        # Processing the call keyword arguments (line 1583)
        kwargs_149440 = {}
        # Getting the type of 'len' (line 1583)
        len_149437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 30), 'len', False)
        # Calling len(args, kwargs) (line 1583)
        len_call_result_149441 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 30), len_149437, *[locs_149439], **kwargs_149440)
        
        
        # Call to float(...): (line 1583)
        # Processing the call arguments (line 1583)
        # Getting the type of 'self' (line 1583)
        self_149443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 53), 'self', False)
        # Obtaining the member 'nbins' of a type (line 1583)
        nbins_149444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 53), self_149443, 'nbins')
        # Processing the call keyword arguments (line 1583)
        kwargs_149445 = {}
        # Getting the type of 'float' (line 1583)
        float_149442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 47), 'float', False)
        # Calling float(args, kwargs) (line 1583)
        float_call_result_149446 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 47), float_149442, *[nbins_149444], **kwargs_149445)
        
        # Applying the binary operator 'div' (line 1583)
        result_div_149447 = python_operator(stypy.reporting.localization.Localization(__file__, 1583, 30), 'div', len_call_result_149441, float_call_result_149446)
        
        # Applying the binary operator '+' (line 1583)
        result_add_149448 = python_operator(stypy.reporting.localization.Localization(__file__, 1583, 23), '+', float_149436, result_div_149447)
        
        # Processing the call keyword arguments (line 1583)
        kwargs_149449 = {}
        # Getting the type of 'int' (line 1583)
        int_149435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 19), 'int', False)
        # Calling int(args, kwargs) (line 1583)
        int_call_result_149450 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 19), int_149435, *[result_add_149448], **kwargs_149449)
        
        int_149451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1583, 67), 'int')
        # Processing the call keyword arguments (line 1583)
        kwargs_149452 = {}
        # Getting the type of 'max' (line 1583)
        max_149434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 15), 'max', False)
        # Calling max(args, kwargs) (line 1583)
        max_call_result_149453 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 15), max_149434, *[int_call_result_149450, int_149451], **kwargs_149452)
        
        # Assigning a type to the variable 'step' (line 1583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 8), 'step', max_call_result_149453)
        
        # Assigning a Subscript to a Name (line 1584):
        
        # Assigning a Subscript to a Name (line 1584):
        
        # Obtaining the type of the subscript
        # Getting the type of 'step' (line 1584)
        step_149454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 28), 'step')
        slice_149455 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1584, 16), None, None, step_149454)
        # Getting the type of 'self' (line 1584)
        self_149456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 16), 'self')
        # Obtaining the member 'locs' of a type (line 1584)
        locs_149457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1584, 16), self_149456, 'locs')
        # Obtaining the member '__getitem__' of a type (line 1584)
        getitem___149458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1584, 16), locs_149457, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1584)
        subscript_call_result_149459 = invoke(stypy.reporting.localization.Localization(__file__, 1584, 16), getitem___149458, slice_149455)
        
        # Assigning a type to the variable 'ticks' (line 1584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1584, 8), 'ticks', subscript_call_result_149459)
        
        
        # Call to range(...): (line 1585)
        # Processing the call arguments (line 1585)
        int_149461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1585, 23), 'int')
        # Getting the type of 'step' (line 1585)
        step_149462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 26), 'step', False)
        # Processing the call keyword arguments (line 1585)
        kwargs_149463 = {}
        # Getting the type of 'range' (line 1585)
        range_149460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 17), 'range', False)
        # Calling range(args, kwargs) (line 1585)
        range_call_result_149464 = invoke(stypy.reporting.localization.Localization(__file__, 1585, 17), range_149460, *[int_149461, step_149462], **kwargs_149463)
        
        # Testing the type of a for loop iterable (line 1585)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1585, 8), range_call_result_149464)
        # Getting the type of the for loop variable (line 1585)
        for_loop_var_149465 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1585, 8), range_call_result_149464)
        # Assigning a type to the variable 'i' (line 1585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1585, 8), 'i', for_loop_var_149465)
        # SSA begins for a for statement (line 1585)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 1586):
        
        # Assigning a Subscript to a Name (line 1586):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1586)
        i_149466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 31), 'i')
        # Getting the type of 'step' (line 1586)
        step_149467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 34), 'step')
        slice_149468 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1586, 21), i_149466, None, step_149467)
        # Getting the type of 'self' (line 1586)
        self_149469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 21), 'self')
        # Obtaining the member 'locs' of a type (line 1586)
        locs_149470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 21), self_149469, 'locs')
        # Obtaining the member '__getitem__' of a type (line 1586)
        getitem___149471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 21), locs_149470, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1586)
        subscript_call_result_149472 = invoke(stypy.reporting.localization.Localization(__file__, 1586, 21), getitem___149471, slice_149468)
        
        # Assigning a type to the variable 'ticks1' (line 1586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1586, 12), 'ticks1', subscript_call_result_149472)
        
        
        
        # Call to min(...): (line 1587)
        # Processing the call keyword arguments (line 1587)
        kwargs_149479 = {}
        
        # Call to abs(...): (line 1587)
        # Processing the call arguments (line 1587)
        # Getting the type of 'ticks1' (line 1587)
        ticks1_149475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 22), 'ticks1', False)
        # Processing the call keyword arguments (line 1587)
        kwargs_149476 = {}
        # Getting the type of 'np' (line 1587)
        np_149473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 15), 'np', False)
        # Obtaining the member 'abs' of a type (line 1587)
        abs_149474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1587, 15), np_149473, 'abs')
        # Calling abs(args, kwargs) (line 1587)
        abs_call_result_149477 = invoke(stypy.reporting.localization.Localization(__file__, 1587, 15), abs_149474, *[ticks1_149475], **kwargs_149476)
        
        # Obtaining the member 'min' of a type (line 1587)
        min_149478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1587, 15), abs_call_result_149477, 'min')
        # Calling min(args, kwargs) (line 1587)
        min_call_result_149480 = invoke(stypy.reporting.localization.Localization(__file__, 1587, 15), min_149478, *[], **kwargs_149479)
        
        
        # Call to min(...): (line 1587)
        # Processing the call keyword arguments (line 1587)
        kwargs_149487 = {}
        
        # Call to abs(...): (line 1587)
        # Processing the call arguments (line 1587)
        # Getting the type of 'ticks' (line 1587)
        ticks_149483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 45), 'ticks', False)
        # Processing the call keyword arguments (line 1587)
        kwargs_149484 = {}
        # Getting the type of 'np' (line 1587)
        np_149481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 38), 'np', False)
        # Obtaining the member 'abs' of a type (line 1587)
        abs_149482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1587, 38), np_149481, 'abs')
        # Calling abs(args, kwargs) (line 1587)
        abs_call_result_149485 = invoke(stypy.reporting.localization.Localization(__file__, 1587, 38), abs_149482, *[ticks_149483], **kwargs_149484)
        
        # Obtaining the member 'min' of a type (line 1587)
        min_149486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1587, 38), abs_call_result_149485, 'min')
        # Calling min(args, kwargs) (line 1587)
        min_call_result_149488 = invoke(stypy.reporting.localization.Localization(__file__, 1587, 38), min_149486, *[], **kwargs_149487)
        
        # Applying the binary operator '<' (line 1587)
        result_lt_149489 = python_operator(stypy.reporting.localization.Localization(__file__, 1587, 15), '<', min_call_result_149480, min_call_result_149488)
        
        # Testing the type of an if condition (line 1587)
        if_condition_149490 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1587, 12), result_lt_149489)
        # Assigning a type to the variable 'if_condition_149490' (line 1587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1587, 12), 'if_condition_149490', if_condition_149490)
        # SSA begins for if statement (line 1587)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1588):
        
        # Assigning a Name to a Name (line 1588):
        # Getting the type of 'ticks1' (line 1588)
        ticks1_149491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 24), 'ticks1')
        # Assigning a type to the variable 'ticks' (line 1588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1588, 16), 'ticks', ticks1_149491)
        # SSA join for if statement (line 1587)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to raise_if_exceeds(...): (line 1589)
        # Processing the call arguments (line 1589)
        # Getting the type of 'ticks' (line 1589)
        ticks_149494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 37), 'ticks', False)
        # Processing the call keyword arguments (line 1589)
        kwargs_149495 = {}
        # Getting the type of 'self' (line 1589)
        self_149492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 15), 'self', False)
        # Obtaining the member 'raise_if_exceeds' of a type (line 1589)
        raise_if_exceeds_149493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1589, 15), self_149492, 'raise_if_exceeds')
        # Calling raise_if_exceeds(args, kwargs) (line 1589)
        raise_if_exceeds_call_result_149496 = invoke(stypy.reporting.localization.Localization(__file__, 1589, 15), raise_if_exceeds_149493, *[ticks_149494], **kwargs_149495)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1589, 8), 'stypy_return_type', raise_if_exceeds_call_result_149496)
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 1571)
        stypy_return_type_149497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149497)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_149497


# Assigning a type to the variable 'FixedLocator' (line 1546)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 0), 'FixedLocator', FixedLocator)
# Declaration of the 'NullLocator' class
# Getting the type of 'Locator' (line 1592)
Locator_149498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 18), 'Locator')

class NullLocator(Locator_149498, ):
    unicode_149499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1595, (-1)), 'unicode', u'\n    No ticks\n    ')

    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1597, 4, False)
        # Assigning a type to the variable 'self' (line 1598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1598, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NullLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        NullLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NullLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        NullLocator.__call__.__dict__.__setitem__('stypy_function_name', 'NullLocator.__call__')
        NullLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        NullLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        NullLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NullLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        NullLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        NullLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NullLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NullLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Call to tick_values(...): (line 1598)
        # Processing the call arguments (line 1598)
        # Getting the type of 'None' (line 1598)
        None_149502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 32), 'None', False)
        # Getting the type of 'None' (line 1598)
        None_149503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 38), 'None', False)
        # Processing the call keyword arguments (line 1598)
        kwargs_149504 = {}
        # Getting the type of 'self' (line 1598)
        self_149500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 15), 'self', False)
        # Obtaining the member 'tick_values' of a type (line 1598)
        tick_values_149501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1598, 15), self_149500, 'tick_values')
        # Calling tick_values(args, kwargs) (line 1598)
        tick_values_call_result_149505 = invoke(stypy.reporting.localization.Localization(__file__, 1598, 15), tick_values_149501, *[None_149502, None_149503], **kwargs_149504)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1598, 8), 'stypy_return_type', tick_values_call_result_149505)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1597)
        stypy_return_type_149506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149506)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_149506


    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 1600, 4, False)
        # Assigning a type to the variable 'self' (line 1601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NullLocator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        NullLocator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NullLocator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        NullLocator.tick_values.__dict__.__setitem__('stypy_function_name', 'NullLocator.tick_values')
        NullLocator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        NullLocator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        NullLocator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NullLocator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        NullLocator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        NullLocator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NullLocator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NullLocator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        unicode_149507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1608, (-1)), 'unicode', u'"\n        Return the locations of the ticks.\n\n        .. note::\n\n            Because the values are Null, vmin and vmax are not used in this\n            method.\n        ')
        
        # Obtaining an instance of the builtin type 'list' (line 1609)
        list_149508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1609, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1609)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1609, 8), 'stypy_return_type', list_149508)
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 1600)
        stypy_return_type_149509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149509)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_149509


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1592, 0, False)
        # Assigning a type to the variable 'self' (line 1593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NullLocator.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'NullLocator' (line 1592)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1592, 0), 'NullLocator', NullLocator)
# Declaration of the 'LinearLocator' class
# Getting the type of 'Locator' (line 1612)
Locator_149510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 20), 'Locator')

class LinearLocator(Locator_149510, ):
    unicode_149511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1621, (-1)), 'unicode', u'\n    Determine the tick locations\n\n    The first time this function is called it will try to set the\n    number of ticks to make a nice tick partitioning.  Thereafter the\n    number of ticks will be fixed so that interactive navigation will\n    be nice\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1622)
        None_149512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 32), 'None')
        # Getting the type of 'None' (line 1622)
        None_149513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 46), 'None')
        defaults = [None_149512, None_149513]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1622, 4, False)
        # Assigning a type to the variable 'self' (line 1623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1623, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearLocator.__init__', ['numticks', 'presets'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['numticks', 'presets'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_149514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1625, (-1)), 'unicode', u'\n        Use presets to set locs based on lom.  A dict mapping vmin, vmax->locs\n        ')
        
        # Assigning a Name to a Attribute (line 1626):
        
        # Assigning a Name to a Attribute (line 1626):
        # Getting the type of 'numticks' (line 1626)
        numticks_149515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 24), 'numticks')
        # Getting the type of 'self' (line 1626)
        self_149516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 8), 'self')
        # Setting the type of the member 'numticks' of a type (line 1626)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1626, 8), self_149516, 'numticks', numticks_149515)
        
        # Type idiom detected: calculating its left and rigth part (line 1627)
        # Getting the type of 'presets' (line 1627)
        presets_149517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 11), 'presets')
        # Getting the type of 'None' (line 1627)
        None_149518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 22), 'None')
        
        (may_be_149519, more_types_in_union_149520) = may_be_none(presets_149517, None_149518)

        if may_be_149519:

            if more_types_in_union_149520:
                # Runtime conditional SSA (line 1627)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Dict to a Attribute (line 1628):
            
            # Assigning a Dict to a Attribute (line 1628):
            
            # Obtaining an instance of the builtin type 'dict' (line 1628)
            dict_149521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1628, 27), 'dict')
            # Adding type elements to the builtin type 'dict' instance (line 1628)
            
            # Getting the type of 'self' (line 1628)
            self_149522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 12), 'self')
            # Setting the type of the member 'presets' of a type (line 1628)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1628, 12), self_149522, 'presets', dict_149521)

            if more_types_in_union_149520:
                # Runtime conditional SSA for else branch (line 1627)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_149519) or more_types_in_union_149520):
            
            # Assigning a Name to a Attribute (line 1630):
            
            # Assigning a Name to a Attribute (line 1630):
            # Getting the type of 'presets' (line 1630)
            presets_149523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 27), 'presets')
            # Getting the type of 'self' (line 1630)
            self_149524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 12), 'self')
            # Setting the type of the member 'presets' of a type (line 1630)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1630, 12), self_149524, 'presets', presets_149523)

            if (may_be_149519 and more_types_in_union_149520):
                # SSA join for if statement (line 1627)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1632)
        None_149525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 34), 'None')
        # Getting the type of 'None' (line 1632)
        None_149526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 48), 'None')
        defaults = [None_149525, None_149526]
        # Create a new context for function 'set_params'
        module_type_store = module_type_store.open_function_context('set_params', 1632, 4, False)
        # Assigning a type to the variable 'self' (line 1633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1633, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearLocator.set_params.__dict__.__setitem__('stypy_localization', localization)
        LinearLocator.set_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearLocator.set_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearLocator.set_params.__dict__.__setitem__('stypy_function_name', 'LinearLocator.set_params')
        LinearLocator.set_params.__dict__.__setitem__('stypy_param_names_list', ['numticks', 'presets'])
        LinearLocator.set_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearLocator.set_params.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearLocator.set_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearLocator.set_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearLocator.set_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearLocator.set_params.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearLocator.set_params', ['numticks', 'presets'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_params', localization, ['numticks', 'presets'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_params(...)' code ##################

        unicode_149527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1633, 8), 'unicode', u'Set parameters within this locator.')
        
        # Type idiom detected: calculating its left and rigth part (line 1634)
        # Getting the type of 'presets' (line 1634)
        presets_149528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 8), 'presets')
        # Getting the type of 'None' (line 1634)
        None_149529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 26), 'None')
        
        (may_be_149530, more_types_in_union_149531) = may_not_be_none(presets_149528, None_149529)

        if may_be_149530:

            if more_types_in_union_149531:
                # Runtime conditional SSA (line 1634)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1635):
            
            # Assigning a Name to a Attribute (line 1635):
            # Getting the type of 'presets' (line 1635)
            presets_149532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 27), 'presets')
            # Getting the type of 'self' (line 1635)
            self_149533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 12), 'self')
            # Setting the type of the member 'presets' of a type (line 1635)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1635, 12), self_149533, 'presets', presets_149532)

            if more_types_in_union_149531:
                # SSA join for if statement (line 1634)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1636)
        # Getting the type of 'numticks' (line 1636)
        numticks_149534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 8), 'numticks')
        # Getting the type of 'None' (line 1636)
        None_149535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 27), 'None')
        
        (may_be_149536, more_types_in_union_149537) = may_not_be_none(numticks_149534, None_149535)

        if may_be_149536:

            if more_types_in_union_149537:
                # Runtime conditional SSA (line 1636)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1637):
            
            # Assigning a Name to a Attribute (line 1637):
            # Getting the type of 'numticks' (line 1637)
            numticks_149538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 28), 'numticks')
            # Getting the type of 'self' (line 1637)
            self_149539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 12), 'self')
            # Setting the type of the member 'numticks' of a type (line 1637)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1637, 12), self_149539, 'numticks', numticks_149538)

            if more_types_in_union_149537:
                # SSA join for if statement (line 1636)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'set_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_params' in the type store
        # Getting the type of 'stypy_return_type' (line 1632)
        stypy_return_type_149540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149540)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_params'
        return stypy_return_type_149540


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1639, 4, False)
        # Assigning a type to the variable 'self' (line 1640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1640, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        LinearLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearLocator.__call__.__dict__.__setitem__('stypy_function_name', 'LinearLocator.__call__')
        LinearLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        LinearLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_149541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1640, 8), 'unicode', u'Return the locations of the ticks')
        
        # Assigning a Call to a Tuple (line 1641):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 1641)
        # Processing the call keyword arguments (line 1641)
        kwargs_149545 = {}
        # Getting the type of 'self' (line 1641)
        self_149542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 1641)
        axis_149543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 21), self_149542, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 1641)
        get_view_interval_149544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 21), axis_149543, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 1641)
        get_view_interval_call_result_149546 = invoke(stypy.reporting.localization.Localization(__file__, 1641, 21), get_view_interval_149544, *[], **kwargs_149545)
        
        # Assigning a type to the variable 'call_assignment_146295' (line 1641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 8), 'call_assignment_146295', get_view_interval_call_result_149546)
        
        # Assigning a Call to a Name (line 1641):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1641, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149550 = {}
        # Getting the type of 'call_assignment_146295' (line 1641)
        call_assignment_146295_149547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 8), 'call_assignment_146295', False)
        # Obtaining the member '__getitem__' of a type (line 1641)
        getitem___149548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 8), call_assignment_146295_149547, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149551 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149548, *[int_149549], **kwargs_149550)
        
        # Assigning a type to the variable 'call_assignment_146296' (line 1641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 8), 'call_assignment_146296', getitem___call_result_149551)
        
        # Assigning a Name to a Name (line 1641):
        # Getting the type of 'call_assignment_146296' (line 1641)
        call_assignment_146296_149552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 8), 'call_assignment_146296')
        # Assigning a type to the variable 'vmin' (line 1641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 8), 'vmin', call_assignment_146296_149552)
        
        # Assigning a Call to a Name (line 1641):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1641, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149556 = {}
        # Getting the type of 'call_assignment_146295' (line 1641)
        call_assignment_146295_149553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 8), 'call_assignment_146295', False)
        # Obtaining the member '__getitem__' of a type (line 1641)
        getitem___149554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 8), call_assignment_146295_149553, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149557 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149554, *[int_149555], **kwargs_149556)
        
        # Assigning a type to the variable 'call_assignment_146297' (line 1641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 8), 'call_assignment_146297', getitem___call_result_149557)
        
        # Assigning a Name to a Name (line 1641):
        # Getting the type of 'call_assignment_146297' (line 1641)
        call_assignment_146297_149558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 8), 'call_assignment_146297')
        # Assigning a type to the variable 'vmax' (line 1641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 14), 'vmax', call_assignment_146297_149558)
        
        # Call to tick_values(...): (line 1642)
        # Processing the call arguments (line 1642)
        # Getting the type of 'vmin' (line 1642)
        vmin_149561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 32), 'vmin', False)
        # Getting the type of 'vmax' (line 1642)
        vmax_149562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 38), 'vmax', False)
        # Processing the call keyword arguments (line 1642)
        kwargs_149563 = {}
        # Getting the type of 'self' (line 1642)
        self_149559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 15), 'self', False)
        # Obtaining the member 'tick_values' of a type (line 1642)
        tick_values_149560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1642, 15), self_149559, 'tick_values')
        # Calling tick_values(args, kwargs) (line 1642)
        tick_values_call_result_149564 = invoke(stypy.reporting.localization.Localization(__file__, 1642, 15), tick_values_149560, *[vmin_149561, vmax_149562], **kwargs_149563)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1642, 8), 'stypy_return_type', tick_values_call_result_149564)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1639)
        stypy_return_type_149565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149565)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_149565


    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 1644, 4, False)
        # Assigning a type to the variable 'self' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearLocator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        LinearLocator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearLocator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearLocator.tick_values.__dict__.__setitem__('stypy_function_name', 'LinearLocator.tick_values')
        LinearLocator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        LinearLocator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearLocator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearLocator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearLocator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearLocator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearLocator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearLocator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        
        # Assigning a Call to a Tuple (line 1645):
        
        # Assigning a Call to a Name:
        
        # Call to nonsingular(...): (line 1645)
        # Processing the call arguments (line 1645)
        # Getting the type of 'vmin' (line 1645)
        vmin_149568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 45), 'vmin', False)
        # Getting the type of 'vmax' (line 1645)
        vmax_149569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 51), 'vmax', False)
        # Processing the call keyword arguments (line 1645)
        float_149570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1645, 66), 'float')
        keyword_149571 = float_149570
        kwargs_149572 = {'expander': keyword_149571}
        # Getting the type of 'mtransforms' (line 1645)
        mtransforms_149566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 21), 'mtransforms', False)
        # Obtaining the member 'nonsingular' of a type (line 1645)
        nonsingular_149567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1645, 21), mtransforms_149566, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 1645)
        nonsingular_call_result_149573 = invoke(stypy.reporting.localization.Localization(__file__, 1645, 21), nonsingular_149567, *[vmin_149568, vmax_149569], **kwargs_149572)
        
        # Assigning a type to the variable 'call_assignment_146298' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'call_assignment_146298', nonsingular_call_result_149573)
        
        # Assigning a Call to a Name (line 1645):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1645, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149577 = {}
        # Getting the type of 'call_assignment_146298' (line 1645)
        call_assignment_146298_149574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'call_assignment_146298', False)
        # Obtaining the member '__getitem__' of a type (line 1645)
        getitem___149575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1645, 8), call_assignment_146298_149574, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149578 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149575, *[int_149576], **kwargs_149577)
        
        # Assigning a type to the variable 'call_assignment_146299' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'call_assignment_146299', getitem___call_result_149578)
        
        # Assigning a Name to a Name (line 1645):
        # Getting the type of 'call_assignment_146299' (line 1645)
        call_assignment_146299_149579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'call_assignment_146299')
        # Assigning a type to the variable 'vmin' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'vmin', call_assignment_146299_149579)
        
        # Assigning a Call to a Name (line 1645):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1645, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149583 = {}
        # Getting the type of 'call_assignment_146298' (line 1645)
        call_assignment_146298_149580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'call_assignment_146298', False)
        # Obtaining the member '__getitem__' of a type (line 1645)
        getitem___149581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1645, 8), call_assignment_146298_149580, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149584 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149581, *[int_149582], **kwargs_149583)
        
        # Assigning a type to the variable 'call_assignment_146300' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'call_assignment_146300', getitem___call_result_149584)
        
        # Assigning a Name to a Name (line 1645):
        # Getting the type of 'call_assignment_146300' (line 1645)
        call_assignment_146300_149585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'call_assignment_146300')
        # Assigning a type to the variable 'vmax' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 14), 'vmax', call_assignment_146300_149585)
        
        
        # Getting the type of 'vmax' (line 1646)
        vmax_149586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 11), 'vmax')
        # Getting the type of 'vmin' (line 1646)
        vmin_149587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 18), 'vmin')
        # Applying the binary operator '<' (line 1646)
        result_lt_149588 = python_operator(stypy.reporting.localization.Localization(__file__, 1646, 11), '<', vmax_149586, vmin_149587)
        
        # Testing the type of an if condition (line 1646)
        if_condition_149589 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1646, 8), result_lt_149588)
        # Assigning a type to the variable 'if_condition_149589' (line 1646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 8), 'if_condition_149589', if_condition_149589)
        # SSA begins for if statement (line 1646)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1647):
        
        # Assigning a Name to a Name (line 1647):
        # Getting the type of 'vmax' (line 1647)
        vmax_149590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 25), 'vmax')
        # Assigning a type to the variable 'tuple_assignment_146301' (line 1647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1647, 12), 'tuple_assignment_146301', vmax_149590)
        
        # Assigning a Name to a Name (line 1647):
        # Getting the type of 'vmin' (line 1647)
        vmin_149591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 31), 'vmin')
        # Assigning a type to the variable 'tuple_assignment_146302' (line 1647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1647, 12), 'tuple_assignment_146302', vmin_149591)
        
        # Assigning a Name to a Name (line 1647):
        # Getting the type of 'tuple_assignment_146301' (line 1647)
        tuple_assignment_146301_149592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 12), 'tuple_assignment_146301')
        # Assigning a type to the variable 'vmin' (line 1647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1647, 12), 'vmin', tuple_assignment_146301_149592)
        
        # Assigning a Name to a Name (line 1647):
        # Getting the type of 'tuple_assignment_146302' (line 1647)
        tuple_assignment_146302_149593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 12), 'tuple_assignment_146302')
        # Assigning a type to the variable 'vmax' (line 1647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1647, 18), 'vmax', tuple_assignment_146302_149593)
        # SSA join for if statement (line 1646)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1649)
        tuple_149594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1649, 12), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1649)
        # Adding element type (line 1649)
        # Getting the type of 'vmin' (line 1649)
        vmin_149595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 12), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1649, 12), tuple_149594, vmin_149595)
        # Adding element type (line 1649)
        # Getting the type of 'vmax' (line 1649)
        vmax_149596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 18), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1649, 12), tuple_149594, vmax_149596)
        
        # Getting the type of 'self' (line 1649)
        self_149597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 27), 'self')
        # Obtaining the member 'presets' of a type (line 1649)
        presets_149598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 27), self_149597, 'presets')
        # Applying the binary operator 'in' (line 1649)
        result_contains_149599 = python_operator(stypy.reporting.localization.Localization(__file__, 1649, 11), 'in', tuple_149594, presets_149598)
        
        # Testing the type of an if condition (line 1649)
        if_condition_149600 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1649, 8), result_contains_149599)
        # Assigning a type to the variable 'if_condition_149600' (line 1649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1649, 8), 'if_condition_149600', if_condition_149600)
        # SSA begins for if statement (line 1649)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1650)
        tuple_149601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1650, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1650)
        # Adding element type (line 1650)
        # Getting the type of 'vmin' (line 1650)
        vmin_149602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 33), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1650, 33), tuple_149601, vmin_149602)
        # Adding element type (line 1650)
        # Getting the type of 'vmax' (line 1650)
        vmax_149603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 39), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1650, 33), tuple_149601, vmax_149603)
        
        # Getting the type of 'self' (line 1650)
        self_149604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 19), 'self')
        # Obtaining the member 'presets' of a type (line 1650)
        presets_149605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1650, 19), self_149604, 'presets')
        # Obtaining the member '__getitem__' of a type (line 1650)
        getitem___149606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1650, 19), presets_149605, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1650)
        subscript_call_result_149607 = invoke(stypy.reporting.localization.Localization(__file__, 1650, 19), getitem___149606, tuple_149601)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1650, 12), 'stypy_return_type', subscript_call_result_149607)
        # SSA join for if statement (line 1649)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1652)
        # Getting the type of 'self' (line 1652)
        self_149608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 11), 'self')
        # Obtaining the member 'numticks' of a type (line 1652)
        numticks_149609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 11), self_149608, 'numticks')
        # Getting the type of 'None' (line 1652)
        None_149610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 28), 'None')
        
        (may_be_149611, more_types_in_union_149612) = may_be_none(numticks_149609, None_149610)

        if may_be_149611:

            if more_types_in_union_149612:
                # Runtime conditional SSA (line 1652)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to _set_numticks(...): (line 1653)
            # Processing the call keyword arguments (line 1653)
            kwargs_149615 = {}
            # Getting the type of 'self' (line 1653)
            self_149613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 12), 'self', False)
            # Obtaining the member '_set_numticks' of a type (line 1653)
            _set_numticks_149614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1653, 12), self_149613, '_set_numticks')
            # Calling _set_numticks(args, kwargs) (line 1653)
            _set_numticks_call_result_149616 = invoke(stypy.reporting.localization.Localization(__file__, 1653, 12), _set_numticks_149614, *[], **kwargs_149615)
            

            if more_types_in_union_149612:
                # SSA join for if statement (line 1652)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'self' (line 1655)
        self_149617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 11), 'self')
        # Obtaining the member 'numticks' of a type (line 1655)
        numticks_149618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1655, 11), self_149617, 'numticks')
        int_149619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1655, 28), 'int')
        # Applying the binary operator '==' (line 1655)
        result_eq_149620 = python_operator(stypy.reporting.localization.Localization(__file__, 1655, 11), '==', numticks_149618, int_149619)
        
        # Testing the type of an if condition (line 1655)
        if_condition_149621 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1655, 8), result_eq_149620)
        # Assigning a type to the variable 'if_condition_149621' (line 1655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1655, 8), 'if_condition_149621', if_condition_149621)
        # SSA begins for if statement (line 1655)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'list' (line 1656)
        list_149622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1656, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1656)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 12), 'stypy_return_type', list_149622)
        # SSA join for if statement (line 1655)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1657):
        
        # Assigning a Call to a Name (line 1657):
        
        # Call to linspace(...): (line 1657)
        # Processing the call arguments (line 1657)
        # Getting the type of 'vmin' (line 1657)
        vmin_149625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 31), 'vmin', False)
        # Getting the type of 'vmax' (line 1657)
        vmax_149626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 37), 'vmax', False)
        # Getting the type of 'self' (line 1657)
        self_149627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 43), 'self', False)
        # Obtaining the member 'numticks' of a type (line 1657)
        numticks_149628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1657, 43), self_149627, 'numticks')
        # Processing the call keyword arguments (line 1657)
        kwargs_149629 = {}
        # Getting the type of 'np' (line 1657)
        np_149623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 19), 'np', False)
        # Obtaining the member 'linspace' of a type (line 1657)
        linspace_149624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1657, 19), np_149623, 'linspace')
        # Calling linspace(args, kwargs) (line 1657)
        linspace_call_result_149630 = invoke(stypy.reporting.localization.Localization(__file__, 1657, 19), linspace_149624, *[vmin_149625, vmax_149626, numticks_149628], **kwargs_149629)
        
        # Assigning a type to the variable 'ticklocs' (line 1657)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1657, 8), 'ticklocs', linspace_call_result_149630)
        
        # Call to raise_if_exceeds(...): (line 1659)
        # Processing the call arguments (line 1659)
        # Getting the type of 'ticklocs' (line 1659)
        ticklocs_149633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 37), 'ticklocs', False)
        # Processing the call keyword arguments (line 1659)
        kwargs_149634 = {}
        # Getting the type of 'self' (line 1659)
        self_149631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 15), 'self', False)
        # Obtaining the member 'raise_if_exceeds' of a type (line 1659)
        raise_if_exceeds_149632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1659, 15), self_149631, 'raise_if_exceeds')
        # Calling raise_if_exceeds(args, kwargs) (line 1659)
        raise_if_exceeds_call_result_149635 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 15), raise_if_exceeds_149632, *[ticklocs_149633], **kwargs_149634)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 8), 'stypy_return_type', raise_if_exceeds_call_result_149635)
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 1644)
        stypy_return_type_149636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149636)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_149636


    @norecursion
    def _set_numticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_numticks'
        module_type_store = module_type_store.open_function_context('_set_numticks', 1661, 4, False)
        # Assigning a type to the variable 'self' (line 1662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1662, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearLocator._set_numticks.__dict__.__setitem__('stypy_localization', localization)
        LinearLocator._set_numticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearLocator._set_numticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearLocator._set_numticks.__dict__.__setitem__('stypy_function_name', 'LinearLocator._set_numticks')
        LinearLocator._set_numticks.__dict__.__setitem__('stypy_param_names_list', [])
        LinearLocator._set_numticks.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearLocator._set_numticks.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearLocator._set_numticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearLocator._set_numticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearLocator._set_numticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearLocator._set_numticks.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearLocator._set_numticks', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_numticks', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_numticks(...)' code ##################

        
        # Assigning a Num to a Attribute (line 1662):
        
        # Assigning a Num to a Attribute (line 1662):
        int_149637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 24), 'int')
        # Getting the type of 'self' (line 1662)
        self_149638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 8), 'self')
        # Setting the type of the member 'numticks' of a type (line 1662)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1662, 8), self_149638, 'numticks', int_149637)
        
        # ################# End of '_set_numticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_numticks' in the type store
        # Getting the type of 'stypy_return_type' (line 1661)
        stypy_return_type_149639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149639)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_numticks'
        return stypy_return_type_149639


    @norecursion
    def view_limits(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'view_limits'
        module_type_store = module_type_store.open_function_context('view_limits', 1664, 4, False)
        # Assigning a type to the variable 'self' (line 1665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1665, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearLocator.view_limits.__dict__.__setitem__('stypy_localization', localization)
        LinearLocator.view_limits.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearLocator.view_limits.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearLocator.view_limits.__dict__.__setitem__('stypy_function_name', 'LinearLocator.view_limits')
        LinearLocator.view_limits.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        LinearLocator.view_limits.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearLocator.view_limits.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearLocator.view_limits.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearLocator.view_limits.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearLocator.view_limits.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearLocator.view_limits.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearLocator.view_limits', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'view_limits', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'view_limits(...)' code ##################

        unicode_149640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1665, 8), 'unicode', u'Try to choose the view limits intelligently')
        
        
        # Getting the type of 'vmax' (line 1667)
        vmax_149641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 11), 'vmax')
        # Getting the type of 'vmin' (line 1667)
        vmin_149642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 18), 'vmin')
        # Applying the binary operator '<' (line 1667)
        result_lt_149643 = python_operator(stypy.reporting.localization.Localization(__file__, 1667, 11), '<', vmax_149641, vmin_149642)
        
        # Testing the type of an if condition (line 1667)
        if_condition_149644 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1667, 8), result_lt_149643)
        # Assigning a type to the variable 'if_condition_149644' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 8), 'if_condition_149644', if_condition_149644)
        # SSA begins for if statement (line 1667)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1668):
        
        # Assigning a Name to a Name (line 1668):
        # Getting the type of 'vmax' (line 1668)
        vmax_149645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 25), 'vmax')
        # Assigning a type to the variable 'tuple_assignment_146303' (line 1668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 12), 'tuple_assignment_146303', vmax_149645)
        
        # Assigning a Name to a Name (line 1668):
        # Getting the type of 'vmin' (line 1668)
        vmin_149646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 31), 'vmin')
        # Assigning a type to the variable 'tuple_assignment_146304' (line 1668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 12), 'tuple_assignment_146304', vmin_149646)
        
        # Assigning a Name to a Name (line 1668):
        # Getting the type of 'tuple_assignment_146303' (line 1668)
        tuple_assignment_146303_149647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 12), 'tuple_assignment_146303')
        # Assigning a type to the variable 'vmin' (line 1668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 12), 'vmin', tuple_assignment_146303_149647)
        
        # Assigning a Name to a Name (line 1668):
        # Getting the type of 'tuple_assignment_146304' (line 1668)
        tuple_assignment_146304_149648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 12), 'tuple_assignment_146304')
        # Assigning a type to the variable 'vmax' (line 1668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 18), 'vmax', tuple_assignment_146304_149648)
        # SSA join for if statement (line 1667)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'vmin' (line 1670)
        vmin_149649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 11), 'vmin')
        # Getting the type of 'vmax' (line 1670)
        vmax_149650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 19), 'vmax')
        # Applying the binary operator '==' (line 1670)
        result_eq_149651 = python_operator(stypy.reporting.localization.Localization(__file__, 1670, 11), '==', vmin_149649, vmax_149650)
        
        # Testing the type of an if condition (line 1670)
        if_condition_149652 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1670, 8), result_eq_149651)
        # Assigning a type to the variable 'if_condition_149652' (line 1670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'if_condition_149652', if_condition_149652)
        # SSA begins for if statement (line 1670)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'vmin' (line 1671)
        vmin_149653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 12), 'vmin')
        int_149654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 20), 'int')
        # Applying the binary operator '-=' (line 1671)
        result_isub_149655 = python_operator(stypy.reporting.localization.Localization(__file__, 1671, 12), '-=', vmin_149653, int_149654)
        # Assigning a type to the variable 'vmin' (line 1671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 12), 'vmin', result_isub_149655)
        
        
        # Getting the type of 'vmax' (line 1672)
        vmax_149656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 12), 'vmax')
        int_149657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 20), 'int')
        # Applying the binary operator '+=' (line 1672)
        result_iadd_149658 = python_operator(stypy.reporting.localization.Localization(__file__, 1672, 12), '+=', vmax_149656, int_149657)
        # Assigning a type to the variable 'vmax' (line 1672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1672, 12), 'vmax', result_iadd_149658)
        
        # SSA join for if statement (line 1670)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        unicode_149659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 20), 'unicode', u'axes.autolimit_mode')
        # Getting the type of 'rcParams' (line 1674)
        rcParams_149660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 11), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1674)
        getitem___149661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1674, 11), rcParams_149660, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1674)
        subscript_call_result_149662 = invoke(stypy.reporting.localization.Localization(__file__, 1674, 11), getitem___149661, unicode_149659)
        
        unicode_149663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 46), 'unicode', u'round_numbers')
        # Applying the binary operator '==' (line 1674)
        result_eq_149664 = python_operator(stypy.reporting.localization.Localization(__file__, 1674, 11), '==', subscript_call_result_149662, unicode_149663)
        
        # Testing the type of an if condition (line 1674)
        if_condition_149665 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1674, 8), result_eq_149664)
        # Assigning a type to the variable 'if_condition_149665' (line 1674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 8), 'if_condition_149665', if_condition_149665)
        # SSA begins for if statement (line 1674)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1675):
        
        # Assigning a Call to a Name:
        
        # Call to _divmod(...): (line 1675)
        # Processing the call arguments (line 1675)
        
        # Call to log10(...): (line 1676)
        # Processing the call arguments (line 1676)
        # Getting the type of 'vmax' (line 1676)
        vmax_149669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 27), 'vmax', False)
        # Getting the type of 'vmin' (line 1676)
        vmin_149670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 34), 'vmin', False)
        # Applying the binary operator '-' (line 1676)
        result_sub_149671 = python_operator(stypy.reporting.localization.Localization(__file__, 1676, 27), '-', vmax_149669, vmin_149670)
        
        # Processing the call keyword arguments (line 1676)
        kwargs_149672 = {}
        # Getting the type of 'math' (line 1676)
        math_149667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 16), 'math', False)
        # Obtaining the member 'log10' of a type (line 1676)
        log10_149668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1676, 16), math_149667, 'log10')
        # Calling log10(args, kwargs) (line 1676)
        log10_call_result_149673 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 16), log10_149668, *[result_sub_149671], **kwargs_149672)
        
        
        # Call to log10(...): (line 1676)
        # Processing the call arguments (line 1676)
        
        # Call to max(...): (line 1676)
        # Processing the call arguments (line 1676)
        # Getting the type of 'self' (line 1676)
        self_149677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 56), 'self', False)
        # Obtaining the member 'numticks' of a type (line 1676)
        numticks_149678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1676, 56), self_149677, 'numticks')
        int_149679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, 72), 'int')
        # Applying the binary operator '-' (line 1676)
        result_sub_149680 = python_operator(stypy.reporting.localization.Localization(__file__, 1676, 56), '-', numticks_149678, int_149679)
        
        int_149681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, 75), 'int')
        # Processing the call keyword arguments (line 1676)
        kwargs_149682 = {}
        # Getting the type of 'max' (line 1676)
        max_149676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 52), 'max', False)
        # Calling max(args, kwargs) (line 1676)
        max_call_result_149683 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 52), max_149676, *[result_sub_149680, int_149681], **kwargs_149682)
        
        # Processing the call keyword arguments (line 1676)
        kwargs_149684 = {}
        # Getting the type of 'math' (line 1676)
        math_149674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 41), 'math', False)
        # Obtaining the member 'log10' of a type (line 1676)
        log10_149675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1676, 41), math_149674, 'log10')
        # Calling log10(args, kwargs) (line 1676)
        log10_call_result_149685 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 41), log10_149675, *[max_call_result_149683], **kwargs_149684)
        
        # Processing the call keyword arguments (line 1675)
        kwargs_149686 = {}
        # Getting the type of '_divmod' (line 1675)
        _divmod_149666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 34), '_divmod', False)
        # Calling _divmod(args, kwargs) (line 1675)
        _divmod_call_result_149687 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 34), _divmod_149666, *[log10_call_result_149673, log10_call_result_149685], **kwargs_149686)
        
        # Assigning a type to the variable 'call_assignment_146305' (line 1675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), 'call_assignment_146305', _divmod_call_result_149687)
        
        # Assigning a Call to a Name (line 1675):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1675, 12), 'int')
        # Processing the call keyword arguments
        kwargs_149691 = {}
        # Getting the type of 'call_assignment_146305' (line 1675)
        call_assignment_146305_149688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), 'call_assignment_146305', False)
        # Obtaining the member '__getitem__' of a type (line 1675)
        getitem___149689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 12), call_assignment_146305_149688, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149692 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149689, *[int_149690], **kwargs_149691)
        
        # Assigning a type to the variable 'call_assignment_146306' (line 1675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), 'call_assignment_146306', getitem___call_result_149692)
        
        # Assigning a Name to a Name (line 1675):
        # Getting the type of 'call_assignment_146306' (line 1675)
        call_assignment_146306_149693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), 'call_assignment_146306')
        # Assigning a type to the variable 'exponent' (line 1675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), 'exponent', call_assignment_146306_149693)
        
        # Assigning a Call to a Name (line 1675):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1675, 12), 'int')
        # Processing the call keyword arguments
        kwargs_149697 = {}
        # Getting the type of 'call_assignment_146305' (line 1675)
        call_assignment_146305_149694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), 'call_assignment_146305', False)
        # Obtaining the member '__getitem__' of a type (line 1675)
        getitem___149695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 12), call_assignment_146305_149694, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149698 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149695, *[int_149696], **kwargs_149697)
        
        # Assigning a type to the variable 'call_assignment_146307' (line 1675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), 'call_assignment_146307', getitem___call_result_149698)
        
        # Assigning a Name to a Name (line 1675):
        # Getting the type of 'call_assignment_146307' (line 1675)
        call_assignment_146307_149699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), 'call_assignment_146307')
        # Assigning a type to the variable 'remainder' (line 1675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 22), 'remainder', call_assignment_146307_149699)
        
        # Getting the type of 'exponent' (line 1677)
        exponent_149700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 12), 'exponent')
        
        # Getting the type of 'remainder' (line 1677)
        remainder_149701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 25), 'remainder')
        float_149702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, 37), 'float')
        # Applying the binary operator '<' (line 1677)
        result_lt_149703 = python_operator(stypy.reporting.localization.Localization(__file__, 1677, 25), '<', remainder_149701, float_149702)
        
        # Applying the binary operator '-=' (line 1677)
        result_isub_149704 = python_operator(stypy.reporting.localization.Localization(__file__, 1677, 12), '-=', exponent_149700, result_lt_149703)
        # Assigning a type to the variable 'exponent' (line 1677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 12), 'exponent', result_isub_149704)
        
        
        # Assigning a BinOp to a Name (line 1678):
        
        # Assigning a BinOp to a Name (line 1678):
        
        # Call to max(...): (line 1678)
        # Processing the call arguments (line 1678)
        # Getting the type of 'self' (line 1678)
        self_149706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 24), 'self', False)
        # Obtaining the member 'numticks' of a type (line 1678)
        numticks_149707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1678, 24), self_149706, 'numticks')
        int_149708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1678, 40), 'int')
        # Applying the binary operator '-' (line 1678)
        result_sub_149709 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 24), '-', numticks_149707, int_149708)
        
        int_149710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1678, 43), 'int')
        # Processing the call keyword arguments (line 1678)
        kwargs_149711 = {}
        # Getting the type of 'max' (line 1678)
        max_149705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 20), 'max', False)
        # Calling max(args, kwargs) (line 1678)
        max_call_result_149712 = invoke(stypy.reporting.localization.Localization(__file__, 1678, 20), max_149705, *[result_sub_149709, int_149710], **kwargs_149711)
        
        
        # Getting the type of 'exponent' (line 1678)
        exponent_149713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 51), 'exponent')
        # Applying the 'usub' unary operator (line 1678)
        result___neg___149714 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 50), 'usub', exponent_149713)
        
        # Applying the binary operator '**' (line 1678)
        result_pow_149715 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 20), '**', max_call_result_149712, result___neg___149714)
        
        # Assigning a type to the variable 'scale' (line 1678)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1678, 12), 'scale', result_pow_149715)
        
        # Assigning a BinOp to a Name (line 1679):
        
        # Assigning a BinOp to a Name (line 1679):
        
        # Call to floor(...): (line 1679)
        # Processing the call arguments (line 1679)
        # Getting the type of 'scale' (line 1679)
        scale_149718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 30), 'scale', False)
        # Getting the type of 'vmin' (line 1679)
        vmin_149719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 38), 'vmin', False)
        # Applying the binary operator '*' (line 1679)
        result_mul_149720 = python_operator(stypy.reporting.localization.Localization(__file__, 1679, 30), '*', scale_149718, vmin_149719)
        
        # Processing the call keyword arguments (line 1679)
        kwargs_149721 = {}
        # Getting the type of 'math' (line 1679)
        math_149716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 19), 'math', False)
        # Obtaining the member 'floor' of a type (line 1679)
        floor_149717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 19), math_149716, 'floor')
        # Calling floor(args, kwargs) (line 1679)
        floor_call_result_149722 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 19), floor_149717, *[result_mul_149720], **kwargs_149721)
        
        # Getting the type of 'scale' (line 1679)
        scale_149723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 46), 'scale')
        # Applying the binary operator 'div' (line 1679)
        result_div_149724 = python_operator(stypy.reporting.localization.Localization(__file__, 1679, 19), 'div', floor_call_result_149722, scale_149723)
        
        # Assigning a type to the variable 'vmin' (line 1679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1679, 12), 'vmin', result_div_149724)
        
        # Assigning a BinOp to a Name (line 1680):
        
        # Assigning a BinOp to a Name (line 1680):
        
        # Call to ceil(...): (line 1680)
        # Processing the call arguments (line 1680)
        # Getting the type of 'scale' (line 1680)
        scale_149727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 29), 'scale', False)
        # Getting the type of 'vmax' (line 1680)
        vmax_149728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 37), 'vmax', False)
        # Applying the binary operator '*' (line 1680)
        result_mul_149729 = python_operator(stypy.reporting.localization.Localization(__file__, 1680, 29), '*', scale_149727, vmax_149728)
        
        # Processing the call keyword arguments (line 1680)
        kwargs_149730 = {}
        # Getting the type of 'math' (line 1680)
        math_149725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 19), 'math', False)
        # Obtaining the member 'ceil' of a type (line 1680)
        ceil_149726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1680, 19), math_149725, 'ceil')
        # Calling ceil(args, kwargs) (line 1680)
        ceil_call_result_149731 = invoke(stypy.reporting.localization.Localization(__file__, 1680, 19), ceil_149726, *[result_mul_149729], **kwargs_149730)
        
        # Getting the type of 'scale' (line 1680)
        scale_149732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 45), 'scale')
        # Applying the binary operator 'div' (line 1680)
        result_div_149733 = python_operator(stypy.reporting.localization.Localization(__file__, 1680, 19), 'div', ceil_call_result_149731, scale_149732)
        
        # Assigning a type to the variable 'vmax' (line 1680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1680, 12), 'vmax', result_div_149733)
        # SSA join for if statement (line 1674)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to nonsingular(...): (line 1682)
        # Processing the call arguments (line 1682)
        # Getting the type of 'vmin' (line 1682)
        vmin_149736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 39), 'vmin', False)
        # Getting the type of 'vmax' (line 1682)
        vmax_149737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 45), 'vmax', False)
        # Processing the call keyword arguments (line 1682)
        kwargs_149738 = {}
        # Getting the type of 'mtransforms' (line 1682)
        mtransforms_149734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 15), 'mtransforms', False)
        # Obtaining the member 'nonsingular' of a type (line 1682)
        nonsingular_149735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1682, 15), mtransforms_149734, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 1682)
        nonsingular_call_result_149739 = invoke(stypy.reporting.localization.Localization(__file__, 1682, 15), nonsingular_149735, *[vmin_149736, vmax_149737], **kwargs_149738)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1682, 8), 'stypy_return_type', nonsingular_call_result_149739)
        
        # ################# End of 'view_limits(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'view_limits' in the type store
        # Getting the type of 'stypy_return_type' (line 1664)
        stypy_return_type_149740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149740)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'view_limits'
        return stypy_return_type_149740


# Assigning a type to the variable 'LinearLocator' (line 1612)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1612, 0), 'LinearLocator', LinearLocator)

@norecursion
def closeto(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'closeto'
    module_type_store = module_type_store.open_function_context('closeto', 1685, 0, False)
    
    # Passed parameters checking function
    closeto.stypy_localization = localization
    closeto.stypy_type_of_self = None
    closeto.stypy_type_store = module_type_store
    closeto.stypy_function_name = 'closeto'
    closeto.stypy_param_names_list = ['x', 'y']
    closeto.stypy_varargs_param_name = None
    closeto.stypy_kwargs_param_name = None
    closeto.stypy_call_defaults = defaults
    closeto.stypy_call_varargs = varargs
    closeto.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'closeto', ['x', 'y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'closeto', localization, ['x', 'y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'closeto(...)' code ##################

    
    
    
    # Call to abs(...): (line 1686)
    # Processing the call arguments (line 1686)
    # Getting the type of 'x' (line 1686)
    x_149742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 11), 'x', False)
    # Getting the type of 'y' (line 1686)
    y_149743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 15), 'y', False)
    # Applying the binary operator '-' (line 1686)
    result_sub_149744 = python_operator(stypy.reporting.localization.Localization(__file__, 1686, 11), '-', x_149742, y_149743)
    
    # Processing the call keyword arguments (line 1686)
    kwargs_149745 = {}
    # Getting the type of 'abs' (line 1686)
    abs_149741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 7), 'abs', False)
    # Calling abs(args, kwargs) (line 1686)
    abs_call_result_149746 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 7), abs_149741, *[result_sub_149744], **kwargs_149745)
    
    float_149747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, 20), 'float')
    # Applying the binary operator '<' (line 1686)
    result_lt_149748 = python_operator(stypy.reporting.localization.Localization(__file__, 1686, 7), '<', abs_call_result_149746, float_149747)
    
    # Testing the type of an if condition (line 1686)
    if_condition_149749 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1686, 4), result_lt_149748)
    # Assigning a type to the variable 'if_condition_149749' (line 1686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 4), 'if_condition_149749', if_condition_149749)
    # SSA begins for if statement (line 1686)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'True' (line 1687)
    True_149750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 15), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 1687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1687, 8), 'stypy_return_type', True_149750)
    # SSA branch for the else part of an if statement (line 1686)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'False' (line 1689)
    False_149751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 1689)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1689, 8), 'stypy_return_type', False_149751)
    # SSA join for if statement (line 1686)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'closeto(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'closeto' in the type store
    # Getting the type of 'stypy_return_type' (line 1685)
    stypy_return_type_149752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149752)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'closeto'
    return stypy_return_type_149752

# Assigning a type to the variable 'closeto' (line 1685)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1685, 0), 'closeto', closeto)
# Declaration of the 'Base' class

class Base(object, ):
    unicode_149753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1693, 4), 'unicode', u'this solution has some hacks to deal with floating point inaccuracies')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1694, 4, False)
        # Assigning a type to the variable 'self' (line 1695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Base.__init__', ['base'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['base'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        
        # Getting the type of 'base' (line 1695)
        base_149754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 11), 'base')
        int_149755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1695, 19), 'int')
        # Applying the binary operator '<=' (line 1695)
        result_le_149756 = python_operator(stypy.reporting.localization.Localization(__file__, 1695, 11), '<=', base_149754, int_149755)
        
        # Testing the type of an if condition (line 1695)
        if_condition_149757 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1695, 8), result_le_149756)
        # Assigning a type to the variable 'if_condition_149757' (line 1695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 8), 'if_condition_149757', if_condition_149757)
        # SSA begins for if statement (line 1695)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1696)
        # Processing the call arguments (line 1696)
        unicode_149759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1696, 29), 'unicode', u"'base' must be positive")
        # Processing the call keyword arguments (line 1696)
        kwargs_149760 = {}
        # Getting the type of 'ValueError' (line 1696)
        ValueError_149758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1696)
        ValueError_call_result_149761 = invoke(stypy.reporting.localization.Localization(__file__, 1696, 18), ValueError_149758, *[unicode_149759], **kwargs_149760)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1696, 12), ValueError_call_result_149761, 'raise parameter', BaseException)
        # SSA join for if statement (line 1695)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1697):
        
        # Assigning a Name to a Attribute (line 1697):
        # Getting the type of 'base' (line 1697)
        base_149762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 21), 'base')
        # Getting the type of 'self' (line 1697)
        self_149763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 8), 'self')
        # Setting the type of the member '_base' of a type (line 1697)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1697, 8), self_149763, '_base', base_149762)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def lt(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'lt'
        module_type_store = module_type_store.open_function_context('lt', 1699, 4, False)
        # Assigning a type to the variable 'self' (line 1700)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1700, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Base.lt.__dict__.__setitem__('stypy_localization', localization)
        Base.lt.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Base.lt.__dict__.__setitem__('stypy_type_store', module_type_store)
        Base.lt.__dict__.__setitem__('stypy_function_name', 'Base.lt')
        Base.lt.__dict__.__setitem__('stypy_param_names_list', ['x'])
        Base.lt.__dict__.__setitem__('stypy_varargs_param_name', None)
        Base.lt.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Base.lt.__dict__.__setitem__('stypy_call_defaults', defaults)
        Base.lt.__dict__.__setitem__('stypy_call_varargs', varargs)
        Base.lt.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Base.lt.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Base.lt', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'lt', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'lt(...)' code ##################

        unicode_149764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1700, 8), 'unicode', u'return the largest multiple of base < x')
        
        # Assigning a Call to a Tuple (line 1701):
        
        # Assigning a Call to a Name:
        
        # Call to _divmod(...): (line 1701)
        # Processing the call arguments (line 1701)
        # Getting the type of 'x' (line 1701)
        x_149766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 23), 'x', False)
        # Getting the type of 'self' (line 1701)
        self_149767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 26), 'self', False)
        # Obtaining the member '_base' of a type (line 1701)
        _base_149768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1701, 26), self_149767, '_base')
        # Processing the call keyword arguments (line 1701)
        kwargs_149769 = {}
        # Getting the type of '_divmod' (line 1701)
        _divmod_149765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 15), '_divmod', False)
        # Calling _divmod(args, kwargs) (line 1701)
        _divmod_call_result_149770 = invoke(stypy.reporting.localization.Localization(__file__, 1701, 15), _divmod_149765, *[x_149766, _base_149768], **kwargs_149769)
        
        # Assigning a type to the variable 'call_assignment_146308' (line 1701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1701, 8), 'call_assignment_146308', _divmod_call_result_149770)
        
        # Assigning a Call to a Name (line 1701):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1701, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149774 = {}
        # Getting the type of 'call_assignment_146308' (line 1701)
        call_assignment_146308_149771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 8), 'call_assignment_146308', False)
        # Obtaining the member '__getitem__' of a type (line 1701)
        getitem___149772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1701, 8), call_assignment_146308_149771, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149775 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149772, *[int_149773], **kwargs_149774)
        
        # Assigning a type to the variable 'call_assignment_146309' (line 1701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1701, 8), 'call_assignment_146309', getitem___call_result_149775)
        
        # Assigning a Name to a Name (line 1701):
        # Getting the type of 'call_assignment_146309' (line 1701)
        call_assignment_146309_149776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 8), 'call_assignment_146309')
        # Assigning a type to the variable 'd' (line 1701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1701, 8), 'd', call_assignment_146309_149776)
        
        # Assigning a Call to a Name (line 1701):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1701, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149780 = {}
        # Getting the type of 'call_assignment_146308' (line 1701)
        call_assignment_146308_149777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 8), 'call_assignment_146308', False)
        # Obtaining the member '__getitem__' of a type (line 1701)
        getitem___149778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1701, 8), call_assignment_146308_149777, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149781 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149778, *[int_149779], **kwargs_149780)
        
        # Assigning a type to the variable 'call_assignment_146310' (line 1701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1701, 8), 'call_assignment_146310', getitem___call_result_149781)
        
        # Assigning a Name to a Name (line 1701):
        # Getting the type of 'call_assignment_146310' (line 1701)
        call_assignment_146310_149782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 8), 'call_assignment_146310')
        # Assigning a type to the variable 'm' (line 1701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1701, 11), 'm', call_assignment_146310_149782)
        
        
        # Evaluating a boolean operation
        
        # Call to closeto(...): (line 1702)
        # Processing the call arguments (line 1702)
        # Getting the type of 'm' (line 1702)
        m_149784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 19), 'm', False)
        int_149785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1702, 22), 'int')
        # Processing the call keyword arguments (line 1702)
        kwargs_149786 = {}
        # Getting the type of 'closeto' (line 1702)
        closeto_149783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 11), 'closeto', False)
        # Calling closeto(args, kwargs) (line 1702)
        closeto_call_result_149787 = invoke(stypy.reporting.localization.Localization(__file__, 1702, 11), closeto_149783, *[m_149784, int_149785], **kwargs_149786)
        
        
        
        # Call to closeto(...): (line 1702)
        # Processing the call arguments (line 1702)
        # Getting the type of 'm' (line 1702)
        m_149789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 41), 'm', False)
        # Getting the type of 'self' (line 1702)
        self_149790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 45), 'self', False)
        # Obtaining the member '_base' of a type (line 1702)
        _base_149791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1702, 45), self_149790, '_base')
        # Applying the binary operator 'div' (line 1702)
        result_div_149792 = python_operator(stypy.reporting.localization.Localization(__file__, 1702, 41), 'div', m_149789, _base_149791)
        
        int_149793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1702, 57), 'int')
        # Processing the call keyword arguments (line 1702)
        kwargs_149794 = {}
        # Getting the type of 'closeto' (line 1702)
        closeto_149788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 33), 'closeto', False)
        # Calling closeto(args, kwargs) (line 1702)
        closeto_call_result_149795 = invoke(stypy.reporting.localization.Localization(__file__, 1702, 33), closeto_149788, *[result_div_149792, int_149793], **kwargs_149794)
        
        # Applying the 'not' unary operator (line 1702)
        result_not__149796 = python_operator(stypy.reporting.localization.Localization(__file__, 1702, 29), 'not', closeto_call_result_149795)
        
        # Applying the binary operator 'and' (line 1702)
        result_and_keyword_149797 = python_operator(stypy.reporting.localization.Localization(__file__, 1702, 11), 'and', closeto_call_result_149787, result_not__149796)
        
        # Testing the type of an if condition (line 1702)
        if_condition_149798 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1702, 8), result_and_keyword_149797)
        # Assigning a type to the variable 'if_condition_149798' (line 1702)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1702, 8), 'if_condition_149798', if_condition_149798)
        # SSA begins for if statement (line 1702)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'd' (line 1703)
        d_149799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 20), 'd')
        int_149800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 24), 'int')
        # Applying the binary operator '-' (line 1703)
        result_sub_149801 = python_operator(stypy.reporting.localization.Localization(__file__, 1703, 20), '-', d_149799, int_149800)
        
        # Getting the type of 'self' (line 1703)
        self_149802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 29), 'self')
        # Obtaining the member '_base' of a type (line 1703)
        _base_149803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 29), self_149802, '_base')
        # Applying the binary operator '*' (line 1703)
        result_mul_149804 = python_operator(stypy.reporting.localization.Localization(__file__, 1703, 19), '*', result_sub_149801, _base_149803)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1703, 12), 'stypy_return_type', result_mul_149804)
        # SSA join for if statement (line 1702)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'd' (line 1704)
        d_149805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 15), 'd')
        # Getting the type of 'self' (line 1704)
        self_149806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 19), 'self')
        # Obtaining the member '_base' of a type (line 1704)
        _base_149807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1704, 19), self_149806, '_base')
        # Applying the binary operator '*' (line 1704)
        result_mul_149808 = python_operator(stypy.reporting.localization.Localization(__file__, 1704, 15), '*', d_149805, _base_149807)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1704, 8), 'stypy_return_type', result_mul_149808)
        
        # ################# End of 'lt(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'lt' in the type store
        # Getting the type of 'stypy_return_type' (line 1699)
        stypy_return_type_149809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149809)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'lt'
        return stypy_return_type_149809


    @norecursion
    def le(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'le'
        module_type_store = module_type_store.open_function_context('le', 1706, 4, False)
        # Assigning a type to the variable 'self' (line 1707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1707, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Base.le.__dict__.__setitem__('stypy_localization', localization)
        Base.le.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Base.le.__dict__.__setitem__('stypy_type_store', module_type_store)
        Base.le.__dict__.__setitem__('stypy_function_name', 'Base.le')
        Base.le.__dict__.__setitem__('stypy_param_names_list', ['x'])
        Base.le.__dict__.__setitem__('stypy_varargs_param_name', None)
        Base.le.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Base.le.__dict__.__setitem__('stypy_call_defaults', defaults)
        Base.le.__dict__.__setitem__('stypy_call_varargs', varargs)
        Base.le.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Base.le.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Base.le', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'le', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'le(...)' code ##################

        unicode_149810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1707, 8), 'unicode', u'return the largest multiple of base <= x')
        
        # Assigning a Call to a Tuple (line 1708):
        
        # Assigning a Call to a Name:
        
        # Call to _divmod(...): (line 1708)
        # Processing the call arguments (line 1708)
        # Getting the type of 'x' (line 1708)
        x_149812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 23), 'x', False)
        # Getting the type of 'self' (line 1708)
        self_149813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 26), 'self', False)
        # Obtaining the member '_base' of a type (line 1708)
        _base_149814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 26), self_149813, '_base')
        # Processing the call keyword arguments (line 1708)
        kwargs_149815 = {}
        # Getting the type of '_divmod' (line 1708)
        _divmod_149811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 15), '_divmod', False)
        # Calling _divmod(args, kwargs) (line 1708)
        _divmod_call_result_149816 = invoke(stypy.reporting.localization.Localization(__file__, 1708, 15), _divmod_149811, *[x_149812, _base_149814], **kwargs_149815)
        
        # Assigning a type to the variable 'call_assignment_146311' (line 1708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1708, 8), 'call_assignment_146311', _divmod_call_result_149816)
        
        # Assigning a Call to a Name (line 1708):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1708, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149820 = {}
        # Getting the type of 'call_assignment_146311' (line 1708)
        call_assignment_146311_149817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 8), 'call_assignment_146311', False)
        # Obtaining the member '__getitem__' of a type (line 1708)
        getitem___149818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 8), call_assignment_146311_149817, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149821 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149818, *[int_149819], **kwargs_149820)
        
        # Assigning a type to the variable 'call_assignment_146312' (line 1708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1708, 8), 'call_assignment_146312', getitem___call_result_149821)
        
        # Assigning a Name to a Name (line 1708):
        # Getting the type of 'call_assignment_146312' (line 1708)
        call_assignment_146312_149822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 8), 'call_assignment_146312')
        # Assigning a type to the variable 'd' (line 1708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1708, 8), 'd', call_assignment_146312_149822)
        
        # Assigning a Call to a Name (line 1708):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1708, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149826 = {}
        # Getting the type of 'call_assignment_146311' (line 1708)
        call_assignment_146311_149823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 8), 'call_assignment_146311', False)
        # Obtaining the member '__getitem__' of a type (line 1708)
        getitem___149824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 8), call_assignment_146311_149823, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149827 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149824, *[int_149825], **kwargs_149826)
        
        # Assigning a type to the variable 'call_assignment_146313' (line 1708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1708, 8), 'call_assignment_146313', getitem___call_result_149827)
        
        # Assigning a Name to a Name (line 1708):
        # Getting the type of 'call_assignment_146313' (line 1708)
        call_assignment_146313_149828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 8), 'call_assignment_146313')
        # Assigning a type to the variable 'm' (line 1708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1708, 11), 'm', call_assignment_146313_149828)
        
        
        # Call to closeto(...): (line 1709)
        # Processing the call arguments (line 1709)
        # Getting the type of 'm' (line 1709)
        m_149830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 19), 'm', False)
        # Getting the type of 'self' (line 1709)
        self_149831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 23), 'self', False)
        # Obtaining the member '_base' of a type (line 1709)
        _base_149832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1709, 23), self_149831, '_base')
        # Applying the binary operator 'div' (line 1709)
        result_div_149833 = python_operator(stypy.reporting.localization.Localization(__file__, 1709, 19), 'div', m_149830, _base_149832)
        
        int_149834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1709, 35), 'int')
        # Processing the call keyword arguments (line 1709)
        kwargs_149835 = {}
        # Getting the type of 'closeto' (line 1709)
        closeto_149829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 11), 'closeto', False)
        # Calling closeto(args, kwargs) (line 1709)
        closeto_call_result_149836 = invoke(stypy.reporting.localization.Localization(__file__, 1709, 11), closeto_149829, *[result_div_149833, int_149834], **kwargs_149835)
        
        # Testing the type of an if condition (line 1709)
        if_condition_149837 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1709, 8), closeto_call_result_149836)
        # Assigning a type to the variable 'if_condition_149837' (line 1709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1709, 8), 'if_condition_149837', if_condition_149837)
        # SSA begins for if statement (line 1709)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'd' (line 1711)
        d_149838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 20), 'd')
        int_149839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1711, 24), 'int')
        # Applying the binary operator '+' (line 1711)
        result_add_149840 = python_operator(stypy.reporting.localization.Localization(__file__, 1711, 20), '+', d_149838, int_149839)
        
        # Getting the type of 'self' (line 1711)
        self_149841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 29), 'self')
        # Obtaining the member '_base' of a type (line 1711)
        _base_149842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1711, 29), self_149841, '_base')
        # Applying the binary operator '*' (line 1711)
        result_mul_149843 = python_operator(stypy.reporting.localization.Localization(__file__, 1711, 19), '*', result_add_149840, _base_149842)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1711, 12), 'stypy_return_type', result_mul_149843)
        # SSA join for if statement (line 1709)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'd' (line 1712)
        d_149844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 15), 'd')
        # Getting the type of 'self' (line 1712)
        self_149845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 19), 'self')
        # Obtaining the member '_base' of a type (line 1712)
        _base_149846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1712, 19), self_149845, '_base')
        # Applying the binary operator '*' (line 1712)
        result_mul_149847 = python_operator(stypy.reporting.localization.Localization(__file__, 1712, 15), '*', d_149844, _base_149846)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1712, 8), 'stypy_return_type', result_mul_149847)
        
        # ################# End of 'le(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'le' in the type store
        # Getting the type of 'stypy_return_type' (line 1706)
        stypy_return_type_149848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149848)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'le'
        return stypy_return_type_149848


    @norecursion
    def gt(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'gt'
        module_type_store = module_type_store.open_function_context('gt', 1714, 4, False)
        # Assigning a type to the variable 'self' (line 1715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Base.gt.__dict__.__setitem__('stypy_localization', localization)
        Base.gt.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Base.gt.__dict__.__setitem__('stypy_type_store', module_type_store)
        Base.gt.__dict__.__setitem__('stypy_function_name', 'Base.gt')
        Base.gt.__dict__.__setitem__('stypy_param_names_list', ['x'])
        Base.gt.__dict__.__setitem__('stypy_varargs_param_name', None)
        Base.gt.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Base.gt.__dict__.__setitem__('stypy_call_defaults', defaults)
        Base.gt.__dict__.__setitem__('stypy_call_varargs', varargs)
        Base.gt.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Base.gt.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Base.gt', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'gt', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'gt(...)' code ##################

        unicode_149849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 8), 'unicode', u'return the smallest multiple of base > x')
        
        # Assigning a Call to a Tuple (line 1716):
        
        # Assigning a Call to a Name:
        
        # Call to _divmod(...): (line 1716)
        # Processing the call arguments (line 1716)
        # Getting the type of 'x' (line 1716)
        x_149851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 23), 'x', False)
        # Getting the type of 'self' (line 1716)
        self_149852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 26), 'self', False)
        # Obtaining the member '_base' of a type (line 1716)
        _base_149853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 26), self_149852, '_base')
        # Processing the call keyword arguments (line 1716)
        kwargs_149854 = {}
        # Getting the type of '_divmod' (line 1716)
        _divmod_149850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 15), '_divmod', False)
        # Calling _divmod(args, kwargs) (line 1716)
        _divmod_call_result_149855 = invoke(stypy.reporting.localization.Localization(__file__, 1716, 15), _divmod_149850, *[x_149851, _base_149853], **kwargs_149854)
        
        # Assigning a type to the variable 'call_assignment_146314' (line 1716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 8), 'call_assignment_146314', _divmod_call_result_149855)
        
        # Assigning a Call to a Name (line 1716):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149859 = {}
        # Getting the type of 'call_assignment_146314' (line 1716)
        call_assignment_146314_149856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 8), 'call_assignment_146314', False)
        # Obtaining the member '__getitem__' of a type (line 1716)
        getitem___149857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 8), call_assignment_146314_149856, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149860 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149857, *[int_149858], **kwargs_149859)
        
        # Assigning a type to the variable 'call_assignment_146315' (line 1716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 8), 'call_assignment_146315', getitem___call_result_149860)
        
        # Assigning a Name to a Name (line 1716):
        # Getting the type of 'call_assignment_146315' (line 1716)
        call_assignment_146315_149861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 8), 'call_assignment_146315')
        # Assigning a type to the variable 'd' (line 1716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 8), 'd', call_assignment_146315_149861)
        
        # Assigning a Call to a Name (line 1716):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149865 = {}
        # Getting the type of 'call_assignment_146314' (line 1716)
        call_assignment_146314_149862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 8), 'call_assignment_146314', False)
        # Obtaining the member '__getitem__' of a type (line 1716)
        getitem___149863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 8), call_assignment_146314_149862, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149866 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149863, *[int_149864], **kwargs_149865)
        
        # Assigning a type to the variable 'call_assignment_146316' (line 1716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 8), 'call_assignment_146316', getitem___call_result_149866)
        
        # Assigning a Name to a Name (line 1716):
        # Getting the type of 'call_assignment_146316' (line 1716)
        call_assignment_146316_149867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 8), 'call_assignment_146316')
        # Assigning a type to the variable 'm' (line 1716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 11), 'm', call_assignment_146316_149867)
        
        
        # Call to closeto(...): (line 1717)
        # Processing the call arguments (line 1717)
        # Getting the type of 'm' (line 1717)
        m_149869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 19), 'm', False)
        # Getting the type of 'self' (line 1717)
        self_149870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 23), 'self', False)
        # Obtaining the member '_base' of a type (line 1717)
        _base_149871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1717, 23), self_149870, '_base')
        # Applying the binary operator 'div' (line 1717)
        result_div_149872 = python_operator(stypy.reporting.localization.Localization(__file__, 1717, 19), 'div', m_149869, _base_149871)
        
        int_149873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1717, 35), 'int')
        # Processing the call keyword arguments (line 1717)
        kwargs_149874 = {}
        # Getting the type of 'closeto' (line 1717)
        closeto_149868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 11), 'closeto', False)
        # Calling closeto(args, kwargs) (line 1717)
        closeto_call_result_149875 = invoke(stypy.reporting.localization.Localization(__file__, 1717, 11), closeto_149868, *[result_div_149872, int_149873], **kwargs_149874)
        
        # Testing the type of an if condition (line 1717)
        if_condition_149876 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1717, 8), closeto_call_result_149875)
        # Assigning a type to the variable 'if_condition_149876' (line 1717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1717, 8), 'if_condition_149876', if_condition_149876)
        # SSA begins for if statement (line 1717)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'd' (line 1719)
        d_149877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 20), 'd')
        int_149878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1719, 24), 'int')
        # Applying the binary operator '+' (line 1719)
        result_add_149879 = python_operator(stypy.reporting.localization.Localization(__file__, 1719, 20), '+', d_149877, int_149878)
        
        # Getting the type of 'self' (line 1719)
        self_149880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 29), 'self')
        # Obtaining the member '_base' of a type (line 1719)
        _base_149881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1719, 29), self_149880, '_base')
        # Applying the binary operator '*' (line 1719)
        result_mul_149882 = python_operator(stypy.reporting.localization.Localization(__file__, 1719, 19), '*', result_add_149879, _base_149881)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 12), 'stypy_return_type', result_mul_149882)
        # SSA join for if statement (line 1717)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'd' (line 1720)
        d_149883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 16), 'd')
        int_149884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 20), 'int')
        # Applying the binary operator '+' (line 1720)
        result_add_149885 = python_operator(stypy.reporting.localization.Localization(__file__, 1720, 16), '+', d_149883, int_149884)
        
        # Getting the type of 'self' (line 1720)
        self_149886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 25), 'self')
        # Obtaining the member '_base' of a type (line 1720)
        _base_149887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1720, 25), self_149886, '_base')
        # Applying the binary operator '*' (line 1720)
        result_mul_149888 = python_operator(stypy.reporting.localization.Localization(__file__, 1720, 15), '*', result_add_149885, _base_149887)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 8), 'stypy_return_type', result_mul_149888)
        
        # ################# End of 'gt(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'gt' in the type store
        # Getting the type of 'stypy_return_type' (line 1714)
        stypy_return_type_149889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149889)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'gt'
        return stypy_return_type_149889


    @norecursion
    def ge(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ge'
        module_type_store = module_type_store.open_function_context('ge', 1722, 4, False)
        # Assigning a type to the variable 'self' (line 1723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Base.ge.__dict__.__setitem__('stypy_localization', localization)
        Base.ge.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Base.ge.__dict__.__setitem__('stypy_type_store', module_type_store)
        Base.ge.__dict__.__setitem__('stypy_function_name', 'Base.ge')
        Base.ge.__dict__.__setitem__('stypy_param_names_list', ['x'])
        Base.ge.__dict__.__setitem__('stypy_varargs_param_name', None)
        Base.ge.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Base.ge.__dict__.__setitem__('stypy_call_defaults', defaults)
        Base.ge.__dict__.__setitem__('stypy_call_varargs', varargs)
        Base.ge.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Base.ge.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Base.ge', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ge', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ge(...)' code ##################

        unicode_149890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1723, 8), 'unicode', u'return the smallest multiple of base >= x')
        
        # Assigning a Call to a Tuple (line 1724):
        
        # Assigning a Call to a Name:
        
        # Call to _divmod(...): (line 1724)
        # Processing the call arguments (line 1724)
        # Getting the type of 'x' (line 1724)
        x_149892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 23), 'x', False)
        # Getting the type of 'self' (line 1724)
        self_149893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 26), 'self', False)
        # Obtaining the member '_base' of a type (line 1724)
        _base_149894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1724, 26), self_149893, '_base')
        # Processing the call keyword arguments (line 1724)
        kwargs_149895 = {}
        # Getting the type of '_divmod' (line 1724)
        _divmod_149891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 15), '_divmod', False)
        # Calling _divmod(args, kwargs) (line 1724)
        _divmod_call_result_149896 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 15), _divmod_149891, *[x_149892, _base_149894], **kwargs_149895)
        
        # Assigning a type to the variable 'call_assignment_146317' (line 1724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 8), 'call_assignment_146317', _divmod_call_result_149896)
        
        # Assigning a Call to a Name (line 1724):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1724, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149900 = {}
        # Getting the type of 'call_assignment_146317' (line 1724)
        call_assignment_146317_149897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 8), 'call_assignment_146317', False)
        # Obtaining the member '__getitem__' of a type (line 1724)
        getitem___149898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1724, 8), call_assignment_146317_149897, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149901 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149898, *[int_149899], **kwargs_149900)
        
        # Assigning a type to the variable 'call_assignment_146318' (line 1724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 8), 'call_assignment_146318', getitem___call_result_149901)
        
        # Assigning a Name to a Name (line 1724):
        # Getting the type of 'call_assignment_146318' (line 1724)
        call_assignment_146318_149902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 8), 'call_assignment_146318')
        # Assigning a type to the variable 'd' (line 1724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 8), 'd', call_assignment_146318_149902)
        
        # Assigning a Call to a Name (line 1724):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1724, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149906 = {}
        # Getting the type of 'call_assignment_146317' (line 1724)
        call_assignment_146317_149903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 8), 'call_assignment_146317', False)
        # Obtaining the member '__getitem__' of a type (line 1724)
        getitem___149904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1724, 8), call_assignment_146317_149903, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149907 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149904, *[int_149905], **kwargs_149906)
        
        # Assigning a type to the variable 'call_assignment_146319' (line 1724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 8), 'call_assignment_146319', getitem___call_result_149907)
        
        # Assigning a Name to a Name (line 1724):
        # Getting the type of 'call_assignment_146319' (line 1724)
        call_assignment_146319_149908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 8), 'call_assignment_146319')
        # Assigning a type to the variable 'm' (line 1724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 11), 'm', call_assignment_146319_149908)
        
        
        # Evaluating a boolean operation
        
        # Call to closeto(...): (line 1725)
        # Processing the call arguments (line 1725)
        # Getting the type of 'm' (line 1725)
        m_149910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 19), 'm', False)
        int_149911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1725, 22), 'int')
        # Processing the call keyword arguments (line 1725)
        kwargs_149912 = {}
        # Getting the type of 'closeto' (line 1725)
        closeto_149909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 11), 'closeto', False)
        # Calling closeto(args, kwargs) (line 1725)
        closeto_call_result_149913 = invoke(stypy.reporting.localization.Localization(__file__, 1725, 11), closeto_149909, *[m_149910, int_149911], **kwargs_149912)
        
        
        
        # Call to closeto(...): (line 1725)
        # Processing the call arguments (line 1725)
        # Getting the type of 'm' (line 1725)
        m_149915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 41), 'm', False)
        # Getting the type of 'self' (line 1725)
        self_149916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 45), 'self', False)
        # Obtaining the member '_base' of a type (line 1725)
        _base_149917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1725, 45), self_149916, '_base')
        # Applying the binary operator 'div' (line 1725)
        result_div_149918 = python_operator(stypy.reporting.localization.Localization(__file__, 1725, 41), 'div', m_149915, _base_149917)
        
        int_149919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1725, 57), 'int')
        # Processing the call keyword arguments (line 1725)
        kwargs_149920 = {}
        # Getting the type of 'closeto' (line 1725)
        closeto_149914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 33), 'closeto', False)
        # Calling closeto(args, kwargs) (line 1725)
        closeto_call_result_149921 = invoke(stypy.reporting.localization.Localization(__file__, 1725, 33), closeto_149914, *[result_div_149918, int_149919], **kwargs_149920)
        
        # Applying the 'not' unary operator (line 1725)
        result_not__149922 = python_operator(stypy.reporting.localization.Localization(__file__, 1725, 29), 'not', closeto_call_result_149921)
        
        # Applying the binary operator 'and' (line 1725)
        result_and_keyword_149923 = python_operator(stypy.reporting.localization.Localization(__file__, 1725, 11), 'and', closeto_call_result_149913, result_not__149922)
        
        # Testing the type of an if condition (line 1725)
        if_condition_149924 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1725, 8), result_and_keyword_149923)
        # Assigning a type to the variable 'if_condition_149924' (line 1725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1725, 8), 'if_condition_149924', if_condition_149924)
        # SSA begins for if statement (line 1725)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'd' (line 1726)
        d_149925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 19), 'd')
        # Getting the type of 'self' (line 1726)
        self_149926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 23), 'self')
        # Obtaining the member '_base' of a type (line 1726)
        _base_149927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1726, 23), self_149926, '_base')
        # Applying the binary operator '*' (line 1726)
        result_mul_149928 = python_operator(stypy.reporting.localization.Localization(__file__, 1726, 19), '*', d_149925, _base_149927)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1726)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1726, 12), 'stypy_return_type', result_mul_149928)
        # SSA join for if statement (line 1725)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'd' (line 1727)
        d_149929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 16), 'd')
        int_149930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1727, 20), 'int')
        # Applying the binary operator '+' (line 1727)
        result_add_149931 = python_operator(stypy.reporting.localization.Localization(__file__, 1727, 16), '+', d_149929, int_149930)
        
        # Getting the type of 'self' (line 1727)
        self_149932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 25), 'self')
        # Obtaining the member '_base' of a type (line 1727)
        _base_149933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1727, 25), self_149932, '_base')
        # Applying the binary operator '*' (line 1727)
        result_mul_149934 = python_operator(stypy.reporting.localization.Localization(__file__, 1727, 15), '*', result_add_149931, _base_149933)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 8), 'stypy_return_type', result_mul_149934)
        
        # ################# End of 'ge(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ge' in the type store
        # Getting the type of 'stypy_return_type' (line 1722)
        stypy_return_type_149935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149935)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ge'
        return stypy_return_type_149935


    @norecursion
    def get_base(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_base'
        module_type_store = module_type_store.open_function_context('get_base', 1729, 4, False)
        # Assigning a type to the variable 'self' (line 1730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Base.get_base.__dict__.__setitem__('stypy_localization', localization)
        Base.get_base.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Base.get_base.__dict__.__setitem__('stypy_type_store', module_type_store)
        Base.get_base.__dict__.__setitem__('stypy_function_name', 'Base.get_base')
        Base.get_base.__dict__.__setitem__('stypy_param_names_list', [])
        Base.get_base.__dict__.__setitem__('stypy_varargs_param_name', None)
        Base.get_base.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Base.get_base.__dict__.__setitem__('stypy_call_defaults', defaults)
        Base.get_base.__dict__.__setitem__('stypy_call_varargs', varargs)
        Base.get_base.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Base.get_base.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Base.get_base', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_base', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_base(...)' code ##################

        # Getting the type of 'self' (line 1730)
        self_149936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 15), 'self')
        # Obtaining the member '_base' of a type (line 1730)
        _base_149937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 15), self_149936, '_base')
        # Assigning a type to the variable 'stypy_return_type' (line 1730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 8), 'stypy_return_type', _base_149937)
        
        # ################# End of 'get_base(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_base' in the type store
        # Getting the type of 'stypy_return_type' (line 1729)
        stypy_return_type_149938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149938)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_base'
        return stypy_return_type_149938


# Assigning a type to the variable 'Base' (line 1692)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1692, 0), 'Base', Base)
# Declaration of the 'MultipleLocator' class
# Getting the type of 'Locator' (line 1733)
Locator_149939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 22), 'Locator')

class MultipleLocator(Locator_149939, ):
    unicode_149940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, (-1)), 'unicode', u'\n    Set a tick on every integer that is multiple of base in the\n    view interval\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_149941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1739, 28), 'float')
        defaults = [float_149941]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1739, 4, False)
        # Assigning a type to the variable 'self' (line 1740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MultipleLocator.__init__', ['base'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['base'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1740):
        
        # Assigning a Call to a Attribute (line 1740):
        
        # Call to Base(...): (line 1740)
        # Processing the call arguments (line 1740)
        # Getting the type of 'base' (line 1740)
        base_149943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 26), 'base', False)
        # Processing the call keyword arguments (line 1740)
        kwargs_149944 = {}
        # Getting the type of 'Base' (line 1740)
        Base_149942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 21), 'Base', False)
        # Calling Base(args, kwargs) (line 1740)
        Base_call_result_149945 = invoke(stypy.reporting.localization.Localization(__file__, 1740, 21), Base_149942, *[base_149943], **kwargs_149944)
        
        # Getting the type of 'self' (line 1740)
        self_149946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 8), 'self')
        # Setting the type of the member '_base' of a type (line 1740)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 8), self_149946, '_base', Base_call_result_149945)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_params'
        module_type_store = module_type_store.open_function_context('set_params', 1742, 4, False)
        # Assigning a type to the variable 'self' (line 1743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MultipleLocator.set_params.__dict__.__setitem__('stypy_localization', localization)
        MultipleLocator.set_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MultipleLocator.set_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        MultipleLocator.set_params.__dict__.__setitem__('stypy_function_name', 'MultipleLocator.set_params')
        MultipleLocator.set_params.__dict__.__setitem__('stypy_param_names_list', ['base'])
        MultipleLocator.set_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        MultipleLocator.set_params.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MultipleLocator.set_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        MultipleLocator.set_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        MultipleLocator.set_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MultipleLocator.set_params.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MultipleLocator.set_params', ['base'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_params', localization, ['base'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_params(...)' code ##################

        unicode_149947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1743, 8), 'unicode', u'Set parameters within this locator.')
        
        # Type idiom detected: calculating its left and rigth part (line 1744)
        # Getting the type of 'base' (line 1744)
        base_149948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 8), 'base')
        # Getting the type of 'None' (line 1744)
        None_149949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 23), 'None')
        
        (may_be_149950, more_types_in_union_149951) = may_not_be_none(base_149948, None_149949)

        if may_be_149950:

            if more_types_in_union_149951:
                # Runtime conditional SSA (line 1744)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1745):
            
            # Assigning a Name to a Attribute (line 1745):
            # Getting the type of 'base' (line 1745)
            base_149952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 25), 'base')
            # Getting the type of 'self' (line 1745)
            self_149953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 12), 'self')
            # Setting the type of the member '_base' of a type (line 1745)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1745, 12), self_149953, '_base', base_149952)

            if more_types_in_union_149951:
                # SSA join for if statement (line 1744)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'set_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_params' in the type store
        # Getting the type of 'stypy_return_type' (line 1742)
        stypy_return_type_149954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149954)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_params'
        return stypy_return_type_149954


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1747, 4, False)
        # Assigning a type to the variable 'self' (line 1748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MultipleLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        MultipleLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MultipleLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MultipleLocator.__call__.__dict__.__setitem__('stypy_function_name', 'MultipleLocator.__call__')
        MultipleLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        MultipleLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MultipleLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MultipleLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MultipleLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MultipleLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MultipleLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MultipleLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_149955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1748, 8), 'unicode', u'Return the locations of the ticks')
        
        # Assigning a Call to a Tuple (line 1749):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 1749)
        # Processing the call keyword arguments (line 1749)
        kwargs_149959 = {}
        # Getting the type of 'self' (line 1749)
        self_149956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 1749)
        axis_149957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1749, 21), self_149956, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 1749)
        get_view_interval_149958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1749, 21), axis_149957, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 1749)
        get_view_interval_call_result_149960 = invoke(stypy.reporting.localization.Localization(__file__, 1749, 21), get_view_interval_149958, *[], **kwargs_149959)
        
        # Assigning a type to the variable 'call_assignment_146320' (line 1749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'call_assignment_146320', get_view_interval_call_result_149960)
        
        # Assigning a Call to a Name (line 1749):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1749, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149964 = {}
        # Getting the type of 'call_assignment_146320' (line 1749)
        call_assignment_146320_149961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'call_assignment_146320', False)
        # Obtaining the member '__getitem__' of a type (line 1749)
        getitem___149962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1749, 8), call_assignment_146320_149961, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149965 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149962, *[int_149963], **kwargs_149964)
        
        # Assigning a type to the variable 'call_assignment_146321' (line 1749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'call_assignment_146321', getitem___call_result_149965)
        
        # Assigning a Name to a Name (line 1749):
        # Getting the type of 'call_assignment_146321' (line 1749)
        call_assignment_146321_149966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'call_assignment_146321')
        # Assigning a type to the variable 'vmin' (line 1749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'vmin', call_assignment_146321_149966)
        
        # Assigning a Call to a Name (line 1749):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_149969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1749, 8), 'int')
        # Processing the call keyword arguments
        kwargs_149970 = {}
        # Getting the type of 'call_assignment_146320' (line 1749)
        call_assignment_146320_149967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'call_assignment_146320', False)
        # Obtaining the member '__getitem__' of a type (line 1749)
        getitem___149968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1749, 8), call_assignment_146320_149967, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_149971 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___149968, *[int_149969], **kwargs_149970)
        
        # Assigning a type to the variable 'call_assignment_146322' (line 1749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'call_assignment_146322', getitem___call_result_149971)
        
        # Assigning a Name to a Name (line 1749):
        # Getting the type of 'call_assignment_146322' (line 1749)
        call_assignment_146322_149972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'call_assignment_146322')
        # Assigning a type to the variable 'vmax' (line 1749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 14), 'vmax', call_assignment_146322_149972)
        
        # Call to tick_values(...): (line 1750)
        # Processing the call arguments (line 1750)
        # Getting the type of 'vmin' (line 1750)
        vmin_149975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 32), 'vmin', False)
        # Getting the type of 'vmax' (line 1750)
        vmax_149976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 38), 'vmax', False)
        # Processing the call keyword arguments (line 1750)
        kwargs_149977 = {}
        # Getting the type of 'self' (line 1750)
        self_149973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 15), 'self', False)
        # Obtaining the member 'tick_values' of a type (line 1750)
        tick_values_149974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1750, 15), self_149973, 'tick_values')
        # Calling tick_values(args, kwargs) (line 1750)
        tick_values_call_result_149978 = invoke(stypy.reporting.localization.Localization(__file__, 1750, 15), tick_values_149974, *[vmin_149975, vmax_149976], **kwargs_149977)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1750, 8), 'stypy_return_type', tick_values_call_result_149978)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1747)
        stypy_return_type_149979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149979)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_149979


    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 1752, 4, False)
        # Assigning a type to the variable 'self' (line 1753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1753, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MultipleLocator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        MultipleLocator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MultipleLocator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        MultipleLocator.tick_values.__dict__.__setitem__('stypy_function_name', 'MultipleLocator.tick_values')
        MultipleLocator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        MultipleLocator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        MultipleLocator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MultipleLocator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        MultipleLocator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        MultipleLocator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MultipleLocator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MultipleLocator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        
        
        # Getting the type of 'vmax' (line 1753)
        vmax_149980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 11), 'vmax')
        # Getting the type of 'vmin' (line 1753)
        vmin_149981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 18), 'vmin')
        # Applying the binary operator '<' (line 1753)
        result_lt_149982 = python_operator(stypy.reporting.localization.Localization(__file__, 1753, 11), '<', vmax_149980, vmin_149981)
        
        # Testing the type of an if condition (line 1753)
        if_condition_149983 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1753, 8), result_lt_149982)
        # Assigning a type to the variable 'if_condition_149983' (line 1753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1753, 8), 'if_condition_149983', if_condition_149983)
        # SSA begins for if statement (line 1753)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1754):
        
        # Assigning a Name to a Name (line 1754):
        # Getting the type of 'vmax' (line 1754)
        vmax_149984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 25), 'vmax')
        # Assigning a type to the variable 'tuple_assignment_146323' (line 1754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1754, 12), 'tuple_assignment_146323', vmax_149984)
        
        # Assigning a Name to a Name (line 1754):
        # Getting the type of 'vmin' (line 1754)
        vmin_149985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 31), 'vmin')
        # Assigning a type to the variable 'tuple_assignment_146324' (line 1754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1754, 12), 'tuple_assignment_146324', vmin_149985)
        
        # Assigning a Name to a Name (line 1754):
        # Getting the type of 'tuple_assignment_146323' (line 1754)
        tuple_assignment_146323_149986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 12), 'tuple_assignment_146323')
        # Assigning a type to the variable 'vmin' (line 1754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1754, 12), 'vmin', tuple_assignment_146323_149986)
        
        # Assigning a Name to a Name (line 1754):
        # Getting the type of 'tuple_assignment_146324' (line 1754)
        tuple_assignment_146324_149987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 12), 'tuple_assignment_146324')
        # Assigning a type to the variable 'vmax' (line 1754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1754, 18), 'vmax', tuple_assignment_146324_149987)
        # SSA join for if statement (line 1753)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1755):
        
        # Assigning a Call to a Name (line 1755):
        
        # Call to ge(...): (line 1755)
        # Processing the call arguments (line 1755)
        # Getting the type of 'vmin' (line 1755)
        vmin_149991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 29), 'vmin', False)
        # Processing the call keyword arguments (line 1755)
        kwargs_149992 = {}
        # Getting the type of 'self' (line 1755)
        self_149988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 15), 'self', False)
        # Obtaining the member '_base' of a type (line 1755)
        _base_149989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1755, 15), self_149988, '_base')
        # Obtaining the member 'ge' of a type (line 1755)
        ge_149990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1755, 15), _base_149989, 'ge')
        # Calling ge(args, kwargs) (line 1755)
        ge_call_result_149993 = invoke(stypy.reporting.localization.Localization(__file__, 1755, 15), ge_149990, *[vmin_149991], **kwargs_149992)
        
        # Assigning a type to the variable 'vmin' (line 1755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1755, 8), 'vmin', ge_call_result_149993)
        
        # Assigning a Call to a Name (line 1756):
        
        # Assigning a Call to a Name (line 1756):
        
        # Call to get_base(...): (line 1756)
        # Processing the call keyword arguments (line 1756)
        kwargs_149997 = {}
        # Getting the type of 'self' (line 1756)
        self_149994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 15), 'self', False)
        # Obtaining the member '_base' of a type (line 1756)
        _base_149995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1756, 15), self_149994, '_base')
        # Obtaining the member 'get_base' of a type (line 1756)
        get_base_149996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1756, 15), _base_149995, 'get_base')
        # Calling get_base(args, kwargs) (line 1756)
        get_base_call_result_149998 = invoke(stypy.reporting.localization.Localization(__file__, 1756, 15), get_base_149996, *[], **kwargs_149997)
        
        # Assigning a type to the variable 'base' (line 1756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1756, 8), 'base', get_base_call_result_149998)
        
        # Assigning a BinOp to a Name (line 1757):
        
        # Assigning a BinOp to a Name (line 1757):
        # Getting the type of 'vmax' (line 1757)
        vmax_149999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 13), 'vmax')
        # Getting the type of 'vmin' (line 1757)
        vmin_150000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 20), 'vmin')
        # Applying the binary operator '-' (line 1757)
        result_sub_150001 = python_operator(stypy.reporting.localization.Localization(__file__, 1757, 13), '-', vmax_149999, vmin_150000)
        
        float_150002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1757, 27), 'float')
        # Getting the type of 'base' (line 1757)
        base_150003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 35), 'base')
        # Applying the binary operator '*' (line 1757)
        result_mul_150004 = python_operator(stypy.reporting.localization.Localization(__file__, 1757, 27), '*', float_150002, base_150003)
        
        # Applying the binary operator '+' (line 1757)
        result_add_150005 = python_operator(stypy.reporting.localization.Localization(__file__, 1757, 25), '+', result_sub_150001, result_mul_150004)
        
        # Getting the type of 'base' (line 1757)
        base_150006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 44), 'base')
        # Applying the binary operator '//' (line 1757)
        result_floordiv_150007 = python_operator(stypy.reporting.localization.Localization(__file__, 1757, 12), '//', result_add_150005, base_150006)
        
        # Assigning a type to the variable 'n' (line 1757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1757, 8), 'n', result_floordiv_150007)
        
        # Assigning a BinOp to a Name (line 1758):
        
        # Assigning a BinOp to a Name (line 1758):
        # Getting the type of 'vmin' (line 1758)
        vmin_150008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 15), 'vmin')
        # Getting the type of 'base' (line 1758)
        base_150009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 22), 'base')
        # Applying the binary operator '-' (line 1758)
        result_sub_150010 = python_operator(stypy.reporting.localization.Localization(__file__, 1758, 15), '-', vmin_150008, base_150009)
        
        
        # Call to arange(...): (line 1758)
        # Processing the call arguments (line 1758)
        # Getting the type of 'n' (line 1758)
        n_150013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 39), 'n', False)
        int_150014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1758, 43), 'int')
        # Applying the binary operator '+' (line 1758)
        result_add_150015 = python_operator(stypy.reporting.localization.Localization(__file__, 1758, 39), '+', n_150013, int_150014)
        
        # Processing the call keyword arguments (line 1758)
        kwargs_150016 = {}
        # Getting the type of 'np' (line 1758)
        np_150011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 29), 'np', False)
        # Obtaining the member 'arange' of a type (line 1758)
        arange_150012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1758, 29), np_150011, 'arange')
        # Calling arange(args, kwargs) (line 1758)
        arange_call_result_150017 = invoke(stypy.reporting.localization.Localization(__file__, 1758, 29), arange_150012, *[result_add_150015], **kwargs_150016)
        
        # Getting the type of 'base' (line 1758)
        base_150018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 48), 'base')
        # Applying the binary operator '*' (line 1758)
        result_mul_150019 = python_operator(stypy.reporting.localization.Localization(__file__, 1758, 29), '*', arange_call_result_150017, base_150018)
        
        # Applying the binary operator '+' (line 1758)
        result_add_150020 = python_operator(stypy.reporting.localization.Localization(__file__, 1758, 27), '+', result_sub_150010, result_mul_150019)
        
        # Assigning a type to the variable 'locs' (line 1758)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1758, 8), 'locs', result_add_150020)
        
        # Call to raise_if_exceeds(...): (line 1759)
        # Processing the call arguments (line 1759)
        # Getting the type of 'locs' (line 1759)
        locs_150023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 37), 'locs', False)
        # Processing the call keyword arguments (line 1759)
        kwargs_150024 = {}
        # Getting the type of 'self' (line 1759)
        self_150021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 15), 'self', False)
        # Obtaining the member 'raise_if_exceeds' of a type (line 1759)
        raise_if_exceeds_150022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1759, 15), self_150021, 'raise_if_exceeds')
        # Calling raise_if_exceeds(args, kwargs) (line 1759)
        raise_if_exceeds_call_result_150025 = invoke(stypy.reporting.localization.Localization(__file__, 1759, 15), raise_if_exceeds_150022, *[locs_150023], **kwargs_150024)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1759, 8), 'stypy_return_type', raise_if_exceeds_call_result_150025)
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 1752)
        stypy_return_type_150026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1752, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_150026)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_150026


    @norecursion
    def view_limits(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'view_limits'
        module_type_store = module_type_store.open_function_context('view_limits', 1761, 4, False)
        # Assigning a type to the variable 'self' (line 1762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MultipleLocator.view_limits.__dict__.__setitem__('stypy_localization', localization)
        MultipleLocator.view_limits.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MultipleLocator.view_limits.__dict__.__setitem__('stypy_type_store', module_type_store)
        MultipleLocator.view_limits.__dict__.__setitem__('stypy_function_name', 'MultipleLocator.view_limits')
        MultipleLocator.view_limits.__dict__.__setitem__('stypy_param_names_list', ['dmin', 'dmax'])
        MultipleLocator.view_limits.__dict__.__setitem__('stypy_varargs_param_name', None)
        MultipleLocator.view_limits.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MultipleLocator.view_limits.__dict__.__setitem__('stypy_call_defaults', defaults)
        MultipleLocator.view_limits.__dict__.__setitem__('stypy_call_varargs', varargs)
        MultipleLocator.view_limits.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MultipleLocator.view_limits.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MultipleLocator.view_limits', ['dmin', 'dmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'view_limits', localization, ['dmin', 'dmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'view_limits(...)' code ##################

        unicode_150027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1765, (-1)), 'unicode', u'\n        Set the view limits to the nearest multiples of base that\n        contain the data\n        ')
        
        
        
        # Obtaining the type of the subscript
        unicode_150028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, 20), 'unicode', u'axes.autolimit_mode')
        # Getting the type of 'rcParams' (line 1766)
        rcParams_150029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 11), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1766)
        getitem___150030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1766, 11), rcParams_150029, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1766)
        subscript_call_result_150031 = invoke(stypy.reporting.localization.Localization(__file__, 1766, 11), getitem___150030, unicode_150028)
        
        unicode_150032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, 46), 'unicode', u'round_numbers')
        # Applying the binary operator '==' (line 1766)
        result_eq_150033 = python_operator(stypy.reporting.localization.Localization(__file__, 1766, 11), '==', subscript_call_result_150031, unicode_150032)
        
        # Testing the type of an if condition (line 1766)
        if_condition_150034 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1766, 8), result_eq_150033)
        # Assigning a type to the variable 'if_condition_150034' (line 1766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1766, 8), 'if_condition_150034', if_condition_150034)
        # SSA begins for if statement (line 1766)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1767):
        
        # Assigning a Call to a Name (line 1767):
        
        # Call to le(...): (line 1767)
        # Processing the call arguments (line 1767)
        # Getting the type of 'dmin' (line 1767)
        dmin_150038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 33), 'dmin', False)
        # Processing the call keyword arguments (line 1767)
        kwargs_150039 = {}
        # Getting the type of 'self' (line 1767)
        self_150035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 19), 'self', False)
        # Obtaining the member '_base' of a type (line 1767)
        _base_150036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 19), self_150035, '_base')
        # Obtaining the member 'le' of a type (line 1767)
        le_150037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 19), _base_150036, 'le')
        # Calling le(args, kwargs) (line 1767)
        le_call_result_150040 = invoke(stypy.reporting.localization.Localization(__file__, 1767, 19), le_150037, *[dmin_150038], **kwargs_150039)
        
        # Assigning a type to the variable 'vmin' (line 1767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 12), 'vmin', le_call_result_150040)
        
        # Assigning a Call to a Name (line 1768):
        
        # Assigning a Call to a Name (line 1768):
        
        # Call to ge(...): (line 1768)
        # Processing the call arguments (line 1768)
        # Getting the type of 'dmax' (line 1768)
        dmax_150044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 33), 'dmax', False)
        # Processing the call keyword arguments (line 1768)
        kwargs_150045 = {}
        # Getting the type of 'self' (line 1768)
        self_150041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 19), 'self', False)
        # Obtaining the member '_base' of a type (line 1768)
        _base_150042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1768, 19), self_150041, '_base')
        # Obtaining the member 'ge' of a type (line 1768)
        ge_150043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1768, 19), _base_150042, 'ge')
        # Calling ge(args, kwargs) (line 1768)
        ge_call_result_150046 = invoke(stypy.reporting.localization.Localization(__file__, 1768, 19), ge_150043, *[dmax_150044], **kwargs_150045)
        
        # Assigning a type to the variable 'vmax' (line 1768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1768, 12), 'vmax', ge_call_result_150046)
        
        
        # Getting the type of 'vmin' (line 1769)
        vmin_150047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1769, 15), 'vmin')
        # Getting the type of 'vmax' (line 1769)
        vmax_150048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1769, 23), 'vmax')
        # Applying the binary operator '==' (line 1769)
        result_eq_150049 = python_operator(stypy.reporting.localization.Localization(__file__, 1769, 15), '==', vmin_150047, vmax_150048)
        
        # Testing the type of an if condition (line 1769)
        if_condition_150050 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1769, 12), result_eq_150049)
        # Assigning a type to the variable 'if_condition_150050' (line 1769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1769, 12), 'if_condition_150050', if_condition_150050)
        # SSA begins for if statement (line 1769)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'vmin' (line 1770)
        vmin_150051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 16), 'vmin')
        int_150052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1770, 24), 'int')
        # Applying the binary operator '-=' (line 1770)
        result_isub_150053 = python_operator(stypy.reporting.localization.Localization(__file__, 1770, 16), '-=', vmin_150051, int_150052)
        # Assigning a type to the variable 'vmin' (line 1770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1770, 16), 'vmin', result_isub_150053)
        
        
        # Getting the type of 'vmax' (line 1771)
        vmax_150054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 16), 'vmax')
        int_150055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1771, 24), 'int')
        # Applying the binary operator '+=' (line 1771)
        result_iadd_150056 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 16), '+=', vmax_150054, int_150055)
        # Assigning a type to the variable 'vmax' (line 1771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1771, 16), 'vmax', result_iadd_150056)
        
        # SSA join for if statement (line 1769)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1766)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1773):
        
        # Assigning a Name to a Name (line 1773):
        # Getting the type of 'dmin' (line 1773)
        dmin_150057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 19), 'dmin')
        # Assigning a type to the variable 'vmin' (line 1773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1773, 12), 'vmin', dmin_150057)
        
        # Assigning a Name to a Name (line 1774):
        
        # Assigning a Name to a Name (line 1774):
        # Getting the type of 'dmax' (line 1774)
        dmax_150058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 19), 'dmax')
        # Assigning a type to the variable 'vmax' (line 1774)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1774, 12), 'vmax', dmax_150058)
        # SSA join for if statement (line 1766)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to nonsingular(...): (line 1776)
        # Processing the call arguments (line 1776)
        # Getting the type of 'vmin' (line 1776)
        vmin_150061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 39), 'vmin', False)
        # Getting the type of 'vmax' (line 1776)
        vmax_150062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 45), 'vmax', False)
        # Processing the call keyword arguments (line 1776)
        kwargs_150063 = {}
        # Getting the type of 'mtransforms' (line 1776)
        mtransforms_150059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 15), 'mtransforms', False)
        # Obtaining the member 'nonsingular' of a type (line 1776)
        nonsingular_150060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 15), mtransforms_150059, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 1776)
        nonsingular_call_result_150064 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 15), nonsingular_150060, *[vmin_150061, vmax_150062], **kwargs_150063)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1776)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1776, 8), 'stypy_return_type', nonsingular_call_result_150064)
        
        # ################# End of 'view_limits(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'view_limits' in the type store
        # Getting the type of 'stypy_return_type' (line 1761)
        stypy_return_type_150065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_150065)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'view_limits'
        return stypy_return_type_150065


# Assigning a type to the variable 'MultipleLocator' (line 1733)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1733, 0), 'MultipleLocator', MultipleLocator)

@norecursion
def scale_range(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_150066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1779, 30), 'int')
    int_150067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1779, 43), 'int')
    defaults = [int_150066, int_150067]
    # Create a new context for function 'scale_range'
    module_type_store = module_type_store.open_function_context('scale_range', 1779, 0, False)
    
    # Passed parameters checking function
    scale_range.stypy_localization = localization
    scale_range.stypy_type_of_self = None
    scale_range.stypy_type_store = module_type_store
    scale_range.stypy_function_name = 'scale_range'
    scale_range.stypy_param_names_list = ['vmin', 'vmax', 'n', 'threshold']
    scale_range.stypy_varargs_param_name = None
    scale_range.stypy_kwargs_param_name = None
    scale_range.stypy_call_defaults = defaults
    scale_range.stypy_call_varargs = varargs
    scale_range.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'scale_range', ['vmin', 'vmax', 'n', 'threshold'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'scale_range', localization, ['vmin', 'vmax', 'n', 'threshold'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'scale_range(...)' code ##################

    
    # Assigning a Call to a Name (line 1780):
    
    # Assigning a Call to a Name (line 1780):
    
    # Call to abs(...): (line 1780)
    # Processing the call arguments (line 1780)
    # Getting the type of 'vmax' (line 1780)
    vmax_150069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 13), 'vmax', False)
    # Getting the type of 'vmin' (line 1780)
    vmin_150070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 20), 'vmin', False)
    # Applying the binary operator '-' (line 1780)
    result_sub_150071 = python_operator(stypy.reporting.localization.Localization(__file__, 1780, 13), '-', vmax_150069, vmin_150070)
    
    # Processing the call keyword arguments (line 1780)
    kwargs_150072 = {}
    # Getting the type of 'abs' (line 1780)
    abs_150068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 9), 'abs', False)
    # Calling abs(args, kwargs) (line 1780)
    abs_call_result_150073 = invoke(stypy.reporting.localization.Localization(__file__, 1780, 9), abs_150068, *[result_sub_150071], **kwargs_150072)
    
    # Assigning a type to the variable 'dv' (line 1780)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1780, 4), 'dv', abs_call_result_150073)
    
    # Assigning a BinOp to a Name (line 1781):
    
    # Assigning a BinOp to a Name (line 1781):
    # Getting the type of 'vmax' (line 1781)
    vmax_150074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 13), 'vmax')
    # Getting the type of 'vmin' (line 1781)
    vmin_150075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 20), 'vmin')
    # Applying the binary operator '+' (line 1781)
    result_add_150076 = python_operator(stypy.reporting.localization.Localization(__file__, 1781, 13), '+', vmax_150074, vmin_150075)
    
    int_150077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1781, 28), 'int')
    # Applying the binary operator 'div' (line 1781)
    result_div_150078 = python_operator(stypy.reporting.localization.Localization(__file__, 1781, 12), 'div', result_add_150076, int_150077)
    
    # Assigning a type to the variable 'meanv' (line 1781)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1781, 4), 'meanv', result_div_150078)
    
    
    
    # Call to abs(...): (line 1782)
    # Processing the call arguments (line 1782)
    # Getting the type of 'meanv' (line 1782)
    meanv_150080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 11), 'meanv', False)
    # Processing the call keyword arguments (line 1782)
    kwargs_150081 = {}
    # Getting the type of 'abs' (line 1782)
    abs_150079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 7), 'abs', False)
    # Calling abs(args, kwargs) (line 1782)
    abs_call_result_150082 = invoke(stypy.reporting.localization.Localization(__file__, 1782, 7), abs_150079, *[meanv_150080], **kwargs_150081)
    
    # Getting the type of 'dv' (line 1782)
    dv_150083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 20), 'dv')
    # Applying the binary operator 'div' (line 1782)
    result_div_150084 = python_operator(stypy.reporting.localization.Localization(__file__, 1782, 7), 'div', abs_call_result_150082, dv_150083)
    
    # Getting the type of 'threshold' (line 1782)
    threshold_150085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 25), 'threshold')
    # Applying the binary operator '<' (line 1782)
    result_lt_150086 = python_operator(stypy.reporting.localization.Localization(__file__, 1782, 7), '<', result_div_150084, threshold_150085)
    
    # Testing the type of an if condition (line 1782)
    if_condition_150087 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1782, 4), result_lt_150086)
    # Assigning a type to the variable 'if_condition_150087' (line 1782)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1782, 4), 'if_condition_150087', if_condition_150087)
    # SSA begins for if statement (line 1782)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1783):
    
    # Assigning a Num to a Name (line 1783):
    int_150088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1783, 17), 'int')
    # Assigning a type to the variable 'offset' (line 1783)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1783, 8), 'offset', int_150088)
    # SSA branch for the else part of an if statement (line 1782)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1785):
    
    # Assigning a Call to a Name (line 1785):
    
    # Call to copysign(...): (line 1785)
    # Processing the call arguments (line 1785)
    int_150091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1785, 31), 'int')
    
    # Call to log10(...): (line 1785)
    # Processing the call arguments (line 1785)
    
    # Call to abs(...): (line 1785)
    # Processing the call arguments (line 1785)
    # Getting the type of 'meanv' (line 1785)
    meanv_150095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 53), 'meanv', False)
    # Processing the call keyword arguments (line 1785)
    kwargs_150096 = {}
    # Getting the type of 'abs' (line 1785)
    abs_150094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 49), 'abs', False)
    # Calling abs(args, kwargs) (line 1785)
    abs_call_result_150097 = invoke(stypy.reporting.localization.Localization(__file__, 1785, 49), abs_150094, *[meanv_150095], **kwargs_150096)
    
    # Processing the call keyword arguments (line 1785)
    kwargs_150098 = {}
    # Getting the type of 'math' (line 1785)
    math_150092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 38), 'math', False)
    # Obtaining the member 'log10' of a type (line 1785)
    log10_150093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1785, 38), math_150092, 'log10')
    # Calling log10(args, kwargs) (line 1785)
    log10_call_result_150099 = invoke(stypy.reporting.localization.Localization(__file__, 1785, 38), log10_150093, *[abs_call_result_150097], **kwargs_150098)
    
    int_150100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1785, 64), 'int')
    # Applying the binary operator '//' (line 1785)
    result_floordiv_150101 = python_operator(stypy.reporting.localization.Localization(__file__, 1785, 38), '//', log10_call_result_150099, int_150100)
    
    # Applying the binary operator '**' (line 1785)
    result_pow_150102 = python_operator(stypy.reporting.localization.Localization(__file__, 1785, 31), '**', int_150091, result_floordiv_150101)
    
    # Getting the type of 'meanv' (line 1785)
    meanv_150103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 68), 'meanv', False)
    # Processing the call keyword arguments (line 1785)
    kwargs_150104 = {}
    # Getting the type of 'math' (line 1785)
    math_150089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 17), 'math', False)
    # Obtaining the member 'copysign' of a type (line 1785)
    copysign_150090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1785, 17), math_150089, 'copysign')
    # Calling copysign(args, kwargs) (line 1785)
    copysign_call_result_150105 = invoke(stypy.reporting.localization.Localization(__file__, 1785, 17), copysign_150090, *[result_pow_150102, meanv_150103], **kwargs_150104)
    
    # Assigning a type to the variable 'offset' (line 1785)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1785, 8), 'offset', copysign_call_result_150105)
    # SSA join for if statement (line 1782)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1786):
    
    # Assigning a BinOp to a Name (line 1786):
    int_150106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1786, 12), 'int')
    
    # Call to log10(...): (line 1786)
    # Processing the call arguments (line 1786)
    # Getting the type of 'dv' (line 1786)
    dv_150109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 30), 'dv', False)
    # Getting the type of 'n' (line 1786)
    n_150110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 35), 'n', False)
    # Applying the binary operator 'div' (line 1786)
    result_div_150111 = python_operator(stypy.reporting.localization.Localization(__file__, 1786, 30), 'div', dv_150109, n_150110)
    
    # Processing the call keyword arguments (line 1786)
    kwargs_150112 = {}
    # Getting the type of 'math' (line 1786)
    math_150107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 19), 'math', False)
    # Obtaining the member 'log10' of a type (line 1786)
    log10_150108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1786, 19), math_150107, 'log10')
    # Calling log10(args, kwargs) (line 1786)
    log10_call_result_150113 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 19), log10_150108, *[result_div_150111], **kwargs_150112)
    
    int_150114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1786, 41), 'int')
    # Applying the binary operator '//' (line 1786)
    result_floordiv_150115 = python_operator(stypy.reporting.localization.Localization(__file__, 1786, 19), '//', log10_call_result_150113, int_150114)
    
    # Applying the binary operator '**' (line 1786)
    result_pow_150116 = python_operator(stypy.reporting.localization.Localization(__file__, 1786, 12), '**', int_150106, result_floordiv_150115)
    
    # Assigning a type to the variable 'scale' (line 1786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1786, 4), 'scale', result_pow_150116)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1787)
    tuple_150117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1787, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1787)
    # Adding element type (line 1787)
    # Getting the type of 'scale' (line 1787)
    scale_150118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 11), 'scale')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1787, 11), tuple_150117, scale_150118)
    # Adding element type (line 1787)
    # Getting the type of 'offset' (line 1787)
    offset_150119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 18), 'offset')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1787, 11), tuple_150117, offset_150119)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'stypy_return_type', tuple_150117)
    
    # ################# End of 'scale_range(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'scale_range' in the type store
    # Getting the type of 'stypy_return_type' (line 1779)
    stypy_return_type_150120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150120)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'scale_range'
    return stypy_return_type_150120

# Assigning a type to the variable 'scale_range' (line 1779)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1779, 0), 'scale_range', scale_range)
# Declaration of the 'MaxNLocator' class
# Getting the type of 'Locator' (line 1790)
Locator_150121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 18), 'Locator')

class MaxNLocator(Locator_150121, ):
    unicode_150122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1793, (-1)), 'unicode', u'\n    Select no more than N intervals at nice locations.\n    ')
    
    # Assigning a Call to a Name (line 1794):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1801, 4, False)
        # Assigning a type to the variable 'self' (line 1802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1802, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaxNLocator.__init__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_150123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1838, (-1)), 'unicode', u"\n        Keyword args:\n\n        *nbins*\n            Maximum number of intervals; one less than max number of\n            ticks.  If the string `'auto'`, the number of bins will be\n            automatically determined based on the length of the axis.\n\n        *steps*\n            Sequence of nice numbers starting with 1 and ending with 10;\n            e.g., [1, 2, 4, 5, 10]\n\n        *integer*\n            If True, ticks will take only integer values, provided\n            at least `min_n_ticks` integers are found within the\n            view limits.\n\n        *symmetric*\n            If True, autoscaling will result in a range symmetric\n            about zero.\n\n        *prune*\n            ['lower' | 'upper' | 'both' | None]\n            Remove edge ticks -- useful for stacked or ganged plots\n            where the upper tick of one axes overlaps with the lower\n            tick of the axes above it, primarily when\n            `rcParams['axes.autolimit_mode']` is `'round_numbers'`.\n            If `prune=='lower'`, the smallest tick will\n            be removed.  If `prune=='upper'`, the largest tick will be\n            removed.  If `prune=='both'`, the largest and smallest ticks\n            will be removed.  If `prune==None`, no ticks will be removed.\n\n        *min_n_ticks*\n            Relax `nbins` and `integer` constraints if necessary to\n            obtain this minimum number of ticks.\n\n        ")
        
        # Getting the type of 'args' (line 1839)
        args_150124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 11), 'args')
        # Testing the type of an if condition (line 1839)
        if_condition_150125 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1839, 8), args_150124)
        # Assigning a type to the variable 'if_condition_150125' (line 1839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1839, 8), 'if_condition_150125', if_condition_150125)
        # SSA begins for if statement (line 1839)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Subscript (line 1840):
        
        # Assigning a Subscript to a Subscript (line 1840):
        
        # Obtaining the type of the subscript
        int_150126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1840, 35), 'int')
        # Getting the type of 'args' (line 1840)
        args_150127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 30), 'args')
        # Obtaining the member '__getitem__' of a type (line 1840)
        getitem___150128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1840, 30), args_150127, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1840)
        subscript_call_result_150129 = invoke(stypy.reporting.localization.Localization(__file__, 1840, 30), getitem___150128, int_150126)
        
        # Getting the type of 'kwargs' (line 1840)
        kwargs_150130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 12), 'kwargs')
        unicode_150131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1840, 19), 'unicode', u'nbins')
        # Storing an element on a container (line 1840)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1840, 12), kwargs_150130, (unicode_150131, subscript_call_result_150129))
        
        
        
        # Call to len(...): (line 1841)
        # Processing the call arguments (line 1841)
        # Getting the type of 'args' (line 1841)
        args_150133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 19), 'args', False)
        # Processing the call keyword arguments (line 1841)
        kwargs_150134 = {}
        # Getting the type of 'len' (line 1841)
        len_150132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 15), 'len', False)
        # Calling len(args, kwargs) (line 1841)
        len_call_result_150135 = invoke(stypy.reporting.localization.Localization(__file__, 1841, 15), len_150132, *[args_150133], **kwargs_150134)
        
        int_150136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1841, 27), 'int')
        # Applying the binary operator '>' (line 1841)
        result_gt_150137 = python_operator(stypy.reporting.localization.Localization(__file__, 1841, 15), '>', len_call_result_150135, int_150136)
        
        # Testing the type of an if condition (line 1841)
        if_condition_150138 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1841, 12), result_gt_150137)
        # Assigning a type to the variable 'if_condition_150138' (line 1841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 12), 'if_condition_150138', if_condition_150138)
        # SSA begins for if statement (line 1841)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1842)
        # Processing the call arguments (line 1842)
        unicode_150140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1843, 20), 'unicode', u"Keywords are required for all arguments except 'nbins'")
        # Processing the call keyword arguments (line 1842)
        kwargs_150141 = {}
        # Getting the type of 'ValueError' (line 1842)
        ValueError_150139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1842)
        ValueError_call_result_150142 = invoke(stypy.reporting.localization.Localization(__file__, 1842, 22), ValueError_150139, *[unicode_150140], **kwargs_150141)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1842, 16), ValueError_call_result_150142, 'raise parameter', BaseException)
        # SSA join for if statement (line 1841)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1839)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_params(...): (line 1844)
        # Processing the call keyword arguments (line 1844)
        # Getting the type of 'self' (line 1844)
        self_150145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 26), 'self', False)
        # Obtaining the member 'default_params' of a type (line 1844)
        default_params_150146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1844, 26), self_150145, 'default_params')
        kwargs_150147 = {'default_params_150146': default_params_150146}
        # Getting the type of 'self' (line 1844)
        self_150143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 8), 'self', False)
        # Obtaining the member 'set_params' of a type (line 1844)
        set_params_150144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1844, 8), self_150143, 'set_params')
        # Calling set_params(args, kwargs) (line 1844)
        set_params_call_result_150148 = invoke(stypy.reporting.localization.Localization(__file__, 1844, 8), set_params_150144, *[], **kwargs_150147)
        
        
        # Call to set_params(...): (line 1845)
        # Processing the call keyword arguments (line 1845)
        # Getting the type of 'kwargs' (line 1845)
        kwargs_150151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 26), 'kwargs', False)
        kwargs_150152 = {'kwargs_150151': kwargs_150151}
        # Getting the type of 'self' (line 1845)
        self_150149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 8), 'self', False)
        # Obtaining the member 'set_params' of a type (line 1845)
        set_params_150150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 8), self_150149, 'set_params')
        # Calling set_params(args, kwargs) (line 1845)
        set_params_call_result_150153 = invoke(stypy.reporting.localization.Localization(__file__, 1845, 8), set_params_150150, *[], **kwargs_150152)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @staticmethod
    @norecursion
    def _validate_steps(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_validate_steps'
        module_type_store = module_type_store.open_function_context('_validate_steps', 1847, 4, False)
        
        # Passed parameters checking function
        MaxNLocator._validate_steps.__dict__.__setitem__('stypy_localization', localization)
        MaxNLocator._validate_steps.__dict__.__setitem__('stypy_type_of_self', None)
        MaxNLocator._validate_steps.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaxNLocator._validate_steps.__dict__.__setitem__('stypy_function_name', '_validate_steps')
        MaxNLocator._validate_steps.__dict__.__setitem__('stypy_param_names_list', ['steps'])
        MaxNLocator._validate_steps.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaxNLocator._validate_steps.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaxNLocator._validate_steps.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaxNLocator._validate_steps.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaxNLocator._validate_steps.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaxNLocator._validate_steps.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, '_validate_steps', ['steps'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_validate_steps', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_validate_steps(...)' code ##################

        
        
        
        # Call to iterable(...): (line 1849)
        # Processing the call arguments (line 1849)
        # Getting the type of 'steps' (line 1849)
        steps_150156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 27), 'steps', False)
        # Processing the call keyword arguments (line 1849)
        kwargs_150157 = {}
        # Getting the type of 'np' (line 1849)
        np_150154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 15), 'np', False)
        # Obtaining the member 'iterable' of a type (line 1849)
        iterable_150155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 15), np_150154, 'iterable')
        # Calling iterable(args, kwargs) (line 1849)
        iterable_call_result_150158 = invoke(stypy.reporting.localization.Localization(__file__, 1849, 15), iterable_150155, *[steps_150156], **kwargs_150157)
        
        # Applying the 'not' unary operator (line 1849)
        result_not__150159 = python_operator(stypy.reporting.localization.Localization(__file__, 1849, 11), 'not', iterable_call_result_150158)
        
        # Testing the type of an if condition (line 1849)
        if_condition_150160 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1849, 8), result_not__150159)
        # Assigning a type to the variable 'if_condition_150160' (line 1849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 8), 'if_condition_150160', if_condition_150160)
        # SSA begins for if statement (line 1849)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1850)
        # Processing the call arguments (line 1850)
        unicode_150162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1850, 29), 'unicode', u'steps argument must be a sequence of numbers from 1 to 10')
        # Processing the call keyword arguments (line 1850)
        kwargs_150163 = {}
        # Getting the type of 'ValueError' (line 1850)
        ValueError_150161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1850)
        ValueError_call_result_150164 = invoke(stypy.reporting.localization.Localization(__file__, 1850, 18), ValueError_150161, *[unicode_150162], **kwargs_150163)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1850, 12), ValueError_call_result_150164, 'raise parameter', BaseException)
        # SSA join for if statement (line 1849)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1852):
        
        # Assigning a Call to a Name (line 1852):
        
        # Call to asarray(...): (line 1852)
        # Processing the call arguments (line 1852)
        # Getting the type of 'steps' (line 1852)
        steps_150167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 27), 'steps', False)
        # Processing the call keyword arguments (line 1852)
        kwargs_150168 = {}
        # Getting the type of 'np' (line 1852)
        np_150165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 16), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1852)
        asarray_150166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1852, 16), np_150165, 'asarray')
        # Calling asarray(args, kwargs) (line 1852)
        asarray_call_result_150169 = invoke(stypy.reporting.localization.Localization(__file__, 1852, 16), asarray_150166, *[steps_150167], **kwargs_150168)
        
        # Assigning a type to the variable 'steps' (line 1852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1852, 8), 'steps', asarray_call_result_150169)
        
        
        # Call to any(...): (line 1853)
        # Processing the call arguments (line 1853)
        
        
        # Call to diff(...): (line 1853)
        # Processing the call arguments (line 1853)
        # Getting the type of 'steps' (line 1853)
        steps_150174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 26), 'steps', False)
        # Processing the call keyword arguments (line 1853)
        kwargs_150175 = {}
        # Getting the type of 'np' (line 1853)
        np_150172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 18), 'np', False)
        # Obtaining the member 'diff' of a type (line 1853)
        diff_150173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1853, 18), np_150172, 'diff')
        # Calling diff(args, kwargs) (line 1853)
        diff_call_result_150176 = invoke(stypy.reporting.localization.Localization(__file__, 1853, 18), diff_150173, *[steps_150174], **kwargs_150175)
        
        int_150177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1853, 36), 'int')
        # Applying the binary operator '<=' (line 1853)
        result_le_150178 = python_operator(stypy.reporting.localization.Localization(__file__, 1853, 18), '<=', diff_call_result_150176, int_150177)
        
        # Processing the call keyword arguments (line 1853)
        kwargs_150179 = {}
        # Getting the type of 'np' (line 1853)
        np_150170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 11), 'np', False)
        # Obtaining the member 'any' of a type (line 1853)
        any_150171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1853, 11), np_150170, 'any')
        # Calling any(args, kwargs) (line 1853)
        any_call_result_150180 = invoke(stypy.reporting.localization.Localization(__file__, 1853, 11), any_150171, *[result_le_150178], **kwargs_150179)
        
        # Testing the type of an if condition (line 1853)
        if_condition_150181 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1853, 8), any_call_result_150180)
        # Assigning a type to the variable 'if_condition_150181' (line 1853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1853, 8), 'if_condition_150181', if_condition_150181)
        # SSA begins for if statement (line 1853)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1854)
        # Processing the call arguments (line 1854)
        unicode_150183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 29), 'unicode', u'steps argument must be uniformly increasing')
        # Processing the call keyword arguments (line 1854)
        kwargs_150184 = {}
        # Getting the type of 'ValueError' (line 1854)
        ValueError_150182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1854)
        ValueError_call_result_150185 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 18), ValueError_150182, *[unicode_150183], **kwargs_150184)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1854, 12), ValueError_call_result_150185, 'raise parameter', BaseException)
        # SSA join for if statement (line 1853)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        int_150186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1855, 17), 'int')
        # Getting the type of 'steps' (line 1855)
        steps_150187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 11), 'steps')
        # Obtaining the member '__getitem__' of a type (line 1855)
        getitem___150188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1855, 11), steps_150187, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1855)
        subscript_call_result_150189 = invoke(stypy.reporting.localization.Localization(__file__, 1855, 11), getitem___150188, int_150186)
        
        int_150190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1855, 23), 'int')
        # Applying the binary operator '>' (line 1855)
        result_gt_150191 = python_operator(stypy.reporting.localization.Localization(__file__, 1855, 11), '>', subscript_call_result_150189, int_150190)
        
        
        
        # Obtaining the type of the subscript
        int_150192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1855, 35), 'int')
        # Getting the type of 'steps' (line 1855)
        steps_150193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 29), 'steps')
        # Obtaining the member '__getitem__' of a type (line 1855)
        getitem___150194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1855, 29), steps_150193, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1855)
        subscript_call_result_150195 = invoke(stypy.reporting.localization.Localization(__file__, 1855, 29), getitem___150194, int_150192)
        
        int_150196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1855, 40), 'int')
        # Applying the binary operator '<' (line 1855)
        result_lt_150197 = python_operator(stypy.reporting.localization.Localization(__file__, 1855, 29), '<', subscript_call_result_150195, int_150196)
        
        # Applying the binary operator 'or' (line 1855)
        result_or_keyword_150198 = python_operator(stypy.reporting.localization.Localization(__file__, 1855, 11), 'or', result_gt_150191, result_lt_150197)
        
        # Testing the type of an if condition (line 1855)
        if_condition_150199 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1855, 8), result_or_keyword_150198)
        # Assigning a type to the variable 'if_condition_150199' (line 1855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1855, 8), 'if_condition_150199', if_condition_150199)
        # SSA begins for if statement (line 1855)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1856)
        # Processing the call arguments (line 1856)
        unicode_150202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1856, 26), 'unicode', u'Steps argument should be a sequence of numbers\nincreasing from 1 to 10, inclusive. Behavior with\nvalues outside this range is undefined, and will\nraise a ValueError in future versions of mpl.')
        # Processing the call keyword arguments (line 1856)
        kwargs_150203 = {}
        # Getting the type of 'warnings' (line 1856)
        warnings_150200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1856)
        warn_150201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1856, 12), warnings_150200, 'warn')
        # Calling warn(args, kwargs) (line 1856)
        warn_call_result_150204 = invoke(stypy.reporting.localization.Localization(__file__, 1856, 12), warn_150201, *[unicode_150202], **kwargs_150203)
        
        # SSA join for if statement (line 1855)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_150205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1860, 17), 'int')
        # Getting the type of 'steps' (line 1860)
        steps_150206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 11), 'steps')
        # Obtaining the member '__getitem__' of a type (line 1860)
        getitem___150207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1860, 11), steps_150206, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1860)
        subscript_call_result_150208 = invoke(stypy.reporting.localization.Localization(__file__, 1860, 11), getitem___150207, int_150205)
        
        int_150209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1860, 23), 'int')
        # Applying the binary operator '!=' (line 1860)
        result_ne_150210 = python_operator(stypy.reporting.localization.Localization(__file__, 1860, 11), '!=', subscript_call_result_150208, int_150209)
        
        # Testing the type of an if condition (line 1860)
        if_condition_150211 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1860, 8), result_ne_150210)
        # Assigning a type to the variable 'if_condition_150211' (line 1860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1860, 8), 'if_condition_150211', if_condition_150211)
        # SSA begins for if statement (line 1860)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1861):
        
        # Assigning a Call to a Name (line 1861):
        
        # Call to hstack(...): (line 1861)
        # Processing the call arguments (line 1861)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1861)
        tuple_150214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1861, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1861)
        # Adding element type (line 1861)
        int_150215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1861, 31), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1861, 31), tuple_150214, int_150215)
        # Adding element type (line 1861)
        # Getting the type of 'steps' (line 1861)
        steps_150216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 34), 'steps', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1861, 31), tuple_150214, steps_150216)
        
        # Processing the call keyword arguments (line 1861)
        kwargs_150217 = {}
        # Getting the type of 'np' (line 1861)
        np_150212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 20), 'np', False)
        # Obtaining the member 'hstack' of a type (line 1861)
        hstack_150213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1861, 20), np_150212, 'hstack')
        # Calling hstack(args, kwargs) (line 1861)
        hstack_call_result_150218 = invoke(stypy.reporting.localization.Localization(__file__, 1861, 20), hstack_150213, *[tuple_150214], **kwargs_150217)
        
        # Assigning a type to the variable 'steps' (line 1861)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1861, 12), 'steps', hstack_call_result_150218)
        # SSA join for if statement (line 1860)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_150219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1862, 17), 'int')
        # Getting the type of 'steps' (line 1862)
        steps_150220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 11), 'steps')
        # Obtaining the member '__getitem__' of a type (line 1862)
        getitem___150221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1862, 11), steps_150220, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1862)
        subscript_call_result_150222 = invoke(stypy.reporting.localization.Localization(__file__, 1862, 11), getitem___150221, int_150219)
        
        int_150223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1862, 24), 'int')
        # Applying the binary operator '!=' (line 1862)
        result_ne_150224 = python_operator(stypy.reporting.localization.Localization(__file__, 1862, 11), '!=', subscript_call_result_150222, int_150223)
        
        # Testing the type of an if condition (line 1862)
        if_condition_150225 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1862, 8), result_ne_150224)
        # Assigning a type to the variable 'if_condition_150225' (line 1862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1862, 8), 'if_condition_150225', if_condition_150225)
        # SSA begins for if statement (line 1862)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1863):
        
        # Assigning a Call to a Name (line 1863):
        
        # Call to hstack(...): (line 1863)
        # Processing the call arguments (line 1863)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1863)
        tuple_150228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1863, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1863)
        # Adding element type (line 1863)
        # Getting the type of 'steps' (line 1863)
        steps_150229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 31), 'steps', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1863, 31), tuple_150228, steps_150229)
        # Adding element type (line 1863)
        int_150230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1863, 38), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1863, 31), tuple_150228, int_150230)
        
        # Processing the call keyword arguments (line 1863)
        kwargs_150231 = {}
        # Getting the type of 'np' (line 1863)
        np_150226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 20), 'np', False)
        # Obtaining the member 'hstack' of a type (line 1863)
        hstack_150227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1863, 20), np_150226, 'hstack')
        # Calling hstack(args, kwargs) (line 1863)
        hstack_call_result_150232 = invoke(stypy.reporting.localization.Localization(__file__, 1863, 20), hstack_150227, *[tuple_150228], **kwargs_150231)
        
        # Assigning a type to the variable 'steps' (line 1863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1863, 12), 'steps', hstack_call_result_150232)
        # SSA join for if statement (line 1862)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'steps' (line 1864)
        steps_150233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 15), 'steps')
        # Assigning a type to the variable 'stypy_return_type' (line 1864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1864, 8), 'stypy_return_type', steps_150233)
        
        # ################# End of '_validate_steps(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_validate_steps' in the type store
        # Getting the type of 'stypy_return_type' (line 1847)
        stypy_return_type_150234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_150234)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_validate_steps'
        return stypy_return_type_150234


    @staticmethod
    @norecursion
    def _staircase(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_staircase'
        module_type_store = module_type_store.open_function_context('_staircase', 1866, 4, False)
        
        # Passed parameters checking function
        MaxNLocator._staircase.__dict__.__setitem__('stypy_localization', localization)
        MaxNLocator._staircase.__dict__.__setitem__('stypy_type_of_self', None)
        MaxNLocator._staircase.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaxNLocator._staircase.__dict__.__setitem__('stypy_function_name', '_staircase')
        MaxNLocator._staircase.__dict__.__setitem__('stypy_param_names_list', ['steps'])
        MaxNLocator._staircase.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaxNLocator._staircase.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaxNLocator._staircase.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaxNLocator._staircase.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaxNLocator._staircase.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaxNLocator._staircase.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, '_staircase', ['steps'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_staircase', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_staircase(...)' code ##################

        
        # Assigning a Tuple to a Name (line 1871):
        
        # Assigning a Tuple to a Name (line 1871):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1871)
        tuple_150235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1871)
        # Adding element type (line 1871)
        float_150236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 19), 'float')
        
        # Obtaining the type of the subscript
        int_150237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 32), 'int')
        slice_150238 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1871, 25), None, int_150237, None)
        # Getting the type of 'steps' (line 1871)
        steps_150239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 25), 'steps')
        # Obtaining the member '__getitem__' of a type (line 1871)
        getitem___150240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 25), steps_150239, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1871)
        subscript_call_result_150241 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 25), getitem___150240, slice_150238)
        
        # Applying the binary operator '*' (line 1871)
        result_mul_150242 = python_operator(stypy.reporting.localization.Localization(__file__, 1871, 19), '*', float_150236, subscript_call_result_150241)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1871, 19), tuple_150235, result_mul_150242)
        # Adding element type (line 1871)
        # Getting the type of 'steps' (line 1871)
        steps_150243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 37), 'steps')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1871, 19), tuple_150235, steps_150243)
        # Adding element type (line 1871)
        int_150244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 44), 'int')
        
        # Obtaining the type of the subscript
        int_150245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 55), 'int')
        # Getting the type of 'steps' (line 1871)
        steps_150246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 49), 'steps')
        # Obtaining the member '__getitem__' of a type (line 1871)
        getitem___150247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 49), steps_150246, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1871)
        subscript_call_result_150248 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 49), getitem___150247, int_150245)
        
        # Applying the binary operator '*' (line 1871)
        result_mul_150249 = python_operator(stypy.reporting.localization.Localization(__file__, 1871, 44), '*', int_150244, subscript_call_result_150248)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1871, 19), tuple_150235, result_mul_150249)
        
        # Assigning a type to the variable 'flights' (line 1871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 8), 'flights', tuple_150235)
        
        # Call to hstack(...): (line 1872)
        # Processing the call arguments (line 1872)
        # Getting the type of 'flights' (line 1872)
        flights_150252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 25), 'flights', False)
        # Processing the call keyword arguments (line 1872)
        kwargs_150253 = {}
        # Getting the type of 'np' (line 1872)
        np_150250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 15), 'np', False)
        # Obtaining the member 'hstack' of a type (line 1872)
        hstack_150251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1872, 15), np_150250, 'hstack')
        # Calling hstack(args, kwargs) (line 1872)
        hstack_call_result_150254 = invoke(stypy.reporting.localization.Localization(__file__, 1872, 15), hstack_150251, *[flights_150252], **kwargs_150253)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1872)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 8), 'stypy_return_type', hstack_call_result_150254)
        
        # ################# End of '_staircase(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_staircase' in the type store
        # Getting the type of 'stypy_return_type' (line 1866)
        stypy_return_type_150255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_150255)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_staircase'
        return stypy_return_type_150255


    @norecursion
    def set_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_params'
        module_type_store = module_type_store.open_function_context('set_params', 1874, 4, False)
        # Assigning a type to the variable 'self' (line 1875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1875, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaxNLocator.set_params.__dict__.__setitem__('stypy_localization', localization)
        MaxNLocator.set_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaxNLocator.set_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaxNLocator.set_params.__dict__.__setitem__('stypy_function_name', 'MaxNLocator.set_params')
        MaxNLocator.set_params.__dict__.__setitem__('stypy_param_names_list', [])
        MaxNLocator.set_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaxNLocator.set_params.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        MaxNLocator.set_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaxNLocator.set_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaxNLocator.set_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaxNLocator.set_params.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaxNLocator.set_params', [], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_params', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_params(...)' code ##################

        unicode_150256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1875, 8), 'unicode', u'Set parameters within this locator.')
        
        
        unicode_150257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1876, 11), 'unicode', u'nbins')
        # Getting the type of 'kwargs' (line 1876)
        kwargs_150258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 22), 'kwargs')
        # Applying the binary operator 'in' (line 1876)
        result_contains_150259 = python_operator(stypy.reporting.localization.Localization(__file__, 1876, 11), 'in', unicode_150257, kwargs_150258)
        
        # Testing the type of an if condition (line 1876)
        if_condition_150260 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1876, 8), result_contains_150259)
        # Assigning a type to the variable 'if_condition_150260' (line 1876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1876, 8), 'if_condition_150260', if_condition_150260)
        # SSA begins for if statement (line 1876)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Attribute (line 1877):
        
        # Assigning a Subscript to a Attribute (line 1877):
        
        # Obtaining the type of the subscript
        unicode_150261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 33), 'unicode', u'nbins')
        # Getting the type of 'kwargs' (line 1877)
        kwargs_150262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 26), 'kwargs')
        # Obtaining the member '__getitem__' of a type (line 1877)
        getitem___150263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 26), kwargs_150262, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1877)
        subscript_call_result_150264 = invoke(stypy.reporting.localization.Localization(__file__, 1877, 26), getitem___150263, unicode_150261)
        
        # Getting the type of 'self' (line 1877)
        self_150265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 12), 'self')
        # Setting the type of the member '_nbins' of a type (line 1877)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 12), self_150265, '_nbins', subscript_call_result_150264)
        
        
        # Getting the type of 'self' (line 1878)
        self_150266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 15), 'self')
        # Obtaining the member '_nbins' of a type (line 1878)
        _nbins_150267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 15), self_150266, '_nbins')
        unicode_150268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1878, 30), 'unicode', u'auto')
        # Applying the binary operator '!=' (line 1878)
        result_ne_150269 = python_operator(stypy.reporting.localization.Localization(__file__, 1878, 15), '!=', _nbins_150267, unicode_150268)
        
        # Testing the type of an if condition (line 1878)
        if_condition_150270 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1878, 12), result_ne_150269)
        # Assigning a type to the variable 'if_condition_150270' (line 1878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 12), 'if_condition_150270', if_condition_150270)
        # SSA begins for if statement (line 1878)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1879):
        
        # Assigning a Call to a Attribute (line 1879):
        
        # Call to int(...): (line 1879)
        # Processing the call arguments (line 1879)
        # Getting the type of 'self' (line 1879)
        self_150272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 34), 'self', False)
        # Obtaining the member '_nbins' of a type (line 1879)
        _nbins_150273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1879, 34), self_150272, '_nbins')
        # Processing the call keyword arguments (line 1879)
        kwargs_150274 = {}
        # Getting the type of 'int' (line 1879)
        int_150271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 30), 'int', False)
        # Calling int(args, kwargs) (line 1879)
        int_call_result_150275 = invoke(stypy.reporting.localization.Localization(__file__, 1879, 30), int_150271, *[_nbins_150273], **kwargs_150274)
        
        # Getting the type of 'self' (line 1879)
        self_150276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 16), 'self')
        # Setting the type of the member '_nbins' of a type (line 1879)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1879, 16), self_150276, '_nbins', int_call_result_150275)
        # SSA join for if statement (line 1878)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1876)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_150277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1880, 11), 'unicode', u'trim')
        # Getting the type of 'kwargs' (line 1880)
        kwargs_150278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 21), 'kwargs')
        # Applying the binary operator 'in' (line 1880)
        result_contains_150279 = python_operator(stypy.reporting.localization.Localization(__file__, 1880, 11), 'in', unicode_150277, kwargs_150278)
        
        # Testing the type of an if condition (line 1880)
        if_condition_150280 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1880, 8), result_contains_150279)
        # Assigning a type to the variable 'if_condition_150280' (line 1880)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1880, 8), 'if_condition_150280', if_condition_150280)
        # SSA begins for if statement (line 1880)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1881)
        # Processing the call arguments (line 1881)
        unicode_150283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1882, 16), 'unicode', u"The 'trim' keyword has no effect since version 2.0.")
        # Getting the type of 'mplDeprecation' (line 1883)
        mplDeprecation_150284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 16), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 1881)
        kwargs_150285 = {}
        # Getting the type of 'warnings' (line 1881)
        warnings_150281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1881)
        warn_150282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1881, 12), warnings_150281, 'warn')
        # Calling warn(args, kwargs) (line 1881)
        warn_call_result_150286 = invoke(stypy.reporting.localization.Localization(__file__, 1881, 12), warn_150282, *[unicode_150283, mplDeprecation_150284], **kwargs_150285)
        
        # SSA join for if statement (line 1880)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_150287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1884, 11), 'unicode', u'symmetric')
        # Getting the type of 'kwargs' (line 1884)
        kwargs_150288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 26), 'kwargs')
        # Applying the binary operator 'in' (line 1884)
        result_contains_150289 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 11), 'in', unicode_150287, kwargs_150288)
        
        # Testing the type of an if condition (line 1884)
        if_condition_150290 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1884, 8), result_contains_150289)
        # Assigning a type to the variable 'if_condition_150290' (line 1884)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1884, 8), 'if_condition_150290', if_condition_150290)
        # SSA begins for if statement (line 1884)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Attribute (line 1885):
        
        # Assigning a Subscript to a Attribute (line 1885):
        
        # Obtaining the type of the subscript
        unicode_150291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1885, 37), 'unicode', u'symmetric')
        # Getting the type of 'kwargs' (line 1885)
        kwargs_150292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 30), 'kwargs')
        # Obtaining the member '__getitem__' of a type (line 1885)
        getitem___150293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1885, 30), kwargs_150292, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1885)
        subscript_call_result_150294 = invoke(stypy.reporting.localization.Localization(__file__, 1885, 30), getitem___150293, unicode_150291)
        
        # Getting the type of 'self' (line 1885)
        self_150295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 12), 'self')
        # Setting the type of the member '_symmetric' of a type (line 1885)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1885, 12), self_150295, '_symmetric', subscript_call_result_150294)
        # SSA join for if statement (line 1884)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_150296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 11), 'unicode', u'prune')
        # Getting the type of 'kwargs' (line 1886)
        kwargs_150297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 22), 'kwargs')
        # Applying the binary operator 'in' (line 1886)
        result_contains_150298 = python_operator(stypy.reporting.localization.Localization(__file__, 1886, 11), 'in', unicode_150296, kwargs_150297)
        
        # Testing the type of an if condition (line 1886)
        if_condition_150299 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1886, 8), result_contains_150298)
        # Assigning a type to the variable 'if_condition_150299' (line 1886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 8), 'if_condition_150299', if_condition_150299)
        # SSA begins for if statement (line 1886)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1887):
        
        # Assigning a Subscript to a Name (line 1887):
        
        # Obtaining the type of the subscript
        unicode_150300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1887, 27), 'unicode', u'prune')
        # Getting the type of 'kwargs' (line 1887)
        kwargs_150301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 20), 'kwargs')
        # Obtaining the member '__getitem__' of a type (line 1887)
        getitem___150302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1887, 20), kwargs_150301, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1887)
        subscript_call_result_150303 = invoke(stypy.reporting.localization.Localization(__file__, 1887, 20), getitem___150302, unicode_150300)
        
        # Assigning a type to the variable 'prune' (line 1887)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 12), 'prune', subscript_call_result_150303)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'prune' (line 1888)
        prune_150304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 15), 'prune')
        # Getting the type of 'None' (line 1888)
        None_150305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 28), 'None')
        # Applying the binary operator 'isnot' (line 1888)
        result_is_not_150306 = python_operator(stypy.reporting.localization.Localization(__file__, 1888, 15), 'isnot', prune_150304, None_150305)
        
        
        # Getting the type of 'prune' (line 1888)
        prune_150307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 37), 'prune')
        
        # Obtaining an instance of the builtin type 'list' (line 1888)
        list_150308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1888, 50), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1888)
        # Adding element type (line 1888)
        unicode_150309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1888, 51), 'unicode', u'upper')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1888, 50), list_150308, unicode_150309)
        # Adding element type (line 1888)
        unicode_150310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1888, 60), 'unicode', u'lower')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1888, 50), list_150308, unicode_150310)
        # Adding element type (line 1888)
        unicode_150311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1888, 69), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1888, 50), list_150308, unicode_150311)
        
        # Applying the binary operator 'notin' (line 1888)
        result_contains_150312 = python_operator(stypy.reporting.localization.Localization(__file__, 1888, 37), 'notin', prune_150307, list_150308)
        
        # Applying the binary operator 'and' (line 1888)
        result_and_keyword_150313 = python_operator(stypy.reporting.localization.Localization(__file__, 1888, 15), 'and', result_is_not_150306, result_contains_150312)
        
        # Testing the type of an if condition (line 1888)
        if_condition_150314 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1888, 12), result_and_keyword_150313)
        # Assigning a type to the variable 'if_condition_150314' (line 1888)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1888, 12), 'if_condition_150314', if_condition_150314)
        # SSA begins for if statement (line 1888)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1889)
        # Processing the call arguments (line 1889)
        unicode_150316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1890, 20), 'unicode', u"prune must be 'upper', 'lower', 'both', or None")
        # Processing the call keyword arguments (line 1889)
        kwargs_150317 = {}
        # Getting the type of 'ValueError' (line 1889)
        ValueError_150315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1889)
        ValueError_call_result_150318 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 22), ValueError_150315, *[unicode_150316], **kwargs_150317)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1889, 16), ValueError_call_result_150318, 'raise parameter', BaseException)
        # SSA join for if statement (line 1888)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1891):
        
        # Assigning a Name to a Attribute (line 1891):
        # Getting the type of 'prune' (line 1891)
        prune_150319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 26), 'prune')
        # Getting the type of 'self' (line 1891)
        self_150320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 12), 'self')
        # Setting the type of the member '_prune' of a type (line 1891)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1891, 12), self_150320, '_prune', prune_150319)
        # SSA join for if statement (line 1886)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_150321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 11), 'unicode', u'min_n_ticks')
        # Getting the type of 'kwargs' (line 1892)
        kwargs_150322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 28), 'kwargs')
        # Applying the binary operator 'in' (line 1892)
        result_contains_150323 = python_operator(stypy.reporting.localization.Localization(__file__, 1892, 11), 'in', unicode_150321, kwargs_150322)
        
        # Testing the type of an if condition (line 1892)
        if_condition_150324 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1892, 8), result_contains_150323)
        # Assigning a type to the variable 'if_condition_150324' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'if_condition_150324', if_condition_150324)
        # SSA begins for if statement (line 1892)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1893):
        
        # Assigning a Call to a Attribute (line 1893):
        
        # Call to max(...): (line 1893)
        # Processing the call arguments (line 1893)
        int_150326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1893, 36), 'int')
        
        # Obtaining the type of the subscript
        unicode_150327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1893, 46), 'unicode', u'min_n_ticks')
        # Getting the type of 'kwargs' (line 1893)
        kwargs_150328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 39), 'kwargs', False)
        # Obtaining the member '__getitem__' of a type (line 1893)
        getitem___150329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1893, 39), kwargs_150328, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1893)
        subscript_call_result_150330 = invoke(stypy.reporting.localization.Localization(__file__, 1893, 39), getitem___150329, unicode_150327)
        
        # Processing the call keyword arguments (line 1893)
        kwargs_150331 = {}
        # Getting the type of 'max' (line 1893)
        max_150325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 32), 'max', False)
        # Calling max(args, kwargs) (line 1893)
        max_call_result_150332 = invoke(stypy.reporting.localization.Localization(__file__, 1893, 32), max_150325, *[int_150326, subscript_call_result_150330], **kwargs_150331)
        
        # Getting the type of 'self' (line 1893)
        self_150333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 12), 'self')
        # Setting the type of the member '_min_n_ticks' of a type (line 1893)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1893, 12), self_150333, '_min_n_ticks', max_call_result_150332)
        # SSA join for if statement (line 1892)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_150334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1894, 11), 'unicode', u'steps')
        # Getting the type of 'kwargs' (line 1894)
        kwargs_150335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 22), 'kwargs')
        # Applying the binary operator 'in' (line 1894)
        result_contains_150336 = python_operator(stypy.reporting.localization.Localization(__file__, 1894, 11), 'in', unicode_150334, kwargs_150335)
        
        # Testing the type of an if condition (line 1894)
        if_condition_150337 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1894, 8), result_contains_150336)
        # Assigning a type to the variable 'if_condition_150337' (line 1894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1894, 8), 'if_condition_150337', if_condition_150337)
        # SSA begins for if statement (line 1894)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1895):
        
        # Assigning a Subscript to a Name (line 1895):
        
        # Obtaining the type of the subscript
        unicode_150338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1895, 27), 'unicode', u'steps')
        # Getting the type of 'kwargs' (line 1895)
        kwargs_150339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 20), 'kwargs')
        # Obtaining the member '__getitem__' of a type (line 1895)
        getitem___150340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1895, 20), kwargs_150339, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1895)
        subscript_call_result_150341 = invoke(stypy.reporting.localization.Localization(__file__, 1895, 20), getitem___150340, unicode_150338)
        
        # Assigning a type to the variable 'steps' (line 1895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1895, 12), 'steps', subscript_call_result_150341)
        
        # Type idiom detected: calculating its left and rigth part (line 1896)
        # Getting the type of 'steps' (line 1896)
        steps_150342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 15), 'steps')
        # Getting the type of 'None' (line 1896)
        None_150343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 24), 'None')
        
        (may_be_150344, more_types_in_union_150345) = may_be_none(steps_150342, None_150343)

        if may_be_150344:

            if more_types_in_union_150345:
                # Runtime conditional SSA (line 1896)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 1897):
            
            # Assigning a Call to a Attribute (line 1897):
            
            # Call to array(...): (line 1897)
            # Processing the call arguments (line 1897)
            
            # Obtaining an instance of the builtin type 'list' (line 1897)
            list_150348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 39), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1897)
            # Adding element type (line 1897)
            int_150349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 40), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1897, 39), list_150348, int_150349)
            # Adding element type (line 1897)
            float_150350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 43), 'float')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1897, 39), list_150348, float_150350)
            # Adding element type (line 1897)
            int_150351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 48), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1897, 39), list_150348, int_150351)
            # Adding element type (line 1897)
            float_150352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 51), 'float')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1897, 39), list_150348, float_150352)
            # Adding element type (line 1897)
            int_150353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 56), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1897, 39), list_150348, int_150353)
            # Adding element type (line 1897)
            int_150354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 59), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1897, 39), list_150348, int_150354)
            # Adding element type (line 1897)
            int_150355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 62), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1897, 39), list_150348, int_150355)
            # Adding element type (line 1897)
            int_150356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 65), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1897, 39), list_150348, int_150356)
            # Adding element type (line 1897)
            int_150357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 68), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1897, 39), list_150348, int_150357)
            # Adding element type (line 1897)
            int_150358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 71), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1897, 39), list_150348, int_150358)
            
            # Processing the call keyword arguments (line 1897)
            kwargs_150359 = {}
            # Getting the type of 'np' (line 1897)
            np_150346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 30), 'np', False)
            # Obtaining the member 'array' of a type (line 1897)
            array_150347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1897, 30), np_150346, 'array')
            # Calling array(args, kwargs) (line 1897)
            array_call_result_150360 = invoke(stypy.reporting.localization.Localization(__file__, 1897, 30), array_150347, *[list_150348], **kwargs_150359)
            
            # Getting the type of 'self' (line 1897)
            self_150361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 16), 'self')
            # Setting the type of the member '_steps' of a type (line 1897)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1897, 16), self_150361, '_steps', array_call_result_150360)

            if more_types_in_union_150345:
                # Runtime conditional SSA for else branch (line 1896)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_150344) or more_types_in_union_150345):
            
            # Assigning a Call to a Attribute (line 1899):
            
            # Assigning a Call to a Attribute (line 1899):
            
            # Call to _validate_steps(...): (line 1899)
            # Processing the call arguments (line 1899)
            # Getting the type of 'steps' (line 1899)
            steps_150364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 51), 'steps', False)
            # Processing the call keyword arguments (line 1899)
            kwargs_150365 = {}
            # Getting the type of 'self' (line 1899)
            self_150362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 30), 'self', False)
            # Obtaining the member '_validate_steps' of a type (line 1899)
            _validate_steps_150363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1899, 30), self_150362, '_validate_steps')
            # Calling _validate_steps(args, kwargs) (line 1899)
            _validate_steps_call_result_150366 = invoke(stypy.reporting.localization.Localization(__file__, 1899, 30), _validate_steps_150363, *[steps_150364], **kwargs_150365)
            
            # Getting the type of 'self' (line 1899)
            self_150367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 16), 'self')
            # Setting the type of the member '_steps' of a type (line 1899)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1899, 16), self_150367, '_steps', _validate_steps_call_result_150366)

            if (may_be_150344 and more_types_in_union_150345):
                # SSA join for if statement (line 1896)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 1900):
        
        # Assigning a Call to a Attribute (line 1900):
        
        # Call to _staircase(...): (line 1900)
        # Processing the call arguments (line 1900)
        # Getting the type of 'self' (line 1900)
        self_150370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 51), 'self', False)
        # Obtaining the member '_steps' of a type (line 1900)
        _steps_150371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1900, 51), self_150370, '_steps')
        # Processing the call keyword arguments (line 1900)
        kwargs_150372 = {}
        # Getting the type of 'self' (line 1900)
        self_150368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 35), 'self', False)
        # Obtaining the member '_staircase' of a type (line 1900)
        _staircase_150369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1900, 35), self_150368, '_staircase')
        # Calling _staircase(args, kwargs) (line 1900)
        _staircase_call_result_150373 = invoke(stypy.reporting.localization.Localization(__file__, 1900, 35), _staircase_150369, *[_steps_150371], **kwargs_150372)
        
        # Getting the type of 'self' (line 1900)
        self_150374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 12), 'self')
        # Setting the type of the member '_extended_steps' of a type (line 1900)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1900, 12), self_150374, '_extended_steps', _staircase_call_result_150373)
        # SSA join for if statement (line 1894)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_150375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1901, 11), 'unicode', u'integer')
        # Getting the type of 'kwargs' (line 1901)
        kwargs_150376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 24), 'kwargs')
        # Applying the binary operator 'in' (line 1901)
        result_contains_150377 = python_operator(stypy.reporting.localization.Localization(__file__, 1901, 11), 'in', unicode_150375, kwargs_150376)
        
        # Testing the type of an if condition (line 1901)
        if_condition_150378 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1901, 8), result_contains_150377)
        # Assigning a type to the variable 'if_condition_150378' (line 1901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1901, 8), 'if_condition_150378', if_condition_150378)
        # SSA begins for if statement (line 1901)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Attribute (line 1902):
        
        # Assigning a Subscript to a Attribute (line 1902):
        
        # Obtaining the type of the subscript
        unicode_150379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1902, 35), 'unicode', u'integer')
        # Getting the type of 'kwargs' (line 1902)
        kwargs_150380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1902, 28), 'kwargs')
        # Obtaining the member '__getitem__' of a type (line 1902)
        getitem___150381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1902, 28), kwargs_150380, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1902)
        subscript_call_result_150382 = invoke(stypy.reporting.localization.Localization(__file__, 1902, 28), getitem___150381, unicode_150379)
        
        # Getting the type of 'self' (line 1902)
        self_150383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1902, 12), 'self')
        # Setting the type of the member '_integer' of a type (line 1902)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1902, 12), self_150383, '_integer', subscript_call_result_150382)
        # SSA join for if statement (line 1901)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_params' in the type store
        # Getting the type of 'stypy_return_type' (line 1874)
        stypy_return_type_150384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_150384)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_params'
        return stypy_return_type_150384


    @norecursion
    def _raw_ticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_raw_ticks'
        module_type_store = module_type_store.open_function_context('_raw_ticks', 1904, 4, False)
        # Assigning a type to the variable 'self' (line 1905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1905, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaxNLocator._raw_ticks.__dict__.__setitem__('stypy_localization', localization)
        MaxNLocator._raw_ticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaxNLocator._raw_ticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaxNLocator._raw_ticks.__dict__.__setitem__('stypy_function_name', 'MaxNLocator._raw_ticks')
        MaxNLocator._raw_ticks.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        MaxNLocator._raw_ticks.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaxNLocator._raw_ticks.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaxNLocator._raw_ticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaxNLocator._raw_ticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaxNLocator._raw_ticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaxNLocator._raw_ticks.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaxNLocator._raw_ticks', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_raw_ticks', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_raw_ticks(...)' code ##################

        
        
        # Getting the type of 'self' (line 1905)
        self_150385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 11), 'self')
        # Obtaining the member '_nbins' of a type (line 1905)
        _nbins_150386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1905, 11), self_150385, '_nbins')
        unicode_150387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1905, 26), 'unicode', u'auto')
        # Applying the binary operator '==' (line 1905)
        result_eq_150388 = python_operator(stypy.reporting.localization.Localization(__file__, 1905, 11), '==', _nbins_150386, unicode_150387)
        
        # Testing the type of an if condition (line 1905)
        if_condition_150389 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1905, 8), result_eq_150388)
        # Assigning a type to the variable 'if_condition_150389' (line 1905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1905, 8), 'if_condition_150389', if_condition_150389)
        # SSA begins for if statement (line 1905)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 1906)
        self_150390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 15), 'self')
        # Obtaining the member 'axis' of a type (line 1906)
        axis_150391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1906, 15), self_150390, 'axis')
        # Getting the type of 'None' (line 1906)
        None_150392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 32), 'None')
        # Applying the binary operator 'isnot' (line 1906)
        result_is_not_150393 = python_operator(stypy.reporting.localization.Localization(__file__, 1906, 15), 'isnot', axis_150391, None_150392)
        
        # Testing the type of an if condition (line 1906)
        if_condition_150394 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1906, 12), result_is_not_150393)
        # Assigning a type to the variable 'if_condition_150394' (line 1906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1906, 12), 'if_condition_150394', if_condition_150394)
        # SSA begins for if statement (line 1906)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1907):
        
        # Assigning a Call to a Name (line 1907):
        
        # Call to clip(...): (line 1907)
        # Processing the call arguments (line 1907)
        
        # Call to get_tick_space(...): (line 1907)
        # Processing the call keyword arguments (line 1907)
        kwargs_150400 = {}
        # Getting the type of 'self' (line 1907)
        self_150397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 32), 'self', False)
        # Obtaining the member 'axis' of a type (line 1907)
        axis_150398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1907, 32), self_150397, 'axis')
        # Obtaining the member 'get_tick_space' of a type (line 1907)
        get_tick_space_150399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1907, 32), axis_150398, 'get_tick_space')
        # Calling get_tick_space(args, kwargs) (line 1907)
        get_tick_space_call_result_150401 = invoke(stypy.reporting.localization.Localization(__file__, 1907, 32), get_tick_space_150399, *[], **kwargs_150400)
        
        
        # Call to max(...): (line 1908)
        # Processing the call arguments (line 1908)
        int_150403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1908, 36), 'int')
        # Getting the type of 'self' (line 1908)
        self_150404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 39), 'self', False)
        # Obtaining the member '_min_n_ticks' of a type (line 1908)
        _min_n_ticks_150405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1908, 39), self_150404, '_min_n_ticks')
        int_150406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1908, 59), 'int')
        # Applying the binary operator '-' (line 1908)
        result_sub_150407 = python_operator(stypy.reporting.localization.Localization(__file__, 1908, 39), '-', _min_n_ticks_150405, int_150406)
        
        # Processing the call keyword arguments (line 1908)
        kwargs_150408 = {}
        # Getting the type of 'max' (line 1908)
        max_150402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 32), 'max', False)
        # Calling max(args, kwargs) (line 1908)
        max_call_result_150409 = invoke(stypy.reporting.localization.Localization(__file__, 1908, 32), max_150402, *[int_150403, result_sub_150407], **kwargs_150408)
        
        int_150410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1908, 63), 'int')
        # Processing the call keyword arguments (line 1907)
        kwargs_150411 = {}
        # Getting the type of 'np' (line 1907)
        np_150395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 24), 'np', False)
        # Obtaining the member 'clip' of a type (line 1907)
        clip_150396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1907, 24), np_150395, 'clip')
        # Calling clip(args, kwargs) (line 1907)
        clip_call_result_150412 = invoke(stypy.reporting.localization.Localization(__file__, 1907, 24), clip_150396, *[get_tick_space_call_result_150401, max_call_result_150409, int_150410], **kwargs_150411)
        
        # Assigning a type to the variable 'nbins' (line 1907)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1907, 16), 'nbins', clip_call_result_150412)
        # SSA branch for the else part of an if statement (line 1906)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 1910):
        
        # Assigning a Num to a Name (line 1910):
        int_150413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1910, 24), 'int')
        # Assigning a type to the variable 'nbins' (line 1910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1910, 16), 'nbins', int_150413)
        # SSA join for if statement (line 1906)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1905)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 1912):
        
        # Assigning a Attribute to a Name (line 1912):
        # Getting the type of 'self' (line 1912)
        self_150414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 20), 'self')
        # Obtaining the member '_nbins' of a type (line 1912)
        _nbins_150415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1912, 20), self_150414, '_nbins')
        # Assigning a type to the variable 'nbins' (line 1912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 12), 'nbins', _nbins_150415)
        # SSA join for if statement (line 1905)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1914):
        
        # Assigning a Call to a Name:
        
        # Call to scale_range(...): (line 1914)
        # Processing the call arguments (line 1914)
        # Getting the type of 'vmin' (line 1914)
        vmin_150417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 36), 'vmin', False)
        # Getting the type of 'vmax' (line 1914)
        vmax_150418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 42), 'vmax', False)
        # Getting the type of 'nbins' (line 1914)
        nbins_150419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 48), 'nbins', False)
        # Processing the call keyword arguments (line 1914)
        kwargs_150420 = {}
        # Getting the type of 'scale_range' (line 1914)
        scale_range_150416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 24), 'scale_range', False)
        # Calling scale_range(args, kwargs) (line 1914)
        scale_range_call_result_150421 = invoke(stypy.reporting.localization.Localization(__file__, 1914, 24), scale_range_150416, *[vmin_150417, vmax_150418, nbins_150419], **kwargs_150420)
        
        # Assigning a type to the variable 'call_assignment_146325' (line 1914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1914, 8), 'call_assignment_146325', scale_range_call_result_150421)
        
        # Assigning a Call to a Name (line 1914):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_150424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1914, 8), 'int')
        # Processing the call keyword arguments
        kwargs_150425 = {}
        # Getting the type of 'call_assignment_146325' (line 1914)
        call_assignment_146325_150422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 8), 'call_assignment_146325', False)
        # Obtaining the member '__getitem__' of a type (line 1914)
        getitem___150423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1914, 8), call_assignment_146325_150422, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_150426 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___150423, *[int_150424], **kwargs_150425)
        
        # Assigning a type to the variable 'call_assignment_146326' (line 1914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1914, 8), 'call_assignment_146326', getitem___call_result_150426)
        
        # Assigning a Name to a Name (line 1914):
        # Getting the type of 'call_assignment_146326' (line 1914)
        call_assignment_146326_150427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 8), 'call_assignment_146326')
        # Assigning a type to the variable 'scale' (line 1914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1914, 8), 'scale', call_assignment_146326_150427)
        
        # Assigning a Call to a Name (line 1914):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_150430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1914, 8), 'int')
        # Processing the call keyword arguments
        kwargs_150431 = {}
        # Getting the type of 'call_assignment_146325' (line 1914)
        call_assignment_146325_150428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 8), 'call_assignment_146325', False)
        # Obtaining the member '__getitem__' of a type (line 1914)
        getitem___150429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1914, 8), call_assignment_146325_150428, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_150432 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___150429, *[int_150430], **kwargs_150431)
        
        # Assigning a type to the variable 'call_assignment_146327' (line 1914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1914, 8), 'call_assignment_146327', getitem___call_result_150432)
        
        # Assigning a Name to a Name (line 1914):
        # Getting the type of 'call_assignment_146327' (line 1914)
        call_assignment_146327_150433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 8), 'call_assignment_146327')
        # Assigning a type to the variable 'offset' (line 1914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1914, 15), 'offset', call_assignment_146327_150433)
        
        # Assigning a BinOp to a Name (line 1915):
        
        # Assigning a BinOp to a Name (line 1915):
        # Getting the type of 'vmin' (line 1915)
        vmin_150434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 16), 'vmin')
        # Getting the type of 'offset' (line 1915)
        offset_150435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 23), 'offset')
        # Applying the binary operator '-' (line 1915)
        result_sub_150436 = python_operator(stypy.reporting.localization.Localization(__file__, 1915, 16), '-', vmin_150434, offset_150435)
        
        # Assigning a type to the variable '_vmin' (line 1915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1915, 8), '_vmin', result_sub_150436)
        
        # Assigning a BinOp to a Name (line 1916):
        
        # Assigning a BinOp to a Name (line 1916):
        # Getting the type of 'vmax' (line 1916)
        vmax_150437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 16), 'vmax')
        # Getting the type of 'offset' (line 1916)
        offset_150438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 23), 'offset')
        # Applying the binary operator '-' (line 1916)
        result_sub_150439 = python_operator(stypy.reporting.localization.Localization(__file__, 1916, 16), '-', vmax_150437, offset_150438)
        
        # Assigning a type to the variable '_vmax' (line 1916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1916, 8), '_vmax', result_sub_150439)
        
        # Assigning a BinOp to a Name (line 1917):
        
        # Assigning a BinOp to a Name (line 1917):
        # Getting the type of 'vmax' (line 1917)
        vmax_150440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 20), 'vmax')
        # Getting the type of 'vmin' (line 1917)
        vmin_150441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 27), 'vmin')
        # Applying the binary operator '-' (line 1917)
        result_sub_150442 = python_operator(stypy.reporting.localization.Localization(__file__, 1917, 20), '-', vmax_150440, vmin_150441)
        
        # Getting the type of 'nbins' (line 1917)
        nbins_150443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 35), 'nbins')
        # Applying the binary operator 'div' (line 1917)
        result_div_150444 = python_operator(stypy.reporting.localization.Localization(__file__, 1917, 19), 'div', result_sub_150442, nbins_150443)
        
        # Assigning a type to the variable 'raw_step' (line 1917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1917, 8), 'raw_step', result_div_150444)
        
        # Assigning a BinOp to a Name (line 1918):
        
        # Assigning a BinOp to a Name (line 1918):
        # Getting the type of 'self' (line 1918)
        self_150445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 16), 'self')
        # Obtaining the member '_extended_steps' of a type (line 1918)
        _extended_steps_150446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1918, 16), self_150445, '_extended_steps')
        # Getting the type of 'scale' (line 1918)
        scale_150447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 39), 'scale')
        # Applying the binary operator '*' (line 1918)
        result_mul_150448 = python_operator(stypy.reporting.localization.Localization(__file__, 1918, 16), '*', _extended_steps_150446, scale_150447)
        
        # Assigning a type to the variable 'steps' (line 1918)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1918, 8), 'steps', result_mul_150448)
        
        # Getting the type of 'self' (line 1919)
        self_150449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 11), 'self')
        # Obtaining the member '_integer' of a type (line 1919)
        _integer_150450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1919, 11), self_150449, '_integer')
        # Testing the type of an if condition (line 1919)
        if_condition_150451 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1919, 8), _integer_150450)
        # Assigning a type to the variable 'if_condition_150451' (line 1919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1919, 8), 'if_condition_150451', if_condition_150451)
        # SSA begins for if statement (line 1919)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1921):
        
        # Assigning a BinOp to a Name (line 1921):
        
        # Getting the type of 'steps' (line 1921)
        steps_150452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 21), 'steps')
        int_150453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1921, 29), 'int')
        # Applying the binary operator '<' (line 1921)
        result_lt_150454 = python_operator(stypy.reporting.localization.Localization(__file__, 1921, 21), '<', steps_150452, int_150453)
        
        
        
        # Call to abs(...): (line 1921)
        # Processing the call arguments (line 1921)
        # Getting the type of 'steps' (line 1921)
        steps_150457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 42), 'steps', False)
        
        # Call to round(...): (line 1921)
        # Processing the call arguments (line 1921)
        # Getting the type of 'steps' (line 1921)
        steps_150460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 59), 'steps', False)
        # Processing the call keyword arguments (line 1921)
        kwargs_150461 = {}
        # Getting the type of 'np' (line 1921)
        np_150458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 50), 'np', False)
        # Obtaining the member 'round' of a type (line 1921)
        round_150459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1921, 50), np_150458, 'round')
        # Calling round(args, kwargs) (line 1921)
        round_call_result_150462 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 50), round_150459, *[steps_150460], **kwargs_150461)
        
        # Applying the binary operator '-' (line 1921)
        result_sub_150463 = python_operator(stypy.reporting.localization.Localization(__file__, 1921, 42), '-', steps_150457, round_call_result_150462)
        
        # Processing the call keyword arguments (line 1921)
        kwargs_150464 = {}
        # Getting the type of 'np' (line 1921)
        np_150455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 35), 'np', False)
        # Obtaining the member 'abs' of a type (line 1921)
        abs_150456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1921, 35), np_150455, 'abs')
        # Calling abs(args, kwargs) (line 1921)
        abs_call_result_150465 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 35), abs_150456, *[result_sub_150463], **kwargs_150464)
        
        float_150466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1921, 69), 'float')
        # Applying the binary operator '<' (line 1921)
        result_lt_150467 = python_operator(stypy.reporting.localization.Localization(__file__, 1921, 35), '<', abs_call_result_150465, float_150466)
        
        # Applying the binary operator '|' (line 1921)
        result_or__150468 = python_operator(stypy.reporting.localization.Localization(__file__, 1921, 20), '|', result_lt_150454, result_lt_150467)
        
        # Assigning a type to the variable 'igood' (line 1921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1921, 12), 'igood', result_or__150468)
        
        # Assigning a Subscript to a Name (line 1922):
        
        # Assigning a Subscript to a Name (line 1922):
        
        # Obtaining the type of the subscript
        # Getting the type of 'igood' (line 1922)
        igood_150469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 26), 'igood')
        # Getting the type of 'steps' (line 1922)
        steps_150470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 20), 'steps')
        # Obtaining the member '__getitem__' of a type (line 1922)
        getitem___150471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1922, 20), steps_150470, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1922)
        subscript_call_result_150472 = invoke(stypy.reporting.localization.Localization(__file__, 1922, 20), getitem___150471, igood_150469)
        
        # Assigning a type to the variable 'steps' (line 1922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1922, 12), 'steps', subscript_call_result_150472)
        # SSA join for if statement (line 1919)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 1924):
        
        # Assigning a Subscript to a Name (line 1924):
        
        # Obtaining the type of the subscript
        int_150473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1924, 49), 'int')
        
        # Obtaining the type of the subscript
        int_150474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1924, 46), 'int')
        
        # Call to nonzero(...): (line 1924)
        # Processing the call arguments (line 1924)
        
        # Getting the type of 'steps' (line 1924)
        steps_150477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 27), 'steps', False)
        # Getting the type of 'raw_step' (line 1924)
        raw_step_150478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 36), 'raw_step', False)
        # Applying the binary operator '>=' (line 1924)
        result_ge_150479 = python_operator(stypy.reporting.localization.Localization(__file__, 1924, 27), '>=', steps_150477, raw_step_150478)
        
        # Processing the call keyword arguments (line 1924)
        kwargs_150480 = {}
        # Getting the type of 'np' (line 1924)
        np_150475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 16), 'np', False)
        # Obtaining the member 'nonzero' of a type (line 1924)
        nonzero_150476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1924, 16), np_150475, 'nonzero')
        # Calling nonzero(args, kwargs) (line 1924)
        nonzero_call_result_150481 = invoke(stypy.reporting.localization.Localization(__file__, 1924, 16), nonzero_150476, *[result_ge_150479], **kwargs_150480)
        
        # Obtaining the member '__getitem__' of a type (line 1924)
        getitem___150482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1924, 16), nonzero_call_result_150481, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1924)
        subscript_call_result_150483 = invoke(stypy.reporting.localization.Localization(__file__, 1924, 16), getitem___150482, int_150474)
        
        # Obtaining the member '__getitem__' of a type (line 1924)
        getitem___150484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1924, 16), subscript_call_result_150483, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1924)
        subscript_call_result_150485 = invoke(stypy.reporting.localization.Localization(__file__, 1924, 16), getitem___150484, int_150473)
        
        # Assigning a type to the variable 'istep' (line 1924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1924, 8), 'istep', subscript_call_result_150485)
        
        
        
        # Obtaining the type of the subscript
        unicode_150486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1927, 20), 'unicode', u'axes.autolimit_mode')
        # Getting the type of 'rcParams' (line 1927)
        rcParams_150487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 11), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1927)
        getitem___150488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1927, 11), rcParams_150487, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1927)
        subscript_call_result_150489 = invoke(stypy.reporting.localization.Localization(__file__, 1927, 11), getitem___150488, unicode_150486)
        
        unicode_150490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1927, 46), 'unicode', u'round_numbers')
        # Applying the binary operator '==' (line 1927)
        result_eq_150491 = python_operator(stypy.reporting.localization.Localization(__file__, 1927, 11), '==', subscript_call_result_150489, unicode_150490)
        
        # Testing the type of an if condition (line 1927)
        if_condition_150492 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1927, 8), result_eq_150491)
        # Assigning a type to the variable 'if_condition_150492' (line 1927)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1927, 8), 'if_condition_150492', if_condition_150492)
        # SSA begins for if statement (line 1927)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to range(...): (line 1928)
        # Processing the call arguments (line 1928)
        # Getting the type of 'istep' (line 1928)
        istep_150494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 31), 'istep', False)
        
        # Call to len(...): (line 1928)
        # Processing the call arguments (line 1928)
        # Getting the type of 'steps' (line 1928)
        steps_150496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 42), 'steps', False)
        # Processing the call keyword arguments (line 1928)
        kwargs_150497 = {}
        # Getting the type of 'len' (line 1928)
        len_150495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 38), 'len', False)
        # Calling len(args, kwargs) (line 1928)
        len_call_result_150498 = invoke(stypy.reporting.localization.Localization(__file__, 1928, 38), len_150495, *[steps_150496], **kwargs_150497)
        
        # Processing the call keyword arguments (line 1928)
        kwargs_150499 = {}
        # Getting the type of 'range' (line 1928)
        range_150493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 25), 'range', False)
        # Calling range(args, kwargs) (line 1928)
        range_call_result_150500 = invoke(stypy.reporting.localization.Localization(__file__, 1928, 25), range_150493, *[istep_150494, len_call_result_150498], **kwargs_150499)
        
        # Testing the type of a for loop iterable (line 1928)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1928, 12), range_call_result_150500)
        # Getting the type of the for loop variable (line 1928)
        for_loop_var_150501 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1928, 12), range_call_result_150500)
        # Assigning a type to the variable 'istep' (line 1928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1928, 12), 'istep', for_loop_var_150501)
        # SSA begins for a for statement (line 1928)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 1929):
        
        # Assigning a Subscript to a Name (line 1929):
        
        # Obtaining the type of the subscript
        # Getting the type of 'istep' (line 1929)
        istep_150502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 29), 'istep')
        # Getting the type of 'steps' (line 1929)
        steps_150503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 23), 'steps')
        # Obtaining the member '__getitem__' of a type (line 1929)
        getitem___150504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1929, 23), steps_150503, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1929)
        subscript_call_result_150505 = invoke(stypy.reporting.localization.Localization(__file__, 1929, 23), getitem___150504, istep_150502)
        
        # Assigning a type to the variable 'step' (line 1929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1929, 16), 'step', subscript_call_result_150505)
        
        # Assigning a BinOp to a Name (line 1930):
        
        # Assigning a BinOp to a Name (line 1930):
        # Getting the type of '_vmin' (line 1930)
        _vmin_150506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 29), '_vmin')
        # Getting the type of 'step' (line 1930)
        step_150507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 38), 'step')
        # Applying the binary operator '//' (line 1930)
        result_floordiv_150508 = python_operator(stypy.reporting.localization.Localization(__file__, 1930, 29), '//', _vmin_150506, step_150507)
        
        # Getting the type of 'step' (line 1930)
        step_150509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 46), 'step')
        # Applying the binary operator '*' (line 1930)
        result_mul_150510 = python_operator(stypy.reporting.localization.Localization(__file__, 1930, 28), '*', result_floordiv_150508, step_150509)
        
        # Assigning a type to the variable 'best_vmin' (line 1930)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1930, 16), 'best_vmin', result_mul_150510)
        
        # Assigning a BinOp to a Name (line 1931):
        
        # Assigning a BinOp to a Name (line 1931):
        # Getting the type of 'best_vmin' (line 1931)
        best_vmin_150511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 28), 'best_vmin')
        # Getting the type of 'step' (line 1931)
        step_150512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 40), 'step')
        # Getting the type of 'nbins' (line 1931)
        nbins_150513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 47), 'nbins')
        # Applying the binary operator '*' (line 1931)
        result_mul_150514 = python_operator(stypy.reporting.localization.Localization(__file__, 1931, 40), '*', step_150512, nbins_150513)
        
        # Applying the binary operator '+' (line 1931)
        result_add_150515 = python_operator(stypy.reporting.localization.Localization(__file__, 1931, 28), '+', best_vmin_150511, result_mul_150514)
        
        # Assigning a type to the variable 'best_vmax' (line 1931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1931, 16), 'best_vmax', result_add_150515)
        
        
        # Getting the type of 'best_vmax' (line 1932)
        best_vmax_150516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 20), 'best_vmax')
        # Getting the type of '_vmax' (line 1932)
        _vmax_150517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 33), '_vmax')
        # Applying the binary operator '>=' (line 1932)
        result_ge_150518 = python_operator(stypy.reporting.localization.Localization(__file__, 1932, 20), '>=', best_vmax_150516, _vmax_150517)
        
        # Testing the type of an if condition (line 1932)
        if_condition_150519 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1932, 16), result_ge_150518)
        # Assigning a type to the variable 'if_condition_150519' (line 1932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1932, 16), 'if_condition_150519', if_condition_150519)
        # SSA begins for if statement (line 1932)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1932)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1927)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to range(...): (line 1936)
        # Processing the call arguments (line 1936)
        # Getting the type of 'istep' (line 1936)
        istep_150521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 23), 'istep', False)
        # Processing the call keyword arguments (line 1936)
        kwargs_150522 = {}
        # Getting the type of 'range' (line 1936)
        range_150520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 17), 'range', False)
        # Calling range(args, kwargs) (line 1936)
        range_call_result_150523 = invoke(stypy.reporting.localization.Localization(__file__, 1936, 17), range_150520, *[istep_150521], **kwargs_150522)
        
        # Testing the type of a for loop iterable (line 1936)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1936, 8), range_call_result_150523)
        # Getting the type of the for loop variable (line 1936)
        for_loop_var_150524 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1936, 8), range_call_result_150523)
        # Assigning a type to the variable 'i' (line 1936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 8), 'i', for_loop_var_150524)
        # SSA begins for a for statement (line 1936)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 1937):
        
        # Assigning a Subscript to a Name (line 1937):
        
        # Obtaining the type of the subscript
        # Getting the type of 'istep' (line 1937)
        istep_150525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 25), 'istep')
        # Getting the type of 'i' (line 1937)
        i_150526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 33), 'i')
        # Applying the binary operator '-' (line 1937)
        result_sub_150527 = python_operator(stypy.reporting.localization.Localization(__file__, 1937, 25), '-', istep_150525, i_150526)
        
        # Getting the type of 'steps' (line 1937)
        steps_150528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 19), 'steps')
        # Obtaining the member '__getitem__' of a type (line 1937)
        getitem___150529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 19), steps_150528, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1937)
        subscript_call_result_150530 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 19), getitem___150529, result_sub_150527)
        
        # Assigning a type to the variable 'step' (line 1937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1937, 12), 'step', subscript_call_result_150530)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 1938)
        self_150531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 16), 'self')
        # Obtaining the member '_integer' of a type (line 1938)
        _integer_150532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1938, 16), self_150531, '_integer')
        
        
        # Call to floor(...): (line 1939)
        # Processing the call arguments (line 1939)
        # Getting the type of '_vmax' (line 1939)
        _vmax_150535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 29), '_vmax', False)
        # Processing the call keyword arguments (line 1939)
        kwargs_150536 = {}
        # Getting the type of 'np' (line 1939)
        np_150533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 20), 'np', False)
        # Obtaining the member 'floor' of a type (line 1939)
        floor_150534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1939, 20), np_150533, 'floor')
        # Calling floor(args, kwargs) (line 1939)
        floor_call_result_150537 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 20), floor_150534, *[_vmax_150535], **kwargs_150536)
        
        
        # Call to ceil(...): (line 1939)
        # Processing the call arguments (line 1939)
        # Getting the type of '_vmin' (line 1939)
        _vmin_150540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 46), '_vmin', False)
        # Processing the call keyword arguments (line 1939)
        kwargs_150541 = {}
        # Getting the type of 'np' (line 1939)
        np_150538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 38), 'np', False)
        # Obtaining the member 'ceil' of a type (line 1939)
        ceil_150539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1939, 38), np_150538, 'ceil')
        # Calling ceil(args, kwargs) (line 1939)
        ceil_call_result_150542 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 38), ceil_150539, *[_vmin_150540], **kwargs_150541)
        
        # Applying the binary operator '-' (line 1939)
        result_sub_150543 = python_operator(stypy.reporting.localization.Localization(__file__, 1939, 20), '-', floor_call_result_150537, ceil_call_result_150542)
        
        # Getting the type of 'self' (line 1939)
        self_150544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 56), 'self')
        # Obtaining the member '_min_n_ticks' of a type (line 1939)
        _min_n_ticks_150545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1939, 56), self_150544, '_min_n_ticks')
        int_150546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1939, 76), 'int')
        # Applying the binary operator '-' (line 1939)
        result_sub_150547 = python_operator(stypy.reporting.localization.Localization(__file__, 1939, 56), '-', _min_n_ticks_150545, int_150546)
        
        # Applying the binary operator '>=' (line 1939)
        result_ge_150548 = python_operator(stypy.reporting.localization.Localization(__file__, 1939, 20), '>=', result_sub_150543, result_sub_150547)
        
        # Applying the binary operator 'and' (line 1938)
        result_and_keyword_150549 = python_operator(stypy.reporting.localization.Localization(__file__, 1938, 16), 'and', _integer_150532, result_ge_150548)
        
        # Testing the type of an if condition (line 1938)
        if_condition_150550 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1938, 12), result_and_keyword_150549)
        # Assigning a type to the variable 'if_condition_150550' (line 1938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1938, 12), 'if_condition_150550', if_condition_150550)
        # SSA begins for if statement (line 1938)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1940):
        
        # Assigning a Call to a Name (line 1940):
        
        # Call to max(...): (line 1940)
        # Processing the call arguments (line 1940)
        int_150552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1940, 27), 'int')
        # Getting the type of 'step' (line 1940)
        step_150553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 30), 'step', False)
        # Processing the call keyword arguments (line 1940)
        kwargs_150554 = {}
        # Getting the type of 'max' (line 1940)
        max_150551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 23), 'max', False)
        # Calling max(args, kwargs) (line 1940)
        max_call_result_150555 = invoke(stypy.reporting.localization.Localization(__file__, 1940, 23), max_150551, *[int_150552, step_150553], **kwargs_150554)
        
        # Assigning a type to the variable 'step' (line 1940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1940, 16), 'step', max_call_result_150555)
        # SSA join for if statement (line 1938)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1941):
        
        # Assigning a BinOp to a Name (line 1941):
        # Getting the type of '_vmin' (line 1941)
        _vmin_150556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 25), '_vmin')
        # Getting the type of 'step' (line 1941)
        step_150557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 34), 'step')
        # Applying the binary operator '//' (line 1941)
        result_floordiv_150558 = python_operator(stypy.reporting.localization.Localization(__file__, 1941, 25), '//', _vmin_150556, step_150557)
        
        # Getting the type of 'step' (line 1941)
        step_150559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 42), 'step')
        # Applying the binary operator '*' (line 1941)
        result_mul_150560 = python_operator(stypy.reporting.localization.Localization(__file__, 1941, 24), '*', result_floordiv_150558, step_150559)
        
        # Assigning a type to the variable 'best_vmin' (line 1941)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1941, 12), 'best_vmin', result_mul_150560)
        
        # Assigning a Call to a Name (line 1943):
        
        # Assigning a Call to a Name (line 1943):
        
        # Call to round(...): (line 1943)
        # Processing the call arguments (line 1943)
        
        # Call to le(...): (line 1943)
        # Processing the call arguments (line 1943)
        # Getting the type of '_vmin' (line 1943)
        _vmin_150568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 41), '_vmin', False)
        # Getting the type of 'best_vmin' (line 1943)
        best_vmin_150569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 49), 'best_vmin', False)
        # Applying the binary operator '-' (line 1943)
        result_sub_150570 = python_operator(stypy.reporting.localization.Localization(__file__, 1943, 41), '-', _vmin_150568, best_vmin_150569)
        
        # Processing the call keyword arguments (line 1943)
        kwargs_150571 = {}
        
        # Call to Base(...): (line 1943)
        # Processing the call arguments (line 1943)
        # Getting the type of 'step' (line 1943)
        step_150564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 32), 'step', False)
        # Processing the call keyword arguments (line 1943)
        kwargs_150565 = {}
        # Getting the type of 'Base' (line 1943)
        Base_150563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 27), 'Base', False)
        # Calling Base(args, kwargs) (line 1943)
        Base_call_result_150566 = invoke(stypy.reporting.localization.Localization(__file__, 1943, 27), Base_150563, *[step_150564], **kwargs_150565)
        
        # Obtaining the member 'le' of a type (line 1943)
        le_150567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1943, 27), Base_call_result_150566, 'le')
        # Calling le(args, kwargs) (line 1943)
        le_call_result_150572 = invoke(stypy.reporting.localization.Localization(__file__, 1943, 27), le_150567, *[result_sub_150570], **kwargs_150571)
        
        # Getting the type of 'step' (line 1943)
        step_150573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 62), 'step', False)
        # Applying the binary operator 'div' (line 1943)
        result_div_150574 = python_operator(stypy.reporting.localization.Localization(__file__, 1943, 27), 'div', le_call_result_150572, step_150573)
        
        # Processing the call keyword arguments (line 1943)
        kwargs_150575 = {}
        # Getting the type of 'np' (line 1943)
        np_150561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 18), 'np', False)
        # Obtaining the member 'round' of a type (line 1943)
        round_150562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1943, 18), np_150561, 'round')
        # Calling round(args, kwargs) (line 1943)
        round_call_result_150576 = invoke(stypy.reporting.localization.Localization(__file__, 1943, 18), round_150562, *[result_div_150574], **kwargs_150575)
        
        # Assigning a type to the variable 'low' (line 1943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1943, 12), 'low', round_call_result_150576)
        
        # Assigning a Call to a Name (line 1944):
        
        # Assigning a Call to a Name (line 1944):
        
        # Call to round(...): (line 1944)
        # Processing the call arguments (line 1944)
        
        # Call to ge(...): (line 1944)
        # Processing the call arguments (line 1944)
        # Getting the type of '_vmax' (line 1944)
        _vmax_150584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 42), '_vmax', False)
        # Getting the type of 'best_vmin' (line 1944)
        best_vmin_150585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 50), 'best_vmin', False)
        # Applying the binary operator '-' (line 1944)
        result_sub_150586 = python_operator(stypy.reporting.localization.Localization(__file__, 1944, 42), '-', _vmax_150584, best_vmin_150585)
        
        # Processing the call keyword arguments (line 1944)
        kwargs_150587 = {}
        
        # Call to Base(...): (line 1944)
        # Processing the call arguments (line 1944)
        # Getting the type of 'step' (line 1944)
        step_150580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 33), 'step', False)
        # Processing the call keyword arguments (line 1944)
        kwargs_150581 = {}
        # Getting the type of 'Base' (line 1944)
        Base_150579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 28), 'Base', False)
        # Calling Base(args, kwargs) (line 1944)
        Base_call_result_150582 = invoke(stypy.reporting.localization.Localization(__file__, 1944, 28), Base_150579, *[step_150580], **kwargs_150581)
        
        # Obtaining the member 'ge' of a type (line 1944)
        ge_150583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1944, 28), Base_call_result_150582, 'ge')
        # Calling ge(args, kwargs) (line 1944)
        ge_call_result_150588 = invoke(stypy.reporting.localization.Localization(__file__, 1944, 28), ge_150583, *[result_sub_150586], **kwargs_150587)
        
        # Getting the type of 'step' (line 1944)
        step_150589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 63), 'step', False)
        # Applying the binary operator 'div' (line 1944)
        result_div_150590 = python_operator(stypy.reporting.localization.Localization(__file__, 1944, 28), 'div', ge_call_result_150588, step_150589)
        
        # Processing the call keyword arguments (line 1944)
        kwargs_150591 = {}
        # Getting the type of 'np' (line 1944)
        np_150577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 19), 'np', False)
        # Obtaining the member 'round' of a type (line 1944)
        round_150578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1944, 19), np_150577, 'round')
        # Calling round(args, kwargs) (line 1944)
        round_call_result_150592 = invoke(stypy.reporting.localization.Localization(__file__, 1944, 19), round_150578, *[result_div_150590], **kwargs_150591)
        
        # Assigning a type to the variable 'high' (line 1944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1944, 12), 'high', round_call_result_150592)
        
        # Assigning a BinOp to a Name (line 1945):
        
        # Assigning a BinOp to a Name (line 1945):
        
        # Call to arange(...): (line 1945)
        # Processing the call arguments (line 1945)
        # Getting the type of 'low' (line 1945)
        low_150595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 30), 'low', False)
        # Getting the type of 'high' (line 1945)
        high_150596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 35), 'high', False)
        int_150597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1945, 42), 'int')
        # Applying the binary operator '+' (line 1945)
        result_add_150598 = python_operator(stypy.reporting.localization.Localization(__file__, 1945, 35), '+', high_150596, int_150597)
        
        # Processing the call keyword arguments (line 1945)
        kwargs_150599 = {}
        # Getting the type of 'np' (line 1945)
        np_150593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 20), 'np', False)
        # Obtaining the member 'arange' of a type (line 1945)
        arange_150594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1945, 20), np_150593, 'arange')
        # Calling arange(args, kwargs) (line 1945)
        arange_call_result_150600 = invoke(stypy.reporting.localization.Localization(__file__, 1945, 20), arange_150594, *[low_150595, result_add_150598], **kwargs_150599)
        
        # Getting the type of 'step' (line 1945)
        step_150601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 47), 'step')
        # Applying the binary operator '*' (line 1945)
        result_mul_150602 = python_operator(stypy.reporting.localization.Localization(__file__, 1945, 20), '*', arange_call_result_150600, step_150601)
        
        # Getting the type of 'best_vmin' (line 1945)
        best_vmin_150603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 54), 'best_vmin')
        # Applying the binary operator '+' (line 1945)
        result_add_150604 = python_operator(stypy.reporting.localization.Localization(__file__, 1945, 20), '+', result_mul_150602, best_vmin_150603)
        
        # Getting the type of 'offset' (line 1945)
        offset_150605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 66), 'offset')
        # Applying the binary operator '+' (line 1945)
        result_add_150606 = python_operator(stypy.reporting.localization.Localization(__file__, 1945, 64), '+', result_add_150604, offset_150605)
        
        # Assigning a type to the variable 'ticks' (line 1945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1945, 12), 'ticks', result_add_150606)
        
        # Assigning a Call to a Name (line 1946):
        
        # Assigning a Call to a Name (line 1946):
        
        # Call to sum(...): (line 1946)
        # Processing the call keyword arguments (line 1946)
        kwargs_150615 = {}
        
        # Getting the type of 'ticks' (line 1946)
        ticks_150607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 23), 'ticks', False)
        # Getting the type of 'vmax' (line 1946)
        vmax_150608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 32), 'vmax', False)
        # Applying the binary operator '<=' (line 1946)
        result_le_150609 = python_operator(stypy.reporting.localization.Localization(__file__, 1946, 23), '<=', ticks_150607, vmax_150608)
        
        
        # Getting the type of 'ticks' (line 1946)
        ticks_150610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 41), 'ticks', False)
        # Getting the type of 'vmin' (line 1946)
        vmin_150611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 50), 'vmin', False)
        # Applying the binary operator '>=' (line 1946)
        result_ge_150612 = python_operator(stypy.reporting.localization.Localization(__file__, 1946, 41), '>=', ticks_150610, vmin_150611)
        
        # Applying the binary operator '&' (line 1946)
        result_and__150613 = python_operator(stypy.reporting.localization.Localization(__file__, 1946, 22), '&', result_le_150609, result_ge_150612)
        
        # Obtaining the member 'sum' of a type (line 1946)
        sum_150614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1946, 22), result_and__150613, 'sum')
        # Calling sum(args, kwargs) (line 1946)
        sum_call_result_150616 = invoke(stypy.reporting.localization.Localization(__file__, 1946, 22), sum_150614, *[], **kwargs_150615)
        
        # Assigning a type to the variable 'nticks' (line 1946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1946, 12), 'nticks', sum_call_result_150616)
        
        
        # Getting the type of 'nticks' (line 1947)
        nticks_150617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 15), 'nticks')
        # Getting the type of 'self' (line 1947)
        self_150618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 25), 'self')
        # Obtaining the member '_min_n_ticks' of a type (line 1947)
        _min_n_ticks_150619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1947, 25), self_150618, '_min_n_ticks')
        # Applying the binary operator '>=' (line 1947)
        result_ge_150620 = python_operator(stypy.reporting.localization.Localization(__file__, 1947, 15), '>=', nticks_150617, _min_n_ticks_150619)
        
        # Testing the type of an if condition (line 1947)
        if_condition_150621 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1947, 12), result_ge_150620)
        # Assigning a type to the variable 'if_condition_150621' (line 1947)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1947, 12), 'if_condition_150621', if_condition_150621)
        # SSA begins for if statement (line 1947)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1947)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'ticks' (line 1949)
        ticks_150622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 15), 'ticks')
        # Assigning a type to the variable 'stypy_return_type' (line 1949)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1949, 8), 'stypy_return_type', ticks_150622)
        
        # ################# End of '_raw_ticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_raw_ticks' in the type store
        # Getting the type of 'stypy_return_type' (line 1904)
        stypy_return_type_150623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_150623)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_raw_ticks'
        return stypy_return_type_150623


    @norecursion
    def bin_boundaries(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'bin_boundaries'
        module_type_store = module_type_store.open_function_context('bin_boundaries', 1951, 4, False)
        # Assigning a type to the variable 'self' (line 1952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaxNLocator.bin_boundaries.__dict__.__setitem__('stypy_localization', localization)
        MaxNLocator.bin_boundaries.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaxNLocator.bin_boundaries.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaxNLocator.bin_boundaries.__dict__.__setitem__('stypy_function_name', 'MaxNLocator.bin_boundaries')
        MaxNLocator.bin_boundaries.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        MaxNLocator.bin_boundaries.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaxNLocator.bin_boundaries.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaxNLocator.bin_boundaries.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaxNLocator.bin_boundaries.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaxNLocator.bin_boundaries.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaxNLocator.bin_boundaries.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaxNLocator.bin_boundaries', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'bin_boundaries', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'bin_boundaries(...)' code ##################

        
        # Call to _raw_ticks(...): (line 1953)
        # Processing the call arguments (line 1953)
        # Getting the type of 'vmin' (line 1953)
        vmin_150626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 31), 'vmin', False)
        # Getting the type of 'vmax' (line 1953)
        vmax_150627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 37), 'vmax', False)
        # Processing the call keyword arguments (line 1953)
        kwargs_150628 = {}
        # Getting the type of 'self' (line 1953)
        self_150624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 15), 'self', False)
        # Obtaining the member '_raw_ticks' of a type (line 1953)
        _raw_ticks_150625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1953, 15), self_150624, '_raw_ticks')
        # Calling _raw_ticks(args, kwargs) (line 1953)
        _raw_ticks_call_result_150629 = invoke(stypy.reporting.localization.Localization(__file__, 1953, 15), _raw_ticks_150625, *[vmin_150626, vmax_150627], **kwargs_150628)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1953, 8), 'stypy_return_type', _raw_ticks_call_result_150629)
        
        # ################# End of 'bin_boundaries(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'bin_boundaries' in the type store
        # Getting the type of 'stypy_return_type' (line 1951)
        stypy_return_type_150630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1951, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_150630)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'bin_boundaries'
        return stypy_return_type_150630


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1955, 4, False)
        # Assigning a type to the variable 'self' (line 1956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1956, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaxNLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        MaxNLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaxNLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaxNLocator.__call__.__dict__.__setitem__('stypy_function_name', 'MaxNLocator.__call__')
        MaxNLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        MaxNLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaxNLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaxNLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaxNLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaxNLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaxNLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaxNLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Assigning a Call to a Tuple (line 1956):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 1956)
        # Processing the call keyword arguments (line 1956)
        kwargs_150634 = {}
        # Getting the type of 'self' (line 1956)
        self_150631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 1956)
        axis_150632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1956, 21), self_150631, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 1956)
        get_view_interval_150633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1956, 21), axis_150632, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 1956)
        get_view_interval_call_result_150635 = invoke(stypy.reporting.localization.Localization(__file__, 1956, 21), get_view_interval_150633, *[], **kwargs_150634)
        
        # Assigning a type to the variable 'call_assignment_146328' (line 1956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1956, 8), 'call_assignment_146328', get_view_interval_call_result_150635)
        
        # Assigning a Call to a Name (line 1956):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_150638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1956, 8), 'int')
        # Processing the call keyword arguments
        kwargs_150639 = {}
        # Getting the type of 'call_assignment_146328' (line 1956)
        call_assignment_146328_150636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 8), 'call_assignment_146328', False)
        # Obtaining the member '__getitem__' of a type (line 1956)
        getitem___150637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1956, 8), call_assignment_146328_150636, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_150640 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___150637, *[int_150638], **kwargs_150639)
        
        # Assigning a type to the variable 'call_assignment_146329' (line 1956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1956, 8), 'call_assignment_146329', getitem___call_result_150640)
        
        # Assigning a Name to a Name (line 1956):
        # Getting the type of 'call_assignment_146329' (line 1956)
        call_assignment_146329_150641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 8), 'call_assignment_146329')
        # Assigning a type to the variable 'vmin' (line 1956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1956, 8), 'vmin', call_assignment_146329_150641)
        
        # Assigning a Call to a Name (line 1956):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_150644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1956, 8), 'int')
        # Processing the call keyword arguments
        kwargs_150645 = {}
        # Getting the type of 'call_assignment_146328' (line 1956)
        call_assignment_146328_150642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 8), 'call_assignment_146328', False)
        # Obtaining the member '__getitem__' of a type (line 1956)
        getitem___150643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1956, 8), call_assignment_146328_150642, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_150646 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___150643, *[int_150644], **kwargs_150645)
        
        # Assigning a type to the variable 'call_assignment_146330' (line 1956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1956, 8), 'call_assignment_146330', getitem___call_result_150646)
        
        # Assigning a Name to a Name (line 1956):
        # Getting the type of 'call_assignment_146330' (line 1956)
        call_assignment_146330_150647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 8), 'call_assignment_146330')
        # Assigning a type to the variable 'vmax' (line 1956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1956, 14), 'vmax', call_assignment_146330_150647)
        
        # Call to tick_values(...): (line 1957)
        # Processing the call arguments (line 1957)
        # Getting the type of 'vmin' (line 1957)
        vmin_150650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1957, 32), 'vmin', False)
        # Getting the type of 'vmax' (line 1957)
        vmax_150651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1957, 38), 'vmax', False)
        # Processing the call keyword arguments (line 1957)
        kwargs_150652 = {}
        # Getting the type of 'self' (line 1957)
        self_150648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1957, 15), 'self', False)
        # Obtaining the member 'tick_values' of a type (line 1957)
        tick_values_150649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1957, 15), self_150648, 'tick_values')
        # Calling tick_values(args, kwargs) (line 1957)
        tick_values_call_result_150653 = invoke(stypy.reporting.localization.Localization(__file__, 1957, 15), tick_values_150649, *[vmin_150650, vmax_150651], **kwargs_150652)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1957, 8), 'stypy_return_type', tick_values_call_result_150653)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1955)
        stypy_return_type_150654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1955, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_150654)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_150654


    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 1959, 4, False)
        # Assigning a type to the variable 'self' (line 1960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1960, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaxNLocator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        MaxNLocator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaxNLocator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaxNLocator.tick_values.__dict__.__setitem__('stypy_function_name', 'MaxNLocator.tick_values')
        MaxNLocator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        MaxNLocator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaxNLocator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaxNLocator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaxNLocator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaxNLocator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaxNLocator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaxNLocator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        
        # Getting the type of 'self' (line 1960)
        self_150655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 11), 'self')
        # Obtaining the member '_symmetric' of a type (line 1960)
        _symmetric_150656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1960, 11), self_150655, '_symmetric')
        # Testing the type of an if condition (line 1960)
        if_condition_150657 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1960, 8), _symmetric_150656)
        # Assigning a type to the variable 'if_condition_150657' (line 1960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1960, 8), 'if_condition_150657', if_condition_150657)
        # SSA begins for if statement (line 1960)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1961):
        
        # Assigning a Call to a Name (line 1961):
        
        # Call to max(...): (line 1961)
        # Processing the call arguments (line 1961)
        
        # Call to abs(...): (line 1961)
        # Processing the call arguments (line 1961)
        # Getting the type of 'vmin' (line 1961)
        vmin_150660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 27), 'vmin', False)
        # Processing the call keyword arguments (line 1961)
        kwargs_150661 = {}
        # Getting the type of 'abs' (line 1961)
        abs_150659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 23), 'abs', False)
        # Calling abs(args, kwargs) (line 1961)
        abs_call_result_150662 = invoke(stypy.reporting.localization.Localization(__file__, 1961, 23), abs_150659, *[vmin_150660], **kwargs_150661)
        
        
        # Call to abs(...): (line 1961)
        # Processing the call arguments (line 1961)
        # Getting the type of 'vmax' (line 1961)
        vmax_150664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 38), 'vmax', False)
        # Processing the call keyword arguments (line 1961)
        kwargs_150665 = {}
        # Getting the type of 'abs' (line 1961)
        abs_150663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 34), 'abs', False)
        # Calling abs(args, kwargs) (line 1961)
        abs_call_result_150666 = invoke(stypy.reporting.localization.Localization(__file__, 1961, 34), abs_150663, *[vmax_150664], **kwargs_150665)
        
        # Processing the call keyword arguments (line 1961)
        kwargs_150667 = {}
        # Getting the type of 'max' (line 1961)
        max_150658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 19), 'max', False)
        # Calling max(args, kwargs) (line 1961)
        max_call_result_150668 = invoke(stypy.reporting.localization.Localization(__file__, 1961, 19), max_150658, *[abs_call_result_150662, abs_call_result_150666], **kwargs_150667)
        
        # Assigning a type to the variable 'vmax' (line 1961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1961, 12), 'vmax', max_call_result_150668)
        
        # Assigning a UnaryOp to a Name (line 1962):
        
        # Assigning a UnaryOp to a Name (line 1962):
        
        # Getting the type of 'vmax' (line 1962)
        vmax_150669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 20), 'vmax')
        # Applying the 'usub' unary operator (line 1962)
        result___neg___150670 = python_operator(stypy.reporting.localization.Localization(__file__, 1962, 19), 'usub', vmax_150669)
        
        # Assigning a type to the variable 'vmin' (line 1962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1962, 12), 'vmin', result___neg___150670)
        # SSA join for if statement (line 1960)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1963):
        
        # Assigning a Call to a Name:
        
        # Call to nonsingular(...): (line 1963)
        # Processing the call arguments (line 1963)
        # Getting the type of 'vmin' (line 1964)
        vmin_150673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 12), 'vmin', False)
        # Getting the type of 'vmax' (line 1964)
        vmax_150674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 18), 'vmax', False)
        # Processing the call keyword arguments (line 1963)
        float_150675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1964, 33), 'float')
        keyword_150676 = float_150675
        float_150677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1964, 45), 'float')
        keyword_150678 = float_150677
        kwargs_150679 = {'expander': keyword_150676, 'tiny': keyword_150678}
        # Getting the type of 'mtransforms' (line 1963)
        mtransforms_150671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 21), 'mtransforms', False)
        # Obtaining the member 'nonsingular' of a type (line 1963)
        nonsingular_150672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 21), mtransforms_150671, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 1963)
        nonsingular_call_result_150680 = invoke(stypy.reporting.localization.Localization(__file__, 1963, 21), nonsingular_150672, *[vmin_150673, vmax_150674], **kwargs_150679)
        
        # Assigning a type to the variable 'call_assignment_146331' (line 1963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'call_assignment_146331', nonsingular_call_result_150680)
        
        # Assigning a Call to a Name (line 1963):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_150683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1963, 8), 'int')
        # Processing the call keyword arguments
        kwargs_150684 = {}
        # Getting the type of 'call_assignment_146331' (line 1963)
        call_assignment_146331_150681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'call_assignment_146331', False)
        # Obtaining the member '__getitem__' of a type (line 1963)
        getitem___150682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 8), call_assignment_146331_150681, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_150685 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___150682, *[int_150683], **kwargs_150684)
        
        # Assigning a type to the variable 'call_assignment_146332' (line 1963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'call_assignment_146332', getitem___call_result_150685)
        
        # Assigning a Name to a Name (line 1963):
        # Getting the type of 'call_assignment_146332' (line 1963)
        call_assignment_146332_150686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'call_assignment_146332')
        # Assigning a type to the variable 'vmin' (line 1963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'vmin', call_assignment_146332_150686)
        
        # Assigning a Call to a Name (line 1963):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_150689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1963, 8), 'int')
        # Processing the call keyword arguments
        kwargs_150690 = {}
        # Getting the type of 'call_assignment_146331' (line 1963)
        call_assignment_146331_150687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'call_assignment_146331', False)
        # Obtaining the member '__getitem__' of a type (line 1963)
        getitem___150688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 8), call_assignment_146331_150687, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_150691 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___150688, *[int_150689], **kwargs_150690)
        
        # Assigning a type to the variable 'call_assignment_146333' (line 1963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'call_assignment_146333', getitem___call_result_150691)
        
        # Assigning a Name to a Name (line 1963):
        # Getting the type of 'call_assignment_146333' (line 1963)
        call_assignment_146333_150692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'call_assignment_146333')
        # Assigning a type to the variable 'vmax' (line 1963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 14), 'vmax', call_assignment_146333_150692)
        
        # Assigning a Call to a Name (line 1965):
        
        # Assigning a Call to a Name (line 1965):
        
        # Call to _raw_ticks(...): (line 1965)
        # Processing the call arguments (line 1965)
        # Getting the type of 'vmin' (line 1965)
        vmin_150695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 31), 'vmin', False)
        # Getting the type of 'vmax' (line 1965)
        vmax_150696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 37), 'vmax', False)
        # Processing the call keyword arguments (line 1965)
        kwargs_150697 = {}
        # Getting the type of 'self' (line 1965)
        self_150693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 15), 'self', False)
        # Obtaining the member '_raw_ticks' of a type (line 1965)
        _raw_ticks_150694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1965, 15), self_150693, '_raw_ticks')
        # Calling _raw_ticks(args, kwargs) (line 1965)
        _raw_ticks_call_result_150698 = invoke(stypy.reporting.localization.Localization(__file__, 1965, 15), _raw_ticks_150694, *[vmin_150695, vmax_150696], **kwargs_150697)
        
        # Assigning a type to the variable 'locs' (line 1965)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1965, 8), 'locs', _raw_ticks_call_result_150698)
        
        # Assigning a Attribute to a Name (line 1967):
        
        # Assigning a Attribute to a Name (line 1967):
        # Getting the type of 'self' (line 1967)
        self_150699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 16), 'self')
        # Obtaining the member '_prune' of a type (line 1967)
        _prune_150700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1967, 16), self_150699, '_prune')
        # Assigning a type to the variable 'prune' (line 1967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1967, 8), 'prune', _prune_150700)
        
        
        # Getting the type of 'prune' (line 1968)
        prune_150701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 11), 'prune')
        unicode_150702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1968, 20), 'unicode', u'lower')
        # Applying the binary operator '==' (line 1968)
        result_eq_150703 = python_operator(stypy.reporting.localization.Localization(__file__, 1968, 11), '==', prune_150701, unicode_150702)
        
        # Testing the type of an if condition (line 1968)
        if_condition_150704 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1968, 8), result_eq_150703)
        # Assigning a type to the variable 'if_condition_150704' (line 1968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1968, 8), 'if_condition_150704', if_condition_150704)
        # SSA begins for if statement (line 1968)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1969):
        
        # Assigning a Subscript to a Name (line 1969):
        
        # Obtaining the type of the subscript
        int_150705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1969, 24), 'int')
        slice_150706 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1969, 19), int_150705, None, None)
        # Getting the type of 'locs' (line 1969)
        locs_150707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 19), 'locs')
        # Obtaining the member '__getitem__' of a type (line 1969)
        getitem___150708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1969, 19), locs_150707, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1969)
        subscript_call_result_150709 = invoke(stypy.reporting.localization.Localization(__file__, 1969, 19), getitem___150708, slice_150706)
        
        # Assigning a type to the variable 'locs' (line 1969)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1969, 12), 'locs', subscript_call_result_150709)
        # SSA branch for the else part of an if statement (line 1968)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'prune' (line 1970)
        prune_150710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 13), 'prune')
        unicode_150711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1970, 22), 'unicode', u'upper')
        # Applying the binary operator '==' (line 1970)
        result_eq_150712 = python_operator(stypy.reporting.localization.Localization(__file__, 1970, 13), '==', prune_150710, unicode_150711)
        
        # Testing the type of an if condition (line 1970)
        if_condition_150713 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1970, 13), result_eq_150712)
        # Assigning a type to the variable 'if_condition_150713' (line 1970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 13), 'if_condition_150713', if_condition_150713)
        # SSA begins for if statement (line 1970)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1971):
        
        # Assigning a Subscript to a Name (line 1971):
        
        # Obtaining the type of the subscript
        int_150714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1971, 25), 'int')
        slice_150715 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1971, 19), None, int_150714, None)
        # Getting the type of 'locs' (line 1971)
        locs_150716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 19), 'locs')
        # Obtaining the member '__getitem__' of a type (line 1971)
        getitem___150717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1971, 19), locs_150716, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1971)
        subscript_call_result_150718 = invoke(stypy.reporting.localization.Localization(__file__, 1971, 19), getitem___150717, slice_150715)
        
        # Assigning a type to the variable 'locs' (line 1971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1971, 12), 'locs', subscript_call_result_150718)
        # SSA branch for the else part of an if statement (line 1970)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'prune' (line 1972)
        prune_150719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 13), 'prune')
        unicode_150720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 22), 'unicode', u'both')
        # Applying the binary operator '==' (line 1972)
        result_eq_150721 = python_operator(stypy.reporting.localization.Localization(__file__, 1972, 13), '==', prune_150719, unicode_150720)
        
        # Testing the type of an if condition (line 1972)
        if_condition_150722 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1972, 13), result_eq_150721)
        # Assigning a type to the variable 'if_condition_150722' (line 1972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 13), 'if_condition_150722', if_condition_150722)
        # SSA begins for if statement (line 1972)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1973):
        
        # Assigning a Subscript to a Name (line 1973):
        
        # Obtaining the type of the subscript
        int_150723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 24), 'int')
        int_150724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 26), 'int')
        slice_150725 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1973, 19), int_150723, int_150724, None)
        # Getting the type of 'locs' (line 1973)
        locs_150726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 19), 'locs')
        # Obtaining the member '__getitem__' of a type (line 1973)
        getitem___150727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1973, 19), locs_150726, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1973)
        subscript_call_result_150728 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 19), getitem___150727, slice_150725)
        
        # Assigning a type to the variable 'locs' (line 1973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 12), 'locs', subscript_call_result_150728)
        # SSA join for if statement (line 1972)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1970)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1968)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to raise_if_exceeds(...): (line 1974)
        # Processing the call arguments (line 1974)
        # Getting the type of 'locs' (line 1974)
        locs_150731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 37), 'locs', False)
        # Processing the call keyword arguments (line 1974)
        kwargs_150732 = {}
        # Getting the type of 'self' (line 1974)
        self_150729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 15), 'self', False)
        # Obtaining the member 'raise_if_exceeds' of a type (line 1974)
        raise_if_exceeds_150730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1974, 15), self_150729, 'raise_if_exceeds')
        # Calling raise_if_exceeds(args, kwargs) (line 1974)
        raise_if_exceeds_call_result_150733 = invoke(stypy.reporting.localization.Localization(__file__, 1974, 15), raise_if_exceeds_150730, *[locs_150731], **kwargs_150732)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 8), 'stypy_return_type', raise_if_exceeds_call_result_150733)
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 1959)
        stypy_return_type_150734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_150734)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_150734


    @norecursion
    def view_limits(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'view_limits'
        module_type_store = module_type_store.open_function_context('view_limits', 1976, 4, False)
        # Assigning a type to the variable 'self' (line 1977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1977, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaxNLocator.view_limits.__dict__.__setitem__('stypy_localization', localization)
        MaxNLocator.view_limits.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaxNLocator.view_limits.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaxNLocator.view_limits.__dict__.__setitem__('stypy_function_name', 'MaxNLocator.view_limits')
        MaxNLocator.view_limits.__dict__.__setitem__('stypy_param_names_list', ['dmin', 'dmax'])
        MaxNLocator.view_limits.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaxNLocator.view_limits.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaxNLocator.view_limits.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaxNLocator.view_limits.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaxNLocator.view_limits.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaxNLocator.view_limits.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaxNLocator.view_limits', ['dmin', 'dmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'view_limits', localization, ['dmin', 'dmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'view_limits(...)' code ##################

        
        # Getting the type of 'self' (line 1977)
        self_150735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 11), 'self')
        # Obtaining the member '_symmetric' of a type (line 1977)
        _symmetric_150736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1977, 11), self_150735, '_symmetric')
        # Testing the type of an if condition (line 1977)
        if_condition_150737 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1977, 8), _symmetric_150736)
        # Assigning a type to the variable 'if_condition_150737' (line 1977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1977, 8), 'if_condition_150737', if_condition_150737)
        # SSA begins for if statement (line 1977)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1978):
        
        # Assigning a Call to a Name (line 1978):
        
        # Call to max(...): (line 1978)
        # Processing the call arguments (line 1978)
        
        # Call to abs(...): (line 1978)
        # Processing the call arguments (line 1978)
        # Getting the type of 'dmin' (line 1978)
        dmin_150740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 27), 'dmin', False)
        # Processing the call keyword arguments (line 1978)
        kwargs_150741 = {}
        # Getting the type of 'abs' (line 1978)
        abs_150739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 23), 'abs', False)
        # Calling abs(args, kwargs) (line 1978)
        abs_call_result_150742 = invoke(stypy.reporting.localization.Localization(__file__, 1978, 23), abs_150739, *[dmin_150740], **kwargs_150741)
        
        
        # Call to abs(...): (line 1978)
        # Processing the call arguments (line 1978)
        # Getting the type of 'dmax' (line 1978)
        dmax_150744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 38), 'dmax', False)
        # Processing the call keyword arguments (line 1978)
        kwargs_150745 = {}
        # Getting the type of 'abs' (line 1978)
        abs_150743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 34), 'abs', False)
        # Calling abs(args, kwargs) (line 1978)
        abs_call_result_150746 = invoke(stypy.reporting.localization.Localization(__file__, 1978, 34), abs_150743, *[dmax_150744], **kwargs_150745)
        
        # Processing the call keyword arguments (line 1978)
        kwargs_150747 = {}
        # Getting the type of 'max' (line 1978)
        max_150738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 19), 'max', False)
        # Calling max(args, kwargs) (line 1978)
        max_call_result_150748 = invoke(stypy.reporting.localization.Localization(__file__, 1978, 19), max_150738, *[abs_call_result_150742, abs_call_result_150746], **kwargs_150747)
        
        # Assigning a type to the variable 'dmax' (line 1978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1978, 12), 'dmax', max_call_result_150748)
        
        # Assigning a UnaryOp to a Name (line 1979):
        
        # Assigning a UnaryOp to a Name (line 1979):
        
        # Getting the type of 'dmax' (line 1979)
        dmax_150749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 20), 'dmax')
        # Applying the 'usub' unary operator (line 1979)
        result___neg___150750 = python_operator(stypy.reporting.localization.Localization(__file__, 1979, 19), 'usub', dmax_150749)
        
        # Assigning a type to the variable 'dmin' (line 1979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1979, 12), 'dmin', result___neg___150750)
        # SSA join for if statement (line 1977)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1981):
        
        # Assigning a Call to a Name:
        
        # Call to nonsingular(...): (line 1981)
        # Processing the call arguments (line 1981)
        # Getting the type of 'dmin' (line 1982)
        dmin_150753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 12), 'dmin', False)
        # Getting the type of 'dmax' (line 1982)
        dmax_150754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 18), 'dmax', False)
        # Processing the call keyword arguments (line 1981)
        float_150755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1982, 33), 'float')
        keyword_150756 = float_150755
        float_150757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1982, 45), 'float')
        keyword_150758 = float_150757
        kwargs_150759 = {'expander': keyword_150756, 'tiny': keyword_150758}
        # Getting the type of 'mtransforms' (line 1981)
        mtransforms_150751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 21), 'mtransforms', False)
        # Obtaining the member 'nonsingular' of a type (line 1981)
        nonsingular_150752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1981, 21), mtransforms_150751, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 1981)
        nonsingular_call_result_150760 = invoke(stypy.reporting.localization.Localization(__file__, 1981, 21), nonsingular_150752, *[dmin_150753, dmax_150754], **kwargs_150759)
        
        # Assigning a type to the variable 'call_assignment_146334' (line 1981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1981, 8), 'call_assignment_146334', nonsingular_call_result_150760)
        
        # Assigning a Call to a Name (line 1981):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_150763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1981, 8), 'int')
        # Processing the call keyword arguments
        kwargs_150764 = {}
        # Getting the type of 'call_assignment_146334' (line 1981)
        call_assignment_146334_150761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 8), 'call_assignment_146334', False)
        # Obtaining the member '__getitem__' of a type (line 1981)
        getitem___150762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1981, 8), call_assignment_146334_150761, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_150765 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___150762, *[int_150763], **kwargs_150764)
        
        # Assigning a type to the variable 'call_assignment_146335' (line 1981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1981, 8), 'call_assignment_146335', getitem___call_result_150765)
        
        # Assigning a Name to a Name (line 1981):
        # Getting the type of 'call_assignment_146335' (line 1981)
        call_assignment_146335_150766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 8), 'call_assignment_146335')
        # Assigning a type to the variable 'dmin' (line 1981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1981, 8), 'dmin', call_assignment_146335_150766)
        
        # Assigning a Call to a Name (line 1981):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_150769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1981, 8), 'int')
        # Processing the call keyword arguments
        kwargs_150770 = {}
        # Getting the type of 'call_assignment_146334' (line 1981)
        call_assignment_146334_150767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 8), 'call_assignment_146334', False)
        # Obtaining the member '__getitem__' of a type (line 1981)
        getitem___150768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1981, 8), call_assignment_146334_150767, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_150771 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___150768, *[int_150769], **kwargs_150770)
        
        # Assigning a type to the variable 'call_assignment_146336' (line 1981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1981, 8), 'call_assignment_146336', getitem___call_result_150771)
        
        # Assigning a Name to a Name (line 1981):
        # Getting the type of 'call_assignment_146336' (line 1981)
        call_assignment_146336_150772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 8), 'call_assignment_146336')
        # Assigning a type to the variable 'dmax' (line 1981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1981, 14), 'dmax', call_assignment_146336_150772)
        
        
        
        # Obtaining the type of the subscript
        unicode_150773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1984, 20), 'unicode', u'axes.autolimit_mode')
        # Getting the type of 'rcParams' (line 1984)
        rcParams_150774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 11), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1984)
        getitem___150775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1984, 11), rcParams_150774, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1984)
        subscript_call_result_150776 = invoke(stypy.reporting.localization.Localization(__file__, 1984, 11), getitem___150775, unicode_150773)
        
        unicode_150777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1984, 46), 'unicode', u'round_numbers')
        # Applying the binary operator '==' (line 1984)
        result_eq_150778 = python_operator(stypy.reporting.localization.Localization(__file__, 1984, 11), '==', subscript_call_result_150776, unicode_150777)
        
        # Testing the type of an if condition (line 1984)
        if_condition_150779 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1984, 8), result_eq_150778)
        # Assigning a type to the variable 'if_condition_150779' (line 1984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1984, 8), 'if_condition_150779', if_condition_150779)
        # SSA begins for if statement (line 1984)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'list' (line 1985)
        list_150780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1985, 47), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1985)
        # Adding element type (line 1985)
        int_150781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1985, 48), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1985, 47), list_150780, int_150781)
        # Adding element type (line 1985)
        int_150782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1985, 51), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1985, 47), list_150780, int_150782)
        
        
        # Call to _raw_ticks(...): (line 1985)
        # Processing the call arguments (line 1985)
        # Getting the type of 'dmin' (line 1985)
        dmin_150785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 35), 'dmin', False)
        # Getting the type of 'dmax' (line 1985)
        dmax_150786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 41), 'dmax', False)
        # Processing the call keyword arguments (line 1985)
        kwargs_150787 = {}
        # Getting the type of 'self' (line 1985)
        self_150783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 19), 'self', False)
        # Obtaining the member '_raw_ticks' of a type (line 1985)
        _raw_ticks_150784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1985, 19), self_150783, '_raw_ticks')
        # Calling _raw_ticks(args, kwargs) (line 1985)
        _raw_ticks_call_result_150788 = invoke(stypy.reporting.localization.Localization(__file__, 1985, 19), _raw_ticks_150784, *[dmin_150785, dmax_150786], **kwargs_150787)
        
        # Obtaining the member '__getitem__' of a type (line 1985)
        getitem___150789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1985, 19), _raw_ticks_call_result_150788, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1985)
        subscript_call_result_150790 = invoke(stypy.reporting.localization.Localization(__file__, 1985, 19), getitem___150789, list_150780)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1985)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 12), 'stypy_return_type', subscript_call_result_150790)
        # SSA branch for the else part of an if statement (line 1984)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1987)
        tuple_150791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1987, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1987)
        # Adding element type (line 1987)
        # Getting the type of 'dmin' (line 1987)
        dmin_150792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 19), 'dmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1987, 19), tuple_150791, dmin_150792)
        # Adding element type (line 1987)
        # Getting the type of 'dmax' (line 1987)
        dmax_150793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 25), 'dmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1987, 19), tuple_150791, dmax_150793)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1987, 12), 'stypy_return_type', tuple_150791)
        # SSA join for if statement (line 1984)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'view_limits(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'view_limits' in the type store
        # Getting the type of 'stypy_return_type' (line 1976)
        stypy_return_type_150794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_150794)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'view_limits'
        return stypy_return_type_150794


# Assigning a type to the variable 'MaxNLocator' (line 1790)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 0), 'MaxNLocator', MaxNLocator)

# Assigning a Call to a Name (line 1794):

# Call to dict(...): (line 1794)
# Processing the call keyword arguments (line 1794)
int_150796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1794, 32), 'int')
keyword_150797 = int_150796
# Getting the type of 'None' (line 1795)
None_150798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 32), 'None', False)
keyword_150799 = None_150798
# Getting the type of 'False' (line 1796)
False_150800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 34), 'False', False)
keyword_150801 = False_150800
# Getting the type of 'False' (line 1797)
False_150802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 36), 'False', False)
keyword_150803 = False_150802
# Getting the type of 'None' (line 1798)
None_150804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 32), 'None', False)
keyword_150805 = None_150804
int_150806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1799, 38), 'int')
keyword_150807 = int_150806
kwargs_150808 = {'nbins': keyword_150797, 'min_n_ticks': keyword_150807, 'prune': keyword_150805, 'symmetric': keyword_150803, 'steps': keyword_150799, 'integer': keyword_150801}
# Getting the type of 'dict' (line 1794)
dict_150795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 21), 'dict', False)
# Calling dict(args, kwargs) (line 1794)
dict_call_result_150809 = invoke(stypy.reporting.localization.Localization(__file__, 1794, 21), dict_150795, *[], **kwargs_150808)

# Getting the type of 'MaxNLocator'
MaxNLocator_150810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaxNLocator')
# Setting the type of the member 'default_params' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaxNLocator_150810, 'default_params', dict_call_result_150809)

@norecursion
def decade_down(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_150811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1990, 24), 'int')
    defaults = [int_150811]
    # Create a new context for function 'decade_down'
    module_type_store = module_type_store.open_function_context('decade_down', 1990, 0, False)
    
    # Passed parameters checking function
    decade_down.stypy_localization = localization
    decade_down.stypy_type_of_self = None
    decade_down.stypy_type_store = module_type_store
    decade_down.stypy_function_name = 'decade_down'
    decade_down.stypy_param_names_list = ['x', 'base']
    decade_down.stypy_varargs_param_name = None
    decade_down.stypy_kwargs_param_name = None
    decade_down.stypy_call_defaults = defaults
    decade_down.stypy_call_varargs = varargs
    decade_down.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'decade_down', ['x', 'base'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'decade_down', localization, ['x', 'base'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'decade_down(...)' code ##################

    unicode_150812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1991, 4), 'unicode', u'floor x to the nearest lower decade')
    
    
    # Getting the type of 'x' (line 1992)
    x_150813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 7), 'x')
    float_150814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1992, 12), 'float')
    # Applying the binary operator '==' (line 1992)
    result_eq_150815 = python_operator(stypy.reporting.localization.Localization(__file__, 1992, 7), '==', x_150813, float_150814)
    
    # Testing the type of an if condition (line 1992)
    if_condition_150816 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1992, 4), result_eq_150815)
    # Assigning a type to the variable 'if_condition_150816' (line 1992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1992, 4), 'if_condition_150816', if_condition_150816)
    # SSA begins for if statement (line 1992)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'base' (line 1993)
    base_150817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 16), 'base')
    # Applying the 'usub' unary operator (line 1993)
    result___neg___150818 = python_operator(stypy.reporting.localization.Localization(__file__, 1993, 15), 'usub', base_150817)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1993)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1993, 8), 'stypy_return_type', result___neg___150818)
    # SSA join for if statement (line 1992)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1994):
    
    # Assigning a Call to a Name (line 1994):
    
    # Call to floor(...): (line 1994)
    # Processing the call arguments (line 1994)
    
    # Call to log(...): (line 1994)
    # Processing the call arguments (line 1994)
    # Getting the type of 'x' (line 1994)
    x_150823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 25), 'x', False)
    # Processing the call keyword arguments (line 1994)
    kwargs_150824 = {}
    # Getting the type of 'np' (line 1994)
    np_150821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 18), 'np', False)
    # Obtaining the member 'log' of a type (line 1994)
    log_150822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 18), np_150821, 'log')
    # Calling log(args, kwargs) (line 1994)
    log_call_result_150825 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 18), log_150822, *[x_150823], **kwargs_150824)
    
    
    # Call to log(...): (line 1994)
    # Processing the call arguments (line 1994)
    # Getting the type of 'base' (line 1994)
    base_150828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 37), 'base', False)
    # Processing the call keyword arguments (line 1994)
    kwargs_150829 = {}
    # Getting the type of 'np' (line 1994)
    np_150826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 30), 'np', False)
    # Obtaining the member 'log' of a type (line 1994)
    log_150827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 30), np_150826, 'log')
    # Calling log(args, kwargs) (line 1994)
    log_call_result_150830 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 30), log_150827, *[base_150828], **kwargs_150829)
    
    # Applying the binary operator 'div' (line 1994)
    result_div_150831 = python_operator(stypy.reporting.localization.Localization(__file__, 1994, 18), 'div', log_call_result_150825, log_call_result_150830)
    
    # Processing the call keyword arguments (line 1994)
    kwargs_150832 = {}
    # Getting the type of 'np' (line 1994)
    np_150819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 9), 'np', False)
    # Obtaining the member 'floor' of a type (line 1994)
    floor_150820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 9), np_150819, 'floor')
    # Calling floor(args, kwargs) (line 1994)
    floor_call_result_150833 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 9), floor_150820, *[result_div_150831], **kwargs_150832)
    
    # Assigning a type to the variable 'lx' (line 1994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 4), 'lx', floor_call_result_150833)
    # Getting the type of 'base' (line 1995)
    base_150834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 11), 'base')
    # Getting the type of 'lx' (line 1995)
    lx_150835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 19), 'lx')
    # Applying the binary operator '**' (line 1995)
    result_pow_150836 = python_operator(stypy.reporting.localization.Localization(__file__, 1995, 11), '**', base_150834, lx_150835)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1995, 4), 'stypy_return_type', result_pow_150836)
    
    # ################# End of 'decade_down(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'decade_down' in the type store
    # Getting the type of 'stypy_return_type' (line 1990)
    stypy_return_type_150837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150837)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'decade_down'
    return stypy_return_type_150837

# Assigning a type to the variable 'decade_down' (line 1990)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1990, 0), 'decade_down', decade_down)

@norecursion
def decade_up(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_150838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1998, 22), 'int')
    defaults = [int_150838]
    # Create a new context for function 'decade_up'
    module_type_store = module_type_store.open_function_context('decade_up', 1998, 0, False)
    
    # Passed parameters checking function
    decade_up.stypy_localization = localization
    decade_up.stypy_type_of_self = None
    decade_up.stypy_type_store = module_type_store
    decade_up.stypy_function_name = 'decade_up'
    decade_up.stypy_param_names_list = ['x', 'base']
    decade_up.stypy_varargs_param_name = None
    decade_up.stypy_kwargs_param_name = None
    decade_up.stypy_call_defaults = defaults
    decade_up.stypy_call_varargs = varargs
    decade_up.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'decade_up', ['x', 'base'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'decade_up', localization, ['x', 'base'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'decade_up(...)' code ##################

    unicode_150839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1999, 4), 'unicode', u'ceil x to the nearest higher decade')
    
    
    # Getting the type of 'x' (line 2000)
    x_150840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 7), 'x')
    float_150841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2000, 12), 'float')
    # Applying the binary operator '==' (line 2000)
    result_eq_150842 = python_operator(stypy.reporting.localization.Localization(__file__, 2000, 7), '==', x_150840, float_150841)
    
    # Testing the type of an if condition (line 2000)
    if_condition_150843 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2000, 4), result_eq_150842)
    # Assigning a type to the variable 'if_condition_150843' (line 2000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2000, 4), 'if_condition_150843', if_condition_150843)
    # SSA begins for if statement (line 2000)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'base' (line 2001)
    base_150844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 15), 'base')
    # Assigning a type to the variable 'stypy_return_type' (line 2001)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2001, 8), 'stypy_return_type', base_150844)
    # SSA join for if statement (line 2000)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2002):
    
    # Assigning a Call to a Name (line 2002):
    
    # Call to ceil(...): (line 2002)
    # Processing the call arguments (line 2002)
    
    # Call to log(...): (line 2002)
    # Processing the call arguments (line 2002)
    # Getting the type of 'x' (line 2002)
    x_150849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 24), 'x', False)
    # Processing the call keyword arguments (line 2002)
    kwargs_150850 = {}
    # Getting the type of 'np' (line 2002)
    np_150847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 17), 'np', False)
    # Obtaining the member 'log' of a type (line 2002)
    log_150848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2002, 17), np_150847, 'log')
    # Calling log(args, kwargs) (line 2002)
    log_call_result_150851 = invoke(stypy.reporting.localization.Localization(__file__, 2002, 17), log_150848, *[x_150849], **kwargs_150850)
    
    
    # Call to log(...): (line 2002)
    # Processing the call arguments (line 2002)
    # Getting the type of 'base' (line 2002)
    base_150854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 36), 'base', False)
    # Processing the call keyword arguments (line 2002)
    kwargs_150855 = {}
    # Getting the type of 'np' (line 2002)
    np_150852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 29), 'np', False)
    # Obtaining the member 'log' of a type (line 2002)
    log_150853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2002, 29), np_150852, 'log')
    # Calling log(args, kwargs) (line 2002)
    log_call_result_150856 = invoke(stypy.reporting.localization.Localization(__file__, 2002, 29), log_150853, *[base_150854], **kwargs_150855)
    
    # Applying the binary operator 'div' (line 2002)
    result_div_150857 = python_operator(stypy.reporting.localization.Localization(__file__, 2002, 17), 'div', log_call_result_150851, log_call_result_150856)
    
    # Processing the call keyword arguments (line 2002)
    kwargs_150858 = {}
    # Getting the type of 'np' (line 2002)
    np_150845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 9), 'np', False)
    # Obtaining the member 'ceil' of a type (line 2002)
    ceil_150846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2002, 9), np_150845, 'ceil')
    # Calling ceil(args, kwargs) (line 2002)
    ceil_call_result_150859 = invoke(stypy.reporting.localization.Localization(__file__, 2002, 9), ceil_150846, *[result_div_150857], **kwargs_150858)
    
    # Assigning a type to the variable 'lx' (line 2002)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2002, 4), 'lx', ceil_call_result_150859)
    # Getting the type of 'base' (line 2003)
    base_150860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 11), 'base')
    # Getting the type of 'lx' (line 2003)
    lx_150861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 19), 'lx')
    # Applying the binary operator '**' (line 2003)
    result_pow_150862 = python_operator(stypy.reporting.localization.Localization(__file__, 2003, 11), '**', base_150860, lx_150861)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2003)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2003, 4), 'stypy_return_type', result_pow_150862)
    
    # ################# End of 'decade_up(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'decade_up' in the type store
    # Getting the type of 'stypy_return_type' (line 1998)
    stypy_return_type_150863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150863)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'decade_up'
    return stypy_return_type_150863

# Assigning a type to the variable 'decade_up' (line 1998)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1998, 0), 'decade_up', decade_up)

@norecursion
def nearest_long(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'nearest_long'
    module_type_store = module_type_store.open_function_context('nearest_long', 2006, 0, False)
    
    # Passed parameters checking function
    nearest_long.stypy_localization = localization
    nearest_long.stypy_type_of_self = None
    nearest_long.stypy_type_store = module_type_store
    nearest_long.stypy_function_name = 'nearest_long'
    nearest_long.stypy_param_names_list = ['x']
    nearest_long.stypy_varargs_param_name = None
    nearest_long.stypy_kwargs_param_name = None
    nearest_long.stypy_call_defaults = defaults
    nearest_long.stypy_call_varargs = varargs
    nearest_long.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'nearest_long', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'nearest_long', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'nearest_long(...)' code ##################

    
    
    # Getting the type of 'x' (line 2007)
    x_150864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 7), 'x')
    int_150865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2007, 12), 'int')
    # Applying the binary operator '==' (line 2007)
    result_eq_150866 = python_operator(stypy.reporting.localization.Localization(__file__, 2007, 7), '==', x_150864, int_150865)
    
    # Testing the type of an if condition (line 2007)
    if_condition_150867 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2007, 4), result_eq_150866)
    # Assigning a type to the variable 'if_condition_150867' (line 2007)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2007, 4), 'if_condition_150867', if_condition_150867)
    # SSA begins for if statement (line 2007)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to long(...): (line 2008)
    # Processing the call arguments (line 2008)
    int_150869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2008, 20), 'int')
    # Processing the call keyword arguments (line 2008)
    kwargs_150870 = {}
    # Getting the type of 'long' (line 2008)
    long_150868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 15), 'long', False)
    # Calling long(args, kwargs) (line 2008)
    long_call_result_150871 = invoke(stypy.reporting.localization.Localization(__file__, 2008, 15), long_150868, *[int_150869], **kwargs_150870)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2008)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2008, 8), 'stypy_return_type', long_call_result_150871)
    # SSA branch for the else part of an if statement (line 2007)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'x' (line 2009)
    x_150872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 9), 'x')
    int_150873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2009, 13), 'int')
    # Applying the binary operator '>' (line 2009)
    result_gt_150874 = python_operator(stypy.reporting.localization.Localization(__file__, 2009, 9), '>', x_150872, int_150873)
    
    # Testing the type of an if condition (line 2009)
    if_condition_150875 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2009, 9), result_gt_150874)
    # Assigning a type to the variable 'if_condition_150875' (line 2009)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2009, 9), 'if_condition_150875', if_condition_150875)
    # SSA begins for if statement (line 2009)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to long(...): (line 2010)
    # Processing the call arguments (line 2010)
    # Getting the type of 'x' (line 2010)
    x_150877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 20), 'x', False)
    float_150878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2010, 24), 'float')
    # Applying the binary operator '+' (line 2010)
    result_add_150879 = python_operator(stypy.reporting.localization.Localization(__file__, 2010, 20), '+', x_150877, float_150878)
    
    # Processing the call keyword arguments (line 2010)
    kwargs_150880 = {}
    # Getting the type of 'long' (line 2010)
    long_150876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 15), 'long', False)
    # Calling long(args, kwargs) (line 2010)
    long_call_result_150881 = invoke(stypy.reporting.localization.Localization(__file__, 2010, 15), long_150876, *[result_add_150879], **kwargs_150880)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2010)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2010, 8), 'stypy_return_type', long_call_result_150881)
    # SSA branch for the else part of an if statement (line 2009)
    module_type_store.open_ssa_branch('else')
    
    # Call to long(...): (line 2012)
    # Processing the call arguments (line 2012)
    # Getting the type of 'x' (line 2012)
    x_150883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 20), 'x', False)
    float_150884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2012, 24), 'float')
    # Applying the binary operator '-' (line 2012)
    result_sub_150885 = python_operator(stypy.reporting.localization.Localization(__file__, 2012, 20), '-', x_150883, float_150884)
    
    # Processing the call keyword arguments (line 2012)
    kwargs_150886 = {}
    # Getting the type of 'long' (line 2012)
    long_150882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 15), 'long', False)
    # Calling long(args, kwargs) (line 2012)
    long_call_result_150887 = invoke(stypy.reporting.localization.Localization(__file__, 2012, 15), long_150882, *[result_sub_150885], **kwargs_150886)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2012)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2012, 8), 'stypy_return_type', long_call_result_150887)
    # SSA join for if statement (line 2009)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2007)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'nearest_long(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'nearest_long' in the type store
    # Getting the type of 'stypy_return_type' (line 2006)
    stypy_return_type_150888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150888)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'nearest_long'
    return stypy_return_type_150888

# Assigning a type to the variable 'nearest_long' (line 2006)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2006, 0), 'nearest_long', nearest_long)

@norecursion
def is_decade(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_150889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2015, 22), 'int')
    defaults = [int_150889]
    # Create a new context for function 'is_decade'
    module_type_store = module_type_store.open_function_context('is_decade', 2015, 0, False)
    
    # Passed parameters checking function
    is_decade.stypy_localization = localization
    is_decade.stypy_type_of_self = None
    is_decade.stypy_type_store = module_type_store
    is_decade.stypy_function_name = 'is_decade'
    is_decade.stypy_param_names_list = ['x', 'base']
    is_decade.stypy_varargs_param_name = None
    is_decade.stypy_kwargs_param_name = None
    is_decade.stypy_call_defaults = defaults
    is_decade.stypy_call_varargs = varargs
    is_decade.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_decade', ['x', 'base'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_decade', localization, ['x', 'base'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_decade(...)' code ##################

    
    
    
    # Call to isfinite(...): (line 2016)
    # Processing the call arguments (line 2016)
    # Getting the type of 'x' (line 2016)
    x_150892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 23), 'x', False)
    # Processing the call keyword arguments (line 2016)
    kwargs_150893 = {}
    # Getting the type of 'np' (line 2016)
    np_150890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 11), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 2016)
    isfinite_150891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2016, 11), np_150890, 'isfinite')
    # Calling isfinite(args, kwargs) (line 2016)
    isfinite_call_result_150894 = invoke(stypy.reporting.localization.Localization(__file__, 2016, 11), isfinite_150891, *[x_150892], **kwargs_150893)
    
    # Applying the 'not' unary operator (line 2016)
    result_not__150895 = python_operator(stypy.reporting.localization.Localization(__file__, 2016, 7), 'not', isfinite_call_result_150894)
    
    # Testing the type of an if condition (line 2016)
    if_condition_150896 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2016, 4), result_not__150895)
    # Assigning a type to the variable 'if_condition_150896' (line 2016)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2016, 4), 'if_condition_150896', if_condition_150896)
    # SSA begins for if statement (line 2016)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 2017)
    False_150897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2017, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2017)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2017, 8), 'stypy_return_type', False_150897)
    # SSA join for if statement (line 2016)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'x' (line 2018)
    x_150898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 7), 'x')
    float_150899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2018, 12), 'float')
    # Applying the binary operator '==' (line 2018)
    result_eq_150900 = python_operator(stypy.reporting.localization.Localization(__file__, 2018, 7), '==', x_150898, float_150899)
    
    # Testing the type of an if condition (line 2018)
    if_condition_150901 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2018, 4), result_eq_150900)
    # Assigning a type to the variable 'if_condition_150901' (line 2018)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2018, 4), 'if_condition_150901', if_condition_150901)
    # SSA begins for if statement (line 2018)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'True' (line 2019)
    True_150902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2019, 15), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 2019)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2019, 8), 'stypy_return_type', True_150902)
    # SSA join for if statement (line 2018)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 2020):
    
    # Assigning a BinOp to a Name (line 2020):
    
    # Call to log(...): (line 2020)
    # Processing the call arguments (line 2020)
    
    # Call to abs(...): (line 2020)
    # Processing the call arguments (line 2020)
    # Getting the type of 'x' (line 2020)
    x_150907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 23), 'x', False)
    # Processing the call keyword arguments (line 2020)
    kwargs_150908 = {}
    # Getting the type of 'np' (line 2020)
    np_150905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 16), 'np', False)
    # Obtaining the member 'abs' of a type (line 2020)
    abs_150906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2020, 16), np_150905, 'abs')
    # Calling abs(args, kwargs) (line 2020)
    abs_call_result_150909 = invoke(stypy.reporting.localization.Localization(__file__, 2020, 16), abs_150906, *[x_150907], **kwargs_150908)
    
    # Processing the call keyword arguments (line 2020)
    kwargs_150910 = {}
    # Getting the type of 'np' (line 2020)
    np_150903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 9), 'np', False)
    # Obtaining the member 'log' of a type (line 2020)
    log_150904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2020, 9), np_150903, 'log')
    # Calling log(args, kwargs) (line 2020)
    log_call_result_150911 = invoke(stypy.reporting.localization.Localization(__file__, 2020, 9), log_150904, *[abs_call_result_150909], **kwargs_150910)
    
    
    # Call to log(...): (line 2020)
    # Processing the call arguments (line 2020)
    # Getting the type of 'base' (line 2020)
    base_150914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 36), 'base', False)
    # Processing the call keyword arguments (line 2020)
    kwargs_150915 = {}
    # Getting the type of 'np' (line 2020)
    np_150912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 29), 'np', False)
    # Obtaining the member 'log' of a type (line 2020)
    log_150913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2020, 29), np_150912, 'log')
    # Calling log(args, kwargs) (line 2020)
    log_call_result_150916 = invoke(stypy.reporting.localization.Localization(__file__, 2020, 29), log_150913, *[base_150914], **kwargs_150915)
    
    # Applying the binary operator 'div' (line 2020)
    result_div_150917 = python_operator(stypy.reporting.localization.Localization(__file__, 2020, 9), 'div', log_call_result_150911, log_call_result_150916)
    
    # Assigning a type to the variable 'lx' (line 2020)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2020, 4), 'lx', result_div_150917)
    
    # Call to is_close_to_int(...): (line 2021)
    # Processing the call arguments (line 2021)
    # Getting the type of 'lx' (line 2021)
    lx_150919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 27), 'lx', False)
    # Processing the call keyword arguments (line 2021)
    kwargs_150920 = {}
    # Getting the type of 'is_close_to_int' (line 2021)
    is_close_to_int_150918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 11), 'is_close_to_int', False)
    # Calling is_close_to_int(args, kwargs) (line 2021)
    is_close_to_int_call_result_150921 = invoke(stypy.reporting.localization.Localization(__file__, 2021, 11), is_close_to_int_150918, *[lx_150919], **kwargs_150920)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2021)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2021, 4), 'stypy_return_type', is_close_to_int_call_result_150921)
    
    # ################# End of 'is_decade(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_decade' in the type store
    # Getting the type of 'stypy_return_type' (line 2015)
    stypy_return_type_150922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150922)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_decade'
    return stypy_return_type_150922

# Assigning a type to the variable 'is_decade' (line 2015)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2015, 0), 'is_decade', is_decade)

@norecursion
def is_close_to_int(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_close_to_int'
    module_type_store = module_type_store.open_function_context('is_close_to_int', 2024, 0, False)
    
    # Passed parameters checking function
    is_close_to_int.stypy_localization = localization
    is_close_to_int.stypy_type_of_self = None
    is_close_to_int.stypy_type_store = module_type_store
    is_close_to_int.stypy_function_name = 'is_close_to_int'
    is_close_to_int.stypy_param_names_list = ['x']
    is_close_to_int.stypy_varargs_param_name = None
    is_close_to_int.stypy_kwargs_param_name = None
    is_close_to_int.stypy_call_defaults = defaults
    is_close_to_int.stypy_call_varargs = varargs
    is_close_to_int.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_close_to_int', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_close_to_int', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_close_to_int(...)' code ##################

    
    
    
    # Call to isfinite(...): (line 2025)
    # Processing the call arguments (line 2025)
    # Getting the type of 'x' (line 2025)
    x_150925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2025, 23), 'x', False)
    # Processing the call keyword arguments (line 2025)
    kwargs_150926 = {}
    # Getting the type of 'np' (line 2025)
    np_150923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2025, 11), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 2025)
    isfinite_150924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2025, 11), np_150923, 'isfinite')
    # Calling isfinite(args, kwargs) (line 2025)
    isfinite_call_result_150927 = invoke(stypy.reporting.localization.Localization(__file__, 2025, 11), isfinite_150924, *[x_150925], **kwargs_150926)
    
    # Applying the 'not' unary operator (line 2025)
    result_not__150928 = python_operator(stypy.reporting.localization.Localization(__file__, 2025, 7), 'not', isfinite_call_result_150927)
    
    # Testing the type of an if condition (line 2025)
    if_condition_150929 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2025, 4), result_not__150928)
    # Assigning a type to the variable 'if_condition_150929' (line 2025)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2025, 4), 'if_condition_150929', if_condition_150929)
    # SSA begins for if statement (line 2025)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 2026)
    False_150930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2026)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2026, 8), 'stypy_return_type', False_150930)
    # SSA join for if statement (line 2025)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to abs(...): (line 2027)
    # Processing the call arguments (line 2027)
    # Getting the type of 'x' (line 2027)
    x_150932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 15), 'x', False)
    
    # Call to nearest_long(...): (line 2027)
    # Processing the call arguments (line 2027)
    # Getting the type of 'x' (line 2027)
    x_150934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 32), 'x', False)
    # Processing the call keyword arguments (line 2027)
    kwargs_150935 = {}
    # Getting the type of 'nearest_long' (line 2027)
    nearest_long_150933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 19), 'nearest_long', False)
    # Calling nearest_long(args, kwargs) (line 2027)
    nearest_long_call_result_150936 = invoke(stypy.reporting.localization.Localization(__file__, 2027, 19), nearest_long_150933, *[x_150934], **kwargs_150935)
    
    # Applying the binary operator '-' (line 2027)
    result_sub_150937 = python_operator(stypy.reporting.localization.Localization(__file__, 2027, 15), '-', x_150932, nearest_long_call_result_150936)
    
    # Processing the call keyword arguments (line 2027)
    kwargs_150938 = {}
    # Getting the type of 'abs' (line 2027)
    abs_150931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 11), 'abs', False)
    # Calling abs(args, kwargs) (line 2027)
    abs_call_result_150939 = invoke(stypy.reporting.localization.Localization(__file__, 2027, 11), abs_150931, *[result_sub_150937], **kwargs_150938)
    
    float_150940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2027, 38), 'float')
    # Applying the binary operator '<' (line 2027)
    result_lt_150941 = python_operator(stypy.reporting.localization.Localization(__file__, 2027, 11), '<', abs_call_result_150939, float_150940)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2027)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2027, 4), 'stypy_return_type', result_lt_150941)
    
    # ################# End of 'is_close_to_int(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_close_to_int' in the type store
    # Getting the type of 'stypy_return_type' (line 2024)
    stypy_return_type_150942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150942)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_close_to_int'
    return stypy_return_type_150942

# Assigning a type to the variable 'is_close_to_int' (line 2024)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2024, 0), 'is_close_to_int', is_close_to_int)
# Declaration of the 'LogLocator' class
# Getting the type of 'Locator' (line 2030)
Locator_150943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 17), 'Locator')

class LogLocator(Locator_150943, ):
    unicode_150944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2033, (-1)), 'unicode', u'\n    Determine the tick locations for log axes\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_150945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2035, 28), 'float')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2035)
        tuple_150946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2035, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2035)
        # Adding element type (line 2035)
        float_150947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2035, 40), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2035, 40), tuple_150946, float_150947)
        
        int_150948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2035, 55), 'int')
        # Getting the type of 'None' (line 2035)
        None_150949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 67), 'None')
        defaults = [float_150945, tuple_150946, int_150948, None_150949]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2035, 4, False)
        # Assigning a type to the variable 'self' (line 2036)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2036, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogLocator.__init__', ['base', 'subs', 'numdecs', 'numticks'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['base', 'subs', 'numdecs', 'numticks'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_150950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2053, (-1)), 'unicode', u"\n        Place ticks on the locations : subs[j] * base**i\n\n        Parameters\n        ----------\n        subs : None, string, or sequence of float, optional, default (1.0,)\n            Gives the multiples of integer powers of the base at which\n            to place ticks.  The default places ticks only at\n            integer powers of the base.\n            The permitted string values are ``'auto'`` and ``'all'``,\n            both of which use an algorithm based on the axis view\n            limits to determine whether and how to put ticks between\n            integer powers of the base.  With ``'auto'``, ticks are\n            placed only between integer powers; with ``'all'``, the\n            integer powers are included.  A value of None is\n            equivalent to ``'auto'``.\n\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 2054)
        # Getting the type of 'numticks' (line 2054)
        numticks_150951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 11), 'numticks')
        # Getting the type of 'None' (line 2054)
        None_150952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 23), 'None')
        
        (may_be_150953, more_types_in_union_150954) = may_be_none(numticks_150951, None_150952)

        if may_be_150953:

            if more_types_in_union_150954:
                # Runtime conditional SSA (line 2054)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Obtaining the type of the subscript
            unicode_150955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2055, 24), 'unicode', u'_internal.classic_mode')
            # Getting the type of 'rcParams' (line 2055)
            rcParams_150956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 15), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 2055)
            getitem___150957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2055, 15), rcParams_150956, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2055)
            subscript_call_result_150958 = invoke(stypy.reporting.localization.Localization(__file__, 2055, 15), getitem___150957, unicode_150955)
            
            # Testing the type of an if condition (line 2055)
            if_condition_150959 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2055, 12), subscript_call_result_150958)
            # Assigning a type to the variable 'if_condition_150959' (line 2055)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 12), 'if_condition_150959', if_condition_150959)
            # SSA begins for if statement (line 2055)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Name (line 2056):
            
            # Assigning a Num to a Name (line 2056):
            int_150960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2056, 27), 'int')
            # Assigning a type to the variable 'numticks' (line 2056)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2056, 16), 'numticks', int_150960)
            # SSA branch for the else part of an if statement (line 2055)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Str to a Name (line 2058):
            
            # Assigning a Str to a Name (line 2058):
            unicode_150961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2058, 27), 'unicode', u'auto')
            # Assigning a type to the variable 'numticks' (line 2058)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2058, 16), 'numticks', unicode_150961)
            # SSA join for if statement (line 2055)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_150954:
                # SSA join for if statement (line 2054)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to base(...): (line 2059)
        # Processing the call arguments (line 2059)
        # Getting the type of 'base' (line 2059)
        base_150964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 18), 'base', False)
        # Processing the call keyword arguments (line 2059)
        kwargs_150965 = {}
        # Getting the type of 'self' (line 2059)
        self_150962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 8), 'self', False)
        # Obtaining the member 'base' of a type (line 2059)
        base_150963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2059, 8), self_150962, 'base')
        # Calling base(args, kwargs) (line 2059)
        base_call_result_150966 = invoke(stypy.reporting.localization.Localization(__file__, 2059, 8), base_150963, *[base_150964], **kwargs_150965)
        
        
        # Call to subs(...): (line 2060)
        # Processing the call arguments (line 2060)
        # Getting the type of 'subs' (line 2060)
        subs_150969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2060, 18), 'subs', False)
        # Processing the call keyword arguments (line 2060)
        kwargs_150970 = {}
        # Getting the type of 'self' (line 2060)
        self_150967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2060, 8), 'self', False)
        # Obtaining the member 'subs' of a type (line 2060)
        subs_150968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2060, 8), self_150967, 'subs')
        # Calling subs(args, kwargs) (line 2060)
        subs_call_result_150971 = invoke(stypy.reporting.localization.Localization(__file__, 2060, 8), subs_150968, *[subs_150969], **kwargs_150970)
        
        
        # Assigning a Name to a Attribute (line 2061):
        
        # Assigning a Name to a Attribute (line 2061):
        # Getting the type of 'numdecs' (line 2061)
        numdecs_150972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 23), 'numdecs')
        # Getting the type of 'self' (line 2061)
        self_150973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 8), 'self')
        # Setting the type of the member 'numdecs' of a type (line 2061)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2061, 8), self_150973, 'numdecs', numdecs_150972)
        
        # Assigning a Name to a Attribute (line 2062):
        
        # Assigning a Name to a Attribute (line 2062):
        # Getting the type of 'numticks' (line 2062)
        numticks_150974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 24), 'numticks')
        # Getting the type of 'self' (line 2062)
        self_150975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 8), 'self')
        # Setting the type of the member 'numticks' of a type (line 2062)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2062, 8), self_150975, 'numticks', numticks_150974)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2064)
        None_150976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 30), 'None')
        # Getting the type of 'None' (line 2064)
        None_150977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 41), 'None')
        # Getting the type of 'None' (line 2064)
        None_150978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 55), 'None')
        # Getting the type of 'None' (line 2064)
        None_150979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 70), 'None')
        defaults = [None_150976, None_150977, None_150978, None_150979]
        # Create a new context for function 'set_params'
        module_type_store = module_type_store.open_function_context('set_params', 2064, 4, False)
        # Assigning a type to the variable 'self' (line 2065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2065, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogLocator.set_params.__dict__.__setitem__('stypy_localization', localization)
        LogLocator.set_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogLocator.set_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogLocator.set_params.__dict__.__setitem__('stypy_function_name', 'LogLocator.set_params')
        LogLocator.set_params.__dict__.__setitem__('stypy_param_names_list', ['base', 'subs', 'numdecs', 'numticks'])
        LogLocator.set_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogLocator.set_params.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogLocator.set_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogLocator.set_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogLocator.set_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogLocator.set_params.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogLocator.set_params', ['base', 'subs', 'numdecs', 'numticks'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_params', localization, ['base', 'subs', 'numdecs', 'numticks'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_params(...)' code ##################

        unicode_150980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2065, 8), 'unicode', u'Set parameters within this locator.')
        
        # Type idiom detected: calculating its left and rigth part (line 2066)
        # Getting the type of 'base' (line 2066)
        base_150981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 8), 'base')
        # Getting the type of 'None' (line 2066)
        None_150982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 23), 'None')
        
        (may_be_150983, more_types_in_union_150984) = may_not_be_none(base_150981, None_150982)

        if may_be_150983:

            if more_types_in_union_150984:
                # Runtime conditional SSA (line 2066)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to base(...): (line 2067)
            # Processing the call arguments (line 2067)
            # Getting the type of 'base' (line 2067)
            base_150987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 22), 'base', False)
            # Processing the call keyword arguments (line 2067)
            kwargs_150988 = {}
            # Getting the type of 'self' (line 2067)
            self_150985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 12), 'self', False)
            # Obtaining the member 'base' of a type (line 2067)
            base_150986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2067, 12), self_150985, 'base')
            # Calling base(args, kwargs) (line 2067)
            base_call_result_150989 = invoke(stypy.reporting.localization.Localization(__file__, 2067, 12), base_150986, *[base_150987], **kwargs_150988)
            

            if more_types_in_union_150984:
                # SSA join for if statement (line 2066)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2068)
        # Getting the type of 'subs' (line 2068)
        subs_150990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 8), 'subs')
        # Getting the type of 'None' (line 2068)
        None_150991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 23), 'None')
        
        (may_be_150992, more_types_in_union_150993) = may_not_be_none(subs_150990, None_150991)

        if may_be_150992:

            if more_types_in_union_150993:
                # Runtime conditional SSA (line 2068)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to subs(...): (line 2069)
            # Processing the call arguments (line 2069)
            # Getting the type of 'subs' (line 2069)
            subs_150996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 22), 'subs', False)
            # Processing the call keyword arguments (line 2069)
            kwargs_150997 = {}
            # Getting the type of 'self' (line 2069)
            self_150994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 12), 'self', False)
            # Obtaining the member 'subs' of a type (line 2069)
            subs_150995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2069, 12), self_150994, 'subs')
            # Calling subs(args, kwargs) (line 2069)
            subs_call_result_150998 = invoke(stypy.reporting.localization.Localization(__file__, 2069, 12), subs_150995, *[subs_150996], **kwargs_150997)
            

            if more_types_in_union_150993:
                # SSA join for if statement (line 2068)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2070)
        # Getting the type of 'numdecs' (line 2070)
        numdecs_150999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 8), 'numdecs')
        # Getting the type of 'None' (line 2070)
        None_151000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 26), 'None')
        
        (may_be_151001, more_types_in_union_151002) = may_not_be_none(numdecs_150999, None_151000)

        if may_be_151001:

            if more_types_in_union_151002:
                # Runtime conditional SSA (line 2070)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 2071):
            
            # Assigning a Name to a Attribute (line 2071):
            # Getting the type of 'numdecs' (line 2071)
            numdecs_151003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 27), 'numdecs')
            # Getting the type of 'self' (line 2071)
            self_151004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 12), 'self')
            # Setting the type of the member 'numdecs' of a type (line 2071)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2071, 12), self_151004, 'numdecs', numdecs_151003)

            if more_types_in_union_151002:
                # SSA join for if statement (line 2070)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2072)
        # Getting the type of 'numticks' (line 2072)
        numticks_151005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 8), 'numticks')
        # Getting the type of 'None' (line 2072)
        None_151006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 27), 'None')
        
        (may_be_151007, more_types_in_union_151008) = may_not_be_none(numticks_151005, None_151006)

        if may_be_151007:

            if more_types_in_union_151008:
                # Runtime conditional SSA (line 2072)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 2073):
            
            # Assigning a Name to a Attribute (line 2073):
            # Getting the type of 'numticks' (line 2073)
            numticks_151009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 28), 'numticks')
            # Getting the type of 'self' (line 2073)
            self_151010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 12), 'self')
            # Setting the type of the member 'numticks' of a type (line 2073)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2073, 12), self_151010, 'numticks', numticks_151009)

            if more_types_in_union_151008:
                # SSA join for if statement (line 2072)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'set_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_params' in the type store
        # Getting the type of 'stypy_return_type' (line 2064)
        stypy_return_type_151011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_151011)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_params'
        return stypy_return_type_151011


    @norecursion
    def base(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'base'
        module_type_store = module_type_store.open_function_context('base', 2078, 4, False)
        # Assigning a type to the variable 'self' (line 2079)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2079, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogLocator.base.__dict__.__setitem__('stypy_localization', localization)
        LogLocator.base.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogLocator.base.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogLocator.base.__dict__.__setitem__('stypy_function_name', 'LogLocator.base')
        LogLocator.base.__dict__.__setitem__('stypy_param_names_list', ['base'])
        LogLocator.base.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogLocator.base.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogLocator.base.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogLocator.base.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogLocator.base.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogLocator.base.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogLocator.base', ['base'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'base', localization, ['base'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'base(...)' code ##################

        unicode_151012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2081, (-1)), 'unicode', u'\n        set the base of the log scaling (major tick every base**i, i integer)\n        ')
        
        # Assigning a Call to a Attribute (line 2082):
        
        # Assigning a Call to a Attribute (line 2082):
        
        # Call to float(...): (line 2082)
        # Processing the call arguments (line 2082)
        # Getting the type of 'base' (line 2082)
        base_151014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 27), 'base', False)
        # Processing the call keyword arguments (line 2082)
        kwargs_151015 = {}
        # Getting the type of 'float' (line 2082)
        float_151013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 21), 'float', False)
        # Calling float(args, kwargs) (line 2082)
        float_call_result_151016 = invoke(stypy.reporting.localization.Localization(__file__, 2082, 21), float_151013, *[base_151014], **kwargs_151015)
        
        # Getting the type of 'self' (line 2082)
        self_151017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 8), 'self')
        # Setting the type of the member '_base' of a type (line 2082)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2082, 8), self_151017, '_base', float_call_result_151016)
        
        # ################# End of 'base(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'base' in the type store
        # Getting the type of 'stypy_return_type' (line 2078)
        stypy_return_type_151018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_151018)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'base'
        return stypy_return_type_151018


    @norecursion
    def subs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'subs'
        module_type_store = module_type_store.open_function_context('subs', 2084, 4, False)
        # Assigning a type to the variable 'self' (line 2085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2085, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogLocator.subs.__dict__.__setitem__('stypy_localization', localization)
        LogLocator.subs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogLocator.subs.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogLocator.subs.__dict__.__setitem__('stypy_function_name', 'LogLocator.subs')
        LogLocator.subs.__dict__.__setitem__('stypy_param_names_list', ['subs'])
        LogLocator.subs.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogLocator.subs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogLocator.subs.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogLocator.subs.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogLocator.subs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogLocator.subs.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogLocator.subs', ['subs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'subs', localization, ['subs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'subs(...)' code ##################

        unicode_151019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, (-1)), 'unicode', u'\n        set the minor ticks for the log scaling every base**i*subs[j]\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 2088)
        # Getting the type of 'subs' (line 2088)
        subs_151020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 11), 'subs')
        # Getting the type of 'None' (line 2088)
        None_151021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 19), 'None')
        
        (may_be_151022, more_types_in_union_151023) = may_be_none(subs_151020, None_151021)

        if may_be_151022:

            if more_types_in_union_151023:
                # Runtime conditional SSA (line 2088)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Attribute (line 2089):
            
            # Assigning a Str to a Attribute (line 2089):
            unicode_151024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2089, 25), 'unicode', u'auto')
            # Getting the type of 'self' (line 2089)
            self_151025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 12), 'self')
            # Setting the type of the member '_subs' of a type (line 2089)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 12), self_151025, '_subs', unicode_151024)

            if more_types_in_union_151023:
                # Runtime conditional SSA for else branch (line 2088)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_151022) or more_types_in_union_151023):
            
            
            # Call to isinstance(...): (line 2090)
            # Processing the call arguments (line 2090)
            # Getting the type of 'subs' (line 2090)
            subs_151027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 24), 'subs', False)
            # Getting the type of 'six' (line 2090)
            six_151028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 30), 'six', False)
            # Obtaining the member 'string_types' of a type (line 2090)
            string_types_151029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2090, 30), six_151028, 'string_types')
            # Processing the call keyword arguments (line 2090)
            kwargs_151030 = {}
            # Getting the type of 'isinstance' (line 2090)
            isinstance_151026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 13), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 2090)
            isinstance_call_result_151031 = invoke(stypy.reporting.localization.Localization(__file__, 2090, 13), isinstance_151026, *[subs_151027, string_types_151029], **kwargs_151030)
            
            # Testing the type of an if condition (line 2090)
            if_condition_151032 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2090, 13), isinstance_call_result_151031)
            # Assigning a type to the variable 'if_condition_151032' (line 2090)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2090, 13), 'if_condition_151032', if_condition_151032)
            # SSA begins for if statement (line 2090)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            # Getting the type of 'subs' (line 2091)
            subs_151033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 15), 'subs')
            
            # Obtaining an instance of the builtin type 'tuple' (line 2091)
            tuple_151034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2091, 28), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2091)
            # Adding element type (line 2091)
            unicode_151035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2091, 28), 'unicode', u'all')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2091, 28), tuple_151034, unicode_151035)
            # Adding element type (line 2091)
            unicode_151036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2091, 35), 'unicode', u'auto')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2091, 28), tuple_151034, unicode_151036)
            
            # Applying the binary operator 'notin' (line 2091)
            result_contains_151037 = python_operator(stypy.reporting.localization.Localization(__file__, 2091, 15), 'notin', subs_151033, tuple_151034)
            
            # Testing the type of an if condition (line 2091)
            if_condition_151038 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2091, 12), result_contains_151037)
            # Assigning a type to the variable 'if_condition_151038' (line 2091)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2091, 12), 'if_condition_151038', if_condition_151038)
            # SSA begins for if statement (line 2091)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 2092)
            # Processing the call arguments (line 2092)
            unicode_151040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2092, 33), 'unicode', u"A subs string must be 'all' or 'auto'; found '%s'.")
            # Getting the type of 'subs' (line 2093)
            subs_151041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 49), 'subs', False)
            # Applying the binary operator '%' (line 2092)
            result_mod_151042 = python_operator(stypy.reporting.localization.Localization(__file__, 2092, 33), '%', unicode_151040, subs_151041)
            
            # Processing the call keyword arguments (line 2092)
            kwargs_151043 = {}
            # Getting the type of 'ValueError' (line 2092)
            ValueError_151039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 2092)
            ValueError_call_result_151044 = invoke(stypy.reporting.localization.Localization(__file__, 2092, 22), ValueError_151039, *[result_mod_151042], **kwargs_151043)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2092, 16), ValueError_call_result_151044, 'raise parameter', BaseException)
            # SSA join for if statement (line 2091)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Name to a Attribute (line 2094):
            
            # Assigning a Name to a Attribute (line 2094):
            # Getting the type of 'subs' (line 2094)
            subs_151045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 25), 'subs')
            # Getting the type of 'self' (line 2094)
            self_151046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 12), 'self')
            # Setting the type of the member '_subs' of a type (line 2094)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 12), self_151046, '_subs', subs_151045)
            # SSA branch for the else part of an if statement (line 2090)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Attribute (line 2096):
            
            # Assigning a Call to a Attribute (line 2096):
            
            # Call to asarray(...): (line 2096)
            # Processing the call arguments (line 2096)
            # Getting the type of 'subs' (line 2096)
            subs_151049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2096, 36), 'subs', False)
            # Processing the call keyword arguments (line 2096)
            # Getting the type of 'float' (line 2096)
            float_151050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2096, 48), 'float', False)
            keyword_151051 = float_151050
            kwargs_151052 = {'dtype': keyword_151051}
            # Getting the type of 'np' (line 2096)
            np_151047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2096, 25), 'np', False)
            # Obtaining the member 'asarray' of a type (line 2096)
            asarray_151048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2096, 25), np_151047, 'asarray')
            # Calling asarray(args, kwargs) (line 2096)
            asarray_call_result_151053 = invoke(stypy.reporting.localization.Localization(__file__, 2096, 25), asarray_151048, *[subs_151049], **kwargs_151052)
            
            # Getting the type of 'self' (line 2096)
            self_151054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2096, 12), 'self')
            # Setting the type of the member '_subs' of a type (line 2096)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2096, 12), self_151054, '_subs', asarray_call_result_151053)
            # SSA join for if statement (line 2090)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_151022 and more_types_in_union_151023):
                # SSA join for if statement (line 2088)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'subs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'subs' in the type store
        # Getting the type of 'stypy_return_type' (line 2084)
        stypy_return_type_151055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_151055)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'subs'
        return stypy_return_type_151055


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 2098, 4, False)
        # Assigning a type to the variable 'self' (line 2099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2099, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        LogLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogLocator.__call__.__dict__.__setitem__('stypy_function_name', 'LogLocator.__call__')
        LogLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        LogLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_151056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2099, 8), 'unicode', u'Return the locations of the ticks')
        
        # Assigning a Call to a Tuple (line 2100):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 2100)
        # Processing the call keyword arguments (line 2100)
        kwargs_151060 = {}
        # Getting the type of 'self' (line 2100)
        self_151057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 2100)
        axis_151058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2100, 21), self_151057, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 2100)
        get_view_interval_151059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2100, 21), axis_151058, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 2100)
        get_view_interval_call_result_151061 = invoke(stypy.reporting.localization.Localization(__file__, 2100, 21), get_view_interval_151059, *[], **kwargs_151060)
        
        # Assigning a type to the variable 'call_assignment_146337' (line 2100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'call_assignment_146337', get_view_interval_call_result_151061)
        
        # Assigning a Call to a Name (line 2100):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_151064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2100, 8), 'int')
        # Processing the call keyword arguments
        kwargs_151065 = {}
        # Getting the type of 'call_assignment_146337' (line 2100)
        call_assignment_146337_151062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'call_assignment_146337', False)
        # Obtaining the member '__getitem__' of a type (line 2100)
        getitem___151063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2100, 8), call_assignment_146337_151062, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_151066 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___151063, *[int_151064], **kwargs_151065)
        
        # Assigning a type to the variable 'call_assignment_146338' (line 2100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'call_assignment_146338', getitem___call_result_151066)
        
        # Assigning a Name to a Name (line 2100):
        # Getting the type of 'call_assignment_146338' (line 2100)
        call_assignment_146338_151067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'call_assignment_146338')
        # Assigning a type to the variable 'vmin' (line 2100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'vmin', call_assignment_146338_151067)
        
        # Assigning a Call to a Name (line 2100):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_151070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2100, 8), 'int')
        # Processing the call keyword arguments
        kwargs_151071 = {}
        # Getting the type of 'call_assignment_146337' (line 2100)
        call_assignment_146337_151068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'call_assignment_146337', False)
        # Obtaining the member '__getitem__' of a type (line 2100)
        getitem___151069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2100, 8), call_assignment_146337_151068, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_151072 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___151069, *[int_151070], **kwargs_151071)
        
        # Assigning a type to the variable 'call_assignment_146339' (line 2100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'call_assignment_146339', getitem___call_result_151072)
        
        # Assigning a Name to a Name (line 2100):
        # Getting the type of 'call_assignment_146339' (line 2100)
        call_assignment_146339_151073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'call_assignment_146339')
        # Assigning a type to the variable 'vmax' (line 2100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 14), 'vmax', call_assignment_146339_151073)
        
        # Call to tick_values(...): (line 2101)
        # Processing the call arguments (line 2101)
        # Getting the type of 'vmin' (line 2101)
        vmin_151076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2101, 32), 'vmin', False)
        # Getting the type of 'vmax' (line 2101)
        vmax_151077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2101, 38), 'vmax', False)
        # Processing the call keyword arguments (line 2101)
        kwargs_151078 = {}
        # Getting the type of 'self' (line 2101)
        self_151074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2101, 15), 'self', False)
        # Obtaining the member 'tick_values' of a type (line 2101)
        tick_values_151075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2101, 15), self_151074, 'tick_values')
        # Calling tick_values(args, kwargs) (line 2101)
        tick_values_call_result_151079 = invoke(stypy.reporting.localization.Localization(__file__, 2101, 15), tick_values_151075, *[vmin_151076, vmax_151077], **kwargs_151078)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2101, 8), 'stypy_return_type', tick_values_call_result_151079)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 2098)
        stypy_return_type_151080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2098, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_151080)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_151080


    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 2103, 4, False)
        # Assigning a type to the variable 'self' (line 2104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2104, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogLocator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        LogLocator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogLocator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogLocator.tick_values.__dict__.__setitem__('stypy_function_name', 'LogLocator.tick_values')
        LogLocator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        LogLocator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogLocator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogLocator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogLocator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogLocator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogLocator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogLocator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        
        
        # Getting the type of 'self' (line 2104)
        self_151081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 11), 'self')
        # Obtaining the member 'numticks' of a type (line 2104)
        numticks_151082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2104, 11), self_151081, 'numticks')
        unicode_151083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2104, 28), 'unicode', u'auto')
        # Applying the binary operator '==' (line 2104)
        result_eq_151084 = python_operator(stypy.reporting.localization.Localization(__file__, 2104, 11), '==', numticks_151082, unicode_151083)
        
        # Testing the type of an if condition (line 2104)
        if_condition_151085 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2104, 8), result_eq_151084)
        # Assigning a type to the variable 'if_condition_151085' (line 2104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2104, 8), 'if_condition_151085', if_condition_151085)
        # SSA begins for if statement (line 2104)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 2105)
        self_151086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 15), 'self')
        # Obtaining the member 'axis' of a type (line 2105)
        axis_151087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2105, 15), self_151086, 'axis')
        # Getting the type of 'None' (line 2105)
        None_151088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 32), 'None')
        # Applying the binary operator 'isnot' (line 2105)
        result_is_not_151089 = python_operator(stypy.reporting.localization.Localization(__file__, 2105, 15), 'isnot', axis_151087, None_151088)
        
        # Testing the type of an if condition (line 2105)
        if_condition_151090 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2105, 12), result_is_not_151089)
        # Assigning a type to the variable 'if_condition_151090' (line 2105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2105, 12), 'if_condition_151090', if_condition_151090)
        # SSA begins for if statement (line 2105)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2106):
        
        # Assigning a Call to a Name (line 2106):
        
        # Call to clip(...): (line 2106)
        # Processing the call arguments (line 2106)
        
        # Call to get_tick_space(...): (line 2106)
        # Processing the call keyword arguments (line 2106)
        kwargs_151096 = {}
        # Getting the type of 'self' (line 2106)
        self_151093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 35), 'self', False)
        # Obtaining the member 'axis' of a type (line 2106)
        axis_151094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2106, 35), self_151093, 'axis')
        # Obtaining the member 'get_tick_space' of a type (line 2106)
        get_tick_space_151095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2106, 35), axis_151094, 'get_tick_space')
        # Calling get_tick_space(args, kwargs) (line 2106)
        get_tick_space_call_result_151097 = invoke(stypy.reporting.localization.Localization(__file__, 2106, 35), get_tick_space_151095, *[], **kwargs_151096)
        
        int_151098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2106, 63), 'int')
        int_151099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2106, 66), 'int')
        # Processing the call keyword arguments (line 2106)
        kwargs_151100 = {}
        # Getting the type of 'np' (line 2106)
        np_151091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 27), 'np', False)
        # Obtaining the member 'clip' of a type (line 2106)
        clip_151092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2106, 27), np_151091, 'clip')
        # Calling clip(args, kwargs) (line 2106)
        clip_call_result_151101 = invoke(stypy.reporting.localization.Localization(__file__, 2106, 27), clip_151092, *[get_tick_space_call_result_151097, int_151098, int_151099], **kwargs_151100)
        
        # Assigning a type to the variable 'numticks' (line 2106)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2106, 16), 'numticks', clip_call_result_151101)
        # SSA branch for the else part of an if statement (line 2105)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 2108):
        
        # Assigning a Num to a Name (line 2108):
        int_151102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2108, 27), 'int')
        # Assigning a type to the variable 'numticks' (line 2108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2108, 16), 'numticks', int_151102)
        # SSA join for if statement (line 2105)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2104)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 2110):
        
        # Assigning a Attribute to a Name (line 2110):
        # Getting the type of 'self' (line 2110)
        self_151103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 23), 'self')
        # Obtaining the member 'numticks' of a type (line 2110)
        numticks_151104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2110, 23), self_151103, 'numticks')
        # Assigning a type to the variable 'numticks' (line 2110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2110, 12), 'numticks', numticks_151104)
        # SSA join for if statement (line 2104)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 2112):
        
        # Assigning a Attribute to a Name (line 2112):
        # Getting the type of 'self' (line 2112)
        self_151105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2112, 12), 'self')
        # Obtaining the member '_base' of a type (line 2112)
        _base_151106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2112, 12), self_151105, '_base')
        # Assigning a type to the variable 'b' (line 2112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2112, 8), 'b', _base_151106)
        
        
        # Evaluating a boolean operation
        
        # Call to hasattr(...): (line 2114)
        # Processing the call arguments (line 2114)
        # Getting the type of 'self' (line 2114)
        self_151108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 19), 'self', False)
        # Obtaining the member 'axis' of a type (line 2114)
        axis_151109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2114, 19), self_151108, 'axis')
        unicode_151110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2114, 30), 'unicode', u'axes')
        # Processing the call keyword arguments (line 2114)
        kwargs_151111 = {}
        # Getting the type of 'hasattr' (line 2114)
        hasattr_151107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 11), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 2114)
        hasattr_call_result_151112 = invoke(stypy.reporting.localization.Localization(__file__, 2114, 11), hasattr_151107, *[axis_151109, unicode_151110], **kwargs_151111)
        
        
        # Getting the type of 'self' (line 2114)
        self_151113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 42), 'self')
        # Obtaining the member 'axis' of a type (line 2114)
        axis_151114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2114, 42), self_151113, 'axis')
        # Obtaining the member 'axes' of a type (line 2114)
        axes_151115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2114, 42), axis_151114, 'axes')
        # Obtaining the member 'name' of a type (line 2114)
        name_151116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2114, 42), axes_151115, 'name')
        unicode_151117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2114, 65), 'unicode', u'polar')
        # Applying the binary operator '==' (line 2114)
        result_eq_151118 = python_operator(stypy.reporting.localization.Localization(__file__, 2114, 42), '==', name_151116, unicode_151117)
        
        # Applying the binary operator 'and' (line 2114)
        result_and_keyword_151119 = python_operator(stypy.reporting.localization.Localization(__file__, 2114, 11), 'and', hasattr_call_result_151112, result_eq_151118)
        
        # Testing the type of an if condition (line 2114)
        if_condition_151120 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2114, 8), result_and_keyword_151119)
        # Assigning a type to the variable 'if_condition_151120' (line 2114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2114, 8), 'if_condition_151120', if_condition_151120)
        # SSA begins for if statement (line 2114)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2115):
        
        # Assigning a Call to a Name (line 2115):
        
        # Call to ceil(...): (line 2115)
        # Processing the call arguments (line 2115)
        
        # Call to log(...): (line 2115)
        # Processing the call arguments (line 2115)
        # Getting the type of 'vmax' (line 2115)
        vmax_151125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 38), 'vmax', False)
        # Processing the call keyword arguments (line 2115)
        kwargs_151126 = {}
        # Getting the type of 'math' (line 2115)
        math_151123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 29), 'math', False)
        # Obtaining the member 'log' of a type (line 2115)
        log_151124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2115, 29), math_151123, 'log')
        # Calling log(args, kwargs) (line 2115)
        log_call_result_151127 = invoke(stypy.reporting.localization.Localization(__file__, 2115, 29), log_151124, *[vmax_151125], **kwargs_151126)
        
        
        # Call to log(...): (line 2115)
        # Processing the call arguments (line 2115)
        # Getting the type of 'b' (line 2115)
        b_151130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 55), 'b', False)
        # Processing the call keyword arguments (line 2115)
        kwargs_151131 = {}
        # Getting the type of 'math' (line 2115)
        math_151128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 46), 'math', False)
        # Obtaining the member 'log' of a type (line 2115)
        log_151129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2115, 46), math_151128, 'log')
        # Calling log(args, kwargs) (line 2115)
        log_call_result_151132 = invoke(stypy.reporting.localization.Localization(__file__, 2115, 46), log_151129, *[b_151130], **kwargs_151131)
        
        # Applying the binary operator 'div' (line 2115)
        result_div_151133 = python_operator(stypy.reporting.localization.Localization(__file__, 2115, 29), 'div', log_call_result_151127, log_call_result_151132)
        
        # Processing the call keyword arguments (line 2115)
        kwargs_151134 = {}
        # Getting the type of 'math' (line 2115)
        math_151121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 19), 'math', False)
        # Obtaining the member 'ceil' of a type (line 2115)
        ceil_151122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2115, 19), math_151121, 'ceil')
        # Calling ceil(args, kwargs) (line 2115)
        ceil_call_result_151135 = invoke(stypy.reporting.localization.Localization(__file__, 2115, 19), ceil_151122, *[result_div_151133], **kwargs_151134)
        
        # Assigning a type to the variable 'vmax' (line 2115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2115, 12), 'vmax', ceil_call_result_151135)
        
        # Assigning a Call to a Name (line 2116):
        
        # Assigning a Call to a Name (line 2116):
        
        # Call to arange(...): (line 2116)
        # Processing the call arguments (line 2116)
        # Getting the type of 'vmax' (line 2116)
        vmax_151138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 32), 'vmax', False)
        # Getting the type of 'self' (line 2116)
        self_151139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 39), 'self', False)
        # Obtaining the member 'numdecs' of a type (line 2116)
        numdecs_151140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2116, 39), self_151139, 'numdecs')
        # Applying the binary operator '-' (line 2116)
        result_sub_151141 = python_operator(stypy.reporting.localization.Localization(__file__, 2116, 32), '-', vmax_151138, numdecs_151140)
        
        # Getting the type of 'vmax' (line 2116)
        vmax_151142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 53), 'vmax', False)
        # Processing the call keyword arguments (line 2116)
        kwargs_151143 = {}
        # Getting the type of 'np' (line 2116)
        np_151136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 22), 'np', False)
        # Obtaining the member 'arange' of a type (line 2116)
        arange_151137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2116, 22), np_151136, 'arange')
        # Calling arange(args, kwargs) (line 2116)
        arange_call_result_151144 = invoke(stypy.reporting.localization.Localization(__file__, 2116, 22), arange_151137, *[result_sub_151141, vmax_151142], **kwargs_151143)
        
        # Assigning a type to the variable 'decades' (line 2116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2116, 12), 'decades', arange_call_result_151144)
        
        # Assigning a BinOp to a Name (line 2117):
        
        # Assigning a BinOp to a Name (line 2117):
        # Getting the type of 'b' (line 2117)
        b_151145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 23), 'b')
        # Getting the type of 'decades' (line 2117)
        decades_151146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 28), 'decades')
        # Applying the binary operator '**' (line 2117)
        result_pow_151147 = python_operator(stypy.reporting.localization.Localization(__file__, 2117, 23), '**', b_151145, decades_151146)
        
        # Assigning a type to the variable 'ticklocs' (line 2117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2117, 12), 'ticklocs', result_pow_151147)
        # Getting the type of 'ticklocs' (line 2119)
        ticklocs_151148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2119, 19), 'ticklocs')
        # Assigning a type to the variable 'stypy_return_type' (line 2119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2119, 12), 'stypy_return_type', ticklocs_151148)
        # SSA join for if statement (line 2114)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'vmin' (line 2121)
        vmin_151149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 11), 'vmin')
        float_151150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2121, 19), 'float')
        # Applying the binary operator '<=' (line 2121)
        result_le_151151 = python_operator(stypy.reporting.localization.Localization(__file__, 2121, 11), '<=', vmin_151149, float_151150)
        
        # Testing the type of an if condition (line 2121)
        if_condition_151152 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2121, 8), result_le_151151)
        # Assigning a type to the variable 'if_condition_151152' (line 2121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2121, 8), 'if_condition_151152', if_condition_151152)
        # SSA begins for if statement (line 2121)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 2122)
        self_151153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2122, 15), 'self')
        # Obtaining the member 'axis' of a type (line 2122)
        axis_151154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2122, 15), self_151153, 'axis')
        # Getting the type of 'None' (line 2122)
        None_151155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2122, 32), 'None')
        # Applying the binary operator 'isnot' (line 2122)
        result_is_not_151156 = python_operator(stypy.reporting.localization.Localization(__file__, 2122, 15), 'isnot', axis_151154, None_151155)
        
        # Testing the type of an if condition (line 2122)
        if_condition_151157 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2122, 12), result_is_not_151156)
        # Assigning a type to the variable 'if_condition_151157' (line 2122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2122, 12), 'if_condition_151157', if_condition_151157)
        # SSA begins for if statement (line 2122)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2123):
        
        # Assigning a Call to a Name (line 2123):
        
        # Call to get_minpos(...): (line 2123)
        # Processing the call keyword arguments (line 2123)
        kwargs_151161 = {}
        # Getting the type of 'self' (line 2123)
        self_151158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2123, 23), 'self', False)
        # Obtaining the member 'axis' of a type (line 2123)
        axis_151159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2123, 23), self_151158, 'axis')
        # Obtaining the member 'get_minpos' of a type (line 2123)
        get_minpos_151160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2123, 23), axis_151159, 'get_minpos')
        # Calling get_minpos(args, kwargs) (line 2123)
        get_minpos_call_result_151162 = invoke(stypy.reporting.localization.Localization(__file__, 2123, 23), get_minpos_151160, *[], **kwargs_151161)
        
        # Assigning a type to the variable 'vmin' (line 2123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2123, 16), 'vmin', get_minpos_call_result_151162)
        # SSA join for if statement (line 2122)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'vmin' (line 2125)
        vmin_151163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 15), 'vmin')
        float_151164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2125, 23), 'float')
        # Applying the binary operator '<=' (line 2125)
        result_le_151165 = python_operator(stypy.reporting.localization.Localization(__file__, 2125, 15), '<=', vmin_151163, float_151164)
        
        
        
        # Call to isfinite(...): (line 2125)
        # Processing the call arguments (line 2125)
        # Getting the type of 'vmin' (line 2125)
        vmin_151168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 46), 'vmin', False)
        # Processing the call keyword arguments (line 2125)
        kwargs_151169 = {}
        # Getting the type of 'np' (line 2125)
        np_151166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 34), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 2125)
        isfinite_151167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2125, 34), np_151166, 'isfinite')
        # Calling isfinite(args, kwargs) (line 2125)
        isfinite_call_result_151170 = invoke(stypy.reporting.localization.Localization(__file__, 2125, 34), isfinite_151167, *[vmin_151168], **kwargs_151169)
        
        # Applying the 'not' unary operator (line 2125)
        result_not__151171 = python_operator(stypy.reporting.localization.Localization(__file__, 2125, 30), 'not', isfinite_call_result_151170)
        
        # Applying the binary operator 'or' (line 2125)
        result_or_keyword_151172 = python_operator(stypy.reporting.localization.Localization(__file__, 2125, 15), 'or', result_le_151165, result_not__151171)
        
        # Testing the type of an if condition (line 2125)
        if_condition_151173 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2125, 12), result_or_keyword_151172)
        # Assigning a type to the variable 'if_condition_151173' (line 2125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2125, 12), 'if_condition_151173', if_condition_151173)
        # SSA begins for if statement (line 2125)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2126)
        # Processing the call arguments (line 2126)
        unicode_151175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2127, 20), 'unicode', u'Data has no positive values, and therefore can not be log-scaled.')
        # Processing the call keyword arguments (line 2126)
        kwargs_151176 = {}
        # Getting the type of 'ValueError' (line 2126)
        ValueError_151174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2126, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2126)
        ValueError_call_result_151177 = invoke(stypy.reporting.localization.Localization(__file__, 2126, 22), ValueError_151174, *[unicode_151175], **kwargs_151176)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2126, 16), ValueError_call_result_151177, 'raise parameter', BaseException)
        # SSA join for if statement (line 2125)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2121)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 2130):
        
        # Assigning a BinOp to a Name (line 2130):
        
        # Call to log(...): (line 2130)
        # Processing the call arguments (line 2130)
        # Getting the type of 'vmin' (line 2130)
        vmin_151180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2130, 24), 'vmin', False)
        # Processing the call keyword arguments (line 2130)
        kwargs_151181 = {}
        # Getting the type of 'math' (line 2130)
        math_151178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2130, 15), 'math', False)
        # Obtaining the member 'log' of a type (line 2130)
        log_151179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2130, 15), math_151178, 'log')
        # Calling log(args, kwargs) (line 2130)
        log_call_result_151182 = invoke(stypy.reporting.localization.Localization(__file__, 2130, 15), log_151179, *[vmin_151180], **kwargs_151181)
        
        
        # Call to log(...): (line 2130)
        # Processing the call arguments (line 2130)
        # Getting the type of 'b' (line 2130)
        b_151185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2130, 41), 'b', False)
        # Processing the call keyword arguments (line 2130)
        kwargs_151186 = {}
        # Getting the type of 'math' (line 2130)
        math_151183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2130, 32), 'math', False)
        # Obtaining the member 'log' of a type (line 2130)
        log_151184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2130, 32), math_151183, 'log')
        # Calling log(args, kwargs) (line 2130)
        log_call_result_151187 = invoke(stypy.reporting.localization.Localization(__file__, 2130, 32), log_151184, *[b_151185], **kwargs_151186)
        
        # Applying the binary operator 'div' (line 2130)
        result_div_151188 = python_operator(stypy.reporting.localization.Localization(__file__, 2130, 15), 'div', log_call_result_151182, log_call_result_151187)
        
        # Assigning a type to the variable 'vmin' (line 2130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2130, 8), 'vmin', result_div_151188)
        
        # Assigning a BinOp to a Name (line 2131):
        
        # Assigning a BinOp to a Name (line 2131):
        
        # Call to log(...): (line 2131)
        # Processing the call arguments (line 2131)
        # Getting the type of 'vmax' (line 2131)
        vmax_151191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2131, 24), 'vmax', False)
        # Processing the call keyword arguments (line 2131)
        kwargs_151192 = {}
        # Getting the type of 'math' (line 2131)
        math_151189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2131, 15), 'math', False)
        # Obtaining the member 'log' of a type (line 2131)
        log_151190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2131, 15), math_151189, 'log')
        # Calling log(args, kwargs) (line 2131)
        log_call_result_151193 = invoke(stypy.reporting.localization.Localization(__file__, 2131, 15), log_151190, *[vmax_151191], **kwargs_151192)
        
        
        # Call to log(...): (line 2131)
        # Processing the call arguments (line 2131)
        # Getting the type of 'b' (line 2131)
        b_151196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2131, 41), 'b', False)
        # Processing the call keyword arguments (line 2131)
        kwargs_151197 = {}
        # Getting the type of 'math' (line 2131)
        math_151194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2131, 32), 'math', False)
        # Obtaining the member 'log' of a type (line 2131)
        log_151195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2131, 32), math_151194, 'log')
        # Calling log(args, kwargs) (line 2131)
        log_call_result_151198 = invoke(stypy.reporting.localization.Localization(__file__, 2131, 32), log_151195, *[b_151196], **kwargs_151197)
        
        # Applying the binary operator 'div' (line 2131)
        result_div_151199 = python_operator(stypy.reporting.localization.Localization(__file__, 2131, 15), 'div', log_call_result_151193, log_call_result_151198)
        
        # Assigning a type to the variable 'vmax' (line 2131)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2131, 8), 'vmax', result_div_151199)
        
        
        # Getting the type of 'vmax' (line 2133)
        vmax_151200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2133, 11), 'vmax')
        # Getting the type of 'vmin' (line 2133)
        vmin_151201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2133, 18), 'vmin')
        # Applying the binary operator '<' (line 2133)
        result_lt_151202 = python_operator(stypy.reporting.localization.Localization(__file__, 2133, 11), '<', vmax_151200, vmin_151201)
        
        # Testing the type of an if condition (line 2133)
        if_condition_151203 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2133, 8), result_lt_151202)
        # Assigning a type to the variable 'if_condition_151203' (line 2133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2133, 8), 'if_condition_151203', if_condition_151203)
        # SSA begins for if statement (line 2133)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2134):
        
        # Assigning a Name to a Name (line 2134):
        # Getting the type of 'vmax' (line 2134)
        vmax_151204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 25), 'vmax')
        # Assigning a type to the variable 'tuple_assignment_146340' (line 2134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 12), 'tuple_assignment_146340', vmax_151204)
        
        # Assigning a Name to a Name (line 2134):
        # Getting the type of 'vmin' (line 2134)
        vmin_151205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 31), 'vmin')
        # Assigning a type to the variable 'tuple_assignment_146341' (line 2134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 12), 'tuple_assignment_146341', vmin_151205)
        
        # Assigning a Name to a Name (line 2134):
        # Getting the type of 'tuple_assignment_146340' (line 2134)
        tuple_assignment_146340_151206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 12), 'tuple_assignment_146340')
        # Assigning a type to the variable 'vmin' (line 2134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 12), 'vmin', tuple_assignment_146340_151206)
        
        # Assigning a Name to a Name (line 2134):
        # Getting the type of 'tuple_assignment_146341' (line 2134)
        tuple_assignment_146341_151207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 12), 'tuple_assignment_146341')
        # Assigning a type to the variable 'vmax' (line 2134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 18), 'vmax', tuple_assignment_146341_151207)
        # SSA join for if statement (line 2133)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 2136):
        
        # Assigning a BinOp to a Name (line 2136):
        
        # Call to floor(...): (line 2136)
        # Processing the call arguments (line 2136)
        # Getting the type of 'vmax' (line 2136)
        vmax_151210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 28), 'vmax', False)
        # Processing the call keyword arguments (line 2136)
        kwargs_151211 = {}
        # Getting the type of 'math' (line 2136)
        math_151208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 17), 'math', False)
        # Obtaining the member 'floor' of a type (line 2136)
        floor_151209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2136, 17), math_151208, 'floor')
        # Calling floor(args, kwargs) (line 2136)
        floor_call_result_151212 = invoke(stypy.reporting.localization.Localization(__file__, 2136, 17), floor_151209, *[vmax_151210], **kwargs_151211)
        
        
        # Call to ceil(...): (line 2136)
        # Processing the call arguments (line 2136)
        # Getting the type of 'vmin' (line 2136)
        vmin_151215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 46), 'vmin', False)
        # Processing the call keyword arguments (line 2136)
        kwargs_151216 = {}
        # Getting the type of 'math' (line 2136)
        math_151213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 36), 'math', False)
        # Obtaining the member 'ceil' of a type (line 2136)
        ceil_151214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2136, 36), math_151213, 'ceil')
        # Calling ceil(args, kwargs) (line 2136)
        ceil_call_result_151217 = invoke(stypy.reporting.localization.Localization(__file__, 2136, 36), ceil_151214, *[vmin_151215], **kwargs_151216)
        
        # Applying the binary operator '-' (line 2136)
        result_sub_151218 = python_operator(stypy.reporting.localization.Localization(__file__, 2136, 17), '-', floor_call_result_151212, ceil_call_result_151217)
        
        # Assigning a type to the variable 'numdec' (line 2136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2136, 8), 'numdec', result_sub_151218)
        
        
        # Call to isinstance(...): (line 2138)
        # Processing the call arguments (line 2138)
        # Getting the type of 'self' (line 2138)
        self_151220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 22), 'self', False)
        # Obtaining the member '_subs' of a type (line 2138)
        _subs_151221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2138, 22), self_151220, '_subs')
        # Getting the type of 'six' (line 2138)
        six_151222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 34), 'six', False)
        # Obtaining the member 'string_types' of a type (line 2138)
        string_types_151223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2138, 34), six_151222, 'string_types')
        # Processing the call keyword arguments (line 2138)
        kwargs_151224 = {}
        # Getting the type of 'isinstance' (line 2138)
        isinstance_151219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2138)
        isinstance_call_result_151225 = invoke(stypy.reporting.localization.Localization(__file__, 2138, 11), isinstance_151219, *[_subs_151221, string_types_151223], **kwargs_151224)
        
        # Testing the type of an if condition (line 2138)
        if_condition_151226 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2138, 8), isinstance_call_result_151225)
        # Assigning a type to the variable 'if_condition_151226' (line 2138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2138, 8), 'if_condition_151226', if_condition_151226)
        # SSA begins for if statement (line 2138)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a IfExp to a Name (line 2139):
        
        # Assigning a IfExp to a Name (line 2139):
        
        
        # Getting the type of 'self' (line 2139)
        self_151227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2139, 28), 'self')
        # Obtaining the member '_subs' of a type (line 2139)
        _subs_151228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2139, 28), self_151227, '_subs')
        unicode_151229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2139, 42), 'unicode', u'auto')
        # Applying the binary operator '==' (line 2139)
        result_eq_151230 = python_operator(stypy.reporting.localization.Localization(__file__, 2139, 28), '==', _subs_151228, unicode_151229)
        
        # Testing the type of an if expression (line 2139)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2139, 21), result_eq_151230)
        # SSA begins for if expression (line 2139)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        float_151231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2139, 21), 'float')
        # SSA branch for the else part of an if expression (line 2139)
        module_type_store.open_ssa_branch('if expression else')
        float_151232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2139, 54), 'float')
        # SSA join for if expression (line 2139)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_151233 = union_type.UnionType.add(float_151231, float_151232)
        
        # Assigning a type to the variable '_first' (line 2139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2139, 12), '_first', if_exp_151233)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'numdec' (line 2140)
        numdec_151234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2140, 15), 'numdec')
        int_151235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2140, 24), 'int')
        # Applying the binary operator '>' (line 2140)
        result_gt_151236 = python_operator(stypy.reporting.localization.Localization(__file__, 2140, 15), '>', numdec_151234, int_151235)
        
        
        # Getting the type of 'b' (line 2140)
        b_151237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2140, 30), 'b')
        int_151238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2140, 34), 'int')
        # Applying the binary operator '<' (line 2140)
        result_lt_151239 = python_operator(stypy.reporting.localization.Localization(__file__, 2140, 30), '<', b_151237, int_151238)
        
        # Applying the binary operator 'or' (line 2140)
        result_or_keyword_151240 = python_operator(stypy.reporting.localization.Localization(__file__, 2140, 15), 'or', result_gt_151236, result_lt_151239)
        
        # Testing the type of an if condition (line 2140)
        if_condition_151241 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2140, 12), result_or_keyword_151240)
        # Assigning a type to the variable 'if_condition_151241' (line 2140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2140, 12), 'if_condition_151241', if_condition_151241)
        # SSA begins for if statement (line 2140)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 2141)
        self_151242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 19), 'self')
        # Obtaining the member '_subs' of a type (line 2141)
        _subs_151243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2141, 19), self_151242, '_subs')
        unicode_151244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2141, 33), 'unicode', u'auto')
        # Applying the binary operator '==' (line 2141)
        result_eq_151245 = python_operator(stypy.reporting.localization.Localization(__file__, 2141, 19), '==', _subs_151243, unicode_151244)
        
        # Testing the type of an if condition (line 2141)
        if_condition_151246 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2141, 16), result_eq_151245)
        # Assigning a type to the variable 'if_condition_151246' (line 2141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2141, 16), 'if_condition_151246', if_condition_151246)
        # SSA begins for if statement (line 2141)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to array(...): (line 2142)
        # Processing the call arguments (line 2142)
        
        # Obtaining an instance of the builtin type 'list' (line 2142)
        list_151249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2142, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2142)
        
        # Processing the call keyword arguments (line 2142)
        kwargs_151250 = {}
        # Getting the type of 'np' (line 2142)
        np_151247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2142, 27), 'np', False)
        # Obtaining the member 'array' of a type (line 2142)
        array_151248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2142, 27), np_151247, 'array')
        # Calling array(args, kwargs) (line 2142)
        array_call_result_151251 = invoke(stypy.reporting.localization.Localization(__file__, 2142, 27), array_151248, *[list_151249], **kwargs_151250)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2142, 20), 'stypy_return_type', array_call_result_151251)
        # SSA branch for the else part of an if statement (line 2141)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2144):
        
        # Assigning a Call to a Name (line 2144):
        
        # Call to array(...): (line 2144)
        # Processing the call arguments (line 2144)
        
        # Obtaining an instance of the builtin type 'list' (line 2144)
        list_151254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2144)
        # Adding element type (line 2144)
        float_151255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, 37), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2144, 36), list_151254, float_151255)
        
        # Processing the call keyword arguments (line 2144)
        kwargs_151256 = {}
        # Getting the type of 'np' (line 2144)
        np_151252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 27), 'np', False)
        # Obtaining the member 'array' of a type (line 2144)
        array_151253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2144, 27), np_151252, 'array')
        # Calling array(args, kwargs) (line 2144)
        array_call_result_151257 = invoke(stypy.reporting.localization.Localization(__file__, 2144, 27), array_151253, *[list_151254], **kwargs_151256)
        
        # Assigning a type to the variable 'subs' (line 2144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2144, 20), 'subs', array_call_result_151257)
        # SSA join for if statement (line 2141)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2140)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2146):
        
        # Assigning a Call to a Name (line 2146):
        
        # Call to arange(...): (line 2146)
        # Processing the call arguments (line 2146)
        # Getting the type of '_first' (line 2146)
        _first_151260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 33), '_first', False)
        # Getting the type of 'b' (line 2146)
        b_151261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 41), 'b', False)
        # Processing the call keyword arguments (line 2146)
        kwargs_151262 = {}
        # Getting the type of 'np' (line 2146)
        np_151258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 23), 'np', False)
        # Obtaining the member 'arange' of a type (line 2146)
        arange_151259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2146, 23), np_151258, 'arange')
        # Calling arange(args, kwargs) (line 2146)
        arange_call_result_151263 = invoke(stypy.reporting.localization.Localization(__file__, 2146, 23), arange_151259, *[_first_151260, b_151261], **kwargs_151262)
        
        # Assigning a type to the variable 'subs' (line 2146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2146, 16), 'subs', arange_call_result_151263)
        # SSA join for if statement (line 2140)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2138)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 2148):
        
        # Assigning a Attribute to a Name (line 2148):
        # Getting the type of 'self' (line 2148)
        self_151264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 19), 'self')
        # Obtaining the member '_subs' of a type (line 2148)
        _subs_151265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2148, 19), self_151264, '_subs')
        # Assigning a type to the variable 'subs' (line 2148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2148, 12), 'subs', _subs_151265)
        # SSA join for if statement (line 2138)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 2150):
        
        # Assigning a Num to a Name (line 2150):
        int_151266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2150, 17), 'int')
        # Assigning a type to the variable 'stride' (line 2150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2150, 8), 'stride', int_151266)
        
        
        # Obtaining the type of the subscript
        unicode_151267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2152, 20), 'unicode', u'_internal.classic_mode')
        # Getting the type of 'rcParams' (line 2152)
        rcParams_151268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 11), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 2152)
        getitem___151269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2152, 11), rcParams_151268, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2152)
        subscript_call_result_151270 = invoke(stypy.reporting.localization.Localization(__file__, 2152, 11), getitem___151269, unicode_151267)
        
        # Testing the type of an if condition (line 2152)
        if_condition_151271 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2152, 8), subscript_call_result_151270)
        # Assigning a type to the variable 'if_condition_151271' (line 2152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2152, 8), 'if_condition_151271', if_condition_151271)
        # SSA begins for if statement (line 2152)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'numdec' (line 2154)
        numdec_151272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 18), 'numdec')
        # Getting the type of 'stride' (line 2154)
        stride_151273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 27), 'stride')
        # Applying the binary operator 'div' (line 2154)
        result_div_151274 = python_operator(stypy.reporting.localization.Localization(__file__, 2154, 18), 'div', numdec_151272, stride_151273)
        
        int_151275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2154, 36), 'int')
        # Applying the binary operator '+' (line 2154)
        result_add_151276 = python_operator(stypy.reporting.localization.Localization(__file__, 2154, 18), '+', result_div_151274, int_151275)
        
        # Getting the type of 'numticks' (line 2154)
        numticks_151277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 40), 'numticks')
        # Applying the binary operator '>' (line 2154)
        result_gt_151278 = python_operator(stypy.reporting.localization.Localization(__file__, 2154, 18), '>', result_add_151276, numticks_151277)
        
        # Testing the type of an if condition (line 2154)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2154, 12), result_gt_151278)
        # SSA begins for while statement (line 2154)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Getting the type of 'stride' (line 2155)
        stride_151279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 16), 'stride')
        int_151280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2155, 26), 'int')
        # Applying the binary operator '+=' (line 2155)
        result_iadd_151281 = python_operator(stypy.reporting.localization.Localization(__file__, 2155, 16), '+=', stride_151279, int_151280)
        # Assigning a type to the variable 'stride' (line 2155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2155, 16), 'stride', result_iadd_151281)
        
        # SSA join for while statement (line 2154)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2152)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'numdec' (line 2157)
        numdec_151282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 18), 'numdec')
        # Getting the type of 'stride' (line 2157)
        stride_151283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 28), 'stride')
        # Applying the binary operator '//' (line 2157)
        result_floordiv_151284 = python_operator(stypy.reporting.localization.Localization(__file__, 2157, 18), '//', numdec_151282, stride_151283)
        
        int_151285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2157, 37), 'int')
        # Applying the binary operator '+' (line 2157)
        result_add_151286 = python_operator(stypy.reporting.localization.Localization(__file__, 2157, 18), '+', result_floordiv_151284, int_151285)
        
        # Getting the type of 'numticks' (line 2157)
        numticks_151287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 41), 'numticks')
        # Applying the binary operator '>' (line 2157)
        result_gt_151288 = python_operator(stypy.reporting.localization.Localization(__file__, 2157, 18), '>', result_add_151286, numticks_151287)
        
        # Testing the type of an if condition (line 2157)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2157, 12), result_gt_151288)
        # SSA begins for while statement (line 2157)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Getting the type of 'stride' (line 2158)
        stride_151289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 16), 'stride')
        int_151290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2158, 26), 'int')
        # Applying the binary operator '+=' (line 2158)
        result_iadd_151291 = python_operator(stypy.reporting.localization.Localization(__file__, 2158, 16), '+=', stride_151289, int_151290)
        # Assigning a type to the variable 'stride' (line 2158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2158, 16), 'stride', result_iadd_151291)
        
        # SSA join for while statement (line 2157)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2152)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BoolOp to a Name (line 2161):
        
        # Assigning a BoolOp to a Name (line 2161):
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 2161)
        # Processing the call arguments (line 2161)
        # Getting the type of 'subs' (line 2161)
        subs_151293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 24), 'subs', False)
        # Processing the call keyword arguments (line 2161)
        kwargs_151294 = {}
        # Getting the type of 'len' (line 2161)
        len_151292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 20), 'len', False)
        # Calling len(args, kwargs) (line 2161)
        len_call_result_151295 = invoke(stypy.reporting.localization.Localization(__file__, 2161, 20), len_151292, *[subs_151293], **kwargs_151294)
        
        int_151296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2161, 32), 'int')
        # Applying the binary operator '>' (line 2161)
        result_gt_151297 = python_operator(stypy.reporting.localization.Localization(__file__, 2161, 20), '>', len_call_result_151295, int_151296)
        
        
        # Evaluating a boolean operation
        
        # Call to len(...): (line 2161)
        # Processing the call arguments (line 2161)
        
        # Getting the type of 'subs' (line 2161)
        subs_151299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 42), 'subs', False)
        int_151300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2161, 50), 'int')
        # Applying the binary operator '==' (line 2161)
        result_eq_151301 = python_operator(stypy.reporting.localization.Localization(__file__, 2161, 42), '==', subs_151299, int_151300)
        
        # Processing the call keyword arguments (line 2161)
        kwargs_151302 = {}
        # Getting the type of 'len' (line 2161)
        len_151298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 38), 'len', False)
        # Calling len(args, kwargs) (line 2161)
        len_call_result_151303 = invoke(stypy.reporting.localization.Localization(__file__, 2161, 38), len_151298, *[result_eq_151301], **kwargs_151302)
        
        
        
        # Obtaining the type of the subscript
        int_151304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2161, 62), 'int')
        # Getting the type of 'subs' (line 2161)
        subs_151305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 57), 'subs')
        # Obtaining the member '__getitem__' of a type (line 2161)
        getitem___151306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2161, 57), subs_151305, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2161)
        subscript_call_result_151307 = invoke(stypy.reporting.localization.Localization(__file__, 2161, 57), getitem___151306, int_151304)
        
        float_151308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2161, 68), 'float')
        # Applying the binary operator '!=' (line 2161)
        result_ne_151309 = python_operator(stypy.reporting.localization.Localization(__file__, 2161, 57), '!=', subscript_call_result_151307, float_151308)
        
        # Applying the binary operator 'and' (line 2161)
        result_and_keyword_151310 = python_operator(stypy.reporting.localization.Localization(__file__, 2161, 38), 'and', len_call_result_151303, result_ne_151309)
        
        # Applying the binary operator 'or' (line 2161)
        result_or_keyword_151311 = python_operator(stypy.reporting.localization.Localization(__file__, 2161, 20), 'or', result_gt_151297, result_and_keyword_151310)
        
        # Assigning a type to the variable 'have_subs' (line 2161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2161, 8), 'have_subs', result_or_keyword_151311)
        
        # Assigning a Call to a Name (line 2163):
        
        # Assigning a Call to a Name (line 2163):
        
        # Call to arange(...): (line 2163)
        # Processing the call arguments (line 2163)
        
        # Call to floor(...): (line 2163)
        # Processing the call arguments (line 2163)
        # Getting the type of 'vmin' (line 2163)
        vmin_151316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 39), 'vmin', False)
        # Processing the call keyword arguments (line 2163)
        kwargs_151317 = {}
        # Getting the type of 'math' (line 2163)
        math_151314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 28), 'math', False)
        # Obtaining the member 'floor' of a type (line 2163)
        floor_151315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2163, 28), math_151314, 'floor')
        # Calling floor(args, kwargs) (line 2163)
        floor_call_result_151318 = invoke(stypy.reporting.localization.Localization(__file__, 2163, 28), floor_151315, *[vmin_151316], **kwargs_151317)
        
        # Getting the type of 'stride' (line 2163)
        stride_151319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 47), 'stride', False)
        # Applying the binary operator '-' (line 2163)
        result_sub_151320 = python_operator(stypy.reporting.localization.Localization(__file__, 2163, 28), '-', floor_call_result_151318, stride_151319)
        
        
        # Call to ceil(...): (line 2164)
        # Processing the call arguments (line 2164)
        # Getting the type of 'vmax' (line 2164)
        vmax_151323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2164, 38), 'vmax', False)
        # Processing the call keyword arguments (line 2164)
        kwargs_151324 = {}
        # Getting the type of 'math' (line 2164)
        math_151321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2164, 28), 'math', False)
        # Obtaining the member 'ceil' of a type (line 2164)
        ceil_151322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2164, 28), math_151321, 'ceil')
        # Calling ceil(args, kwargs) (line 2164)
        ceil_call_result_151325 = invoke(stypy.reporting.localization.Localization(__file__, 2164, 28), ceil_151322, *[vmax_151323], **kwargs_151324)
        
        int_151326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2164, 46), 'int')
        # Getting the type of 'stride' (line 2164)
        stride_151327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2164, 50), 'stride', False)
        # Applying the binary operator '*' (line 2164)
        result_mul_151328 = python_operator(stypy.reporting.localization.Localization(__file__, 2164, 46), '*', int_151326, stride_151327)
        
        # Applying the binary operator '+' (line 2164)
        result_add_151329 = python_operator(stypy.reporting.localization.Localization(__file__, 2164, 28), '+', ceil_call_result_151325, result_mul_151328)
        
        # Getting the type of 'stride' (line 2164)
        stride_151330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2164, 58), 'stride', False)
        # Processing the call keyword arguments (line 2163)
        kwargs_151331 = {}
        # Getting the type of 'np' (line 2163)
        np_151312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 18), 'np', False)
        # Obtaining the member 'arange' of a type (line 2163)
        arange_151313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2163, 18), np_151312, 'arange')
        # Calling arange(args, kwargs) (line 2163)
        arange_call_result_151332 = invoke(stypy.reporting.localization.Localization(__file__, 2163, 18), arange_151313, *[result_sub_151320, result_add_151329, stride_151330], **kwargs_151331)
        
        # Assigning a type to the variable 'decades' (line 2163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2163, 8), 'decades', arange_call_result_151332)
        
        # Type idiom detected: calculating its left and rigth part (line 2166)
        unicode_151333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2166, 25), 'unicode', u'_transform')
        # Getting the type of 'self' (line 2166)
        self_151334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 19), 'self')
        
        (may_be_151335, more_types_in_union_151336) = may_provide_member(unicode_151333, self_151334)

        if may_be_151335:

            if more_types_in_union_151336:
                # Runtime conditional SSA (line 2166)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 2166)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2166, 8), 'self', remove_not_member_provider_from_union(self_151334, u'_transform'))
            
            # Assigning a Call to a Name (line 2167):
            
            # Assigning a Call to a Name (line 2167):
            
            # Call to transform(...): (line 2167)
            # Processing the call arguments (line 2167)
            # Getting the type of 'decades' (line 2167)
            decades_151343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 60), 'decades', False)
            # Processing the call keyword arguments (line 2167)
            kwargs_151344 = {}
            
            # Call to inverted(...): (line 2167)
            # Processing the call keyword arguments (line 2167)
            kwargs_151340 = {}
            # Getting the type of 'self' (line 2167)
            self_151337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 23), 'self', False)
            # Obtaining the member '_transform' of a type (line 2167)
            _transform_151338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2167, 23), self_151337, '_transform')
            # Obtaining the member 'inverted' of a type (line 2167)
            inverted_151339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2167, 23), _transform_151338, 'inverted')
            # Calling inverted(args, kwargs) (line 2167)
            inverted_call_result_151341 = invoke(stypy.reporting.localization.Localization(__file__, 2167, 23), inverted_151339, *[], **kwargs_151340)
            
            # Obtaining the member 'transform' of a type (line 2167)
            transform_151342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2167, 23), inverted_call_result_151341, 'transform')
            # Calling transform(args, kwargs) (line 2167)
            transform_call_result_151345 = invoke(stypy.reporting.localization.Localization(__file__, 2167, 23), transform_151342, *[decades_151343], **kwargs_151344)
            
            # Assigning a type to the variable 'ticklocs' (line 2167)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2167, 12), 'ticklocs', transform_call_result_151345)
            
            # Getting the type of 'have_subs' (line 2168)
            have_subs_151346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2168, 15), 'have_subs')
            # Testing the type of an if condition (line 2168)
            if_condition_151347 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2168, 12), have_subs_151346)
            # Assigning a type to the variable 'if_condition_151347' (line 2168)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2168, 12), 'if_condition_151347', if_condition_151347)
            # SSA begins for if statement (line 2168)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            # Getting the type of 'stride' (line 2169)
            stride_151348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 19), 'stride')
            int_151349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2169, 29), 'int')
            # Applying the binary operator '==' (line 2169)
            result_eq_151350 = python_operator(stypy.reporting.localization.Localization(__file__, 2169, 19), '==', stride_151348, int_151349)
            
            # Testing the type of an if condition (line 2169)
            if_condition_151351 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2169, 16), result_eq_151350)
            # Assigning a type to the variable 'if_condition_151351' (line 2169)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 16), 'if_condition_151351', if_condition_151351)
            # SSA begins for if statement (line 2169)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 2170):
            
            # Assigning a Call to a Name (line 2170):
            
            # Call to ravel(...): (line 2170)
            # Processing the call arguments (line 2170)
            
            # Call to outer(...): (line 2170)
            # Processing the call arguments (line 2170)
            # Getting the type of 'subs' (line 2170)
            subs_151356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2170, 49), 'subs', False)
            # Getting the type of 'ticklocs' (line 2170)
            ticklocs_151357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2170, 55), 'ticklocs', False)
            # Processing the call keyword arguments (line 2170)
            kwargs_151358 = {}
            # Getting the type of 'np' (line 2170)
            np_151354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2170, 40), 'np', False)
            # Obtaining the member 'outer' of a type (line 2170)
            outer_151355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2170, 40), np_151354, 'outer')
            # Calling outer(args, kwargs) (line 2170)
            outer_call_result_151359 = invoke(stypy.reporting.localization.Localization(__file__, 2170, 40), outer_151355, *[subs_151356, ticklocs_151357], **kwargs_151358)
            
            # Processing the call keyword arguments (line 2170)
            kwargs_151360 = {}
            # Getting the type of 'np' (line 2170)
            np_151352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2170, 31), 'np', False)
            # Obtaining the member 'ravel' of a type (line 2170)
            ravel_151353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2170, 31), np_151352, 'ravel')
            # Calling ravel(args, kwargs) (line 2170)
            ravel_call_result_151361 = invoke(stypy.reporting.localization.Localization(__file__, 2170, 31), ravel_151353, *[outer_call_result_151359], **kwargs_151360)
            
            # Assigning a type to the variable 'ticklocs' (line 2170)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2170, 20), 'ticklocs', ravel_call_result_151361)
            # SSA branch for the else part of an if statement (line 2169)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a List to a Name (line 2172):
            
            # Assigning a List to a Name (line 2172):
            
            # Obtaining an instance of the builtin type 'list' (line 2172)
            list_151362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2172, 31), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2172)
            
            # Assigning a type to the variable 'ticklocs' (line 2172)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2172, 20), 'ticklocs', list_151362)
            # SSA join for if statement (line 2169)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 2168)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_151336:
                # Runtime conditional SSA for else branch (line 2166)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_151335) or more_types_in_union_151336):
            # Assigning a type to the variable 'self' (line 2166)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2166, 8), 'self', remove_member_provider_from_union(self_151334, u'_transform'))
            
            # Getting the type of 'have_subs' (line 2174)
            have_subs_151363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 15), 'have_subs')
            # Testing the type of an if condition (line 2174)
            if_condition_151364 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2174, 12), have_subs_151363)
            # Assigning a type to the variable 'if_condition_151364' (line 2174)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2174, 12), 'if_condition_151364', if_condition_151364)
            # SSA begins for if statement (line 2174)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a List to a Name (line 2175):
            
            # Assigning a List to a Name (line 2175):
            
            # Obtaining an instance of the builtin type 'list' (line 2175)
            list_151365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2175, 27), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2175)
            
            # Assigning a type to the variable 'ticklocs' (line 2175)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2175, 16), 'ticklocs', list_151365)
            
            
            # Getting the type of 'stride' (line 2176)
            stride_151366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 19), 'stride')
            int_151367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2176, 29), 'int')
            # Applying the binary operator '==' (line 2176)
            result_eq_151368 = python_operator(stypy.reporting.localization.Localization(__file__, 2176, 19), '==', stride_151366, int_151367)
            
            # Testing the type of an if condition (line 2176)
            if_condition_151369 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2176, 16), result_eq_151368)
            # Assigning a type to the variable 'if_condition_151369' (line 2176)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2176, 16), 'if_condition_151369', if_condition_151369)
            # SSA begins for if statement (line 2176)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of 'b' (line 2177)
            b_151370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 39), 'b')
            # Getting the type of 'decades' (line 2177)
            decades_151371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 44), 'decades')
            # Applying the binary operator '**' (line 2177)
            result_pow_151372 = python_operator(stypy.reporting.localization.Localization(__file__, 2177, 39), '**', b_151370, decades_151371)
            
            # Testing the type of a for loop iterable (line 2177)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2177, 20), result_pow_151372)
            # Getting the type of the for loop variable (line 2177)
            for_loop_var_151373 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2177, 20), result_pow_151372)
            # Assigning a type to the variable 'decadeStart' (line 2177)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2177, 20), 'decadeStart', for_loop_var_151373)
            # SSA begins for a for statement (line 2177)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Call to extend(...): (line 2178)
            # Processing the call arguments (line 2178)
            # Getting the type of 'subs' (line 2178)
            subs_151376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 40), 'subs', False)
            # Getting the type of 'decadeStart' (line 2178)
            decadeStart_151377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 47), 'decadeStart', False)
            # Applying the binary operator '*' (line 2178)
            result_mul_151378 = python_operator(stypy.reporting.localization.Localization(__file__, 2178, 40), '*', subs_151376, decadeStart_151377)
            
            # Processing the call keyword arguments (line 2178)
            kwargs_151379 = {}
            # Getting the type of 'ticklocs' (line 2178)
            ticklocs_151374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 24), 'ticklocs', False)
            # Obtaining the member 'extend' of a type (line 2178)
            extend_151375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2178, 24), ticklocs_151374, 'extend')
            # Calling extend(args, kwargs) (line 2178)
            extend_call_result_151380 = invoke(stypy.reporting.localization.Localization(__file__, 2178, 24), extend_151375, *[result_mul_151378], **kwargs_151379)
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 2176)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 2174)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a BinOp to a Name (line 2180):
            
            # Assigning a BinOp to a Name (line 2180):
            # Getting the type of 'b' (line 2180)
            b_151381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 27), 'b')
            # Getting the type of 'decades' (line 2180)
            decades_151382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 32), 'decades')
            # Applying the binary operator '**' (line 2180)
            result_pow_151383 = python_operator(stypy.reporting.localization.Localization(__file__, 2180, 27), '**', b_151381, decades_151382)
            
            # Assigning a type to the variable 'ticklocs' (line 2180)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2180, 16), 'ticklocs', result_pow_151383)
            # SSA join for if statement (line 2174)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_151335 and more_types_in_union_151336):
                # SSA join for if statement (line 2166)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to raise_if_exceeds(...): (line 2182)
        # Processing the call arguments (line 2182)
        
        # Call to asarray(...): (line 2182)
        # Processing the call arguments (line 2182)
        # Getting the type of 'ticklocs' (line 2182)
        ticklocs_151388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 48), 'ticklocs', False)
        # Processing the call keyword arguments (line 2182)
        kwargs_151389 = {}
        # Getting the type of 'np' (line 2182)
        np_151386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 37), 'np', False)
        # Obtaining the member 'asarray' of a type (line 2182)
        asarray_151387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 37), np_151386, 'asarray')
        # Calling asarray(args, kwargs) (line 2182)
        asarray_call_result_151390 = invoke(stypy.reporting.localization.Localization(__file__, 2182, 37), asarray_151387, *[ticklocs_151388], **kwargs_151389)
        
        # Processing the call keyword arguments (line 2182)
        kwargs_151391 = {}
        # Getting the type of 'self' (line 2182)
        self_151384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 15), 'self', False)
        # Obtaining the member 'raise_if_exceeds' of a type (line 2182)
        raise_if_exceeds_151385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 15), self_151384, 'raise_if_exceeds')
        # Calling raise_if_exceeds(args, kwargs) (line 2182)
        raise_if_exceeds_call_result_151392 = invoke(stypy.reporting.localization.Localization(__file__, 2182, 15), raise_if_exceeds_151385, *[asarray_call_result_151390], **kwargs_151391)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2182, 8), 'stypy_return_type', raise_if_exceeds_call_result_151392)
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 2103)
        stypy_return_type_151393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_151393)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_151393


    @norecursion
    def view_limits(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'view_limits'
        module_type_store = module_type_store.open_function_context('view_limits', 2184, 4, False)
        # Assigning a type to the variable 'self' (line 2185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2185, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogLocator.view_limits.__dict__.__setitem__('stypy_localization', localization)
        LogLocator.view_limits.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogLocator.view_limits.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogLocator.view_limits.__dict__.__setitem__('stypy_function_name', 'LogLocator.view_limits')
        LogLocator.view_limits.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        LogLocator.view_limits.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogLocator.view_limits.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogLocator.view_limits.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogLocator.view_limits.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogLocator.view_limits.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogLocator.view_limits.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogLocator.view_limits', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'view_limits', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'view_limits(...)' code ##################

        unicode_151394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2185, 8), 'unicode', u'Try to choose the view limits intelligently')
        
        # Assigning a Attribute to a Name (line 2186):
        
        # Assigning a Attribute to a Name (line 2186):
        # Getting the type of 'self' (line 2186)
        self_151395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 12), 'self')
        # Obtaining the member '_base' of a type (line 2186)
        _base_151396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 12), self_151395, '_base')
        # Assigning a type to the variable 'b' (line 2186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2186, 8), 'b', _base_151396)
        
        # Assigning a Call to a Tuple (line 2188):
        
        # Assigning a Call to a Name:
        
        # Call to nonsingular(...): (line 2188)
        # Processing the call arguments (line 2188)
        # Getting the type of 'vmin' (line 2188)
        vmin_151399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 38), 'vmin', False)
        # Getting the type of 'vmax' (line 2188)
        vmax_151400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 44), 'vmax', False)
        # Processing the call keyword arguments (line 2188)
        kwargs_151401 = {}
        # Getting the type of 'self' (line 2188)
        self_151397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 21), 'self', False)
        # Obtaining the member 'nonsingular' of a type (line 2188)
        nonsingular_151398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 21), self_151397, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 2188)
        nonsingular_call_result_151402 = invoke(stypy.reporting.localization.Localization(__file__, 2188, 21), nonsingular_151398, *[vmin_151399, vmax_151400], **kwargs_151401)
        
        # Assigning a type to the variable 'call_assignment_146342' (line 2188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2188, 8), 'call_assignment_146342', nonsingular_call_result_151402)
        
        # Assigning a Call to a Name (line 2188):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_151405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2188, 8), 'int')
        # Processing the call keyword arguments
        kwargs_151406 = {}
        # Getting the type of 'call_assignment_146342' (line 2188)
        call_assignment_146342_151403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 8), 'call_assignment_146342', False)
        # Obtaining the member '__getitem__' of a type (line 2188)
        getitem___151404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 8), call_assignment_146342_151403, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_151407 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___151404, *[int_151405], **kwargs_151406)
        
        # Assigning a type to the variable 'call_assignment_146343' (line 2188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2188, 8), 'call_assignment_146343', getitem___call_result_151407)
        
        # Assigning a Name to a Name (line 2188):
        # Getting the type of 'call_assignment_146343' (line 2188)
        call_assignment_146343_151408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 8), 'call_assignment_146343')
        # Assigning a type to the variable 'vmin' (line 2188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2188, 8), 'vmin', call_assignment_146343_151408)
        
        # Assigning a Call to a Name (line 2188):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_151411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2188, 8), 'int')
        # Processing the call keyword arguments
        kwargs_151412 = {}
        # Getting the type of 'call_assignment_146342' (line 2188)
        call_assignment_146342_151409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 8), 'call_assignment_146342', False)
        # Obtaining the member '__getitem__' of a type (line 2188)
        getitem___151410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 8), call_assignment_146342_151409, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_151413 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___151410, *[int_151411], **kwargs_151412)
        
        # Assigning a type to the variable 'call_assignment_146344' (line 2188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2188, 8), 'call_assignment_146344', getitem___call_result_151413)
        
        # Assigning a Name to a Name (line 2188):
        # Getting the type of 'call_assignment_146344' (line 2188)
        call_assignment_146344_151414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 8), 'call_assignment_146344')
        # Assigning a type to the variable 'vmax' (line 2188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2188, 14), 'vmax', call_assignment_146344_151414)
        
        
        # Getting the type of 'self' (line 2190)
        self_151415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2190, 11), 'self')
        # Obtaining the member 'axis' of a type (line 2190)
        axis_151416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2190, 11), self_151415, 'axis')
        # Obtaining the member 'axes' of a type (line 2190)
        axes_151417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2190, 11), axis_151416, 'axes')
        # Obtaining the member 'name' of a type (line 2190)
        name_151418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2190, 11), axes_151417, 'name')
        unicode_151419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2190, 34), 'unicode', u'polar')
        # Applying the binary operator '==' (line 2190)
        result_eq_151420 = python_operator(stypy.reporting.localization.Localization(__file__, 2190, 11), '==', name_151418, unicode_151419)
        
        # Testing the type of an if condition (line 2190)
        if_condition_151421 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2190, 8), result_eq_151420)
        # Assigning a type to the variable 'if_condition_151421' (line 2190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2190, 8), 'if_condition_151421', if_condition_151421)
        # SSA begins for if statement (line 2190)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2191):
        
        # Assigning a Call to a Name (line 2191):
        
        # Call to ceil(...): (line 2191)
        # Processing the call arguments (line 2191)
        
        # Call to log(...): (line 2191)
        # Processing the call arguments (line 2191)
        # Getting the type of 'vmax' (line 2191)
        vmax_151426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 38), 'vmax', False)
        # Processing the call keyword arguments (line 2191)
        kwargs_151427 = {}
        # Getting the type of 'math' (line 2191)
        math_151424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 29), 'math', False)
        # Obtaining the member 'log' of a type (line 2191)
        log_151425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2191, 29), math_151424, 'log')
        # Calling log(args, kwargs) (line 2191)
        log_call_result_151428 = invoke(stypy.reporting.localization.Localization(__file__, 2191, 29), log_151425, *[vmax_151426], **kwargs_151427)
        
        
        # Call to log(...): (line 2191)
        # Processing the call arguments (line 2191)
        # Getting the type of 'b' (line 2191)
        b_151431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 55), 'b', False)
        # Processing the call keyword arguments (line 2191)
        kwargs_151432 = {}
        # Getting the type of 'math' (line 2191)
        math_151429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 46), 'math', False)
        # Obtaining the member 'log' of a type (line 2191)
        log_151430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2191, 46), math_151429, 'log')
        # Calling log(args, kwargs) (line 2191)
        log_call_result_151433 = invoke(stypy.reporting.localization.Localization(__file__, 2191, 46), log_151430, *[b_151431], **kwargs_151432)
        
        # Applying the binary operator 'div' (line 2191)
        result_div_151434 = python_operator(stypy.reporting.localization.Localization(__file__, 2191, 29), 'div', log_call_result_151428, log_call_result_151433)
        
        # Processing the call keyword arguments (line 2191)
        kwargs_151435 = {}
        # Getting the type of 'math' (line 2191)
        math_151422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 19), 'math', False)
        # Obtaining the member 'ceil' of a type (line 2191)
        ceil_151423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2191, 19), math_151422, 'ceil')
        # Calling ceil(args, kwargs) (line 2191)
        ceil_call_result_151436 = invoke(stypy.reporting.localization.Localization(__file__, 2191, 19), ceil_151423, *[result_div_151434], **kwargs_151435)
        
        # Assigning a type to the variable 'vmax' (line 2191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2191, 12), 'vmax', ceil_call_result_151436)
        
        # Assigning a BinOp to a Name (line 2192):
        
        # Assigning a BinOp to a Name (line 2192):
        # Getting the type of 'b' (line 2192)
        b_151437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 19), 'b')
        # Getting the type of 'vmax' (line 2192)
        vmax_151438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 25), 'vmax')
        # Getting the type of 'self' (line 2192)
        self_151439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 32), 'self')
        # Obtaining the member 'numdecs' of a type (line 2192)
        numdecs_151440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2192, 32), self_151439, 'numdecs')
        # Applying the binary operator '-' (line 2192)
        result_sub_151441 = python_operator(stypy.reporting.localization.Localization(__file__, 2192, 25), '-', vmax_151438, numdecs_151440)
        
        # Applying the binary operator '**' (line 2192)
        result_pow_151442 = python_operator(stypy.reporting.localization.Localization(__file__, 2192, 19), '**', b_151437, result_sub_151441)
        
        # Assigning a type to the variable 'vmin' (line 2192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2192, 12), 'vmin', result_pow_151442)
        # SSA join for if statement (line 2190)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        unicode_151443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2194, 20), 'unicode', u'axes.autolimit_mode')
        # Getting the type of 'rcParams' (line 2194)
        rcParams_151444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 11), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 2194)
        getitem___151445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2194, 11), rcParams_151444, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2194)
        subscript_call_result_151446 = invoke(stypy.reporting.localization.Localization(__file__, 2194, 11), getitem___151445, unicode_151443)
        
        unicode_151447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2194, 46), 'unicode', u'round_numbers')
        # Applying the binary operator '==' (line 2194)
        result_eq_151448 = python_operator(stypy.reporting.localization.Localization(__file__, 2194, 11), '==', subscript_call_result_151446, unicode_151447)
        
        # Testing the type of an if condition (line 2194)
        if_condition_151449 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2194, 8), result_eq_151448)
        # Assigning a type to the variable 'if_condition_151449' (line 2194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2194, 8), 'if_condition_151449', if_condition_151449)
        # SSA begins for if statement (line 2194)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to is_decade(...): (line 2195)
        # Processing the call arguments (line 2195)
        # Getting the type of 'vmin' (line 2195)
        vmin_151451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 29), 'vmin', False)
        # Getting the type of 'self' (line 2195)
        self_151452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 35), 'self', False)
        # Obtaining the member '_base' of a type (line 2195)
        _base_151453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2195, 35), self_151452, '_base')
        # Processing the call keyword arguments (line 2195)
        kwargs_151454 = {}
        # Getting the type of 'is_decade' (line 2195)
        is_decade_151450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 19), 'is_decade', False)
        # Calling is_decade(args, kwargs) (line 2195)
        is_decade_call_result_151455 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 19), is_decade_151450, *[vmin_151451, _base_151453], **kwargs_151454)
        
        # Applying the 'not' unary operator (line 2195)
        result_not__151456 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 15), 'not', is_decade_call_result_151455)
        
        # Testing the type of an if condition (line 2195)
        if_condition_151457 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2195, 12), result_not__151456)
        # Assigning a type to the variable 'if_condition_151457' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 12), 'if_condition_151457', if_condition_151457)
        # SSA begins for if statement (line 2195)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2196):
        
        # Assigning a Call to a Name (line 2196):
        
        # Call to decade_down(...): (line 2196)
        # Processing the call arguments (line 2196)
        # Getting the type of 'vmin' (line 2196)
        vmin_151459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 35), 'vmin', False)
        # Getting the type of 'self' (line 2196)
        self_151460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 41), 'self', False)
        # Obtaining the member '_base' of a type (line 2196)
        _base_151461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2196, 41), self_151460, '_base')
        # Processing the call keyword arguments (line 2196)
        kwargs_151462 = {}
        # Getting the type of 'decade_down' (line 2196)
        decade_down_151458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 23), 'decade_down', False)
        # Calling decade_down(args, kwargs) (line 2196)
        decade_down_call_result_151463 = invoke(stypy.reporting.localization.Localization(__file__, 2196, 23), decade_down_151458, *[vmin_151459, _base_151461], **kwargs_151462)
        
        # Assigning a type to the variable 'vmin' (line 2196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2196, 16), 'vmin', decade_down_call_result_151463)
        # SSA join for if statement (line 2195)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to is_decade(...): (line 2197)
        # Processing the call arguments (line 2197)
        # Getting the type of 'vmax' (line 2197)
        vmax_151465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 29), 'vmax', False)
        # Getting the type of 'self' (line 2197)
        self_151466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 35), 'self', False)
        # Obtaining the member '_base' of a type (line 2197)
        _base_151467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 35), self_151466, '_base')
        # Processing the call keyword arguments (line 2197)
        kwargs_151468 = {}
        # Getting the type of 'is_decade' (line 2197)
        is_decade_151464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 19), 'is_decade', False)
        # Calling is_decade(args, kwargs) (line 2197)
        is_decade_call_result_151469 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 19), is_decade_151464, *[vmax_151465, _base_151467], **kwargs_151468)
        
        # Applying the 'not' unary operator (line 2197)
        result_not__151470 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 15), 'not', is_decade_call_result_151469)
        
        # Testing the type of an if condition (line 2197)
        if_condition_151471 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2197, 12), result_not__151470)
        # Assigning a type to the variable 'if_condition_151471' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 12), 'if_condition_151471', if_condition_151471)
        # SSA begins for if statement (line 2197)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2198):
        
        # Assigning a Call to a Name (line 2198):
        
        # Call to decade_up(...): (line 2198)
        # Processing the call arguments (line 2198)
        # Getting the type of 'vmax' (line 2198)
        vmax_151473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 33), 'vmax', False)
        # Getting the type of 'self' (line 2198)
        self_151474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 39), 'self', False)
        # Obtaining the member '_base' of a type (line 2198)
        _base_151475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2198, 39), self_151474, '_base')
        # Processing the call keyword arguments (line 2198)
        kwargs_151476 = {}
        # Getting the type of 'decade_up' (line 2198)
        decade_up_151472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 23), 'decade_up', False)
        # Calling decade_up(args, kwargs) (line 2198)
        decade_up_call_result_151477 = invoke(stypy.reporting.localization.Localization(__file__, 2198, 23), decade_up_151472, *[vmax_151473, _base_151475], **kwargs_151476)
        
        # Assigning a type to the variable 'vmax' (line 2198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2198, 16), 'vmax', decade_up_call_result_151477)
        # SSA join for if statement (line 2197)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2194)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2200)
        tuple_151478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2200, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2200)
        # Adding element type (line 2200)
        # Getting the type of 'vmin' (line 2200)
        vmin_151479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 15), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2200, 15), tuple_151478, vmin_151479)
        # Adding element type (line 2200)
        # Getting the type of 'vmax' (line 2200)
        vmax_151480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 21), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2200, 15), tuple_151478, vmax_151480)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2200, 8), 'stypy_return_type', tuple_151478)
        
        # ################# End of 'view_limits(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'view_limits' in the type store
        # Getting the type of 'stypy_return_type' (line 2184)
        stypy_return_type_151481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_151481)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'view_limits'
        return stypy_return_type_151481


    @norecursion
    def nonsingular(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'nonsingular'
        module_type_store = module_type_store.open_function_context('nonsingular', 2202, 4, False)
        # Assigning a type to the variable 'self' (line 2203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2203, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogLocator.nonsingular.__dict__.__setitem__('stypy_localization', localization)
        LogLocator.nonsingular.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogLocator.nonsingular.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogLocator.nonsingular.__dict__.__setitem__('stypy_function_name', 'LogLocator.nonsingular')
        LogLocator.nonsingular.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        LogLocator.nonsingular.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogLocator.nonsingular.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogLocator.nonsingular.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogLocator.nonsingular.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogLocator.nonsingular.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogLocator.nonsingular.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogLocator.nonsingular', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'nonsingular', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'nonsingular(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        
        # Call to isfinite(...): (line 2203)
        # Processing the call arguments (line 2203)
        # Getting the type of 'vmin' (line 2203)
        vmin_151484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 27), 'vmin', False)
        # Processing the call keyword arguments (line 2203)
        kwargs_151485 = {}
        # Getting the type of 'np' (line 2203)
        np_151482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 15), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 2203)
        isfinite_151483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2203, 15), np_151482, 'isfinite')
        # Calling isfinite(args, kwargs) (line 2203)
        isfinite_call_result_151486 = invoke(stypy.reporting.localization.Localization(__file__, 2203, 15), isfinite_151483, *[vmin_151484], **kwargs_151485)
        
        # Applying the 'not' unary operator (line 2203)
        result_not__151487 = python_operator(stypy.reporting.localization.Localization(__file__, 2203, 11), 'not', isfinite_call_result_151486)
        
        
        
        # Call to isfinite(...): (line 2203)
        # Processing the call arguments (line 2203)
        # Getting the type of 'vmax' (line 2203)
        vmax_151490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 52), 'vmax', False)
        # Processing the call keyword arguments (line 2203)
        kwargs_151491 = {}
        # Getting the type of 'np' (line 2203)
        np_151488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 40), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 2203)
        isfinite_151489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2203, 40), np_151488, 'isfinite')
        # Calling isfinite(args, kwargs) (line 2203)
        isfinite_call_result_151492 = invoke(stypy.reporting.localization.Localization(__file__, 2203, 40), isfinite_151489, *[vmax_151490], **kwargs_151491)
        
        # Applying the 'not' unary operator (line 2203)
        result_not__151493 = python_operator(stypy.reporting.localization.Localization(__file__, 2203, 36), 'not', isfinite_call_result_151492)
        
        # Applying the binary operator 'or' (line 2203)
        result_or_keyword_151494 = python_operator(stypy.reporting.localization.Localization(__file__, 2203, 11), 'or', result_not__151487, result_not__151493)
        
        # Testing the type of an if condition (line 2203)
        if_condition_151495 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2203, 8), result_or_keyword_151494)
        # Assigning a type to the variable 'if_condition_151495' (line 2203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2203, 8), 'if_condition_151495', if_condition_151495)
        # SSA begins for if statement (line 2203)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2204)
        tuple_151496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2204, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2204)
        # Adding element type (line 2204)
        int_151497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2204, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2204, 19), tuple_151496, int_151497)
        # Adding element type (line 2204)
        int_151498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2204, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2204, 19), tuple_151496, int_151498)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2204, 12), 'stypy_return_type', tuple_151496)
        # SSA join for if statement (line 2203)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'vmin' (line 2206)
        vmin_151499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 11), 'vmin')
        # Getting the type of 'vmax' (line 2206)
        vmax_151500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 18), 'vmax')
        # Applying the binary operator '>' (line 2206)
        result_gt_151501 = python_operator(stypy.reporting.localization.Localization(__file__, 2206, 11), '>', vmin_151499, vmax_151500)
        
        # Testing the type of an if condition (line 2206)
        if_condition_151502 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2206, 8), result_gt_151501)
        # Assigning a type to the variable 'if_condition_151502' (line 2206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2206, 8), 'if_condition_151502', if_condition_151502)
        # SSA begins for if statement (line 2206)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2207):
        
        # Assigning a Name to a Name (line 2207):
        # Getting the type of 'vmax' (line 2207)
        vmax_151503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 25), 'vmax')
        # Assigning a type to the variable 'tuple_assignment_146345' (line 2207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2207, 12), 'tuple_assignment_146345', vmax_151503)
        
        # Assigning a Name to a Name (line 2207):
        # Getting the type of 'vmin' (line 2207)
        vmin_151504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 31), 'vmin')
        # Assigning a type to the variable 'tuple_assignment_146346' (line 2207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2207, 12), 'tuple_assignment_146346', vmin_151504)
        
        # Assigning a Name to a Name (line 2207):
        # Getting the type of 'tuple_assignment_146345' (line 2207)
        tuple_assignment_146345_151505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 12), 'tuple_assignment_146345')
        # Assigning a type to the variable 'vmin' (line 2207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2207, 12), 'vmin', tuple_assignment_146345_151505)
        
        # Assigning a Name to a Name (line 2207):
        # Getting the type of 'tuple_assignment_146346' (line 2207)
        tuple_assignment_146346_151506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 12), 'tuple_assignment_146346')
        # Assigning a type to the variable 'vmax' (line 2207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2207, 18), 'vmax', tuple_assignment_146346_151506)
        # SSA join for if statement (line 2206)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'vmax' (line 2208)
        vmax_151507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 11), 'vmax')
        int_151508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2208, 19), 'int')
        # Applying the binary operator '<=' (line 2208)
        result_le_151509 = python_operator(stypy.reporting.localization.Localization(__file__, 2208, 11), '<=', vmax_151507, int_151508)
        
        # Testing the type of an if condition (line 2208)
        if_condition_151510 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2208, 8), result_le_151509)
        # Assigning a type to the variable 'if_condition_151510' (line 2208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2208, 8), 'if_condition_151510', if_condition_151510)
        # SSA begins for if statement (line 2208)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 2209)
        # Processing the call arguments (line 2209)
        unicode_151513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2210, 16), 'unicode', u'Data has no positive values, and therefore cannot be log-scaled.')
        # Processing the call keyword arguments (line 2209)
        kwargs_151514 = {}
        # Getting the type of 'warnings' (line 2209)
        warnings_151511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2209)
        warn_151512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2209, 12), warnings_151511, 'warn')
        # Calling warn(args, kwargs) (line 2209)
        warn_call_result_151515 = invoke(stypy.reporting.localization.Localization(__file__, 2209, 12), warn_151512, *[unicode_151513], **kwargs_151514)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2212)
        tuple_151516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2212, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2212)
        # Adding element type (line 2212)
        int_151517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2212, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2212, 19), tuple_151516, int_151517)
        # Adding element type (line 2212)
        int_151518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2212, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2212, 19), tuple_151516, int_151518)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2212, 12), 'stypy_return_type', tuple_151516)
        # SSA join for if statement (line 2208)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2214):
        
        # Assigning a Call to a Name (line 2214):
        
        # Call to get_minpos(...): (line 2214)
        # Processing the call keyword arguments (line 2214)
        kwargs_151522 = {}
        # Getting the type of 'self' (line 2214)
        self_151519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 17), 'self', False)
        # Obtaining the member 'axis' of a type (line 2214)
        axis_151520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2214, 17), self_151519, 'axis')
        # Obtaining the member 'get_minpos' of a type (line 2214)
        get_minpos_151521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2214, 17), axis_151520, 'get_minpos')
        # Calling get_minpos(args, kwargs) (line 2214)
        get_minpos_call_result_151523 = invoke(stypy.reporting.localization.Localization(__file__, 2214, 17), get_minpos_151521, *[], **kwargs_151522)
        
        # Assigning a type to the variable 'minpos' (line 2214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2214, 8), 'minpos', get_minpos_call_result_151523)
        
        
        
        # Call to isfinite(...): (line 2215)
        # Processing the call arguments (line 2215)
        # Getting the type of 'minpos' (line 2215)
        minpos_151526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 27), 'minpos', False)
        # Processing the call keyword arguments (line 2215)
        kwargs_151527 = {}
        # Getting the type of 'np' (line 2215)
        np_151524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 15), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 2215)
        isfinite_151525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2215, 15), np_151524, 'isfinite')
        # Calling isfinite(args, kwargs) (line 2215)
        isfinite_call_result_151528 = invoke(stypy.reporting.localization.Localization(__file__, 2215, 15), isfinite_151525, *[minpos_151526], **kwargs_151527)
        
        # Applying the 'not' unary operator (line 2215)
        result_not__151529 = python_operator(stypy.reporting.localization.Localization(__file__, 2215, 11), 'not', isfinite_call_result_151528)
        
        # Testing the type of an if condition (line 2215)
        if_condition_151530 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2215, 8), result_not__151529)
        # Assigning a type to the variable 'if_condition_151530' (line 2215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2215, 8), 'if_condition_151530', if_condition_151530)
        # SSA begins for if statement (line 2215)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 2216):
        
        # Assigning a Num to a Name (line 2216):
        float_151531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2216, 21), 'float')
        # Assigning a type to the variable 'minpos' (line 2216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2216, 12), 'minpos', float_151531)
        # SSA join for if statement (line 2215)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'vmin' (line 2217)
        vmin_151532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 11), 'vmin')
        int_151533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2217, 19), 'int')
        # Applying the binary operator '<=' (line 2217)
        result_le_151534 = python_operator(stypy.reporting.localization.Localization(__file__, 2217, 11), '<=', vmin_151532, int_151533)
        
        # Testing the type of an if condition (line 2217)
        if_condition_151535 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2217, 8), result_le_151534)
        # Assigning a type to the variable 'if_condition_151535' (line 2217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2217, 8), 'if_condition_151535', if_condition_151535)
        # SSA begins for if statement (line 2217)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2218):
        
        # Assigning a Name to a Name (line 2218):
        # Getting the type of 'minpos' (line 2218)
        minpos_151536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 19), 'minpos')
        # Assigning a type to the variable 'vmin' (line 2218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2218, 12), 'vmin', minpos_151536)
        # SSA join for if statement (line 2217)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'vmin' (line 2219)
        vmin_151537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 11), 'vmin')
        # Getting the type of 'vmax' (line 2219)
        vmax_151538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 19), 'vmax')
        # Applying the binary operator '==' (line 2219)
        result_eq_151539 = python_operator(stypy.reporting.localization.Localization(__file__, 2219, 11), '==', vmin_151537, vmax_151538)
        
        # Testing the type of an if condition (line 2219)
        if_condition_151540 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2219, 8), result_eq_151539)
        # Assigning a type to the variable 'if_condition_151540' (line 2219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2219, 8), 'if_condition_151540', if_condition_151540)
        # SSA begins for if statement (line 2219)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2220):
        
        # Assigning a Call to a Name (line 2220):
        
        # Call to decade_down(...): (line 2220)
        # Processing the call arguments (line 2220)
        # Getting the type of 'vmin' (line 2220)
        vmin_151542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 31), 'vmin', False)
        # Getting the type of 'self' (line 2220)
        self_151543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 37), 'self', False)
        # Obtaining the member '_base' of a type (line 2220)
        _base_151544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2220, 37), self_151543, '_base')
        # Processing the call keyword arguments (line 2220)
        kwargs_151545 = {}
        # Getting the type of 'decade_down' (line 2220)
        decade_down_151541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 19), 'decade_down', False)
        # Calling decade_down(args, kwargs) (line 2220)
        decade_down_call_result_151546 = invoke(stypy.reporting.localization.Localization(__file__, 2220, 19), decade_down_151541, *[vmin_151542, _base_151544], **kwargs_151545)
        
        # Assigning a type to the variable 'vmin' (line 2220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2220, 12), 'vmin', decade_down_call_result_151546)
        
        # Assigning a Call to a Name (line 2221):
        
        # Assigning a Call to a Name (line 2221):
        
        # Call to decade_up(...): (line 2221)
        # Processing the call arguments (line 2221)
        # Getting the type of 'vmax' (line 2221)
        vmax_151548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 29), 'vmax', False)
        # Getting the type of 'self' (line 2221)
        self_151549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 35), 'self', False)
        # Obtaining the member '_base' of a type (line 2221)
        _base_151550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2221, 35), self_151549, '_base')
        # Processing the call keyword arguments (line 2221)
        kwargs_151551 = {}
        # Getting the type of 'decade_up' (line 2221)
        decade_up_151547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 19), 'decade_up', False)
        # Calling decade_up(args, kwargs) (line 2221)
        decade_up_call_result_151552 = invoke(stypy.reporting.localization.Localization(__file__, 2221, 19), decade_up_151547, *[vmax_151548, _base_151550], **kwargs_151551)
        
        # Assigning a type to the variable 'vmax' (line 2221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 12), 'vmax', decade_up_call_result_151552)
        # SSA join for if statement (line 2219)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2222)
        tuple_151553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2222, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2222)
        # Adding element type (line 2222)
        # Getting the type of 'vmin' (line 2222)
        vmin_151554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 15), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2222, 15), tuple_151553, vmin_151554)
        # Adding element type (line 2222)
        # Getting the type of 'vmax' (line 2222)
        vmax_151555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 21), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2222, 15), tuple_151553, vmax_151555)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2222, 8), 'stypy_return_type', tuple_151553)
        
        # ################# End of 'nonsingular(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'nonsingular' in the type store
        # Getting the type of 'stypy_return_type' (line 2202)
        stypy_return_type_151556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_151556)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'nonsingular'
        return stypy_return_type_151556


# Assigning a type to the variable 'LogLocator' (line 2030)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2030, 0), 'LogLocator', LogLocator)
# Declaration of the 'SymmetricalLogLocator' class
# Getting the type of 'Locator' (line 2225)
Locator_151557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 28), 'Locator')

class SymmetricalLogLocator(Locator_151557, ):
    unicode_151558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2228, (-1)), 'unicode', u'\n    Determine the tick locations for symmetric log axes\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2230)
        None_151559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2230, 33), 'None')
        # Getting the type of 'None' (line 2230)
        None_151560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2230, 44), 'None')
        # Getting the type of 'None' (line 2230)
        None_151561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2230, 60), 'None')
        # Getting the type of 'None' (line 2230)
        None_151562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2230, 71), 'None')
        defaults = [None_151559, None_151560, None_151561, None_151562]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2230, 4, False)
        # Assigning a type to the variable 'self' (line 2231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2231, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SymmetricalLogLocator.__init__', ['transform', 'subs', 'linthresh', 'base'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['transform', 'subs', 'linthresh', 'base'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_151563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2233, (-1)), 'unicode', u'\n        place ticks on the location= base**i*subs[j]\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 2234)
        # Getting the type of 'transform' (line 2234)
        transform_151564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 8), 'transform')
        # Getting the type of 'None' (line 2234)
        None_151565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 28), 'None')
        
        (may_be_151566, more_types_in_union_151567) = may_not_be_none(transform_151564, None_151565)

        if may_be_151566:

            if more_types_in_union_151567:
                # Runtime conditional SSA (line 2234)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Attribute (line 2235):
            
            # Assigning a Attribute to a Attribute (line 2235):
            # Getting the type of 'transform' (line 2235)
            transform_151568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 25), 'transform')
            # Obtaining the member 'base' of a type (line 2235)
            base_151569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2235, 25), transform_151568, 'base')
            # Getting the type of 'self' (line 2235)
            self_151570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 12), 'self')
            # Setting the type of the member '_base' of a type (line 2235)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2235, 12), self_151570, '_base', base_151569)
            
            # Assigning a Attribute to a Attribute (line 2236):
            
            # Assigning a Attribute to a Attribute (line 2236):
            # Getting the type of 'transform' (line 2236)
            transform_151571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 30), 'transform')
            # Obtaining the member 'linthresh' of a type (line 2236)
            linthresh_151572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2236, 30), transform_151571, 'linthresh')
            # Getting the type of 'self' (line 2236)
            self_151573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 12), 'self')
            # Setting the type of the member '_linthresh' of a type (line 2236)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2236, 12), self_151573, '_linthresh', linthresh_151572)

            if more_types_in_union_151567:
                # Runtime conditional SSA for else branch (line 2234)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_151566) or more_types_in_union_151567):
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'linthresh' (line 2237)
            linthresh_151574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 13), 'linthresh')
            # Getting the type of 'None' (line 2237)
            None_151575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 30), 'None')
            # Applying the binary operator 'isnot' (line 2237)
            result_is_not_151576 = python_operator(stypy.reporting.localization.Localization(__file__, 2237, 13), 'isnot', linthresh_151574, None_151575)
            
            
            # Getting the type of 'base' (line 2237)
            base_151577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 39), 'base')
            # Getting the type of 'None' (line 2237)
            None_151578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 51), 'None')
            # Applying the binary operator 'isnot' (line 2237)
            result_is_not_151579 = python_operator(stypy.reporting.localization.Localization(__file__, 2237, 39), 'isnot', base_151577, None_151578)
            
            # Applying the binary operator 'and' (line 2237)
            result_and_keyword_151580 = python_operator(stypy.reporting.localization.Localization(__file__, 2237, 13), 'and', result_is_not_151576, result_is_not_151579)
            
            # Testing the type of an if condition (line 2237)
            if_condition_151581 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2237, 13), result_and_keyword_151580)
            # Assigning a type to the variable 'if_condition_151581' (line 2237)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2237, 13), 'if_condition_151581', if_condition_151581)
            # SSA begins for if statement (line 2237)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 2238):
            
            # Assigning a Name to a Attribute (line 2238):
            # Getting the type of 'base' (line 2238)
            base_151582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 25), 'base')
            # Getting the type of 'self' (line 2238)
            self_151583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 12), 'self')
            # Setting the type of the member '_base' of a type (line 2238)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2238, 12), self_151583, '_base', base_151582)
            
            # Assigning a Name to a Attribute (line 2239):
            
            # Assigning a Name to a Attribute (line 2239):
            # Getting the type of 'linthresh' (line 2239)
            linthresh_151584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 30), 'linthresh')
            # Getting the type of 'self' (line 2239)
            self_151585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 12), 'self')
            # Setting the type of the member '_linthresh' of a type (line 2239)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2239, 12), self_151585, '_linthresh', linthresh_151584)
            # SSA branch for the else part of an if statement (line 2237)
            module_type_store.open_ssa_branch('else')
            
            # Call to ValueError(...): (line 2241)
            # Processing the call arguments (line 2241)
            unicode_151587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2241, 29), 'unicode', u'Either transform, or both linthresh and base, must be provided.')
            # Processing the call keyword arguments (line 2241)
            kwargs_151588 = {}
            # Getting the type of 'ValueError' (line 2241)
            ValueError_151586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 18), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 2241)
            ValueError_call_result_151589 = invoke(stypy.reporting.localization.Localization(__file__, 2241, 18), ValueError_151586, *[unicode_151587], **kwargs_151588)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2241, 12), ValueError_call_result_151589, 'raise parameter', BaseException)
            # SSA join for if statement (line 2237)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_151566 and more_types_in_union_151567):
                # SSA join for if statement (line 2234)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2243)
        # Getting the type of 'subs' (line 2243)
        subs_151590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 11), 'subs')
        # Getting the type of 'None' (line 2243)
        None_151591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 19), 'None')
        
        (may_be_151592, more_types_in_union_151593) = may_be_none(subs_151590, None_151591)

        if may_be_151592:

            if more_types_in_union_151593:
                # Runtime conditional SSA (line 2243)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a List to a Attribute (line 2244):
            
            # Assigning a List to a Attribute (line 2244):
            
            # Obtaining an instance of the builtin type 'list' (line 2244)
            list_151594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2244, 25), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2244)
            # Adding element type (line 2244)
            float_151595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2244, 26), 'float')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 25), list_151594, float_151595)
            
            # Getting the type of 'self' (line 2244)
            self_151596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 12), 'self')
            # Setting the type of the member '_subs' of a type (line 2244)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2244, 12), self_151596, '_subs', list_151594)

            if more_types_in_union_151593:
                # Runtime conditional SSA for else branch (line 2243)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_151592) or more_types_in_union_151593):
            
            # Assigning a Name to a Attribute (line 2246):
            
            # Assigning a Name to a Attribute (line 2246):
            # Getting the type of 'subs' (line 2246)
            subs_151597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 25), 'subs')
            # Getting the type of 'self' (line 2246)
            self_151598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 12), 'self')
            # Setting the type of the member '_subs' of a type (line 2246)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2246, 12), self_151598, '_subs', subs_151597)

            if (may_be_151592 and more_types_in_union_151593):
                # SSA join for if statement (line 2243)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Num to a Attribute (line 2247):
        
        # Assigning a Num to a Attribute (line 2247):
        int_151599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2247, 24), 'int')
        # Getting the type of 'self' (line 2247)
        self_151600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 8), 'self')
        # Setting the type of the member 'numticks' of a type (line 2247)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2247, 8), self_151600, 'numticks', int_151599)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2249)
        None_151601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2249, 30), 'None')
        # Getting the type of 'None' (line 2249)
        None_151602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2249, 45), 'None')
        defaults = [None_151601, None_151602]
        # Create a new context for function 'set_params'
        module_type_store = module_type_store.open_function_context('set_params', 2249, 4, False)
        # Assigning a type to the variable 'self' (line 2250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2250, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SymmetricalLogLocator.set_params.__dict__.__setitem__('stypy_localization', localization)
        SymmetricalLogLocator.set_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SymmetricalLogLocator.set_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        SymmetricalLogLocator.set_params.__dict__.__setitem__('stypy_function_name', 'SymmetricalLogLocator.set_params')
        SymmetricalLogLocator.set_params.__dict__.__setitem__('stypy_param_names_list', ['subs', 'numticks'])
        SymmetricalLogLocator.set_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        SymmetricalLogLocator.set_params.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SymmetricalLogLocator.set_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        SymmetricalLogLocator.set_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        SymmetricalLogLocator.set_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SymmetricalLogLocator.set_params.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SymmetricalLogLocator.set_params', ['subs', 'numticks'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_params', localization, ['subs', 'numticks'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_params(...)' code ##################

        unicode_151603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2250, 8), 'unicode', u'Set parameters within this locator.')
        
        # Type idiom detected: calculating its left and rigth part (line 2251)
        # Getting the type of 'numticks' (line 2251)
        numticks_151604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 8), 'numticks')
        # Getting the type of 'None' (line 2251)
        None_151605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 27), 'None')
        
        (may_be_151606, more_types_in_union_151607) = may_not_be_none(numticks_151604, None_151605)

        if may_be_151606:

            if more_types_in_union_151607:
                # Runtime conditional SSA (line 2251)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 2252):
            
            # Assigning a Name to a Attribute (line 2252):
            # Getting the type of 'numticks' (line 2252)
            numticks_151608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2252, 28), 'numticks')
            # Getting the type of 'self' (line 2252)
            self_151609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2252, 12), 'self')
            # Setting the type of the member 'numticks' of a type (line 2252)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2252, 12), self_151609, 'numticks', numticks_151608)

            if more_types_in_union_151607:
                # SSA join for if statement (line 2251)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2253)
        # Getting the type of 'subs' (line 2253)
        subs_151610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 8), 'subs')
        # Getting the type of 'None' (line 2253)
        None_151611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 23), 'None')
        
        (may_be_151612, more_types_in_union_151613) = may_not_be_none(subs_151610, None_151611)

        if may_be_151612:

            if more_types_in_union_151613:
                # Runtime conditional SSA (line 2253)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 2254):
            
            # Assigning a Name to a Attribute (line 2254):
            # Getting the type of 'subs' (line 2254)
            subs_151614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 25), 'subs')
            # Getting the type of 'self' (line 2254)
            self_151615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 12), 'self')
            # Setting the type of the member '_subs' of a type (line 2254)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2254, 12), self_151615, '_subs', subs_151614)

            if more_types_in_union_151613:
                # SSA join for if statement (line 2253)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'set_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_params' in the type store
        # Getting the type of 'stypy_return_type' (line 2249)
        stypy_return_type_151616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2249, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_151616)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_params'
        return stypy_return_type_151616


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 2256, 4, False)
        # Assigning a type to the variable 'self' (line 2257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2257, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SymmetricalLogLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        SymmetricalLogLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SymmetricalLogLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        SymmetricalLogLocator.__call__.__dict__.__setitem__('stypy_function_name', 'SymmetricalLogLocator.__call__')
        SymmetricalLogLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        SymmetricalLogLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        SymmetricalLogLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SymmetricalLogLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        SymmetricalLogLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        SymmetricalLogLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SymmetricalLogLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SymmetricalLogLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_151617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2257, 8), 'unicode', u'Return the locations of the ticks')
        
        # Assigning a Call to a Tuple (line 2259):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 2259)
        # Processing the call keyword arguments (line 2259)
        kwargs_151621 = {}
        # Getting the type of 'self' (line 2259)
        self_151618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 2259)
        axis_151619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2259, 21), self_151618, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 2259)
        get_view_interval_151620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2259, 21), axis_151619, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 2259)
        get_view_interval_call_result_151622 = invoke(stypy.reporting.localization.Localization(__file__, 2259, 21), get_view_interval_151620, *[], **kwargs_151621)
        
        # Assigning a type to the variable 'call_assignment_146347' (line 2259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2259, 8), 'call_assignment_146347', get_view_interval_call_result_151622)
        
        # Assigning a Call to a Name (line 2259):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_151625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 8), 'int')
        # Processing the call keyword arguments
        kwargs_151626 = {}
        # Getting the type of 'call_assignment_146347' (line 2259)
        call_assignment_146347_151623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 8), 'call_assignment_146347', False)
        # Obtaining the member '__getitem__' of a type (line 2259)
        getitem___151624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2259, 8), call_assignment_146347_151623, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_151627 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___151624, *[int_151625], **kwargs_151626)
        
        # Assigning a type to the variable 'call_assignment_146348' (line 2259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2259, 8), 'call_assignment_146348', getitem___call_result_151627)
        
        # Assigning a Name to a Name (line 2259):
        # Getting the type of 'call_assignment_146348' (line 2259)
        call_assignment_146348_151628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 8), 'call_assignment_146348')
        # Assigning a type to the variable 'vmin' (line 2259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2259, 8), 'vmin', call_assignment_146348_151628)
        
        # Assigning a Call to a Name (line 2259):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_151631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 8), 'int')
        # Processing the call keyword arguments
        kwargs_151632 = {}
        # Getting the type of 'call_assignment_146347' (line 2259)
        call_assignment_146347_151629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 8), 'call_assignment_146347', False)
        # Obtaining the member '__getitem__' of a type (line 2259)
        getitem___151630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2259, 8), call_assignment_146347_151629, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_151633 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___151630, *[int_151631], **kwargs_151632)
        
        # Assigning a type to the variable 'call_assignment_146349' (line 2259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2259, 8), 'call_assignment_146349', getitem___call_result_151633)
        
        # Assigning a Name to a Name (line 2259):
        # Getting the type of 'call_assignment_146349' (line 2259)
        call_assignment_146349_151634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 8), 'call_assignment_146349')
        # Assigning a type to the variable 'vmax' (line 2259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2259, 14), 'vmax', call_assignment_146349_151634)
        
        # Call to tick_values(...): (line 2260)
        # Processing the call arguments (line 2260)
        # Getting the type of 'vmin' (line 2260)
        vmin_151637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 32), 'vmin', False)
        # Getting the type of 'vmax' (line 2260)
        vmax_151638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 38), 'vmax', False)
        # Processing the call keyword arguments (line 2260)
        kwargs_151639 = {}
        # Getting the type of 'self' (line 2260)
        self_151635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 15), 'self', False)
        # Obtaining the member 'tick_values' of a type (line 2260)
        tick_values_151636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2260, 15), self_151635, 'tick_values')
        # Calling tick_values(args, kwargs) (line 2260)
        tick_values_call_result_151640 = invoke(stypy.reporting.localization.Localization(__file__, 2260, 15), tick_values_151636, *[vmin_151637, vmax_151638], **kwargs_151639)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2260, 8), 'stypy_return_type', tick_values_call_result_151640)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 2256)
        stypy_return_type_151641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_151641)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_151641


    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 2262, 4, False)
        # Assigning a type to the variable 'self' (line 2263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2263, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SymmetricalLogLocator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        SymmetricalLogLocator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SymmetricalLogLocator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        SymmetricalLogLocator.tick_values.__dict__.__setitem__('stypy_function_name', 'SymmetricalLogLocator.tick_values')
        SymmetricalLogLocator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        SymmetricalLogLocator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        SymmetricalLogLocator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SymmetricalLogLocator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        SymmetricalLogLocator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        SymmetricalLogLocator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SymmetricalLogLocator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SymmetricalLogLocator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        
        # Assigning a Attribute to a Name (line 2263):
        
        # Assigning a Attribute to a Name (line 2263):
        # Getting the type of 'self' (line 2263)
        self_151642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 12), 'self')
        # Obtaining the member '_base' of a type (line 2263)
        _base_151643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2263, 12), self_151642, '_base')
        # Assigning a type to the variable 'b' (line 2263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2263, 8), 'b', _base_151643)
        
        # Assigning a Attribute to a Name (line 2264):
        
        # Assigning a Attribute to a Name (line 2264):
        # Getting the type of 'self' (line 2264)
        self_151644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 12), 'self')
        # Obtaining the member '_linthresh' of a type (line 2264)
        _linthresh_151645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2264, 12), self_151644, '_linthresh')
        # Assigning a type to the variable 't' (line 2264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2264, 8), 't', _linthresh_151645)
        
        
        # Getting the type of 'vmax' (line 2266)
        vmax_151646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 11), 'vmax')
        # Getting the type of 'vmin' (line 2266)
        vmin_151647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 18), 'vmin')
        # Applying the binary operator '<' (line 2266)
        result_lt_151648 = python_operator(stypy.reporting.localization.Localization(__file__, 2266, 11), '<', vmax_151646, vmin_151647)
        
        # Testing the type of an if condition (line 2266)
        if_condition_151649 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2266, 8), result_lt_151648)
        # Assigning a type to the variable 'if_condition_151649' (line 2266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2266, 8), 'if_condition_151649', if_condition_151649)
        # SSA begins for if statement (line 2266)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2267):
        
        # Assigning a Name to a Name (line 2267):
        # Getting the type of 'vmax' (line 2267)
        vmax_151650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 25), 'vmax')
        # Assigning a type to the variable 'tuple_assignment_146350' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 12), 'tuple_assignment_146350', vmax_151650)
        
        # Assigning a Name to a Name (line 2267):
        # Getting the type of 'vmin' (line 2267)
        vmin_151651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 31), 'vmin')
        # Assigning a type to the variable 'tuple_assignment_146351' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 12), 'tuple_assignment_146351', vmin_151651)
        
        # Assigning a Name to a Name (line 2267):
        # Getting the type of 'tuple_assignment_146350' (line 2267)
        tuple_assignment_146350_151652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 12), 'tuple_assignment_146350')
        # Assigning a type to the variable 'vmin' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 12), 'vmin', tuple_assignment_146350_151652)
        
        # Assigning a Name to a Name (line 2267):
        # Getting the type of 'tuple_assignment_146351' (line 2267)
        tuple_assignment_146351_151653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 12), 'tuple_assignment_146351')
        # Assigning a type to the variable 'vmax' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 18), 'vmax', tuple_assignment_146351_151653)
        # SSA join for if statement (line 2266)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Multiple assignment of 3 elements.
        
        # Assigning a Name to a Name (line 2289):
        # Getting the type of 'False' (line 2289)
        False_151654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2289, 32), 'False')
        # Assigning a type to the variable 'has_c' (line 2289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2289, 24), 'has_c', False_151654)
        
        # Assigning a Name to a Name (line 2289):
        # Getting the type of 'has_c' (line 2289)
        has_c_151655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2289, 24), 'has_c')
        # Assigning a type to the variable 'has_b' (line 2289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2289, 16), 'has_b', has_c_151655)
        
        # Assigning a Name to a Name (line 2289):
        # Getting the type of 'has_b' (line 2289)
        has_b_151656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2289, 16), 'has_b')
        # Assigning a type to the variable 'has_a' (line 2289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2289, 8), 'has_a', has_b_151656)
        
        
        # Getting the type of 'vmin' (line 2290)
        vmin_151657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 11), 'vmin')
        
        # Getting the type of 't' (line 2290)
        t_151658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 19), 't')
        # Applying the 'usub' unary operator (line 2290)
        result___neg___151659 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 18), 'usub', t_151658)
        
        # Applying the binary operator '<' (line 2290)
        result_lt_151660 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 11), '<', vmin_151657, result___neg___151659)
        
        # Testing the type of an if condition (line 2290)
        if_condition_151661 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2290, 8), result_lt_151660)
        # Assigning a type to the variable 'if_condition_151661' (line 2290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2290, 8), 'if_condition_151661', if_condition_151661)
        # SSA begins for if statement (line 2290)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2291):
        
        # Assigning a Name to a Name (line 2291):
        # Getting the type of 'True' (line 2291)
        True_151662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 20), 'True')
        # Assigning a type to the variable 'has_a' (line 2291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2291, 12), 'has_a', True_151662)
        
        
        # Getting the type of 'vmax' (line 2292)
        vmax_151663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 15), 'vmax')
        
        # Getting the type of 't' (line 2292)
        t_151664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 23), 't')
        # Applying the 'usub' unary operator (line 2292)
        result___neg___151665 = python_operator(stypy.reporting.localization.Localization(__file__, 2292, 22), 'usub', t_151664)
        
        # Applying the binary operator '>' (line 2292)
        result_gt_151666 = python_operator(stypy.reporting.localization.Localization(__file__, 2292, 15), '>', vmax_151663, result___neg___151665)
        
        # Testing the type of an if condition (line 2292)
        if_condition_151667 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2292, 12), result_gt_151666)
        # Assigning a type to the variable 'if_condition_151667' (line 2292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2292, 12), 'if_condition_151667', if_condition_151667)
        # SSA begins for if statement (line 2292)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2293):
        
        # Assigning a Name to a Name (line 2293):
        # Getting the type of 'True' (line 2293)
        True_151668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 24), 'True')
        # Assigning a type to the variable 'has_b' (line 2293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 16), 'has_b', True_151668)
        
        
        # Getting the type of 'vmax' (line 2294)
        vmax_151669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 19), 'vmax')
        # Getting the type of 't' (line 2294)
        t_151670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 26), 't')
        # Applying the binary operator '>' (line 2294)
        result_gt_151671 = python_operator(stypy.reporting.localization.Localization(__file__, 2294, 19), '>', vmax_151669, t_151670)
        
        # Testing the type of an if condition (line 2294)
        if_condition_151672 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2294, 16), result_gt_151671)
        # Assigning a type to the variable 'if_condition_151672' (line 2294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 16), 'if_condition_151672', if_condition_151672)
        # SSA begins for if statement (line 2294)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2295):
        
        # Assigning a Name to a Name (line 2295):
        # Getting the type of 'True' (line 2295)
        True_151673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 28), 'True')
        # Assigning a type to the variable 'has_c' (line 2295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 20), 'has_c', True_151673)
        # SSA join for if statement (line 2294)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2292)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2290)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'vmin' (line 2296)
        vmin_151674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 13), 'vmin')
        int_151675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2296, 20), 'int')
        # Applying the binary operator '<' (line 2296)
        result_lt_151676 = python_operator(stypy.reporting.localization.Localization(__file__, 2296, 13), '<', vmin_151674, int_151675)
        
        # Testing the type of an if condition (line 2296)
        if_condition_151677 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2296, 13), result_lt_151676)
        # Assigning a type to the variable 'if_condition_151677' (line 2296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2296, 13), 'if_condition_151677', if_condition_151677)
        # SSA begins for if statement (line 2296)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'vmax' (line 2297)
        vmax_151678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 15), 'vmax')
        int_151679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2297, 22), 'int')
        # Applying the binary operator '>' (line 2297)
        result_gt_151680 = python_operator(stypy.reporting.localization.Localization(__file__, 2297, 15), '>', vmax_151678, int_151679)
        
        # Testing the type of an if condition (line 2297)
        if_condition_151681 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2297, 12), result_gt_151680)
        # Assigning a type to the variable 'if_condition_151681' (line 2297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2297, 12), 'if_condition_151681', if_condition_151681)
        # SSA begins for if statement (line 2297)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2298):
        
        # Assigning a Name to a Name (line 2298):
        # Getting the type of 'True' (line 2298)
        True_151682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 24), 'True')
        # Assigning a type to the variable 'has_b' (line 2298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2298, 16), 'has_b', True_151682)
        
        
        # Getting the type of 'vmax' (line 2299)
        vmax_151683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 19), 'vmax')
        # Getting the type of 't' (line 2299)
        t_151684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 26), 't')
        # Applying the binary operator '>' (line 2299)
        result_gt_151685 = python_operator(stypy.reporting.localization.Localization(__file__, 2299, 19), '>', vmax_151683, t_151684)
        
        # Testing the type of an if condition (line 2299)
        if_condition_151686 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2299, 16), result_gt_151685)
        # Assigning a type to the variable 'if_condition_151686' (line 2299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2299, 16), 'if_condition_151686', if_condition_151686)
        # SSA begins for if statement (line 2299)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2300):
        
        # Assigning a Name to a Name (line 2300):
        # Getting the type of 'True' (line 2300)
        True_151687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 28), 'True')
        # Assigning a type to the variable 'has_c' (line 2300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2300, 20), 'has_c', True_151687)
        # SSA join for if statement (line 2299)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2297)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'list' (line 2302)
        list_151688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2302, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2302)
        # Adding element type (line 2302)
        # Getting the type of 'vmin' (line 2302)
        vmin_151689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 24), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2302, 23), list_151688, vmin_151689)
        # Adding element type (line 2302)
        # Getting the type of 'vmax' (line 2302)
        vmax_151690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 30), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2302, 23), list_151688, vmax_151690)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2302, 16), 'stypy_return_type', list_151688)
        # SSA join for if statement (line 2297)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2296)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'vmin' (line 2303)
        vmin_151691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2303, 13), 'vmin')
        # Getting the type of 't' (line 2303)
        t_151692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2303, 20), 't')
        # Applying the binary operator '<' (line 2303)
        result_lt_151693 = python_operator(stypy.reporting.localization.Localization(__file__, 2303, 13), '<', vmin_151691, t_151692)
        
        # Testing the type of an if condition (line 2303)
        if_condition_151694 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2303, 13), result_lt_151693)
        # Assigning a type to the variable 'if_condition_151694' (line 2303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2303, 13), 'if_condition_151694', if_condition_151694)
        # SSA begins for if statement (line 2303)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'vmax' (line 2304)
        vmax_151695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 15), 'vmax')
        # Getting the type of 't' (line 2304)
        t_151696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 22), 't')
        # Applying the binary operator '>' (line 2304)
        result_gt_151697 = python_operator(stypy.reporting.localization.Localization(__file__, 2304, 15), '>', vmax_151695, t_151696)
        
        # Testing the type of an if condition (line 2304)
        if_condition_151698 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2304, 12), result_gt_151697)
        # Assigning a type to the variable 'if_condition_151698' (line 2304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2304, 12), 'if_condition_151698', if_condition_151698)
        # SSA begins for if statement (line 2304)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2305):
        
        # Assigning a Name to a Name (line 2305):
        # Getting the type of 'True' (line 2305)
        True_151699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 24), 'True')
        # Assigning a type to the variable 'has_b' (line 2305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2305, 16), 'has_b', True_151699)
        
        # Assigning a Name to a Name (line 2306):
        
        # Assigning a Name to a Name (line 2306):
        # Getting the type of 'True' (line 2306)
        True_151700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 24), 'True')
        # Assigning a type to the variable 'has_c' (line 2306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2306, 16), 'has_c', True_151700)
        # SSA branch for the else part of an if statement (line 2304)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'list' (line 2308)
        list_151701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2308, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2308)
        # Adding element type (line 2308)
        # Getting the type of 'vmin' (line 2308)
        vmin_151702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 24), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2308, 23), list_151701, vmin_151702)
        # Adding element type (line 2308)
        # Getting the type of 'vmax' (line 2308)
        vmax_151703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 30), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2308, 23), list_151701, vmax_151703)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2308, 16), 'stypy_return_type', list_151701)
        # SSA join for if statement (line 2304)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2303)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 2310):
        
        # Assigning a Name to a Name (line 2310):
        # Getting the type of 'True' (line 2310)
        True_151704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 20), 'True')
        # Assigning a type to the variable 'has_c' (line 2310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2310, 12), 'has_c', True_151704)
        # SSA join for if statement (line 2303)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2296)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2290)
        module_type_store = module_type_store.join_ssa_context()
        

        @norecursion
        def get_log_range(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'get_log_range'
            module_type_store = module_type_store.open_function_context('get_log_range', 2312, 8, False)
            
            # Passed parameters checking function
            get_log_range.stypy_localization = localization
            get_log_range.stypy_type_of_self = None
            get_log_range.stypy_type_store = module_type_store
            get_log_range.stypy_function_name = 'get_log_range'
            get_log_range.stypy_param_names_list = ['lo', 'hi']
            get_log_range.stypy_varargs_param_name = None
            get_log_range.stypy_kwargs_param_name = None
            get_log_range.stypy_call_defaults = defaults
            get_log_range.stypy_call_varargs = varargs
            get_log_range.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'get_log_range', ['lo', 'hi'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'get_log_range', localization, ['lo', 'hi'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'get_log_range(...)' code ##################

            
            # Assigning a Call to a Name (line 2313):
            
            # Assigning a Call to a Name (line 2313):
            
            # Call to floor(...): (line 2313)
            # Processing the call arguments (line 2313)
            
            # Call to log(...): (line 2313)
            # Processing the call arguments (line 2313)
            # Getting the type of 'lo' (line 2313)
            lo_151709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 33), 'lo', False)
            # Processing the call keyword arguments (line 2313)
            kwargs_151710 = {}
            # Getting the type of 'np' (line 2313)
            np_151707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 26), 'np', False)
            # Obtaining the member 'log' of a type (line 2313)
            log_151708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2313, 26), np_151707, 'log')
            # Calling log(args, kwargs) (line 2313)
            log_call_result_151711 = invoke(stypy.reporting.localization.Localization(__file__, 2313, 26), log_151708, *[lo_151709], **kwargs_151710)
            
            
            # Call to log(...): (line 2313)
            # Processing the call arguments (line 2313)
            # Getting the type of 'b' (line 2313)
            b_151714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 46), 'b', False)
            # Processing the call keyword arguments (line 2313)
            kwargs_151715 = {}
            # Getting the type of 'np' (line 2313)
            np_151712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 39), 'np', False)
            # Obtaining the member 'log' of a type (line 2313)
            log_151713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2313, 39), np_151712, 'log')
            # Calling log(args, kwargs) (line 2313)
            log_call_result_151716 = invoke(stypy.reporting.localization.Localization(__file__, 2313, 39), log_151713, *[b_151714], **kwargs_151715)
            
            # Applying the binary operator 'div' (line 2313)
            result_div_151717 = python_operator(stypy.reporting.localization.Localization(__file__, 2313, 26), 'div', log_call_result_151711, log_call_result_151716)
            
            # Processing the call keyword arguments (line 2313)
            kwargs_151718 = {}
            # Getting the type of 'np' (line 2313)
            np_151705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 17), 'np', False)
            # Obtaining the member 'floor' of a type (line 2313)
            floor_151706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2313, 17), np_151705, 'floor')
            # Calling floor(args, kwargs) (line 2313)
            floor_call_result_151719 = invoke(stypy.reporting.localization.Localization(__file__, 2313, 17), floor_151706, *[result_div_151717], **kwargs_151718)
            
            # Assigning a type to the variable 'lo' (line 2313)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2313, 12), 'lo', floor_call_result_151719)
            
            # Assigning a Call to a Name (line 2314):
            
            # Assigning a Call to a Name (line 2314):
            
            # Call to ceil(...): (line 2314)
            # Processing the call arguments (line 2314)
            
            # Call to log(...): (line 2314)
            # Processing the call arguments (line 2314)
            # Getting the type of 'hi' (line 2314)
            hi_151724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 32), 'hi', False)
            # Processing the call keyword arguments (line 2314)
            kwargs_151725 = {}
            # Getting the type of 'np' (line 2314)
            np_151722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 25), 'np', False)
            # Obtaining the member 'log' of a type (line 2314)
            log_151723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2314, 25), np_151722, 'log')
            # Calling log(args, kwargs) (line 2314)
            log_call_result_151726 = invoke(stypy.reporting.localization.Localization(__file__, 2314, 25), log_151723, *[hi_151724], **kwargs_151725)
            
            
            # Call to log(...): (line 2314)
            # Processing the call arguments (line 2314)
            # Getting the type of 'b' (line 2314)
            b_151729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 45), 'b', False)
            # Processing the call keyword arguments (line 2314)
            kwargs_151730 = {}
            # Getting the type of 'np' (line 2314)
            np_151727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 38), 'np', False)
            # Obtaining the member 'log' of a type (line 2314)
            log_151728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2314, 38), np_151727, 'log')
            # Calling log(args, kwargs) (line 2314)
            log_call_result_151731 = invoke(stypy.reporting.localization.Localization(__file__, 2314, 38), log_151728, *[b_151729], **kwargs_151730)
            
            # Applying the binary operator 'div' (line 2314)
            result_div_151732 = python_operator(stypy.reporting.localization.Localization(__file__, 2314, 25), 'div', log_call_result_151726, log_call_result_151731)
            
            # Processing the call keyword arguments (line 2314)
            kwargs_151733 = {}
            # Getting the type of 'np' (line 2314)
            np_151720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 17), 'np', False)
            # Obtaining the member 'ceil' of a type (line 2314)
            ceil_151721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2314, 17), np_151720, 'ceil')
            # Calling ceil(args, kwargs) (line 2314)
            ceil_call_result_151734 = invoke(stypy.reporting.localization.Localization(__file__, 2314, 17), ceil_151721, *[result_div_151732], **kwargs_151733)
            
            # Assigning a type to the variable 'hi' (line 2314)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2314, 12), 'hi', ceil_call_result_151734)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2315)
            tuple_151735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2315, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2315)
            # Adding element type (line 2315)
            # Getting the type of 'lo' (line 2315)
            lo_151736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 19), 'lo')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2315, 19), tuple_151735, lo_151736)
            # Adding element type (line 2315)
            # Getting the type of 'hi' (line 2315)
            hi_151737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 23), 'hi')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2315, 19), tuple_151735, hi_151737)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2315)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2315, 12), 'stypy_return_type', tuple_151735)
            
            # ################# End of 'get_log_range(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'get_log_range' in the type store
            # Getting the type of 'stypy_return_type' (line 2312)
            stypy_return_type_151738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_151738)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'get_log_range'
            return stypy_return_type_151738

        # Assigning a type to the variable 'get_log_range' (line 2312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2312, 8), 'get_log_range', get_log_range)
        
        # Getting the type of 'has_a' (line 2318)
        has_a_151739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 11), 'has_a')
        # Testing the type of an if condition (line 2318)
        if_condition_151740 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2318, 8), has_a_151739)
        # Assigning a type to the variable 'if_condition_151740' (line 2318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2318, 8), 'if_condition_151740', if_condition_151740)
        # SSA begins for if statement (line 2318)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'has_b' (line 2319)
        has_b_151741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 15), 'has_b')
        # Testing the type of an if condition (line 2319)
        if_condition_151742 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2319, 12), has_b_151741)
        # Assigning a type to the variable 'if_condition_151742' (line 2319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2319, 12), 'if_condition_151742', if_condition_151742)
        # SSA begins for if statement (line 2319)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2320):
        
        # Assigning a Call to a Name (line 2320):
        
        # Call to get_log_range(...): (line 2320)
        # Processing the call arguments (line 2320)
        # Getting the type of 't' (line 2320)
        t_151744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 40), 't', False)
        
        # Getting the type of 'vmin' (line 2320)
        vmin_151745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 44), 'vmin', False)
        # Applying the 'usub' unary operator (line 2320)
        result___neg___151746 = python_operator(stypy.reporting.localization.Localization(__file__, 2320, 43), 'usub', vmin_151745)
        
        int_151747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2320, 51), 'int')
        # Applying the binary operator '+' (line 2320)
        result_add_151748 = python_operator(stypy.reporting.localization.Localization(__file__, 2320, 43), '+', result___neg___151746, int_151747)
        
        # Processing the call keyword arguments (line 2320)
        kwargs_151749 = {}
        # Getting the type of 'get_log_range' (line 2320)
        get_log_range_151743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 26), 'get_log_range', False)
        # Calling get_log_range(args, kwargs) (line 2320)
        get_log_range_call_result_151750 = invoke(stypy.reporting.localization.Localization(__file__, 2320, 26), get_log_range_151743, *[t_151744, result_add_151748], **kwargs_151749)
        
        # Assigning a type to the variable 'a_range' (line 2320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2320, 16), 'a_range', get_log_range_call_result_151750)
        # SSA branch for the else part of an if statement (line 2319)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2322):
        
        # Assigning a Call to a Name (line 2322):
        
        # Call to get_log_range(...): (line 2322)
        # Processing the call arguments (line 2322)
        
        # Getting the type of 'vmax' (line 2322)
        vmax_151752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 41), 'vmax', False)
        # Applying the 'usub' unary operator (line 2322)
        result___neg___151753 = python_operator(stypy.reporting.localization.Localization(__file__, 2322, 40), 'usub', vmax_151752)
        
        
        # Getting the type of 'vmin' (line 2322)
        vmin_151754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 48), 'vmin', False)
        # Applying the 'usub' unary operator (line 2322)
        result___neg___151755 = python_operator(stypy.reporting.localization.Localization(__file__, 2322, 47), 'usub', vmin_151754)
        
        int_151756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2322, 55), 'int')
        # Applying the binary operator '+' (line 2322)
        result_add_151757 = python_operator(stypy.reporting.localization.Localization(__file__, 2322, 47), '+', result___neg___151755, int_151756)
        
        # Processing the call keyword arguments (line 2322)
        kwargs_151758 = {}
        # Getting the type of 'get_log_range' (line 2322)
        get_log_range_151751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 26), 'get_log_range', False)
        # Calling get_log_range(args, kwargs) (line 2322)
        get_log_range_call_result_151759 = invoke(stypy.reporting.localization.Localization(__file__, 2322, 26), get_log_range_151751, *[result___neg___151753, result_add_151757], **kwargs_151758)
        
        # Assigning a type to the variable 'a_range' (line 2322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2322, 16), 'a_range', get_log_range_call_result_151759)
        # SSA join for if statement (line 2319)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2318)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Name (line 2324):
        
        # Assigning a Tuple to a Name (line 2324):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2324)
        tuple_151760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2324, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2324)
        # Adding element type (line 2324)
        int_151761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2324, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2324, 23), tuple_151760, int_151761)
        # Adding element type (line 2324)
        int_151762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2324, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2324, 23), tuple_151760, int_151762)
        
        # Assigning a type to the variable 'a_range' (line 2324)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2324, 12), 'a_range', tuple_151760)
        # SSA join for if statement (line 2318)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'has_c' (line 2326)
        has_c_151763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2326, 11), 'has_c')
        # Testing the type of an if condition (line 2326)
        if_condition_151764 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2326, 8), has_c_151763)
        # Assigning a type to the variable 'if_condition_151764' (line 2326)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2326, 8), 'if_condition_151764', if_condition_151764)
        # SSA begins for if statement (line 2326)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'has_b' (line 2327)
        has_b_151765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 15), 'has_b')
        # Testing the type of an if condition (line 2327)
        if_condition_151766 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2327, 12), has_b_151765)
        # Assigning a type to the variable 'if_condition_151766' (line 2327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2327, 12), 'if_condition_151766', if_condition_151766)
        # SSA begins for if statement (line 2327)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2328):
        
        # Assigning a Call to a Name (line 2328):
        
        # Call to get_log_range(...): (line 2328)
        # Processing the call arguments (line 2328)
        # Getting the type of 't' (line 2328)
        t_151768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 40), 't', False)
        # Getting the type of 'vmax' (line 2328)
        vmax_151769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 43), 'vmax', False)
        int_151770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2328, 50), 'int')
        # Applying the binary operator '+' (line 2328)
        result_add_151771 = python_operator(stypy.reporting.localization.Localization(__file__, 2328, 43), '+', vmax_151769, int_151770)
        
        # Processing the call keyword arguments (line 2328)
        kwargs_151772 = {}
        # Getting the type of 'get_log_range' (line 2328)
        get_log_range_151767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 26), 'get_log_range', False)
        # Calling get_log_range(args, kwargs) (line 2328)
        get_log_range_call_result_151773 = invoke(stypy.reporting.localization.Localization(__file__, 2328, 26), get_log_range_151767, *[t_151768, result_add_151771], **kwargs_151772)
        
        # Assigning a type to the variable 'c_range' (line 2328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2328, 16), 'c_range', get_log_range_call_result_151773)
        # SSA branch for the else part of an if statement (line 2327)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2330):
        
        # Assigning a Call to a Name (line 2330):
        
        # Call to get_log_range(...): (line 2330)
        # Processing the call arguments (line 2330)
        # Getting the type of 'vmin' (line 2330)
        vmin_151775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 40), 'vmin', False)
        # Getting the type of 'vmax' (line 2330)
        vmax_151776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 46), 'vmax', False)
        int_151777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2330, 53), 'int')
        # Applying the binary operator '+' (line 2330)
        result_add_151778 = python_operator(stypy.reporting.localization.Localization(__file__, 2330, 46), '+', vmax_151776, int_151777)
        
        # Processing the call keyword arguments (line 2330)
        kwargs_151779 = {}
        # Getting the type of 'get_log_range' (line 2330)
        get_log_range_151774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 26), 'get_log_range', False)
        # Calling get_log_range(args, kwargs) (line 2330)
        get_log_range_call_result_151780 = invoke(stypy.reporting.localization.Localization(__file__, 2330, 26), get_log_range_151774, *[vmin_151775, result_add_151778], **kwargs_151779)
        
        # Assigning a type to the variable 'c_range' (line 2330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2330, 16), 'c_range', get_log_range_call_result_151780)
        # SSA join for if statement (line 2327)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2326)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Name (line 2332):
        
        # Assigning a Tuple to a Name (line 2332):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2332)
        tuple_151781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2332, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2332)
        # Adding element type (line 2332)
        int_151782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2332, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2332, 23), tuple_151781, int_151782)
        # Adding element type (line 2332)
        int_151783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2332, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2332, 23), tuple_151781, int_151783)
        
        # Assigning a type to the variable 'c_range' (line 2332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2332, 12), 'c_range', tuple_151781)
        # SSA join for if statement (line 2326)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 2334):
        
        # Assigning a BinOp to a Name (line 2334):
        
        # Obtaining the type of the subscript
        int_151784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2334, 31), 'int')
        # Getting the type of 'a_range' (line 2334)
        a_range_151785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 23), 'a_range')
        # Obtaining the member '__getitem__' of a type (line 2334)
        getitem___151786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2334, 23), a_range_151785, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2334)
        subscript_call_result_151787 = invoke(stypy.reporting.localization.Localization(__file__, 2334, 23), getitem___151786, int_151784)
        
        
        # Obtaining the type of the subscript
        int_151788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2334, 44), 'int')
        # Getting the type of 'a_range' (line 2334)
        a_range_151789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 36), 'a_range')
        # Obtaining the member '__getitem__' of a type (line 2334)
        getitem___151790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2334, 36), a_range_151789, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2334)
        subscript_call_result_151791 = invoke(stypy.reporting.localization.Localization(__file__, 2334, 36), getitem___151790, int_151788)
        
        # Applying the binary operator '-' (line 2334)
        result_sub_151792 = python_operator(stypy.reporting.localization.Localization(__file__, 2334, 23), '-', subscript_call_result_151787, subscript_call_result_151791)
        
        
        # Obtaining the type of the subscript
        int_151793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2334, 59), 'int')
        # Getting the type of 'c_range' (line 2334)
        c_range_151794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 51), 'c_range')
        # Obtaining the member '__getitem__' of a type (line 2334)
        getitem___151795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2334, 51), c_range_151794, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2334)
        subscript_call_result_151796 = invoke(stypy.reporting.localization.Localization(__file__, 2334, 51), getitem___151795, int_151793)
        
        
        # Obtaining the type of the subscript
        int_151797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2334, 72), 'int')
        # Getting the type of 'c_range' (line 2334)
        c_range_151798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 64), 'c_range')
        # Obtaining the member '__getitem__' of a type (line 2334)
        getitem___151799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2334, 64), c_range_151798, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2334)
        subscript_call_result_151800 = invoke(stypy.reporting.localization.Localization(__file__, 2334, 64), getitem___151799, int_151797)
        
        # Applying the binary operator '-' (line 2334)
        result_sub_151801 = python_operator(stypy.reporting.localization.Localization(__file__, 2334, 51), '-', subscript_call_result_151796, subscript_call_result_151800)
        
        # Applying the binary operator '+' (line 2334)
        result_add_151802 = python_operator(stypy.reporting.localization.Localization(__file__, 2334, 22), '+', result_sub_151792, result_sub_151801)
        
        # Assigning a type to the variable 'total_ticks' (line 2334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2334, 8), 'total_ticks', result_add_151802)
        
        # Getting the type of 'has_b' (line 2335)
        has_b_151803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 11), 'has_b')
        # Testing the type of an if condition (line 2335)
        if_condition_151804 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2335, 8), has_b_151803)
        # Assigning a type to the variable 'if_condition_151804' (line 2335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2335, 8), 'if_condition_151804', if_condition_151804)
        # SSA begins for if statement (line 2335)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'total_ticks' (line 2336)
        total_ticks_151805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 12), 'total_ticks')
        int_151806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2336, 27), 'int')
        # Applying the binary operator '+=' (line 2336)
        result_iadd_151807 = python_operator(stypy.reporting.localization.Localization(__file__, 2336, 12), '+=', total_ticks_151805, int_151806)
        # Assigning a type to the variable 'total_ticks' (line 2336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2336, 12), 'total_ticks', result_iadd_151807)
        
        # SSA join for if statement (line 2335)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2337):
        
        # Assigning a Call to a Name (line 2337):
        
        # Call to max(...): (line 2337)
        # Processing the call arguments (line 2337)
        
        # Call to floor(...): (line 2337)
        # Processing the call arguments (line 2337)
        
        # Call to float(...): (line 2337)
        # Processing the call arguments (line 2337)
        # Getting the type of 'total_ticks' (line 2337)
        total_ticks_151812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 36), 'total_ticks', False)
        # Processing the call keyword arguments (line 2337)
        kwargs_151813 = {}
        # Getting the type of 'float' (line 2337)
        float_151811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 30), 'float', False)
        # Calling float(args, kwargs) (line 2337)
        float_call_result_151814 = invoke(stypy.reporting.localization.Localization(__file__, 2337, 30), float_151811, *[total_ticks_151812], **kwargs_151813)
        
        # Getting the type of 'self' (line 2337)
        self_151815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 52), 'self', False)
        # Obtaining the member 'numticks' of a type (line 2337)
        numticks_151816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2337, 52), self_151815, 'numticks')
        int_151817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2337, 68), 'int')
        # Applying the binary operator '-' (line 2337)
        result_sub_151818 = python_operator(stypy.reporting.localization.Localization(__file__, 2337, 52), '-', numticks_151816, int_151817)
        
        # Applying the binary operator 'div' (line 2337)
        result_div_151819 = python_operator(stypy.reporting.localization.Localization(__file__, 2337, 30), 'div', float_call_result_151814, result_sub_151818)
        
        # Processing the call keyword arguments (line 2337)
        kwargs_151820 = {}
        # Getting the type of 'np' (line 2337)
        np_151809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 21), 'np', False)
        # Obtaining the member 'floor' of a type (line 2337)
        floor_151810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2337, 21), np_151809, 'floor')
        # Calling floor(args, kwargs) (line 2337)
        floor_call_result_151821 = invoke(stypy.reporting.localization.Localization(__file__, 2337, 21), floor_151810, *[result_div_151819], **kwargs_151820)
        
        int_151822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2337, 73), 'int')
        # Processing the call keyword arguments (line 2337)
        kwargs_151823 = {}
        # Getting the type of 'max' (line 2337)
        max_151808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 17), 'max', False)
        # Calling max(args, kwargs) (line 2337)
        max_call_result_151824 = invoke(stypy.reporting.localization.Localization(__file__, 2337, 17), max_151808, *[floor_call_result_151821, int_151822], **kwargs_151823)
        
        # Assigning a type to the variable 'stride' (line 2337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2337, 8), 'stride', max_call_result_151824)
        
        # Assigning a List to a Name (line 2339):
        
        # Assigning a List to a Name (line 2339):
        
        # Obtaining an instance of the builtin type 'list' (line 2339)
        list_151825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2339, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2339)
        
        # Assigning a type to the variable 'decades' (line 2339)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2339, 8), 'decades', list_151825)
        
        # Getting the type of 'has_a' (line 2340)
        has_a_151826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 11), 'has_a')
        # Testing the type of an if condition (line 2340)
        if_condition_151827 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2340, 8), has_a_151826)
        # Assigning a type to the variable 'if_condition_151827' (line 2340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2340, 8), 'if_condition_151827', if_condition_151827)
        # SSA begins for if statement (line 2340)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to extend(...): (line 2341)
        # Processing the call arguments (line 2341)
        int_151830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2341, 27), 'int')
        # Getting the type of 'b' (line 2341)
        b_151831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 33), 'b', False)
        
        # Obtaining the type of the subscript
        int_151832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2342, 59), 'int')
        slice_151833 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2341, 39), None, None, int_151832)
        
        # Call to arange(...): (line 2341)
        # Processing the call arguments (line 2341)
        
        # Obtaining the type of the subscript
        int_151836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2341, 57), 'int')
        # Getting the type of 'a_range' (line 2341)
        a_range_151837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 49), 'a_range', False)
        # Obtaining the member '__getitem__' of a type (line 2341)
        getitem___151838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2341, 49), a_range_151837, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2341)
        subscript_call_result_151839 = invoke(stypy.reporting.localization.Localization(__file__, 2341, 49), getitem___151838, int_151836)
        
        
        # Obtaining the type of the subscript
        int_151840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2341, 69), 'int')
        # Getting the type of 'a_range' (line 2341)
        a_range_151841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 61), 'a_range', False)
        # Obtaining the member '__getitem__' of a type (line 2341)
        getitem___151842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2341, 61), a_range_151841, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2341)
        subscript_call_result_151843 = invoke(stypy.reporting.localization.Localization(__file__, 2341, 61), getitem___151842, int_151840)
        
        # Getting the type of 'stride' (line 2342)
        stride_151844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2342, 49), 'stride', False)
        # Processing the call keyword arguments (line 2341)
        kwargs_151845 = {}
        # Getting the type of 'np' (line 2341)
        np_151834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 39), 'np', False)
        # Obtaining the member 'arange' of a type (line 2341)
        arange_151835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2341, 39), np_151834, 'arange')
        # Calling arange(args, kwargs) (line 2341)
        arange_call_result_151846 = invoke(stypy.reporting.localization.Localization(__file__, 2341, 39), arange_151835, *[subscript_call_result_151839, subscript_call_result_151843, stride_151844], **kwargs_151845)
        
        # Obtaining the member '__getitem__' of a type (line 2341)
        getitem___151847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2341, 39), arange_call_result_151846, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2341)
        subscript_call_result_151848 = invoke(stypy.reporting.localization.Localization(__file__, 2341, 39), getitem___151847, slice_151833)
        
        # Applying the binary operator '**' (line 2341)
        result_pow_151849 = python_operator(stypy.reporting.localization.Localization(__file__, 2341, 33), '**', b_151831, subscript_call_result_151848)
        
        # Applying the binary operator '*' (line 2341)
        result_mul_151850 = python_operator(stypy.reporting.localization.Localization(__file__, 2341, 27), '*', int_151830, result_pow_151849)
        
        # Processing the call keyword arguments (line 2341)
        kwargs_151851 = {}
        # Getting the type of 'decades' (line 2341)
        decades_151828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 12), 'decades', False)
        # Obtaining the member 'extend' of a type (line 2341)
        extend_151829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2341, 12), decades_151828, 'extend')
        # Calling extend(args, kwargs) (line 2341)
        extend_call_result_151852 = invoke(stypy.reporting.localization.Localization(__file__, 2341, 12), extend_151829, *[result_mul_151850], **kwargs_151851)
        
        # SSA join for if statement (line 2340)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'has_b' (line 2344)
        has_b_151853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 11), 'has_b')
        # Testing the type of an if condition (line 2344)
        if_condition_151854 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2344, 8), has_b_151853)
        # Assigning a type to the variable 'if_condition_151854' (line 2344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2344, 8), 'if_condition_151854', if_condition_151854)
        # SSA begins for if statement (line 2344)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2345)
        # Processing the call arguments (line 2345)
        float_151857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2345, 27), 'float')
        # Processing the call keyword arguments (line 2345)
        kwargs_151858 = {}
        # Getting the type of 'decades' (line 2345)
        decades_151855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 12), 'decades', False)
        # Obtaining the member 'append' of a type (line 2345)
        append_151856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2345, 12), decades_151855, 'append')
        # Calling append(args, kwargs) (line 2345)
        append_call_result_151859 = invoke(stypy.reporting.localization.Localization(__file__, 2345, 12), append_151856, *[float_151857], **kwargs_151858)
        
        # SSA join for if statement (line 2344)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'has_c' (line 2347)
        has_c_151860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2347, 11), 'has_c')
        # Testing the type of an if condition (line 2347)
        if_condition_151861 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2347, 8), has_c_151860)
        # Assigning a type to the variable 'if_condition_151861' (line 2347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2347, 8), 'if_condition_151861', if_condition_151861)
        # SSA begins for if statement (line 2347)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to extend(...): (line 2348)
        # Processing the call arguments (line 2348)
        # Getting the type of 'b' (line 2348)
        b_151864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 27), 'b', False)
        
        # Call to arange(...): (line 2348)
        # Processing the call arguments (line 2348)
        
        # Obtaining the type of the subscript
        int_151867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2348, 51), 'int')
        # Getting the type of 'c_range' (line 2348)
        c_range_151868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 43), 'c_range', False)
        # Obtaining the member '__getitem__' of a type (line 2348)
        getitem___151869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2348, 43), c_range_151868, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2348)
        subscript_call_result_151870 = invoke(stypy.reporting.localization.Localization(__file__, 2348, 43), getitem___151869, int_151867)
        
        
        # Obtaining the type of the subscript
        int_151871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2348, 63), 'int')
        # Getting the type of 'c_range' (line 2348)
        c_range_151872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 55), 'c_range', False)
        # Obtaining the member '__getitem__' of a type (line 2348)
        getitem___151873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2348, 55), c_range_151872, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2348)
        subscript_call_result_151874 = invoke(stypy.reporting.localization.Localization(__file__, 2348, 55), getitem___151873, int_151871)
        
        # Getting the type of 'stride' (line 2348)
        stride_151875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 67), 'stride', False)
        # Processing the call keyword arguments (line 2348)
        kwargs_151876 = {}
        # Getting the type of 'np' (line 2348)
        np_151865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 33), 'np', False)
        # Obtaining the member 'arange' of a type (line 2348)
        arange_151866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2348, 33), np_151865, 'arange')
        # Calling arange(args, kwargs) (line 2348)
        arange_call_result_151877 = invoke(stypy.reporting.localization.Localization(__file__, 2348, 33), arange_151866, *[subscript_call_result_151870, subscript_call_result_151874, stride_151875], **kwargs_151876)
        
        # Applying the binary operator '**' (line 2348)
        result_pow_151878 = python_operator(stypy.reporting.localization.Localization(__file__, 2348, 27), '**', b_151864, arange_call_result_151877)
        
        # Processing the call keyword arguments (line 2348)
        kwargs_151879 = {}
        # Getting the type of 'decades' (line 2348)
        decades_151862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 12), 'decades', False)
        # Obtaining the member 'extend' of a type (line 2348)
        extend_151863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2348, 12), decades_151862, 'extend')
        # Calling extend(args, kwargs) (line 2348)
        extend_call_result_151880 = invoke(stypy.reporting.localization.Localization(__file__, 2348, 12), extend_151863, *[result_pow_151878], **kwargs_151879)
        
        # SSA join for if statement (line 2347)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 2351)
        # Getting the type of 'self' (line 2351)
        self_151881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 11), 'self')
        # Obtaining the member '_subs' of a type (line 2351)
        _subs_151882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 11), self_151881, '_subs')
        # Getting the type of 'None' (line 2351)
        None_151883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 25), 'None')
        
        (may_be_151884, more_types_in_union_151885) = may_be_none(_subs_151882, None_151883)

        if may_be_151884:

            if more_types_in_union_151885:
                # Runtime conditional SSA (line 2351)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2352):
            
            # Assigning a Call to a Name (line 2352):
            
            # Call to arange(...): (line 2352)
            # Processing the call arguments (line 2352)
            float_151888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2352, 29), 'float')
            # Getting the type of 'b' (line 2352)
            b_151889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 34), 'b', False)
            # Processing the call keyword arguments (line 2352)
            kwargs_151890 = {}
            # Getting the type of 'np' (line 2352)
            np_151886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 19), 'np', False)
            # Obtaining the member 'arange' of a type (line 2352)
            arange_151887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2352, 19), np_151886, 'arange')
            # Calling arange(args, kwargs) (line 2352)
            arange_call_result_151891 = invoke(stypy.reporting.localization.Localization(__file__, 2352, 19), arange_151887, *[float_151888, b_151889], **kwargs_151890)
            
            # Assigning a type to the variable 'subs' (line 2352)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2352, 12), 'subs', arange_call_result_151891)

            if more_types_in_union_151885:
                # Runtime conditional SSA for else branch (line 2351)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_151884) or more_types_in_union_151885):
            
            # Assigning a Call to a Name (line 2354):
            
            # Assigning a Call to a Name (line 2354):
            
            # Call to asarray(...): (line 2354)
            # Processing the call arguments (line 2354)
            # Getting the type of 'self' (line 2354)
            self_151894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 30), 'self', False)
            # Obtaining the member '_subs' of a type (line 2354)
            _subs_151895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2354, 30), self_151894, '_subs')
            # Processing the call keyword arguments (line 2354)
            kwargs_151896 = {}
            # Getting the type of 'np' (line 2354)
            np_151892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 19), 'np', False)
            # Obtaining the member 'asarray' of a type (line 2354)
            asarray_151893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2354, 19), np_151892, 'asarray')
            # Calling asarray(args, kwargs) (line 2354)
            asarray_call_result_151897 = invoke(stypy.reporting.localization.Localization(__file__, 2354, 19), asarray_151893, *[_subs_151895], **kwargs_151896)
            
            # Assigning a type to the variable 'subs' (line 2354)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2354, 12), 'subs', asarray_call_result_151897)

            if (may_be_151884 and more_types_in_union_151885):
                # SSA join for if statement (line 2351)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 2356)
        # Processing the call arguments (line 2356)
        # Getting the type of 'subs' (line 2356)
        subs_151899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 15), 'subs', False)
        # Processing the call keyword arguments (line 2356)
        kwargs_151900 = {}
        # Getting the type of 'len' (line 2356)
        len_151898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 11), 'len', False)
        # Calling len(args, kwargs) (line 2356)
        len_call_result_151901 = invoke(stypy.reporting.localization.Localization(__file__, 2356, 11), len_151898, *[subs_151899], **kwargs_151900)
        
        int_151902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2356, 23), 'int')
        # Applying the binary operator '>' (line 2356)
        result_gt_151903 = python_operator(stypy.reporting.localization.Localization(__file__, 2356, 11), '>', len_call_result_151901, int_151902)
        
        
        
        # Obtaining the type of the subscript
        int_151904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2356, 33), 'int')
        # Getting the type of 'subs' (line 2356)
        subs_151905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 28), 'subs')
        # Obtaining the member '__getitem__' of a type (line 2356)
        getitem___151906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2356, 28), subs_151905, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2356)
        subscript_call_result_151907 = invoke(stypy.reporting.localization.Localization(__file__, 2356, 28), getitem___151906, int_151904)
        
        float_151908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2356, 39), 'float')
        # Applying the binary operator '!=' (line 2356)
        result_ne_151909 = python_operator(stypy.reporting.localization.Localization(__file__, 2356, 28), '!=', subscript_call_result_151907, float_151908)
        
        # Applying the binary operator 'or' (line 2356)
        result_or_keyword_151910 = python_operator(stypy.reporting.localization.Localization(__file__, 2356, 11), 'or', result_gt_151903, result_ne_151909)
        
        # Testing the type of an if condition (line 2356)
        if_condition_151911 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2356, 8), result_or_keyword_151910)
        # Assigning a type to the variable 'if_condition_151911' (line 2356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2356, 8), 'if_condition_151911', if_condition_151911)
        # SSA begins for if statement (line 2356)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 2357):
        
        # Assigning a List to a Name (line 2357):
        
        # Obtaining an instance of the builtin type 'list' (line 2357)
        list_151912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2357, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2357)
        
        # Assigning a type to the variable 'ticklocs' (line 2357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2357, 12), 'ticklocs', list_151912)
        
        # Getting the type of 'decades' (line 2358)
        decades_151913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 26), 'decades')
        # Testing the type of a for loop iterable (line 2358)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2358, 12), decades_151913)
        # Getting the type of the for loop variable (line 2358)
        for_loop_var_151914 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2358, 12), decades_151913)
        # Assigning a type to the variable 'decade' (line 2358)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2358, 12), 'decade', for_loop_var_151914)
        # SSA begins for a for statement (line 2358)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to extend(...): (line 2359)
        # Processing the call arguments (line 2359)
        # Getting the type of 'subs' (line 2359)
        subs_151917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 32), 'subs', False)
        # Getting the type of 'decade' (line 2359)
        decade_151918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 39), 'decade', False)
        # Applying the binary operator '*' (line 2359)
        result_mul_151919 = python_operator(stypy.reporting.localization.Localization(__file__, 2359, 32), '*', subs_151917, decade_151918)
        
        # Processing the call keyword arguments (line 2359)
        kwargs_151920 = {}
        # Getting the type of 'ticklocs' (line 2359)
        ticklocs_151915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 16), 'ticklocs', False)
        # Obtaining the member 'extend' of a type (line 2359)
        extend_151916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2359, 16), ticklocs_151915, 'extend')
        # Calling extend(args, kwargs) (line 2359)
        extend_call_result_151921 = invoke(stypy.reporting.localization.Localization(__file__, 2359, 16), extend_151916, *[result_mul_151919], **kwargs_151920)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2356)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 2361):
        
        # Assigning a Name to a Name (line 2361):
        # Getting the type of 'decades' (line 2361)
        decades_151922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2361, 23), 'decades')
        # Assigning a type to the variable 'ticklocs' (line 2361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2361, 12), 'ticklocs', decades_151922)
        # SSA join for if statement (line 2356)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to raise_if_exceeds(...): (line 2363)
        # Processing the call arguments (line 2363)
        
        # Call to array(...): (line 2363)
        # Processing the call arguments (line 2363)
        # Getting the type of 'ticklocs' (line 2363)
        ticklocs_151927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2363, 46), 'ticklocs', False)
        # Processing the call keyword arguments (line 2363)
        kwargs_151928 = {}
        # Getting the type of 'np' (line 2363)
        np_151925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2363, 37), 'np', False)
        # Obtaining the member 'array' of a type (line 2363)
        array_151926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2363, 37), np_151925, 'array')
        # Calling array(args, kwargs) (line 2363)
        array_call_result_151929 = invoke(stypy.reporting.localization.Localization(__file__, 2363, 37), array_151926, *[ticklocs_151927], **kwargs_151928)
        
        # Processing the call keyword arguments (line 2363)
        kwargs_151930 = {}
        # Getting the type of 'self' (line 2363)
        self_151923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2363, 15), 'self', False)
        # Obtaining the member 'raise_if_exceeds' of a type (line 2363)
        raise_if_exceeds_151924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2363, 15), self_151923, 'raise_if_exceeds')
        # Calling raise_if_exceeds(args, kwargs) (line 2363)
        raise_if_exceeds_call_result_151931 = invoke(stypy.reporting.localization.Localization(__file__, 2363, 15), raise_if_exceeds_151924, *[array_call_result_151929], **kwargs_151930)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2363, 8), 'stypy_return_type', raise_if_exceeds_call_result_151931)
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 2262)
        stypy_return_type_151932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_151932)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_151932


    @norecursion
    def view_limits(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'view_limits'
        module_type_store = module_type_store.open_function_context('view_limits', 2365, 4, False)
        # Assigning a type to the variable 'self' (line 2366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2366, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SymmetricalLogLocator.view_limits.__dict__.__setitem__('stypy_localization', localization)
        SymmetricalLogLocator.view_limits.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SymmetricalLogLocator.view_limits.__dict__.__setitem__('stypy_type_store', module_type_store)
        SymmetricalLogLocator.view_limits.__dict__.__setitem__('stypy_function_name', 'SymmetricalLogLocator.view_limits')
        SymmetricalLogLocator.view_limits.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        SymmetricalLogLocator.view_limits.__dict__.__setitem__('stypy_varargs_param_name', None)
        SymmetricalLogLocator.view_limits.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SymmetricalLogLocator.view_limits.__dict__.__setitem__('stypy_call_defaults', defaults)
        SymmetricalLogLocator.view_limits.__dict__.__setitem__('stypy_call_varargs', varargs)
        SymmetricalLogLocator.view_limits.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SymmetricalLogLocator.view_limits.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SymmetricalLogLocator.view_limits', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'view_limits', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'view_limits(...)' code ##################

        unicode_151933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2366, 8), 'unicode', u'Try to choose the view limits intelligently')
        
        # Assigning a Attribute to a Name (line 2367):
        
        # Assigning a Attribute to a Name (line 2367):
        # Getting the type of 'self' (line 2367)
        self_151934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 12), 'self')
        # Obtaining the member '_base' of a type (line 2367)
        _base_151935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2367, 12), self_151934, '_base')
        # Assigning a type to the variable 'b' (line 2367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2367, 8), 'b', _base_151935)
        
        
        # Getting the type of 'vmax' (line 2368)
        vmax_151936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 11), 'vmax')
        # Getting the type of 'vmin' (line 2368)
        vmin_151937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 18), 'vmin')
        # Applying the binary operator '<' (line 2368)
        result_lt_151938 = python_operator(stypy.reporting.localization.Localization(__file__, 2368, 11), '<', vmax_151936, vmin_151937)
        
        # Testing the type of an if condition (line 2368)
        if_condition_151939 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2368, 8), result_lt_151938)
        # Assigning a type to the variable 'if_condition_151939' (line 2368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2368, 8), 'if_condition_151939', if_condition_151939)
        # SSA begins for if statement (line 2368)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2369):
        
        # Assigning a Name to a Name (line 2369):
        # Getting the type of 'vmax' (line 2369)
        vmax_151940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 25), 'vmax')
        # Assigning a type to the variable 'tuple_assignment_146352' (line 2369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2369, 12), 'tuple_assignment_146352', vmax_151940)
        
        # Assigning a Name to a Name (line 2369):
        # Getting the type of 'vmin' (line 2369)
        vmin_151941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 31), 'vmin')
        # Assigning a type to the variable 'tuple_assignment_146353' (line 2369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2369, 12), 'tuple_assignment_146353', vmin_151941)
        
        # Assigning a Name to a Name (line 2369):
        # Getting the type of 'tuple_assignment_146352' (line 2369)
        tuple_assignment_146352_151942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 12), 'tuple_assignment_146352')
        # Assigning a type to the variable 'vmin' (line 2369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2369, 12), 'vmin', tuple_assignment_146352_151942)
        
        # Assigning a Name to a Name (line 2369):
        # Getting the type of 'tuple_assignment_146353' (line 2369)
        tuple_assignment_146353_151943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 12), 'tuple_assignment_146353')
        # Assigning a type to the variable 'vmax' (line 2369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2369, 18), 'vmax', tuple_assignment_146353_151943)
        # SSA join for if statement (line 2368)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        unicode_151944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2371, 20), 'unicode', u'axes.autolimit_mode')
        # Getting the type of 'rcParams' (line 2371)
        rcParams_151945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 11), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 2371)
        getitem___151946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2371, 11), rcParams_151945, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2371)
        subscript_call_result_151947 = invoke(stypy.reporting.localization.Localization(__file__, 2371, 11), getitem___151946, unicode_151944)
        
        unicode_151948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2371, 46), 'unicode', u'round_numbers')
        # Applying the binary operator '==' (line 2371)
        result_eq_151949 = python_operator(stypy.reporting.localization.Localization(__file__, 2371, 11), '==', subscript_call_result_151947, unicode_151948)
        
        # Testing the type of an if condition (line 2371)
        if_condition_151950 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2371, 8), result_eq_151949)
        # Assigning a type to the variable 'if_condition_151950' (line 2371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2371, 8), 'if_condition_151950', if_condition_151950)
        # SSA begins for if statement (line 2371)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to is_decade(...): (line 2372)
        # Processing the call arguments (line 2372)
        
        # Call to abs(...): (line 2372)
        # Processing the call arguments (line 2372)
        # Getting the type of 'vmin' (line 2372)
        vmin_151953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 33), 'vmin', False)
        # Processing the call keyword arguments (line 2372)
        kwargs_151954 = {}
        # Getting the type of 'abs' (line 2372)
        abs_151952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 29), 'abs', False)
        # Calling abs(args, kwargs) (line 2372)
        abs_call_result_151955 = invoke(stypy.reporting.localization.Localization(__file__, 2372, 29), abs_151952, *[vmin_151953], **kwargs_151954)
        
        # Getting the type of 'b' (line 2372)
        b_151956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 40), 'b', False)
        # Processing the call keyword arguments (line 2372)
        kwargs_151957 = {}
        # Getting the type of 'is_decade' (line 2372)
        is_decade_151951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 19), 'is_decade', False)
        # Calling is_decade(args, kwargs) (line 2372)
        is_decade_call_result_151958 = invoke(stypy.reporting.localization.Localization(__file__, 2372, 19), is_decade_151951, *[abs_call_result_151955, b_151956], **kwargs_151957)
        
        # Applying the 'not' unary operator (line 2372)
        result_not__151959 = python_operator(stypy.reporting.localization.Localization(__file__, 2372, 15), 'not', is_decade_call_result_151958)
        
        # Testing the type of an if condition (line 2372)
        if_condition_151960 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2372, 12), result_not__151959)
        # Assigning a type to the variable 'if_condition_151960' (line 2372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2372, 12), 'if_condition_151960', if_condition_151960)
        # SSA begins for if statement (line 2372)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'vmin' (line 2373)
        vmin_151961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 19), 'vmin')
        int_151962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2373, 26), 'int')
        # Applying the binary operator '<' (line 2373)
        result_lt_151963 = python_operator(stypy.reporting.localization.Localization(__file__, 2373, 19), '<', vmin_151961, int_151962)
        
        # Testing the type of an if condition (line 2373)
        if_condition_151964 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2373, 16), result_lt_151963)
        # Assigning a type to the variable 'if_condition_151964' (line 2373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2373, 16), 'if_condition_151964', if_condition_151964)
        # SSA begins for if statement (line 2373)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a UnaryOp to a Name (line 2374):
        
        # Assigning a UnaryOp to a Name (line 2374):
        
        
        # Call to decade_up(...): (line 2374)
        # Processing the call arguments (line 2374)
        
        # Getting the type of 'vmin' (line 2374)
        vmin_151966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 39), 'vmin', False)
        # Applying the 'usub' unary operator (line 2374)
        result___neg___151967 = python_operator(stypy.reporting.localization.Localization(__file__, 2374, 38), 'usub', vmin_151966)
        
        # Getting the type of 'b' (line 2374)
        b_151968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 45), 'b', False)
        # Processing the call keyword arguments (line 2374)
        kwargs_151969 = {}
        # Getting the type of 'decade_up' (line 2374)
        decade_up_151965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 28), 'decade_up', False)
        # Calling decade_up(args, kwargs) (line 2374)
        decade_up_call_result_151970 = invoke(stypy.reporting.localization.Localization(__file__, 2374, 28), decade_up_151965, *[result___neg___151967, b_151968], **kwargs_151969)
        
        # Applying the 'usub' unary operator (line 2374)
        result___neg___151971 = python_operator(stypy.reporting.localization.Localization(__file__, 2374, 27), 'usub', decade_up_call_result_151970)
        
        # Assigning a type to the variable 'vmin' (line 2374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2374, 20), 'vmin', result___neg___151971)
        # SSA branch for the else part of an if statement (line 2373)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2376):
        
        # Assigning a Call to a Name (line 2376):
        
        # Call to decade_down(...): (line 2376)
        # Processing the call arguments (line 2376)
        # Getting the type of 'vmin' (line 2376)
        vmin_151973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2376, 39), 'vmin', False)
        # Getting the type of 'b' (line 2376)
        b_151974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2376, 45), 'b', False)
        # Processing the call keyword arguments (line 2376)
        kwargs_151975 = {}
        # Getting the type of 'decade_down' (line 2376)
        decade_down_151972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2376, 27), 'decade_down', False)
        # Calling decade_down(args, kwargs) (line 2376)
        decade_down_call_result_151976 = invoke(stypy.reporting.localization.Localization(__file__, 2376, 27), decade_down_151972, *[vmin_151973, b_151974], **kwargs_151975)
        
        # Assigning a type to the variable 'vmin' (line 2376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2376, 20), 'vmin', decade_down_call_result_151976)
        # SSA join for if statement (line 2373)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2372)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to is_decade(...): (line 2377)
        # Processing the call arguments (line 2377)
        
        # Call to abs(...): (line 2377)
        # Processing the call arguments (line 2377)
        # Getting the type of 'vmax' (line 2377)
        vmax_151979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 33), 'vmax', False)
        # Processing the call keyword arguments (line 2377)
        kwargs_151980 = {}
        # Getting the type of 'abs' (line 2377)
        abs_151978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 29), 'abs', False)
        # Calling abs(args, kwargs) (line 2377)
        abs_call_result_151981 = invoke(stypy.reporting.localization.Localization(__file__, 2377, 29), abs_151978, *[vmax_151979], **kwargs_151980)
        
        # Getting the type of 'b' (line 2377)
        b_151982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 40), 'b', False)
        # Processing the call keyword arguments (line 2377)
        kwargs_151983 = {}
        # Getting the type of 'is_decade' (line 2377)
        is_decade_151977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 19), 'is_decade', False)
        # Calling is_decade(args, kwargs) (line 2377)
        is_decade_call_result_151984 = invoke(stypy.reporting.localization.Localization(__file__, 2377, 19), is_decade_151977, *[abs_call_result_151981, b_151982], **kwargs_151983)
        
        # Applying the 'not' unary operator (line 2377)
        result_not__151985 = python_operator(stypy.reporting.localization.Localization(__file__, 2377, 15), 'not', is_decade_call_result_151984)
        
        # Testing the type of an if condition (line 2377)
        if_condition_151986 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2377, 12), result_not__151985)
        # Assigning a type to the variable 'if_condition_151986' (line 2377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2377, 12), 'if_condition_151986', if_condition_151986)
        # SSA begins for if statement (line 2377)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'vmax' (line 2378)
        vmax_151987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2378, 19), 'vmax')
        int_151988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2378, 26), 'int')
        # Applying the binary operator '<' (line 2378)
        result_lt_151989 = python_operator(stypy.reporting.localization.Localization(__file__, 2378, 19), '<', vmax_151987, int_151988)
        
        # Testing the type of an if condition (line 2378)
        if_condition_151990 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2378, 16), result_lt_151989)
        # Assigning a type to the variable 'if_condition_151990' (line 2378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2378, 16), 'if_condition_151990', if_condition_151990)
        # SSA begins for if statement (line 2378)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a UnaryOp to a Name (line 2379):
        
        # Assigning a UnaryOp to a Name (line 2379):
        
        
        # Call to decade_down(...): (line 2379)
        # Processing the call arguments (line 2379)
        
        # Getting the type of 'vmax' (line 2379)
        vmax_151992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 41), 'vmax', False)
        # Applying the 'usub' unary operator (line 2379)
        result___neg___151993 = python_operator(stypy.reporting.localization.Localization(__file__, 2379, 40), 'usub', vmax_151992)
        
        # Getting the type of 'b' (line 2379)
        b_151994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 47), 'b', False)
        # Processing the call keyword arguments (line 2379)
        kwargs_151995 = {}
        # Getting the type of 'decade_down' (line 2379)
        decade_down_151991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 28), 'decade_down', False)
        # Calling decade_down(args, kwargs) (line 2379)
        decade_down_call_result_151996 = invoke(stypy.reporting.localization.Localization(__file__, 2379, 28), decade_down_151991, *[result___neg___151993, b_151994], **kwargs_151995)
        
        # Applying the 'usub' unary operator (line 2379)
        result___neg___151997 = python_operator(stypy.reporting.localization.Localization(__file__, 2379, 27), 'usub', decade_down_call_result_151996)
        
        # Assigning a type to the variable 'vmax' (line 2379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2379, 20), 'vmax', result___neg___151997)
        # SSA branch for the else part of an if statement (line 2378)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2381):
        
        # Assigning a Call to a Name (line 2381):
        
        # Call to decade_up(...): (line 2381)
        # Processing the call arguments (line 2381)
        # Getting the type of 'vmax' (line 2381)
        vmax_151999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2381, 37), 'vmax', False)
        # Getting the type of 'b' (line 2381)
        b_152000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2381, 43), 'b', False)
        # Processing the call keyword arguments (line 2381)
        kwargs_152001 = {}
        # Getting the type of 'decade_up' (line 2381)
        decade_up_151998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2381, 27), 'decade_up', False)
        # Calling decade_up(args, kwargs) (line 2381)
        decade_up_call_result_152002 = invoke(stypy.reporting.localization.Localization(__file__, 2381, 27), decade_up_151998, *[vmax_151999, b_152000], **kwargs_152001)
        
        # Assigning a type to the variable 'vmax' (line 2381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2381, 20), 'vmax', decade_up_call_result_152002)
        # SSA join for if statement (line 2378)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2377)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'vmin' (line 2383)
        vmin_152003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 15), 'vmin')
        # Getting the type of 'vmax' (line 2383)
        vmax_152004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 23), 'vmax')
        # Applying the binary operator '==' (line 2383)
        result_eq_152005 = python_operator(stypy.reporting.localization.Localization(__file__, 2383, 15), '==', vmin_152003, vmax_152004)
        
        # Testing the type of an if condition (line 2383)
        if_condition_152006 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2383, 12), result_eq_152005)
        # Assigning a type to the variable 'if_condition_152006' (line 2383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2383, 12), 'if_condition_152006', if_condition_152006)
        # SSA begins for if statement (line 2383)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'vmin' (line 2384)
        vmin_152007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2384, 19), 'vmin')
        int_152008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2384, 26), 'int')
        # Applying the binary operator '<' (line 2384)
        result_lt_152009 = python_operator(stypy.reporting.localization.Localization(__file__, 2384, 19), '<', vmin_152007, int_152008)
        
        # Testing the type of an if condition (line 2384)
        if_condition_152010 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2384, 16), result_lt_152009)
        # Assigning a type to the variable 'if_condition_152010' (line 2384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2384, 16), 'if_condition_152010', if_condition_152010)
        # SSA begins for if statement (line 2384)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a UnaryOp to a Name (line 2385):
        
        # Assigning a UnaryOp to a Name (line 2385):
        
        
        # Call to decade_up(...): (line 2385)
        # Processing the call arguments (line 2385)
        
        # Getting the type of 'vmin' (line 2385)
        vmin_152012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 39), 'vmin', False)
        # Applying the 'usub' unary operator (line 2385)
        result___neg___152013 = python_operator(stypy.reporting.localization.Localization(__file__, 2385, 38), 'usub', vmin_152012)
        
        # Getting the type of 'b' (line 2385)
        b_152014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 45), 'b', False)
        # Processing the call keyword arguments (line 2385)
        kwargs_152015 = {}
        # Getting the type of 'decade_up' (line 2385)
        decade_up_152011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 28), 'decade_up', False)
        # Calling decade_up(args, kwargs) (line 2385)
        decade_up_call_result_152016 = invoke(stypy.reporting.localization.Localization(__file__, 2385, 28), decade_up_152011, *[result___neg___152013, b_152014], **kwargs_152015)
        
        # Applying the 'usub' unary operator (line 2385)
        result___neg___152017 = python_operator(stypy.reporting.localization.Localization(__file__, 2385, 27), 'usub', decade_up_call_result_152016)
        
        # Assigning a type to the variable 'vmin' (line 2385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2385, 20), 'vmin', result___neg___152017)
        
        # Assigning a UnaryOp to a Name (line 2386):
        
        # Assigning a UnaryOp to a Name (line 2386):
        
        
        # Call to decade_down(...): (line 2386)
        # Processing the call arguments (line 2386)
        
        # Getting the type of 'vmax' (line 2386)
        vmax_152019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2386, 41), 'vmax', False)
        # Applying the 'usub' unary operator (line 2386)
        result___neg___152020 = python_operator(stypy.reporting.localization.Localization(__file__, 2386, 40), 'usub', vmax_152019)
        
        # Getting the type of 'b' (line 2386)
        b_152021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2386, 47), 'b', False)
        # Processing the call keyword arguments (line 2386)
        kwargs_152022 = {}
        # Getting the type of 'decade_down' (line 2386)
        decade_down_152018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2386, 28), 'decade_down', False)
        # Calling decade_down(args, kwargs) (line 2386)
        decade_down_call_result_152023 = invoke(stypy.reporting.localization.Localization(__file__, 2386, 28), decade_down_152018, *[result___neg___152020, b_152021], **kwargs_152022)
        
        # Applying the 'usub' unary operator (line 2386)
        result___neg___152024 = python_operator(stypy.reporting.localization.Localization(__file__, 2386, 27), 'usub', decade_down_call_result_152023)
        
        # Assigning a type to the variable 'vmax' (line 2386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2386, 20), 'vmax', result___neg___152024)
        # SSA branch for the else part of an if statement (line 2384)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2388):
        
        # Assigning a Call to a Name (line 2388):
        
        # Call to decade_down(...): (line 2388)
        # Processing the call arguments (line 2388)
        # Getting the type of 'vmin' (line 2388)
        vmin_152026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 39), 'vmin', False)
        # Getting the type of 'b' (line 2388)
        b_152027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 45), 'b', False)
        # Processing the call keyword arguments (line 2388)
        kwargs_152028 = {}
        # Getting the type of 'decade_down' (line 2388)
        decade_down_152025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 27), 'decade_down', False)
        # Calling decade_down(args, kwargs) (line 2388)
        decade_down_call_result_152029 = invoke(stypy.reporting.localization.Localization(__file__, 2388, 27), decade_down_152025, *[vmin_152026, b_152027], **kwargs_152028)
        
        # Assigning a type to the variable 'vmin' (line 2388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2388, 20), 'vmin', decade_down_call_result_152029)
        
        # Assigning a Call to a Name (line 2389):
        
        # Assigning a Call to a Name (line 2389):
        
        # Call to decade_up(...): (line 2389)
        # Processing the call arguments (line 2389)
        # Getting the type of 'vmax' (line 2389)
        vmax_152031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 37), 'vmax', False)
        # Getting the type of 'b' (line 2389)
        b_152032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 43), 'b', False)
        # Processing the call keyword arguments (line 2389)
        kwargs_152033 = {}
        # Getting the type of 'decade_up' (line 2389)
        decade_up_152030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 27), 'decade_up', False)
        # Calling decade_up(args, kwargs) (line 2389)
        decade_up_call_result_152034 = invoke(stypy.reporting.localization.Localization(__file__, 2389, 27), decade_up_152030, *[vmax_152031, b_152032], **kwargs_152033)
        
        # Assigning a type to the variable 'vmax' (line 2389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2389, 20), 'vmax', decade_up_call_result_152034)
        # SSA join for if statement (line 2384)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2383)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2371)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2391):
        
        # Assigning a Call to a Name (line 2391):
        
        # Call to nonsingular(...): (line 2391)
        # Processing the call arguments (line 2391)
        # Getting the type of 'vmin' (line 2391)
        vmin_152037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 41), 'vmin', False)
        # Getting the type of 'vmax' (line 2391)
        vmax_152038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 47), 'vmax', False)
        # Processing the call keyword arguments (line 2391)
        kwargs_152039 = {}
        # Getting the type of 'mtransforms' (line 2391)
        mtransforms_152035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 17), 'mtransforms', False)
        # Obtaining the member 'nonsingular' of a type (line 2391)
        nonsingular_152036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2391, 17), mtransforms_152035, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 2391)
        nonsingular_call_result_152040 = invoke(stypy.reporting.localization.Localization(__file__, 2391, 17), nonsingular_152036, *[vmin_152037, vmax_152038], **kwargs_152039)
        
        # Assigning a type to the variable 'result' (line 2391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2391, 8), 'result', nonsingular_call_result_152040)
        # Getting the type of 'result' (line 2392)
        result_152041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 2392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2392, 8), 'stypy_return_type', result_152041)
        
        # ################# End of 'view_limits(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'view_limits' in the type store
        # Getting the type of 'stypy_return_type' (line 2365)
        stypy_return_type_152042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_152042)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'view_limits'
        return stypy_return_type_152042


# Assigning a type to the variable 'SymmetricalLogLocator' (line 2225)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2225, 0), 'SymmetricalLogLocator', SymmetricalLogLocator)
# Declaration of the 'LogitLocator' class
# Getting the type of 'Locator' (line 2395)
Locator_152043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 19), 'Locator')

class LogitLocator(Locator_152043, ):
    unicode_152044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2398, (-1)), 'unicode', u'\n    Determine the tick locations for logit axes\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 2400)
        False_152045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2400, 29), 'False')
        defaults = [False_152045]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2400, 4, False)
        # Assigning a type to the variable 'self' (line 2401)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2401, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogitLocator.__init__', ['minor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['minor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_152046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2403, (-1)), 'unicode', u'\n        place ticks on the logit locations\n        ')
        
        # Assigning a Name to a Attribute (line 2404):
        
        # Assigning a Name to a Attribute (line 2404):
        # Getting the type of 'minor' (line 2404)
        minor_152047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2404, 21), 'minor')
        # Getting the type of 'self' (line 2404)
        self_152048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2404, 8), 'self')
        # Setting the type of the member 'minor' of a type (line 2404)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2404, 8), self_152048, 'minor', minor_152047)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2406)
        None_152049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 31), 'None')
        defaults = [None_152049]
        # Create a new context for function 'set_params'
        module_type_store = module_type_store.open_function_context('set_params', 2406, 4, False)
        # Assigning a type to the variable 'self' (line 2407)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2407, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogitLocator.set_params.__dict__.__setitem__('stypy_localization', localization)
        LogitLocator.set_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogitLocator.set_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogitLocator.set_params.__dict__.__setitem__('stypy_function_name', 'LogitLocator.set_params')
        LogitLocator.set_params.__dict__.__setitem__('stypy_param_names_list', ['minor'])
        LogitLocator.set_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogitLocator.set_params.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogitLocator.set_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogitLocator.set_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogitLocator.set_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogitLocator.set_params.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogitLocator.set_params', ['minor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_params', localization, ['minor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_params(...)' code ##################

        unicode_152050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2407, 8), 'unicode', u'Set parameters within this locator.')
        
        # Type idiom detected: calculating its left and rigth part (line 2408)
        # Getting the type of 'minor' (line 2408)
        minor_152051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 8), 'minor')
        # Getting the type of 'None' (line 2408)
        None_152052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 24), 'None')
        
        (may_be_152053, more_types_in_union_152054) = may_not_be_none(minor_152051, None_152052)

        if may_be_152053:

            if more_types_in_union_152054:
                # Runtime conditional SSA (line 2408)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 2409):
            
            # Assigning a Name to a Attribute (line 2409):
            # Getting the type of 'minor' (line 2409)
            minor_152055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 25), 'minor')
            # Getting the type of 'self' (line 2409)
            self_152056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 12), 'self')
            # Setting the type of the member 'minor' of a type (line 2409)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2409, 12), self_152056, 'minor', minor_152055)

            if more_types_in_union_152054:
                # SSA join for if statement (line 2408)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'set_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_params' in the type store
        # Getting the type of 'stypy_return_type' (line 2406)
        stypy_return_type_152057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_152057)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_params'
        return stypy_return_type_152057


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 2411, 4, False)
        # Assigning a type to the variable 'self' (line 2412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2412, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogitLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        LogitLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogitLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogitLocator.__call__.__dict__.__setitem__('stypy_function_name', 'LogitLocator.__call__')
        LogitLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        LogitLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogitLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogitLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogitLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogitLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogitLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogitLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_152058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2412, 8), 'unicode', u'Return the locations of the ticks')
        
        # Assigning a Call to a Tuple (line 2413):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 2413)
        # Processing the call keyword arguments (line 2413)
        kwargs_152062 = {}
        # Getting the type of 'self' (line 2413)
        self_152059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 2413)
        axis_152060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2413, 21), self_152059, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 2413)
        get_view_interval_152061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2413, 21), axis_152060, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 2413)
        get_view_interval_call_result_152063 = invoke(stypy.reporting.localization.Localization(__file__, 2413, 21), get_view_interval_152061, *[], **kwargs_152062)
        
        # Assigning a type to the variable 'call_assignment_146354' (line 2413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2413, 8), 'call_assignment_146354', get_view_interval_call_result_152063)
        
        # Assigning a Call to a Name (line 2413):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_152066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2413, 8), 'int')
        # Processing the call keyword arguments
        kwargs_152067 = {}
        # Getting the type of 'call_assignment_146354' (line 2413)
        call_assignment_146354_152064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 8), 'call_assignment_146354', False)
        # Obtaining the member '__getitem__' of a type (line 2413)
        getitem___152065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2413, 8), call_assignment_146354_152064, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_152068 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___152065, *[int_152066], **kwargs_152067)
        
        # Assigning a type to the variable 'call_assignment_146355' (line 2413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2413, 8), 'call_assignment_146355', getitem___call_result_152068)
        
        # Assigning a Name to a Name (line 2413):
        # Getting the type of 'call_assignment_146355' (line 2413)
        call_assignment_146355_152069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 8), 'call_assignment_146355')
        # Assigning a type to the variable 'vmin' (line 2413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2413, 8), 'vmin', call_assignment_146355_152069)
        
        # Assigning a Call to a Name (line 2413):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_152072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2413, 8), 'int')
        # Processing the call keyword arguments
        kwargs_152073 = {}
        # Getting the type of 'call_assignment_146354' (line 2413)
        call_assignment_146354_152070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 8), 'call_assignment_146354', False)
        # Obtaining the member '__getitem__' of a type (line 2413)
        getitem___152071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2413, 8), call_assignment_146354_152070, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_152074 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___152071, *[int_152072], **kwargs_152073)
        
        # Assigning a type to the variable 'call_assignment_146356' (line 2413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2413, 8), 'call_assignment_146356', getitem___call_result_152074)
        
        # Assigning a Name to a Name (line 2413):
        # Getting the type of 'call_assignment_146356' (line 2413)
        call_assignment_146356_152075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 8), 'call_assignment_146356')
        # Assigning a type to the variable 'vmax' (line 2413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2413, 14), 'vmax', call_assignment_146356_152075)
        
        # Call to tick_values(...): (line 2414)
        # Processing the call arguments (line 2414)
        # Getting the type of 'vmin' (line 2414)
        vmin_152078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2414, 32), 'vmin', False)
        # Getting the type of 'vmax' (line 2414)
        vmax_152079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2414, 38), 'vmax', False)
        # Processing the call keyword arguments (line 2414)
        kwargs_152080 = {}
        # Getting the type of 'self' (line 2414)
        self_152076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2414, 15), 'self', False)
        # Obtaining the member 'tick_values' of a type (line 2414)
        tick_values_152077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2414, 15), self_152076, 'tick_values')
        # Calling tick_values(args, kwargs) (line 2414)
        tick_values_call_result_152081 = invoke(stypy.reporting.localization.Localization(__file__, 2414, 15), tick_values_152077, *[vmin_152078, vmax_152079], **kwargs_152080)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2414, 8), 'stypy_return_type', tick_values_call_result_152081)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 2411)
        stypy_return_type_152082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_152082)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_152082


    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 2416, 4, False)
        # Assigning a type to the variable 'self' (line 2417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2417, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogitLocator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        LogitLocator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogitLocator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogitLocator.tick_values.__dict__.__setitem__('stypy_function_name', 'LogitLocator.tick_values')
        LogitLocator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        LogitLocator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogitLocator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogitLocator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogitLocator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogitLocator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogitLocator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogitLocator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Call to hasattr(...): (line 2418)
        # Processing the call arguments (line 2418)
        # Getting the type of 'self' (line 2418)
        self_152084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 19), 'self', False)
        # Obtaining the member 'axis' of a type (line 2418)
        axis_152085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2418, 19), self_152084, 'axis')
        unicode_152086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2418, 30), 'unicode', u'axes')
        # Processing the call keyword arguments (line 2418)
        kwargs_152087 = {}
        # Getting the type of 'hasattr' (line 2418)
        hasattr_152083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 11), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 2418)
        hasattr_call_result_152088 = invoke(stypy.reporting.localization.Localization(__file__, 2418, 11), hasattr_152083, *[axis_152085, unicode_152086], **kwargs_152087)
        
        
        # Getting the type of 'self' (line 2418)
        self_152089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 42), 'self')
        # Obtaining the member 'axis' of a type (line 2418)
        axis_152090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2418, 42), self_152089, 'axis')
        # Obtaining the member 'axes' of a type (line 2418)
        axes_152091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2418, 42), axis_152090, 'axes')
        # Obtaining the member 'name' of a type (line 2418)
        name_152092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2418, 42), axes_152091, 'name')
        unicode_152093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2418, 65), 'unicode', u'polar')
        # Applying the binary operator '==' (line 2418)
        result_eq_152094 = python_operator(stypy.reporting.localization.Localization(__file__, 2418, 42), '==', name_152092, unicode_152093)
        
        # Applying the binary operator 'and' (line 2418)
        result_and_keyword_152095 = python_operator(stypy.reporting.localization.Localization(__file__, 2418, 11), 'and', hasattr_call_result_152088, result_eq_152094)
        
        # Testing the type of an if condition (line 2418)
        if_condition_152096 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2418, 8), result_and_keyword_152095)
        # Assigning a type to the variable 'if_condition_152096' (line 2418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 8), 'if_condition_152096', if_condition_152096)
        # SSA begins for if statement (line 2418)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to NotImplementedError(...): (line 2419)
        # Processing the call arguments (line 2419)
        unicode_152098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2419, 38), 'unicode', u'Polar axis cannot be logit scaled yet')
        # Processing the call keyword arguments (line 2419)
        kwargs_152099 = {}
        # Getting the type of 'NotImplementedError' (line 2419)
        NotImplementedError_152097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 18), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 2419)
        NotImplementedError_call_result_152100 = invoke(stypy.reporting.localization.Localization(__file__, 2419, 18), NotImplementedError_152097, *[unicode_152098], **kwargs_152099)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2419, 12), NotImplementedError_call_result_152100, 'raise parameter', BaseException)
        # SSA join for if statement (line 2418)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 2421):
        
        # Assigning a Call to a Name:
        
        # Call to nonsingular(...): (line 2421)
        # Processing the call arguments (line 2421)
        # Getting the type of 'vmin' (line 2421)
        vmin_152103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 38), 'vmin', False)
        # Getting the type of 'vmax' (line 2421)
        vmax_152104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 44), 'vmax', False)
        # Processing the call keyword arguments (line 2421)
        kwargs_152105 = {}
        # Getting the type of 'self' (line 2421)
        self_152101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 21), 'self', False)
        # Obtaining the member 'nonsingular' of a type (line 2421)
        nonsingular_152102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2421, 21), self_152101, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 2421)
        nonsingular_call_result_152106 = invoke(stypy.reporting.localization.Localization(__file__, 2421, 21), nonsingular_152102, *[vmin_152103, vmax_152104], **kwargs_152105)
        
        # Assigning a type to the variable 'call_assignment_146357' (line 2421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2421, 8), 'call_assignment_146357', nonsingular_call_result_152106)
        
        # Assigning a Call to a Name (line 2421):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_152109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2421, 8), 'int')
        # Processing the call keyword arguments
        kwargs_152110 = {}
        # Getting the type of 'call_assignment_146357' (line 2421)
        call_assignment_146357_152107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 8), 'call_assignment_146357', False)
        # Obtaining the member '__getitem__' of a type (line 2421)
        getitem___152108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2421, 8), call_assignment_146357_152107, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_152111 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___152108, *[int_152109], **kwargs_152110)
        
        # Assigning a type to the variable 'call_assignment_146358' (line 2421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2421, 8), 'call_assignment_146358', getitem___call_result_152111)
        
        # Assigning a Name to a Name (line 2421):
        # Getting the type of 'call_assignment_146358' (line 2421)
        call_assignment_146358_152112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 8), 'call_assignment_146358')
        # Assigning a type to the variable 'vmin' (line 2421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2421, 8), 'vmin', call_assignment_146358_152112)
        
        # Assigning a Call to a Name (line 2421):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_152115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2421, 8), 'int')
        # Processing the call keyword arguments
        kwargs_152116 = {}
        # Getting the type of 'call_assignment_146357' (line 2421)
        call_assignment_146357_152113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 8), 'call_assignment_146357', False)
        # Obtaining the member '__getitem__' of a type (line 2421)
        getitem___152114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2421, 8), call_assignment_146357_152113, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_152117 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___152114, *[int_152115], **kwargs_152116)
        
        # Assigning a type to the variable 'call_assignment_146359' (line 2421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2421, 8), 'call_assignment_146359', getitem___call_result_152117)
        
        # Assigning a Name to a Name (line 2421):
        # Getting the type of 'call_assignment_146359' (line 2421)
        call_assignment_146359_152118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 8), 'call_assignment_146359')
        # Assigning a type to the variable 'vmax' (line 2421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2421, 14), 'vmax', call_assignment_146359_152118)
        
        # Assigning a Call to a Name (line 2422):
        
        # Assigning a Call to a Name (line 2422):
        
        # Call to log10(...): (line 2422)
        # Processing the call arguments (line 2422)
        # Getting the type of 'vmin' (line 2422)
        vmin_152121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2422, 24), 'vmin', False)
        int_152122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2422, 32), 'int')
        # Getting the type of 'vmin' (line 2422)
        vmin_152123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2422, 36), 'vmin', False)
        # Applying the binary operator '-' (line 2422)
        result_sub_152124 = python_operator(stypy.reporting.localization.Localization(__file__, 2422, 32), '-', int_152122, vmin_152123)
        
        # Applying the binary operator 'div' (line 2422)
        result_div_152125 = python_operator(stypy.reporting.localization.Localization(__file__, 2422, 24), 'div', vmin_152121, result_sub_152124)
        
        # Processing the call keyword arguments (line 2422)
        kwargs_152126 = {}
        # Getting the type of 'np' (line 2422)
        np_152119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2422, 15), 'np', False)
        # Obtaining the member 'log10' of a type (line 2422)
        log10_152120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2422, 15), np_152119, 'log10')
        # Calling log10(args, kwargs) (line 2422)
        log10_call_result_152127 = invoke(stypy.reporting.localization.Localization(__file__, 2422, 15), log10_152120, *[result_div_152125], **kwargs_152126)
        
        # Assigning a type to the variable 'vmin' (line 2422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2422, 8), 'vmin', log10_call_result_152127)
        
        # Assigning a Call to a Name (line 2423):
        
        # Assigning a Call to a Name (line 2423):
        
        # Call to log10(...): (line 2423)
        # Processing the call arguments (line 2423)
        # Getting the type of 'vmax' (line 2423)
        vmax_152130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2423, 24), 'vmax', False)
        int_152131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2423, 32), 'int')
        # Getting the type of 'vmax' (line 2423)
        vmax_152132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2423, 36), 'vmax', False)
        # Applying the binary operator '-' (line 2423)
        result_sub_152133 = python_operator(stypy.reporting.localization.Localization(__file__, 2423, 32), '-', int_152131, vmax_152132)
        
        # Applying the binary operator 'div' (line 2423)
        result_div_152134 = python_operator(stypy.reporting.localization.Localization(__file__, 2423, 24), 'div', vmax_152130, result_sub_152133)
        
        # Processing the call keyword arguments (line 2423)
        kwargs_152135 = {}
        # Getting the type of 'np' (line 2423)
        np_152128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2423, 15), 'np', False)
        # Obtaining the member 'log10' of a type (line 2423)
        log10_152129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2423, 15), np_152128, 'log10')
        # Calling log10(args, kwargs) (line 2423)
        log10_call_result_152136 = invoke(stypy.reporting.localization.Localization(__file__, 2423, 15), log10_152129, *[result_div_152134], **kwargs_152135)
        
        # Assigning a type to the variable 'vmax' (line 2423)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2423, 8), 'vmax', log10_call_result_152136)
        
        # Assigning a Call to a Name (line 2425):
        
        # Assigning a Call to a Name (line 2425):
        
        # Call to floor(...): (line 2425)
        # Processing the call arguments (line 2425)
        # Getting the type of 'vmin' (line 2425)
        vmin_152139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2425, 30), 'vmin', False)
        # Processing the call keyword arguments (line 2425)
        kwargs_152140 = {}
        # Getting the type of 'np' (line 2425)
        np_152137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2425, 21), 'np', False)
        # Obtaining the member 'floor' of a type (line 2425)
        floor_152138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2425, 21), np_152137, 'floor')
        # Calling floor(args, kwargs) (line 2425)
        floor_call_result_152141 = invoke(stypy.reporting.localization.Localization(__file__, 2425, 21), floor_152138, *[vmin_152139], **kwargs_152140)
        
        # Assigning a type to the variable 'decade_min' (line 2425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2425, 8), 'decade_min', floor_call_result_152141)
        
        # Assigning a Call to a Name (line 2426):
        
        # Assigning a Call to a Name (line 2426):
        
        # Call to ceil(...): (line 2426)
        # Processing the call arguments (line 2426)
        # Getting the type of 'vmax' (line 2426)
        vmax_152144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2426, 29), 'vmax', False)
        # Processing the call keyword arguments (line 2426)
        kwargs_152145 = {}
        # Getting the type of 'np' (line 2426)
        np_152142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2426, 21), 'np', False)
        # Obtaining the member 'ceil' of a type (line 2426)
        ceil_152143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2426, 21), np_152142, 'ceil')
        # Calling ceil(args, kwargs) (line 2426)
        ceil_call_result_152146 = invoke(stypy.reporting.localization.Localization(__file__, 2426, 21), ceil_152143, *[vmax_152144], **kwargs_152145)
        
        # Assigning a type to the variable 'decade_max' (line 2426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2426, 8), 'decade_max', ceil_call_result_152146)
        
        
        # Getting the type of 'self' (line 2429)
        self_152147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2429, 15), 'self')
        # Obtaining the member 'minor' of a type (line 2429)
        minor_152148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2429, 15), self_152147, 'minor')
        # Applying the 'not' unary operator (line 2429)
        result_not__152149 = python_operator(stypy.reporting.localization.Localization(__file__, 2429, 11), 'not', minor_152148)
        
        # Testing the type of an if condition (line 2429)
        if_condition_152150 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2429, 8), result_not__152149)
        # Assigning a type to the variable 'if_condition_152150' (line 2429)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2429, 8), 'if_condition_152150', if_condition_152150)
        # SSA begins for if statement (line 2429)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 2430):
        
        # Assigning a List to a Name (line 2430):
        
        # Obtaining an instance of the builtin type 'list' (line 2430)
        list_152151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2430, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2430)
        
        # Assigning a type to the variable 'ticklocs' (line 2430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2430, 12), 'ticklocs', list_152151)
        
        
        # Getting the type of 'decade_min' (line 2431)
        decade_min_152152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 16), 'decade_min')
        int_152153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2431, 30), 'int')
        # Applying the binary operator '<=' (line 2431)
        result_le_152154 = python_operator(stypy.reporting.localization.Localization(__file__, 2431, 16), '<=', decade_min_152152, int_152153)
        
        # Testing the type of an if condition (line 2431)
        if_condition_152155 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2431, 12), result_le_152154)
        # Assigning a type to the variable 'if_condition_152155' (line 2431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2431, 12), 'if_condition_152155', if_condition_152155)
        # SSA begins for if statement (line 2431)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2432):
        
        # Assigning a Call to a Name (line 2432):
        
        # Call to arange(...): (line 2432)
        # Processing the call arguments (line 2432)
        # Getting the type of 'decade_min' (line 2432)
        decade_min_152158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 33), 'decade_min', False)
        
        # Call to min(...): (line 2432)
        # Processing the call arguments (line 2432)
        int_152160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2432, 49), 'int')
        # Getting the type of 'decade_max' (line 2432)
        decade_max_152161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 52), 'decade_max', False)
        int_152162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2432, 65), 'int')
        # Applying the binary operator '+' (line 2432)
        result_add_152163 = python_operator(stypy.reporting.localization.Localization(__file__, 2432, 52), '+', decade_max_152161, int_152162)
        
        # Processing the call keyword arguments (line 2432)
        kwargs_152164 = {}
        # Getting the type of 'min' (line 2432)
        min_152159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 45), 'min', False)
        # Calling min(args, kwargs) (line 2432)
        min_call_result_152165 = invoke(stypy.reporting.localization.Localization(__file__, 2432, 45), min_152159, *[int_152160, result_add_152163], **kwargs_152164)
        
        # Processing the call keyword arguments (line 2432)
        kwargs_152166 = {}
        # Getting the type of 'np' (line 2432)
        np_152156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 23), 'np', False)
        # Obtaining the member 'arange' of a type (line 2432)
        arange_152157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2432, 23), np_152156, 'arange')
        # Calling arange(args, kwargs) (line 2432)
        arange_call_result_152167 = invoke(stypy.reporting.localization.Localization(__file__, 2432, 23), arange_152157, *[decade_min_152158, min_call_result_152165], **kwargs_152166)
        
        # Assigning a type to the variable 'expo' (line 2432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2432, 16), 'expo', arange_call_result_152167)
        
        # Call to extend(...): (line 2433)
        # Processing the call arguments (line 2433)
        
        # Call to list(...): (line 2433)
        # Processing the call arguments (line 2433)
        int_152171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2433, 37), 'int')
        # Getting the type of 'expo' (line 2433)
        expo_152172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2433, 41), 'expo', False)
        # Applying the binary operator '**' (line 2433)
        result_pow_152173 = python_operator(stypy.reporting.localization.Localization(__file__, 2433, 37), '**', int_152171, expo_152172)
        
        # Processing the call keyword arguments (line 2433)
        kwargs_152174 = {}
        # Getting the type of 'list' (line 2433)
        list_152170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2433, 32), 'list', False)
        # Calling list(args, kwargs) (line 2433)
        list_call_result_152175 = invoke(stypy.reporting.localization.Localization(__file__, 2433, 32), list_152170, *[result_pow_152173], **kwargs_152174)
        
        # Processing the call keyword arguments (line 2433)
        kwargs_152176 = {}
        # Getting the type of 'ticklocs' (line 2433)
        ticklocs_152168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2433, 16), 'ticklocs', False)
        # Obtaining the member 'extend' of a type (line 2433)
        extend_152169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2433, 16), ticklocs_152168, 'extend')
        # Calling extend(args, kwargs) (line 2433)
        extend_call_result_152177 = invoke(stypy.reporting.localization.Localization(__file__, 2433, 16), extend_152169, *[list_call_result_152175], **kwargs_152176)
        
        # SSA join for if statement (line 2431)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'decade_min' (line 2434)
        decade_min_152178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2434, 16), 'decade_min')
        int_152179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2434, 30), 'int')
        # Applying the binary operator '<=' (line 2434)
        result_le_152180 = python_operator(stypy.reporting.localization.Localization(__file__, 2434, 16), '<=', decade_min_152178, int_152179)
        
        
        # Getting the type of 'decade_max' (line 2434)
        decade_max_152181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2434, 38), 'decade_max')
        int_152182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2434, 52), 'int')
        # Applying the binary operator '>=' (line 2434)
        result_ge_152183 = python_operator(stypy.reporting.localization.Localization(__file__, 2434, 38), '>=', decade_max_152181, int_152182)
        
        # Applying the binary operator 'and' (line 2434)
        result_and_keyword_152184 = python_operator(stypy.reporting.localization.Localization(__file__, 2434, 15), 'and', result_le_152180, result_ge_152183)
        
        # Testing the type of an if condition (line 2434)
        if_condition_152185 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2434, 12), result_and_keyword_152184)
        # Assigning a type to the variable 'if_condition_152185' (line 2434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2434, 12), 'if_condition_152185', if_condition_152185)
        # SSA begins for if statement (line 2434)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2435)
        # Processing the call arguments (line 2435)
        float_152188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2435, 32), 'float')
        # Processing the call keyword arguments (line 2435)
        kwargs_152189 = {}
        # Getting the type of 'ticklocs' (line 2435)
        ticklocs_152186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 16), 'ticklocs', False)
        # Obtaining the member 'append' of a type (line 2435)
        append_152187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2435, 16), ticklocs_152186, 'append')
        # Calling append(args, kwargs) (line 2435)
        append_call_result_152190 = invoke(stypy.reporting.localization.Localization(__file__, 2435, 16), append_152187, *[float_152188], **kwargs_152189)
        
        # SSA join for if statement (line 2434)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'decade_max' (line 2436)
        decade_max_152191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 16), 'decade_max')
        int_152192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2436, 30), 'int')
        # Applying the binary operator '>=' (line 2436)
        result_ge_152193 = python_operator(stypy.reporting.localization.Localization(__file__, 2436, 16), '>=', decade_max_152191, int_152192)
        
        # Testing the type of an if condition (line 2436)
        if_condition_152194 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2436, 12), result_ge_152193)
        # Assigning a type to the variable 'if_condition_152194' (line 2436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2436, 12), 'if_condition_152194', if_condition_152194)
        # SSA begins for if statement (line 2436)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a UnaryOp to a Name (line 2437):
        
        # Assigning a UnaryOp to a Name (line 2437):
        
        
        # Call to arange(...): (line 2437)
        # Processing the call arguments (line 2437)
        
        # Call to max(...): (line 2437)
        # Processing the call arguments (line 2437)
        int_152198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2437, 38), 'int')
        # Getting the type of 'decade_min' (line 2437)
        decade_min_152199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 41), 'decade_min', False)
        # Processing the call keyword arguments (line 2437)
        kwargs_152200 = {}
        # Getting the type of 'max' (line 2437)
        max_152197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 34), 'max', False)
        # Calling max(args, kwargs) (line 2437)
        max_call_result_152201 = invoke(stypy.reporting.localization.Localization(__file__, 2437, 34), max_152197, *[int_152198, decade_min_152199], **kwargs_152200)
        
        # Getting the type of 'decade_max' (line 2437)
        decade_max_152202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 54), 'decade_max', False)
        int_152203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2437, 67), 'int')
        # Applying the binary operator '+' (line 2437)
        result_add_152204 = python_operator(stypy.reporting.localization.Localization(__file__, 2437, 54), '+', decade_max_152202, int_152203)
        
        # Processing the call keyword arguments (line 2437)
        kwargs_152205 = {}
        # Getting the type of 'np' (line 2437)
        np_152195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 24), 'np', False)
        # Obtaining the member 'arange' of a type (line 2437)
        arange_152196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2437, 24), np_152195, 'arange')
        # Calling arange(args, kwargs) (line 2437)
        arange_call_result_152206 = invoke(stypy.reporting.localization.Localization(__file__, 2437, 24), arange_152196, *[max_call_result_152201, result_add_152204], **kwargs_152205)
        
        # Applying the 'usub' unary operator (line 2437)
        result___neg___152207 = python_operator(stypy.reporting.localization.Localization(__file__, 2437, 23), 'usub', arange_call_result_152206)
        
        # Assigning a type to the variable 'expo' (line 2437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2437, 16), 'expo', result___neg___152207)
        
        # Call to extend(...): (line 2438)
        # Processing the call arguments (line 2438)
        
        # Call to list(...): (line 2438)
        # Processing the call arguments (line 2438)
        int_152211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2438, 37), 'int')
        int_152212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2438, 41), 'int')
        # Getting the type of 'expo' (line 2438)
        expo_152213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 45), 'expo', False)
        # Applying the binary operator '**' (line 2438)
        result_pow_152214 = python_operator(stypy.reporting.localization.Localization(__file__, 2438, 41), '**', int_152212, expo_152213)
        
        # Applying the binary operator '-' (line 2438)
        result_sub_152215 = python_operator(stypy.reporting.localization.Localization(__file__, 2438, 37), '-', int_152211, result_pow_152214)
        
        # Processing the call keyword arguments (line 2438)
        kwargs_152216 = {}
        # Getting the type of 'list' (line 2438)
        list_152210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 32), 'list', False)
        # Calling list(args, kwargs) (line 2438)
        list_call_result_152217 = invoke(stypy.reporting.localization.Localization(__file__, 2438, 32), list_152210, *[result_sub_152215], **kwargs_152216)
        
        # Processing the call keyword arguments (line 2438)
        kwargs_152218 = {}
        # Getting the type of 'ticklocs' (line 2438)
        ticklocs_152208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 16), 'ticklocs', False)
        # Obtaining the member 'extend' of a type (line 2438)
        extend_152209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2438, 16), ticklocs_152208, 'extend')
        # Calling extend(args, kwargs) (line 2438)
        extend_call_result_152219 = invoke(stypy.reporting.localization.Localization(__file__, 2438, 16), extend_152209, *[list_call_result_152217], **kwargs_152218)
        
        # SSA join for if statement (line 2436)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2429)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Name (line 2442):
        
        # Assigning a List to a Name (line 2442):
        
        # Obtaining an instance of the builtin type 'list' (line 2442)
        list_152220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2442, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2442)
        
        # Assigning a type to the variable 'ticklocs' (line 2442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2442, 12), 'ticklocs', list_152220)
        
        
        # Getting the type of 'decade_min' (line 2443)
        decade_min_152221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 16), 'decade_min')
        int_152222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2443, 30), 'int')
        # Applying the binary operator '<=' (line 2443)
        result_le_152223 = python_operator(stypy.reporting.localization.Localization(__file__, 2443, 16), '<=', decade_min_152221, int_152222)
        
        # Testing the type of an if condition (line 2443)
        if_condition_152224 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2443, 12), result_le_152223)
        # Assigning a type to the variable 'if_condition_152224' (line 2443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2443, 12), 'if_condition_152224', if_condition_152224)
        # SSA begins for if statement (line 2443)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2444):
        
        # Assigning a Call to a Name (line 2444):
        
        # Call to arange(...): (line 2444)
        # Processing the call arguments (line 2444)
        # Getting the type of 'decade_min' (line 2444)
        decade_min_152227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 33), 'decade_min', False)
        
        # Call to min(...): (line 2444)
        # Processing the call arguments (line 2444)
        int_152229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2444, 49), 'int')
        # Getting the type of 'decade_max' (line 2444)
        decade_max_152230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 53), 'decade_max', False)
        # Processing the call keyword arguments (line 2444)
        kwargs_152231 = {}
        # Getting the type of 'min' (line 2444)
        min_152228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 45), 'min', False)
        # Calling min(args, kwargs) (line 2444)
        min_call_result_152232 = invoke(stypy.reporting.localization.Localization(__file__, 2444, 45), min_152228, *[int_152229, decade_max_152230], **kwargs_152231)
        
        # Processing the call keyword arguments (line 2444)
        kwargs_152233 = {}
        # Getting the type of 'np' (line 2444)
        np_152225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 23), 'np', False)
        # Obtaining the member 'arange' of a type (line 2444)
        arange_152226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2444, 23), np_152225, 'arange')
        # Calling arange(args, kwargs) (line 2444)
        arange_call_result_152234 = invoke(stypy.reporting.localization.Localization(__file__, 2444, 23), arange_152226, *[decade_min_152227, min_call_result_152232], **kwargs_152233)
        
        # Assigning a type to the variable 'expo' (line 2444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2444, 16), 'expo', arange_call_result_152234)
        
        # Assigning a Call to a Name (line 2445):
        
        # Assigning a Call to a Name (line 2445):
        
        # Call to ravel(...): (line 2445)
        # Processing the call keyword arguments (line 2445)
        kwargs_152249 = {}
        
        # Call to outer(...): (line 2445)
        # Processing the call arguments (line 2445)
        
        # Call to arange(...): (line 2445)
        # Processing the call arguments (line 2445)
        int_152239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2445, 46), 'int')
        int_152240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2445, 49), 'int')
        # Processing the call keyword arguments (line 2445)
        kwargs_152241 = {}
        # Getting the type of 'np' (line 2445)
        np_152237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2445, 36), 'np', False)
        # Obtaining the member 'arange' of a type (line 2445)
        arange_152238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2445, 36), np_152237, 'arange')
        # Calling arange(args, kwargs) (line 2445)
        arange_call_result_152242 = invoke(stypy.reporting.localization.Localization(__file__, 2445, 36), arange_152238, *[int_152239, int_152240], **kwargs_152241)
        
        int_152243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2445, 54), 'int')
        # Getting the type of 'expo' (line 2445)
        expo_152244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2445, 58), 'expo', False)
        # Applying the binary operator '**' (line 2445)
        result_pow_152245 = python_operator(stypy.reporting.localization.Localization(__file__, 2445, 54), '**', int_152243, expo_152244)
        
        # Processing the call keyword arguments (line 2445)
        kwargs_152246 = {}
        # Getting the type of 'np' (line 2445)
        np_152235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2445, 27), 'np', False)
        # Obtaining the member 'outer' of a type (line 2445)
        outer_152236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2445, 27), np_152235, 'outer')
        # Calling outer(args, kwargs) (line 2445)
        outer_call_result_152247 = invoke(stypy.reporting.localization.Localization(__file__, 2445, 27), outer_152236, *[arange_call_result_152242, result_pow_152245], **kwargs_152246)
        
        # Obtaining the member 'ravel' of a type (line 2445)
        ravel_152248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2445, 27), outer_call_result_152247, 'ravel')
        # Calling ravel(args, kwargs) (line 2445)
        ravel_call_result_152250 = invoke(stypy.reporting.localization.Localization(__file__, 2445, 27), ravel_152248, *[], **kwargs_152249)
        
        # Assigning a type to the variable 'newticks' (line 2445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2445, 16), 'newticks', ravel_call_result_152250)
        
        # Call to extend(...): (line 2446)
        # Processing the call arguments (line 2446)
        
        # Call to list(...): (line 2446)
        # Processing the call arguments (line 2446)
        # Getting the type of 'newticks' (line 2446)
        newticks_152254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 37), 'newticks', False)
        # Processing the call keyword arguments (line 2446)
        kwargs_152255 = {}
        # Getting the type of 'list' (line 2446)
        list_152253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 32), 'list', False)
        # Calling list(args, kwargs) (line 2446)
        list_call_result_152256 = invoke(stypy.reporting.localization.Localization(__file__, 2446, 32), list_152253, *[newticks_152254], **kwargs_152255)
        
        # Processing the call keyword arguments (line 2446)
        kwargs_152257 = {}
        # Getting the type of 'ticklocs' (line 2446)
        ticklocs_152251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 16), 'ticklocs', False)
        # Obtaining the member 'extend' of a type (line 2446)
        extend_152252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2446, 16), ticklocs_152251, 'extend')
        # Calling extend(args, kwargs) (line 2446)
        extend_call_result_152258 = invoke(stypy.reporting.localization.Localization(__file__, 2446, 16), extend_152252, *[list_call_result_152256], **kwargs_152257)
        
        # SSA join for if statement (line 2443)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'decade_min' (line 2447)
        decade_min_152259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 16), 'decade_min')
        int_152260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2447, 30), 'int')
        # Applying the binary operator '<=' (line 2447)
        result_le_152261 = python_operator(stypy.reporting.localization.Localization(__file__, 2447, 16), '<=', decade_min_152259, int_152260)
        
        
        # Getting the type of 'decade_max' (line 2447)
        decade_max_152262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 38), 'decade_max')
        int_152263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2447, 52), 'int')
        # Applying the binary operator '>=' (line 2447)
        result_ge_152264 = python_operator(stypy.reporting.localization.Localization(__file__, 2447, 38), '>=', decade_max_152262, int_152263)
        
        # Applying the binary operator 'and' (line 2447)
        result_and_keyword_152265 = python_operator(stypy.reporting.localization.Localization(__file__, 2447, 15), 'and', result_le_152261, result_ge_152264)
        
        # Testing the type of an if condition (line 2447)
        if_condition_152266 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2447, 12), result_and_keyword_152265)
        # Assigning a type to the variable 'if_condition_152266' (line 2447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2447, 12), 'if_condition_152266', if_condition_152266)
        # SSA begins for if statement (line 2447)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to extend(...): (line 2448)
        # Processing the call arguments (line 2448)
        
        # Obtaining an instance of the builtin type 'list' (line 2448)
        list_152269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2448, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2448)
        # Adding element type (line 2448)
        float_152270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2448, 33), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2448, 32), list_152269, float_152270)
        # Adding element type (line 2448)
        float_152271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2448, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2448, 32), list_152269, float_152271)
        # Adding element type (line 2448)
        float_152272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2448, 43), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2448, 32), list_152269, float_152272)
        # Adding element type (line 2448)
        float_152273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2448, 48), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2448, 32), list_152269, float_152273)
        # Adding element type (line 2448)
        float_152274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2448, 53), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2448, 32), list_152269, float_152274)
        # Adding element type (line 2448)
        float_152275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2448, 58), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2448, 32), list_152269, float_152275)
        
        # Processing the call keyword arguments (line 2448)
        kwargs_152276 = {}
        # Getting the type of 'ticklocs' (line 2448)
        ticklocs_152267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2448, 16), 'ticklocs', False)
        # Obtaining the member 'extend' of a type (line 2448)
        extend_152268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2448, 16), ticklocs_152267, 'extend')
        # Calling extend(args, kwargs) (line 2448)
        extend_call_result_152277 = invoke(stypy.reporting.localization.Localization(__file__, 2448, 16), extend_152268, *[list_152269], **kwargs_152276)
        
        # SSA join for if statement (line 2447)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'decade_max' (line 2449)
        decade_max_152278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2449, 16), 'decade_max')
        int_152279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2449, 30), 'int')
        # Applying the binary operator '>=' (line 2449)
        result_ge_152280 = python_operator(stypy.reporting.localization.Localization(__file__, 2449, 16), '>=', decade_max_152278, int_152279)
        
        # Testing the type of an if condition (line 2449)
        if_condition_152281 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2449, 12), result_ge_152280)
        # Assigning a type to the variable 'if_condition_152281' (line 2449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2449, 12), 'if_condition_152281', if_condition_152281)
        # SSA begins for if statement (line 2449)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a UnaryOp to a Name (line 2450):
        
        # Assigning a UnaryOp to a Name (line 2450):
        
        
        # Call to arange(...): (line 2450)
        # Processing the call arguments (line 2450)
        
        # Call to max(...): (line 2450)
        # Processing the call arguments (line 2450)
        int_152285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2450, 38), 'int')
        # Getting the type of 'decade_min' (line 2450)
        decade_min_152286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 41), 'decade_min', False)
        # Processing the call keyword arguments (line 2450)
        kwargs_152287 = {}
        # Getting the type of 'max' (line 2450)
        max_152284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 34), 'max', False)
        # Calling max(args, kwargs) (line 2450)
        max_call_result_152288 = invoke(stypy.reporting.localization.Localization(__file__, 2450, 34), max_152284, *[int_152285, decade_min_152286], **kwargs_152287)
        
        # Getting the type of 'decade_max' (line 2450)
        decade_max_152289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 54), 'decade_max', False)
        int_152290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2450, 67), 'int')
        # Applying the binary operator '+' (line 2450)
        result_add_152291 = python_operator(stypy.reporting.localization.Localization(__file__, 2450, 54), '+', decade_max_152289, int_152290)
        
        # Processing the call keyword arguments (line 2450)
        kwargs_152292 = {}
        # Getting the type of 'np' (line 2450)
        np_152282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 24), 'np', False)
        # Obtaining the member 'arange' of a type (line 2450)
        arange_152283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2450, 24), np_152282, 'arange')
        # Calling arange(args, kwargs) (line 2450)
        arange_call_result_152293 = invoke(stypy.reporting.localization.Localization(__file__, 2450, 24), arange_152283, *[max_call_result_152288, result_add_152291], **kwargs_152292)
        
        # Applying the 'usub' unary operator (line 2450)
        result___neg___152294 = python_operator(stypy.reporting.localization.Localization(__file__, 2450, 23), 'usub', arange_call_result_152293)
        
        # Assigning a type to the variable 'expo' (line 2450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2450, 16), 'expo', result___neg___152294)
        
        # Assigning a BinOp to a Name (line 2451):
        
        # Assigning a BinOp to a Name (line 2451):
        int_152295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2451, 27), 'int')
        
        # Call to ravel(...): (line 2451)
        # Processing the call keyword arguments (line 2451)
        kwargs_152310 = {}
        
        # Call to outer(...): (line 2451)
        # Processing the call arguments (line 2451)
        
        # Call to arange(...): (line 2451)
        # Processing the call arguments (line 2451)
        int_152300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2451, 50), 'int')
        int_152301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2451, 53), 'int')
        # Processing the call keyword arguments (line 2451)
        kwargs_152302 = {}
        # Getting the type of 'np' (line 2451)
        np_152298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 40), 'np', False)
        # Obtaining the member 'arange' of a type (line 2451)
        arange_152299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 40), np_152298, 'arange')
        # Calling arange(args, kwargs) (line 2451)
        arange_call_result_152303 = invoke(stypy.reporting.localization.Localization(__file__, 2451, 40), arange_152299, *[int_152300, int_152301], **kwargs_152302)
        
        int_152304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2451, 58), 'int')
        # Getting the type of 'expo' (line 2451)
        expo_152305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 62), 'expo', False)
        # Applying the binary operator '**' (line 2451)
        result_pow_152306 = python_operator(stypy.reporting.localization.Localization(__file__, 2451, 58), '**', int_152304, expo_152305)
        
        # Processing the call keyword arguments (line 2451)
        kwargs_152307 = {}
        # Getting the type of 'np' (line 2451)
        np_152296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 31), 'np', False)
        # Obtaining the member 'outer' of a type (line 2451)
        outer_152297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 31), np_152296, 'outer')
        # Calling outer(args, kwargs) (line 2451)
        outer_call_result_152308 = invoke(stypy.reporting.localization.Localization(__file__, 2451, 31), outer_152297, *[arange_call_result_152303, result_pow_152306], **kwargs_152307)
        
        # Obtaining the member 'ravel' of a type (line 2451)
        ravel_152309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 31), outer_call_result_152308, 'ravel')
        # Calling ravel(args, kwargs) (line 2451)
        ravel_call_result_152311 = invoke(stypy.reporting.localization.Localization(__file__, 2451, 31), ravel_152309, *[], **kwargs_152310)
        
        # Applying the binary operator '-' (line 2451)
        result_sub_152312 = python_operator(stypy.reporting.localization.Localization(__file__, 2451, 27), '-', int_152295, ravel_call_result_152311)
        
        # Assigning a type to the variable 'newticks' (line 2451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 16), 'newticks', result_sub_152312)
        
        # Call to extend(...): (line 2452)
        # Processing the call arguments (line 2452)
        
        # Call to list(...): (line 2452)
        # Processing the call arguments (line 2452)
        # Getting the type of 'newticks' (line 2452)
        newticks_152316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 37), 'newticks', False)
        # Processing the call keyword arguments (line 2452)
        kwargs_152317 = {}
        # Getting the type of 'list' (line 2452)
        list_152315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 32), 'list', False)
        # Calling list(args, kwargs) (line 2452)
        list_call_result_152318 = invoke(stypy.reporting.localization.Localization(__file__, 2452, 32), list_152315, *[newticks_152316], **kwargs_152317)
        
        # Processing the call keyword arguments (line 2452)
        kwargs_152319 = {}
        # Getting the type of 'ticklocs' (line 2452)
        ticklocs_152313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 16), 'ticklocs', False)
        # Obtaining the member 'extend' of a type (line 2452)
        extend_152314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2452, 16), ticklocs_152313, 'extend')
        # Calling extend(args, kwargs) (line 2452)
        extend_call_result_152320 = invoke(stypy.reporting.localization.Localization(__file__, 2452, 16), extend_152314, *[list_call_result_152318], **kwargs_152319)
        
        # SSA join for if statement (line 2449)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2429)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to raise_if_exceeds(...): (line 2454)
        # Processing the call arguments (line 2454)
        
        # Call to array(...): (line 2454)
        # Processing the call arguments (line 2454)
        # Getting the type of 'ticklocs' (line 2454)
        ticklocs_152325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 46), 'ticklocs', False)
        # Processing the call keyword arguments (line 2454)
        kwargs_152326 = {}
        # Getting the type of 'np' (line 2454)
        np_152323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 37), 'np', False)
        # Obtaining the member 'array' of a type (line 2454)
        array_152324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2454, 37), np_152323, 'array')
        # Calling array(args, kwargs) (line 2454)
        array_call_result_152327 = invoke(stypy.reporting.localization.Localization(__file__, 2454, 37), array_152324, *[ticklocs_152325], **kwargs_152326)
        
        # Processing the call keyword arguments (line 2454)
        kwargs_152328 = {}
        # Getting the type of 'self' (line 2454)
        self_152321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 15), 'self', False)
        # Obtaining the member 'raise_if_exceeds' of a type (line 2454)
        raise_if_exceeds_152322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2454, 15), self_152321, 'raise_if_exceeds')
        # Calling raise_if_exceeds(args, kwargs) (line 2454)
        raise_if_exceeds_call_result_152329 = invoke(stypy.reporting.localization.Localization(__file__, 2454, 15), raise_if_exceeds_152322, *[array_call_result_152327], **kwargs_152328)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2454, 8), 'stypy_return_type', raise_if_exceeds_call_result_152329)
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 2416)
        stypy_return_type_152330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2416, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_152330)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_152330


    @norecursion
    def nonsingular(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'nonsingular'
        module_type_store = module_type_store.open_function_context('nonsingular', 2456, 4, False)
        # Assigning a type to the variable 'self' (line 2457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2457, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogitLocator.nonsingular.__dict__.__setitem__('stypy_localization', localization)
        LogitLocator.nonsingular.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogitLocator.nonsingular.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogitLocator.nonsingular.__dict__.__setitem__('stypy_function_name', 'LogitLocator.nonsingular')
        LogitLocator.nonsingular.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        LogitLocator.nonsingular.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogitLocator.nonsingular.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogitLocator.nonsingular.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogitLocator.nonsingular.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogitLocator.nonsingular.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogitLocator.nonsingular.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogitLocator.nonsingular', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'nonsingular', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'nonsingular(...)' code ##################

        
        # Assigning a Tuple to a Name (line 2457):
        
        # Assigning a Tuple to a Name (line 2457):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2457)
        tuple_152331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2457, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2457)
        # Adding element type (line 2457)
        float_152332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2457, 25), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2457, 25), tuple_152331, float_152332)
        # Adding element type (line 2457)
        int_152333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2457, 31), 'int')
        float_152334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2457, 35), 'float')
        # Applying the binary operator '-' (line 2457)
        result_sub_152335 = python_operator(stypy.reporting.localization.Localization(__file__, 2457, 31), '-', int_152333, float_152334)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2457, 25), tuple_152331, result_sub_152335)
        
        # Assigning a type to the variable 'initial_range' (line 2457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2457, 8), 'initial_range', tuple_152331)
        
        
        # Evaluating a boolean operation
        
        
        # Call to isfinite(...): (line 2458)
        # Processing the call arguments (line 2458)
        # Getting the type of 'vmin' (line 2458)
        vmin_152338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 27), 'vmin', False)
        # Processing the call keyword arguments (line 2458)
        kwargs_152339 = {}
        # Getting the type of 'np' (line 2458)
        np_152336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 15), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 2458)
        isfinite_152337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2458, 15), np_152336, 'isfinite')
        # Calling isfinite(args, kwargs) (line 2458)
        isfinite_call_result_152340 = invoke(stypy.reporting.localization.Localization(__file__, 2458, 15), isfinite_152337, *[vmin_152338], **kwargs_152339)
        
        # Applying the 'not' unary operator (line 2458)
        result_not__152341 = python_operator(stypy.reporting.localization.Localization(__file__, 2458, 11), 'not', isfinite_call_result_152340)
        
        
        
        # Call to isfinite(...): (line 2458)
        # Processing the call arguments (line 2458)
        # Getting the type of 'vmax' (line 2458)
        vmax_152344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 52), 'vmax', False)
        # Processing the call keyword arguments (line 2458)
        kwargs_152345 = {}
        # Getting the type of 'np' (line 2458)
        np_152342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 40), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 2458)
        isfinite_152343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2458, 40), np_152342, 'isfinite')
        # Calling isfinite(args, kwargs) (line 2458)
        isfinite_call_result_152346 = invoke(stypy.reporting.localization.Localization(__file__, 2458, 40), isfinite_152343, *[vmax_152344], **kwargs_152345)
        
        # Applying the 'not' unary operator (line 2458)
        result_not__152347 = python_operator(stypy.reporting.localization.Localization(__file__, 2458, 36), 'not', isfinite_call_result_152346)
        
        # Applying the binary operator 'or' (line 2458)
        result_or_keyword_152348 = python_operator(stypy.reporting.localization.Localization(__file__, 2458, 11), 'or', result_not__152341, result_not__152347)
        
        # Testing the type of an if condition (line 2458)
        if_condition_152349 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2458, 8), result_or_keyword_152348)
        # Assigning a type to the variable 'if_condition_152349' (line 2458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2458, 8), 'if_condition_152349', if_condition_152349)
        # SSA begins for if statement (line 2458)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'initial_range' (line 2459)
        initial_range_152350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2459, 19), 'initial_range')
        # Assigning a type to the variable 'stypy_return_type' (line 2459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2459, 12), 'stypy_return_type', initial_range_152350)
        # SSA join for if statement (line 2458)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'vmin' (line 2461)
        vmin_152351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2461, 11), 'vmin')
        # Getting the type of 'vmax' (line 2461)
        vmax_152352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2461, 18), 'vmax')
        # Applying the binary operator '>' (line 2461)
        result_gt_152353 = python_operator(stypy.reporting.localization.Localization(__file__, 2461, 11), '>', vmin_152351, vmax_152352)
        
        # Testing the type of an if condition (line 2461)
        if_condition_152354 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2461, 8), result_gt_152353)
        # Assigning a type to the variable 'if_condition_152354' (line 2461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2461, 8), 'if_condition_152354', if_condition_152354)
        # SSA begins for if statement (line 2461)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2462):
        
        # Assigning a Name to a Name (line 2462):
        # Getting the type of 'vmax' (line 2462)
        vmax_152355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 25), 'vmax')
        # Assigning a type to the variable 'tuple_assignment_146360' (line 2462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2462, 12), 'tuple_assignment_146360', vmax_152355)
        
        # Assigning a Name to a Name (line 2462):
        # Getting the type of 'vmin' (line 2462)
        vmin_152356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 31), 'vmin')
        # Assigning a type to the variable 'tuple_assignment_146361' (line 2462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2462, 12), 'tuple_assignment_146361', vmin_152356)
        
        # Assigning a Name to a Name (line 2462):
        # Getting the type of 'tuple_assignment_146360' (line 2462)
        tuple_assignment_146360_152357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 12), 'tuple_assignment_146360')
        # Assigning a type to the variable 'vmin' (line 2462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2462, 12), 'vmin', tuple_assignment_146360_152357)
        
        # Assigning a Name to a Name (line 2462):
        # Getting the type of 'tuple_assignment_146361' (line 2462)
        tuple_assignment_146361_152358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 12), 'tuple_assignment_146361')
        # Assigning a type to the variable 'vmax' (line 2462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2462, 18), 'vmax', tuple_assignment_146361_152358)
        # SSA join for if statement (line 2461)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 2465)
        self_152359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 11), 'self')
        # Obtaining the member 'axis' of a type (line 2465)
        axis_152360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2465, 11), self_152359, 'axis')
        # Getting the type of 'None' (line 2465)
        None_152361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 28), 'None')
        # Applying the binary operator 'isnot' (line 2465)
        result_is_not_152362 = python_operator(stypy.reporting.localization.Localization(__file__, 2465, 11), 'isnot', axis_152360, None_152361)
        
        # Testing the type of an if condition (line 2465)
        if_condition_152363 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2465, 8), result_is_not_152362)
        # Assigning a type to the variable 'if_condition_152363' (line 2465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2465, 8), 'if_condition_152363', if_condition_152363)
        # SSA begins for if statement (line 2465)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2466):
        
        # Assigning a Call to a Name (line 2466):
        
        # Call to get_minpos(...): (line 2466)
        # Processing the call keyword arguments (line 2466)
        kwargs_152367 = {}
        # Getting the type of 'self' (line 2466)
        self_152364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 2466)
        axis_152365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2466, 21), self_152364, 'axis')
        # Obtaining the member 'get_minpos' of a type (line 2466)
        get_minpos_152366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2466, 21), axis_152365, 'get_minpos')
        # Calling get_minpos(args, kwargs) (line 2466)
        get_minpos_call_result_152368 = invoke(stypy.reporting.localization.Localization(__file__, 2466, 21), get_minpos_152366, *[], **kwargs_152367)
        
        # Assigning a type to the variable 'minpos' (line 2466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2466, 12), 'minpos', get_minpos_call_result_152368)
        
        
        
        # Call to isfinite(...): (line 2467)
        # Processing the call arguments (line 2467)
        # Getting the type of 'minpos' (line 2467)
        minpos_152371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 31), 'minpos', False)
        # Processing the call keyword arguments (line 2467)
        kwargs_152372 = {}
        # Getting the type of 'np' (line 2467)
        np_152369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 19), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 2467)
        isfinite_152370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 19), np_152369, 'isfinite')
        # Calling isfinite(args, kwargs) (line 2467)
        isfinite_call_result_152373 = invoke(stypy.reporting.localization.Localization(__file__, 2467, 19), isfinite_152370, *[minpos_152371], **kwargs_152372)
        
        # Applying the 'not' unary operator (line 2467)
        result_not__152374 = python_operator(stypy.reporting.localization.Localization(__file__, 2467, 15), 'not', isfinite_call_result_152373)
        
        # Testing the type of an if condition (line 2467)
        if_condition_152375 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2467, 12), result_not__152374)
        # Assigning a type to the variable 'if_condition_152375' (line 2467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2467, 12), 'if_condition_152375', if_condition_152375)
        # SSA begins for if statement (line 2467)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'initial_range' (line 2468)
        initial_range_152376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 23), 'initial_range')
        # Assigning a type to the variable 'stypy_return_type' (line 2468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2468, 16), 'stypy_return_type', initial_range_152376)
        # SSA join for if statement (line 2467)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2465)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 2470):
        
        # Assigning a Num to a Name (line 2470):
        float_152377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2470, 21), 'float')
        # Assigning a type to the variable 'minpos' (line 2470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2470, 12), 'minpos', float_152377)
        # SSA join for if statement (line 2465)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'vmin' (line 2477)
        vmin_152378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 11), 'vmin')
        int_152379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2477, 19), 'int')
        # Applying the binary operator '<=' (line 2477)
        result_le_152380 = python_operator(stypy.reporting.localization.Localization(__file__, 2477, 11), '<=', vmin_152378, int_152379)
        
        # Testing the type of an if condition (line 2477)
        if_condition_152381 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2477, 8), result_le_152380)
        # Assigning a type to the variable 'if_condition_152381' (line 2477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2477, 8), 'if_condition_152381', if_condition_152381)
        # SSA begins for if statement (line 2477)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2478):
        
        # Assigning a Name to a Name (line 2478):
        # Getting the type of 'minpos' (line 2478)
        minpos_152382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 19), 'minpos')
        # Assigning a type to the variable 'vmin' (line 2478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2478, 12), 'vmin', minpos_152382)
        # SSA join for if statement (line 2477)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'vmax' (line 2479)
        vmax_152383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 11), 'vmax')
        int_152384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2479, 19), 'int')
        # Applying the binary operator '>=' (line 2479)
        result_ge_152385 = python_operator(stypy.reporting.localization.Localization(__file__, 2479, 11), '>=', vmax_152383, int_152384)
        
        # Testing the type of an if condition (line 2479)
        if_condition_152386 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2479, 8), result_ge_152385)
        # Assigning a type to the variable 'if_condition_152386' (line 2479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2479, 8), 'if_condition_152386', if_condition_152386)
        # SSA begins for if statement (line 2479)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 2480):
        
        # Assigning a BinOp to a Name (line 2480):
        int_152387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2480, 19), 'int')
        # Getting the type of 'minpos' (line 2480)
        minpos_152388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 23), 'minpos')
        # Applying the binary operator '-' (line 2480)
        result_sub_152389 = python_operator(stypy.reporting.localization.Localization(__file__, 2480, 19), '-', int_152387, minpos_152388)
        
        # Assigning a type to the variable 'vmax' (line 2480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2480, 12), 'vmax', result_sub_152389)
        # SSA join for if statement (line 2479)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'vmin' (line 2481)
        vmin_152390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2481, 11), 'vmin')
        # Getting the type of 'vmax' (line 2481)
        vmax_152391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2481, 19), 'vmax')
        # Applying the binary operator '==' (line 2481)
        result_eq_152392 = python_operator(stypy.reporting.localization.Localization(__file__, 2481, 11), '==', vmin_152390, vmax_152391)
        
        # Testing the type of an if condition (line 2481)
        if_condition_152393 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2481, 8), result_eq_152392)
        # Assigning a type to the variable 'if_condition_152393' (line 2481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2481, 8), 'if_condition_152393', if_condition_152393)
        # SSA begins for if statement (line 2481)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2482)
        tuple_152394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2482, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2482)
        # Adding element type (line 2482)
        float_152395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2482, 19), 'float')
        # Getting the type of 'vmin' (line 2482)
        vmin_152396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 25), 'vmin')
        # Applying the binary operator '*' (line 2482)
        result_mul_152397 = python_operator(stypy.reporting.localization.Localization(__file__, 2482, 19), '*', float_152395, vmin_152396)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2482, 19), tuple_152394, result_mul_152397)
        # Adding element type (line 2482)
        int_152398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2482, 31), 'int')
        float_152399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2482, 35), 'float')
        # Getting the type of 'vmin' (line 2482)
        vmin_152400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 41), 'vmin')
        # Applying the binary operator '*' (line 2482)
        result_mul_152401 = python_operator(stypy.reporting.localization.Localization(__file__, 2482, 35), '*', float_152399, vmin_152400)
        
        # Applying the binary operator '-' (line 2482)
        result_sub_152402 = python_operator(stypy.reporting.localization.Localization(__file__, 2482, 31), '-', int_152398, result_mul_152401)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2482, 19), tuple_152394, result_sub_152402)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2482, 12), 'stypy_return_type', tuple_152394)
        # SSA join for if statement (line 2481)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2484)
        tuple_152403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2484, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2484)
        # Adding element type (line 2484)
        # Getting the type of 'vmin' (line 2484)
        vmin_152404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 15), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2484, 15), tuple_152403, vmin_152404)
        # Adding element type (line 2484)
        # Getting the type of 'vmax' (line 2484)
        vmax_152405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 21), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2484, 15), tuple_152403, vmax_152405)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2484, 8), 'stypy_return_type', tuple_152403)
        
        # ################# End of 'nonsingular(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'nonsingular' in the type store
        # Getting the type of 'stypy_return_type' (line 2456)
        stypy_return_type_152406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_152406)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'nonsingular'
        return stypy_return_type_152406


# Assigning a type to the variable 'LogitLocator' (line 2395)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2395, 0), 'LogitLocator', LogitLocator)
# Declaration of the 'AutoLocator' class
# Getting the type of 'MaxNLocator' (line 2487)
MaxNLocator_152407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 18), 'MaxNLocator')

class AutoLocator(MaxNLocator_152407, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2488, 4, False)
        # Assigning a type to the variable 'self' (line 2489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2489, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AutoLocator.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        
        # Obtaining the type of the subscript
        unicode_152408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2489, 20), 'unicode', u'_internal.classic_mode')
        # Getting the type of 'rcParams' (line 2489)
        rcParams_152409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2489, 11), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 2489)
        getitem___152410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2489, 11), rcParams_152409, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2489)
        subscript_call_result_152411 = invoke(stypy.reporting.localization.Localization(__file__, 2489, 11), getitem___152410, unicode_152408)
        
        # Testing the type of an if condition (line 2489)
        if_condition_152412 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2489, 8), subscript_call_result_152411)
        # Assigning a type to the variable 'if_condition_152412' (line 2489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2489, 8), 'if_condition_152412', if_condition_152412)
        # SSA begins for if statement (line 2489)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 2490):
        
        # Assigning a Num to a Name (line 2490):
        int_152413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2490, 20), 'int')
        # Assigning a type to the variable 'nbins' (line 2490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2490, 12), 'nbins', int_152413)
        
        # Assigning a List to a Name (line 2491):
        
        # Assigning a List to a Name (line 2491):
        
        # Obtaining an instance of the builtin type 'list' (line 2491)
        list_152414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2491, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2491)
        # Adding element type (line 2491)
        int_152415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2491, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2491, 20), list_152414, int_152415)
        # Adding element type (line 2491)
        int_152416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2491, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2491, 20), list_152414, int_152416)
        # Adding element type (line 2491)
        int_152417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2491, 27), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2491, 20), list_152414, int_152417)
        # Adding element type (line 2491)
        int_152418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2491, 30), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2491, 20), list_152414, int_152418)
        
        # Assigning a type to the variable 'steps' (line 2491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2491, 12), 'steps', list_152414)
        # SSA branch for the else part of an if statement (line 2489)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 2493):
        
        # Assigning a Str to a Name (line 2493):
        unicode_152419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2493, 20), 'unicode', u'auto')
        # Assigning a type to the variable 'nbins' (line 2493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2493, 12), 'nbins', unicode_152419)
        
        # Assigning a List to a Name (line 2494):
        
        # Assigning a List to a Name (line 2494):
        
        # Obtaining an instance of the builtin type 'list' (line 2494)
        list_152420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2494, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2494)
        # Adding element type (line 2494)
        int_152421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2494, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2494, 20), list_152420, int_152421)
        # Adding element type (line 2494)
        int_152422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2494, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2494, 20), list_152420, int_152422)
        # Adding element type (line 2494)
        float_152423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2494, 27), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2494, 20), list_152420, float_152423)
        # Adding element type (line 2494)
        int_152424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2494, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2494, 20), list_152420, int_152424)
        # Adding element type (line 2494)
        int_152425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2494, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2494, 20), list_152420, int_152425)
        
        # Assigning a type to the variable 'steps' (line 2494)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2494, 12), 'steps', list_152420)
        # SSA join for if statement (line 2489)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 2495)
        # Processing the call arguments (line 2495)
        # Getting the type of 'self' (line 2495)
        self_152428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 29), 'self', False)
        # Processing the call keyword arguments (line 2495)
        # Getting the type of 'nbins' (line 2495)
        nbins_152429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 41), 'nbins', False)
        keyword_152430 = nbins_152429
        # Getting the type of 'steps' (line 2495)
        steps_152431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 54), 'steps', False)
        keyword_152432 = steps_152431
        kwargs_152433 = {'nbins': keyword_152430, 'steps': keyword_152432}
        # Getting the type of 'MaxNLocator' (line 2495)
        MaxNLocator_152426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 8), 'MaxNLocator', False)
        # Obtaining the member '__init__' of a type (line 2495)
        init___152427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2495, 8), MaxNLocator_152426, '__init__')
        # Calling __init__(args, kwargs) (line 2495)
        init___call_result_152434 = invoke(stypy.reporting.localization.Localization(__file__, 2495, 8), init___152427, *[self_152428], **kwargs_152433)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'AutoLocator' (line 2487)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2487, 0), 'AutoLocator', AutoLocator)
# Declaration of the 'AutoMinorLocator' class
# Getting the type of 'Locator' (line 2498)
Locator_152435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2498, 23), 'Locator')

class AutoMinorLocator(Locator_152435, ):
    unicode_152436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2502, (-1)), 'unicode', u'\n    Dynamically find minor tick positions based on the positions of\n    major ticks. The scale must be linear with major ticks evenly spaced.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2503)
        None_152437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 25), 'None')
        defaults = [None_152437]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2503, 4, False)
        # Assigning a type to the variable 'self' (line 2504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2504, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AutoMinorLocator.__init__', ['n'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['n'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_152438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2510, (-1)), 'unicode', u'\n        *n* is the number of subdivisions of the interval between\n        major ticks; e.g., n=2 will place a single minor tick midway\n        between major ticks.\n\n        If *n* is omitted or None, it will be set to 5 or 4.\n        ')
        
        # Assigning a Name to a Attribute (line 2511):
        
        # Assigning a Name to a Attribute (line 2511):
        # Getting the type of 'n' (line 2511)
        n_152439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 21), 'n')
        # Getting the type of 'self' (line 2511)
        self_152440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 8), 'self')
        # Setting the type of the member 'ndivs' of a type (line 2511)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2511, 8), self_152440, 'ndivs', n_152439)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 2513, 4, False)
        # Assigning a type to the variable 'self' (line 2514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2514, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AutoMinorLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        AutoMinorLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AutoMinorLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        AutoMinorLocator.__call__.__dict__.__setitem__('stypy_function_name', 'AutoMinorLocator.__call__')
        AutoMinorLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        AutoMinorLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        AutoMinorLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AutoMinorLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        AutoMinorLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        AutoMinorLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AutoMinorLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AutoMinorLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_152441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2514, 8), 'unicode', u'Return the locations of the ticks')
        
        
        
        # Call to get_scale(...): (line 2515)
        # Processing the call keyword arguments (line 2515)
        kwargs_152445 = {}
        # Getting the type of 'self' (line 2515)
        self_152442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 11), 'self', False)
        # Obtaining the member 'axis' of a type (line 2515)
        axis_152443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2515, 11), self_152442, 'axis')
        # Obtaining the member 'get_scale' of a type (line 2515)
        get_scale_152444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2515, 11), axis_152443, 'get_scale')
        # Calling get_scale(args, kwargs) (line 2515)
        get_scale_call_result_152446 = invoke(stypy.reporting.localization.Localization(__file__, 2515, 11), get_scale_152444, *[], **kwargs_152445)
        
        unicode_152447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2515, 36), 'unicode', u'log')
        # Applying the binary operator '==' (line 2515)
        result_eq_152448 = python_operator(stypy.reporting.localization.Localization(__file__, 2515, 11), '==', get_scale_call_result_152446, unicode_152447)
        
        # Testing the type of an if condition (line 2515)
        if_condition_152449 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2515, 8), result_eq_152448)
        # Assigning a type to the variable 'if_condition_152449' (line 2515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2515, 8), 'if_condition_152449', if_condition_152449)
        # SSA begins for if statement (line 2515)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 2516)
        # Processing the call arguments (line 2516)
        unicode_152452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2516, 26), 'unicode', u'AutoMinorLocator does not work with logarithmic scale')
        # Processing the call keyword arguments (line 2516)
        kwargs_152453 = {}
        # Getting the type of 'warnings' (line 2516)
        warnings_152450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2516)
        warn_152451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2516, 12), warnings_152450, 'warn')
        # Calling warn(args, kwargs) (line 2516)
        warn_call_result_152454 = invoke(stypy.reporting.localization.Localization(__file__, 2516, 12), warn_152451, *[unicode_152452], **kwargs_152453)
        
        
        # Obtaining an instance of the builtin type 'list' (line 2518)
        list_152455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2518, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2518)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2518, 12), 'stypy_return_type', list_152455)
        # SSA join for if statement (line 2515)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2520):
        
        # Assigning a Call to a Name (line 2520):
        
        # Call to get_majorticklocs(...): (line 2520)
        # Processing the call keyword arguments (line 2520)
        kwargs_152459 = {}
        # Getting the type of 'self' (line 2520)
        self_152456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 20), 'self', False)
        # Obtaining the member 'axis' of a type (line 2520)
        axis_152457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2520, 20), self_152456, 'axis')
        # Obtaining the member 'get_majorticklocs' of a type (line 2520)
        get_majorticklocs_152458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2520, 20), axis_152457, 'get_majorticklocs')
        # Calling get_majorticklocs(args, kwargs) (line 2520)
        get_majorticklocs_call_result_152460 = invoke(stypy.reporting.localization.Localization(__file__, 2520, 20), get_majorticklocs_152458, *[], **kwargs_152459)
        
        # Assigning a type to the variable 'majorlocs' (line 2520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2520, 8), 'majorlocs', get_majorticklocs_call_result_152460)
        
        
        # SSA begins for try-except statement (line 2521)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a BinOp to a Name (line 2522):
        
        # Assigning a BinOp to a Name (line 2522):
        
        # Obtaining the type of the subscript
        int_152461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2522, 34), 'int')
        # Getting the type of 'majorlocs' (line 2522)
        majorlocs_152462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 24), 'majorlocs')
        # Obtaining the member '__getitem__' of a type (line 2522)
        getitem___152463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2522, 24), majorlocs_152462, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2522)
        subscript_call_result_152464 = invoke(stypy.reporting.localization.Localization(__file__, 2522, 24), getitem___152463, int_152461)
        
        
        # Obtaining the type of the subscript
        int_152465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2522, 49), 'int')
        # Getting the type of 'majorlocs' (line 2522)
        majorlocs_152466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 39), 'majorlocs')
        # Obtaining the member '__getitem__' of a type (line 2522)
        getitem___152467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2522, 39), majorlocs_152466, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2522)
        subscript_call_result_152468 = invoke(stypy.reporting.localization.Localization(__file__, 2522, 39), getitem___152467, int_152465)
        
        # Applying the binary operator '-' (line 2522)
        result_sub_152469 = python_operator(stypy.reporting.localization.Localization(__file__, 2522, 24), '-', subscript_call_result_152464, subscript_call_result_152468)
        
        # Assigning a type to the variable 'majorstep' (line 2522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2522, 12), 'majorstep', result_sub_152469)
        # SSA branch for the except part of a try statement (line 2521)
        # SSA branch for the except 'IndexError' branch of a try statement (line 2521)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Num to a Name (line 2528):
        
        # Assigning a Num to a Name (line 2528):
        int_152470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2528, 24), 'int')
        # Assigning a type to the variable 'majorstep' (line 2528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2528, 12), 'majorstep', int_152470)
        # SSA join for try-except statement (line 2521)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 2530)
        # Getting the type of 'self' (line 2530)
        self_152471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2530, 11), 'self')
        # Obtaining the member 'ndivs' of a type (line 2530)
        ndivs_152472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2530, 11), self_152471, 'ndivs')
        # Getting the type of 'None' (line 2530)
        None_152473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2530, 25), 'None')
        
        (may_be_152474, more_types_in_union_152475) = may_be_none(ndivs_152472, None_152473)

        if may_be_152474:

            if more_types_in_union_152475:
                # Runtime conditional SSA (line 2530)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Getting the type of 'majorstep' (line 2531)
            majorstep_152476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2531, 15), 'majorstep')
            int_152477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2531, 28), 'int')
            # Applying the binary operator '==' (line 2531)
            result_eq_152478 = python_operator(stypy.reporting.localization.Localization(__file__, 2531, 15), '==', majorstep_152476, int_152477)
            
            # Testing the type of an if condition (line 2531)
            if_condition_152479 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2531, 12), result_eq_152478)
            # Assigning a type to the variable 'if_condition_152479' (line 2531)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2531, 12), 'if_condition_152479', if_condition_152479)
            # SSA begins for if statement (line 2531)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Name (line 2533):
            
            # Assigning a Num to a Name (line 2533):
            int_152480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2533, 24), 'int')
            # Assigning a type to the variable 'ndivs' (line 2533)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2533, 16), 'ndivs', int_152480)
            # SSA branch for the else part of an if statement (line 2531)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Name (line 2535):
            
            # Assigning a Call to a Name (line 2535):
            
            # Call to int(...): (line 2535)
            # Processing the call arguments (line 2535)
            
            # Call to round(...): (line 2535)
            # Processing the call arguments (line 2535)
            int_152484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2535, 33), 'int')
            
            # Call to log10(...): (line 2535)
            # Processing the call arguments (line 2535)
            # Getting the type of 'majorstep' (line 2535)
            majorstep_152487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2535, 49), 'majorstep', False)
            # Processing the call keyword arguments (line 2535)
            kwargs_152488 = {}
            # Getting the type of 'np' (line 2535)
            np_152485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2535, 40), 'np', False)
            # Obtaining the member 'log10' of a type (line 2535)
            log10_152486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2535, 40), np_152485, 'log10')
            # Calling log10(args, kwargs) (line 2535)
            log10_call_result_152489 = invoke(stypy.reporting.localization.Localization(__file__, 2535, 40), log10_152486, *[majorstep_152487], **kwargs_152488)
            
            int_152490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2535, 62), 'int')
            # Applying the binary operator '%' (line 2535)
            result_mod_152491 = python_operator(stypy.reporting.localization.Localization(__file__, 2535, 40), '%', log10_call_result_152489, int_152490)
            
            # Applying the binary operator '**' (line 2535)
            result_pow_152492 = python_operator(stypy.reporting.localization.Localization(__file__, 2535, 33), '**', int_152484, result_mod_152491)
            
            # Processing the call keyword arguments (line 2535)
            kwargs_152493 = {}
            # Getting the type of 'np' (line 2535)
            np_152482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2535, 24), 'np', False)
            # Obtaining the member 'round' of a type (line 2535)
            round_152483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2535, 24), np_152482, 'round')
            # Calling round(args, kwargs) (line 2535)
            round_call_result_152494 = invoke(stypy.reporting.localization.Localization(__file__, 2535, 24), round_152483, *[result_pow_152492], **kwargs_152493)
            
            # Processing the call keyword arguments (line 2535)
            kwargs_152495 = {}
            # Getting the type of 'int' (line 2535)
            int_152481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2535, 20), 'int', False)
            # Calling int(args, kwargs) (line 2535)
            int_call_result_152496 = invoke(stypy.reporting.localization.Localization(__file__, 2535, 20), int_152481, *[round_call_result_152494], **kwargs_152495)
            
            # Assigning a type to the variable 'x' (line 2535)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2535, 16), 'x', int_call_result_152496)
            
            
            # Getting the type of 'x' (line 2536)
            x_152497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2536, 19), 'x')
            
            # Obtaining an instance of the builtin type 'list' (line 2536)
            list_152498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2536, 24), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2536)
            # Adding element type (line 2536)
            int_152499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2536, 25), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2536, 24), list_152498, int_152499)
            # Adding element type (line 2536)
            int_152500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2536, 28), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2536, 24), list_152498, int_152500)
            # Adding element type (line 2536)
            int_152501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2536, 31), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2536, 24), list_152498, int_152501)
            
            # Applying the binary operator 'in' (line 2536)
            result_contains_152502 = python_operator(stypy.reporting.localization.Localization(__file__, 2536, 19), 'in', x_152497, list_152498)
            
            # Testing the type of an if condition (line 2536)
            if_condition_152503 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2536, 16), result_contains_152502)
            # Assigning a type to the variable 'if_condition_152503' (line 2536)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2536, 16), 'if_condition_152503', if_condition_152503)
            # SSA begins for if statement (line 2536)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Name (line 2537):
            
            # Assigning a Num to a Name (line 2537):
            int_152504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2537, 28), 'int')
            # Assigning a type to the variable 'ndivs' (line 2537)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2537, 20), 'ndivs', int_152504)
            # SSA branch for the else part of an if statement (line 2536)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Num to a Name (line 2539):
            
            # Assigning a Num to a Name (line 2539):
            int_152505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2539, 28), 'int')
            # Assigning a type to the variable 'ndivs' (line 2539)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2539, 20), 'ndivs', int_152505)
            # SSA join for if statement (line 2536)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 2531)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_152475:
                # Runtime conditional SSA for else branch (line 2530)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_152474) or more_types_in_union_152475):
            
            # Assigning a Attribute to a Name (line 2541):
            
            # Assigning a Attribute to a Name (line 2541):
            # Getting the type of 'self' (line 2541)
            self_152506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2541, 20), 'self')
            # Obtaining the member 'ndivs' of a type (line 2541)
            ndivs_152507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2541, 20), self_152506, 'ndivs')
            # Assigning a type to the variable 'ndivs' (line 2541)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2541, 12), 'ndivs', ndivs_152507)

            if (may_be_152474 and more_types_in_union_152475):
                # SSA join for if statement (line 2530)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a BinOp to a Name (line 2543):
        
        # Assigning a BinOp to a Name (line 2543):
        # Getting the type of 'majorstep' (line 2543)
        majorstep_152508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 20), 'majorstep')
        # Getting the type of 'ndivs' (line 2543)
        ndivs_152509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 32), 'ndivs')
        # Applying the binary operator 'div' (line 2543)
        result_div_152510 = python_operator(stypy.reporting.localization.Localization(__file__, 2543, 20), 'div', majorstep_152508, ndivs_152509)
        
        # Assigning a type to the variable 'minorstep' (line 2543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2543, 8), 'minorstep', result_div_152510)
        
        # Assigning a Call to a Tuple (line 2545):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 2545)
        # Processing the call keyword arguments (line 2545)
        kwargs_152514 = {}
        # Getting the type of 'self' (line 2545)
        self_152511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 2545)
        axis_152512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2545, 21), self_152511, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 2545)
        get_view_interval_152513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2545, 21), axis_152512, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 2545)
        get_view_interval_call_result_152515 = invoke(stypy.reporting.localization.Localization(__file__, 2545, 21), get_view_interval_152513, *[], **kwargs_152514)
        
        # Assigning a type to the variable 'call_assignment_146362' (line 2545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2545, 8), 'call_assignment_146362', get_view_interval_call_result_152515)
        
        # Assigning a Call to a Name (line 2545):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_152518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2545, 8), 'int')
        # Processing the call keyword arguments
        kwargs_152519 = {}
        # Getting the type of 'call_assignment_146362' (line 2545)
        call_assignment_146362_152516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 8), 'call_assignment_146362', False)
        # Obtaining the member '__getitem__' of a type (line 2545)
        getitem___152517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2545, 8), call_assignment_146362_152516, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_152520 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___152517, *[int_152518], **kwargs_152519)
        
        # Assigning a type to the variable 'call_assignment_146363' (line 2545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2545, 8), 'call_assignment_146363', getitem___call_result_152520)
        
        # Assigning a Name to a Name (line 2545):
        # Getting the type of 'call_assignment_146363' (line 2545)
        call_assignment_146363_152521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 8), 'call_assignment_146363')
        # Assigning a type to the variable 'vmin' (line 2545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2545, 8), 'vmin', call_assignment_146363_152521)
        
        # Assigning a Call to a Name (line 2545):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_152524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2545, 8), 'int')
        # Processing the call keyword arguments
        kwargs_152525 = {}
        # Getting the type of 'call_assignment_146362' (line 2545)
        call_assignment_146362_152522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 8), 'call_assignment_146362', False)
        # Obtaining the member '__getitem__' of a type (line 2545)
        getitem___152523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2545, 8), call_assignment_146362_152522, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_152526 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___152523, *[int_152524], **kwargs_152525)
        
        # Assigning a type to the variable 'call_assignment_146364' (line 2545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2545, 8), 'call_assignment_146364', getitem___call_result_152526)
        
        # Assigning a Name to a Name (line 2545):
        # Getting the type of 'call_assignment_146364' (line 2545)
        call_assignment_146364_152527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 8), 'call_assignment_146364')
        # Assigning a type to the variable 'vmax' (line 2545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2545, 14), 'vmax', call_assignment_146364_152527)
        
        
        # Getting the type of 'vmin' (line 2546)
        vmin_152528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 11), 'vmin')
        # Getting the type of 'vmax' (line 2546)
        vmax_152529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 18), 'vmax')
        # Applying the binary operator '>' (line 2546)
        result_gt_152530 = python_operator(stypy.reporting.localization.Localization(__file__, 2546, 11), '>', vmin_152528, vmax_152529)
        
        # Testing the type of an if condition (line 2546)
        if_condition_152531 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2546, 8), result_gt_152530)
        # Assigning a type to the variable 'if_condition_152531' (line 2546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2546, 8), 'if_condition_152531', if_condition_152531)
        # SSA begins for if statement (line 2546)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2547):
        
        # Assigning a Name to a Name (line 2547):
        # Getting the type of 'vmax' (line 2547)
        vmax_152532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 25), 'vmax')
        # Assigning a type to the variable 'tuple_assignment_146365' (line 2547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2547, 12), 'tuple_assignment_146365', vmax_152532)
        
        # Assigning a Name to a Name (line 2547):
        # Getting the type of 'vmin' (line 2547)
        vmin_152533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 31), 'vmin')
        # Assigning a type to the variable 'tuple_assignment_146366' (line 2547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2547, 12), 'tuple_assignment_146366', vmin_152533)
        
        # Assigning a Name to a Name (line 2547):
        # Getting the type of 'tuple_assignment_146365' (line 2547)
        tuple_assignment_146365_152534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 12), 'tuple_assignment_146365')
        # Assigning a type to the variable 'vmin' (line 2547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2547, 12), 'vmin', tuple_assignment_146365_152534)
        
        # Assigning a Name to a Name (line 2547):
        # Getting the type of 'tuple_assignment_146366' (line 2547)
        tuple_assignment_146366_152535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 12), 'tuple_assignment_146366')
        # Assigning a type to the variable 'vmax' (line 2547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2547, 18), 'vmax', tuple_assignment_146366_152535)
        # SSA join for if statement (line 2546)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 2549)
        # Processing the call arguments (line 2549)
        # Getting the type of 'majorlocs' (line 2549)
        majorlocs_152537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2549, 15), 'majorlocs', False)
        # Processing the call keyword arguments (line 2549)
        kwargs_152538 = {}
        # Getting the type of 'len' (line 2549)
        len_152536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2549, 11), 'len', False)
        # Calling len(args, kwargs) (line 2549)
        len_call_result_152539 = invoke(stypy.reporting.localization.Localization(__file__, 2549, 11), len_152536, *[majorlocs_152537], **kwargs_152538)
        
        int_152540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2549, 28), 'int')
        # Applying the binary operator '>' (line 2549)
        result_gt_152541 = python_operator(stypy.reporting.localization.Localization(__file__, 2549, 11), '>', len_call_result_152539, int_152540)
        
        # Testing the type of an if condition (line 2549)
        if_condition_152542 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2549, 8), result_gt_152541)
        # Assigning a type to the variable 'if_condition_152542' (line 2549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2549, 8), 'if_condition_152542', if_condition_152542)
        # SSA begins for if statement (line 2549)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 2550):
        
        # Assigning a Subscript to a Name (line 2550):
        
        # Obtaining the type of the subscript
        int_152543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2550, 27), 'int')
        # Getting the type of 'majorlocs' (line 2550)
        majorlocs_152544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 17), 'majorlocs')
        # Obtaining the member '__getitem__' of a type (line 2550)
        getitem___152545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2550, 17), majorlocs_152544, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2550)
        subscript_call_result_152546 = invoke(stypy.reporting.localization.Localization(__file__, 2550, 17), getitem___152545, int_152543)
        
        # Assigning a type to the variable 't0' (line 2550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2550, 12), 't0', subscript_call_result_152546)
        
        # Assigning a BinOp to a Name (line 2551):
        
        # Assigning a BinOp to a Name (line 2551):
        # Getting the type of 'vmin' (line 2551)
        vmin_152547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 21), 'vmin')
        # Getting the type of 't0' (line 2551)
        t0_152548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 28), 't0')
        # Applying the binary operator '-' (line 2551)
        result_sub_152549 = python_operator(stypy.reporting.localization.Localization(__file__, 2551, 21), '-', vmin_152547, t0_152548)
        
        # Getting the type of 'minorstep' (line 2551)
        minorstep_152550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 35), 'minorstep')
        # Applying the binary operator '//' (line 2551)
        result_floordiv_152551 = python_operator(stypy.reporting.localization.Localization(__file__, 2551, 20), '//', result_sub_152549, minorstep_152550)
        
        int_152552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2551, 47), 'int')
        # Applying the binary operator '+' (line 2551)
        result_add_152553 = python_operator(stypy.reporting.localization.Localization(__file__, 2551, 20), '+', result_floordiv_152551, int_152552)
        
        # Getting the type of 'minorstep' (line 2551)
        minorstep_152554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 52), 'minorstep')
        # Applying the binary operator '*' (line 2551)
        result_mul_152555 = python_operator(stypy.reporting.localization.Localization(__file__, 2551, 19), '*', result_add_152553, minorstep_152554)
        
        # Assigning a type to the variable 'tmin' (line 2551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2551, 12), 'tmin', result_mul_152555)
        
        # Assigning a BinOp to a Name (line 2552):
        
        # Assigning a BinOp to a Name (line 2552):
        # Getting the type of 'vmax' (line 2552)
        vmax_152556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 21), 'vmax')
        # Getting the type of 't0' (line 2552)
        t0_152557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 28), 't0')
        # Applying the binary operator '-' (line 2552)
        result_sub_152558 = python_operator(stypy.reporting.localization.Localization(__file__, 2552, 21), '-', vmax_152556, t0_152557)
        
        # Getting the type of 'minorstep' (line 2552)
        minorstep_152559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 35), 'minorstep')
        # Applying the binary operator '//' (line 2552)
        result_floordiv_152560 = python_operator(stypy.reporting.localization.Localization(__file__, 2552, 20), '//', result_sub_152558, minorstep_152559)
        
        int_152561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2552, 47), 'int')
        # Applying the binary operator '+' (line 2552)
        result_add_152562 = python_operator(stypy.reporting.localization.Localization(__file__, 2552, 20), '+', result_floordiv_152560, int_152561)
        
        # Getting the type of 'minorstep' (line 2552)
        minorstep_152563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 52), 'minorstep')
        # Applying the binary operator '*' (line 2552)
        result_mul_152564 = python_operator(stypy.reporting.localization.Localization(__file__, 2552, 19), '*', result_add_152562, minorstep_152563)
        
        # Assigning a type to the variable 'tmax' (line 2552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2552, 12), 'tmax', result_mul_152564)
        
        # Assigning a BinOp to a Name (line 2553):
        
        # Assigning a BinOp to a Name (line 2553):
        
        # Call to arange(...): (line 2553)
        # Processing the call arguments (line 2553)
        # Getting the type of 'tmin' (line 2553)
        tmin_152567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 29), 'tmin', False)
        # Getting the type of 'tmax' (line 2553)
        tmax_152568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 35), 'tmax', False)
        # Getting the type of 'minorstep' (line 2553)
        minorstep_152569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 41), 'minorstep', False)
        # Processing the call keyword arguments (line 2553)
        kwargs_152570 = {}
        # Getting the type of 'np' (line 2553)
        np_152565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 19), 'np', False)
        # Obtaining the member 'arange' of a type (line 2553)
        arange_152566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2553, 19), np_152565, 'arange')
        # Calling arange(args, kwargs) (line 2553)
        arange_call_result_152571 = invoke(stypy.reporting.localization.Localization(__file__, 2553, 19), arange_152566, *[tmin_152567, tmax_152568, minorstep_152569], **kwargs_152570)
        
        # Getting the type of 't0' (line 2553)
        t0_152572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 54), 't0')
        # Applying the binary operator '+' (line 2553)
        result_add_152573 = python_operator(stypy.reporting.localization.Localization(__file__, 2553, 19), '+', arange_call_result_152571, t0_152572)
        
        # Assigning a type to the variable 'locs' (line 2553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2553, 12), 'locs', result_add_152573)
        
        # Assigning a Compare to a Name (line 2554):
        
        # Assigning a Compare to a Name (line 2554):
        
        
        # Call to abs(...): (line 2554)
        # Processing the call arguments (line 2554)
        # Getting the type of 'locs' (line 2554)
        locs_152576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 27), 'locs', False)
        # Getting the type of 't0' (line 2554)
        t0_152577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 34), 't0', False)
        # Applying the binary operator '-' (line 2554)
        result_sub_152578 = python_operator(stypy.reporting.localization.Localization(__file__, 2554, 27), '-', locs_152576, t0_152577)
        
        # Getting the type of 'majorstep' (line 2554)
        majorstep_152579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 40), 'majorstep', False)
        # Applying the binary operator '%' (line 2554)
        result_mod_152580 = python_operator(stypy.reporting.localization.Localization(__file__, 2554, 26), '%', result_sub_152578, majorstep_152579)
        
        # Processing the call keyword arguments (line 2554)
        kwargs_152581 = {}
        # Getting the type of 'np' (line 2554)
        np_152574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 19), 'np', False)
        # Obtaining the member 'abs' of a type (line 2554)
        abs_152575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2554, 19), np_152574, 'abs')
        # Calling abs(args, kwargs) (line 2554)
        abs_call_result_152582 = invoke(stypy.reporting.localization.Localization(__file__, 2554, 19), abs_152575, *[result_mod_152580], **kwargs_152581)
        
        # Getting the type of 'minorstep' (line 2554)
        minorstep_152583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 53), 'minorstep')
        float_152584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2554, 65), 'float')
        # Applying the binary operator 'div' (line 2554)
        result_div_152585 = python_operator(stypy.reporting.localization.Localization(__file__, 2554, 53), 'div', minorstep_152583, float_152584)
        
        # Applying the binary operator '>' (line 2554)
        result_gt_152586 = python_operator(stypy.reporting.localization.Localization(__file__, 2554, 19), '>', abs_call_result_152582, result_div_152585)
        
        # Assigning a type to the variable 'cond' (line 2554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2554, 12), 'cond', result_gt_152586)
        
        # Assigning a Call to a Name (line 2555):
        
        # Assigning a Call to a Name (line 2555):
        
        # Call to compress(...): (line 2555)
        # Processing the call arguments (line 2555)
        # Getting the type of 'cond' (line 2555)
        cond_152589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 33), 'cond', False)
        # Processing the call keyword arguments (line 2555)
        kwargs_152590 = {}
        # Getting the type of 'locs' (line 2555)
        locs_152587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 19), 'locs', False)
        # Obtaining the member 'compress' of a type (line 2555)
        compress_152588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2555, 19), locs_152587, 'compress')
        # Calling compress(args, kwargs) (line 2555)
        compress_call_result_152591 = invoke(stypy.reporting.localization.Localization(__file__, 2555, 19), compress_152588, *[cond_152589], **kwargs_152590)
        
        # Assigning a type to the variable 'locs' (line 2555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2555, 12), 'locs', compress_call_result_152591)
        # SSA branch for the else part of an if statement (line 2549)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Name (line 2557):
        
        # Assigning a List to a Name (line 2557):
        
        # Obtaining an instance of the builtin type 'list' (line 2557)
        list_152592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2557, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2557)
        
        # Assigning a type to the variable 'locs' (line 2557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2557, 12), 'locs', list_152592)
        # SSA join for if statement (line 2549)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to raise_if_exceeds(...): (line 2559)
        # Processing the call arguments (line 2559)
        
        # Call to array(...): (line 2559)
        # Processing the call arguments (line 2559)
        # Getting the type of 'locs' (line 2559)
        locs_152597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 46), 'locs', False)
        # Processing the call keyword arguments (line 2559)
        kwargs_152598 = {}
        # Getting the type of 'np' (line 2559)
        np_152595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 37), 'np', False)
        # Obtaining the member 'array' of a type (line 2559)
        array_152596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2559, 37), np_152595, 'array')
        # Calling array(args, kwargs) (line 2559)
        array_call_result_152599 = invoke(stypy.reporting.localization.Localization(__file__, 2559, 37), array_152596, *[locs_152597], **kwargs_152598)
        
        # Processing the call keyword arguments (line 2559)
        kwargs_152600 = {}
        # Getting the type of 'self' (line 2559)
        self_152593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 15), 'self', False)
        # Obtaining the member 'raise_if_exceeds' of a type (line 2559)
        raise_if_exceeds_152594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2559, 15), self_152593, 'raise_if_exceeds')
        # Calling raise_if_exceeds(args, kwargs) (line 2559)
        raise_if_exceeds_call_result_152601 = invoke(stypy.reporting.localization.Localization(__file__, 2559, 15), raise_if_exceeds_152594, *[array_call_result_152599], **kwargs_152600)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2559)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2559, 8), 'stypy_return_type', raise_if_exceeds_call_result_152601)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 2513)
        stypy_return_type_152602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2513, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_152602)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_152602


    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 2561, 4, False)
        # Assigning a type to the variable 'self' (line 2562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2562, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AutoMinorLocator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        AutoMinorLocator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AutoMinorLocator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        AutoMinorLocator.tick_values.__dict__.__setitem__('stypy_function_name', 'AutoMinorLocator.tick_values')
        AutoMinorLocator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        AutoMinorLocator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        AutoMinorLocator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AutoMinorLocator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        AutoMinorLocator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        AutoMinorLocator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AutoMinorLocator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AutoMinorLocator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        
        # Call to NotImplementedError(...): (line 2562)
        # Processing the call arguments (line 2562)
        unicode_152604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2562, 34), 'unicode', u'Cannot get tick locations for a %s type.')
        
        # Call to type(...): (line 2563)
        # Processing the call arguments (line 2563)
        # Getting the type of 'self' (line 2563)
        self_152606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 52), 'self', False)
        # Processing the call keyword arguments (line 2563)
        kwargs_152607 = {}
        # Getting the type of 'type' (line 2563)
        type_152605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 47), 'type', False)
        # Calling type(args, kwargs) (line 2563)
        type_call_result_152608 = invoke(stypy.reporting.localization.Localization(__file__, 2563, 47), type_152605, *[self_152606], **kwargs_152607)
        
        # Applying the binary operator '%' (line 2562)
        result_mod_152609 = python_operator(stypy.reporting.localization.Localization(__file__, 2562, 34), '%', unicode_152604, type_call_result_152608)
        
        # Processing the call keyword arguments (line 2562)
        kwargs_152610 = {}
        # Getting the type of 'NotImplementedError' (line 2562)
        NotImplementedError_152603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 2562)
        NotImplementedError_call_result_152611 = invoke(stypy.reporting.localization.Localization(__file__, 2562, 14), NotImplementedError_152603, *[result_mod_152609], **kwargs_152610)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2562, 8), NotImplementedError_call_result_152611, 'raise parameter', BaseException)
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 2561)
        stypy_return_type_152612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_152612)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_152612


# Assigning a type to the variable 'AutoMinorLocator' (line 2498)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2498, 0), 'AutoMinorLocator', AutoMinorLocator)
# Declaration of the 'OldAutoLocator' class
# Getting the type of 'Locator' (line 2566)
Locator_152613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2566, 21), 'Locator')

class OldAutoLocator(Locator_152613, ):
    unicode_152614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2571, (-1)), 'unicode', u'\n    On autoscale this class picks the best MultipleLocator to set the\n    view limits and the tick locs.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2572, 4, False)
        # Assigning a type to the variable 'self' (line 2573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2573, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OldAutoLocator.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 2573):
        
        # Assigning a Call to a Attribute (line 2573):
        
        # Call to LinearLocator(...): (line 2573)
        # Processing the call keyword arguments (line 2573)
        kwargs_152616 = {}
        # Getting the type of 'LinearLocator' (line 2573)
        LinearLocator_152615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 24), 'LinearLocator', False)
        # Calling LinearLocator(args, kwargs) (line 2573)
        LinearLocator_call_result_152617 = invoke(stypy.reporting.localization.Localization(__file__, 2573, 24), LinearLocator_152615, *[], **kwargs_152616)
        
        # Getting the type of 'self' (line 2573)
        self_152618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 8), 'self')
        # Setting the type of the member '_locator' of a type (line 2573)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2573, 8), self_152618, '_locator', LinearLocator_call_result_152617)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 2575, 4, False)
        # Assigning a type to the variable 'self' (line 2576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2576, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OldAutoLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        OldAutoLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OldAutoLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        OldAutoLocator.__call__.__dict__.__setitem__('stypy_function_name', 'OldAutoLocator.__call__')
        OldAutoLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        OldAutoLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        OldAutoLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OldAutoLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        OldAutoLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        OldAutoLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OldAutoLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OldAutoLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_152619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2576, 8), 'unicode', u'Return the locations of the ticks')
        
        # Call to refresh(...): (line 2577)
        # Processing the call keyword arguments (line 2577)
        kwargs_152622 = {}
        # Getting the type of 'self' (line 2577)
        self_152620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2577, 8), 'self', False)
        # Obtaining the member 'refresh' of a type (line 2577)
        refresh_152621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2577, 8), self_152620, 'refresh')
        # Calling refresh(args, kwargs) (line 2577)
        refresh_call_result_152623 = invoke(stypy.reporting.localization.Localization(__file__, 2577, 8), refresh_152621, *[], **kwargs_152622)
        
        
        # Call to raise_if_exceeds(...): (line 2578)
        # Processing the call arguments (line 2578)
        
        # Call to _locator(...): (line 2578)
        # Processing the call keyword arguments (line 2578)
        kwargs_152628 = {}
        # Getting the type of 'self' (line 2578)
        self_152626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 37), 'self', False)
        # Obtaining the member '_locator' of a type (line 2578)
        _locator_152627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 37), self_152626, '_locator')
        # Calling _locator(args, kwargs) (line 2578)
        _locator_call_result_152629 = invoke(stypy.reporting.localization.Localization(__file__, 2578, 37), _locator_152627, *[], **kwargs_152628)
        
        # Processing the call keyword arguments (line 2578)
        kwargs_152630 = {}
        # Getting the type of 'self' (line 2578)
        self_152624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 15), 'self', False)
        # Obtaining the member 'raise_if_exceeds' of a type (line 2578)
        raise_if_exceeds_152625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 15), self_152624, 'raise_if_exceeds')
        # Calling raise_if_exceeds(args, kwargs) (line 2578)
        raise_if_exceeds_call_result_152631 = invoke(stypy.reporting.localization.Localization(__file__, 2578, 15), raise_if_exceeds_152625, *[_locator_call_result_152629], **kwargs_152630)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2578, 8), 'stypy_return_type', raise_if_exceeds_call_result_152631)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 2575)
        stypy_return_type_152632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2575, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_152632)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_152632


    @norecursion
    def tick_values(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_values'
        module_type_store = module_type_store.open_function_context('tick_values', 2580, 4, False)
        # Assigning a type to the variable 'self' (line 2581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2581, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OldAutoLocator.tick_values.__dict__.__setitem__('stypy_localization', localization)
        OldAutoLocator.tick_values.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OldAutoLocator.tick_values.__dict__.__setitem__('stypy_type_store', module_type_store)
        OldAutoLocator.tick_values.__dict__.__setitem__('stypy_function_name', 'OldAutoLocator.tick_values')
        OldAutoLocator.tick_values.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        OldAutoLocator.tick_values.__dict__.__setitem__('stypy_varargs_param_name', None)
        OldAutoLocator.tick_values.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OldAutoLocator.tick_values.__dict__.__setitem__('stypy_call_defaults', defaults)
        OldAutoLocator.tick_values.__dict__.__setitem__('stypy_call_varargs', varargs)
        OldAutoLocator.tick_values.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OldAutoLocator.tick_values.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OldAutoLocator.tick_values', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_values', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_values(...)' code ##################

        
        # Call to NotImplementedError(...): (line 2581)
        # Processing the call arguments (line 2581)
        unicode_152634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2581, 34), 'unicode', u'Cannot get tick locations for a %s type.')
        
        # Call to type(...): (line 2582)
        # Processing the call arguments (line 2582)
        # Getting the type of 'self' (line 2582)
        self_152636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 52), 'self', False)
        # Processing the call keyword arguments (line 2582)
        kwargs_152637 = {}
        # Getting the type of 'type' (line 2582)
        type_152635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 47), 'type', False)
        # Calling type(args, kwargs) (line 2582)
        type_call_result_152638 = invoke(stypy.reporting.localization.Localization(__file__, 2582, 47), type_152635, *[self_152636], **kwargs_152637)
        
        # Applying the binary operator '%' (line 2581)
        result_mod_152639 = python_operator(stypy.reporting.localization.Localization(__file__, 2581, 34), '%', unicode_152634, type_call_result_152638)
        
        # Processing the call keyword arguments (line 2581)
        kwargs_152640 = {}
        # Getting the type of 'NotImplementedError' (line 2581)
        NotImplementedError_152633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2581, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 2581)
        NotImplementedError_call_result_152641 = invoke(stypy.reporting.localization.Localization(__file__, 2581, 14), NotImplementedError_152633, *[result_mod_152639], **kwargs_152640)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2581, 8), NotImplementedError_call_result_152641, 'raise parameter', BaseException)
        
        # ################# End of 'tick_values(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_values' in the type store
        # Getting the type of 'stypy_return_type' (line 2580)
        stypy_return_type_152642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_152642)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_values'
        return stypy_return_type_152642


    @norecursion
    def refresh(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'refresh'
        module_type_store = module_type_store.open_function_context('refresh', 2584, 4, False)
        # Assigning a type to the variable 'self' (line 2585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2585, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OldAutoLocator.refresh.__dict__.__setitem__('stypy_localization', localization)
        OldAutoLocator.refresh.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OldAutoLocator.refresh.__dict__.__setitem__('stypy_type_store', module_type_store)
        OldAutoLocator.refresh.__dict__.__setitem__('stypy_function_name', 'OldAutoLocator.refresh')
        OldAutoLocator.refresh.__dict__.__setitem__('stypy_param_names_list', [])
        OldAutoLocator.refresh.__dict__.__setitem__('stypy_varargs_param_name', None)
        OldAutoLocator.refresh.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OldAutoLocator.refresh.__dict__.__setitem__('stypy_call_defaults', defaults)
        OldAutoLocator.refresh.__dict__.__setitem__('stypy_call_varargs', varargs)
        OldAutoLocator.refresh.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OldAutoLocator.refresh.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OldAutoLocator.refresh', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'refresh', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'refresh(...)' code ##################

        unicode_152643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2585, 8), 'unicode', u'refresh internal information based on current lim')
        
        # Assigning a Call to a Tuple (line 2586):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 2586)
        # Processing the call keyword arguments (line 2586)
        kwargs_152647 = {}
        # Getting the type of 'self' (line 2586)
        self_152644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 2586)
        axis_152645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2586, 21), self_152644, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 2586)
        get_view_interval_152646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2586, 21), axis_152645, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 2586)
        get_view_interval_call_result_152648 = invoke(stypy.reporting.localization.Localization(__file__, 2586, 21), get_view_interval_152646, *[], **kwargs_152647)
        
        # Assigning a type to the variable 'call_assignment_146367' (line 2586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2586, 8), 'call_assignment_146367', get_view_interval_call_result_152648)
        
        # Assigning a Call to a Name (line 2586):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_152651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2586, 8), 'int')
        # Processing the call keyword arguments
        kwargs_152652 = {}
        # Getting the type of 'call_assignment_146367' (line 2586)
        call_assignment_146367_152649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 8), 'call_assignment_146367', False)
        # Obtaining the member '__getitem__' of a type (line 2586)
        getitem___152650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2586, 8), call_assignment_146367_152649, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_152653 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___152650, *[int_152651], **kwargs_152652)
        
        # Assigning a type to the variable 'call_assignment_146368' (line 2586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2586, 8), 'call_assignment_146368', getitem___call_result_152653)
        
        # Assigning a Name to a Name (line 2586):
        # Getting the type of 'call_assignment_146368' (line 2586)
        call_assignment_146368_152654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 8), 'call_assignment_146368')
        # Assigning a type to the variable 'vmin' (line 2586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2586, 8), 'vmin', call_assignment_146368_152654)
        
        # Assigning a Call to a Name (line 2586):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_152657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2586, 8), 'int')
        # Processing the call keyword arguments
        kwargs_152658 = {}
        # Getting the type of 'call_assignment_146367' (line 2586)
        call_assignment_146367_152655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 8), 'call_assignment_146367', False)
        # Obtaining the member '__getitem__' of a type (line 2586)
        getitem___152656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2586, 8), call_assignment_146367_152655, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_152659 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___152656, *[int_152657], **kwargs_152658)
        
        # Assigning a type to the variable 'call_assignment_146369' (line 2586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2586, 8), 'call_assignment_146369', getitem___call_result_152659)
        
        # Assigning a Name to a Name (line 2586):
        # Getting the type of 'call_assignment_146369' (line 2586)
        call_assignment_146369_152660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 8), 'call_assignment_146369')
        # Assigning a type to the variable 'vmax' (line 2586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2586, 14), 'vmax', call_assignment_146369_152660)
        
        # Assigning a Call to a Tuple (line 2587):
        
        # Assigning a Call to a Name:
        
        # Call to nonsingular(...): (line 2587)
        # Processing the call arguments (line 2587)
        # Getting the type of 'vmin' (line 2587)
        vmin_152663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 45), 'vmin', False)
        # Getting the type of 'vmax' (line 2587)
        vmax_152664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 51), 'vmax', False)
        # Processing the call keyword arguments (line 2587)
        float_152665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2587, 66), 'float')
        keyword_152666 = float_152665
        kwargs_152667 = {'expander': keyword_152666}
        # Getting the type of 'mtransforms' (line 2587)
        mtransforms_152661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 21), 'mtransforms', False)
        # Obtaining the member 'nonsingular' of a type (line 2587)
        nonsingular_152662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2587, 21), mtransforms_152661, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 2587)
        nonsingular_call_result_152668 = invoke(stypy.reporting.localization.Localization(__file__, 2587, 21), nonsingular_152662, *[vmin_152663, vmax_152664], **kwargs_152667)
        
        # Assigning a type to the variable 'call_assignment_146370' (line 2587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2587, 8), 'call_assignment_146370', nonsingular_call_result_152668)
        
        # Assigning a Call to a Name (line 2587):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_152671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2587, 8), 'int')
        # Processing the call keyword arguments
        kwargs_152672 = {}
        # Getting the type of 'call_assignment_146370' (line 2587)
        call_assignment_146370_152669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 8), 'call_assignment_146370', False)
        # Obtaining the member '__getitem__' of a type (line 2587)
        getitem___152670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2587, 8), call_assignment_146370_152669, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_152673 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___152670, *[int_152671], **kwargs_152672)
        
        # Assigning a type to the variable 'call_assignment_146371' (line 2587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2587, 8), 'call_assignment_146371', getitem___call_result_152673)
        
        # Assigning a Name to a Name (line 2587):
        # Getting the type of 'call_assignment_146371' (line 2587)
        call_assignment_146371_152674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 8), 'call_assignment_146371')
        # Assigning a type to the variable 'vmin' (line 2587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2587, 8), 'vmin', call_assignment_146371_152674)
        
        # Assigning a Call to a Name (line 2587):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_152677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2587, 8), 'int')
        # Processing the call keyword arguments
        kwargs_152678 = {}
        # Getting the type of 'call_assignment_146370' (line 2587)
        call_assignment_146370_152675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 8), 'call_assignment_146370', False)
        # Obtaining the member '__getitem__' of a type (line 2587)
        getitem___152676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2587, 8), call_assignment_146370_152675, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_152679 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___152676, *[int_152677], **kwargs_152678)
        
        # Assigning a type to the variable 'call_assignment_146372' (line 2587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2587, 8), 'call_assignment_146372', getitem___call_result_152679)
        
        # Assigning a Name to a Name (line 2587):
        # Getting the type of 'call_assignment_146372' (line 2587)
        call_assignment_146372_152680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 8), 'call_assignment_146372')
        # Assigning a type to the variable 'vmax' (line 2587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2587, 14), 'vmax', call_assignment_146372_152680)
        
        # Assigning a Call to a Name (line 2588):
        
        # Assigning a Call to a Name (line 2588):
        
        # Call to abs(...): (line 2588)
        # Processing the call arguments (line 2588)
        # Getting the type of 'vmax' (line 2588)
        vmax_152682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 16), 'vmax', False)
        # Getting the type of 'vmin' (line 2588)
        vmin_152683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 23), 'vmin', False)
        # Applying the binary operator '-' (line 2588)
        result_sub_152684 = python_operator(stypy.reporting.localization.Localization(__file__, 2588, 16), '-', vmax_152682, vmin_152683)
        
        # Processing the call keyword arguments (line 2588)
        kwargs_152685 = {}
        # Getting the type of 'abs' (line 2588)
        abs_152681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 12), 'abs', False)
        # Calling abs(args, kwargs) (line 2588)
        abs_call_result_152686 = invoke(stypy.reporting.localization.Localization(__file__, 2588, 12), abs_152681, *[result_sub_152684], **kwargs_152685)
        
        # Assigning a type to the variable 'd' (line 2588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2588, 8), 'd', abs_call_result_152686)
        
        # Assigning a Call to a Attribute (line 2589):
        
        # Assigning a Call to a Attribute (line 2589):
        
        # Call to get_locator(...): (line 2589)
        # Processing the call arguments (line 2589)
        # Getting the type of 'd' (line 2589)
        d_152689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 41), 'd', False)
        # Processing the call keyword arguments (line 2589)
        kwargs_152690 = {}
        # Getting the type of 'self' (line 2589)
        self_152687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 24), 'self', False)
        # Obtaining the member 'get_locator' of a type (line 2589)
        get_locator_152688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 24), self_152687, 'get_locator')
        # Calling get_locator(args, kwargs) (line 2589)
        get_locator_call_result_152691 = invoke(stypy.reporting.localization.Localization(__file__, 2589, 24), get_locator_152688, *[d_152689], **kwargs_152690)
        
        # Getting the type of 'self' (line 2589)
        self_152692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 8), 'self')
        # Setting the type of the member '_locator' of a type (line 2589)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 8), self_152692, '_locator', get_locator_call_result_152691)
        
        # ################# End of 'refresh(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'refresh' in the type store
        # Getting the type of 'stypy_return_type' (line 2584)
        stypy_return_type_152693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_152693)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'refresh'
        return stypy_return_type_152693


    @norecursion
    def view_limits(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'view_limits'
        module_type_store = module_type_store.open_function_context('view_limits', 2591, 4, False)
        # Assigning a type to the variable 'self' (line 2592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2592, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OldAutoLocator.view_limits.__dict__.__setitem__('stypy_localization', localization)
        OldAutoLocator.view_limits.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OldAutoLocator.view_limits.__dict__.__setitem__('stypy_type_store', module_type_store)
        OldAutoLocator.view_limits.__dict__.__setitem__('stypy_function_name', 'OldAutoLocator.view_limits')
        OldAutoLocator.view_limits.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        OldAutoLocator.view_limits.__dict__.__setitem__('stypy_varargs_param_name', None)
        OldAutoLocator.view_limits.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OldAutoLocator.view_limits.__dict__.__setitem__('stypy_call_defaults', defaults)
        OldAutoLocator.view_limits.__dict__.__setitem__('stypy_call_varargs', varargs)
        OldAutoLocator.view_limits.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OldAutoLocator.view_limits.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OldAutoLocator.view_limits', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'view_limits', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'view_limits(...)' code ##################

        unicode_152694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2592, 8), 'unicode', u'Try to choose the view limits intelligently')
        
        # Assigning a Call to a Name (line 2594):
        
        # Assigning a Call to a Name (line 2594):
        
        # Call to abs(...): (line 2594)
        # Processing the call arguments (line 2594)
        # Getting the type of 'vmax' (line 2594)
        vmax_152696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2594, 16), 'vmax', False)
        # Getting the type of 'vmin' (line 2594)
        vmin_152697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2594, 23), 'vmin', False)
        # Applying the binary operator '-' (line 2594)
        result_sub_152698 = python_operator(stypy.reporting.localization.Localization(__file__, 2594, 16), '-', vmax_152696, vmin_152697)
        
        # Processing the call keyword arguments (line 2594)
        kwargs_152699 = {}
        # Getting the type of 'abs' (line 2594)
        abs_152695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2594, 12), 'abs', False)
        # Calling abs(args, kwargs) (line 2594)
        abs_call_result_152700 = invoke(stypy.reporting.localization.Localization(__file__, 2594, 12), abs_152695, *[result_sub_152698], **kwargs_152699)
        
        # Assigning a type to the variable 'd' (line 2594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2594, 8), 'd', abs_call_result_152700)
        
        # Assigning a Call to a Attribute (line 2595):
        
        # Assigning a Call to a Attribute (line 2595):
        
        # Call to get_locator(...): (line 2595)
        # Processing the call arguments (line 2595)
        # Getting the type of 'd' (line 2595)
        d_152703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 41), 'd', False)
        # Processing the call keyword arguments (line 2595)
        kwargs_152704 = {}
        # Getting the type of 'self' (line 2595)
        self_152701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 24), 'self', False)
        # Obtaining the member 'get_locator' of a type (line 2595)
        get_locator_152702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 24), self_152701, 'get_locator')
        # Calling get_locator(args, kwargs) (line 2595)
        get_locator_call_result_152705 = invoke(stypy.reporting.localization.Localization(__file__, 2595, 24), get_locator_152702, *[d_152703], **kwargs_152704)
        
        # Getting the type of 'self' (line 2595)
        self_152706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 8), 'self')
        # Setting the type of the member '_locator' of a type (line 2595)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 8), self_152706, '_locator', get_locator_call_result_152705)
        
        # Call to view_limits(...): (line 2596)
        # Processing the call arguments (line 2596)
        # Getting the type of 'vmin' (line 2596)
        vmin_152710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 41), 'vmin', False)
        # Getting the type of 'vmax' (line 2596)
        vmax_152711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 47), 'vmax', False)
        # Processing the call keyword arguments (line 2596)
        kwargs_152712 = {}
        # Getting the type of 'self' (line 2596)
        self_152707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 15), 'self', False)
        # Obtaining the member '_locator' of a type (line 2596)
        _locator_152708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2596, 15), self_152707, '_locator')
        # Obtaining the member 'view_limits' of a type (line 2596)
        view_limits_152709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2596, 15), _locator_152708, 'view_limits')
        # Calling view_limits(args, kwargs) (line 2596)
        view_limits_call_result_152713 = invoke(stypy.reporting.localization.Localization(__file__, 2596, 15), view_limits_152709, *[vmin_152710, vmax_152711], **kwargs_152712)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2596, 8), 'stypy_return_type', view_limits_call_result_152713)
        
        # ################# End of 'view_limits(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'view_limits' in the type store
        # Getting the type of 'stypy_return_type' (line 2591)
        stypy_return_type_152714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2591, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_152714)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'view_limits'
        return stypy_return_type_152714


    @norecursion
    def get_locator(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_locator'
        module_type_store = module_type_store.open_function_context('get_locator', 2598, 4, False)
        # Assigning a type to the variable 'self' (line 2599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2599, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OldAutoLocator.get_locator.__dict__.__setitem__('stypy_localization', localization)
        OldAutoLocator.get_locator.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OldAutoLocator.get_locator.__dict__.__setitem__('stypy_type_store', module_type_store)
        OldAutoLocator.get_locator.__dict__.__setitem__('stypy_function_name', 'OldAutoLocator.get_locator')
        OldAutoLocator.get_locator.__dict__.__setitem__('stypy_param_names_list', ['d'])
        OldAutoLocator.get_locator.__dict__.__setitem__('stypy_varargs_param_name', None)
        OldAutoLocator.get_locator.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OldAutoLocator.get_locator.__dict__.__setitem__('stypy_call_defaults', defaults)
        OldAutoLocator.get_locator.__dict__.__setitem__('stypy_call_varargs', varargs)
        OldAutoLocator.get_locator.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OldAutoLocator.get_locator.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OldAutoLocator.get_locator', ['d'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_locator', localization, ['d'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_locator(...)' code ##################

        unicode_152715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2599, 8), 'unicode', u'pick the best locator based on a distance')
        
        # Assigning a Call to a Name (line 2600):
        
        # Assigning a Call to a Name (line 2600):
        
        # Call to abs(...): (line 2600)
        # Processing the call arguments (line 2600)
        # Getting the type of 'd' (line 2600)
        d_152717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 16), 'd', False)
        # Processing the call keyword arguments (line 2600)
        kwargs_152718 = {}
        # Getting the type of 'abs' (line 2600)
        abs_152716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 12), 'abs', False)
        # Calling abs(args, kwargs) (line 2600)
        abs_call_result_152719 = invoke(stypy.reporting.localization.Localization(__file__, 2600, 12), abs_152716, *[d_152717], **kwargs_152718)
        
        # Assigning a type to the variable 'd' (line 2600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2600, 8), 'd', abs_call_result_152719)
        
        
        # Getting the type of 'd' (line 2601)
        d_152720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 11), 'd')
        int_152721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2601, 16), 'int')
        # Applying the binary operator '<=' (line 2601)
        result_le_152722 = python_operator(stypy.reporting.localization.Localization(__file__, 2601, 11), '<=', d_152720, int_152721)
        
        # Testing the type of an if condition (line 2601)
        if_condition_152723 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2601, 8), result_le_152722)
        # Assigning a type to the variable 'if_condition_152723' (line 2601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2601, 8), 'if_condition_152723', if_condition_152723)
        # SSA begins for if statement (line 2601)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2602):
        
        # Assigning a Call to a Name (line 2602):
        
        # Call to MultipleLocator(...): (line 2602)
        # Processing the call arguments (line 2602)
        float_152725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2602, 38), 'float')
        # Processing the call keyword arguments (line 2602)
        kwargs_152726 = {}
        # Getting the type of 'MultipleLocator' (line 2602)
        MultipleLocator_152724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 22), 'MultipleLocator', False)
        # Calling MultipleLocator(args, kwargs) (line 2602)
        MultipleLocator_call_result_152727 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 22), MultipleLocator_152724, *[float_152725], **kwargs_152726)
        
        # Assigning a type to the variable 'locator' (line 2602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 12), 'locator', MultipleLocator_call_result_152727)
        # SSA branch for the else part of an if statement (line 2601)
        module_type_store.open_ssa_branch('else')
        
        
        # SSA begins for try-except statement (line 2605)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 2606):
        
        # Assigning a Call to a Name (line 2606):
        
        # Call to log10(...): (line 2606)
        # Processing the call arguments (line 2606)
        # Getting the type of 'd' (line 2606)
        d_152730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 32), 'd', False)
        # Processing the call keyword arguments (line 2606)
        kwargs_152731 = {}
        # Getting the type of 'math' (line 2606)
        math_152728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 21), 'math', False)
        # Obtaining the member 'log10' of a type (line 2606)
        log10_152729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2606, 21), math_152728, 'log10')
        # Calling log10(args, kwargs) (line 2606)
        log10_call_result_152732 = invoke(stypy.reporting.localization.Localization(__file__, 2606, 21), log10_152729, *[d_152730], **kwargs_152731)
        
        # Assigning a type to the variable 'ld' (line 2606)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2606, 16), 'ld', log10_call_result_152732)
        # SSA branch for the except part of a try statement (line 2605)
        # SSA branch for the except 'OverflowError' branch of a try statement (line 2605)
        module_type_store.open_ssa_branch('except')
        
        # Call to RuntimeError(...): (line 2608)
        # Processing the call arguments (line 2608)
        unicode_152734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2608, 35), 'unicode', u'AutoLocator illegal data interval range')
        # Processing the call keyword arguments (line 2608)
        kwargs_152735 = {}
        # Getting the type of 'RuntimeError' (line 2608)
        RuntimeError_152733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 22), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 2608)
        RuntimeError_call_result_152736 = invoke(stypy.reporting.localization.Localization(__file__, 2608, 22), RuntimeError_152733, *[unicode_152734], **kwargs_152735)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2608, 16), RuntimeError_call_result_152736, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 2605)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2610):
        
        # Assigning a Call to a Name (line 2610):
        
        # Call to floor(...): (line 2610)
        # Processing the call arguments (line 2610)
        # Getting the type of 'ld' (line 2610)
        ld_152739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 29), 'ld', False)
        # Processing the call keyword arguments (line 2610)
        kwargs_152740 = {}
        # Getting the type of 'math' (line 2610)
        math_152737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 18), 'math', False)
        # Obtaining the member 'floor' of a type (line 2610)
        floor_152738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2610, 18), math_152737, 'floor')
        # Calling floor(args, kwargs) (line 2610)
        floor_call_result_152741 = invoke(stypy.reporting.localization.Localization(__file__, 2610, 18), floor_152738, *[ld_152739], **kwargs_152740)
        
        # Assigning a type to the variable 'fld' (line 2610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2610, 12), 'fld', floor_call_result_152741)
        
        # Assigning a BinOp to a Name (line 2611):
        
        # Assigning a BinOp to a Name (line 2611):
        int_152742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2611, 19), 'int')
        # Getting the type of 'fld' (line 2611)
        fld_152743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2611, 25), 'fld')
        # Applying the binary operator '**' (line 2611)
        result_pow_152744 = python_operator(stypy.reporting.localization.Localization(__file__, 2611, 19), '**', int_152742, fld_152743)
        
        # Assigning a type to the variable 'base' (line 2611)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2611, 12), 'base', result_pow_152744)
        
        
        # Getting the type of 'd' (line 2616)
        d_152745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2616, 15), 'd')
        int_152746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2616, 20), 'int')
        # Getting the type of 'base' (line 2616)
        base_152747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2616, 24), 'base')
        # Applying the binary operator '*' (line 2616)
        result_mul_152748 = python_operator(stypy.reporting.localization.Localization(__file__, 2616, 20), '*', int_152746, base_152747)
        
        # Applying the binary operator '>=' (line 2616)
        result_ge_152749 = python_operator(stypy.reporting.localization.Localization(__file__, 2616, 15), '>=', d_152745, result_mul_152748)
        
        # Testing the type of an if condition (line 2616)
        if_condition_152750 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2616, 12), result_ge_152749)
        # Assigning a type to the variable 'if_condition_152750' (line 2616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2616, 12), 'if_condition_152750', if_condition_152750)
        # SSA begins for if statement (line 2616)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2617):
        
        # Assigning a Name to a Name (line 2617):
        # Getting the type of 'base' (line 2617)
        base_152751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 27), 'base')
        # Assigning a type to the variable 'ticksize' (line 2617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2617, 16), 'ticksize', base_152751)
        # SSA branch for the else part of an if statement (line 2616)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'd' (line 2618)
        d_152752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2618, 17), 'd')
        int_152753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2618, 22), 'int')
        # Getting the type of 'base' (line 2618)
        base_152754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2618, 26), 'base')
        # Applying the binary operator '*' (line 2618)
        result_mul_152755 = python_operator(stypy.reporting.localization.Localization(__file__, 2618, 22), '*', int_152753, base_152754)
        
        # Applying the binary operator '>=' (line 2618)
        result_ge_152756 = python_operator(stypy.reporting.localization.Localization(__file__, 2618, 17), '>=', d_152752, result_mul_152755)
        
        # Testing the type of an if condition (line 2618)
        if_condition_152757 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2618, 17), result_ge_152756)
        # Assigning a type to the variable 'if_condition_152757' (line 2618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2618, 17), 'if_condition_152757', if_condition_152757)
        # SSA begins for if statement (line 2618)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 2619):
        
        # Assigning a BinOp to a Name (line 2619):
        # Getting the type of 'base' (line 2619)
        base_152758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 27), 'base')
        float_152759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2619, 34), 'float')
        # Applying the binary operator 'div' (line 2619)
        result_div_152760 = python_operator(stypy.reporting.localization.Localization(__file__, 2619, 27), 'div', base_152758, float_152759)
        
        # Assigning a type to the variable 'ticksize' (line 2619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2619, 16), 'ticksize', result_div_152760)
        # SSA branch for the else part of an if statement (line 2618)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 2621):
        
        # Assigning a BinOp to a Name (line 2621):
        # Getting the type of 'base' (line 2621)
        base_152761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 27), 'base')
        float_152762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2621, 34), 'float')
        # Applying the binary operator 'div' (line 2621)
        result_div_152763 = python_operator(stypy.reporting.localization.Localization(__file__, 2621, 27), 'div', base_152761, float_152762)
        
        # Assigning a type to the variable 'ticksize' (line 2621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2621, 16), 'ticksize', result_div_152763)
        # SSA join for if statement (line 2618)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2616)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2622):
        
        # Assigning a Call to a Name (line 2622):
        
        # Call to MultipleLocator(...): (line 2622)
        # Processing the call arguments (line 2622)
        # Getting the type of 'ticksize' (line 2622)
        ticksize_152765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 38), 'ticksize', False)
        # Processing the call keyword arguments (line 2622)
        kwargs_152766 = {}
        # Getting the type of 'MultipleLocator' (line 2622)
        MultipleLocator_152764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 22), 'MultipleLocator', False)
        # Calling MultipleLocator(args, kwargs) (line 2622)
        MultipleLocator_call_result_152767 = invoke(stypy.reporting.localization.Localization(__file__, 2622, 22), MultipleLocator_152764, *[ticksize_152765], **kwargs_152766)
        
        # Assigning a type to the variable 'locator' (line 2622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2622, 12), 'locator', MultipleLocator_call_result_152767)
        # SSA join for if statement (line 2601)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'locator' (line 2624)
        locator_152768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2624, 15), 'locator')
        # Assigning a type to the variable 'stypy_return_type' (line 2624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2624, 8), 'stypy_return_type', locator_152768)
        
        # ################# End of 'get_locator(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_locator' in the type store
        # Getting the type of 'stypy_return_type' (line 2598)
        stypy_return_type_152769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_152769)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_locator'
        return stypy_return_type_152769


# Assigning a type to the variable 'OldAutoLocator' (line 2566)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2566, 0), 'OldAutoLocator', OldAutoLocator)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
