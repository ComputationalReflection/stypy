
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: from __future__ import (absolute_import, division, print_function,
2:                         unicode_literals)
3: 
4: import six
5: 
6: from collections import OrderedDict
7: 
8: import numpy as np
9: 
10: import matplotlib.artist as martist
11: from matplotlib.axes import Axes
12: import matplotlib.axis as maxis
13: from matplotlib import cbook
14: from matplotlib import docstring
15: import matplotlib.markers as mmarkers
16: import matplotlib.patches as mpatches
17: import matplotlib.path as mpath
18: from matplotlib import rcParams
19: import matplotlib.ticker as mticker
20: import matplotlib.transforms as mtransforms
21: import matplotlib.spines as mspines
22: 
23: 
24: class PolarTransform(mtransforms.Transform):
25:     '''
26:     The base polar transform.  This handles projection *theta* and
27:     *r* into Cartesian coordinate space *x* and *y*, but does not
28:     perform the ultimate affine transformation into the correct
29:     position.
30:     '''
31:     input_dims = 2
32:     output_dims = 2
33:     is_separable = False
34: 
35:     def __init__(self, axis=None, use_rmin=True,
36:                  _apply_theta_transforms=True):
37:         mtransforms.Transform.__init__(self)
38:         self._axis = axis
39:         self._use_rmin = use_rmin
40:         self._apply_theta_transforms = _apply_theta_transforms
41: 
42:     def transform_non_affine(self, tr):
43:         xy = np.empty(tr.shape, float)
44: 
45:         t = tr[:, 0:1]
46:         r = tr[:, 1:2]
47:         x = xy[:, 0:1]
48:         y = xy[:, 1:2]
49: 
50:         # PolarAxes does not use the theta transforms here, but apply them for
51:         # backwards-compatibility if not being used by it.
52:         if self._apply_theta_transforms and self._axis is not None:
53:             t *= self._axis.get_theta_direction()
54:             t += self._axis.get_theta_offset()
55: 
56:         if self._use_rmin and self._axis is not None:
57:             r = r - self._axis.get_rorigin()
58:         mask = r < 0
59:         x[:] = np.where(mask, np.nan, r * np.cos(t))
60:         y[:] = np.where(mask, np.nan, r * np.sin(t))
61: 
62:         return xy
63:     transform_non_affine.__doc__ = \
64:         mtransforms.Transform.transform_non_affine.__doc__
65: 
66:     def transform_path_non_affine(self, path):
67:         vertices = path.vertices
68:         if len(vertices) == 2 and vertices[0, 0] == vertices[1, 0]:
69:             return mpath.Path(self.transform(vertices), path.codes)
70:         ipath = path.interpolated(path._interpolation_steps)
71:         return mpath.Path(self.transform(ipath.vertices), ipath.codes)
72:     transform_path_non_affine.__doc__ = \
73:         mtransforms.Transform.transform_path_non_affine.__doc__
74: 
75:     def inverted(self):
76:         return PolarAxes.InvertedPolarTransform(self._axis, self._use_rmin,
77:                                                 self._apply_theta_transforms)
78:     inverted.__doc__ = mtransforms.Transform.inverted.__doc__
79: 
80: 
81: class PolarAffine(mtransforms.Affine2DBase):
82:     '''
83:     The affine part of the polar projection.  Scales the output so
84:     that maximum radius rests on the edge of the axes circle.
85:     '''
86:     def __init__(self, scale_transform, limits):
87:         '''
88:         *limits* is the view limit of the data.  The only part of
89:         its bounds that is used is the y limits (for the radius limits).
90:         The theta range is handled by the non-affine transform.
91:         '''
92:         mtransforms.Affine2DBase.__init__(self)
93:         self._scale_transform = scale_transform
94:         self._limits = limits
95:         self.set_children(scale_transform, limits)
96:         self._mtx = None
97: 
98:     def get_matrix(self):
99:         if self._invalid:
100:             limits_scaled = self._limits.transformed(self._scale_transform)
101:             yscale = limits_scaled.ymax - limits_scaled.ymin
102:             affine = mtransforms.Affine2D() \
103:                 .scale(0.5 / yscale) \
104:                 .translate(0.5, 0.5)
105:             self._mtx = affine.get_matrix()
106:             self._inverted = None
107:             self._invalid = 0
108:         return self._mtx
109:     get_matrix.__doc__ = mtransforms.Affine2DBase.get_matrix.__doc__
110: 
111: 
112: class InvertedPolarTransform(mtransforms.Transform):
113:     '''
114:     The inverse of the polar transform, mapping Cartesian
115:     coordinate space *x* and *y* back to *theta* and *r*.
116:     '''
117:     input_dims = 2
118:     output_dims = 2
119:     is_separable = False
120: 
121:     def __init__(self, axis=None, use_rmin=True,
122:                  _apply_theta_transforms=True):
123:         mtransforms.Transform.__init__(self)
124:         self._axis = axis
125:         self._use_rmin = use_rmin
126:         self._apply_theta_transforms = _apply_theta_transforms
127: 
128:     def transform_non_affine(self, xy):
129:         x = xy[:, 0:1]
130:         y = xy[:, 1:]
131:         r = np.sqrt(x*x + y*y)
132:         with np.errstate(invalid='ignore'):
133:             # At x=y=r=0 this will raise an
134:             # invalid value warning when doing 0/0
135:             # Divide by zero warnings are only raised when
136:             # the numerator is different from 0. That
137:             # should not happen here.
138:             theta = np.arccos(x / r)
139:         theta = np.where(y < 0, 2 * np.pi - theta, theta)
140: 
141:         # PolarAxes does not use the theta transforms here, but apply them for
142:         # backwards-compatibility if not being used by it.
143:         if self._apply_theta_transforms and self._axis is not None:
144:             theta -= self._axis.get_theta_offset()
145:             theta *= self._axis.get_theta_direction()
146:             theta %= 2 * np.pi
147: 
148:         if self._use_rmin and self._axis is not None:
149:             r += self._axis.get_rorigin()
150: 
151:         return np.concatenate((theta, r), 1)
152:     transform_non_affine.__doc__ = \
153:         mtransforms.Transform.transform_non_affine.__doc__
154: 
155:     def inverted(self):
156:         return PolarAxes.PolarTransform(self._axis, self._use_rmin,
157:                                         self._apply_theta_transforms)
158:     inverted.__doc__ = mtransforms.Transform.inverted.__doc__
159: 
160: 
161: class ThetaFormatter(mticker.Formatter):
162:     '''
163:     Used to format the *theta* tick labels.  Converts the native
164:     unit of radians into degrees and adds a degree symbol.
165:     '''
166:     def __call__(self, x, pos=None):
167:         vmin, vmax = self.axis.get_view_interval()
168:         d = np.rad2deg(abs(vmax - vmin))
169:         digits = max(-int(np.log10(d) - 1.5), 0)
170: 
171:         if rcParams['text.usetex'] and not rcParams['text.latex.unicode']:
172:             format_str = r"${value:0.{digits:d}f}^\circ$"
173:             return format_str.format(value=np.rad2deg(x), digits=digits)
174:         else:
175:             # we use unicode, rather than mathtext with \circ, so
176:             # that it will work correctly with any arbitrary font
177:             # (assuming it has a degree sign), whereas $5\circ$
178:             # will only work correctly with one of the supported
179:             # math fonts (Computer Modern and STIX)
180:             format_str = "{value:0.{digits:d}f}\N{DEGREE SIGN}"
181:             return format_str.format(value=np.rad2deg(x), digits=digits)
182: 
183: 
184: class _AxisWrapper(object):
185:     def __init__(self, axis):
186:         self._axis = axis
187: 
188:     def get_view_interval(self):
189:         return np.rad2deg(self._axis.get_view_interval())
190: 
191:     def set_view_interval(self, vmin, vmax):
192:         self._axis.set_view_interval(*np.deg2rad((vmin, vmax)))
193: 
194:     def get_minpos(self):
195:         return np.rad2deg(self._axis.get_minpos())
196: 
197:     def get_data_interval(self):
198:         return np.rad2deg(self._axis.get_data_interval())
199: 
200:     def set_data_interval(self, vmin, vmax):
201:         self._axis.set_data_interval(*np.deg2rad((vmin, vmax)))
202: 
203:     def get_tick_space(self):
204:         return self._axis.get_tick_space()
205: 
206: 
207: class ThetaLocator(mticker.Locator):
208:     '''
209:     Used to locate theta ticks.
210: 
211:     This will work the same as the base locator except in the case that the
212:     view spans the entire circle. In such cases, the previously used default
213:     locations of every 45 degrees are returned.
214:     '''
215:     def __init__(self, base):
216:         self.base = base
217:         self.axis = self.base.axis = _AxisWrapper(self.base.axis)
218: 
219:     def set_axis(self, axis):
220:         self.axis = _AxisWrapper(axis)
221:         self.base.set_axis(self.axis)
222: 
223:     def __call__(self):
224:         lim = self.axis.get_view_interval()
225:         if _is_full_circle_deg(lim[0], lim[1]):
226:             return np.arange(8) * 2 * np.pi / 8
227:         else:
228:             return np.deg2rad(self.base())
229: 
230:     def autoscale(self):
231:         return self.base.autoscale()
232: 
233:     def pan(self, numsteps):
234:         return self.base.pan(numsteps)
235: 
236:     def refresh(self):
237:         return self.base.refresh()
238: 
239:     def view_limits(self, vmin, vmax):
240:         vmin, vmax = np.rad2deg((vmin, vmax))
241:         return np.deg2rad(self.base.view_limits(vmin, vmax))
242: 
243:     def zoom(self, direction):
244:         return self.base.zoom(direction)
245: 
246: 
247: class ThetaTick(maxis.XTick):
248:     '''
249:     A theta-axis tick.
250: 
251:     This subclass of `XTick` provides angular ticks with some small
252:     modification to their re-positioning such that ticks are rotated based on
253:     tick location. This results in ticks that are correctly perpendicular to
254:     the arc spine.
255: 
256:     When 'auto' rotation is enabled, labels are also rotated to be parallel to
257:     the spine. The label padding is also applied here since it's not possible
258:     to use a generic axes transform to produce tick-specific padding.
259:     '''
260:     def __init__(self, axes, *args, **kwargs):
261:         self._text1_translate = mtransforms.ScaledTranslation(
262:             0, 0,
263:             axes.figure.dpi_scale_trans)
264:         self._text2_translate = mtransforms.ScaledTranslation(
265:             0, 0,
266:             axes.figure.dpi_scale_trans)
267:         super(ThetaTick, self).__init__(axes, *args, **kwargs)
268: 
269:     def _get_text1(self):
270:         t = super(ThetaTick, self)._get_text1()
271:         t.set_rotation_mode('anchor')
272:         t.set_transform(t.get_transform() + self._text1_translate)
273:         return t
274: 
275:     def _get_text2(self):
276:         t = super(ThetaTick, self)._get_text2()
277:         t.set_rotation_mode('anchor')
278:         t.set_transform(t.get_transform() + self._text2_translate)
279:         return t
280: 
281:     def _apply_params(self, **kw):
282:         super(ThetaTick, self)._apply_params(**kw)
283: 
284:         # Ensure transform is correct; sometimes this gets reset.
285:         trans = self.label1.get_transform()
286:         if not trans.contains_branch(self._text1_translate):
287:             self.label1.set_transform(trans + self._text1_translate)
288:         trans = self.label2.get_transform()
289:         if not trans.contains_branch(self._text2_translate):
290:             self.label2.set_transform(trans + self._text2_translate)
291: 
292:     def _update_padding(self, pad, angle):
293:         padx = pad * np.cos(angle) / 72
294:         pady = pad * np.sin(angle) / 72
295:         self._text1_translate._t = (padx, pady)
296:         self._text1_translate.invalidate()
297:         self._text2_translate._t = (-padx, -pady)
298:         self._text2_translate.invalidate()
299: 
300:     def update_position(self, loc):
301:         super(ThetaTick, self).update_position(loc)
302:         axes = self.axes
303:         angle = (loc * axes.get_theta_direction() +
304:                  axes.get_theta_offset() - np.pi / 2)
305: 
306:         if self.tick1On:
307:             marker = self.tick1line.get_marker()
308:             if marker in (mmarkers.TICKUP, '|'):
309:                 trans = mtransforms.Affine2D().scale(1.0, 1.0).rotate(angle)
310:             elif marker == mmarkers.TICKDOWN:
311:                 trans = mtransforms.Affine2D().scale(1.0, -1.0).rotate(angle)
312:             else:
313:                 # Don't modify custom tick line markers.
314:                 trans = self.tick1line._marker._transform
315:             self.tick1line._marker._transform = trans
316:         if self.tick2On:
317:             marker = self.tick2line.get_marker()
318:             if marker in (mmarkers.TICKUP, '|'):
319:                 trans = mtransforms.Affine2D().scale(1.0, 1.0).rotate(angle)
320:             elif marker == mmarkers.TICKDOWN:
321:                 trans = mtransforms.Affine2D().scale(1.0, -1.0).rotate(angle)
322:             else:
323:                 # Don't modify custom tick line markers.
324:                 trans = self.tick2line._marker._transform
325:             self.tick2line._marker._transform = trans
326: 
327:         mode, user_angle = self._labelrotation
328:         if mode == 'default':
329:             angle = 0
330:         else:
331:             if angle > np.pi / 2:
332:                 angle -= np.pi
333:             elif angle < -np.pi / 2:
334:                 angle += np.pi
335:         angle = np.rad2deg(angle) + user_angle
336:         if self.label1On:
337:             self.label1.set_rotation(angle)
338:         if self.label2On:
339:             self.label2.set_rotation(angle)
340: 
341:         # This extra padding helps preserve the look from previous releases but
342:         # is also needed because labels are anchored to their center.
343:         pad = self._pad + 7
344:         self._update_padding(pad,
345:                              self._loc * axes.get_theta_direction() +
346:                              axes.get_theta_offset())
347: 
348: 
349: class ThetaAxis(maxis.XAxis):
350:     '''
351:     A theta Axis.
352: 
353:     This overrides certain properties of an `XAxis` to provide special-casing
354:     for an angular axis.
355:     '''
356:     __name__ = 'thetaaxis'
357:     axis_name = 'theta'
358: 
359:     def _get_tick(self, major):
360:         if major:
361:             tick_kw = self._major_tick_kw
362:         else:
363:             tick_kw = self._minor_tick_kw
364:         return ThetaTick(self.axes, 0, '', major=major, **tick_kw)
365: 
366:     def _wrap_locator_formatter(self):
367:         self.set_major_locator(ThetaLocator(self.get_major_locator()))
368:         self.set_major_formatter(ThetaFormatter())
369:         self.isDefault_majloc = True
370:         self.isDefault_majfmt = True
371: 
372:     def cla(self):
373:         super(ThetaAxis, self).cla()
374:         self.set_ticks_position('none')
375:         self._wrap_locator_formatter()
376: 
377:     def _set_scale(self, value, **kwargs):
378:         super(ThetaAxis, self)._set_scale(value, **kwargs)
379:         self._wrap_locator_formatter()
380: 
381:     def _copy_tick_props(self, src, dest):
382:         'Copy the props from src tick to dest tick'
383:         if src is None or dest is None:
384:             return
385:         super(ThetaAxis, self)._copy_tick_props(src, dest)
386: 
387:         # Ensure that tick transforms are independent so that padding works.
388:         trans = dest._get_text1_transform()[0]
389:         dest.label1.set_transform(trans + dest._text1_translate)
390:         trans = dest._get_text2_transform()[0]
391:         dest.label2.set_transform(trans + dest._text2_translate)
392: 
393: 
394: class RadialLocator(mticker.Locator):
395:     '''
396:     Used to locate radius ticks.
397: 
398:     Ensures that all ticks are strictly positive.  For all other
399:     tasks, it delegates to the base
400:     :class:`~matplotlib.ticker.Locator` (which may be different
401:     depending on the scale of the *r*-axis.
402:     '''
403:     def __init__(self, base, axes=None):
404:         self.base = base
405:         self._axes = axes
406: 
407:     def __call__(self):
408:         show_all = True
409:         # Ensure previous behaviour with full circle non-annular views.
410:         if self._axes:
411:             if _is_full_circle_rad(*self._axes.viewLim.intervalx):
412:                 rorigin = self._axes.get_rorigin()
413:                 if self._axes.get_rmin() <= rorigin:
414:                     show_all = False
415: 
416:         if show_all:
417:             return self.base()
418:         else:
419:             return [tick for tick in self.base() if tick > rorigin]
420: 
421:     def autoscale(self):
422:         return self.base.autoscale()
423: 
424:     def pan(self, numsteps):
425:         return self.base.pan(numsteps)
426: 
427:     def zoom(self, direction):
428:         return self.base.zoom(direction)
429: 
430:     def refresh(self):
431:         return self.base.refresh()
432: 
433:     def view_limits(self, vmin, vmax):
434:         vmin, vmax = self.base.view_limits(vmin, vmax)
435:         return mtransforms.nonsingular(min(0, vmin), vmax)
436: 
437: 
438: class _ThetaShift(mtransforms.ScaledTranslation):
439:     '''
440:     Apply a padding shift based on axes theta limits.
441: 
442:     This is used to create padding for radial ticks.
443: 
444:     Parameters
445:     ----------
446:     axes : matplotlib.axes.Axes
447:         The owning axes; used to determine limits.
448:     pad : float
449:         The padding to apply, in points.
450:     start : str, {'min', 'max', 'rlabel'}
451:         Whether to shift away from the start (``'min'``) or the end (``'max'``)
452:         of the axes, or using the rlabel position (``'rlabel'``).
453:     '''
454:     def __init__(self, axes, pad, mode):
455:         mtransforms.ScaledTranslation.__init__(self, pad, pad,
456:                                                axes.figure.dpi_scale_trans)
457:         self.set_children(axes._realViewLim)
458:         self.axes = axes
459:         self.mode = mode
460:         self.pad = pad
461: 
462:     def get_matrix(self):
463:         if self._invalid:
464:             if self.mode == 'rlabel':
465:                 angle = (
466:                     np.deg2rad(self.axes.get_rlabel_position()) *
467:                     self.axes.get_theta_direction() +
468:                     self.axes.get_theta_offset()
469:                 )
470:             else:
471:                 if self.mode == 'min':
472:                     angle = self.axes._realViewLim.xmin
473:                 elif self.mode == 'max':
474:                     angle = self.axes._realViewLim.xmax
475: 
476:             if self.mode in ('rlabel', 'min'):
477:                 padx = np.cos(angle - np.pi / 2)
478:                 pady = np.sin(angle - np.pi / 2)
479:             else:
480:                 padx = np.cos(angle + np.pi / 2)
481:                 pady = np.sin(angle + np.pi / 2)
482: 
483:             self._t = (self.pad * padx / 72, self.pad * pady / 72)
484:         return mtransforms.ScaledTranslation.get_matrix(self)
485: 
486: 
487: class RadialTick(maxis.YTick):
488:     '''
489:     A radial-axis tick.
490: 
491:     This subclass of `YTick` provides radial ticks with some small modification
492:     to their re-positioning such that ticks are rotated based on axes limits.
493:     This results in ticks that are correctly perpendicular to the spine. Labels
494:     are also rotated to be perpendicular to the spine, when 'auto' rotation is
495:     enabled.
496:     '''
497:     def _get_text1(self):
498:         t = super(RadialTick, self)._get_text1()
499:         t.set_rotation_mode('anchor')
500:         return t
501: 
502:     def _get_text2(self):
503:         t = super(RadialTick, self)._get_text2()
504:         t.set_rotation_mode('anchor')
505:         return t
506: 
507:     def _determine_anchor(self, angle, start):
508:         if start:
509:             if -90 <= angle <= 90:
510:                 return 'left', 'center'
511:             else:
512:                 return 'right', 'center'
513:         else:
514:             if -90 <= angle <= 90:
515:                 return 'right', 'center'
516:             else:
517:                 return 'left', 'center'
518: 
519:     def update_position(self, loc):
520:         super(RadialTick, self).update_position(loc)
521:         axes = self.axes
522:         thetamin = axes.get_thetamin()
523:         thetamax = axes.get_thetamax()
524:         direction = axes.get_theta_direction()
525:         offset_rad = axes.get_theta_offset()
526:         offset = np.rad2deg(offset_rad)
527:         full = _is_full_circle_deg(thetamin, thetamax)
528: 
529:         if full:
530:             angle = axes.get_rlabel_position() * direction + offset - 90
531:             tick_angle = 0
532:             if angle > 90:
533:                 text_angle = angle - 180
534:             elif angle < -90:
535:                 text_angle = angle + 180
536:             else:
537:                 text_angle = angle
538:         else:
539:             angle = thetamin * direction + offset - 90
540:             if direction > 0:
541:                 tick_angle = np.deg2rad(angle)
542:             else:
543:                 tick_angle = np.deg2rad(angle + 180)
544:             if angle > 90:
545:                 text_angle = angle - 180
546:             elif angle < -90:
547:                 text_angle = angle + 180
548:             else:
549:                 text_angle = angle
550:         mode, user_angle = self._labelrotation
551:         if mode == 'auto':
552:             text_angle += user_angle
553:         else:
554:             text_angle = user_angle
555:         if self.label1On:
556:             if full:
557:                 ha = 'left'
558:                 va = 'bottom'
559:             else:
560:                 ha, va = self._determine_anchor(angle, True)
561:             self.label1.set_ha(ha)
562:             self.label1.set_va(va)
563:             self.label1.set_rotation(text_angle)
564:         if self.tick1On:
565:             marker = self.tick1line.get_marker()
566:             if marker == mmarkers.TICKLEFT:
567:                 trans = (mtransforms.Affine2D()
568:                          .scale(1.0, 1.0)
569:                          .rotate(tick_angle))
570:             elif marker == '_':
571:                 trans = (mtransforms.Affine2D()
572:                          .scale(1.0, 1.0)
573:                          .rotate(tick_angle + np.pi / 2))
574:             elif marker == mmarkers.TICKRIGHT:
575:                 trans = (mtransforms.Affine2D()
576:                          .scale(-1.0, 1.0)
577:                          .rotate(tick_angle))
578:             else:
579:                 # Don't modify custom tick line markers.
580:                 trans = self.tick1line._marker._transform
581:             self.tick1line._marker._transform = trans
582: 
583:         if full:
584:             self.label2On = False
585:             self.tick2On = False
586:         else:
587:             angle = thetamax * direction + offset - 90
588:             if direction > 0:
589:                 tick_angle = np.deg2rad(angle)
590:             else:
591:                 tick_angle = np.deg2rad(angle + 180)
592:             if angle > 90:
593:                 text_angle = angle - 180
594:             elif angle < -90:
595:                 text_angle = angle + 180
596:             else:
597:                 text_angle = angle
598:         mode, user_angle = self._labelrotation
599:         if mode == 'auto':
600:             text_angle += user_angle
601:         else:
602:             text_angle = user_angle
603:         if self.label2On:
604:             ha, va = self._determine_anchor(angle, False)
605:             self.label2.set_ha(ha)
606:             self.label2.set_va(va)
607:             self.label2.set_rotation(text_angle)
608:         if self.tick2On:
609:             marker = self.tick2line.get_marker()
610:             if marker == mmarkers.TICKLEFT:
611:                 trans = (mtransforms.Affine2D()
612:                          .scale(1.0, 1.0)
613:                          .rotate(tick_angle))
614:             elif marker == '_':
615:                 trans = (mtransforms.Affine2D()
616:                          .scale(1.0, 1.0)
617:                          .rotate(tick_angle + np.pi / 2))
618:             elif marker == mmarkers.TICKRIGHT:
619:                 trans = (mtransforms.Affine2D()
620:                          .scale(-1.0, 1.0)
621:                          .rotate(tick_angle))
622:             else:
623:                 # Don't modify custom tick line markers.
624:                 trans = self.tick2line._marker._transform
625:             self.tick2line._marker._transform = trans
626: 
627: 
628: class RadialAxis(maxis.YAxis):
629:     '''
630:     A radial Axis.
631: 
632:     This overrides certain properties of a `YAxis` to provide special-casing
633:     for a radial axis.
634:     '''
635:     __name__ = 'radialaxis'
636:     axis_name = 'radius'
637: 
638:     def _get_tick(self, major):
639:         if major:
640:             tick_kw = self._major_tick_kw
641:         else:
642:             tick_kw = self._minor_tick_kw
643:         return RadialTick(self.axes, 0, '', major=major, **tick_kw)
644: 
645:     def _wrap_locator_formatter(self):
646:         self.set_major_locator(RadialLocator(self.get_major_locator(),
647:                                              self.axes))
648:         self.isDefault_majloc = True
649: 
650:     def cla(self):
651:         super(RadialAxis, self).cla()
652:         self.set_ticks_position('none')
653:         self._wrap_locator_formatter()
654: 
655:     def _set_scale(self, value, **kwargs):
656:         super(RadialAxis, self)._set_scale(value, **kwargs)
657:         self._wrap_locator_formatter()
658: 
659: 
660: def _is_full_circle_deg(thetamin, thetamax):
661:     '''
662:     Determine if a wedge (in degrees) spans the full circle.
663: 
664:     The condition is derived from :class:`~matplotlib.patches.Wedge`.
665:     '''
666:     return abs(abs(thetamax - thetamin) - 360.0) < 1e-12
667: 
668: 
669: def _is_full_circle_rad(thetamin, thetamax):
670:     '''
671:     Determine if a wedge (in radians) spans the full circle.
672: 
673:     The condition is derived from :class:`~matplotlib.patches.Wedge`.
674:     '''
675:     return abs(abs(thetamax - thetamin) - 2 * np.pi) < 1.74e-14
676: 
677: 
678: class _WedgeBbox(mtransforms.Bbox):
679:     '''
680:     Transform (theta,r) wedge Bbox into axes bounding box.
681: 
682:     Parameters
683:     ----------
684:     center : tuple of float
685:         Center of the wedge
686:     viewLim : `~matplotlib.transforms.Bbox`
687:         Bbox determining the boundaries of the wedge
688:     originLim : `~matplotlib.transforms.Bbox`
689:         Bbox determining the origin for the wedge, if different from *viewLim*
690:     '''
691:     def __init__(self, center, viewLim, originLim, **kwargs):
692:         mtransforms.Bbox.__init__(self,
693:                                   np.array([[0.0, 0.0], [1.0, 1.0]], np.float),
694:                                   **kwargs)
695:         self._center = center
696:         self._viewLim = viewLim
697:         self._originLim = originLim
698:         self.set_children(viewLim, originLim)
699: 
700:     def __repr__(self):
701:         return "_WedgeBbox(%r, %r, %r)" % (self._center, self._viewLim,
702:                                            self._originLim)
703: 
704:     def get_points(self):
705:         if self._invalid:
706:             points = self._viewLim.get_points().copy()
707: 
708:             # Scale angular limits to work with Wedge.
709:             points[:, 0] *= 180 / np.pi
710:             if points[0, 0] > points[1, 0]:
711:                 points[:, 0] = points[::-1, 0]
712: 
713:             # Scale radial limits based on origin radius.
714:             points[:, 1] -= self._originLim.y0
715: 
716:             # Scale radial limits to match axes limits.
717:             rscale = 0.5 / points[1, 1]
718:             points[:, 1] *= rscale
719:             width = min(points[1, 1] - points[0, 1], 0.5)
720: 
721:             # Generate bounding box for wedge.
722:             wedge = mpatches.Wedge(self._center, points[1, 1],
723:                                    points[0, 0], points[1, 0],
724:                                    width=width)
725:             self.update_from_path(wedge.get_path())
726: 
727:             # Ensure equal aspect ratio.
728:             w, h = self._points[1] - self._points[0]
729:             if h < w:
730:                 deltah = (w - h) / 2.0
731:                 deltaw = 0.0
732:             elif w < h:
733:                 deltah = 0.0
734:                 deltaw = (h - w) / 2.0
735:             else:
736:                 deltah = 0.0
737:                 deltaw = 0.0
738:             self._points += np.array([[-deltaw, -deltah], [deltaw, deltah]])
739: 
740:             self._invalid = 0
741: 
742:         return self._points
743:     get_points.__doc__ = mtransforms.Bbox.get_points.__doc__
744: 
745: 
746: class PolarAxes(Axes):
747:     '''
748:     A polar graph projection, where the input dimensions are *theta*, *r*.
749: 
750:     Theta starts pointing east and goes anti-clockwise.
751:     '''
752:     name = 'polar'
753: 
754:     def __init__(self, *args, **kwargs):
755:         '''
756:         Create a new Polar Axes for a polar plot.
757:         '''
758:         self._default_theta_offset = kwargs.pop('theta_offset', 0)
759:         self._default_theta_direction = kwargs.pop('theta_direction', 1)
760:         self._default_rlabel_position = np.deg2rad(
761:             kwargs.pop('rlabel_position', 22.5))
762: 
763:         Axes.__init__(self, *args, **kwargs)
764:         self.set_aspect('equal', adjustable='box', anchor='C')
765:         self.cla()
766:     __init__.__doc__ = Axes.__init__.__doc__
767: 
768:     def cla(self):
769:         Axes.cla(self)
770: 
771:         self.title.set_y(1.05)
772: 
773:         start = self.spines.get('start', None)
774:         if start:
775:             start.set_visible(False)
776:         end = self.spines.get('end', None)
777:         if end:
778:             end.set_visible(False)
779:         self.set_xlim(0.0, 2 * np.pi)
780: 
781:         self.grid(rcParams['polaraxes.grid'])
782:         inner = self.spines.get('inner', None)
783:         if inner:
784:             inner.set_visible(False)
785: 
786:         self.set_rorigin(None)
787:         self.set_theta_offset(self._default_theta_offset)
788:         self.set_theta_direction(self._default_theta_direction)
789: 
790:     def _init_axis(self):
791:         "move this out of __init__ because non-separable axes don't use it"
792:         self.xaxis = ThetaAxis(self)
793:         self.yaxis = RadialAxis(self)
794:         # Calling polar_axes.xaxis.cla() or polar_axes.xaxis.cla()
795:         # results in weird artifacts. Therefore we disable this for
796:         # now.
797:         # self.spines['polar'].register_axis(self.yaxis)
798:         self._update_transScale()
799: 
800:     def _set_lim_and_transforms(self):
801:         # A view limit where the minimum radius can be locked if the user
802:         # specifies an alternate origin.
803:         self._originViewLim = mtransforms.LockableBbox(self.viewLim)
804: 
805:         # Handle angular offset and direction.
806:         self._direction = mtransforms.Affine2D() \
807:             .scale(self._default_theta_direction, 1.0)
808:         self._theta_offset = mtransforms.Affine2D() \
809:             .translate(self._default_theta_offset, 0.0)
810:         self.transShift = mtransforms.composite_transform_factory(
811:             self._direction,
812:             self._theta_offset)
813:         # A view limit shifted to the correct location after accounting for
814:         # orientation and offset.
815:         self._realViewLim = mtransforms.TransformedBbox(self.viewLim,
816:                                                         self.transShift)
817: 
818:         # Transforms the x and y axis separately by a scale factor
819:         # It is assumed that this part will have non-linear components
820:         self.transScale = mtransforms.TransformWrapper(
821:             mtransforms.IdentityTransform())
822: 
823:         # Scale view limit into a bbox around the selected wedge. This may be
824:         # smaller than the usual unit axes rectangle if not plotting the full
825:         # circle.
826:         self.axesLim = _WedgeBbox((0.5, 0.5),
827:                                   self._realViewLim, self._originViewLim)
828: 
829:         # Scale the wedge to fill the axes.
830:         self.transWedge = mtransforms.BboxTransformFrom(self.axesLim)
831: 
832:         # Scale the axes to fill the figure.
833:         self.transAxes = mtransforms.BboxTransformTo(self.bbox)
834: 
835:         # A (possibly non-linear) projection on the (already scaled)
836:         # data.  This one is aware of rmin
837:         self.transProjection = self.PolarTransform(
838:             self,
839:             _apply_theta_transforms=False)
840:         # Add dependency on rorigin.
841:         self.transProjection.set_children(self._originViewLim)
842: 
843:         # An affine transformation on the data, generally to limit the
844:         # range of the axes
845:         self.transProjectionAffine = self.PolarAffine(self.transScale,
846:                                                       self._originViewLim)
847: 
848:         # The complete data transformation stack -- from data all the
849:         # way to display coordinates
850:         self.transData = (
851:             self.transScale + self.transShift + self.transProjection +
852:             (self.transProjectionAffine + self.transWedge + self.transAxes))
853: 
854:         # This is the transform for theta-axis ticks.  It is
855:         # equivalent to transData, except it always puts r == 0.0 and r == 1.0
856:         # at the edge of the axis circles.
857:         self._xaxis_transform = (
858:             mtransforms.blended_transform_factory(
859:                 mtransforms.IdentityTransform(),
860:                 mtransforms.BboxTransformTo(self.viewLim)) +
861:             self.transData)
862:         # The theta labels are flipped along the radius, so that text 1 is on
863:         # the outside by default. This should work the same as before.
864:         flipr_transform = mtransforms.Affine2D() \
865:             .translate(0.0, -0.5) \
866:             .scale(1.0, -1.0) \
867:             .translate(0.0, 0.5)
868:         self._xaxis_text_transform = flipr_transform + self._xaxis_transform
869: 
870:         # This is the transform for r-axis ticks.  It scales the theta
871:         # axis so the gridlines from 0.0 to 1.0, now go from thetamin to
872:         # thetamax.
873:         self._yaxis_transform = (
874:             mtransforms.blended_transform_factory(
875:                 mtransforms.BboxTransformTo(self.viewLim),
876:                 mtransforms.IdentityTransform()) +
877:             self.transData)
878:         # The r-axis labels are put at an angle and padded in the r-direction
879:         self._r_label_position = mtransforms.Affine2D() \
880:             .translate(self._default_rlabel_position, 0.0)
881:         self._yaxis_text_transform = mtransforms.TransformWrapper(
882:             self._r_label_position + self.transData)
883: 
884:     def get_xaxis_transform(self, which='grid'):
885:         if which not in ['tick1', 'tick2', 'grid']:
886:             msg = "'which' must be one of [ 'tick1' | 'tick2' | 'grid' ]"
887:             raise ValueError(msg)
888:         return self._xaxis_transform
889: 
890:     def get_xaxis_text1_transform(self, pad):
891:         if _is_full_circle_rad(*self._realViewLim.intervalx):
892:             return self._xaxis_text_transform, 'center', 'center'
893:         else:
894:             return self._xaxis_text_transform, 'bottom', 'center'
895: 
896:     def get_xaxis_text2_transform(self, pad):
897:         if _is_full_circle_rad(*self._realViewLim.intervalx):
898:             return self._xaxis_text_transform, 'center', 'center'
899:         else:
900:             return self._xaxis_text_transform, 'top', 'center'
901: 
902:     def get_yaxis_transform(self, which='grid'):
903:         if which in ('tick1', 'tick2'):
904:             return self._yaxis_text_transform
905:         elif which == 'grid':
906:             return self._yaxis_transform
907:         else:
908:             msg = "'which' must be on of [ 'tick1' | 'tick2' | 'grid' ]"
909:             raise ValueError(msg)
910: 
911:     def get_yaxis_text1_transform(self, pad):
912:         thetamin, thetamax = self._realViewLim.intervalx
913:         if _is_full_circle_rad(thetamin, thetamax):
914:             return self._yaxis_text_transform, 'bottom', 'left'
915:         elif self.get_theta_direction() > 0:
916:             halign = 'left'
917:             pad_shift = _ThetaShift(self, pad, 'min')
918:         else:
919:             halign = 'right'
920:             pad_shift = _ThetaShift(self, pad, 'max')
921:         return self._yaxis_text_transform + pad_shift, 'center', halign
922: 
923:     def get_yaxis_text2_transform(self, pad):
924:         if self.get_theta_direction() > 0:
925:             halign = 'right'
926:             pad_shift = _ThetaShift(self, pad, 'max')
927:         else:
928:             halign = 'left'
929:             pad_shift = _ThetaShift(self, pad, 'min')
930:         return self._yaxis_text_transform + pad_shift, 'center', halign
931: 
932:     def draw(self, *args, **kwargs):
933:         thetamin, thetamax = self._realViewLim.intervalx
934:         thetamin *= 180 / np.pi
935:         thetamax *= 180 / np.pi
936:         if thetamin > thetamax:
937:             thetamin, thetamax = thetamax, thetamin
938:         rmin, rmax = self._realViewLim.intervaly - self.get_rorigin()
939: 
940:         if isinstance(self.patch, mpatches.Wedge):
941:             # Backwards-compatibility: Any subclassed Axes might override the
942:             # patch to not be the Wedge that PolarAxes uses.
943:             center = self.transWedge.transform_point((0.5, 0.5))
944:             self.patch.set_center(center)
945:             self.patch.set_theta1(thetamin)
946:             self.patch.set_theta2(thetamax)
947: 
948:             edge, _ = self.transWedge.transform_point((1, 0))
949:             radius = edge - center[0]
950:             width = min(radius * (rmax - rmin) / rmax, radius)
951:             self.patch.set_radius(radius)
952:             self.patch.set_width(width)
953: 
954:             inner_width = radius - width
955:             inner = self.spines.get('inner', None)
956:             if inner:
957:                 inner.set_visible(inner_width != 0.0)
958: 
959:         visible = not _is_full_circle_deg(thetamin, thetamax)
960:         # For backwards compatibility, any subclassed Axes might override the
961:         # spines to not include start/end that PolarAxes uses.
962:         start = self.spines.get('start', None)
963:         end = self.spines.get('end', None)
964:         if start:
965:             start.set_visible(visible)
966:         if end:
967:             end.set_visible(visible)
968:         if visible:
969:             yaxis_text_transform = self._yaxis_transform
970:         else:
971:             yaxis_text_transform = self._r_label_position + self.transData
972:         if self._yaxis_text_transform != yaxis_text_transform:
973:             self._yaxis_text_transform.set(yaxis_text_transform)
974:             self.yaxis.reset_ticks()
975:             self.yaxis.set_clip_path(self.patch)
976: 
977:         Axes.draw(self, *args, **kwargs)
978: 
979:     def _gen_axes_patch(self):
980:         return mpatches.Wedge((0.5, 0.5), 0.5, 0.0, 360.0)
981: 
982:     def _gen_axes_spines(self):
983:         spines = OrderedDict([
984:             ('polar', mspines.Spine.arc_spine(self, 'top',
985:                                               (0.5, 0.5), 0.5, 0.0, 360.0)),
986:             ('start', mspines.Spine.linear_spine(self, 'left')),
987:             ('end', mspines.Spine.linear_spine(self, 'right')),
988:             ('inner', mspines.Spine.arc_spine(self, 'bottom',
989:                                               (0.5, 0.5), 0.0, 0.0, 360.0))
990:         ])
991:         spines['polar'].set_transform(self.transWedge + self.transAxes)
992:         spines['inner'].set_transform(self.transWedge + self.transAxes)
993:         spines['start'].set_transform(self._yaxis_transform)
994:         spines['end'].set_transform(self._yaxis_transform)
995:         return spines
996: 
997:     def set_thetamax(self, thetamax):
998:         self.viewLim.x1 = np.deg2rad(thetamax)
999: 
1000:     def get_thetamax(self):
1001:         return np.rad2deg(self.viewLim.xmax)
1002: 
1003:     def set_thetamin(self, thetamin):
1004:         self.viewLim.x0 = np.deg2rad(thetamin)
1005: 
1006:     def get_thetamin(self):
1007:         return np.rad2deg(self.viewLim.xmin)
1008: 
1009:     def set_thetalim(self, *args, **kwargs):
1010:         if 'thetamin' in kwargs:
1011:             kwargs['xmin'] = np.deg2rad(kwargs.pop('thetamin'))
1012:         if 'thetamax' in kwargs:
1013:             kwargs['xmax'] = np.deg2rad(kwargs.pop('thetamax'))
1014:         return tuple(np.rad2deg(self.set_xlim(*args, **kwargs)))
1015: 
1016:     def set_theta_offset(self, offset):
1017:         '''
1018:         Set the offset for the location of 0 in radians.
1019:         '''
1020:         mtx = self._theta_offset.get_matrix()
1021:         mtx[0, 2] = offset
1022:         self._theta_offset.invalidate()
1023: 
1024:     def get_theta_offset(self):
1025:         '''
1026:         Get the offset for the location of 0 in radians.
1027:         '''
1028:         return self._theta_offset.get_matrix()[0, 2]
1029: 
1030:     def set_theta_zero_location(self, loc, offset=0.0):
1031:         '''
1032:         Sets the location of theta's zero.  (Calls set_theta_offset
1033:         with the correct value in radians under the hood.)
1034: 
1035:         loc : str
1036:             May be one of "N", "NW", "W", "SW", "S", "SE", "E", or "NE".
1037: 
1038:         offset : float, optional
1039:             An offset in degrees to apply from the specified `loc`. **Note:**
1040:             this offset is *always* applied counter-clockwise regardless of
1041:             the direction setting.
1042:         '''
1043:         mapping = {
1044:             'N': np.pi * 0.5,
1045:             'NW': np.pi * 0.75,
1046:             'W': np.pi,
1047:             'SW': np.pi * 1.25,
1048:             'S': np.pi * 1.5,
1049:             'SE': np.pi * 1.75,
1050:             'E': 0,
1051:             'NE': np.pi * 0.25}
1052:         return self.set_theta_offset(mapping[loc] + np.deg2rad(offset))
1053: 
1054:     def set_theta_direction(self, direction):
1055:         '''
1056:         Set the direction in which theta increases.
1057: 
1058:         clockwise, -1:
1059:            Theta increases in the clockwise direction
1060: 
1061:         counterclockwise, anticlockwise, 1:
1062:            Theta increases in the counterclockwise direction
1063:         '''
1064:         mtx = self._direction.get_matrix()
1065:         if direction in ('clockwise',):
1066:             mtx[0, 0] = -1
1067:         elif direction in ('counterclockwise', 'anticlockwise'):
1068:             mtx[0, 0] = 1
1069:         elif direction in (1, -1):
1070:             mtx[0, 0] = direction
1071:         else:
1072:             raise ValueError(
1073:                 "direction must be 1, -1, clockwise or counterclockwise")
1074:         self._direction.invalidate()
1075:         # FIXME: Why is this needed? Even though the tick label gets
1076:         # re-created, the alignment is not correctly updated without a reset.
1077:         self.yaxis.reset_ticks()
1078:         self.yaxis.set_clip_path(self.patch)
1079: 
1080:     def get_theta_direction(self):
1081:         '''
1082:         Get the direction in which theta increases.
1083: 
1084:         -1:
1085:            Theta increases in the clockwise direction
1086: 
1087:         1:
1088:            Theta increases in the counterclockwise direction
1089:         '''
1090:         return self._direction.get_matrix()[0, 0]
1091: 
1092:     def set_rmax(self, rmax):
1093:         self.viewLim.y1 = rmax
1094: 
1095:     def get_rmax(self):
1096:         return self.viewLim.ymax
1097: 
1098:     def set_rmin(self, rmin):
1099:         self.viewLim.y0 = rmin
1100: 
1101:     def get_rmin(self):
1102:         return self.viewLim.ymin
1103: 
1104:     def set_rorigin(self, rorigin):
1105:         self._originViewLim.locked_y0 = rorigin
1106: 
1107:     def get_rorigin(self):
1108:         return self._originViewLim.y0
1109: 
1110:     def set_rlim(self, *args, **kwargs):
1111:         if 'rmin' in kwargs:
1112:             kwargs['ymin'] = kwargs.pop('rmin')
1113:         if 'rmax' in kwargs:
1114:             kwargs['ymax'] = kwargs.pop('rmax')
1115:         return self.set_ylim(*args, **kwargs)
1116: 
1117:     def get_rlabel_position(self):
1118:         '''
1119:         Returns
1120:         -------
1121:         float
1122:             The theta position of the radius labels in degrees.
1123:         '''
1124:         return np.rad2deg(self._r_label_position.get_matrix()[0, 2])
1125: 
1126:     def set_rlabel_position(self, value):
1127:         '''Updates the theta position of the radius labels.
1128: 
1129:         Parameters
1130:         ----------
1131:         value : number
1132:             The angular position of the radius labels in degrees.
1133:         '''
1134:         self._r_label_position.clear().translate(np.deg2rad(value), 0.0)
1135:         self.yaxis.reset_ticks()
1136:         self.yaxis.set_clip_path(self.patch)
1137: 
1138:     def set_yscale(self, *args, **kwargs):
1139:         Axes.set_yscale(self, *args, **kwargs)
1140:         self.yaxis.set_major_locator(
1141:             self.RadialLocator(self.yaxis.get_major_locator(), self))
1142: 
1143:     def set_rscale(self, *args, **kwargs):
1144:         return Axes.set_yscale(self, *args, **kwargs)
1145: 
1146:     def set_rticks(self, *args, **kwargs):
1147:         return Axes.set_yticks(self, *args, **kwargs)
1148: 
1149:     @docstring.dedent_interpd
1150:     def set_thetagrids(self, angles, labels=None, frac=None, fmt=None,
1151:                        **kwargs):
1152:         '''
1153:         Set the angles at which to place the theta grids (these
1154:         gridlines are equal along the theta dimension).  *angles* is in
1155:         degrees.
1156: 
1157:         *labels*, if not None, is a ``len(angles)`` list of strings of
1158:         the labels to use at each angle.
1159: 
1160:         If *labels* is None, the labels will be ``fmt %% angle``
1161: 
1162:         *frac* is the fraction of the polar axes radius at which to
1163:         place the label (1 is the edge). e.g., 1.05 is outside the axes
1164:         and 0.95 is inside the axes.
1165: 
1166:         Return value is a list of tuples (*line*, *label*), where
1167:         *line* is :class:`~matplotlib.lines.Line2D` instances and the
1168:         *label* is :class:`~matplotlib.text.Text` instances.
1169: 
1170:         kwargs are optional text properties for the labels:
1171: 
1172:         %(Text)s
1173: 
1174:         ACCEPTS: sequence of floats
1175:         '''
1176:         # Make sure we take into account unitized data
1177:         angles = self.convert_yunits(angles)
1178:         angles = np.asarray(angles, float)
1179:         self.set_xticks(angles * (np.pi / 180.0))
1180:         if labels is not None:
1181:             self.set_xticklabels(labels)
1182:         elif fmt is not None:
1183:             self.xaxis.set_major_formatter(mticker.FormatStrFormatter(fmt))
1184:         for t in self.xaxis.get_ticklabels():
1185:             t.update(kwargs)
1186:         return self.xaxis.get_ticklines(), self.xaxis.get_ticklabels()
1187: 
1188:     @docstring.dedent_interpd
1189:     def set_rgrids(self, radii, labels=None, angle=None, fmt=None,
1190:                    **kwargs):
1191:         '''
1192:         Set the radial locations and labels of the *r* grids.
1193: 
1194:         The labels will appear at radial distances *radii* at the
1195:         given *angle* in degrees.
1196: 
1197:         *labels*, if not None, is a ``len(radii)`` list of strings of the
1198:         labels to use at each radius.
1199: 
1200:         If *labels* is None, the built-in formatter will be used.
1201: 
1202:         Return value is a list of tuples (*line*, *label*), where
1203:         *line* is :class:`~matplotlib.lines.Line2D` instances and the
1204:         *label* is :class:`~matplotlib.text.Text` instances.
1205: 
1206:         kwargs are optional text properties for the labels:
1207: 
1208:         %(Text)s
1209: 
1210:         ACCEPTS: sequence of floats
1211:         '''
1212:         # Make sure we take into account unitized data
1213:         radii = self.convert_xunits(radii)
1214:         radii = np.asarray(radii)
1215: 
1216:         self.set_yticks(radii)
1217:         if labels is not None:
1218:             self.set_yticklabels(labels)
1219:         elif fmt is not None:
1220:             self.yaxis.set_major_formatter(mticker.FormatStrFormatter(fmt))
1221:         if angle is None:
1222:             angle = self.get_rlabel_position()
1223:         self.set_rlabel_position(angle)
1224:         for t in self.yaxis.get_ticklabels():
1225:             t.update(kwargs)
1226:         return self.yaxis.get_gridlines(), self.yaxis.get_ticklabels()
1227: 
1228:     def set_xscale(self, scale, *args, **kwargs):
1229:         if scale != 'linear':
1230:             raise NotImplementedError(
1231:                 "You can not set the xscale on a polar plot.")
1232: 
1233:     def format_coord(self, theta, r):
1234:         '''
1235:         Return a format string formatting the coordinate using Unicode
1236:         characters.
1237:         '''
1238:         if theta < 0:
1239:             theta += 2 * np.pi
1240:         theta /= np.pi
1241:         return ('\N{GREEK SMALL LETTER THETA}=%0.3f\N{GREEK SMALL LETTER PI} '
1242:                 '(%0.3f\N{DEGREE SIGN}), r=%0.3f') % (theta, theta * 180.0, r)
1243: 
1244:     def get_data_ratio(self):
1245:         '''
1246:         Return the aspect ratio of the data itself.  For a polar plot,
1247:         this should always be 1.0
1248:         '''
1249:         return 1.0
1250: 
1251:     # # # Interactive panning
1252: 
1253:     def can_zoom(self):
1254:         '''
1255:         Return *True* if this axes supports the zoom box button functionality.
1256: 
1257:         Polar axes do not support zoom boxes.
1258:         '''
1259:         return False
1260: 
1261:     def can_pan(self):
1262:         '''
1263:         Return *True* if this axes supports the pan/zoom button functionality.
1264: 
1265:         For polar axes, this is slightly misleading. Both panning and
1266:         zooming are performed by the same button. Panning is performed
1267:         in azimuth while zooming is done along the radial.
1268:         '''
1269:         return True
1270: 
1271:     def start_pan(self, x, y, button):
1272:         angle = np.deg2rad(self.get_rlabel_position())
1273:         mode = ''
1274:         if button == 1:
1275:             epsilon = np.pi / 45.0
1276:             t, r = self.transData.inverted().transform_point((x, y))
1277:             if t >= angle - epsilon and t <= angle + epsilon:
1278:                 mode = 'drag_r_labels'
1279:         elif button == 3:
1280:             mode = 'zoom'
1281: 
1282:         self._pan_start = cbook.Bunch(
1283:             rmax=self.get_rmax(),
1284:             trans=self.transData.frozen(),
1285:             trans_inverse=self.transData.inverted().frozen(),
1286:             r_label_angle=self.get_rlabel_position(),
1287:             x=x,
1288:             y=y,
1289:             mode=mode)
1290: 
1291:     def end_pan(self):
1292:         del self._pan_start
1293: 
1294:     def drag_pan(self, button, key, x, y):
1295:         p = self._pan_start
1296: 
1297:         if p.mode == 'drag_r_labels':
1298:             startt, startr = p.trans_inverse.transform_point((p.x, p.y))
1299:             t, r = p.trans_inverse.transform_point((x, y))
1300: 
1301:             # Deal with theta
1302:             dt0 = t - startt
1303:             dt1 = startt - t
1304:             if abs(dt1) < abs(dt0):
1305:                 dt = abs(dt1) * np.sign(dt0) * -1.0
1306:             else:
1307:                 dt = dt0 * -1.0
1308:             dt = (dt / np.pi) * 180.0
1309:             self.set_rlabel_position(p.r_label_angle - dt)
1310: 
1311:             trans, vert1, horiz1 = self.get_yaxis_text1_transform(0.0)
1312:             trans, vert2, horiz2 = self.get_yaxis_text2_transform(0.0)
1313:             for t in self.yaxis.majorTicks + self.yaxis.minorTicks:
1314:                 t.label1.set_va(vert1)
1315:                 t.label1.set_ha(horiz1)
1316:                 t.label2.set_va(vert2)
1317:                 t.label2.set_ha(horiz2)
1318: 
1319:         elif p.mode == 'zoom':
1320:             startt, startr = p.trans_inverse.transform_point((p.x, p.y))
1321:             t, r = p.trans_inverse.transform_point((x, y))
1322: 
1323:             # Deal with r
1324:             scale = r / startr
1325:             self.set_rmax(p.rmax / scale)
1326: 
1327: 
1328: # to keep things all self contained, we can put aliases to the Polar classes
1329: # defined above. This isn't strictly necessary, but it makes some of the
1330: # code more readable (and provides a backwards compatible Polar API)
1331: PolarAxes.PolarTransform = PolarTransform
1332: PolarAxes.PolarAffine = PolarAffine
1333: PolarAxes.InvertedPolarTransform = InvertedPolarTransform
1334: PolarAxes.ThetaFormatter = ThetaFormatter
1335: PolarAxes.RadialLocator = RadialLocator
1336: PolarAxes.ThetaLocator = ThetaLocator
1337: 
1338: 
1339: # These are a couple of aborted attempts to project a polar plot using
1340: # cubic bezier curves.
1341: 
1342: #         def transform_path(self, path):
1343: #             twopi = 2.0 * np.pi
1344: #             halfpi = 0.5 * np.pi
1345: 
1346: #             vertices = path.vertices
1347: #             t0 = vertices[0:-1, 0]
1348: #             t1 = vertices[1:  , 0]
1349: #             td = np.where(t1 > t0, t1 - t0, twopi - (t0 - t1))
1350: #             maxtd = td.max()
1351: #             interpolate = np.ceil(maxtd / halfpi)
1352: #             if interpolate > 1.0:
1353: #                 vertices = self.interpolate(vertices, interpolate)
1354: 
1355: #             vertices = self.transform(vertices)
1356: 
1357: #             result = np.zeros((len(vertices) * 3 - 2, 2), float)
1358: #             codes = mpath.Path.CURVE4 * np.ones((len(vertices) * 3 - 2, ),
1359: #                                                 mpath.Path.code_type)
1360: #             result[0] = vertices[0]
1361: #             codes[0] = mpath.Path.MOVETO
1362: 
1363: #             kappa = 4.0 * ((np.sqrt(2.0) - 1.0) / 3.0)
1364: #             kappa = 0.5
1365: 
1366: #             p0   = vertices[0:-1]
1367: #             p1   = vertices[1:  ]
1368: 
1369: #             x0   = p0[:, 0:1]
1370: #             y0   = p0[:, 1: ]
1371: #             b0   = ((y0 - x0) - y0) / ((x0 + y0) - x0)
1372: #             a0   = y0 - b0*x0
1373: 
1374: #             x1   = p1[:, 0:1]
1375: #             y1   = p1[:, 1: ]
1376: #             b1   = ((y1 - x1) - y1) / ((x1 + y1) - x1)
1377: #             a1   = y1 - b1*x1
1378: 
1379: #             x = -(a0-a1) / (b0-b1)
1380: #             y = a0 + b0*x
1381: 
1382: #             xk = (x - x0) * kappa + x0
1383: #             yk = (y - y0) * kappa + y0
1384: 
1385: #             result[1::3, 0:1] = xk
1386: #             result[1::3, 1: ] = yk
1387: 
1388: #             xk = (x - x1) * kappa + x1
1389: #             yk = (y - y1) * kappa + y1
1390: 
1391: #             result[2::3, 0:1] = xk
1392: #             result[2::3, 1: ] = yk
1393: 
1394: #             result[3::3] = p1
1395: 
1396: #             print(vertices[-2:])
1397: #             print(result[-2:])
1398: 
1399: #             return mpath.Path(result, codes)
1400: 
1401: #             twopi = 2.0 * np.pi
1402: #             halfpi = 0.5 * np.pi
1403: 
1404: #             vertices = path.vertices
1405: #             t0 = vertices[0:-1, 0]
1406: #             t1 = vertices[1:  , 0]
1407: #             td = np.where(t1 > t0, t1 - t0, twopi - (t0 - t1))
1408: #             maxtd = td.max()
1409: #             interpolate = np.ceil(maxtd / halfpi)
1410: 
1411: #             print("interpolate", interpolate)
1412: #             if interpolate > 1.0:
1413: #                 vertices = self.interpolate(vertices, interpolate)
1414: 
1415: #             result = np.zeros((len(vertices) * 3 - 2, 2), float)
1416: #             codes = mpath.Path.CURVE4 * np.ones((len(vertices) * 3 - 2, ),
1417: #                                                 mpath.Path.code_type)
1418: #             result[0] = vertices[0]
1419: #             codes[0] = mpath.Path.MOVETO
1420: 
1421: #             kappa = 4.0 * ((np.sqrt(2.0) - 1.0) / 3.0)
1422: #             tkappa = np.arctan(kappa)
1423: #             hyp_kappa = np.sqrt(kappa*kappa + 1.0)
1424: 
1425: #             t0 = vertices[0:-1, 0]
1426: #             t1 = vertices[1:  , 0]
1427: #             r0 = vertices[0:-1, 1]
1428: #             r1 = vertices[1:  , 1]
1429: 
1430: #             td = np.where(t1 > t0, t1 - t0, twopi - (t0 - t1))
1431: #             td_scaled = td / (np.pi * 0.5)
1432: #             rd = r1 - r0
1433: #             r0kappa = r0 * kappa * td_scaled
1434: #             r1kappa = r1 * kappa * td_scaled
1435: #             ravg_kappa = ((r1 + r0) / 2.0) * kappa * td_scaled
1436: 
1437: #             result[1::3, 0] = t0 + (tkappa * td_scaled)
1438: #             result[1::3, 1] = r0*hyp_kappa
1439: #             # result[1::3, 1] = r0 / np.cos(tkappa * td_scaled)
1440: #             # np.sqrt(r0*r0 + ravg_kappa*ravg_kappa)
1441: 
1442: #             result[2::3, 0] = t1 - (tkappa * td_scaled)
1443: #             result[2::3, 1] = r1*hyp_kappa
1444: #             # result[2::3, 1] = r1 / np.cos(tkappa * td_scaled)
1445: #             # np.sqrt(r1*r1 + ravg_kappa*ravg_kappa)
1446: 
1447: #             result[3::3, 0] = t1
1448: #             result[3::3, 1] = r1
1449: 
1450: #             print(vertices[:6], result[:6], t0[:6], t1[:6], td[:6],
1451: #                   td_scaled[:6], tkappa)
1452: #             result = self.transform(result)
1453: #             return mpath.Path(result, codes)
1454: #         transform_path_non_affine = transform_path
1455: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 4, 0))

# 'import six' statement (line 4)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/projections/')
import_281171 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 4, 0), 'six')

if (type(import_281171) is not StypyTypeError):

    if (import_281171 != 'pyd_module'):
        __import__(import_281171)
        sys_modules_281172 = sys.modules[import_281171]
        import_module(stypy.reporting.localization.Localization(__file__, 4, 0), 'six', sys_modules_281172.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 4, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 4)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4, 0), 'six', import_281171)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/projections/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 6, 0))

# 'from collections import OrderedDict' statement (line 6)
try:
    from collections import OrderedDict

except:
    OrderedDict = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'collections', None, module_type_store, ['OrderedDict'], [OrderedDict])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'import numpy' statement (line 8)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/projections/')
import_281173 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'numpy')

if (type(import_281173) is not StypyTypeError):

    if (import_281173 != 'pyd_module'):
        __import__(import_281173)
        sys_modules_281174 = sys.modules[import_281173]
        import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'np', sys_modules_281174.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 8)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 8, 0), 'numpy', import_281173)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/projections/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'import matplotlib.artist' statement (line 10)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/projections/')
import_281175 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'matplotlib.artist')

if (type(import_281175) is not StypyTypeError):

    if (import_281175 != 'pyd_module'):
        __import__(import_281175)
        sys_modules_281176 = sys.modules[import_281175]
        import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'martist', sys_modules_281176.module_type_store, module_type_store)
    else:
        import matplotlib.artist as martist

        import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'martist', matplotlib.artist, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 10)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 10, 0), 'matplotlib.artist', import_281175)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/projections/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'from matplotlib.axes import Axes' statement (line 11)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/projections/')
import_281177 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'matplotlib.axes')

if (type(import_281177) is not StypyTypeError):

    if (import_281177 != 'pyd_module'):
        __import__(import_281177)
        sys_modules_281178 = sys.modules[import_281177]
        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'matplotlib.axes', sys_modules_281178.module_type_store, module_type_store, ['Axes'])
        nest_module(stypy.reporting.localization.Localization(__file__, 11, 0), __file__, sys_modules_281178, sys_modules_281178.module_type_store, module_type_store)
    else:
        from matplotlib.axes import Axes

        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'matplotlib.axes', None, module_type_store, ['Axes'], [Axes])

else:
    # Assigning a type to the variable 'matplotlib.axes' (line 11)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 11, 0), 'matplotlib.axes', import_281177)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/projections/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'import matplotlib.axis' statement (line 12)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/projections/')
import_281179 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'matplotlib.axis')

if (type(import_281179) is not StypyTypeError):

    if (import_281179 != 'pyd_module'):
        __import__(import_281179)
        sys_modules_281180 = sys.modules[import_281179]
        import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'maxis', sys_modules_281180.module_type_store, module_type_store)
    else:
        import matplotlib.axis as maxis

        import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'maxis', matplotlib.axis, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.axis' (line 12)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 12, 0), 'matplotlib.axis', import_281179)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/projections/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'from matplotlib import cbook' statement (line 13)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/projections/')
import_281181 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'matplotlib')

if (type(import_281181) is not StypyTypeError):

    if (import_281181 != 'pyd_module'):
        __import__(import_281181)
        sys_modules_281182 = sys.modules[import_281181]
        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'matplotlib', sys_modules_281182.module_type_store, module_type_store, ['cbook'])
        nest_module(stypy.reporting.localization.Localization(__file__, 13, 0), __file__, sys_modules_281182, sys_modules_281182.module_type_store, module_type_store)
    else:
        from matplotlib import cbook

        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'matplotlib', None, module_type_store, ['cbook'], [cbook])

else:
    # Assigning a type to the variable 'matplotlib' (line 13)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 13, 0), 'matplotlib', import_281181)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/projections/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'from matplotlib import docstring' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/projections/')
import_281183 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'matplotlib')

if (type(import_281183) is not StypyTypeError):

    if (import_281183 != 'pyd_module'):
        __import__(import_281183)
        sys_modules_281184 = sys.modules[import_281183]
        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'matplotlib', sys_modules_281184.module_type_store, module_type_store, ['docstring'])
        nest_module(stypy.reporting.localization.Localization(__file__, 14, 0), __file__, sys_modules_281184, sys_modules_281184.module_type_store, module_type_store)
    else:
        from matplotlib import docstring

        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'matplotlib', None, module_type_store, ['docstring'], [docstring])

else:
    # Assigning a type to the variable 'matplotlib' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'matplotlib', import_281183)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/projections/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'import matplotlib.markers' statement (line 15)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/projections/')
import_281185 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'matplotlib.markers')

if (type(import_281185) is not StypyTypeError):

    if (import_281185 != 'pyd_module'):
        __import__(import_281185)
        sys_modules_281186 = sys.modules[import_281185]
        import_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'mmarkers', sys_modules_281186.module_type_store, module_type_store)
    else:
        import matplotlib.markers as mmarkers

        import_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'mmarkers', matplotlib.markers, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.markers' (line 15)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 15, 0), 'matplotlib.markers', import_281185)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/projections/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'import matplotlib.patches' statement (line 16)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/projections/')
import_281187 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib.patches')

if (type(import_281187) is not StypyTypeError):

    if (import_281187 != 'pyd_module'):
        __import__(import_281187)
        sys_modules_281188 = sys.modules[import_281187]
        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'mpatches', sys_modules_281188.module_type_store, module_type_store)
    else:
        import matplotlib.patches as mpatches

        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'mpatches', matplotlib.patches, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.patches' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib.patches', import_281187)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/projections/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 0))

# 'import matplotlib.path' statement (line 17)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/projections/')
import_281189 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'matplotlib.path')

if (type(import_281189) is not StypyTypeError):

    if (import_281189 != 'pyd_module'):
        __import__(import_281189)
        sys_modules_281190 = sys.modules[import_281189]
        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'mpath', sys_modules_281190.module_type_store, module_type_store)
    else:
        import matplotlib.path as mpath

        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'mpath', matplotlib.path, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.path' (line 17)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), 'matplotlib.path', import_281189)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/projections/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'from matplotlib import rcParams' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/projections/')
import_281191 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib')

if (type(import_281191) is not StypyTypeError):

    if (import_281191 != 'pyd_module'):
        __import__(import_281191)
        sys_modules_281192 = sys.modules[import_281191]
        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib', sys_modules_281192.module_type_store, module_type_store, ['rcParams'])
        nest_module(stypy.reporting.localization.Localization(__file__, 18, 0), __file__, sys_modules_281192, sys_modules_281192.module_type_store, module_type_store)
    else:
        from matplotlib import rcParams

        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib', None, module_type_store, ['rcParams'], [rcParams])

else:
    # Assigning a type to the variable 'matplotlib' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib', import_281191)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/projections/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'import matplotlib.ticker' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/projections/')
import_281193 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.ticker')

if (type(import_281193) is not StypyTypeError):

    if (import_281193 != 'pyd_module'):
        __import__(import_281193)
        sys_modules_281194 = sys.modules[import_281193]
        import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'mticker', sys_modules_281194.module_type_store, module_type_store)
    else:
        import matplotlib.ticker as mticker

        import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'mticker', matplotlib.ticker, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.ticker' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.ticker', import_281193)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/projections/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'import matplotlib.transforms' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/projections/')
import_281195 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib.transforms')

if (type(import_281195) is not StypyTypeError):

    if (import_281195 != 'pyd_module'):
        __import__(import_281195)
        sys_modules_281196 = sys.modules[import_281195]
        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'mtransforms', sys_modules_281196.module_type_store, module_type_store)
    else:
        import matplotlib.transforms as mtransforms

        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'mtransforms', matplotlib.transforms, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib.transforms', import_281195)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/projections/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'import matplotlib.spines' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/projections/')
import_281197 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.spines')

if (type(import_281197) is not StypyTypeError):

    if (import_281197 != 'pyd_module'):
        __import__(import_281197)
        sys_modules_281198 = sys.modules[import_281197]
        import_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'mspines', sys_modules_281198.module_type_store, module_type_store)
    else:
        import matplotlib.spines as mspines

        import_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'mspines', matplotlib.spines, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.spines' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.spines', import_281197)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/projections/')

# Declaration of the 'PolarTransform' class
# Getting the type of 'mtransforms' (line 24)
mtransforms_281199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 24, 21), 'mtransforms')
# Obtaining the member 'Transform' of a type (line 24)
Transform_281200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 24, 21), mtransforms_281199, 'Transform')

class PolarTransform(Transform_281200, ):
    unicode_281201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, (-1)), 'unicode', u'\n    The base polar transform.  This handles projection *theta* and\n    *r* into Cartesian coordinate space *x* and *y*, but does not\n    perform the ultimate affine transformation into the correct\n    position.\n    ')
    
    # Assigning a Num to a Name (line 31):
    
    # Assigning a Num to a Name (line 32):
    
    # Assigning a Name to a Name (line 33):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 35)
        None_281202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 35, 28), 'None')
        # Getting the type of 'True' (line 35)
        True_281203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 35, 43), 'True')
        # Getting the type of 'True' (line 36)
        True_281204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 41), 'True')
        defaults = [None_281202, True_281203, True_281204]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 35, 4, False)
        # Assigning a type to the variable 'self' (line 36)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarTransform.__init__', ['axis', 'use_rmin', '_apply_theta_transforms'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['axis', 'use_rmin', '_apply_theta_transforms'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 37)
        # Processing the call arguments (line 37)
        # Getting the type of 'self' (line 37)
        self_281208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 39), 'self', False)
        # Processing the call keyword arguments (line 37)
        kwargs_281209 = {}
        # Getting the type of 'mtransforms' (line 37)
        mtransforms_281205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 8), 'mtransforms', False)
        # Obtaining the member 'Transform' of a type (line 37)
        Transform_281206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 37, 8), mtransforms_281205, 'Transform')
        # Obtaining the member '__init__' of a type (line 37)
        init___281207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 37, 8), Transform_281206, '__init__')
        # Calling __init__(args, kwargs) (line 37)
        init___call_result_281210 = invoke(stypy.reporting.localization.Localization(__file__, 37, 8), init___281207, *[self_281208], **kwargs_281209)
        
        
        # Assigning a Name to a Attribute (line 38):
        
        # Assigning a Name to a Attribute (line 38):
        # Getting the type of 'axis' (line 38)
        axis_281211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 38, 21), 'axis')
        # Getting the type of 'self' (line 38)
        self_281212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 38, 8), 'self')
        # Setting the type of the member '_axis' of a type (line 38)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 38, 8), self_281212, '_axis', axis_281211)
        
        # Assigning a Name to a Attribute (line 39):
        
        # Assigning a Name to a Attribute (line 39):
        # Getting the type of 'use_rmin' (line 39)
        use_rmin_281213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 25), 'use_rmin')
        # Getting the type of 'self' (line 39)
        self_281214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 8), 'self')
        # Setting the type of the member '_use_rmin' of a type (line 39)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 39, 8), self_281214, '_use_rmin', use_rmin_281213)
        
        # Assigning a Name to a Attribute (line 40):
        
        # Assigning a Name to a Attribute (line 40):
        # Getting the type of '_apply_theta_transforms' (line 40)
        _apply_theta_transforms_281215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 39), '_apply_theta_transforms')
        # Getting the type of 'self' (line 40)
        self_281216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 8), 'self')
        # Setting the type of the member '_apply_theta_transforms' of a type (line 40)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 40, 8), self_281216, '_apply_theta_transforms', _apply_theta_transforms_281215)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def transform_non_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_non_affine'
        module_type_store = module_type_store.open_function_context('transform_non_affine', 42, 4, False)
        # Assigning a type to the variable 'self' (line 43)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarTransform.transform_non_affine.__dict__.__setitem__('stypy_localization', localization)
        PolarTransform.transform_non_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarTransform.transform_non_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarTransform.transform_non_affine.__dict__.__setitem__('stypy_function_name', 'PolarTransform.transform_non_affine')
        PolarTransform.transform_non_affine.__dict__.__setitem__('stypy_param_names_list', ['tr'])
        PolarTransform.transform_non_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarTransform.transform_non_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarTransform.transform_non_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarTransform.transform_non_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarTransform.transform_non_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarTransform.transform_non_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarTransform.transform_non_affine', ['tr'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_non_affine', localization, ['tr'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_non_affine(...)' code ##################

        
        # Assigning a Call to a Name (line 43):
        
        # Assigning a Call to a Name (line 43):
        
        # Call to empty(...): (line 43)
        # Processing the call arguments (line 43)
        # Getting the type of 'tr' (line 43)
        tr_281219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 22), 'tr', False)
        # Obtaining the member 'shape' of a type (line 43)
        shape_281220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 43, 22), tr_281219, 'shape')
        # Getting the type of 'float' (line 43)
        float_281221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 32), 'float', False)
        # Processing the call keyword arguments (line 43)
        kwargs_281222 = {}
        # Getting the type of 'np' (line 43)
        np_281217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 13), 'np', False)
        # Obtaining the member 'empty' of a type (line 43)
        empty_281218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 43, 13), np_281217, 'empty')
        # Calling empty(args, kwargs) (line 43)
        empty_call_result_281223 = invoke(stypy.reporting.localization.Localization(__file__, 43, 13), empty_281218, *[shape_281220, float_281221], **kwargs_281222)
        
        # Assigning a type to the variable 'xy' (line 43)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 8), 'xy', empty_call_result_281223)
        
        # Assigning a Subscript to a Name (line 45):
        
        # Assigning a Subscript to a Name (line 45):
        
        # Obtaining the type of the subscript
        slice_281224 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 45, 12), None, None, None)
        int_281225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 18), 'int')
        int_281226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 20), 'int')
        slice_281227 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 45, 12), int_281225, int_281226, None)
        # Getting the type of 'tr' (line 45)
        tr_281228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 12), 'tr')
        # Obtaining the member '__getitem__' of a type (line 45)
        getitem___281229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 45, 12), tr_281228, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 45)
        subscript_call_result_281230 = invoke(stypy.reporting.localization.Localization(__file__, 45, 12), getitem___281229, (slice_281224, slice_281227))
        
        # Assigning a type to the variable 't' (line 45)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 45, 8), 't', subscript_call_result_281230)
        
        # Assigning a Subscript to a Name (line 46):
        
        # Assigning a Subscript to a Name (line 46):
        
        # Obtaining the type of the subscript
        slice_281231 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 46, 12), None, None, None)
        int_281232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 18), 'int')
        int_281233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 20), 'int')
        slice_281234 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 46, 12), int_281232, int_281233, None)
        # Getting the type of 'tr' (line 46)
        tr_281235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 12), 'tr')
        # Obtaining the member '__getitem__' of a type (line 46)
        getitem___281236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 46, 12), tr_281235, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 46)
        subscript_call_result_281237 = invoke(stypy.reporting.localization.Localization(__file__, 46, 12), getitem___281236, (slice_281231, slice_281234))
        
        # Assigning a type to the variable 'r' (line 46)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 8), 'r', subscript_call_result_281237)
        
        # Assigning a Subscript to a Name (line 47):
        
        # Assigning a Subscript to a Name (line 47):
        
        # Obtaining the type of the subscript
        slice_281238 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 47, 12), None, None, None)
        int_281239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 18), 'int')
        int_281240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 20), 'int')
        slice_281241 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 47, 12), int_281239, int_281240, None)
        # Getting the type of 'xy' (line 47)
        xy_281242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 12), 'xy')
        # Obtaining the member '__getitem__' of a type (line 47)
        getitem___281243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 47, 12), xy_281242, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 47)
        subscript_call_result_281244 = invoke(stypy.reporting.localization.Localization(__file__, 47, 12), getitem___281243, (slice_281238, slice_281241))
        
        # Assigning a type to the variable 'x' (line 47)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 8), 'x', subscript_call_result_281244)
        
        # Assigning a Subscript to a Name (line 48):
        
        # Assigning a Subscript to a Name (line 48):
        
        # Obtaining the type of the subscript
        slice_281245 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 48, 12), None, None, None)
        int_281246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 18), 'int')
        int_281247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 20), 'int')
        slice_281248 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 48, 12), int_281246, int_281247, None)
        # Getting the type of 'xy' (line 48)
        xy_281249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 12), 'xy')
        # Obtaining the member '__getitem__' of a type (line 48)
        getitem___281250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 48, 12), xy_281249, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 48)
        subscript_call_result_281251 = invoke(stypy.reporting.localization.Localization(__file__, 48, 12), getitem___281250, (slice_281245, slice_281248))
        
        # Assigning a type to the variable 'y' (line 48)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 48, 8), 'y', subscript_call_result_281251)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 52)
        self_281252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 11), 'self')
        # Obtaining the member '_apply_theta_transforms' of a type (line 52)
        _apply_theta_transforms_281253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 52, 11), self_281252, '_apply_theta_transforms')
        
        # Getting the type of 'self' (line 52)
        self_281254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 44), 'self')
        # Obtaining the member '_axis' of a type (line 52)
        _axis_281255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 52, 44), self_281254, '_axis')
        # Getting the type of 'None' (line 52)
        None_281256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 62), 'None')
        # Applying the binary operator 'isnot' (line 52)
        result_is_not_281257 = python_operator(stypy.reporting.localization.Localization(__file__, 52, 44), 'isnot', _axis_281255, None_281256)
        
        # Applying the binary operator 'and' (line 52)
        result_and_keyword_281258 = python_operator(stypy.reporting.localization.Localization(__file__, 52, 11), 'and', _apply_theta_transforms_281253, result_is_not_281257)
        
        # Testing the type of an if condition (line 52)
        if_condition_281259 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 52, 8), result_and_keyword_281258)
        # Assigning a type to the variable 'if_condition_281259' (line 52)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 8), 'if_condition_281259', if_condition_281259)
        # SSA begins for if statement (line 52)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 't' (line 53)
        t_281260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 12), 't')
        
        # Call to get_theta_direction(...): (line 53)
        # Processing the call keyword arguments (line 53)
        kwargs_281264 = {}
        # Getting the type of 'self' (line 53)
        self_281261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 17), 'self', False)
        # Obtaining the member '_axis' of a type (line 53)
        _axis_281262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 53, 17), self_281261, '_axis')
        # Obtaining the member 'get_theta_direction' of a type (line 53)
        get_theta_direction_281263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 53, 17), _axis_281262, 'get_theta_direction')
        # Calling get_theta_direction(args, kwargs) (line 53)
        get_theta_direction_call_result_281265 = invoke(stypy.reporting.localization.Localization(__file__, 53, 17), get_theta_direction_281263, *[], **kwargs_281264)
        
        # Applying the binary operator '*=' (line 53)
        result_imul_281266 = python_operator(stypy.reporting.localization.Localization(__file__, 53, 12), '*=', t_281260, get_theta_direction_call_result_281265)
        # Assigning a type to the variable 't' (line 53)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 12), 't', result_imul_281266)
        
        
        # Getting the type of 't' (line 54)
        t_281267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 12), 't')
        
        # Call to get_theta_offset(...): (line 54)
        # Processing the call keyword arguments (line 54)
        kwargs_281271 = {}
        # Getting the type of 'self' (line 54)
        self_281268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 17), 'self', False)
        # Obtaining the member '_axis' of a type (line 54)
        _axis_281269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 54, 17), self_281268, '_axis')
        # Obtaining the member 'get_theta_offset' of a type (line 54)
        get_theta_offset_281270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 54, 17), _axis_281269, 'get_theta_offset')
        # Calling get_theta_offset(args, kwargs) (line 54)
        get_theta_offset_call_result_281272 = invoke(stypy.reporting.localization.Localization(__file__, 54, 17), get_theta_offset_281270, *[], **kwargs_281271)
        
        # Applying the binary operator '+=' (line 54)
        result_iadd_281273 = python_operator(stypy.reporting.localization.Localization(__file__, 54, 12), '+=', t_281267, get_theta_offset_call_result_281272)
        # Assigning a type to the variable 't' (line 54)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 54, 12), 't', result_iadd_281273)
        
        # SSA join for if statement (line 52)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 56)
        self_281274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 11), 'self')
        # Obtaining the member '_use_rmin' of a type (line 56)
        _use_rmin_281275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 56, 11), self_281274, '_use_rmin')
        
        # Getting the type of 'self' (line 56)
        self_281276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 30), 'self')
        # Obtaining the member '_axis' of a type (line 56)
        _axis_281277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 56, 30), self_281276, '_axis')
        # Getting the type of 'None' (line 56)
        None_281278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 48), 'None')
        # Applying the binary operator 'isnot' (line 56)
        result_is_not_281279 = python_operator(stypy.reporting.localization.Localization(__file__, 56, 30), 'isnot', _axis_281277, None_281278)
        
        # Applying the binary operator 'and' (line 56)
        result_and_keyword_281280 = python_operator(stypy.reporting.localization.Localization(__file__, 56, 11), 'and', _use_rmin_281275, result_is_not_281279)
        
        # Testing the type of an if condition (line 56)
        if_condition_281281 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 56, 8), result_and_keyword_281280)
        # Assigning a type to the variable 'if_condition_281281' (line 56)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 8), 'if_condition_281281', if_condition_281281)
        # SSA begins for if statement (line 56)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 57):
        
        # Assigning a BinOp to a Name (line 57):
        # Getting the type of 'r' (line 57)
        r_281282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 16), 'r')
        
        # Call to get_rorigin(...): (line 57)
        # Processing the call keyword arguments (line 57)
        kwargs_281286 = {}
        # Getting the type of 'self' (line 57)
        self_281283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 20), 'self', False)
        # Obtaining the member '_axis' of a type (line 57)
        _axis_281284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 57, 20), self_281283, '_axis')
        # Obtaining the member 'get_rorigin' of a type (line 57)
        get_rorigin_281285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 57, 20), _axis_281284, 'get_rorigin')
        # Calling get_rorigin(args, kwargs) (line 57)
        get_rorigin_call_result_281287 = invoke(stypy.reporting.localization.Localization(__file__, 57, 20), get_rorigin_281285, *[], **kwargs_281286)
        
        # Applying the binary operator '-' (line 57)
        result_sub_281288 = python_operator(stypy.reporting.localization.Localization(__file__, 57, 16), '-', r_281282, get_rorigin_call_result_281287)
        
        # Assigning a type to the variable 'r' (line 57)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 12), 'r', result_sub_281288)
        # SSA join for if statement (line 56)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Compare to a Name (line 58):
        
        # Assigning a Compare to a Name (line 58):
        
        # Getting the type of 'r' (line 58)
        r_281289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 58, 15), 'r')
        int_281290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 19), 'int')
        # Applying the binary operator '<' (line 58)
        result_lt_281291 = python_operator(stypy.reporting.localization.Localization(__file__, 58, 15), '<', r_281289, int_281290)
        
        # Assigning a type to the variable 'mask' (line 58)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 58, 8), 'mask', result_lt_281291)
        
        # Assigning a Call to a Subscript (line 59):
        
        # Assigning a Call to a Subscript (line 59):
        
        # Call to where(...): (line 59)
        # Processing the call arguments (line 59)
        # Getting the type of 'mask' (line 59)
        mask_281294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 24), 'mask', False)
        # Getting the type of 'np' (line 59)
        np_281295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 30), 'np', False)
        # Obtaining the member 'nan' of a type (line 59)
        nan_281296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 59, 30), np_281295, 'nan')
        # Getting the type of 'r' (line 59)
        r_281297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 38), 'r', False)
        
        # Call to cos(...): (line 59)
        # Processing the call arguments (line 59)
        # Getting the type of 't' (line 59)
        t_281300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 49), 't', False)
        # Processing the call keyword arguments (line 59)
        kwargs_281301 = {}
        # Getting the type of 'np' (line 59)
        np_281298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 42), 'np', False)
        # Obtaining the member 'cos' of a type (line 59)
        cos_281299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 59, 42), np_281298, 'cos')
        # Calling cos(args, kwargs) (line 59)
        cos_call_result_281302 = invoke(stypy.reporting.localization.Localization(__file__, 59, 42), cos_281299, *[t_281300], **kwargs_281301)
        
        # Applying the binary operator '*' (line 59)
        result_mul_281303 = python_operator(stypy.reporting.localization.Localization(__file__, 59, 38), '*', r_281297, cos_call_result_281302)
        
        # Processing the call keyword arguments (line 59)
        kwargs_281304 = {}
        # Getting the type of 'np' (line 59)
        np_281292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 15), 'np', False)
        # Obtaining the member 'where' of a type (line 59)
        where_281293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 59, 15), np_281292, 'where')
        # Calling where(args, kwargs) (line 59)
        where_call_result_281305 = invoke(stypy.reporting.localization.Localization(__file__, 59, 15), where_281293, *[mask_281294, nan_281296, result_mul_281303], **kwargs_281304)
        
        # Getting the type of 'x' (line 59)
        x_281306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 8), 'x')
        slice_281307 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 59, 8), None, None, None)
        # Storing an element on a container (line 59)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 59, 8), x_281306, (slice_281307, where_call_result_281305))
        
        # Assigning a Call to a Subscript (line 60):
        
        # Assigning a Call to a Subscript (line 60):
        
        # Call to where(...): (line 60)
        # Processing the call arguments (line 60)
        # Getting the type of 'mask' (line 60)
        mask_281310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 24), 'mask', False)
        # Getting the type of 'np' (line 60)
        np_281311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 30), 'np', False)
        # Obtaining the member 'nan' of a type (line 60)
        nan_281312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 60, 30), np_281311, 'nan')
        # Getting the type of 'r' (line 60)
        r_281313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 38), 'r', False)
        
        # Call to sin(...): (line 60)
        # Processing the call arguments (line 60)
        # Getting the type of 't' (line 60)
        t_281316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 49), 't', False)
        # Processing the call keyword arguments (line 60)
        kwargs_281317 = {}
        # Getting the type of 'np' (line 60)
        np_281314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 42), 'np', False)
        # Obtaining the member 'sin' of a type (line 60)
        sin_281315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 60, 42), np_281314, 'sin')
        # Calling sin(args, kwargs) (line 60)
        sin_call_result_281318 = invoke(stypy.reporting.localization.Localization(__file__, 60, 42), sin_281315, *[t_281316], **kwargs_281317)
        
        # Applying the binary operator '*' (line 60)
        result_mul_281319 = python_operator(stypy.reporting.localization.Localization(__file__, 60, 38), '*', r_281313, sin_call_result_281318)
        
        # Processing the call keyword arguments (line 60)
        kwargs_281320 = {}
        # Getting the type of 'np' (line 60)
        np_281308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 15), 'np', False)
        # Obtaining the member 'where' of a type (line 60)
        where_281309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 60, 15), np_281308, 'where')
        # Calling where(args, kwargs) (line 60)
        where_call_result_281321 = invoke(stypy.reporting.localization.Localization(__file__, 60, 15), where_281309, *[mask_281310, nan_281312, result_mul_281319], **kwargs_281320)
        
        # Getting the type of 'y' (line 60)
        y_281322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 8), 'y')
        slice_281323 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 60, 8), None, None, None)
        # Storing an element on a container (line 60)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 8), y_281322, (slice_281323, where_call_result_281321))
        # Getting the type of 'xy' (line 62)
        xy_281324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 62, 15), 'xy')
        # Assigning a type to the variable 'stypy_return_type' (line 62)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 62, 8), 'stypy_return_type', xy_281324)
        
        # ################# End of 'transform_non_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_non_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 42)
        stypy_return_type_281325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 42, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281325)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_non_affine'
        return stypy_return_type_281325

    
    # Assigning a Attribute to a Attribute (line 63):

    @norecursion
    def transform_path_non_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_path_non_affine'
        module_type_store = module_type_store.open_function_context('transform_path_non_affine', 66, 4, False)
        # Assigning a type to the variable 'self' (line 67)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 67, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarTransform.transform_path_non_affine.__dict__.__setitem__('stypy_localization', localization)
        PolarTransform.transform_path_non_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarTransform.transform_path_non_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarTransform.transform_path_non_affine.__dict__.__setitem__('stypy_function_name', 'PolarTransform.transform_path_non_affine')
        PolarTransform.transform_path_non_affine.__dict__.__setitem__('stypy_param_names_list', ['path'])
        PolarTransform.transform_path_non_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarTransform.transform_path_non_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarTransform.transform_path_non_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarTransform.transform_path_non_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarTransform.transform_path_non_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarTransform.transform_path_non_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarTransform.transform_path_non_affine', ['path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_path_non_affine', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_path_non_affine(...)' code ##################

        
        # Assigning a Attribute to a Name (line 67):
        
        # Assigning a Attribute to a Name (line 67):
        # Getting the type of 'path' (line 67)
        path_281326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 19), 'path')
        # Obtaining the member 'vertices' of a type (line 67)
        vertices_281327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 67, 19), path_281326, 'vertices')
        # Assigning a type to the variable 'vertices' (line 67)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 67, 8), 'vertices', vertices_281327)
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 68)
        # Processing the call arguments (line 68)
        # Getting the type of 'vertices' (line 68)
        vertices_281329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 15), 'vertices', False)
        # Processing the call keyword arguments (line 68)
        kwargs_281330 = {}
        # Getting the type of 'len' (line 68)
        len_281328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 11), 'len', False)
        # Calling len(args, kwargs) (line 68)
        len_call_result_281331 = invoke(stypy.reporting.localization.Localization(__file__, 68, 11), len_281328, *[vertices_281329], **kwargs_281330)
        
        int_281332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, 28), 'int')
        # Applying the binary operator '==' (line 68)
        result_eq_281333 = python_operator(stypy.reporting.localization.Localization(__file__, 68, 11), '==', len_call_result_281331, int_281332)
        
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 68)
        tuple_281334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, 43), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 68)
        # Adding element type (line 68)
        int_281335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, 43), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 68, 43), tuple_281334, int_281335)
        # Adding element type (line 68)
        int_281336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, 46), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 68, 43), tuple_281334, int_281336)
        
        # Getting the type of 'vertices' (line 68)
        vertices_281337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 34), 'vertices')
        # Obtaining the member '__getitem__' of a type (line 68)
        getitem___281338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 68, 34), vertices_281337, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 68)
        subscript_call_result_281339 = invoke(stypy.reporting.localization.Localization(__file__, 68, 34), getitem___281338, tuple_281334)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 68)
        tuple_281340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, 61), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 68)
        # Adding element type (line 68)
        int_281341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, 61), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 68, 61), tuple_281340, int_281341)
        # Adding element type (line 68)
        int_281342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, 64), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 68, 61), tuple_281340, int_281342)
        
        # Getting the type of 'vertices' (line 68)
        vertices_281343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 52), 'vertices')
        # Obtaining the member '__getitem__' of a type (line 68)
        getitem___281344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 68, 52), vertices_281343, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 68)
        subscript_call_result_281345 = invoke(stypy.reporting.localization.Localization(__file__, 68, 52), getitem___281344, tuple_281340)
        
        # Applying the binary operator '==' (line 68)
        result_eq_281346 = python_operator(stypy.reporting.localization.Localization(__file__, 68, 34), '==', subscript_call_result_281339, subscript_call_result_281345)
        
        # Applying the binary operator 'and' (line 68)
        result_and_keyword_281347 = python_operator(stypy.reporting.localization.Localization(__file__, 68, 11), 'and', result_eq_281333, result_eq_281346)
        
        # Testing the type of an if condition (line 68)
        if_condition_281348 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 68, 8), result_and_keyword_281347)
        # Assigning a type to the variable 'if_condition_281348' (line 68)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 68, 8), 'if_condition_281348', if_condition_281348)
        # SSA begins for if statement (line 68)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to Path(...): (line 69)
        # Processing the call arguments (line 69)
        
        # Call to transform(...): (line 69)
        # Processing the call arguments (line 69)
        # Getting the type of 'vertices' (line 69)
        vertices_281353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 45), 'vertices', False)
        # Processing the call keyword arguments (line 69)
        kwargs_281354 = {}
        # Getting the type of 'self' (line 69)
        self_281351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 30), 'self', False)
        # Obtaining the member 'transform' of a type (line 69)
        transform_281352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 69, 30), self_281351, 'transform')
        # Calling transform(args, kwargs) (line 69)
        transform_call_result_281355 = invoke(stypy.reporting.localization.Localization(__file__, 69, 30), transform_281352, *[vertices_281353], **kwargs_281354)
        
        # Getting the type of 'path' (line 69)
        path_281356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 56), 'path', False)
        # Obtaining the member 'codes' of a type (line 69)
        codes_281357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 69, 56), path_281356, 'codes')
        # Processing the call keyword arguments (line 69)
        kwargs_281358 = {}
        # Getting the type of 'mpath' (line 69)
        mpath_281349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 19), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 69)
        Path_281350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 69, 19), mpath_281349, 'Path')
        # Calling Path(args, kwargs) (line 69)
        Path_call_result_281359 = invoke(stypy.reporting.localization.Localization(__file__, 69, 19), Path_281350, *[transform_call_result_281355, codes_281357], **kwargs_281358)
        
        # Assigning a type to the variable 'stypy_return_type' (line 69)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 12), 'stypy_return_type', Path_call_result_281359)
        # SSA join for if statement (line 68)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 70):
        
        # Assigning a Call to a Name (line 70):
        
        # Call to interpolated(...): (line 70)
        # Processing the call arguments (line 70)
        # Getting the type of 'path' (line 70)
        path_281362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 34), 'path', False)
        # Obtaining the member '_interpolation_steps' of a type (line 70)
        _interpolation_steps_281363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 70, 34), path_281362, '_interpolation_steps')
        # Processing the call keyword arguments (line 70)
        kwargs_281364 = {}
        # Getting the type of 'path' (line 70)
        path_281360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 16), 'path', False)
        # Obtaining the member 'interpolated' of a type (line 70)
        interpolated_281361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 70, 16), path_281360, 'interpolated')
        # Calling interpolated(args, kwargs) (line 70)
        interpolated_call_result_281365 = invoke(stypy.reporting.localization.Localization(__file__, 70, 16), interpolated_281361, *[_interpolation_steps_281363], **kwargs_281364)
        
        # Assigning a type to the variable 'ipath' (line 70)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 8), 'ipath', interpolated_call_result_281365)
        
        # Call to Path(...): (line 71)
        # Processing the call arguments (line 71)
        
        # Call to transform(...): (line 71)
        # Processing the call arguments (line 71)
        # Getting the type of 'ipath' (line 71)
        ipath_281370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 41), 'ipath', False)
        # Obtaining the member 'vertices' of a type (line 71)
        vertices_281371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 71, 41), ipath_281370, 'vertices')
        # Processing the call keyword arguments (line 71)
        kwargs_281372 = {}
        # Getting the type of 'self' (line 71)
        self_281368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 26), 'self', False)
        # Obtaining the member 'transform' of a type (line 71)
        transform_281369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 71, 26), self_281368, 'transform')
        # Calling transform(args, kwargs) (line 71)
        transform_call_result_281373 = invoke(stypy.reporting.localization.Localization(__file__, 71, 26), transform_281369, *[vertices_281371], **kwargs_281372)
        
        # Getting the type of 'ipath' (line 71)
        ipath_281374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 58), 'ipath', False)
        # Obtaining the member 'codes' of a type (line 71)
        codes_281375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 71, 58), ipath_281374, 'codes')
        # Processing the call keyword arguments (line 71)
        kwargs_281376 = {}
        # Getting the type of 'mpath' (line 71)
        mpath_281366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 15), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 71)
        Path_281367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 71, 15), mpath_281366, 'Path')
        # Calling Path(args, kwargs) (line 71)
        Path_call_result_281377 = invoke(stypy.reporting.localization.Localization(__file__, 71, 15), Path_281367, *[transform_call_result_281373, codes_281375], **kwargs_281376)
        
        # Assigning a type to the variable 'stypy_return_type' (line 71)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 71, 8), 'stypy_return_type', Path_call_result_281377)
        
        # ################# End of 'transform_path_non_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_path_non_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 66)
        stypy_return_type_281378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281378)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_path_non_affine'
        return stypy_return_type_281378

    
    # Assigning a Attribute to a Attribute (line 72):

    @norecursion
    def inverted(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'inverted'
        module_type_store = module_type_store.open_function_context('inverted', 75, 4, False)
        # Assigning a type to the variable 'self' (line 76)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 76, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarTransform.inverted.__dict__.__setitem__('stypy_localization', localization)
        PolarTransform.inverted.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarTransform.inverted.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarTransform.inverted.__dict__.__setitem__('stypy_function_name', 'PolarTransform.inverted')
        PolarTransform.inverted.__dict__.__setitem__('stypy_param_names_list', [])
        PolarTransform.inverted.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarTransform.inverted.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarTransform.inverted.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarTransform.inverted.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarTransform.inverted.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarTransform.inverted.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarTransform.inverted', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'inverted', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'inverted(...)' code ##################

        
        # Call to InvertedPolarTransform(...): (line 76)
        # Processing the call arguments (line 76)
        # Getting the type of 'self' (line 76)
        self_281381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 48), 'self', False)
        # Obtaining the member '_axis' of a type (line 76)
        _axis_281382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 76, 48), self_281381, '_axis')
        # Getting the type of 'self' (line 76)
        self_281383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 60), 'self', False)
        # Obtaining the member '_use_rmin' of a type (line 76)
        _use_rmin_281384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 76, 60), self_281383, '_use_rmin')
        # Getting the type of 'self' (line 77)
        self_281385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 48), 'self', False)
        # Obtaining the member '_apply_theta_transforms' of a type (line 77)
        _apply_theta_transforms_281386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 77, 48), self_281385, '_apply_theta_transforms')
        # Processing the call keyword arguments (line 76)
        kwargs_281387 = {}
        # Getting the type of 'PolarAxes' (line 76)
        PolarAxes_281379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 15), 'PolarAxes', False)
        # Obtaining the member 'InvertedPolarTransform' of a type (line 76)
        InvertedPolarTransform_281380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 76, 15), PolarAxes_281379, 'InvertedPolarTransform')
        # Calling InvertedPolarTransform(args, kwargs) (line 76)
        InvertedPolarTransform_call_result_281388 = invoke(stypy.reporting.localization.Localization(__file__, 76, 15), InvertedPolarTransform_281380, *[_axis_281382, _use_rmin_281384, _apply_theta_transforms_281386], **kwargs_281387)
        
        # Assigning a type to the variable 'stypy_return_type' (line 76)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 76, 8), 'stypy_return_type', InvertedPolarTransform_call_result_281388)
        
        # ################# End of 'inverted(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'inverted' in the type store
        # Getting the type of 'stypy_return_type' (line 75)
        stypy_return_type_281389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281389)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'inverted'
        return stypy_return_type_281389

    
    # Assigning a Attribute to a Attribute (line 78):

# Assigning a type to the variable 'PolarTransform' (line 24)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'PolarTransform', PolarTransform)

# Assigning a Num to a Name (line 31):
int_281390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 17), 'int')
# Getting the type of 'PolarTransform'
PolarTransform_281391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'PolarTransform')
# Setting the type of the member 'input_dims' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), PolarTransform_281391, 'input_dims', int_281390)

# Assigning a Num to a Name (line 32):
int_281392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 18), 'int')
# Getting the type of 'PolarTransform'
PolarTransform_281393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'PolarTransform')
# Setting the type of the member 'output_dims' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), PolarTransform_281393, 'output_dims', int_281392)

# Assigning a Name to a Name (line 33):
# Getting the type of 'False' (line 33)
False_281394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 33, 19), 'False')
# Getting the type of 'PolarTransform'
PolarTransform_281395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'PolarTransform')
# Setting the type of the member 'is_separable' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), PolarTransform_281395, 'is_separable', False_281394)

# Assigning a Attribute to a Attribute (line 63):
# Getting the type of 'mtransforms' (line 64)
mtransforms_281396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 8), 'mtransforms')
# Obtaining the member 'Transform' of a type (line 64)
Transform_281397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 64, 8), mtransforms_281396, 'Transform')
# Obtaining the member 'transform_non_affine' of a type (line 64)
transform_non_affine_281398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 64, 8), Transform_281397, 'transform_non_affine')
# Obtaining the member '__doc__' of a type (line 64)
doc___281399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 64, 8), transform_non_affine_281398, '__doc__')
# Getting the type of 'PolarTransform'
PolarTransform_281400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'PolarTransform')
# Obtaining the member 'transform_non_affine' of a type
transform_non_affine_281401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), PolarTransform_281400, 'transform_non_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_non_affine_281401, '__doc__', doc___281399)

# Assigning a Attribute to a Attribute (line 72):
# Getting the type of 'mtransforms' (line 73)
mtransforms_281402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 8), 'mtransforms')
# Obtaining the member 'Transform' of a type (line 73)
Transform_281403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 73, 8), mtransforms_281402, 'Transform')
# Obtaining the member 'transform_path_non_affine' of a type (line 73)
transform_path_non_affine_281404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 73, 8), Transform_281403, 'transform_path_non_affine')
# Obtaining the member '__doc__' of a type (line 73)
doc___281405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 73, 8), transform_path_non_affine_281404, '__doc__')
# Getting the type of 'PolarTransform'
PolarTransform_281406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'PolarTransform')
# Obtaining the member 'transform_path_non_affine' of a type
transform_path_non_affine_281407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), PolarTransform_281406, 'transform_path_non_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_path_non_affine_281407, '__doc__', doc___281405)

# Assigning a Attribute to a Attribute (line 78):
# Getting the type of 'mtransforms' (line 78)
mtransforms_281408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 23), 'mtransforms')
# Obtaining the member 'Transform' of a type (line 78)
Transform_281409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 78, 23), mtransforms_281408, 'Transform')
# Obtaining the member 'inverted' of a type (line 78)
inverted_281410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 78, 23), Transform_281409, 'inverted')
# Obtaining the member '__doc__' of a type (line 78)
doc___281411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 78, 23), inverted_281410, '__doc__')
# Getting the type of 'PolarTransform'
PolarTransform_281412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'PolarTransform')
# Obtaining the member 'inverted' of a type
inverted_281413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), PolarTransform_281412, 'inverted')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), inverted_281413, '__doc__', doc___281411)
# Declaration of the 'PolarAffine' class
# Getting the type of 'mtransforms' (line 81)
mtransforms_281414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 18), 'mtransforms')
# Obtaining the member 'Affine2DBase' of a type (line 81)
Affine2DBase_281415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 81, 18), mtransforms_281414, 'Affine2DBase')

class PolarAffine(Affine2DBase_281415, ):
    unicode_281416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, (-1)), 'unicode', u'\n    The affine part of the polar projection.  Scales the output so\n    that maximum radius rests on the edge of the axes circle.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 86, 4, False)
        # Assigning a type to the variable 'self' (line 87)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 87, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAffine.__init__', ['scale_transform', 'limits'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['scale_transform', 'limits'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_281417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, (-1)), 'unicode', u'\n        *limits* is the view limit of the data.  The only part of\n        its bounds that is used is the y limits (for the radius limits).\n        The theta range is handled by the non-affine transform.\n        ')
        
        # Call to __init__(...): (line 92)
        # Processing the call arguments (line 92)
        # Getting the type of 'self' (line 92)
        self_281421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 42), 'self', False)
        # Processing the call keyword arguments (line 92)
        kwargs_281422 = {}
        # Getting the type of 'mtransforms' (line 92)
        mtransforms_281418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 8), 'mtransforms', False)
        # Obtaining the member 'Affine2DBase' of a type (line 92)
        Affine2DBase_281419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 8), mtransforms_281418, 'Affine2DBase')
        # Obtaining the member '__init__' of a type (line 92)
        init___281420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 8), Affine2DBase_281419, '__init__')
        # Calling __init__(args, kwargs) (line 92)
        init___call_result_281423 = invoke(stypy.reporting.localization.Localization(__file__, 92, 8), init___281420, *[self_281421], **kwargs_281422)
        
        
        # Assigning a Name to a Attribute (line 93):
        
        # Assigning a Name to a Attribute (line 93):
        # Getting the type of 'scale_transform' (line 93)
        scale_transform_281424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 32), 'scale_transform')
        # Getting the type of 'self' (line 93)
        self_281425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 8), 'self')
        # Setting the type of the member '_scale_transform' of a type (line 93)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 93, 8), self_281425, '_scale_transform', scale_transform_281424)
        
        # Assigning a Name to a Attribute (line 94):
        
        # Assigning a Name to a Attribute (line 94):
        # Getting the type of 'limits' (line 94)
        limits_281426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 23), 'limits')
        # Getting the type of 'self' (line 94)
        self_281427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 8), 'self')
        # Setting the type of the member '_limits' of a type (line 94)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 94, 8), self_281427, '_limits', limits_281426)
        
        # Call to set_children(...): (line 95)
        # Processing the call arguments (line 95)
        # Getting the type of 'scale_transform' (line 95)
        scale_transform_281430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 26), 'scale_transform', False)
        # Getting the type of 'limits' (line 95)
        limits_281431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 43), 'limits', False)
        # Processing the call keyword arguments (line 95)
        kwargs_281432 = {}
        # Getting the type of 'self' (line 95)
        self_281428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 95)
        set_children_281429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 8), self_281428, 'set_children')
        # Calling set_children(args, kwargs) (line 95)
        set_children_call_result_281433 = invoke(stypy.reporting.localization.Localization(__file__, 95, 8), set_children_281429, *[scale_transform_281430, limits_281431], **kwargs_281432)
        
        
        # Assigning a Name to a Attribute (line 96):
        
        # Assigning a Name to a Attribute (line 96):
        # Getting the type of 'None' (line 96)
        None_281434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 20), 'None')
        # Getting the type of 'self' (line 96)
        self_281435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'self')
        # Setting the type of the member '_mtx' of a type (line 96)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 8), self_281435, '_mtx', None_281434)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_matrix'
        module_type_store = module_type_store.open_function_context('get_matrix', 98, 4, False)
        # Assigning a type to the variable 'self' (line 99)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 99, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAffine.get_matrix.__dict__.__setitem__('stypy_localization', localization)
        PolarAffine.get_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAffine.get_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAffine.get_matrix.__dict__.__setitem__('stypy_function_name', 'PolarAffine.get_matrix')
        PolarAffine.get_matrix.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAffine.get_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAffine.get_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAffine.get_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAffine.get_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAffine.get_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAffine.get_matrix.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAffine.get_matrix', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_matrix', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_matrix(...)' code ##################

        
        # Getting the type of 'self' (line 99)
        self_281436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 11), 'self')
        # Obtaining the member '_invalid' of a type (line 99)
        _invalid_281437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 99, 11), self_281436, '_invalid')
        # Testing the type of an if condition (line 99)
        if_condition_281438 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 99, 8), _invalid_281437)
        # Assigning a type to the variable 'if_condition_281438' (line 99)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 99, 8), 'if_condition_281438', if_condition_281438)
        # SSA begins for if statement (line 99)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 100):
        
        # Assigning a Call to a Name (line 100):
        
        # Call to transformed(...): (line 100)
        # Processing the call arguments (line 100)
        # Getting the type of 'self' (line 100)
        self_281442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 53), 'self', False)
        # Obtaining the member '_scale_transform' of a type (line 100)
        _scale_transform_281443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 100, 53), self_281442, '_scale_transform')
        # Processing the call keyword arguments (line 100)
        kwargs_281444 = {}
        # Getting the type of 'self' (line 100)
        self_281439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 28), 'self', False)
        # Obtaining the member '_limits' of a type (line 100)
        _limits_281440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 100, 28), self_281439, '_limits')
        # Obtaining the member 'transformed' of a type (line 100)
        transformed_281441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 100, 28), _limits_281440, 'transformed')
        # Calling transformed(args, kwargs) (line 100)
        transformed_call_result_281445 = invoke(stypy.reporting.localization.Localization(__file__, 100, 28), transformed_281441, *[_scale_transform_281443], **kwargs_281444)
        
        # Assigning a type to the variable 'limits_scaled' (line 100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 100, 12), 'limits_scaled', transformed_call_result_281445)
        
        # Assigning a BinOp to a Name (line 101):
        
        # Assigning a BinOp to a Name (line 101):
        # Getting the type of 'limits_scaled' (line 101)
        limits_scaled_281446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 21), 'limits_scaled')
        # Obtaining the member 'ymax' of a type (line 101)
        ymax_281447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 101, 21), limits_scaled_281446, 'ymax')
        # Getting the type of 'limits_scaled' (line 101)
        limits_scaled_281448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 42), 'limits_scaled')
        # Obtaining the member 'ymin' of a type (line 101)
        ymin_281449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 101, 42), limits_scaled_281448, 'ymin')
        # Applying the binary operator '-' (line 101)
        result_sub_281450 = python_operator(stypy.reporting.localization.Localization(__file__, 101, 21), '-', ymax_281447, ymin_281449)
        
        # Assigning a type to the variable 'yscale' (line 101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 101, 12), 'yscale', result_sub_281450)
        
        # Assigning a Call to a Name (line 102):
        
        # Assigning a Call to a Name (line 102):
        
        # Call to translate(...): (line 102)
        # Processing the call arguments (line 102)
        float_281462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 27), 'float')
        float_281463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 32), 'float')
        # Processing the call keyword arguments (line 102)
        kwargs_281464 = {}
        
        # Call to scale(...): (line 102)
        # Processing the call arguments (line 102)
        float_281456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 23), 'float')
        # Getting the type of 'yscale' (line 103)
        yscale_281457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 29), 'yscale', False)
        # Applying the binary operator 'div' (line 103)
        result_div_281458 = python_operator(stypy.reporting.localization.Localization(__file__, 103, 23), 'div', float_281456, yscale_281457)
        
        # Processing the call keyword arguments (line 102)
        kwargs_281459 = {}
        
        # Call to Affine2D(...): (line 102)
        # Processing the call keyword arguments (line 102)
        kwargs_281453 = {}
        # Getting the type of 'mtransforms' (line 102)
        mtransforms_281451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 21), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 102)
        Affine2D_281452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 21), mtransforms_281451, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 102)
        Affine2D_call_result_281454 = invoke(stypy.reporting.localization.Localization(__file__, 102, 21), Affine2D_281452, *[], **kwargs_281453)
        
        # Obtaining the member 'scale' of a type (line 102)
        scale_281455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 21), Affine2D_call_result_281454, 'scale')
        # Calling scale(args, kwargs) (line 102)
        scale_call_result_281460 = invoke(stypy.reporting.localization.Localization(__file__, 102, 21), scale_281455, *[result_div_281458], **kwargs_281459)
        
        # Obtaining the member 'translate' of a type (line 102)
        translate_281461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 21), scale_call_result_281460, 'translate')
        # Calling translate(args, kwargs) (line 102)
        translate_call_result_281465 = invoke(stypy.reporting.localization.Localization(__file__, 102, 21), translate_281461, *[float_281462, float_281463], **kwargs_281464)
        
        # Assigning a type to the variable 'affine' (line 102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 102, 12), 'affine', translate_call_result_281465)
        
        # Assigning a Call to a Attribute (line 105):
        
        # Assigning a Call to a Attribute (line 105):
        
        # Call to get_matrix(...): (line 105)
        # Processing the call keyword arguments (line 105)
        kwargs_281468 = {}
        # Getting the type of 'affine' (line 105)
        affine_281466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 24), 'affine', False)
        # Obtaining the member 'get_matrix' of a type (line 105)
        get_matrix_281467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 24), affine_281466, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 105)
        get_matrix_call_result_281469 = invoke(stypy.reporting.localization.Localization(__file__, 105, 24), get_matrix_281467, *[], **kwargs_281468)
        
        # Getting the type of 'self' (line 105)
        self_281470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 12), 'self')
        # Setting the type of the member '_mtx' of a type (line 105)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 12), self_281470, '_mtx', get_matrix_call_result_281469)
        
        # Assigning a Name to a Attribute (line 106):
        
        # Assigning a Name to a Attribute (line 106):
        # Getting the type of 'None' (line 106)
        None_281471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 29), 'None')
        # Getting the type of 'self' (line 106)
        self_281472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 12), 'self')
        # Setting the type of the member '_inverted' of a type (line 106)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 106, 12), self_281472, '_inverted', None_281471)
        
        # Assigning a Num to a Attribute (line 107):
        
        # Assigning a Num to a Attribute (line 107):
        int_281473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 28), 'int')
        # Getting the type of 'self' (line 107)
        self_281474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 12), 'self')
        # Setting the type of the member '_invalid' of a type (line 107)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 107, 12), self_281474, '_invalid', int_281473)
        # SSA join for if statement (line 99)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 108)
        self_281475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 15), 'self')
        # Obtaining the member '_mtx' of a type (line 108)
        _mtx_281476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 108, 15), self_281475, '_mtx')
        # Assigning a type to the variable 'stypy_return_type' (line 108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 108, 8), 'stypy_return_type', _mtx_281476)
        
        # ################# End of 'get_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 98)
        stypy_return_type_281477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281477)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_matrix'
        return stypy_return_type_281477

    
    # Assigning a Attribute to a Attribute (line 109):

# Assigning a type to the variable 'PolarAffine' (line 81)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 81, 0), 'PolarAffine', PolarAffine)

# Assigning a Attribute to a Attribute (line 109):
# Getting the type of 'mtransforms' (line 109)
mtransforms_281478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 25), 'mtransforms')
# Obtaining the member 'Affine2DBase' of a type (line 109)
Affine2DBase_281479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 25), mtransforms_281478, 'Affine2DBase')
# Obtaining the member 'get_matrix' of a type (line 109)
get_matrix_281480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 25), Affine2DBase_281479, 'get_matrix')
# Obtaining the member '__doc__' of a type (line 109)
doc___281481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 25), get_matrix_281480, '__doc__')
# Getting the type of 'PolarAffine'
PolarAffine_281482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'PolarAffine')
# Obtaining the member 'get_matrix' of a type
get_matrix_281483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), PolarAffine_281482, 'get_matrix')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_matrix_281483, '__doc__', doc___281481)
# Declaration of the 'InvertedPolarTransform' class
# Getting the type of 'mtransforms' (line 112)
mtransforms_281484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 29), 'mtransforms')
# Obtaining the member 'Transform' of a type (line 112)
Transform_281485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 112, 29), mtransforms_281484, 'Transform')

class InvertedPolarTransform(Transform_281485, ):
    unicode_281486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, (-1)), 'unicode', u'\n    The inverse of the polar transform, mapping Cartesian\n    coordinate space *x* and *y* back to *theta* and *r*.\n    ')
    
    # Assigning a Num to a Name (line 117):
    
    # Assigning a Num to a Name (line 118):
    
    # Assigning a Name to a Name (line 119):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 121)
        None_281487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 28), 'None')
        # Getting the type of 'True' (line 121)
        True_281488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 43), 'True')
        # Getting the type of 'True' (line 122)
        True_281489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 41), 'True')
        defaults = [None_281487, True_281488, True_281489]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 121, 4, False)
        # Assigning a type to the variable 'self' (line 122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'InvertedPolarTransform.__init__', ['axis', 'use_rmin', '_apply_theta_transforms'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['axis', 'use_rmin', '_apply_theta_transforms'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 123)
        # Processing the call arguments (line 123)
        # Getting the type of 'self' (line 123)
        self_281493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 39), 'self', False)
        # Processing the call keyword arguments (line 123)
        kwargs_281494 = {}
        # Getting the type of 'mtransforms' (line 123)
        mtransforms_281490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 8), 'mtransforms', False)
        # Obtaining the member 'Transform' of a type (line 123)
        Transform_281491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 8), mtransforms_281490, 'Transform')
        # Obtaining the member '__init__' of a type (line 123)
        init___281492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 8), Transform_281491, '__init__')
        # Calling __init__(args, kwargs) (line 123)
        init___call_result_281495 = invoke(stypy.reporting.localization.Localization(__file__, 123, 8), init___281492, *[self_281493], **kwargs_281494)
        
        
        # Assigning a Name to a Attribute (line 124):
        
        # Assigning a Name to a Attribute (line 124):
        # Getting the type of 'axis' (line 124)
        axis_281496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 21), 'axis')
        # Getting the type of 'self' (line 124)
        self_281497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 8), 'self')
        # Setting the type of the member '_axis' of a type (line 124)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 124, 8), self_281497, '_axis', axis_281496)
        
        # Assigning a Name to a Attribute (line 125):
        
        # Assigning a Name to a Attribute (line 125):
        # Getting the type of 'use_rmin' (line 125)
        use_rmin_281498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 25), 'use_rmin')
        # Getting the type of 'self' (line 125)
        self_281499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 8), 'self')
        # Setting the type of the member '_use_rmin' of a type (line 125)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 125, 8), self_281499, '_use_rmin', use_rmin_281498)
        
        # Assigning a Name to a Attribute (line 126):
        
        # Assigning a Name to a Attribute (line 126):
        # Getting the type of '_apply_theta_transforms' (line 126)
        _apply_theta_transforms_281500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 39), '_apply_theta_transforms')
        # Getting the type of 'self' (line 126)
        self_281501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 8), 'self')
        # Setting the type of the member '_apply_theta_transforms' of a type (line 126)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 8), self_281501, '_apply_theta_transforms', _apply_theta_transforms_281500)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def transform_non_affine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transform_non_affine'
        module_type_store = module_type_store.open_function_context('transform_non_affine', 128, 4, False)
        # Assigning a type to the variable 'self' (line 129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        InvertedPolarTransform.transform_non_affine.__dict__.__setitem__('stypy_localization', localization)
        InvertedPolarTransform.transform_non_affine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        InvertedPolarTransform.transform_non_affine.__dict__.__setitem__('stypy_type_store', module_type_store)
        InvertedPolarTransform.transform_non_affine.__dict__.__setitem__('stypy_function_name', 'InvertedPolarTransform.transform_non_affine')
        InvertedPolarTransform.transform_non_affine.__dict__.__setitem__('stypy_param_names_list', ['xy'])
        InvertedPolarTransform.transform_non_affine.__dict__.__setitem__('stypy_varargs_param_name', None)
        InvertedPolarTransform.transform_non_affine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        InvertedPolarTransform.transform_non_affine.__dict__.__setitem__('stypy_call_defaults', defaults)
        InvertedPolarTransform.transform_non_affine.__dict__.__setitem__('stypy_call_varargs', varargs)
        InvertedPolarTransform.transform_non_affine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        InvertedPolarTransform.transform_non_affine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'InvertedPolarTransform.transform_non_affine', ['xy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transform_non_affine', localization, ['xy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transform_non_affine(...)' code ##################

        
        # Assigning a Subscript to a Name (line 129):
        
        # Assigning a Subscript to a Name (line 129):
        
        # Obtaining the type of the subscript
        slice_281502 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 129, 12), None, None, None)
        int_281503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 18), 'int')
        int_281504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 20), 'int')
        slice_281505 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 129, 12), int_281503, int_281504, None)
        # Getting the type of 'xy' (line 129)
        xy_281506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 12), 'xy')
        # Obtaining the member '__getitem__' of a type (line 129)
        getitem___281507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 129, 12), xy_281506, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 129)
        subscript_call_result_281508 = invoke(stypy.reporting.localization.Localization(__file__, 129, 12), getitem___281507, (slice_281502, slice_281505))
        
        # Assigning a type to the variable 'x' (line 129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 8), 'x', subscript_call_result_281508)
        
        # Assigning a Subscript to a Name (line 130):
        
        # Assigning a Subscript to a Name (line 130):
        
        # Obtaining the type of the subscript
        slice_281509 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 130, 12), None, None, None)
        int_281510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, 18), 'int')
        slice_281511 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 130, 12), int_281510, None, None)
        # Getting the type of 'xy' (line 130)
        xy_281512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 12), 'xy')
        # Obtaining the member '__getitem__' of a type (line 130)
        getitem___281513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 12), xy_281512, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 130)
        subscript_call_result_281514 = invoke(stypy.reporting.localization.Localization(__file__, 130, 12), getitem___281513, (slice_281509, slice_281511))
        
        # Assigning a type to the variable 'y' (line 130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 8), 'y', subscript_call_result_281514)
        
        # Assigning a Call to a Name (line 131):
        
        # Assigning a Call to a Name (line 131):
        
        # Call to sqrt(...): (line 131)
        # Processing the call arguments (line 131)
        # Getting the type of 'x' (line 131)
        x_281517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 20), 'x', False)
        # Getting the type of 'x' (line 131)
        x_281518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 22), 'x', False)
        # Applying the binary operator '*' (line 131)
        result_mul_281519 = python_operator(stypy.reporting.localization.Localization(__file__, 131, 20), '*', x_281517, x_281518)
        
        # Getting the type of 'y' (line 131)
        y_281520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 26), 'y', False)
        # Getting the type of 'y' (line 131)
        y_281521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 28), 'y', False)
        # Applying the binary operator '*' (line 131)
        result_mul_281522 = python_operator(stypy.reporting.localization.Localization(__file__, 131, 26), '*', y_281520, y_281521)
        
        # Applying the binary operator '+' (line 131)
        result_add_281523 = python_operator(stypy.reporting.localization.Localization(__file__, 131, 20), '+', result_mul_281519, result_mul_281522)
        
        # Processing the call keyword arguments (line 131)
        kwargs_281524 = {}
        # Getting the type of 'np' (line 131)
        np_281515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 12), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 131)
        sqrt_281516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 12), np_281515, 'sqrt')
        # Calling sqrt(args, kwargs) (line 131)
        sqrt_call_result_281525 = invoke(stypy.reporting.localization.Localization(__file__, 131, 12), sqrt_281516, *[result_add_281523], **kwargs_281524)
        
        # Assigning a type to the variable 'r' (line 131)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 131, 8), 'r', sqrt_call_result_281525)
        
        # Call to errstate(...): (line 132)
        # Processing the call keyword arguments (line 132)
        unicode_281528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 132, 33), 'unicode', u'ignore')
        keyword_281529 = unicode_281528
        kwargs_281530 = {'invalid': keyword_281529}
        # Getting the type of 'np' (line 132)
        np_281526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 13), 'np', False)
        # Obtaining the member 'errstate' of a type (line 132)
        errstate_281527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 13), np_281526, 'errstate')
        # Calling errstate(args, kwargs) (line 132)
        errstate_call_result_281531 = invoke(stypy.reporting.localization.Localization(__file__, 132, 13), errstate_281527, *[], **kwargs_281530)
        
        with_281532 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 132, 13), errstate_call_result_281531, 'with parameter', '__enter__', '__exit__')

        if with_281532:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 132)
            enter___281533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 13), errstate_call_result_281531, '__enter__')
            with_enter_281534 = invoke(stypy.reporting.localization.Localization(__file__, 132, 13), enter___281533)
            
            # Assigning a Call to a Name (line 138):
            
            # Assigning a Call to a Name (line 138):
            
            # Call to arccos(...): (line 138)
            # Processing the call arguments (line 138)
            # Getting the type of 'x' (line 138)
            x_281537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 30), 'x', False)
            # Getting the type of 'r' (line 138)
            r_281538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 34), 'r', False)
            # Applying the binary operator 'div' (line 138)
            result_div_281539 = python_operator(stypy.reporting.localization.Localization(__file__, 138, 30), 'div', x_281537, r_281538)
            
            # Processing the call keyword arguments (line 138)
            kwargs_281540 = {}
            # Getting the type of 'np' (line 138)
            np_281535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 20), 'np', False)
            # Obtaining the member 'arccos' of a type (line 138)
            arccos_281536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 20), np_281535, 'arccos')
            # Calling arccos(args, kwargs) (line 138)
            arccos_call_result_281541 = invoke(stypy.reporting.localization.Localization(__file__, 138, 20), arccos_281536, *[result_div_281539], **kwargs_281540)
            
            # Assigning a type to the variable 'theta' (line 138)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 138, 12), 'theta', arccos_call_result_281541)
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 132)
            exit___281542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 13), errstate_call_result_281531, '__exit__')
            with_exit_281543 = invoke(stypy.reporting.localization.Localization(__file__, 132, 13), exit___281542, None, None, None)

        
        # Assigning a Call to a Name (line 139):
        
        # Assigning a Call to a Name (line 139):
        
        # Call to where(...): (line 139)
        # Processing the call arguments (line 139)
        
        # Getting the type of 'y' (line 139)
        y_281546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 25), 'y', False)
        int_281547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, 29), 'int')
        # Applying the binary operator '<' (line 139)
        result_lt_281548 = python_operator(stypy.reporting.localization.Localization(__file__, 139, 25), '<', y_281546, int_281547)
        
        int_281549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, 32), 'int')
        # Getting the type of 'np' (line 139)
        np_281550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 36), 'np', False)
        # Obtaining the member 'pi' of a type (line 139)
        pi_281551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 139, 36), np_281550, 'pi')
        # Applying the binary operator '*' (line 139)
        result_mul_281552 = python_operator(stypy.reporting.localization.Localization(__file__, 139, 32), '*', int_281549, pi_281551)
        
        # Getting the type of 'theta' (line 139)
        theta_281553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 44), 'theta', False)
        # Applying the binary operator '-' (line 139)
        result_sub_281554 = python_operator(stypy.reporting.localization.Localization(__file__, 139, 32), '-', result_mul_281552, theta_281553)
        
        # Getting the type of 'theta' (line 139)
        theta_281555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 51), 'theta', False)
        # Processing the call keyword arguments (line 139)
        kwargs_281556 = {}
        # Getting the type of 'np' (line 139)
        np_281544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 16), 'np', False)
        # Obtaining the member 'where' of a type (line 139)
        where_281545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 139, 16), np_281544, 'where')
        # Calling where(args, kwargs) (line 139)
        where_call_result_281557 = invoke(stypy.reporting.localization.Localization(__file__, 139, 16), where_281545, *[result_lt_281548, result_sub_281554, theta_281555], **kwargs_281556)
        
        # Assigning a type to the variable 'theta' (line 139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 8), 'theta', where_call_result_281557)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 143)
        self_281558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 11), 'self')
        # Obtaining the member '_apply_theta_transforms' of a type (line 143)
        _apply_theta_transforms_281559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 143, 11), self_281558, '_apply_theta_transforms')
        
        # Getting the type of 'self' (line 143)
        self_281560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 44), 'self')
        # Obtaining the member '_axis' of a type (line 143)
        _axis_281561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 143, 44), self_281560, '_axis')
        # Getting the type of 'None' (line 143)
        None_281562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 62), 'None')
        # Applying the binary operator 'isnot' (line 143)
        result_is_not_281563 = python_operator(stypy.reporting.localization.Localization(__file__, 143, 44), 'isnot', _axis_281561, None_281562)
        
        # Applying the binary operator 'and' (line 143)
        result_and_keyword_281564 = python_operator(stypy.reporting.localization.Localization(__file__, 143, 11), 'and', _apply_theta_transforms_281559, result_is_not_281563)
        
        # Testing the type of an if condition (line 143)
        if_condition_281565 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 143, 8), result_and_keyword_281564)
        # Assigning a type to the variable 'if_condition_281565' (line 143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 8), 'if_condition_281565', if_condition_281565)
        # SSA begins for if statement (line 143)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'theta' (line 144)
        theta_281566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 12), 'theta')
        
        # Call to get_theta_offset(...): (line 144)
        # Processing the call keyword arguments (line 144)
        kwargs_281570 = {}
        # Getting the type of 'self' (line 144)
        self_281567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 21), 'self', False)
        # Obtaining the member '_axis' of a type (line 144)
        _axis_281568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 144, 21), self_281567, '_axis')
        # Obtaining the member 'get_theta_offset' of a type (line 144)
        get_theta_offset_281569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 144, 21), _axis_281568, 'get_theta_offset')
        # Calling get_theta_offset(args, kwargs) (line 144)
        get_theta_offset_call_result_281571 = invoke(stypy.reporting.localization.Localization(__file__, 144, 21), get_theta_offset_281569, *[], **kwargs_281570)
        
        # Applying the binary operator '-=' (line 144)
        result_isub_281572 = python_operator(stypy.reporting.localization.Localization(__file__, 144, 12), '-=', theta_281566, get_theta_offset_call_result_281571)
        # Assigning a type to the variable 'theta' (line 144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 12), 'theta', result_isub_281572)
        
        
        # Getting the type of 'theta' (line 145)
        theta_281573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 12), 'theta')
        
        # Call to get_theta_direction(...): (line 145)
        # Processing the call keyword arguments (line 145)
        kwargs_281577 = {}
        # Getting the type of 'self' (line 145)
        self_281574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 21), 'self', False)
        # Obtaining the member '_axis' of a type (line 145)
        _axis_281575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 21), self_281574, '_axis')
        # Obtaining the member 'get_theta_direction' of a type (line 145)
        get_theta_direction_281576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 21), _axis_281575, 'get_theta_direction')
        # Calling get_theta_direction(args, kwargs) (line 145)
        get_theta_direction_call_result_281578 = invoke(stypy.reporting.localization.Localization(__file__, 145, 21), get_theta_direction_281576, *[], **kwargs_281577)
        
        # Applying the binary operator '*=' (line 145)
        result_imul_281579 = python_operator(stypy.reporting.localization.Localization(__file__, 145, 12), '*=', theta_281573, get_theta_direction_call_result_281578)
        # Assigning a type to the variable 'theta' (line 145)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 145, 12), 'theta', result_imul_281579)
        
        
        # Getting the type of 'theta' (line 146)
        theta_281580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 12), 'theta')
        int_281581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 21), 'int')
        # Getting the type of 'np' (line 146)
        np_281582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 25), 'np')
        # Obtaining the member 'pi' of a type (line 146)
        pi_281583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 25), np_281582, 'pi')
        # Applying the binary operator '*' (line 146)
        result_mul_281584 = python_operator(stypy.reporting.localization.Localization(__file__, 146, 21), '*', int_281581, pi_281583)
        
        # Applying the binary operator '%=' (line 146)
        result_imod_281585 = python_operator(stypy.reporting.localization.Localization(__file__, 146, 12), '%=', theta_281580, result_mul_281584)
        # Assigning a type to the variable 'theta' (line 146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 146, 12), 'theta', result_imod_281585)
        
        # SSA join for if statement (line 143)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 148)
        self_281586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 11), 'self')
        # Obtaining the member '_use_rmin' of a type (line 148)
        _use_rmin_281587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 148, 11), self_281586, '_use_rmin')
        
        # Getting the type of 'self' (line 148)
        self_281588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 30), 'self')
        # Obtaining the member '_axis' of a type (line 148)
        _axis_281589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 148, 30), self_281588, '_axis')
        # Getting the type of 'None' (line 148)
        None_281590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 48), 'None')
        # Applying the binary operator 'isnot' (line 148)
        result_is_not_281591 = python_operator(stypy.reporting.localization.Localization(__file__, 148, 30), 'isnot', _axis_281589, None_281590)
        
        # Applying the binary operator 'and' (line 148)
        result_and_keyword_281592 = python_operator(stypy.reporting.localization.Localization(__file__, 148, 11), 'and', _use_rmin_281587, result_is_not_281591)
        
        # Testing the type of an if condition (line 148)
        if_condition_281593 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 148, 8), result_and_keyword_281592)
        # Assigning a type to the variable 'if_condition_281593' (line 148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 8), 'if_condition_281593', if_condition_281593)
        # SSA begins for if statement (line 148)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'r' (line 149)
        r_281594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 12), 'r')
        
        # Call to get_rorigin(...): (line 149)
        # Processing the call keyword arguments (line 149)
        kwargs_281598 = {}
        # Getting the type of 'self' (line 149)
        self_281595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 17), 'self', False)
        # Obtaining the member '_axis' of a type (line 149)
        _axis_281596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 149, 17), self_281595, '_axis')
        # Obtaining the member 'get_rorigin' of a type (line 149)
        get_rorigin_281597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 149, 17), _axis_281596, 'get_rorigin')
        # Calling get_rorigin(args, kwargs) (line 149)
        get_rorigin_call_result_281599 = invoke(stypy.reporting.localization.Localization(__file__, 149, 17), get_rorigin_281597, *[], **kwargs_281598)
        
        # Applying the binary operator '+=' (line 149)
        result_iadd_281600 = python_operator(stypy.reporting.localization.Localization(__file__, 149, 12), '+=', r_281594, get_rorigin_call_result_281599)
        # Assigning a type to the variable 'r' (line 149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 149, 12), 'r', result_iadd_281600)
        
        # SSA join for if statement (line 148)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to concatenate(...): (line 151)
        # Processing the call arguments (line 151)
        
        # Obtaining an instance of the builtin type 'tuple' (line 151)
        tuple_281603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 151)
        # Adding element type (line 151)
        # Getting the type of 'theta' (line 151)
        theta_281604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 31), 'theta', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 151, 31), tuple_281603, theta_281604)
        # Adding element type (line 151)
        # Getting the type of 'r' (line 151)
        r_281605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 38), 'r', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 151, 31), tuple_281603, r_281605)
        
        int_281606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 42), 'int')
        # Processing the call keyword arguments (line 151)
        kwargs_281607 = {}
        # Getting the type of 'np' (line 151)
        np_281601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 15), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 151)
        concatenate_281602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 15), np_281601, 'concatenate')
        # Calling concatenate(args, kwargs) (line 151)
        concatenate_call_result_281608 = invoke(stypy.reporting.localization.Localization(__file__, 151, 15), concatenate_281602, *[tuple_281603, int_281606], **kwargs_281607)
        
        # Assigning a type to the variable 'stypy_return_type' (line 151)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 151, 8), 'stypy_return_type', concatenate_call_result_281608)
        
        # ################# End of 'transform_non_affine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transform_non_affine' in the type store
        # Getting the type of 'stypy_return_type' (line 128)
        stypy_return_type_281609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281609)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transform_non_affine'
        return stypy_return_type_281609

    
    # Assigning a Attribute to a Attribute (line 152):

    @norecursion
    def inverted(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'inverted'
        module_type_store = module_type_store.open_function_context('inverted', 155, 4, False)
        # Assigning a type to the variable 'self' (line 156)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        InvertedPolarTransform.inverted.__dict__.__setitem__('stypy_localization', localization)
        InvertedPolarTransform.inverted.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        InvertedPolarTransform.inverted.__dict__.__setitem__('stypy_type_store', module_type_store)
        InvertedPolarTransform.inverted.__dict__.__setitem__('stypy_function_name', 'InvertedPolarTransform.inverted')
        InvertedPolarTransform.inverted.__dict__.__setitem__('stypy_param_names_list', [])
        InvertedPolarTransform.inverted.__dict__.__setitem__('stypy_varargs_param_name', None)
        InvertedPolarTransform.inverted.__dict__.__setitem__('stypy_kwargs_param_name', None)
        InvertedPolarTransform.inverted.__dict__.__setitem__('stypy_call_defaults', defaults)
        InvertedPolarTransform.inverted.__dict__.__setitem__('stypy_call_varargs', varargs)
        InvertedPolarTransform.inverted.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        InvertedPolarTransform.inverted.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'InvertedPolarTransform.inverted', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'inverted', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'inverted(...)' code ##################

        
        # Call to PolarTransform(...): (line 156)
        # Processing the call arguments (line 156)
        # Getting the type of 'self' (line 156)
        self_281612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 40), 'self', False)
        # Obtaining the member '_axis' of a type (line 156)
        _axis_281613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 40), self_281612, '_axis')
        # Getting the type of 'self' (line 156)
        self_281614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 52), 'self', False)
        # Obtaining the member '_use_rmin' of a type (line 156)
        _use_rmin_281615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 52), self_281614, '_use_rmin')
        # Getting the type of 'self' (line 157)
        self_281616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 40), 'self', False)
        # Obtaining the member '_apply_theta_transforms' of a type (line 157)
        _apply_theta_transforms_281617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 40), self_281616, '_apply_theta_transforms')
        # Processing the call keyword arguments (line 156)
        kwargs_281618 = {}
        # Getting the type of 'PolarAxes' (line 156)
        PolarAxes_281610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 15), 'PolarAxes', False)
        # Obtaining the member 'PolarTransform' of a type (line 156)
        PolarTransform_281611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 15), PolarAxes_281610, 'PolarTransform')
        # Calling PolarTransform(args, kwargs) (line 156)
        PolarTransform_call_result_281619 = invoke(stypy.reporting.localization.Localization(__file__, 156, 15), PolarTransform_281611, *[_axis_281613, _use_rmin_281615, _apply_theta_transforms_281617], **kwargs_281618)
        
        # Assigning a type to the variable 'stypy_return_type' (line 156)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 8), 'stypy_return_type', PolarTransform_call_result_281619)
        
        # ################# End of 'inverted(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'inverted' in the type store
        # Getting the type of 'stypy_return_type' (line 155)
        stypy_return_type_281620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281620)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'inverted'
        return stypy_return_type_281620

    
    # Assigning a Attribute to a Attribute (line 158):

# Assigning a type to the variable 'InvertedPolarTransform' (line 112)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 0), 'InvertedPolarTransform', InvertedPolarTransform)

# Assigning a Num to a Name (line 117):
int_281621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 17), 'int')
# Getting the type of 'InvertedPolarTransform'
InvertedPolarTransform_281622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'InvertedPolarTransform')
# Setting the type of the member 'input_dims' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), InvertedPolarTransform_281622, 'input_dims', int_281621)

# Assigning a Num to a Name (line 118):
int_281623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 118, 18), 'int')
# Getting the type of 'InvertedPolarTransform'
InvertedPolarTransform_281624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'InvertedPolarTransform')
# Setting the type of the member 'output_dims' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), InvertedPolarTransform_281624, 'output_dims', int_281623)

# Assigning a Name to a Name (line 119):
# Getting the type of 'False' (line 119)
False_281625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 19), 'False')
# Getting the type of 'InvertedPolarTransform'
InvertedPolarTransform_281626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'InvertedPolarTransform')
# Setting the type of the member 'is_separable' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), InvertedPolarTransform_281626, 'is_separable', False_281625)

# Assigning a Attribute to a Attribute (line 152):
# Getting the type of 'mtransforms' (line 153)
mtransforms_281627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 8), 'mtransforms')
# Obtaining the member 'Transform' of a type (line 153)
Transform_281628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 8), mtransforms_281627, 'Transform')
# Obtaining the member 'transform_non_affine' of a type (line 153)
transform_non_affine_281629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 8), Transform_281628, 'transform_non_affine')
# Obtaining the member '__doc__' of a type (line 153)
doc___281630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 8), transform_non_affine_281629, '__doc__')
# Getting the type of 'InvertedPolarTransform'
InvertedPolarTransform_281631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'InvertedPolarTransform')
# Obtaining the member 'transform_non_affine' of a type
transform_non_affine_281632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), InvertedPolarTransform_281631, 'transform_non_affine')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), transform_non_affine_281632, '__doc__', doc___281630)

# Assigning a Attribute to a Attribute (line 158):
# Getting the type of 'mtransforms' (line 158)
mtransforms_281633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 23), 'mtransforms')
# Obtaining the member 'Transform' of a type (line 158)
Transform_281634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 23), mtransforms_281633, 'Transform')
# Obtaining the member 'inverted' of a type (line 158)
inverted_281635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 23), Transform_281634, 'inverted')
# Obtaining the member '__doc__' of a type (line 158)
doc___281636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 23), inverted_281635, '__doc__')
# Getting the type of 'InvertedPolarTransform'
InvertedPolarTransform_281637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'InvertedPolarTransform')
# Obtaining the member 'inverted' of a type
inverted_281638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), InvertedPolarTransform_281637, 'inverted')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), inverted_281638, '__doc__', doc___281636)
# Declaration of the 'ThetaFormatter' class
# Getting the type of 'mticker' (line 161)
mticker_281639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 21), 'mticker')
# Obtaining the member 'Formatter' of a type (line 161)
Formatter_281640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 21), mticker_281639, 'Formatter')

class ThetaFormatter(Formatter_281640, ):
    unicode_281641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, (-1)), 'unicode', u'\n    Used to format the *theta* tick labels.  Converts the native\n    unit of radians into degrees and adds a degree symbol.\n    ')

    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 166)
        None_281642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 30), 'None')
        defaults = [None_281642]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 166, 4, False)
        # Assigning a type to the variable 'self' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaFormatter.__call__.__dict__.__setitem__('stypy_localization', localization)
        ThetaFormatter.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaFormatter.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaFormatter.__call__.__dict__.__setitem__('stypy_function_name', 'ThetaFormatter.__call__')
        ThetaFormatter.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'pos'])
        ThetaFormatter.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaFormatter.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaFormatter.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaFormatter.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaFormatter.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaFormatter.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaFormatter.__call__', ['x', 'pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Assigning a Call to a Tuple (line 167):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 167)
        # Processing the call keyword arguments (line 167)
        kwargs_281646 = {}
        # Getting the type of 'self' (line 167)
        self_281643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 21), 'self', False)
        # Obtaining the member 'axis' of a type (line 167)
        axis_281644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 21), self_281643, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 167)
        get_view_interval_281645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 21), axis_281644, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 167)
        get_view_interval_call_result_281647 = invoke(stypy.reporting.localization.Localization(__file__, 167, 21), get_view_interval_281645, *[], **kwargs_281646)
        
        # Assigning a type to the variable 'call_assignment_281114' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 8), 'call_assignment_281114', get_view_interval_call_result_281647)
        
        # Assigning a Call to a Name (line 167):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_281650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 167, 8), 'int')
        # Processing the call keyword arguments
        kwargs_281651 = {}
        # Getting the type of 'call_assignment_281114' (line 167)
        call_assignment_281114_281648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 8), 'call_assignment_281114', False)
        # Obtaining the member '__getitem__' of a type (line 167)
        getitem___281649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 8), call_assignment_281114_281648, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_281652 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___281649, *[int_281650], **kwargs_281651)
        
        # Assigning a type to the variable 'call_assignment_281115' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 8), 'call_assignment_281115', getitem___call_result_281652)
        
        # Assigning a Name to a Name (line 167):
        # Getting the type of 'call_assignment_281115' (line 167)
        call_assignment_281115_281653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 8), 'call_assignment_281115')
        # Assigning a type to the variable 'vmin' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 8), 'vmin', call_assignment_281115_281653)
        
        # Assigning a Call to a Name (line 167):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_281656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 167, 8), 'int')
        # Processing the call keyword arguments
        kwargs_281657 = {}
        # Getting the type of 'call_assignment_281114' (line 167)
        call_assignment_281114_281654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 8), 'call_assignment_281114', False)
        # Obtaining the member '__getitem__' of a type (line 167)
        getitem___281655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 8), call_assignment_281114_281654, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_281658 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___281655, *[int_281656], **kwargs_281657)
        
        # Assigning a type to the variable 'call_assignment_281116' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 8), 'call_assignment_281116', getitem___call_result_281658)
        
        # Assigning a Name to a Name (line 167):
        # Getting the type of 'call_assignment_281116' (line 167)
        call_assignment_281116_281659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 8), 'call_assignment_281116')
        # Assigning a type to the variable 'vmax' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 14), 'vmax', call_assignment_281116_281659)
        
        # Assigning a Call to a Name (line 168):
        
        # Assigning a Call to a Name (line 168):
        
        # Call to rad2deg(...): (line 168)
        # Processing the call arguments (line 168)
        
        # Call to abs(...): (line 168)
        # Processing the call arguments (line 168)
        # Getting the type of 'vmax' (line 168)
        vmax_281663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 27), 'vmax', False)
        # Getting the type of 'vmin' (line 168)
        vmin_281664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 34), 'vmin', False)
        # Applying the binary operator '-' (line 168)
        result_sub_281665 = python_operator(stypy.reporting.localization.Localization(__file__, 168, 27), '-', vmax_281663, vmin_281664)
        
        # Processing the call keyword arguments (line 168)
        kwargs_281666 = {}
        # Getting the type of 'abs' (line 168)
        abs_281662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 23), 'abs', False)
        # Calling abs(args, kwargs) (line 168)
        abs_call_result_281667 = invoke(stypy.reporting.localization.Localization(__file__, 168, 23), abs_281662, *[result_sub_281665], **kwargs_281666)
        
        # Processing the call keyword arguments (line 168)
        kwargs_281668 = {}
        # Getting the type of 'np' (line 168)
        np_281660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 12), 'np', False)
        # Obtaining the member 'rad2deg' of a type (line 168)
        rad2deg_281661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 12), np_281660, 'rad2deg')
        # Calling rad2deg(args, kwargs) (line 168)
        rad2deg_call_result_281669 = invoke(stypy.reporting.localization.Localization(__file__, 168, 12), rad2deg_281661, *[abs_call_result_281667], **kwargs_281668)
        
        # Assigning a type to the variable 'd' (line 168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 8), 'd', rad2deg_call_result_281669)
        
        # Assigning a Call to a Name (line 169):
        
        # Assigning a Call to a Name (line 169):
        
        # Call to max(...): (line 169)
        # Processing the call arguments (line 169)
        
        
        # Call to int(...): (line 169)
        # Processing the call arguments (line 169)
        
        # Call to log10(...): (line 169)
        # Processing the call arguments (line 169)
        # Getting the type of 'd' (line 169)
        d_281674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 35), 'd', False)
        # Processing the call keyword arguments (line 169)
        kwargs_281675 = {}
        # Getting the type of 'np' (line 169)
        np_281672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 26), 'np', False)
        # Obtaining the member 'log10' of a type (line 169)
        log10_281673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 26), np_281672, 'log10')
        # Calling log10(args, kwargs) (line 169)
        log10_call_result_281676 = invoke(stypy.reporting.localization.Localization(__file__, 169, 26), log10_281673, *[d_281674], **kwargs_281675)
        
        float_281677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 40), 'float')
        # Applying the binary operator '-' (line 169)
        result_sub_281678 = python_operator(stypy.reporting.localization.Localization(__file__, 169, 26), '-', log10_call_result_281676, float_281677)
        
        # Processing the call keyword arguments (line 169)
        kwargs_281679 = {}
        # Getting the type of 'int' (line 169)
        int_281671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 22), 'int', False)
        # Calling int(args, kwargs) (line 169)
        int_call_result_281680 = invoke(stypy.reporting.localization.Localization(__file__, 169, 22), int_281671, *[result_sub_281678], **kwargs_281679)
        
        # Applying the 'usub' unary operator (line 169)
        result___neg___281681 = python_operator(stypy.reporting.localization.Localization(__file__, 169, 21), 'usub', int_call_result_281680)
        
        int_281682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 46), 'int')
        # Processing the call keyword arguments (line 169)
        kwargs_281683 = {}
        # Getting the type of 'max' (line 169)
        max_281670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 17), 'max', False)
        # Calling max(args, kwargs) (line 169)
        max_call_result_281684 = invoke(stypy.reporting.localization.Localization(__file__, 169, 17), max_281670, *[result___neg___281681, int_281682], **kwargs_281683)
        
        # Assigning a type to the variable 'digits' (line 169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 8), 'digits', max_call_result_281684)
        
        
        # Evaluating a boolean operation
        
        # Obtaining the type of the subscript
        unicode_281685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, 20), 'unicode', u'text.usetex')
        # Getting the type of 'rcParams' (line 171)
        rcParams_281686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 11), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 171)
        getitem___281687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 11), rcParams_281686, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 171)
        subscript_call_result_281688 = invoke(stypy.reporting.localization.Localization(__file__, 171, 11), getitem___281687, unicode_281685)
        
        
        
        # Obtaining the type of the subscript
        unicode_281689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, 52), 'unicode', u'text.latex.unicode')
        # Getting the type of 'rcParams' (line 171)
        rcParams_281690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 43), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 171)
        getitem___281691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 43), rcParams_281690, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 171)
        subscript_call_result_281692 = invoke(stypy.reporting.localization.Localization(__file__, 171, 43), getitem___281691, unicode_281689)
        
        # Applying the 'not' unary operator (line 171)
        result_not__281693 = python_operator(stypy.reporting.localization.Localization(__file__, 171, 39), 'not', subscript_call_result_281692)
        
        # Applying the binary operator 'and' (line 171)
        result_and_keyword_281694 = python_operator(stypy.reporting.localization.Localization(__file__, 171, 11), 'and', subscript_call_result_281688, result_not__281693)
        
        # Testing the type of an if condition (line 171)
        if_condition_281695 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 171, 8), result_and_keyword_281694)
        # Assigning a type to the variable 'if_condition_281695' (line 171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 8), 'if_condition_281695', if_condition_281695)
        # SSA begins for if statement (line 171)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 172):
        
        # Assigning a Str to a Name (line 172):
        unicode_281696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 172, 25), 'unicode', u'${value:0.{digits:d}f}^\\circ$')
        # Assigning a type to the variable 'format_str' (line 172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 12), 'format_str', unicode_281696)
        
        # Call to format(...): (line 173)
        # Processing the call keyword arguments (line 173)
        
        # Call to rad2deg(...): (line 173)
        # Processing the call arguments (line 173)
        # Getting the type of 'x' (line 173)
        x_281701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 54), 'x', False)
        # Processing the call keyword arguments (line 173)
        kwargs_281702 = {}
        # Getting the type of 'np' (line 173)
        np_281699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 43), 'np', False)
        # Obtaining the member 'rad2deg' of a type (line 173)
        rad2deg_281700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 43), np_281699, 'rad2deg')
        # Calling rad2deg(args, kwargs) (line 173)
        rad2deg_call_result_281703 = invoke(stypy.reporting.localization.Localization(__file__, 173, 43), rad2deg_281700, *[x_281701], **kwargs_281702)
        
        keyword_281704 = rad2deg_call_result_281703
        # Getting the type of 'digits' (line 173)
        digits_281705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 65), 'digits', False)
        keyword_281706 = digits_281705
        kwargs_281707 = {'digits': keyword_281706, 'value': keyword_281704}
        # Getting the type of 'format_str' (line 173)
        format_str_281697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 19), 'format_str', False)
        # Obtaining the member 'format' of a type (line 173)
        format_281698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 19), format_str_281697, 'format')
        # Calling format(args, kwargs) (line 173)
        format_call_result_281708 = invoke(stypy.reporting.localization.Localization(__file__, 173, 19), format_281698, *[], **kwargs_281707)
        
        # Assigning a type to the variable 'stypy_return_type' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 12), 'stypy_return_type', format_call_result_281708)
        # SSA branch for the else part of an if statement (line 171)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 180):
        
        # Assigning a Str to a Name (line 180):
        unicode_281709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, 25), 'unicode', u'{value:0.{digits:d}f}\xb0')
        # Assigning a type to the variable 'format_str' (line 180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 180, 12), 'format_str', unicode_281709)
        
        # Call to format(...): (line 181)
        # Processing the call keyword arguments (line 181)
        
        # Call to rad2deg(...): (line 181)
        # Processing the call arguments (line 181)
        # Getting the type of 'x' (line 181)
        x_281714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 54), 'x', False)
        # Processing the call keyword arguments (line 181)
        kwargs_281715 = {}
        # Getting the type of 'np' (line 181)
        np_281712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 43), 'np', False)
        # Obtaining the member 'rad2deg' of a type (line 181)
        rad2deg_281713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 43), np_281712, 'rad2deg')
        # Calling rad2deg(args, kwargs) (line 181)
        rad2deg_call_result_281716 = invoke(stypy.reporting.localization.Localization(__file__, 181, 43), rad2deg_281713, *[x_281714], **kwargs_281715)
        
        keyword_281717 = rad2deg_call_result_281716
        # Getting the type of 'digits' (line 181)
        digits_281718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 65), 'digits', False)
        keyword_281719 = digits_281718
        kwargs_281720 = {'digits': keyword_281719, 'value': keyword_281717}
        # Getting the type of 'format_str' (line 181)
        format_str_281710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 19), 'format_str', False)
        # Obtaining the member 'format' of a type (line 181)
        format_281711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 19), format_str_281710, 'format')
        # Calling format(args, kwargs) (line 181)
        format_call_result_281721 = invoke(stypy.reporting.localization.Localization(__file__, 181, 19), format_281711, *[], **kwargs_281720)
        
        # Assigning a type to the variable 'stypy_return_type' (line 181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 12), 'stypy_return_type', format_call_result_281721)
        # SSA join for if statement (line 171)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 166)
        stypy_return_type_281722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281722)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_281722


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 161, 0, False)
        # Assigning a type to the variable 'self' (line 162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaFormatter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ThetaFormatter' (line 161)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 0), 'ThetaFormatter', ThetaFormatter)
# Declaration of the '_AxisWrapper' class

class _AxisWrapper(object, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 185, 4, False)
        # Assigning a type to the variable 'self' (line 186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxisWrapper.__init__', ['axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 186):
        
        # Assigning a Name to a Attribute (line 186):
        # Getting the type of 'axis' (line 186)
        axis_281723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 21), 'axis')
        # Getting the type of 'self' (line 186)
        self_281724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 8), 'self')
        # Setting the type of the member '_axis' of a type (line 186)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 8), self_281724, '_axis', axis_281723)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_view_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_view_interval'
        module_type_store = module_type_store.open_function_context('get_view_interval', 188, 4, False)
        # Assigning a type to the variable 'self' (line 189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxisWrapper.get_view_interval.__dict__.__setitem__('stypy_localization', localization)
        _AxisWrapper.get_view_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxisWrapper.get_view_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxisWrapper.get_view_interval.__dict__.__setitem__('stypy_function_name', '_AxisWrapper.get_view_interval')
        _AxisWrapper.get_view_interval.__dict__.__setitem__('stypy_param_names_list', [])
        _AxisWrapper.get_view_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxisWrapper.get_view_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxisWrapper.get_view_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxisWrapper.get_view_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxisWrapper.get_view_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxisWrapper.get_view_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxisWrapper.get_view_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_view_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_view_interval(...)' code ##################

        
        # Call to rad2deg(...): (line 189)
        # Processing the call arguments (line 189)
        
        # Call to get_view_interval(...): (line 189)
        # Processing the call keyword arguments (line 189)
        kwargs_281730 = {}
        # Getting the type of 'self' (line 189)
        self_281727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 26), 'self', False)
        # Obtaining the member '_axis' of a type (line 189)
        _axis_281728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 26), self_281727, '_axis')
        # Obtaining the member 'get_view_interval' of a type (line 189)
        get_view_interval_281729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 26), _axis_281728, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 189)
        get_view_interval_call_result_281731 = invoke(stypy.reporting.localization.Localization(__file__, 189, 26), get_view_interval_281729, *[], **kwargs_281730)
        
        # Processing the call keyword arguments (line 189)
        kwargs_281732 = {}
        # Getting the type of 'np' (line 189)
        np_281725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 15), 'np', False)
        # Obtaining the member 'rad2deg' of a type (line 189)
        rad2deg_281726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 15), np_281725, 'rad2deg')
        # Calling rad2deg(args, kwargs) (line 189)
        rad2deg_call_result_281733 = invoke(stypy.reporting.localization.Localization(__file__, 189, 15), rad2deg_281726, *[get_view_interval_call_result_281731], **kwargs_281732)
        
        # Assigning a type to the variable 'stypy_return_type' (line 189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 8), 'stypy_return_type', rad2deg_call_result_281733)
        
        # ################# End of 'get_view_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_view_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 188)
        stypy_return_type_281734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281734)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_view_interval'
        return stypy_return_type_281734


    @norecursion
    def set_view_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_view_interval'
        module_type_store = module_type_store.open_function_context('set_view_interval', 191, 4, False)
        # Assigning a type to the variable 'self' (line 192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxisWrapper.set_view_interval.__dict__.__setitem__('stypy_localization', localization)
        _AxisWrapper.set_view_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxisWrapper.set_view_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxisWrapper.set_view_interval.__dict__.__setitem__('stypy_function_name', '_AxisWrapper.set_view_interval')
        _AxisWrapper.set_view_interval.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        _AxisWrapper.set_view_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxisWrapper.set_view_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxisWrapper.set_view_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxisWrapper.set_view_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxisWrapper.set_view_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxisWrapper.set_view_interval.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxisWrapper.set_view_interval', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_view_interval', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_view_interval(...)' code ##################

        
        # Call to set_view_interval(...): (line 192)
        
        # Call to deg2rad(...): (line 192)
        # Processing the call arguments (line 192)
        
        # Obtaining an instance of the builtin type 'tuple' (line 192)
        tuple_281740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 192)
        # Adding element type (line 192)
        # Getting the type of 'vmin' (line 192)
        vmin_281741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 50), 'vmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 192, 50), tuple_281740, vmin_281741)
        # Adding element type (line 192)
        # Getting the type of 'vmax' (line 192)
        vmax_281742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 56), 'vmax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 192, 50), tuple_281740, vmax_281742)
        
        # Processing the call keyword arguments (line 192)
        kwargs_281743 = {}
        # Getting the type of 'np' (line 192)
        np_281738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 38), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 192)
        deg2rad_281739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 38), np_281738, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 192)
        deg2rad_call_result_281744 = invoke(stypy.reporting.localization.Localization(__file__, 192, 38), deg2rad_281739, *[tuple_281740], **kwargs_281743)
        
        # Processing the call keyword arguments (line 192)
        kwargs_281745 = {}
        # Getting the type of 'self' (line 192)
        self_281735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 8), 'self', False)
        # Obtaining the member '_axis' of a type (line 192)
        _axis_281736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 8), self_281735, '_axis')
        # Obtaining the member 'set_view_interval' of a type (line 192)
        set_view_interval_281737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 8), _axis_281736, 'set_view_interval')
        # Calling set_view_interval(args, kwargs) (line 192)
        set_view_interval_call_result_281746 = invoke(stypy.reporting.localization.Localization(__file__, 192, 8), set_view_interval_281737, *[deg2rad_call_result_281744], **kwargs_281745)
        
        
        # ################# End of 'set_view_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_view_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 191)
        stypy_return_type_281747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281747)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_view_interval'
        return stypy_return_type_281747


    @norecursion
    def get_minpos(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_minpos'
        module_type_store = module_type_store.open_function_context('get_minpos', 194, 4, False)
        # Assigning a type to the variable 'self' (line 195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxisWrapper.get_minpos.__dict__.__setitem__('stypy_localization', localization)
        _AxisWrapper.get_minpos.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxisWrapper.get_minpos.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxisWrapper.get_minpos.__dict__.__setitem__('stypy_function_name', '_AxisWrapper.get_minpos')
        _AxisWrapper.get_minpos.__dict__.__setitem__('stypy_param_names_list', [])
        _AxisWrapper.get_minpos.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxisWrapper.get_minpos.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxisWrapper.get_minpos.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxisWrapper.get_minpos.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxisWrapper.get_minpos.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxisWrapper.get_minpos.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxisWrapper.get_minpos', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_minpos', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_minpos(...)' code ##################

        
        # Call to rad2deg(...): (line 195)
        # Processing the call arguments (line 195)
        
        # Call to get_minpos(...): (line 195)
        # Processing the call keyword arguments (line 195)
        kwargs_281753 = {}
        # Getting the type of 'self' (line 195)
        self_281750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 26), 'self', False)
        # Obtaining the member '_axis' of a type (line 195)
        _axis_281751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 26), self_281750, '_axis')
        # Obtaining the member 'get_minpos' of a type (line 195)
        get_minpos_281752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 26), _axis_281751, 'get_minpos')
        # Calling get_minpos(args, kwargs) (line 195)
        get_minpos_call_result_281754 = invoke(stypy.reporting.localization.Localization(__file__, 195, 26), get_minpos_281752, *[], **kwargs_281753)
        
        # Processing the call keyword arguments (line 195)
        kwargs_281755 = {}
        # Getting the type of 'np' (line 195)
        np_281748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 15), 'np', False)
        # Obtaining the member 'rad2deg' of a type (line 195)
        rad2deg_281749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 15), np_281748, 'rad2deg')
        # Calling rad2deg(args, kwargs) (line 195)
        rad2deg_call_result_281756 = invoke(stypy.reporting.localization.Localization(__file__, 195, 15), rad2deg_281749, *[get_minpos_call_result_281754], **kwargs_281755)
        
        # Assigning a type to the variable 'stypy_return_type' (line 195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 8), 'stypy_return_type', rad2deg_call_result_281756)
        
        # ################# End of 'get_minpos(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_minpos' in the type store
        # Getting the type of 'stypy_return_type' (line 194)
        stypy_return_type_281757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281757)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_minpos'
        return stypy_return_type_281757


    @norecursion
    def get_data_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_data_interval'
        module_type_store = module_type_store.open_function_context('get_data_interval', 197, 4, False)
        # Assigning a type to the variable 'self' (line 198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxisWrapper.get_data_interval.__dict__.__setitem__('stypy_localization', localization)
        _AxisWrapper.get_data_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxisWrapper.get_data_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxisWrapper.get_data_interval.__dict__.__setitem__('stypy_function_name', '_AxisWrapper.get_data_interval')
        _AxisWrapper.get_data_interval.__dict__.__setitem__('stypy_param_names_list', [])
        _AxisWrapper.get_data_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxisWrapper.get_data_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxisWrapper.get_data_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxisWrapper.get_data_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxisWrapper.get_data_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxisWrapper.get_data_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxisWrapper.get_data_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_data_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_data_interval(...)' code ##################

        
        # Call to rad2deg(...): (line 198)
        # Processing the call arguments (line 198)
        
        # Call to get_data_interval(...): (line 198)
        # Processing the call keyword arguments (line 198)
        kwargs_281763 = {}
        # Getting the type of 'self' (line 198)
        self_281760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 26), 'self', False)
        # Obtaining the member '_axis' of a type (line 198)
        _axis_281761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 26), self_281760, '_axis')
        # Obtaining the member 'get_data_interval' of a type (line 198)
        get_data_interval_281762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 26), _axis_281761, 'get_data_interval')
        # Calling get_data_interval(args, kwargs) (line 198)
        get_data_interval_call_result_281764 = invoke(stypy.reporting.localization.Localization(__file__, 198, 26), get_data_interval_281762, *[], **kwargs_281763)
        
        # Processing the call keyword arguments (line 198)
        kwargs_281765 = {}
        # Getting the type of 'np' (line 198)
        np_281758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 15), 'np', False)
        # Obtaining the member 'rad2deg' of a type (line 198)
        rad2deg_281759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 15), np_281758, 'rad2deg')
        # Calling rad2deg(args, kwargs) (line 198)
        rad2deg_call_result_281766 = invoke(stypy.reporting.localization.Localization(__file__, 198, 15), rad2deg_281759, *[get_data_interval_call_result_281764], **kwargs_281765)
        
        # Assigning a type to the variable 'stypy_return_type' (line 198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 8), 'stypy_return_type', rad2deg_call_result_281766)
        
        # ################# End of 'get_data_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_data_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 197)
        stypy_return_type_281767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281767)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_data_interval'
        return stypy_return_type_281767


    @norecursion
    def set_data_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_data_interval'
        module_type_store = module_type_store.open_function_context('set_data_interval', 200, 4, False)
        # Assigning a type to the variable 'self' (line 201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxisWrapper.set_data_interval.__dict__.__setitem__('stypy_localization', localization)
        _AxisWrapper.set_data_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxisWrapper.set_data_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxisWrapper.set_data_interval.__dict__.__setitem__('stypy_function_name', '_AxisWrapper.set_data_interval')
        _AxisWrapper.set_data_interval.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        _AxisWrapper.set_data_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxisWrapper.set_data_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxisWrapper.set_data_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxisWrapper.set_data_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxisWrapper.set_data_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxisWrapper.set_data_interval.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxisWrapper.set_data_interval', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_data_interval', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_data_interval(...)' code ##################

        
        # Call to set_data_interval(...): (line 201)
        
        # Call to deg2rad(...): (line 201)
        # Processing the call arguments (line 201)
        
        # Obtaining an instance of the builtin type 'tuple' (line 201)
        tuple_281773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 201)
        # Adding element type (line 201)
        # Getting the type of 'vmin' (line 201)
        vmin_281774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 50), 'vmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 201, 50), tuple_281773, vmin_281774)
        # Adding element type (line 201)
        # Getting the type of 'vmax' (line 201)
        vmax_281775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 56), 'vmax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 201, 50), tuple_281773, vmax_281775)
        
        # Processing the call keyword arguments (line 201)
        kwargs_281776 = {}
        # Getting the type of 'np' (line 201)
        np_281771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 38), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 201)
        deg2rad_281772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 38), np_281771, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 201)
        deg2rad_call_result_281777 = invoke(stypy.reporting.localization.Localization(__file__, 201, 38), deg2rad_281772, *[tuple_281773], **kwargs_281776)
        
        # Processing the call keyword arguments (line 201)
        kwargs_281778 = {}
        # Getting the type of 'self' (line 201)
        self_281768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 8), 'self', False)
        # Obtaining the member '_axis' of a type (line 201)
        _axis_281769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 8), self_281768, '_axis')
        # Obtaining the member 'set_data_interval' of a type (line 201)
        set_data_interval_281770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 8), _axis_281769, 'set_data_interval')
        # Calling set_data_interval(args, kwargs) (line 201)
        set_data_interval_call_result_281779 = invoke(stypy.reporting.localization.Localization(__file__, 201, 8), set_data_interval_281770, *[deg2rad_call_result_281777], **kwargs_281778)
        
        
        # ################# End of 'set_data_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_data_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 200)
        stypy_return_type_281780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281780)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_data_interval'
        return stypy_return_type_281780


    @norecursion
    def get_tick_space(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_tick_space'
        module_type_store = module_type_store.open_function_context('get_tick_space', 203, 4, False)
        # Assigning a type to the variable 'self' (line 204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _AxisWrapper.get_tick_space.__dict__.__setitem__('stypy_localization', localization)
        _AxisWrapper.get_tick_space.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _AxisWrapper.get_tick_space.__dict__.__setitem__('stypy_type_store', module_type_store)
        _AxisWrapper.get_tick_space.__dict__.__setitem__('stypy_function_name', '_AxisWrapper.get_tick_space')
        _AxisWrapper.get_tick_space.__dict__.__setitem__('stypy_param_names_list', [])
        _AxisWrapper.get_tick_space.__dict__.__setitem__('stypy_varargs_param_name', None)
        _AxisWrapper.get_tick_space.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _AxisWrapper.get_tick_space.__dict__.__setitem__('stypy_call_defaults', defaults)
        _AxisWrapper.get_tick_space.__dict__.__setitem__('stypy_call_varargs', varargs)
        _AxisWrapper.get_tick_space.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _AxisWrapper.get_tick_space.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_AxisWrapper.get_tick_space', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_tick_space', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_tick_space(...)' code ##################

        
        # Call to get_tick_space(...): (line 204)
        # Processing the call keyword arguments (line 204)
        kwargs_281784 = {}
        # Getting the type of 'self' (line 204)
        self_281781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 15), 'self', False)
        # Obtaining the member '_axis' of a type (line 204)
        _axis_281782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 15), self_281781, '_axis')
        # Obtaining the member 'get_tick_space' of a type (line 204)
        get_tick_space_281783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 15), _axis_281782, 'get_tick_space')
        # Calling get_tick_space(args, kwargs) (line 204)
        get_tick_space_call_result_281785 = invoke(stypy.reporting.localization.Localization(__file__, 204, 15), get_tick_space_281783, *[], **kwargs_281784)
        
        # Assigning a type to the variable 'stypy_return_type' (line 204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 8), 'stypy_return_type', get_tick_space_call_result_281785)
        
        # ################# End of 'get_tick_space(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_tick_space' in the type store
        # Getting the type of 'stypy_return_type' (line 203)
        stypy_return_type_281786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281786)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_tick_space'
        return stypy_return_type_281786


# Assigning a type to the variable '_AxisWrapper' (line 184)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 0), '_AxisWrapper', _AxisWrapper)
# Declaration of the 'ThetaLocator' class
# Getting the type of 'mticker' (line 207)
mticker_281787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 19), 'mticker')
# Obtaining the member 'Locator' of a type (line 207)
Locator_281788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 19), mticker_281787, 'Locator')

class ThetaLocator(Locator_281788, ):
    unicode_281789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, (-1)), 'unicode', u'\n    Used to locate theta ticks.\n\n    This will work the same as the base locator except in the case that the\n    view spans the entire circle. In such cases, the previously used default\n    locations of every 45 degrees are returned.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 215, 4, False)
        # Assigning a type to the variable 'self' (line 216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaLocator.__init__', ['base'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['base'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 216):
        
        # Assigning a Name to a Attribute (line 216):
        # Getting the type of 'base' (line 216)
        base_281790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 20), 'base')
        # Getting the type of 'self' (line 216)
        self_281791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 8), 'self')
        # Setting the type of the member 'base' of a type (line 216)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 8), self_281791, 'base', base_281790)
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Call to a Attribute (line 217):
        
        # Call to _AxisWrapper(...): (line 217)
        # Processing the call arguments (line 217)
        # Getting the type of 'self' (line 217)
        self_281793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 50), 'self', False)
        # Obtaining the member 'base' of a type (line 217)
        base_281794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 50), self_281793, 'base')
        # Obtaining the member 'axis' of a type (line 217)
        axis_281795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 50), base_281794, 'axis')
        # Processing the call keyword arguments (line 217)
        kwargs_281796 = {}
        # Getting the type of '_AxisWrapper' (line 217)
        _AxisWrapper_281792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 37), '_AxisWrapper', False)
        # Calling _AxisWrapper(args, kwargs) (line 217)
        _AxisWrapper_call_result_281797 = invoke(stypy.reporting.localization.Localization(__file__, 217, 37), _AxisWrapper_281792, *[axis_281795], **kwargs_281796)
        
        # Getting the type of 'self' (line 217)
        self_281798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 20), 'self')
        # Obtaining the member 'base' of a type (line 217)
        base_281799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 20), self_281798, 'base')
        # Setting the type of the member 'axis' of a type (line 217)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 20), base_281799, 'axis', _AxisWrapper_call_result_281797)
        
        # Assigning a Attribute to a Attribute (line 217):
        # Getting the type of 'self' (line 217)
        self_281800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 20), 'self')
        # Obtaining the member 'base' of a type (line 217)
        base_281801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 20), self_281800, 'base')
        # Obtaining the member 'axis' of a type (line 217)
        axis_281802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 20), base_281801, 'axis')
        # Getting the type of 'self' (line 217)
        self_281803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 8), 'self')
        # Setting the type of the member 'axis' of a type (line 217)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 8), self_281803, 'axis', axis_281802)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_axis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_axis'
        module_type_store = module_type_store.open_function_context('set_axis', 219, 4, False)
        # Assigning a type to the variable 'self' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaLocator.set_axis.__dict__.__setitem__('stypy_localization', localization)
        ThetaLocator.set_axis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaLocator.set_axis.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaLocator.set_axis.__dict__.__setitem__('stypy_function_name', 'ThetaLocator.set_axis')
        ThetaLocator.set_axis.__dict__.__setitem__('stypy_param_names_list', ['axis'])
        ThetaLocator.set_axis.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaLocator.set_axis.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaLocator.set_axis.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaLocator.set_axis.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaLocator.set_axis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaLocator.set_axis.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaLocator.set_axis', ['axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_axis', localization, ['axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_axis(...)' code ##################

        
        # Assigning a Call to a Attribute (line 220):
        
        # Assigning a Call to a Attribute (line 220):
        
        # Call to _AxisWrapper(...): (line 220)
        # Processing the call arguments (line 220)
        # Getting the type of 'axis' (line 220)
        axis_281805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 33), 'axis', False)
        # Processing the call keyword arguments (line 220)
        kwargs_281806 = {}
        # Getting the type of '_AxisWrapper' (line 220)
        _AxisWrapper_281804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 20), '_AxisWrapper', False)
        # Calling _AxisWrapper(args, kwargs) (line 220)
        _AxisWrapper_call_result_281807 = invoke(stypy.reporting.localization.Localization(__file__, 220, 20), _AxisWrapper_281804, *[axis_281805], **kwargs_281806)
        
        # Getting the type of 'self' (line 220)
        self_281808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 8), 'self')
        # Setting the type of the member 'axis' of a type (line 220)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 8), self_281808, 'axis', _AxisWrapper_call_result_281807)
        
        # Call to set_axis(...): (line 221)
        # Processing the call arguments (line 221)
        # Getting the type of 'self' (line 221)
        self_281812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 27), 'self', False)
        # Obtaining the member 'axis' of a type (line 221)
        axis_281813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 27), self_281812, 'axis')
        # Processing the call keyword arguments (line 221)
        kwargs_281814 = {}
        # Getting the type of 'self' (line 221)
        self_281809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'self', False)
        # Obtaining the member 'base' of a type (line 221)
        base_281810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 8), self_281809, 'base')
        # Obtaining the member 'set_axis' of a type (line 221)
        set_axis_281811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 8), base_281810, 'set_axis')
        # Calling set_axis(args, kwargs) (line 221)
        set_axis_call_result_281815 = invoke(stypy.reporting.localization.Localization(__file__, 221, 8), set_axis_281811, *[axis_281813], **kwargs_281814)
        
        
        # ################# End of 'set_axis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_axis' in the type store
        # Getting the type of 'stypy_return_type' (line 219)
        stypy_return_type_281816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281816)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_axis'
        return stypy_return_type_281816


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 223, 4, False)
        # Assigning a type to the variable 'self' (line 224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        ThetaLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaLocator.__call__.__dict__.__setitem__('stypy_function_name', 'ThetaLocator.__call__')
        ThetaLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        ThetaLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Assigning a Call to a Name (line 224):
        
        # Assigning a Call to a Name (line 224):
        
        # Call to get_view_interval(...): (line 224)
        # Processing the call keyword arguments (line 224)
        kwargs_281820 = {}
        # Getting the type of 'self' (line 224)
        self_281817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 14), 'self', False)
        # Obtaining the member 'axis' of a type (line 224)
        axis_281818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 14), self_281817, 'axis')
        # Obtaining the member 'get_view_interval' of a type (line 224)
        get_view_interval_281819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 14), axis_281818, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 224)
        get_view_interval_call_result_281821 = invoke(stypy.reporting.localization.Localization(__file__, 224, 14), get_view_interval_281819, *[], **kwargs_281820)
        
        # Assigning a type to the variable 'lim' (line 224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 8), 'lim', get_view_interval_call_result_281821)
        
        
        # Call to _is_full_circle_deg(...): (line 225)
        # Processing the call arguments (line 225)
        
        # Obtaining the type of the subscript
        int_281823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 35), 'int')
        # Getting the type of 'lim' (line 225)
        lim_281824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 31), 'lim', False)
        # Obtaining the member '__getitem__' of a type (line 225)
        getitem___281825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 31), lim_281824, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 225)
        subscript_call_result_281826 = invoke(stypy.reporting.localization.Localization(__file__, 225, 31), getitem___281825, int_281823)
        
        
        # Obtaining the type of the subscript
        int_281827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 43), 'int')
        # Getting the type of 'lim' (line 225)
        lim_281828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 39), 'lim', False)
        # Obtaining the member '__getitem__' of a type (line 225)
        getitem___281829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 39), lim_281828, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 225)
        subscript_call_result_281830 = invoke(stypy.reporting.localization.Localization(__file__, 225, 39), getitem___281829, int_281827)
        
        # Processing the call keyword arguments (line 225)
        kwargs_281831 = {}
        # Getting the type of '_is_full_circle_deg' (line 225)
        _is_full_circle_deg_281822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 11), '_is_full_circle_deg', False)
        # Calling _is_full_circle_deg(args, kwargs) (line 225)
        _is_full_circle_deg_call_result_281832 = invoke(stypy.reporting.localization.Localization(__file__, 225, 11), _is_full_circle_deg_281822, *[subscript_call_result_281826, subscript_call_result_281830], **kwargs_281831)
        
        # Testing the type of an if condition (line 225)
        if_condition_281833 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 225, 8), _is_full_circle_deg_call_result_281832)
        # Assigning a type to the variable 'if_condition_281833' (line 225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 8), 'if_condition_281833', if_condition_281833)
        # SSA begins for if statement (line 225)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to arange(...): (line 226)
        # Processing the call arguments (line 226)
        int_281836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 29), 'int')
        # Processing the call keyword arguments (line 226)
        kwargs_281837 = {}
        # Getting the type of 'np' (line 226)
        np_281834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 19), 'np', False)
        # Obtaining the member 'arange' of a type (line 226)
        arange_281835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 19), np_281834, 'arange')
        # Calling arange(args, kwargs) (line 226)
        arange_call_result_281838 = invoke(stypy.reporting.localization.Localization(__file__, 226, 19), arange_281835, *[int_281836], **kwargs_281837)
        
        int_281839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 34), 'int')
        # Applying the binary operator '*' (line 226)
        result_mul_281840 = python_operator(stypy.reporting.localization.Localization(__file__, 226, 19), '*', arange_call_result_281838, int_281839)
        
        # Getting the type of 'np' (line 226)
        np_281841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 38), 'np')
        # Obtaining the member 'pi' of a type (line 226)
        pi_281842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 38), np_281841, 'pi')
        # Applying the binary operator '*' (line 226)
        result_mul_281843 = python_operator(stypy.reporting.localization.Localization(__file__, 226, 36), '*', result_mul_281840, pi_281842)
        
        int_281844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 46), 'int')
        # Applying the binary operator 'div' (line 226)
        result_div_281845 = python_operator(stypy.reporting.localization.Localization(__file__, 226, 44), 'div', result_mul_281843, int_281844)
        
        # Assigning a type to the variable 'stypy_return_type' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 12), 'stypy_return_type', result_div_281845)
        # SSA branch for the else part of an if statement (line 225)
        module_type_store.open_ssa_branch('else')
        
        # Call to deg2rad(...): (line 228)
        # Processing the call arguments (line 228)
        
        # Call to base(...): (line 228)
        # Processing the call keyword arguments (line 228)
        kwargs_281850 = {}
        # Getting the type of 'self' (line 228)
        self_281848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 30), 'self', False)
        # Obtaining the member 'base' of a type (line 228)
        base_281849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 30), self_281848, 'base')
        # Calling base(args, kwargs) (line 228)
        base_call_result_281851 = invoke(stypy.reporting.localization.Localization(__file__, 228, 30), base_281849, *[], **kwargs_281850)
        
        # Processing the call keyword arguments (line 228)
        kwargs_281852 = {}
        # Getting the type of 'np' (line 228)
        np_281846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 19), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 228)
        deg2rad_281847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 19), np_281846, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 228)
        deg2rad_call_result_281853 = invoke(stypy.reporting.localization.Localization(__file__, 228, 19), deg2rad_281847, *[base_call_result_281851], **kwargs_281852)
        
        # Assigning a type to the variable 'stypy_return_type' (line 228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 12), 'stypy_return_type', deg2rad_call_result_281853)
        # SSA join for if statement (line 225)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 223)
        stypy_return_type_281854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281854)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_281854


    @norecursion
    def autoscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'autoscale'
        module_type_store = module_type_store.open_function_context('autoscale', 230, 4, False)
        # Assigning a type to the variable 'self' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaLocator.autoscale.__dict__.__setitem__('stypy_localization', localization)
        ThetaLocator.autoscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaLocator.autoscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaLocator.autoscale.__dict__.__setitem__('stypy_function_name', 'ThetaLocator.autoscale')
        ThetaLocator.autoscale.__dict__.__setitem__('stypy_param_names_list', [])
        ThetaLocator.autoscale.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaLocator.autoscale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaLocator.autoscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaLocator.autoscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaLocator.autoscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaLocator.autoscale.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaLocator.autoscale', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale(...)' code ##################

        
        # Call to autoscale(...): (line 231)
        # Processing the call keyword arguments (line 231)
        kwargs_281858 = {}
        # Getting the type of 'self' (line 231)
        self_281855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 15), 'self', False)
        # Obtaining the member 'base' of a type (line 231)
        base_281856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 15), self_281855, 'base')
        # Obtaining the member 'autoscale' of a type (line 231)
        autoscale_281857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 15), base_281856, 'autoscale')
        # Calling autoscale(args, kwargs) (line 231)
        autoscale_call_result_281859 = invoke(stypy.reporting.localization.Localization(__file__, 231, 15), autoscale_281857, *[], **kwargs_281858)
        
        # Assigning a type to the variable 'stypy_return_type' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'stypy_return_type', autoscale_call_result_281859)
        
        # ################# End of 'autoscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale' in the type store
        # Getting the type of 'stypy_return_type' (line 230)
        stypy_return_type_281860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281860)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale'
        return stypy_return_type_281860


    @norecursion
    def pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pan'
        module_type_store = module_type_store.open_function_context('pan', 233, 4, False)
        # Assigning a type to the variable 'self' (line 234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaLocator.pan.__dict__.__setitem__('stypy_localization', localization)
        ThetaLocator.pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaLocator.pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaLocator.pan.__dict__.__setitem__('stypy_function_name', 'ThetaLocator.pan')
        ThetaLocator.pan.__dict__.__setitem__('stypy_param_names_list', ['numsteps'])
        ThetaLocator.pan.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaLocator.pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaLocator.pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaLocator.pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaLocator.pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaLocator.pan.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaLocator.pan', ['numsteps'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pan', localization, ['numsteps'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pan(...)' code ##################

        
        # Call to pan(...): (line 234)
        # Processing the call arguments (line 234)
        # Getting the type of 'numsteps' (line 234)
        numsteps_281864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 29), 'numsteps', False)
        # Processing the call keyword arguments (line 234)
        kwargs_281865 = {}
        # Getting the type of 'self' (line 234)
        self_281861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 15), 'self', False)
        # Obtaining the member 'base' of a type (line 234)
        base_281862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 234, 15), self_281861, 'base')
        # Obtaining the member 'pan' of a type (line 234)
        pan_281863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 234, 15), base_281862, 'pan')
        # Calling pan(args, kwargs) (line 234)
        pan_call_result_281866 = invoke(stypy.reporting.localization.Localization(__file__, 234, 15), pan_281863, *[numsteps_281864], **kwargs_281865)
        
        # Assigning a type to the variable 'stypy_return_type' (line 234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 8), 'stypy_return_type', pan_call_result_281866)
        
        # ################# End of 'pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pan' in the type store
        # Getting the type of 'stypy_return_type' (line 233)
        stypy_return_type_281867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281867)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pan'
        return stypy_return_type_281867


    @norecursion
    def refresh(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'refresh'
        module_type_store = module_type_store.open_function_context('refresh', 236, 4, False)
        # Assigning a type to the variable 'self' (line 237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaLocator.refresh.__dict__.__setitem__('stypy_localization', localization)
        ThetaLocator.refresh.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaLocator.refresh.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaLocator.refresh.__dict__.__setitem__('stypy_function_name', 'ThetaLocator.refresh')
        ThetaLocator.refresh.__dict__.__setitem__('stypy_param_names_list', [])
        ThetaLocator.refresh.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaLocator.refresh.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaLocator.refresh.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaLocator.refresh.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaLocator.refresh.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaLocator.refresh.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaLocator.refresh', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'refresh', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'refresh(...)' code ##################

        
        # Call to refresh(...): (line 237)
        # Processing the call keyword arguments (line 237)
        kwargs_281871 = {}
        # Getting the type of 'self' (line 237)
        self_281868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 15), 'self', False)
        # Obtaining the member 'base' of a type (line 237)
        base_281869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 15), self_281868, 'base')
        # Obtaining the member 'refresh' of a type (line 237)
        refresh_281870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 15), base_281869, 'refresh')
        # Calling refresh(args, kwargs) (line 237)
        refresh_call_result_281872 = invoke(stypy.reporting.localization.Localization(__file__, 237, 15), refresh_281870, *[], **kwargs_281871)
        
        # Assigning a type to the variable 'stypy_return_type' (line 237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 8), 'stypy_return_type', refresh_call_result_281872)
        
        # ################# End of 'refresh(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'refresh' in the type store
        # Getting the type of 'stypy_return_type' (line 236)
        stypy_return_type_281873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281873)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'refresh'
        return stypy_return_type_281873


    @norecursion
    def view_limits(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'view_limits'
        module_type_store = module_type_store.open_function_context('view_limits', 239, 4, False)
        # Assigning a type to the variable 'self' (line 240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaLocator.view_limits.__dict__.__setitem__('stypy_localization', localization)
        ThetaLocator.view_limits.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaLocator.view_limits.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaLocator.view_limits.__dict__.__setitem__('stypy_function_name', 'ThetaLocator.view_limits')
        ThetaLocator.view_limits.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        ThetaLocator.view_limits.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaLocator.view_limits.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaLocator.view_limits.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaLocator.view_limits.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaLocator.view_limits.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaLocator.view_limits.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaLocator.view_limits', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'view_limits', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'view_limits(...)' code ##################

        
        # Assigning a Call to a Tuple (line 240):
        
        # Assigning a Call to a Name:
        
        # Call to rad2deg(...): (line 240)
        # Processing the call arguments (line 240)
        
        # Obtaining an instance of the builtin type 'tuple' (line 240)
        tuple_281876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 240)
        # Adding element type (line 240)
        # Getting the type of 'vmin' (line 240)
        vmin_281877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 33), 'vmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 240, 33), tuple_281876, vmin_281877)
        # Adding element type (line 240)
        # Getting the type of 'vmax' (line 240)
        vmax_281878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 39), 'vmax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 240, 33), tuple_281876, vmax_281878)
        
        # Processing the call keyword arguments (line 240)
        kwargs_281879 = {}
        # Getting the type of 'np' (line 240)
        np_281874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 21), 'np', False)
        # Obtaining the member 'rad2deg' of a type (line 240)
        rad2deg_281875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 240, 21), np_281874, 'rad2deg')
        # Calling rad2deg(args, kwargs) (line 240)
        rad2deg_call_result_281880 = invoke(stypy.reporting.localization.Localization(__file__, 240, 21), rad2deg_281875, *[tuple_281876], **kwargs_281879)
        
        # Assigning a type to the variable 'call_assignment_281117' (line 240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'call_assignment_281117', rad2deg_call_result_281880)
        
        # Assigning a Call to a Name (line 240):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_281883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 8), 'int')
        # Processing the call keyword arguments
        kwargs_281884 = {}
        # Getting the type of 'call_assignment_281117' (line 240)
        call_assignment_281117_281881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'call_assignment_281117', False)
        # Obtaining the member '__getitem__' of a type (line 240)
        getitem___281882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 240, 8), call_assignment_281117_281881, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_281885 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___281882, *[int_281883], **kwargs_281884)
        
        # Assigning a type to the variable 'call_assignment_281118' (line 240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'call_assignment_281118', getitem___call_result_281885)
        
        # Assigning a Name to a Name (line 240):
        # Getting the type of 'call_assignment_281118' (line 240)
        call_assignment_281118_281886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'call_assignment_281118')
        # Assigning a type to the variable 'vmin' (line 240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'vmin', call_assignment_281118_281886)
        
        # Assigning a Call to a Name (line 240):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_281889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 8), 'int')
        # Processing the call keyword arguments
        kwargs_281890 = {}
        # Getting the type of 'call_assignment_281117' (line 240)
        call_assignment_281117_281887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'call_assignment_281117', False)
        # Obtaining the member '__getitem__' of a type (line 240)
        getitem___281888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 240, 8), call_assignment_281117_281887, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_281891 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___281888, *[int_281889], **kwargs_281890)
        
        # Assigning a type to the variable 'call_assignment_281119' (line 240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'call_assignment_281119', getitem___call_result_281891)
        
        # Assigning a Name to a Name (line 240):
        # Getting the type of 'call_assignment_281119' (line 240)
        call_assignment_281119_281892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'call_assignment_281119')
        # Assigning a type to the variable 'vmax' (line 240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 14), 'vmax', call_assignment_281119_281892)
        
        # Call to deg2rad(...): (line 241)
        # Processing the call arguments (line 241)
        
        # Call to view_limits(...): (line 241)
        # Processing the call arguments (line 241)
        # Getting the type of 'vmin' (line 241)
        vmin_281898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 48), 'vmin', False)
        # Getting the type of 'vmax' (line 241)
        vmax_281899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 54), 'vmax', False)
        # Processing the call keyword arguments (line 241)
        kwargs_281900 = {}
        # Getting the type of 'self' (line 241)
        self_281895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 26), 'self', False)
        # Obtaining the member 'base' of a type (line 241)
        base_281896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 26), self_281895, 'base')
        # Obtaining the member 'view_limits' of a type (line 241)
        view_limits_281897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 26), base_281896, 'view_limits')
        # Calling view_limits(args, kwargs) (line 241)
        view_limits_call_result_281901 = invoke(stypy.reporting.localization.Localization(__file__, 241, 26), view_limits_281897, *[vmin_281898, vmax_281899], **kwargs_281900)
        
        # Processing the call keyword arguments (line 241)
        kwargs_281902 = {}
        # Getting the type of 'np' (line 241)
        np_281893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 15), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 241)
        deg2rad_281894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 15), np_281893, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 241)
        deg2rad_call_result_281903 = invoke(stypy.reporting.localization.Localization(__file__, 241, 15), deg2rad_281894, *[view_limits_call_result_281901], **kwargs_281902)
        
        # Assigning a type to the variable 'stypy_return_type' (line 241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 8), 'stypy_return_type', deg2rad_call_result_281903)
        
        # ################# End of 'view_limits(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'view_limits' in the type store
        # Getting the type of 'stypy_return_type' (line 239)
        stypy_return_type_281904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281904)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'view_limits'
        return stypy_return_type_281904


    @norecursion
    def zoom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'zoom'
        module_type_store = module_type_store.open_function_context('zoom', 243, 4, False)
        # Assigning a type to the variable 'self' (line 244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaLocator.zoom.__dict__.__setitem__('stypy_localization', localization)
        ThetaLocator.zoom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaLocator.zoom.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaLocator.zoom.__dict__.__setitem__('stypy_function_name', 'ThetaLocator.zoom')
        ThetaLocator.zoom.__dict__.__setitem__('stypy_param_names_list', ['direction'])
        ThetaLocator.zoom.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaLocator.zoom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaLocator.zoom.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaLocator.zoom.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaLocator.zoom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaLocator.zoom.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaLocator.zoom', ['direction'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'zoom', localization, ['direction'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'zoom(...)' code ##################

        
        # Call to zoom(...): (line 244)
        # Processing the call arguments (line 244)
        # Getting the type of 'direction' (line 244)
        direction_281908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 30), 'direction', False)
        # Processing the call keyword arguments (line 244)
        kwargs_281909 = {}
        # Getting the type of 'self' (line 244)
        self_281905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 15), 'self', False)
        # Obtaining the member 'base' of a type (line 244)
        base_281906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 15), self_281905, 'base')
        # Obtaining the member 'zoom' of a type (line 244)
        zoom_281907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 15), base_281906, 'zoom')
        # Calling zoom(args, kwargs) (line 244)
        zoom_call_result_281910 = invoke(stypy.reporting.localization.Localization(__file__, 244, 15), zoom_281907, *[direction_281908], **kwargs_281909)
        
        # Assigning a type to the variable 'stypy_return_type' (line 244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 8), 'stypy_return_type', zoom_call_result_281910)
        
        # ################# End of 'zoom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'zoom' in the type store
        # Getting the type of 'stypy_return_type' (line 243)
        stypy_return_type_281911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281911)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'zoom'
        return stypy_return_type_281911


# Assigning a type to the variable 'ThetaLocator' (line 207)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 0), 'ThetaLocator', ThetaLocator)
# Declaration of the 'ThetaTick' class
# Getting the type of 'maxis' (line 247)
maxis_281912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 16), 'maxis')
# Obtaining the member 'XTick' of a type (line 247)
XTick_281913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 16), maxis_281912, 'XTick')

class ThetaTick(XTick_281913, ):
    unicode_281914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, (-1)), 'unicode', u"\n    A theta-axis tick.\n\n    This subclass of `XTick` provides angular ticks with some small\n    modification to their re-positioning such that ticks are rotated based on\n    tick location. This results in ticks that are correctly perpendicular to\n    the arc spine.\n\n    When 'auto' rotation is enabled, labels are also rotated to be parallel to\n    the spine. The label padding is also applied here since it's not possible\n    to use a generic axes transform to produce tick-specific padding.\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 260, 4, False)
        # Assigning a type to the variable 'self' (line 261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaTick.__init__', ['axes'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['axes'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 261):
        
        # Assigning a Call to a Attribute (line 261):
        
        # Call to ScaledTranslation(...): (line 261)
        # Processing the call arguments (line 261)
        int_281917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 262, 12), 'int')
        int_281918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 262, 15), 'int')
        # Getting the type of 'axes' (line 263)
        axes_281919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 12), 'axes', False)
        # Obtaining the member 'figure' of a type (line 263)
        figure_281920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 12), axes_281919, 'figure')
        # Obtaining the member 'dpi_scale_trans' of a type (line 263)
        dpi_scale_trans_281921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 12), figure_281920, 'dpi_scale_trans')
        # Processing the call keyword arguments (line 261)
        kwargs_281922 = {}
        # Getting the type of 'mtransforms' (line 261)
        mtransforms_281915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 32), 'mtransforms', False)
        # Obtaining the member 'ScaledTranslation' of a type (line 261)
        ScaledTranslation_281916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 32), mtransforms_281915, 'ScaledTranslation')
        # Calling ScaledTranslation(args, kwargs) (line 261)
        ScaledTranslation_call_result_281923 = invoke(stypy.reporting.localization.Localization(__file__, 261, 32), ScaledTranslation_281916, *[int_281917, int_281918, dpi_scale_trans_281921], **kwargs_281922)
        
        # Getting the type of 'self' (line 261)
        self_281924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 8), 'self')
        # Setting the type of the member '_text1_translate' of a type (line 261)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 8), self_281924, '_text1_translate', ScaledTranslation_call_result_281923)
        
        # Assigning a Call to a Attribute (line 264):
        
        # Assigning a Call to a Attribute (line 264):
        
        # Call to ScaledTranslation(...): (line 264)
        # Processing the call arguments (line 264)
        int_281927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 265, 12), 'int')
        int_281928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 265, 15), 'int')
        # Getting the type of 'axes' (line 266)
        axes_281929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 12), 'axes', False)
        # Obtaining the member 'figure' of a type (line 266)
        figure_281930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 266, 12), axes_281929, 'figure')
        # Obtaining the member 'dpi_scale_trans' of a type (line 266)
        dpi_scale_trans_281931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 266, 12), figure_281930, 'dpi_scale_trans')
        # Processing the call keyword arguments (line 264)
        kwargs_281932 = {}
        # Getting the type of 'mtransforms' (line 264)
        mtransforms_281925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 32), 'mtransforms', False)
        # Obtaining the member 'ScaledTranslation' of a type (line 264)
        ScaledTranslation_281926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 264, 32), mtransforms_281925, 'ScaledTranslation')
        # Calling ScaledTranslation(args, kwargs) (line 264)
        ScaledTranslation_call_result_281933 = invoke(stypy.reporting.localization.Localization(__file__, 264, 32), ScaledTranslation_281926, *[int_281927, int_281928, dpi_scale_trans_281931], **kwargs_281932)
        
        # Getting the type of 'self' (line 264)
        self_281934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 8), 'self')
        # Setting the type of the member '_text2_translate' of a type (line 264)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 264, 8), self_281934, '_text2_translate', ScaledTranslation_call_result_281933)
        
        # Call to __init__(...): (line 267)
        # Processing the call arguments (line 267)
        # Getting the type of 'axes' (line 267)
        axes_281941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 40), 'axes', False)
        # Getting the type of 'args' (line 267)
        args_281942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 47), 'args', False)
        # Processing the call keyword arguments (line 267)
        # Getting the type of 'kwargs' (line 267)
        kwargs_281943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 55), 'kwargs', False)
        kwargs_281944 = {'kwargs_281943': kwargs_281943}
        
        # Call to super(...): (line 267)
        # Processing the call arguments (line 267)
        # Getting the type of 'ThetaTick' (line 267)
        ThetaTick_281936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 14), 'ThetaTick', False)
        # Getting the type of 'self' (line 267)
        self_281937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 25), 'self', False)
        # Processing the call keyword arguments (line 267)
        kwargs_281938 = {}
        # Getting the type of 'super' (line 267)
        super_281935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 8), 'super', False)
        # Calling super(args, kwargs) (line 267)
        super_call_result_281939 = invoke(stypy.reporting.localization.Localization(__file__, 267, 8), super_281935, *[ThetaTick_281936, self_281937], **kwargs_281938)
        
        # Obtaining the member '__init__' of a type (line 267)
        init___281940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 8), super_call_result_281939, '__init__')
        # Calling __init__(args, kwargs) (line 267)
        init___call_result_281945 = invoke(stypy.reporting.localization.Localization(__file__, 267, 8), init___281940, *[axes_281941, args_281942], **kwargs_281944)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _get_text1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text1'
        module_type_store = module_type_store.open_function_context('_get_text1', 269, 4, False)
        # Assigning a type to the variable 'self' (line 270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaTick._get_text1.__dict__.__setitem__('stypy_localization', localization)
        ThetaTick._get_text1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaTick._get_text1.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaTick._get_text1.__dict__.__setitem__('stypy_function_name', 'ThetaTick._get_text1')
        ThetaTick._get_text1.__dict__.__setitem__('stypy_param_names_list', [])
        ThetaTick._get_text1.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaTick._get_text1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaTick._get_text1.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaTick._get_text1.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaTick._get_text1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaTick._get_text1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaTick._get_text1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text1(...)' code ##################

        
        # Assigning a Call to a Name (line 270):
        
        # Assigning a Call to a Name (line 270):
        
        # Call to _get_text1(...): (line 270)
        # Processing the call keyword arguments (line 270)
        kwargs_281952 = {}
        
        # Call to super(...): (line 270)
        # Processing the call arguments (line 270)
        # Getting the type of 'ThetaTick' (line 270)
        ThetaTick_281947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 18), 'ThetaTick', False)
        # Getting the type of 'self' (line 270)
        self_281948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 29), 'self', False)
        # Processing the call keyword arguments (line 270)
        kwargs_281949 = {}
        # Getting the type of 'super' (line 270)
        super_281946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 12), 'super', False)
        # Calling super(args, kwargs) (line 270)
        super_call_result_281950 = invoke(stypy.reporting.localization.Localization(__file__, 270, 12), super_281946, *[ThetaTick_281947, self_281948], **kwargs_281949)
        
        # Obtaining the member '_get_text1' of a type (line 270)
        _get_text1_281951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 270, 12), super_call_result_281950, '_get_text1')
        # Calling _get_text1(args, kwargs) (line 270)
        _get_text1_call_result_281953 = invoke(stypy.reporting.localization.Localization(__file__, 270, 12), _get_text1_281951, *[], **kwargs_281952)
        
        # Assigning a type to the variable 't' (line 270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 8), 't', _get_text1_call_result_281953)
        
        # Call to set_rotation_mode(...): (line 271)
        # Processing the call arguments (line 271)
        unicode_281956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 28), 'unicode', u'anchor')
        # Processing the call keyword arguments (line 271)
        kwargs_281957 = {}
        # Getting the type of 't' (line 271)
        t_281954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 8), 't', False)
        # Obtaining the member 'set_rotation_mode' of a type (line 271)
        set_rotation_mode_281955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 271, 8), t_281954, 'set_rotation_mode')
        # Calling set_rotation_mode(args, kwargs) (line 271)
        set_rotation_mode_call_result_281958 = invoke(stypy.reporting.localization.Localization(__file__, 271, 8), set_rotation_mode_281955, *[unicode_281956], **kwargs_281957)
        
        
        # Call to set_transform(...): (line 272)
        # Processing the call arguments (line 272)
        
        # Call to get_transform(...): (line 272)
        # Processing the call keyword arguments (line 272)
        kwargs_281963 = {}
        # Getting the type of 't' (line 272)
        t_281961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 24), 't', False)
        # Obtaining the member 'get_transform' of a type (line 272)
        get_transform_281962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 24), t_281961, 'get_transform')
        # Calling get_transform(args, kwargs) (line 272)
        get_transform_call_result_281964 = invoke(stypy.reporting.localization.Localization(__file__, 272, 24), get_transform_281962, *[], **kwargs_281963)
        
        # Getting the type of 'self' (line 272)
        self_281965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 44), 'self', False)
        # Obtaining the member '_text1_translate' of a type (line 272)
        _text1_translate_281966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 44), self_281965, '_text1_translate')
        # Applying the binary operator '+' (line 272)
        result_add_281967 = python_operator(stypy.reporting.localization.Localization(__file__, 272, 24), '+', get_transform_call_result_281964, _text1_translate_281966)
        
        # Processing the call keyword arguments (line 272)
        kwargs_281968 = {}
        # Getting the type of 't' (line 272)
        t_281959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 8), 't', False)
        # Obtaining the member 'set_transform' of a type (line 272)
        set_transform_281960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 8), t_281959, 'set_transform')
        # Calling set_transform(args, kwargs) (line 272)
        set_transform_call_result_281969 = invoke(stypy.reporting.localization.Localization(__file__, 272, 8), set_transform_281960, *[result_add_281967], **kwargs_281968)
        
        # Getting the type of 't' (line 273)
        t_281970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 15), 't')
        # Assigning a type to the variable 'stypy_return_type' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'stypy_return_type', t_281970)
        
        # ################# End of '_get_text1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text1' in the type store
        # Getting the type of 'stypy_return_type' (line 269)
        stypy_return_type_281971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281971)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text1'
        return stypy_return_type_281971


    @norecursion
    def _get_text2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text2'
        module_type_store = module_type_store.open_function_context('_get_text2', 275, 4, False)
        # Assigning a type to the variable 'self' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaTick._get_text2.__dict__.__setitem__('stypy_localization', localization)
        ThetaTick._get_text2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaTick._get_text2.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaTick._get_text2.__dict__.__setitem__('stypy_function_name', 'ThetaTick._get_text2')
        ThetaTick._get_text2.__dict__.__setitem__('stypy_param_names_list', [])
        ThetaTick._get_text2.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaTick._get_text2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaTick._get_text2.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaTick._get_text2.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaTick._get_text2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaTick._get_text2.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaTick._get_text2', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text2', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text2(...)' code ##################

        
        # Assigning a Call to a Name (line 276):
        
        # Assigning a Call to a Name (line 276):
        
        # Call to _get_text2(...): (line 276)
        # Processing the call keyword arguments (line 276)
        kwargs_281978 = {}
        
        # Call to super(...): (line 276)
        # Processing the call arguments (line 276)
        # Getting the type of 'ThetaTick' (line 276)
        ThetaTick_281973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 18), 'ThetaTick', False)
        # Getting the type of 'self' (line 276)
        self_281974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 29), 'self', False)
        # Processing the call keyword arguments (line 276)
        kwargs_281975 = {}
        # Getting the type of 'super' (line 276)
        super_281972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 12), 'super', False)
        # Calling super(args, kwargs) (line 276)
        super_call_result_281976 = invoke(stypy.reporting.localization.Localization(__file__, 276, 12), super_281972, *[ThetaTick_281973, self_281974], **kwargs_281975)
        
        # Obtaining the member '_get_text2' of a type (line 276)
        _get_text2_281977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 12), super_call_result_281976, '_get_text2')
        # Calling _get_text2(args, kwargs) (line 276)
        _get_text2_call_result_281979 = invoke(stypy.reporting.localization.Localization(__file__, 276, 12), _get_text2_281977, *[], **kwargs_281978)
        
        # Assigning a type to the variable 't' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 8), 't', _get_text2_call_result_281979)
        
        # Call to set_rotation_mode(...): (line 277)
        # Processing the call arguments (line 277)
        unicode_281982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 28), 'unicode', u'anchor')
        # Processing the call keyword arguments (line 277)
        kwargs_281983 = {}
        # Getting the type of 't' (line 277)
        t_281980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 8), 't', False)
        # Obtaining the member 'set_rotation_mode' of a type (line 277)
        set_rotation_mode_281981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 8), t_281980, 'set_rotation_mode')
        # Calling set_rotation_mode(args, kwargs) (line 277)
        set_rotation_mode_call_result_281984 = invoke(stypy.reporting.localization.Localization(__file__, 277, 8), set_rotation_mode_281981, *[unicode_281982], **kwargs_281983)
        
        
        # Call to set_transform(...): (line 278)
        # Processing the call arguments (line 278)
        
        # Call to get_transform(...): (line 278)
        # Processing the call keyword arguments (line 278)
        kwargs_281989 = {}
        # Getting the type of 't' (line 278)
        t_281987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 24), 't', False)
        # Obtaining the member 'get_transform' of a type (line 278)
        get_transform_281988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 24), t_281987, 'get_transform')
        # Calling get_transform(args, kwargs) (line 278)
        get_transform_call_result_281990 = invoke(stypy.reporting.localization.Localization(__file__, 278, 24), get_transform_281988, *[], **kwargs_281989)
        
        # Getting the type of 'self' (line 278)
        self_281991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 44), 'self', False)
        # Obtaining the member '_text2_translate' of a type (line 278)
        _text2_translate_281992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 44), self_281991, '_text2_translate')
        # Applying the binary operator '+' (line 278)
        result_add_281993 = python_operator(stypy.reporting.localization.Localization(__file__, 278, 24), '+', get_transform_call_result_281990, _text2_translate_281992)
        
        # Processing the call keyword arguments (line 278)
        kwargs_281994 = {}
        # Getting the type of 't' (line 278)
        t_281985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 8), 't', False)
        # Obtaining the member 'set_transform' of a type (line 278)
        set_transform_281986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 8), t_281985, 'set_transform')
        # Calling set_transform(args, kwargs) (line 278)
        set_transform_call_result_281995 = invoke(stypy.reporting.localization.Localization(__file__, 278, 8), set_transform_281986, *[result_add_281993], **kwargs_281994)
        
        # Getting the type of 't' (line 279)
        t_281996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 15), 't')
        # Assigning a type to the variable 'stypy_return_type' (line 279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 8), 'stypy_return_type', t_281996)
        
        # ################# End of '_get_text2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text2' in the type store
        # Getting the type of 'stypy_return_type' (line 275)
        stypy_return_type_281997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_281997)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text2'
        return stypy_return_type_281997


    @norecursion
    def _apply_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_apply_params'
        module_type_store = module_type_store.open_function_context('_apply_params', 281, 4, False)
        # Assigning a type to the variable 'self' (line 282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaTick._apply_params.__dict__.__setitem__('stypy_localization', localization)
        ThetaTick._apply_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaTick._apply_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaTick._apply_params.__dict__.__setitem__('stypy_function_name', 'ThetaTick._apply_params')
        ThetaTick._apply_params.__dict__.__setitem__('stypy_param_names_list', [])
        ThetaTick._apply_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaTick._apply_params.__dict__.__setitem__('stypy_kwargs_param_name', 'kw')
        ThetaTick._apply_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaTick._apply_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaTick._apply_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaTick._apply_params.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaTick._apply_params', [], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_apply_params', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_apply_params(...)' code ##################

        
        # Call to _apply_params(...): (line 282)
        # Processing the call keyword arguments (line 282)
        # Getting the type of 'kw' (line 282)
        kw_282004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 47), 'kw', False)
        kwargs_282005 = {'kw_282004': kw_282004}
        
        # Call to super(...): (line 282)
        # Processing the call arguments (line 282)
        # Getting the type of 'ThetaTick' (line 282)
        ThetaTick_281999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 14), 'ThetaTick', False)
        # Getting the type of 'self' (line 282)
        self_282000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 25), 'self', False)
        # Processing the call keyword arguments (line 282)
        kwargs_282001 = {}
        # Getting the type of 'super' (line 282)
        super_281998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 8), 'super', False)
        # Calling super(args, kwargs) (line 282)
        super_call_result_282002 = invoke(stypy.reporting.localization.Localization(__file__, 282, 8), super_281998, *[ThetaTick_281999, self_282000], **kwargs_282001)
        
        # Obtaining the member '_apply_params' of a type (line 282)
        _apply_params_282003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 282, 8), super_call_result_282002, '_apply_params')
        # Calling _apply_params(args, kwargs) (line 282)
        _apply_params_call_result_282006 = invoke(stypy.reporting.localization.Localization(__file__, 282, 8), _apply_params_282003, *[], **kwargs_282005)
        
        
        # Assigning a Call to a Name (line 285):
        
        # Assigning a Call to a Name (line 285):
        
        # Call to get_transform(...): (line 285)
        # Processing the call keyword arguments (line 285)
        kwargs_282010 = {}
        # Getting the type of 'self' (line 285)
        self_282007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 16), 'self', False)
        # Obtaining the member 'label1' of a type (line 285)
        label1_282008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 285, 16), self_282007, 'label1')
        # Obtaining the member 'get_transform' of a type (line 285)
        get_transform_282009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 285, 16), label1_282008, 'get_transform')
        # Calling get_transform(args, kwargs) (line 285)
        get_transform_call_result_282011 = invoke(stypy.reporting.localization.Localization(__file__, 285, 16), get_transform_282009, *[], **kwargs_282010)
        
        # Assigning a type to the variable 'trans' (line 285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 8), 'trans', get_transform_call_result_282011)
        
        
        
        # Call to contains_branch(...): (line 286)
        # Processing the call arguments (line 286)
        # Getting the type of 'self' (line 286)
        self_282014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 37), 'self', False)
        # Obtaining the member '_text1_translate' of a type (line 286)
        _text1_translate_282015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 37), self_282014, '_text1_translate')
        # Processing the call keyword arguments (line 286)
        kwargs_282016 = {}
        # Getting the type of 'trans' (line 286)
        trans_282012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 15), 'trans', False)
        # Obtaining the member 'contains_branch' of a type (line 286)
        contains_branch_282013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 15), trans_282012, 'contains_branch')
        # Calling contains_branch(args, kwargs) (line 286)
        contains_branch_call_result_282017 = invoke(stypy.reporting.localization.Localization(__file__, 286, 15), contains_branch_282013, *[_text1_translate_282015], **kwargs_282016)
        
        # Applying the 'not' unary operator (line 286)
        result_not__282018 = python_operator(stypy.reporting.localization.Localization(__file__, 286, 11), 'not', contains_branch_call_result_282017)
        
        # Testing the type of an if condition (line 286)
        if_condition_282019 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 286, 8), result_not__282018)
        # Assigning a type to the variable 'if_condition_282019' (line 286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 8), 'if_condition_282019', if_condition_282019)
        # SSA begins for if statement (line 286)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_transform(...): (line 287)
        # Processing the call arguments (line 287)
        # Getting the type of 'trans' (line 287)
        trans_282023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 38), 'trans', False)
        # Getting the type of 'self' (line 287)
        self_282024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 46), 'self', False)
        # Obtaining the member '_text1_translate' of a type (line 287)
        _text1_translate_282025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 46), self_282024, '_text1_translate')
        # Applying the binary operator '+' (line 287)
        result_add_282026 = python_operator(stypy.reporting.localization.Localization(__file__, 287, 38), '+', trans_282023, _text1_translate_282025)
        
        # Processing the call keyword arguments (line 287)
        kwargs_282027 = {}
        # Getting the type of 'self' (line 287)
        self_282020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 12), 'self', False)
        # Obtaining the member 'label1' of a type (line 287)
        label1_282021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 12), self_282020, 'label1')
        # Obtaining the member 'set_transform' of a type (line 287)
        set_transform_282022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 12), label1_282021, 'set_transform')
        # Calling set_transform(args, kwargs) (line 287)
        set_transform_call_result_282028 = invoke(stypy.reporting.localization.Localization(__file__, 287, 12), set_transform_282022, *[result_add_282026], **kwargs_282027)
        
        # SSA join for if statement (line 286)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 288):
        
        # Assigning a Call to a Name (line 288):
        
        # Call to get_transform(...): (line 288)
        # Processing the call keyword arguments (line 288)
        kwargs_282032 = {}
        # Getting the type of 'self' (line 288)
        self_282029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 16), 'self', False)
        # Obtaining the member 'label2' of a type (line 288)
        label2_282030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 16), self_282029, 'label2')
        # Obtaining the member 'get_transform' of a type (line 288)
        get_transform_282031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 16), label2_282030, 'get_transform')
        # Calling get_transform(args, kwargs) (line 288)
        get_transform_call_result_282033 = invoke(stypy.reporting.localization.Localization(__file__, 288, 16), get_transform_282031, *[], **kwargs_282032)
        
        # Assigning a type to the variable 'trans' (line 288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 288, 8), 'trans', get_transform_call_result_282033)
        
        
        
        # Call to contains_branch(...): (line 289)
        # Processing the call arguments (line 289)
        # Getting the type of 'self' (line 289)
        self_282036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 37), 'self', False)
        # Obtaining the member '_text2_translate' of a type (line 289)
        _text2_translate_282037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 37), self_282036, '_text2_translate')
        # Processing the call keyword arguments (line 289)
        kwargs_282038 = {}
        # Getting the type of 'trans' (line 289)
        trans_282034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 15), 'trans', False)
        # Obtaining the member 'contains_branch' of a type (line 289)
        contains_branch_282035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 15), trans_282034, 'contains_branch')
        # Calling contains_branch(args, kwargs) (line 289)
        contains_branch_call_result_282039 = invoke(stypy.reporting.localization.Localization(__file__, 289, 15), contains_branch_282035, *[_text2_translate_282037], **kwargs_282038)
        
        # Applying the 'not' unary operator (line 289)
        result_not__282040 = python_operator(stypy.reporting.localization.Localization(__file__, 289, 11), 'not', contains_branch_call_result_282039)
        
        # Testing the type of an if condition (line 289)
        if_condition_282041 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 289, 8), result_not__282040)
        # Assigning a type to the variable 'if_condition_282041' (line 289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 289, 8), 'if_condition_282041', if_condition_282041)
        # SSA begins for if statement (line 289)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_transform(...): (line 290)
        # Processing the call arguments (line 290)
        # Getting the type of 'trans' (line 290)
        trans_282045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 38), 'trans', False)
        # Getting the type of 'self' (line 290)
        self_282046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 46), 'self', False)
        # Obtaining the member '_text2_translate' of a type (line 290)
        _text2_translate_282047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 46), self_282046, '_text2_translate')
        # Applying the binary operator '+' (line 290)
        result_add_282048 = python_operator(stypy.reporting.localization.Localization(__file__, 290, 38), '+', trans_282045, _text2_translate_282047)
        
        # Processing the call keyword arguments (line 290)
        kwargs_282049 = {}
        # Getting the type of 'self' (line 290)
        self_282042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 12), 'self', False)
        # Obtaining the member 'label2' of a type (line 290)
        label2_282043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 12), self_282042, 'label2')
        # Obtaining the member 'set_transform' of a type (line 290)
        set_transform_282044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 12), label2_282043, 'set_transform')
        # Calling set_transform(args, kwargs) (line 290)
        set_transform_call_result_282050 = invoke(stypy.reporting.localization.Localization(__file__, 290, 12), set_transform_282044, *[result_add_282048], **kwargs_282049)
        
        # SSA join for if statement (line 289)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_apply_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_apply_params' in the type store
        # Getting the type of 'stypy_return_type' (line 281)
        stypy_return_type_282051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282051)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_apply_params'
        return stypy_return_type_282051


    @norecursion
    def _update_padding(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_padding'
        module_type_store = module_type_store.open_function_context('_update_padding', 292, 4, False)
        # Assigning a type to the variable 'self' (line 293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 293, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaTick._update_padding.__dict__.__setitem__('stypy_localization', localization)
        ThetaTick._update_padding.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaTick._update_padding.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaTick._update_padding.__dict__.__setitem__('stypy_function_name', 'ThetaTick._update_padding')
        ThetaTick._update_padding.__dict__.__setitem__('stypy_param_names_list', ['pad', 'angle'])
        ThetaTick._update_padding.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaTick._update_padding.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaTick._update_padding.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaTick._update_padding.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaTick._update_padding.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaTick._update_padding.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaTick._update_padding', ['pad', 'angle'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_padding', localization, ['pad', 'angle'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_padding(...)' code ##################

        
        # Assigning a BinOp to a Name (line 293):
        
        # Assigning a BinOp to a Name (line 293):
        # Getting the type of 'pad' (line 293)
        pad_282052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 15), 'pad')
        
        # Call to cos(...): (line 293)
        # Processing the call arguments (line 293)
        # Getting the type of 'angle' (line 293)
        angle_282055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 28), 'angle', False)
        # Processing the call keyword arguments (line 293)
        kwargs_282056 = {}
        # Getting the type of 'np' (line 293)
        np_282053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 21), 'np', False)
        # Obtaining the member 'cos' of a type (line 293)
        cos_282054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 21), np_282053, 'cos')
        # Calling cos(args, kwargs) (line 293)
        cos_call_result_282057 = invoke(stypy.reporting.localization.Localization(__file__, 293, 21), cos_282054, *[angle_282055], **kwargs_282056)
        
        # Applying the binary operator '*' (line 293)
        result_mul_282058 = python_operator(stypy.reporting.localization.Localization(__file__, 293, 15), '*', pad_282052, cos_call_result_282057)
        
        int_282059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 37), 'int')
        # Applying the binary operator 'div' (line 293)
        result_div_282060 = python_operator(stypy.reporting.localization.Localization(__file__, 293, 35), 'div', result_mul_282058, int_282059)
        
        # Assigning a type to the variable 'padx' (line 293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 293, 8), 'padx', result_div_282060)
        
        # Assigning a BinOp to a Name (line 294):
        
        # Assigning a BinOp to a Name (line 294):
        # Getting the type of 'pad' (line 294)
        pad_282061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 15), 'pad')
        
        # Call to sin(...): (line 294)
        # Processing the call arguments (line 294)
        # Getting the type of 'angle' (line 294)
        angle_282064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 28), 'angle', False)
        # Processing the call keyword arguments (line 294)
        kwargs_282065 = {}
        # Getting the type of 'np' (line 294)
        np_282062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 21), 'np', False)
        # Obtaining the member 'sin' of a type (line 294)
        sin_282063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 294, 21), np_282062, 'sin')
        # Calling sin(args, kwargs) (line 294)
        sin_call_result_282066 = invoke(stypy.reporting.localization.Localization(__file__, 294, 21), sin_282063, *[angle_282064], **kwargs_282065)
        
        # Applying the binary operator '*' (line 294)
        result_mul_282067 = python_operator(stypy.reporting.localization.Localization(__file__, 294, 15), '*', pad_282061, sin_call_result_282066)
        
        int_282068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, 37), 'int')
        # Applying the binary operator 'div' (line 294)
        result_div_282069 = python_operator(stypy.reporting.localization.Localization(__file__, 294, 35), 'div', result_mul_282067, int_282068)
        
        # Assigning a type to the variable 'pady' (line 294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 294, 8), 'pady', result_div_282069)
        
        # Assigning a Tuple to a Attribute (line 295):
        
        # Assigning a Tuple to a Attribute (line 295):
        
        # Obtaining an instance of the builtin type 'tuple' (line 295)
        tuple_282070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 295)
        # Adding element type (line 295)
        # Getting the type of 'padx' (line 295)
        padx_282071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 36), 'padx')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 295, 36), tuple_282070, padx_282071)
        # Adding element type (line 295)
        # Getting the type of 'pady' (line 295)
        pady_282072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 42), 'pady')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 295, 36), tuple_282070, pady_282072)
        
        # Getting the type of 'self' (line 295)
        self_282073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 8), 'self')
        # Obtaining the member '_text1_translate' of a type (line 295)
        _text1_translate_282074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 8), self_282073, '_text1_translate')
        # Setting the type of the member '_t' of a type (line 295)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 8), _text1_translate_282074, '_t', tuple_282070)
        
        # Call to invalidate(...): (line 296)
        # Processing the call keyword arguments (line 296)
        kwargs_282078 = {}
        # Getting the type of 'self' (line 296)
        self_282075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 8), 'self', False)
        # Obtaining the member '_text1_translate' of a type (line 296)
        _text1_translate_282076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 8), self_282075, '_text1_translate')
        # Obtaining the member 'invalidate' of a type (line 296)
        invalidate_282077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 8), _text1_translate_282076, 'invalidate')
        # Calling invalidate(args, kwargs) (line 296)
        invalidate_call_result_282079 = invoke(stypy.reporting.localization.Localization(__file__, 296, 8), invalidate_282077, *[], **kwargs_282078)
        
        
        # Assigning a Tuple to a Attribute (line 297):
        
        # Assigning a Tuple to a Attribute (line 297):
        
        # Obtaining an instance of the builtin type 'tuple' (line 297)
        tuple_282080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 297)
        # Adding element type (line 297)
        
        # Getting the type of 'padx' (line 297)
        padx_282081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 37), 'padx')
        # Applying the 'usub' unary operator (line 297)
        result___neg___282082 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 36), 'usub', padx_282081)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 297, 36), tuple_282080, result___neg___282082)
        # Adding element type (line 297)
        
        # Getting the type of 'pady' (line 297)
        pady_282083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 44), 'pady')
        # Applying the 'usub' unary operator (line 297)
        result___neg___282084 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 43), 'usub', pady_282083)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 297, 36), tuple_282080, result___neg___282084)
        
        # Getting the type of 'self' (line 297)
        self_282085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'self')
        # Obtaining the member '_text2_translate' of a type (line 297)
        _text2_translate_282086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 8), self_282085, '_text2_translate')
        # Setting the type of the member '_t' of a type (line 297)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 8), _text2_translate_282086, '_t', tuple_282080)
        
        # Call to invalidate(...): (line 298)
        # Processing the call keyword arguments (line 298)
        kwargs_282090 = {}
        # Getting the type of 'self' (line 298)
        self_282087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 8), 'self', False)
        # Obtaining the member '_text2_translate' of a type (line 298)
        _text2_translate_282088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 8), self_282087, '_text2_translate')
        # Obtaining the member 'invalidate' of a type (line 298)
        invalidate_282089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 8), _text2_translate_282088, 'invalidate')
        # Calling invalidate(args, kwargs) (line 298)
        invalidate_call_result_282091 = invoke(stypy.reporting.localization.Localization(__file__, 298, 8), invalidate_282089, *[], **kwargs_282090)
        
        
        # ################# End of '_update_padding(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_padding' in the type store
        # Getting the type of 'stypy_return_type' (line 292)
        stypy_return_type_282092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282092)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_padding'
        return stypy_return_type_282092


    @norecursion
    def update_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_position'
        module_type_store = module_type_store.open_function_context('update_position', 300, 4, False)
        # Assigning a type to the variable 'self' (line 301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaTick.update_position.__dict__.__setitem__('stypy_localization', localization)
        ThetaTick.update_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaTick.update_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaTick.update_position.__dict__.__setitem__('stypy_function_name', 'ThetaTick.update_position')
        ThetaTick.update_position.__dict__.__setitem__('stypy_param_names_list', ['loc'])
        ThetaTick.update_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaTick.update_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaTick.update_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaTick.update_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaTick.update_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaTick.update_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaTick.update_position', ['loc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_position', localization, ['loc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_position(...)' code ##################

        
        # Call to update_position(...): (line 301)
        # Processing the call arguments (line 301)
        # Getting the type of 'loc' (line 301)
        loc_282099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 47), 'loc', False)
        # Processing the call keyword arguments (line 301)
        kwargs_282100 = {}
        
        # Call to super(...): (line 301)
        # Processing the call arguments (line 301)
        # Getting the type of 'ThetaTick' (line 301)
        ThetaTick_282094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 14), 'ThetaTick', False)
        # Getting the type of 'self' (line 301)
        self_282095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 25), 'self', False)
        # Processing the call keyword arguments (line 301)
        kwargs_282096 = {}
        # Getting the type of 'super' (line 301)
        super_282093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 8), 'super', False)
        # Calling super(args, kwargs) (line 301)
        super_call_result_282097 = invoke(stypy.reporting.localization.Localization(__file__, 301, 8), super_282093, *[ThetaTick_282094, self_282095], **kwargs_282096)
        
        # Obtaining the member 'update_position' of a type (line 301)
        update_position_282098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 8), super_call_result_282097, 'update_position')
        # Calling update_position(args, kwargs) (line 301)
        update_position_call_result_282101 = invoke(stypy.reporting.localization.Localization(__file__, 301, 8), update_position_282098, *[loc_282099], **kwargs_282100)
        
        
        # Assigning a Attribute to a Name (line 302):
        
        # Assigning a Attribute to a Name (line 302):
        # Getting the type of 'self' (line 302)
        self_282102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 15), 'self')
        # Obtaining the member 'axes' of a type (line 302)
        axes_282103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 15), self_282102, 'axes')
        # Assigning a type to the variable 'axes' (line 302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 302, 8), 'axes', axes_282103)
        
        # Assigning a BinOp to a Name (line 303):
        
        # Assigning a BinOp to a Name (line 303):
        # Getting the type of 'loc' (line 303)
        loc_282104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 17), 'loc')
        
        # Call to get_theta_direction(...): (line 303)
        # Processing the call keyword arguments (line 303)
        kwargs_282107 = {}
        # Getting the type of 'axes' (line 303)
        axes_282105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 23), 'axes', False)
        # Obtaining the member 'get_theta_direction' of a type (line 303)
        get_theta_direction_282106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 303, 23), axes_282105, 'get_theta_direction')
        # Calling get_theta_direction(args, kwargs) (line 303)
        get_theta_direction_call_result_282108 = invoke(stypy.reporting.localization.Localization(__file__, 303, 23), get_theta_direction_282106, *[], **kwargs_282107)
        
        # Applying the binary operator '*' (line 303)
        result_mul_282109 = python_operator(stypy.reporting.localization.Localization(__file__, 303, 17), '*', loc_282104, get_theta_direction_call_result_282108)
        
        
        # Call to get_theta_offset(...): (line 304)
        # Processing the call keyword arguments (line 304)
        kwargs_282112 = {}
        # Getting the type of 'axes' (line 304)
        axes_282110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 17), 'axes', False)
        # Obtaining the member 'get_theta_offset' of a type (line 304)
        get_theta_offset_282111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 17), axes_282110, 'get_theta_offset')
        # Calling get_theta_offset(args, kwargs) (line 304)
        get_theta_offset_call_result_282113 = invoke(stypy.reporting.localization.Localization(__file__, 304, 17), get_theta_offset_282111, *[], **kwargs_282112)
        
        # Applying the binary operator '+' (line 303)
        result_add_282114 = python_operator(stypy.reporting.localization.Localization(__file__, 303, 17), '+', result_mul_282109, get_theta_offset_call_result_282113)
        
        # Getting the type of 'np' (line 304)
        np_282115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 43), 'np')
        # Obtaining the member 'pi' of a type (line 304)
        pi_282116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 43), np_282115, 'pi')
        int_282117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 304, 51), 'int')
        # Applying the binary operator 'div' (line 304)
        result_div_282118 = python_operator(stypy.reporting.localization.Localization(__file__, 304, 43), 'div', pi_282116, int_282117)
        
        # Applying the binary operator '-' (line 304)
        result_sub_282119 = python_operator(stypy.reporting.localization.Localization(__file__, 304, 41), '-', result_add_282114, result_div_282118)
        
        # Assigning a type to the variable 'angle' (line 303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 303, 8), 'angle', result_sub_282119)
        
        # Getting the type of 'self' (line 306)
        self_282120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 11), 'self')
        # Obtaining the member 'tick1On' of a type (line 306)
        tick1On_282121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 11), self_282120, 'tick1On')
        # Testing the type of an if condition (line 306)
        if_condition_282122 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 306, 8), tick1On_282121)
        # Assigning a type to the variable 'if_condition_282122' (line 306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 8), 'if_condition_282122', if_condition_282122)
        # SSA begins for if statement (line 306)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 307):
        
        # Assigning a Call to a Name (line 307):
        
        # Call to get_marker(...): (line 307)
        # Processing the call keyword arguments (line 307)
        kwargs_282126 = {}
        # Getting the type of 'self' (line 307)
        self_282123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 21), 'self', False)
        # Obtaining the member 'tick1line' of a type (line 307)
        tick1line_282124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 307, 21), self_282123, 'tick1line')
        # Obtaining the member 'get_marker' of a type (line 307)
        get_marker_282125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 307, 21), tick1line_282124, 'get_marker')
        # Calling get_marker(args, kwargs) (line 307)
        get_marker_call_result_282127 = invoke(stypy.reporting.localization.Localization(__file__, 307, 21), get_marker_282125, *[], **kwargs_282126)
        
        # Assigning a type to the variable 'marker' (line 307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 307, 12), 'marker', get_marker_call_result_282127)
        
        
        # Getting the type of 'marker' (line 308)
        marker_282128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 15), 'marker')
        
        # Obtaining an instance of the builtin type 'tuple' (line 308)
        tuple_282129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 308)
        # Adding element type (line 308)
        # Getting the type of 'mmarkers' (line 308)
        mmarkers_282130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 26), 'mmarkers')
        # Obtaining the member 'TICKUP' of a type (line 308)
        TICKUP_282131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 26), mmarkers_282130, 'TICKUP')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 308, 26), tuple_282129, TICKUP_282131)
        # Adding element type (line 308)
        unicode_282132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 43), 'unicode', u'|')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 308, 26), tuple_282129, unicode_282132)
        
        # Applying the binary operator 'in' (line 308)
        result_contains_282133 = python_operator(stypy.reporting.localization.Localization(__file__, 308, 15), 'in', marker_282128, tuple_282129)
        
        # Testing the type of an if condition (line 308)
        if_condition_282134 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 308, 12), result_contains_282133)
        # Assigning a type to the variable 'if_condition_282134' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 12), 'if_condition_282134', if_condition_282134)
        # SSA begins for if statement (line 308)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 309):
        
        # Assigning a Call to a Name (line 309):
        
        # Call to rotate(...): (line 309)
        # Processing the call arguments (line 309)
        # Getting the type of 'angle' (line 309)
        angle_282145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 70), 'angle', False)
        # Processing the call keyword arguments (line 309)
        kwargs_282146 = {}
        
        # Call to scale(...): (line 309)
        # Processing the call arguments (line 309)
        float_282140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 309, 53), 'float')
        float_282141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 309, 58), 'float')
        # Processing the call keyword arguments (line 309)
        kwargs_282142 = {}
        
        # Call to Affine2D(...): (line 309)
        # Processing the call keyword arguments (line 309)
        kwargs_282137 = {}
        # Getting the type of 'mtransforms' (line 309)
        mtransforms_282135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 24), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 309)
        Affine2D_282136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 24), mtransforms_282135, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 309)
        Affine2D_call_result_282138 = invoke(stypy.reporting.localization.Localization(__file__, 309, 24), Affine2D_282136, *[], **kwargs_282137)
        
        # Obtaining the member 'scale' of a type (line 309)
        scale_282139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 24), Affine2D_call_result_282138, 'scale')
        # Calling scale(args, kwargs) (line 309)
        scale_call_result_282143 = invoke(stypy.reporting.localization.Localization(__file__, 309, 24), scale_282139, *[float_282140, float_282141], **kwargs_282142)
        
        # Obtaining the member 'rotate' of a type (line 309)
        rotate_282144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 24), scale_call_result_282143, 'rotate')
        # Calling rotate(args, kwargs) (line 309)
        rotate_call_result_282147 = invoke(stypy.reporting.localization.Localization(__file__, 309, 24), rotate_282144, *[angle_282145], **kwargs_282146)
        
        # Assigning a type to the variable 'trans' (line 309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 16), 'trans', rotate_call_result_282147)
        # SSA branch for the else part of an if statement (line 308)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'marker' (line 310)
        marker_282148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 17), 'marker')
        # Getting the type of 'mmarkers' (line 310)
        mmarkers_282149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 27), 'mmarkers')
        # Obtaining the member 'TICKDOWN' of a type (line 310)
        TICKDOWN_282150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 27), mmarkers_282149, 'TICKDOWN')
        # Applying the binary operator '==' (line 310)
        result_eq_282151 = python_operator(stypy.reporting.localization.Localization(__file__, 310, 17), '==', marker_282148, TICKDOWN_282150)
        
        # Testing the type of an if condition (line 310)
        if_condition_282152 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 310, 17), result_eq_282151)
        # Assigning a type to the variable 'if_condition_282152' (line 310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 17), 'if_condition_282152', if_condition_282152)
        # SSA begins for if statement (line 310)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 311):
        
        # Assigning a Call to a Name (line 311):
        
        # Call to rotate(...): (line 311)
        # Processing the call arguments (line 311)
        # Getting the type of 'angle' (line 311)
        angle_282163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 71), 'angle', False)
        # Processing the call keyword arguments (line 311)
        kwargs_282164 = {}
        
        # Call to scale(...): (line 311)
        # Processing the call arguments (line 311)
        float_282158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 311, 53), 'float')
        float_282159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 311, 58), 'float')
        # Processing the call keyword arguments (line 311)
        kwargs_282160 = {}
        
        # Call to Affine2D(...): (line 311)
        # Processing the call keyword arguments (line 311)
        kwargs_282155 = {}
        # Getting the type of 'mtransforms' (line 311)
        mtransforms_282153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 24), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 311)
        Affine2D_282154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 24), mtransforms_282153, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 311)
        Affine2D_call_result_282156 = invoke(stypy.reporting.localization.Localization(__file__, 311, 24), Affine2D_282154, *[], **kwargs_282155)
        
        # Obtaining the member 'scale' of a type (line 311)
        scale_282157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 24), Affine2D_call_result_282156, 'scale')
        # Calling scale(args, kwargs) (line 311)
        scale_call_result_282161 = invoke(stypy.reporting.localization.Localization(__file__, 311, 24), scale_282157, *[float_282158, float_282159], **kwargs_282160)
        
        # Obtaining the member 'rotate' of a type (line 311)
        rotate_282162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 24), scale_call_result_282161, 'rotate')
        # Calling rotate(args, kwargs) (line 311)
        rotate_call_result_282165 = invoke(stypy.reporting.localization.Localization(__file__, 311, 24), rotate_282162, *[angle_282163], **kwargs_282164)
        
        # Assigning a type to the variable 'trans' (line 311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 311, 16), 'trans', rotate_call_result_282165)
        # SSA branch for the else part of an if statement (line 310)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 314):
        
        # Assigning a Attribute to a Name (line 314):
        # Getting the type of 'self' (line 314)
        self_282166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 24), 'self')
        # Obtaining the member 'tick1line' of a type (line 314)
        tick1line_282167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 24), self_282166, 'tick1line')
        # Obtaining the member '_marker' of a type (line 314)
        _marker_282168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 24), tick1line_282167, '_marker')
        # Obtaining the member '_transform' of a type (line 314)
        _transform_282169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 24), _marker_282168, '_transform')
        # Assigning a type to the variable 'trans' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 16), 'trans', _transform_282169)
        # SSA join for if statement (line 310)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 308)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 315):
        
        # Assigning a Name to a Attribute (line 315):
        # Getting the type of 'trans' (line 315)
        trans_282170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 48), 'trans')
        # Getting the type of 'self' (line 315)
        self_282171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 12), 'self')
        # Obtaining the member 'tick1line' of a type (line 315)
        tick1line_282172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 12), self_282171, 'tick1line')
        # Obtaining the member '_marker' of a type (line 315)
        _marker_282173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 12), tick1line_282172, '_marker')
        # Setting the type of the member '_transform' of a type (line 315)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 12), _marker_282173, '_transform', trans_282170)
        # SSA join for if statement (line 306)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 316)
        self_282174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 11), 'self')
        # Obtaining the member 'tick2On' of a type (line 316)
        tick2On_282175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 316, 11), self_282174, 'tick2On')
        # Testing the type of an if condition (line 316)
        if_condition_282176 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 316, 8), tick2On_282175)
        # Assigning a type to the variable 'if_condition_282176' (line 316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 316, 8), 'if_condition_282176', if_condition_282176)
        # SSA begins for if statement (line 316)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 317):
        
        # Assigning a Call to a Name (line 317):
        
        # Call to get_marker(...): (line 317)
        # Processing the call keyword arguments (line 317)
        kwargs_282180 = {}
        # Getting the type of 'self' (line 317)
        self_282177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 21), 'self', False)
        # Obtaining the member 'tick2line' of a type (line 317)
        tick2line_282178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 21), self_282177, 'tick2line')
        # Obtaining the member 'get_marker' of a type (line 317)
        get_marker_282179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 21), tick2line_282178, 'get_marker')
        # Calling get_marker(args, kwargs) (line 317)
        get_marker_call_result_282181 = invoke(stypy.reporting.localization.Localization(__file__, 317, 21), get_marker_282179, *[], **kwargs_282180)
        
        # Assigning a type to the variable 'marker' (line 317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 12), 'marker', get_marker_call_result_282181)
        
        
        # Getting the type of 'marker' (line 318)
        marker_282182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 15), 'marker')
        
        # Obtaining an instance of the builtin type 'tuple' (line 318)
        tuple_282183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 318)
        # Adding element type (line 318)
        # Getting the type of 'mmarkers' (line 318)
        mmarkers_282184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 26), 'mmarkers')
        # Obtaining the member 'TICKUP' of a type (line 318)
        TICKUP_282185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 26), mmarkers_282184, 'TICKUP')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 318, 26), tuple_282183, TICKUP_282185)
        # Adding element type (line 318)
        unicode_282186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 43), 'unicode', u'|')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 318, 26), tuple_282183, unicode_282186)
        
        # Applying the binary operator 'in' (line 318)
        result_contains_282187 = python_operator(stypy.reporting.localization.Localization(__file__, 318, 15), 'in', marker_282182, tuple_282183)
        
        # Testing the type of an if condition (line 318)
        if_condition_282188 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 318, 12), result_contains_282187)
        # Assigning a type to the variable 'if_condition_282188' (line 318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 12), 'if_condition_282188', if_condition_282188)
        # SSA begins for if statement (line 318)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 319):
        
        # Assigning a Call to a Name (line 319):
        
        # Call to rotate(...): (line 319)
        # Processing the call arguments (line 319)
        # Getting the type of 'angle' (line 319)
        angle_282199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 70), 'angle', False)
        # Processing the call keyword arguments (line 319)
        kwargs_282200 = {}
        
        # Call to scale(...): (line 319)
        # Processing the call arguments (line 319)
        float_282194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 53), 'float')
        float_282195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 58), 'float')
        # Processing the call keyword arguments (line 319)
        kwargs_282196 = {}
        
        # Call to Affine2D(...): (line 319)
        # Processing the call keyword arguments (line 319)
        kwargs_282191 = {}
        # Getting the type of 'mtransforms' (line 319)
        mtransforms_282189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 24), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 319)
        Affine2D_282190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 24), mtransforms_282189, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 319)
        Affine2D_call_result_282192 = invoke(stypy.reporting.localization.Localization(__file__, 319, 24), Affine2D_282190, *[], **kwargs_282191)
        
        # Obtaining the member 'scale' of a type (line 319)
        scale_282193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 24), Affine2D_call_result_282192, 'scale')
        # Calling scale(args, kwargs) (line 319)
        scale_call_result_282197 = invoke(stypy.reporting.localization.Localization(__file__, 319, 24), scale_282193, *[float_282194, float_282195], **kwargs_282196)
        
        # Obtaining the member 'rotate' of a type (line 319)
        rotate_282198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 24), scale_call_result_282197, 'rotate')
        # Calling rotate(args, kwargs) (line 319)
        rotate_call_result_282201 = invoke(stypy.reporting.localization.Localization(__file__, 319, 24), rotate_282198, *[angle_282199], **kwargs_282200)
        
        # Assigning a type to the variable 'trans' (line 319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 319, 16), 'trans', rotate_call_result_282201)
        # SSA branch for the else part of an if statement (line 318)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'marker' (line 320)
        marker_282202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 17), 'marker')
        # Getting the type of 'mmarkers' (line 320)
        mmarkers_282203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 27), 'mmarkers')
        # Obtaining the member 'TICKDOWN' of a type (line 320)
        TICKDOWN_282204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 27), mmarkers_282203, 'TICKDOWN')
        # Applying the binary operator '==' (line 320)
        result_eq_282205 = python_operator(stypy.reporting.localization.Localization(__file__, 320, 17), '==', marker_282202, TICKDOWN_282204)
        
        # Testing the type of an if condition (line 320)
        if_condition_282206 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 320, 17), result_eq_282205)
        # Assigning a type to the variable 'if_condition_282206' (line 320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 320, 17), 'if_condition_282206', if_condition_282206)
        # SSA begins for if statement (line 320)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 321):
        
        # Assigning a Call to a Name (line 321):
        
        # Call to rotate(...): (line 321)
        # Processing the call arguments (line 321)
        # Getting the type of 'angle' (line 321)
        angle_282217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 71), 'angle', False)
        # Processing the call keyword arguments (line 321)
        kwargs_282218 = {}
        
        # Call to scale(...): (line 321)
        # Processing the call arguments (line 321)
        float_282212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, 53), 'float')
        float_282213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, 58), 'float')
        # Processing the call keyword arguments (line 321)
        kwargs_282214 = {}
        
        # Call to Affine2D(...): (line 321)
        # Processing the call keyword arguments (line 321)
        kwargs_282209 = {}
        # Getting the type of 'mtransforms' (line 321)
        mtransforms_282207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 24), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 321)
        Affine2D_282208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 24), mtransforms_282207, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 321)
        Affine2D_call_result_282210 = invoke(stypy.reporting.localization.Localization(__file__, 321, 24), Affine2D_282208, *[], **kwargs_282209)
        
        # Obtaining the member 'scale' of a type (line 321)
        scale_282211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 24), Affine2D_call_result_282210, 'scale')
        # Calling scale(args, kwargs) (line 321)
        scale_call_result_282215 = invoke(stypy.reporting.localization.Localization(__file__, 321, 24), scale_282211, *[float_282212, float_282213], **kwargs_282214)
        
        # Obtaining the member 'rotate' of a type (line 321)
        rotate_282216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 24), scale_call_result_282215, 'rotate')
        # Calling rotate(args, kwargs) (line 321)
        rotate_call_result_282219 = invoke(stypy.reporting.localization.Localization(__file__, 321, 24), rotate_282216, *[angle_282217], **kwargs_282218)
        
        # Assigning a type to the variable 'trans' (line 321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 16), 'trans', rotate_call_result_282219)
        # SSA branch for the else part of an if statement (line 320)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 324):
        
        # Assigning a Attribute to a Name (line 324):
        # Getting the type of 'self' (line 324)
        self_282220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 24), 'self')
        # Obtaining the member 'tick2line' of a type (line 324)
        tick2line_282221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 24), self_282220, 'tick2line')
        # Obtaining the member '_marker' of a type (line 324)
        _marker_282222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 24), tick2line_282221, '_marker')
        # Obtaining the member '_transform' of a type (line 324)
        _transform_282223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 24), _marker_282222, '_transform')
        # Assigning a type to the variable 'trans' (line 324)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 324, 16), 'trans', _transform_282223)
        # SSA join for if statement (line 320)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 318)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 325):
        
        # Assigning a Name to a Attribute (line 325):
        # Getting the type of 'trans' (line 325)
        trans_282224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 48), 'trans')
        # Getting the type of 'self' (line 325)
        self_282225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 12), 'self')
        # Obtaining the member 'tick2line' of a type (line 325)
        tick2line_282226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 12), self_282225, 'tick2line')
        # Obtaining the member '_marker' of a type (line 325)
        _marker_282227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 12), tick2line_282226, '_marker')
        # Setting the type of the member '_transform' of a type (line 325)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 12), _marker_282227, '_transform', trans_282224)
        # SSA join for if statement (line 316)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Tuple (line 327):
        
        # Assigning a Subscript to a Name (line 327):
        
        # Obtaining the type of the subscript
        int_282228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 8), 'int')
        # Getting the type of 'self' (line 327)
        self_282229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 27), 'self')
        # Obtaining the member '_labelrotation' of a type (line 327)
        _labelrotation_282230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 27), self_282229, '_labelrotation')
        # Obtaining the member '__getitem__' of a type (line 327)
        getitem___282231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 8), _labelrotation_282230, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 327)
        subscript_call_result_282232 = invoke(stypy.reporting.localization.Localization(__file__, 327, 8), getitem___282231, int_282228)
        
        # Assigning a type to the variable 'tuple_var_assignment_281120' (line 327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'tuple_var_assignment_281120', subscript_call_result_282232)
        
        # Assigning a Subscript to a Name (line 327):
        
        # Obtaining the type of the subscript
        int_282233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 8), 'int')
        # Getting the type of 'self' (line 327)
        self_282234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 27), 'self')
        # Obtaining the member '_labelrotation' of a type (line 327)
        _labelrotation_282235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 27), self_282234, '_labelrotation')
        # Obtaining the member '__getitem__' of a type (line 327)
        getitem___282236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 8), _labelrotation_282235, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 327)
        subscript_call_result_282237 = invoke(stypy.reporting.localization.Localization(__file__, 327, 8), getitem___282236, int_282233)
        
        # Assigning a type to the variable 'tuple_var_assignment_281121' (line 327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'tuple_var_assignment_281121', subscript_call_result_282237)
        
        # Assigning a Name to a Name (line 327):
        # Getting the type of 'tuple_var_assignment_281120' (line 327)
        tuple_var_assignment_281120_282238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'tuple_var_assignment_281120')
        # Assigning a type to the variable 'mode' (line 327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'mode', tuple_var_assignment_281120_282238)
        
        # Assigning a Name to a Name (line 327):
        # Getting the type of 'tuple_var_assignment_281121' (line 327)
        tuple_var_assignment_281121_282239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'tuple_var_assignment_281121')
        # Assigning a type to the variable 'user_angle' (line 327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 14), 'user_angle', tuple_var_assignment_281121_282239)
        
        
        # Getting the type of 'mode' (line 328)
        mode_282240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 11), 'mode')
        unicode_282241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 328, 19), 'unicode', u'default')
        # Applying the binary operator '==' (line 328)
        result_eq_282242 = python_operator(stypy.reporting.localization.Localization(__file__, 328, 11), '==', mode_282240, unicode_282241)
        
        # Testing the type of an if condition (line 328)
        if_condition_282243 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 328, 8), result_eq_282242)
        # Assigning a type to the variable 'if_condition_282243' (line 328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 328, 8), 'if_condition_282243', if_condition_282243)
        # SSA begins for if statement (line 328)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 329):
        
        # Assigning a Num to a Name (line 329):
        int_282244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 329, 20), 'int')
        # Assigning a type to the variable 'angle' (line 329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 12), 'angle', int_282244)
        # SSA branch for the else part of an if statement (line 328)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'angle' (line 331)
        angle_282245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 15), 'angle')
        # Getting the type of 'np' (line 331)
        np_282246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 23), 'np')
        # Obtaining the member 'pi' of a type (line 331)
        pi_282247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 23), np_282246, 'pi')
        int_282248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, 31), 'int')
        # Applying the binary operator 'div' (line 331)
        result_div_282249 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 23), 'div', pi_282247, int_282248)
        
        # Applying the binary operator '>' (line 331)
        result_gt_282250 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 15), '>', angle_282245, result_div_282249)
        
        # Testing the type of an if condition (line 331)
        if_condition_282251 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 331, 12), result_gt_282250)
        # Assigning a type to the variable 'if_condition_282251' (line 331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 12), 'if_condition_282251', if_condition_282251)
        # SSA begins for if statement (line 331)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'angle' (line 332)
        angle_282252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 16), 'angle')
        # Getting the type of 'np' (line 332)
        np_282253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 25), 'np')
        # Obtaining the member 'pi' of a type (line 332)
        pi_282254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 25), np_282253, 'pi')
        # Applying the binary operator '-=' (line 332)
        result_isub_282255 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 16), '-=', angle_282252, pi_282254)
        # Assigning a type to the variable 'angle' (line 332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 16), 'angle', result_isub_282255)
        
        # SSA branch for the else part of an if statement (line 331)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'angle' (line 333)
        angle_282256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 17), 'angle')
        
        # Getting the type of 'np' (line 333)
        np_282257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 26), 'np')
        # Obtaining the member 'pi' of a type (line 333)
        pi_282258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 26), np_282257, 'pi')
        # Applying the 'usub' unary operator (line 333)
        result___neg___282259 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 25), 'usub', pi_282258)
        
        int_282260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, 34), 'int')
        # Applying the binary operator 'div' (line 333)
        result_div_282261 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 25), 'div', result___neg___282259, int_282260)
        
        # Applying the binary operator '<' (line 333)
        result_lt_282262 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 17), '<', angle_282256, result_div_282261)
        
        # Testing the type of an if condition (line 333)
        if_condition_282263 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 333, 17), result_lt_282262)
        # Assigning a type to the variable 'if_condition_282263' (line 333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 333, 17), 'if_condition_282263', if_condition_282263)
        # SSA begins for if statement (line 333)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'angle' (line 334)
        angle_282264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 16), 'angle')
        # Getting the type of 'np' (line 334)
        np_282265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 25), 'np')
        # Obtaining the member 'pi' of a type (line 334)
        pi_282266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 334, 25), np_282265, 'pi')
        # Applying the binary operator '+=' (line 334)
        result_iadd_282267 = python_operator(stypy.reporting.localization.Localization(__file__, 334, 16), '+=', angle_282264, pi_282266)
        # Assigning a type to the variable 'angle' (line 334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 16), 'angle', result_iadd_282267)
        
        # SSA join for if statement (line 333)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 331)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 328)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 335):
        
        # Assigning a BinOp to a Name (line 335):
        
        # Call to rad2deg(...): (line 335)
        # Processing the call arguments (line 335)
        # Getting the type of 'angle' (line 335)
        angle_282270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 27), 'angle', False)
        # Processing the call keyword arguments (line 335)
        kwargs_282271 = {}
        # Getting the type of 'np' (line 335)
        np_282268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 16), 'np', False)
        # Obtaining the member 'rad2deg' of a type (line 335)
        rad2deg_282269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 335, 16), np_282268, 'rad2deg')
        # Calling rad2deg(args, kwargs) (line 335)
        rad2deg_call_result_282272 = invoke(stypy.reporting.localization.Localization(__file__, 335, 16), rad2deg_282269, *[angle_282270], **kwargs_282271)
        
        # Getting the type of 'user_angle' (line 335)
        user_angle_282273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 36), 'user_angle')
        # Applying the binary operator '+' (line 335)
        result_add_282274 = python_operator(stypy.reporting.localization.Localization(__file__, 335, 16), '+', rad2deg_call_result_282272, user_angle_282273)
        
        # Assigning a type to the variable 'angle' (line 335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 8), 'angle', result_add_282274)
        
        # Getting the type of 'self' (line 336)
        self_282275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 11), 'self')
        # Obtaining the member 'label1On' of a type (line 336)
        label1On_282276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 336, 11), self_282275, 'label1On')
        # Testing the type of an if condition (line 336)
        if_condition_282277 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 336, 8), label1On_282276)
        # Assigning a type to the variable 'if_condition_282277' (line 336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 8), 'if_condition_282277', if_condition_282277)
        # SSA begins for if statement (line 336)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_rotation(...): (line 337)
        # Processing the call arguments (line 337)
        # Getting the type of 'angle' (line 337)
        angle_282281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 37), 'angle', False)
        # Processing the call keyword arguments (line 337)
        kwargs_282282 = {}
        # Getting the type of 'self' (line 337)
        self_282278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 12), 'self', False)
        # Obtaining the member 'label1' of a type (line 337)
        label1_282279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 12), self_282278, 'label1')
        # Obtaining the member 'set_rotation' of a type (line 337)
        set_rotation_282280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 12), label1_282279, 'set_rotation')
        # Calling set_rotation(args, kwargs) (line 337)
        set_rotation_call_result_282283 = invoke(stypy.reporting.localization.Localization(__file__, 337, 12), set_rotation_282280, *[angle_282281], **kwargs_282282)
        
        # SSA join for if statement (line 336)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 338)
        self_282284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 11), 'self')
        # Obtaining the member 'label2On' of a type (line 338)
        label2On_282285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 11), self_282284, 'label2On')
        # Testing the type of an if condition (line 338)
        if_condition_282286 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 338, 8), label2On_282285)
        # Assigning a type to the variable 'if_condition_282286' (line 338)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 338, 8), 'if_condition_282286', if_condition_282286)
        # SSA begins for if statement (line 338)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_rotation(...): (line 339)
        # Processing the call arguments (line 339)
        # Getting the type of 'angle' (line 339)
        angle_282290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 37), 'angle', False)
        # Processing the call keyword arguments (line 339)
        kwargs_282291 = {}
        # Getting the type of 'self' (line 339)
        self_282287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 12), 'self', False)
        # Obtaining the member 'label2' of a type (line 339)
        label2_282288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 12), self_282287, 'label2')
        # Obtaining the member 'set_rotation' of a type (line 339)
        set_rotation_282289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 12), label2_282288, 'set_rotation')
        # Calling set_rotation(args, kwargs) (line 339)
        set_rotation_call_result_282292 = invoke(stypy.reporting.localization.Localization(__file__, 339, 12), set_rotation_282289, *[angle_282290], **kwargs_282291)
        
        # SSA join for if statement (line 338)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 343):
        
        # Assigning a BinOp to a Name (line 343):
        # Getting the type of 'self' (line 343)
        self_282293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 14), 'self')
        # Obtaining the member '_pad' of a type (line 343)
        _pad_282294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 14), self_282293, '_pad')
        int_282295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 26), 'int')
        # Applying the binary operator '+' (line 343)
        result_add_282296 = python_operator(stypy.reporting.localization.Localization(__file__, 343, 14), '+', _pad_282294, int_282295)
        
        # Assigning a type to the variable 'pad' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'pad', result_add_282296)
        
        # Call to _update_padding(...): (line 344)
        # Processing the call arguments (line 344)
        # Getting the type of 'pad' (line 344)
        pad_282299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 29), 'pad', False)
        # Getting the type of 'self' (line 345)
        self_282300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 29), 'self', False)
        # Obtaining the member '_loc' of a type (line 345)
        _loc_282301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 29), self_282300, '_loc')
        
        # Call to get_theta_direction(...): (line 345)
        # Processing the call keyword arguments (line 345)
        kwargs_282304 = {}
        # Getting the type of 'axes' (line 345)
        axes_282302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 41), 'axes', False)
        # Obtaining the member 'get_theta_direction' of a type (line 345)
        get_theta_direction_282303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 41), axes_282302, 'get_theta_direction')
        # Calling get_theta_direction(args, kwargs) (line 345)
        get_theta_direction_call_result_282305 = invoke(stypy.reporting.localization.Localization(__file__, 345, 41), get_theta_direction_282303, *[], **kwargs_282304)
        
        # Applying the binary operator '*' (line 345)
        result_mul_282306 = python_operator(stypy.reporting.localization.Localization(__file__, 345, 29), '*', _loc_282301, get_theta_direction_call_result_282305)
        
        
        # Call to get_theta_offset(...): (line 346)
        # Processing the call keyword arguments (line 346)
        kwargs_282309 = {}
        # Getting the type of 'axes' (line 346)
        axes_282307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 29), 'axes', False)
        # Obtaining the member 'get_theta_offset' of a type (line 346)
        get_theta_offset_282308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 29), axes_282307, 'get_theta_offset')
        # Calling get_theta_offset(args, kwargs) (line 346)
        get_theta_offset_call_result_282310 = invoke(stypy.reporting.localization.Localization(__file__, 346, 29), get_theta_offset_282308, *[], **kwargs_282309)
        
        # Applying the binary operator '+' (line 345)
        result_add_282311 = python_operator(stypy.reporting.localization.Localization(__file__, 345, 29), '+', result_mul_282306, get_theta_offset_call_result_282310)
        
        # Processing the call keyword arguments (line 344)
        kwargs_282312 = {}
        # Getting the type of 'self' (line 344)
        self_282297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 8), 'self', False)
        # Obtaining the member '_update_padding' of a type (line 344)
        _update_padding_282298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 344, 8), self_282297, '_update_padding')
        # Calling _update_padding(args, kwargs) (line 344)
        _update_padding_call_result_282313 = invoke(stypy.reporting.localization.Localization(__file__, 344, 8), _update_padding_282298, *[pad_282299, result_add_282311], **kwargs_282312)
        
        
        # ################# End of 'update_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_position' in the type store
        # Getting the type of 'stypy_return_type' (line 300)
        stypy_return_type_282314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282314)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_position'
        return stypy_return_type_282314


# Assigning a type to the variable 'ThetaTick' (line 247)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 0), 'ThetaTick', ThetaTick)
# Declaration of the 'ThetaAxis' class
# Getting the type of 'maxis' (line 349)
maxis_282315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 16), 'maxis')
# Obtaining the member 'XAxis' of a type (line 349)
XAxis_282316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 16), maxis_282315, 'XAxis')

class ThetaAxis(XAxis_282316, ):
    unicode_282317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, (-1)), 'unicode', u'\n    A theta Axis.\n\n    This overrides certain properties of an `XAxis` to provide special-casing\n    for an angular axis.\n    ')
    
    # Assigning a Str to a Name (line 356):
    
    # Assigning a Str to a Name (line 357):

    @norecursion
    def _get_tick(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_tick'
        module_type_store = module_type_store.open_function_context('_get_tick', 359, 4, False)
        # Assigning a type to the variable 'self' (line 360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaAxis._get_tick.__dict__.__setitem__('stypy_localization', localization)
        ThetaAxis._get_tick.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaAxis._get_tick.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaAxis._get_tick.__dict__.__setitem__('stypy_function_name', 'ThetaAxis._get_tick')
        ThetaAxis._get_tick.__dict__.__setitem__('stypy_param_names_list', ['major'])
        ThetaAxis._get_tick.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaAxis._get_tick.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaAxis._get_tick.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaAxis._get_tick.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaAxis._get_tick.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaAxis._get_tick.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaAxis._get_tick', ['major'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_tick', localization, ['major'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_tick(...)' code ##################

        
        # Getting the type of 'major' (line 360)
        major_282318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 11), 'major')
        # Testing the type of an if condition (line 360)
        if_condition_282319 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 360, 8), major_282318)
        # Assigning a type to the variable 'if_condition_282319' (line 360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 8), 'if_condition_282319', if_condition_282319)
        # SSA begins for if statement (line 360)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 361):
        
        # Assigning a Attribute to a Name (line 361):
        # Getting the type of 'self' (line 361)
        self_282320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 22), 'self')
        # Obtaining the member '_major_tick_kw' of a type (line 361)
        _major_tick_kw_282321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 22), self_282320, '_major_tick_kw')
        # Assigning a type to the variable 'tick_kw' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'tick_kw', _major_tick_kw_282321)
        # SSA branch for the else part of an if statement (line 360)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 363):
        
        # Assigning a Attribute to a Name (line 363):
        # Getting the type of 'self' (line 363)
        self_282322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 22), 'self')
        # Obtaining the member '_minor_tick_kw' of a type (line 363)
        _minor_tick_kw_282323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 22), self_282322, '_minor_tick_kw')
        # Assigning a type to the variable 'tick_kw' (line 363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 12), 'tick_kw', _minor_tick_kw_282323)
        # SSA join for if statement (line 360)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to ThetaTick(...): (line 364)
        # Processing the call arguments (line 364)
        # Getting the type of 'self' (line 364)
        self_282325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 25), 'self', False)
        # Obtaining the member 'axes' of a type (line 364)
        axes_282326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 25), self_282325, 'axes')
        int_282327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 364, 36), 'int')
        unicode_282328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 364, 39), 'unicode', u'')
        # Processing the call keyword arguments (line 364)
        # Getting the type of 'major' (line 364)
        major_282329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 49), 'major', False)
        keyword_282330 = major_282329
        # Getting the type of 'tick_kw' (line 364)
        tick_kw_282331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 58), 'tick_kw', False)
        kwargs_282332 = {'major': keyword_282330, 'tick_kw_282331': tick_kw_282331}
        # Getting the type of 'ThetaTick' (line 364)
        ThetaTick_282324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 15), 'ThetaTick', False)
        # Calling ThetaTick(args, kwargs) (line 364)
        ThetaTick_call_result_282333 = invoke(stypy.reporting.localization.Localization(__file__, 364, 15), ThetaTick_282324, *[axes_282326, int_282327, unicode_282328], **kwargs_282332)
        
        # Assigning a type to the variable 'stypy_return_type' (line 364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 8), 'stypy_return_type', ThetaTick_call_result_282333)
        
        # ################# End of '_get_tick(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_tick' in the type store
        # Getting the type of 'stypy_return_type' (line 359)
        stypy_return_type_282334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282334)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_tick'
        return stypy_return_type_282334


    @norecursion
    def _wrap_locator_formatter(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_wrap_locator_formatter'
        module_type_store = module_type_store.open_function_context('_wrap_locator_formatter', 366, 4, False)
        # Assigning a type to the variable 'self' (line 367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_localization', localization)
        ThetaAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_function_name', 'ThetaAxis._wrap_locator_formatter')
        ThetaAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_param_names_list', [])
        ThetaAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaAxis._wrap_locator_formatter', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_wrap_locator_formatter', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_wrap_locator_formatter(...)' code ##################

        
        # Call to set_major_locator(...): (line 367)
        # Processing the call arguments (line 367)
        
        # Call to ThetaLocator(...): (line 367)
        # Processing the call arguments (line 367)
        
        # Call to get_major_locator(...): (line 367)
        # Processing the call keyword arguments (line 367)
        kwargs_282340 = {}
        # Getting the type of 'self' (line 367)
        self_282338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 44), 'self', False)
        # Obtaining the member 'get_major_locator' of a type (line 367)
        get_major_locator_282339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 44), self_282338, 'get_major_locator')
        # Calling get_major_locator(args, kwargs) (line 367)
        get_major_locator_call_result_282341 = invoke(stypy.reporting.localization.Localization(__file__, 367, 44), get_major_locator_282339, *[], **kwargs_282340)
        
        # Processing the call keyword arguments (line 367)
        kwargs_282342 = {}
        # Getting the type of 'ThetaLocator' (line 367)
        ThetaLocator_282337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 31), 'ThetaLocator', False)
        # Calling ThetaLocator(args, kwargs) (line 367)
        ThetaLocator_call_result_282343 = invoke(stypy.reporting.localization.Localization(__file__, 367, 31), ThetaLocator_282337, *[get_major_locator_call_result_282341], **kwargs_282342)
        
        # Processing the call keyword arguments (line 367)
        kwargs_282344 = {}
        # Getting the type of 'self' (line 367)
        self_282335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 8), 'self', False)
        # Obtaining the member 'set_major_locator' of a type (line 367)
        set_major_locator_282336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 8), self_282335, 'set_major_locator')
        # Calling set_major_locator(args, kwargs) (line 367)
        set_major_locator_call_result_282345 = invoke(stypy.reporting.localization.Localization(__file__, 367, 8), set_major_locator_282336, *[ThetaLocator_call_result_282343], **kwargs_282344)
        
        
        # Call to set_major_formatter(...): (line 368)
        # Processing the call arguments (line 368)
        
        # Call to ThetaFormatter(...): (line 368)
        # Processing the call keyword arguments (line 368)
        kwargs_282349 = {}
        # Getting the type of 'ThetaFormatter' (line 368)
        ThetaFormatter_282348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 33), 'ThetaFormatter', False)
        # Calling ThetaFormatter(args, kwargs) (line 368)
        ThetaFormatter_call_result_282350 = invoke(stypy.reporting.localization.Localization(__file__, 368, 33), ThetaFormatter_282348, *[], **kwargs_282349)
        
        # Processing the call keyword arguments (line 368)
        kwargs_282351 = {}
        # Getting the type of 'self' (line 368)
        self_282346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 8), 'self', False)
        # Obtaining the member 'set_major_formatter' of a type (line 368)
        set_major_formatter_282347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 8), self_282346, 'set_major_formatter')
        # Calling set_major_formatter(args, kwargs) (line 368)
        set_major_formatter_call_result_282352 = invoke(stypy.reporting.localization.Localization(__file__, 368, 8), set_major_formatter_282347, *[ThetaFormatter_call_result_282350], **kwargs_282351)
        
        
        # Assigning a Name to a Attribute (line 369):
        
        # Assigning a Name to a Attribute (line 369):
        # Getting the type of 'True' (line 369)
        True_282353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 32), 'True')
        # Getting the type of 'self' (line 369)
        self_282354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 8), 'self')
        # Setting the type of the member 'isDefault_majloc' of a type (line 369)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 8), self_282354, 'isDefault_majloc', True_282353)
        
        # Assigning a Name to a Attribute (line 370):
        
        # Assigning a Name to a Attribute (line 370):
        # Getting the type of 'True' (line 370)
        True_282355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 32), 'True')
        # Getting the type of 'self' (line 370)
        self_282356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 8), 'self')
        # Setting the type of the member 'isDefault_majfmt' of a type (line 370)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 8), self_282356, 'isDefault_majfmt', True_282355)
        
        # ################# End of '_wrap_locator_formatter(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_wrap_locator_formatter' in the type store
        # Getting the type of 'stypy_return_type' (line 366)
        stypy_return_type_282357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282357)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_wrap_locator_formatter'
        return stypy_return_type_282357


    @norecursion
    def cla(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'cla'
        module_type_store = module_type_store.open_function_context('cla', 372, 4, False)
        # Assigning a type to the variable 'self' (line 373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaAxis.cla.__dict__.__setitem__('stypy_localization', localization)
        ThetaAxis.cla.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaAxis.cla.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaAxis.cla.__dict__.__setitem__('stypy_function_name', 'ThetaAxis.cla')
        ThetaAxis.cla.__dict__.__setitem__('stypy_param_names_list', [])
        ThetaAxis.cla.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaAxis.cla.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaAxis.cla.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaAxis.cla.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaAxis.cla.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaAxis.cla.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaAxis.cla', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cla', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cla(...)' code ##################

        
        # Call to cla(...): (line 373)
        # Processing the call keyword arguments (line 373)
        kwargs_282364 = {}
        
        # Call to super(...): (line 373)
        # Processing the call arguments (line 373)
        # Getting the type of 'ThetaAxis' (line 373)
        ThetaAxis_282359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 14), 'ThetaAxis', False)
        # Getting the type of 'self' (line 373)
        self_282360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 25), 'self', False)
        # Processing the call keyword arguments (line 373)
        kwargs_282361 = {}
        # Getting the type of 'super' (line 373)
        super_282358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 8), 'super', False)
        # Calling super(args, kwargs) (line 373)
        super_call_result_282362 = invoke(stypy.reporting.localization.Localization(__file__, 373, 8), super_282358, *[ThetaAxis_282359, self_282360], **kwargs_282361)
        
        # Obtaining the member 'cla' of a type (line 373)
        cla_282363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 373, 8), super_call_result_282362, 'cla')
        # Calling cla(args, kwargs) (line 373)
        cla_call_result_282365 = invoke(stypy.reporting.localization.Localization(__file__, 373, 8), cla_282363, *[], **kwargs_282364)
        
        
        # Call to set_ticks_position(...): (line 374)
        # Processing the call arguments (line 374)
        unicode_282368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 374, 32), 'unicode', u'none')
        # Processing the call keyword arguments (line 374)
        kwargs_282369 = {}
        # Getting the type of 'self' (line 374)
        self_282366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 8), 'self', False)
        # Obtaining the member 'set_ticks_position' of a type (line 374)
        set_ticks_position_282367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 374, 8), self_282366, 'set_ticks_position')
        # Calling set_ticks_position(args, kwargs) (line 374)
        set_ticks_position_call_result_282370 = invoke(stypy.reporting.localization.Localization(__file__, 374, 8), set_ticks_position_282367, *[unicode_282368], **kwargs_282369)
        
        
        # Call to _wrap_locator_formatter(...): (line 375)
        # Processing the call keyword arguments (line 375)
        kwargs_282373 = {}
        # Getting the type of 'self' (line 375)
        self_282371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 8), 'self', False)
        # Obtaining the member '_wrap_locator_formatter' of a type (line 375)
        _wrap_locator_formatter_282372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 8), self_282371, '_wrap_locator_formatter')
        # Calling _wrap_locator_formatter(args, kwargs) (line 375)
        _wrap_locator_formatter_call_result_282374 = invoke(stypy.reporting.localization.Localization(__file__, 375, 8), _wrap_locator_formatter_282372, *[], **kwargs_282373)
        
        
        # ################# End of 'cla(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cla' in the type store
        # Getting the type of 'stypy_return_type' (line 372)
        stypy_return_type_282375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282375)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cla'
        return stypy_return_type_282375


    @norecursion
    def _set_scale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_scale'
        module_type_store = module_type_store.open_function_context('_set_scale', 377, 4, False)
        # Assigning a type to the variable 'self' (line 378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaAxis._set_scale.__dict__.__setitem__('stypy_localization', localization)
        ThetaAxis._set_scale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaAxis._set_scale.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaAxis._set_scale.__dict__.__setitem__('stypy_function_name', 'ThetaAxis._set_scale')
        ThetaAxis._set_scale.__dict__.__setitem__('stypy_param_names_list', ['value'])
        ThetaAxis._set_scale.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaAxis._set_scale.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        ThetaAxis._set_scale.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaAxis._set_scale.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaAxis._set_scale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaAxis._set_scale.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaAxis._set_scale', ['value'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_scale', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_scale(...)' code ##################

        
        # Call to _set_scale(...): (line 378)
        # Processing the call arguments (line 378)
        # Getting the type of 'value' (line 378)
        value_282382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 42), 'value', False)
        # Processing the call keyword arguments (line 378)
        # Getting the type of 'kwargs' (line 378)
        kwargs_282383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 51), 'kwargs', False)
        kwargs_282384 = {'kwargs_282383': kwargs_282383}
        
        # Call to super(...): (line 378)
        # Processing the call arguments (line 378)
        # Getting the type of 'ThetaAxis' (line 378)
        ThetaAxis_282377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 14), 'ThetaAxis', False)
        # Getting the type of 'self' (line 378)
        self_282378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 25), 'self', False)
        # Processing the call keyword arguments (line 378)
        kwargs_282379 = {}
        # Getting the type of 'super' (line 378)
        super_282376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 8), 'super', False)
        # Calling super(args, kwargs) (line 378)
        super_call_result_282380 = invoke(stypy.reporting.localization.Localization(__file__, 378, 8), super_282376, *[ThetaAxis_282377, self_282378], **kwargs_282379)
        
        # Obtaining the member '_set_scale' of a type (line 378)
        _set_scale_282381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 378, 8), super_call_result_282380, '_set_scale')
        # Calling _set_scale(args, kwargs) (line 378)
        _set_scale_call_result_282385 = invoke(stypy.reporting.localization.Localization(__file__, 378, 8), _set_scale_282381, *[value_282382], **kwargs_282384)
        
        
        # Call to _wrap_locator_formatter(...): (line 379)
        # Processing the call keyword arguments (line 379)
        kwargs_282388 = {}
        # Getting the type of 'self' (line 379)
        self_282386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 8), 'self', False)
        # Obtaining the member '_wrap_locator_formatter' of a type (line 379)
        _wrap_locator_formatter_282387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 8), self_282386, '_wrap_locator_formatter')
        # Calling _wrap_locator_formatter(args, kwargs) (line 379)
        _wrap_locator_formatter_call_result_282389 = invoke(stypy.reporting.localization.Localization(__file__, 379, 8), _wrap_locator_formatter_282387, *[], **kwargs_282388)
        
        
        # ################# End of '_set_scale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_scale' in the type store
        # Getting the type of 'stypy_return_type' (line 377)
        stypy_return_type_282390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282390)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_scale'
        return stypy_return_type_282390


    @norecursion
    def _copy_tick_props(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_copy_tick_props'
        module_type_store = module_type_store.open_function_context('_copy_tick_props', 381, 4, False)
        # Assigning a type to the variable 'self' (line 382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ThetaAxis._copy_tick_props.__dict__.__setitem__('stypy_localization', localization)
        ThetaAxis._copy_tick_props.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ThetaAxis._copy_tick_props.__dict__.__setitem__('stypy_type_store', module_type_store)
        ThetaAxis._copy_tick_props.__dict__.__setitem__('stypy_function_name', 'ThetaAxis._copy_tick_props')
        ThetaAxis._copy_tick_props.__dict__.__setitem__('stypy_param_names_list', ['src', 'dest'])
        ThetaAxis._copy_tick_props.__dict__.__setitem__('stypy_varargs_param_name', None)
        ThetaAxis._copy_tick_props.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ThetaAxis._copy_tick_props.__dict__.__setitem__('stypy_call_defaults', defaults)
        ThetaAxis._copy_tick_props.__dict__.__setitem__('stypy_call_varargs', varargs)
        ThetaAxis._copy_tick_props.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ThetaAxis._copy_tick_props.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaAxis._copy_tick_props', ['src', 'dest'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_copy_tick_props', localization, ['src', 'dest'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_copy_tick_props(...)' code ##################

        unicode_282391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, 8), 'unicode', u'Copy the props from src tick to dest tick')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'src' (line 383)
        src_282392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 11), 'src')
        # Getting the type of 'None' (line 383)
        None_282393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 18), 'None')
        # Applying the binary operator 'is' (line 383)
        result_is__282394 = python_operator(stypy.reporting.localization.Localization(__file__, 383, 11), 'is', src_282392, None_282393)
        
        
        # Getting the type of 'dest' (line 383)
        dest_282395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 26), 'dest')
        # Getting the type of 'None' (line 383)
        None_282396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 34), 'None')
        # Applying the binary operator 'is' (line 383)
        result_is__282397 = python_operator(stypy.reporting.localization.Localization(__file__, 383, 26), 'is', dest_282395, None_282396)
        
        # Applying the binary operator 'or' (line 383)
        result_or_keyword_282398 = python_operator(stypy.reporting.localization.Localization(__file__, 383, 11), 'or', result_is__282394, result_is__282397)
        
        # Testing the type of an if condition (line 383)
        if_condition_282399 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 383, 8), result_or_keyword_282398)
        # Assigning a type to the variable 'if_condition_282399' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 8), 'if_condition_282399', if_condition_282399)
        # SSA begins for if statement (line 383)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 383)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _copy_tick_props(...): (line 385)
        # Processing the call arguments (line 385)
        # Getting the type of 'src' (line 385)
        src_282406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 48), 'src', False)
        # Getting the type of 'dest' (line 385)
        dest_282407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 53), 'dest', False)
        # Processing the call keyword arguments (line 385)
        kwargs_282408 = {}
        
        # Call to super(...): (line 385)
        # Processing the call arguments (line 385)
        # Getting the type of 'ThetaAxis' (line 385)
        ThetaAxis_282401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 14), 'ThetaAxis', False)
        # Getting the type of 'self' (line 385)
        self_282402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 25), 'self', False)
        # Processing the call keyword arguments (line 385)
        kwargs_282403 = {}
        # Getting the type of 'super' (line 385)
        super_282400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 8), 'super', False)
        # Calling super(args, kwargs) (line 385)
        super_call_result_282404 = invoke(stypy.reporting.localization.Localization(__file__, 385, 8), super_282400, *[ThetaAxis_282401, self_282402], **kwargs_282403)
        
        # Obtaining the member '_copy_tick_props' of a type (line 385)
        _copy_tick_props_282405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 8), super_call_result_282404, '_copy_tick_props')
        # Calling _copy_tick_props(args, kwargs) (line 385)
        _copy_tick_props_call_result_282409 = invoke(stypy.reporting.localization.Localization(__file__, 385, 8), _copy_tick_props_282405, *[src_282406, dest_282407], **kwargs_282408)
        
        
        # Assigning a Subscript to a Name (line 388):
        
        # Assigning a Subscript to a Name (line 388):
        
        # Obtaining the type of the subscript
        int_282410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 44), 'int')
        
        # Call to _get_text1_transform(...): (line 388)
        # Processing the call keyword arguments (line 388)
        kwargs_282413 = {}
        # Getting the type of 'dest' (line 388)
        dest_282411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 16), 'dest', False)
        # Obtaining the member '_get_text1_transform' of a type (line 388)
        _get_text1_transform_282412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 16), dest_282411, '_get_text1_transform')
        # Calling _get_text1_transform(args, kwargs) (line 388)
        _get_text1_transform_call_result_282414 = invoke(stypy.reporting.localization.Localization(__file__, 388, 16), _get_text1_transform_282412, *[], **kwargs_282413)
        
        # Obtaining the member '__getitem__' of a type (line 388)
        getitem___282415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 16), _get_text1_transform_call_result_282414, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 388)
        subscript_call_result_282416 = invoke(stypy.reporting.localization.Localization(__file__, 388, 16), getitem___282415, int_282410)
        
        # Assigning a type to the variable 'trans' (line 388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 8), 'trans', subscript_call_result_282416)
        
        # Call to set_transform(...): (line 389)
        # Processing the call arguments (line 389)
        # Getting the type of 'trans' (line 389)
        trans_282420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 34), 'trans', False)
        # Getting the type of 'dest' (line 389)
        dest_282421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 42), 'dest', False)
        # Obtaining the member '_text1_translate' of a type (line 389)
        _text1_translate_282422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 42), dest_282421, '_text1_translate')
        # Applying the binary operator '+' (line 389)
        result_add_282423 = python_operator(stypy.reporting.localization.Localization(__file__, 389, 34), '+', trans_282420, _text1_translate_282422)
        
        # Processing the call keyword arguments (line 389)
        kwargs_282424 = {}
        # Getting the type of 'dest' (line 389)
        dest_282417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'dest', False)
        # Obtaining the member 'label1' of a type (line 389)
        label1_282418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 8), dest_282417, 'label1')
        # Obtaining the member 'set_transform' of a type (line 389)
        set_transform_282419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 8), label1_282418, 'set_transform')
        # Calling set_transform(args, kwargs) (line 389)
        set_transform_call_result_282425 = invoke(stypy.reporting.localization.Localization(__file__, 389, 8), set_transform_282419, *[result_add_282423], **kwargs_282424)
        
        
        # Assigning a Subscript to a Name (line 390):
        
        # Assigning a Subscript to a Name (line 390):
        
        # Obtaining the type of the subscript
        int_282426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, 44), 'int')
        
        # Call to _get_text2_transform(...): (line 390)
        # Processing the call keyword arguments (line 390)
        kwargs_282429 = {}
        # Getting the type of 'dest' (line 390)
        dest_282427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 16), 'dest', False)
        # Obtaining the member '_get_text2_transform' of a type (line 390)
        _get_text2_transform_282428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 16), dest_282427, '_get_text2_transform')
        # Calling _get_text2_transform(args, kwargs) (line 390)
        _get_text2_transform_call_result_282430 = invoke(stypy.reporting.localization.Localization(__file__, 390, 16), _get_text2_transform_282428, *[], **kwargs_282429)
        
        # Obtaining the member '__getitem__' of a type (line 390)
        getitem___282431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 16), _get_text2_transform_call_result_282430, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 390)
        subscript_call_result_282432 = invoke(stypy.reporting.localization.Localization(__file__, 390, 16), getitem___282431, int_282426)
        
        # Assigning a type to the variable 'trans' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 8), 'trans', subscript_call_result_282432)
        
        # Call to set_transform(...): (line 391)
        # Processing the call arguments (line 391)
        # Getting the type of 'trans' (line 391)
        trans_282436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 34), 'trans', False)
        # Getting the type of 'dest' (line 391)
        dest_282437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 42), 'dest', False)
        # Obtaining the member '_text2_translate' of a type (line 391)
        _text2_translate_282438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 42), dest_282437, '_text2_translate')
        # Applying the binary operator '+' (line 391)
        result_add_282439 = python_operator(stypy.reporting.localization.Localization(__file__, 391, 34), '+', trans_282436, _text2_translate_282438)
        
        # Processing the call keyword arguments (line 391)
        kwargs_282440 = {}
        # Getting the type of 'dest' (line 391)
        dest_282433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 8), 'dest', False)
        # Obtaining the member 'label2' of a type (line 391)
        label2_282434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 8), dest_282433, 'label2')
        # Obtaining the member 'set_transform' of a type (line 391)
        set_transform_282435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 8), label2_282434, 'set_transform')
        # Calling set_transform(args, kwargs) (line 391)
        set_transform_call_result_282441 = invoke(stypy.reporting.localization.Localization(__file__, 391, 8), set_transform_282435, *[result_add_282439], **kwargs_282440)
        
        
        # ################# End of '_copy_tick_props(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_copy_tick_props' in the type store
        # Getting the type of 'stypy_return_type' (line 381)
        stypy_return_type_282442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282442)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_copy_tick_props'
        return stypy_return_type_282442


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 349, 0, False)
        # Assigning a type to the variable 'self' (line 350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 350, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ThetaAxis.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ThetaAxis' (line 349)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 0), 'ThetaAxis', ThetaAxis)

# Assigning a Str to a Name (line 356):
unicode_282443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 15), 'unicode', u'thetaaxis')
# Getting the type of 'ThetaAxis'
ThetaAxis_282444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ThetaAxis')
# Setting the type of the member '__name__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ThetaAxis_282444, '__name__', unicode_282443)

# Assigning a Str to a Name (line 357):
unicode_282445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 357, 16), 'unicode', u'theta')
# Getting the type of 'ThetaAxis'
ThetaAxis_282446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ThetaAxis')
# Setting the type of the member 'axis_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ThetaAxis_282446, 'axis_name', unicode_282445)
# Declaration of the 'RadialLocator' class
# Getting the type of 'mticker' (line 394)
mticker_282447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 20), 'mticker')
# Obtaining the member 'Locator' of a type (line 394)
Locator_282448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 20), mticker_282447, 'Locator')

class RadialLocator(Locator_282448, ):
    unicode_282449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 402, (-1)), 'unicode', u'\n    Used to locate radius ticks.\n\n    Ensures that all ticks are strictly positive.  For all other\n    tasks, it delegates to the base\n    :class:`~matplotlib.ticker.Locator` (which may be different\n    depending on the scale of the *r*-axis.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 403)
        None_282450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 34), 'None')
        defaults = [None_282450]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 403, 4, False)
        # Assigning a type to the variable 'self' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialLocator.__init__', ['base', 'axes'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['base', 'axes'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 404):
        
        # Assigning a Name to a Attribute (line 404):
        # Getting the type of 'base' (line 404)
        base_282451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 20), 'base')
        # Getting the type of 'self' (line 404)
        self_282452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 8), 'self')
        # Setting the type of the member 'base' of a type (line 404)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 8), self_282452, 'base', base_282451)
        
        # Assigning a Name to a Attribute (line 405):
        
        # Assigning a Name to a Attribute (line 405):
        # Getting the type of 'axes' (line 405)
        axes_282453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 21), 'axes')
        # Getting the type of 'self' (line 405)
        self_282454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 8), 'self')
        # Setting the type of the member '_axes' of a type (line 405)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 405, 8), self_282454, '_axes', axes_282453)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 407, 4, False)
        # Assigning a type to the variable 'self' (line 408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadialLocator.__call__.__dict__.__setitem__('stypy_localization', localization)
        RadialLocator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadialLocator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadialLocator.__call__.__dict__.__setitem__('stypy_function_name', 'RadialLocator.__call__')
        RadialLocator.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        RadialLocator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadialLocator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadialLocator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadialLocator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadialLocator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadialLocator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialLocator.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Assigning a Name to a Name (line 408):
        
        # Assigning a Name to a Name (line 408):
        # Getting the type of 'True' (line 408)
        True_282455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 19), 'True')
        # Assigning a type to the variable 'show_all' (line 408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'show_all', True_282455)
        
        # Getting the type of 'self' (line 410)
        self_282456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 11), 'self')
        # Obtaining the member '_axes' of a type (line 410)
        _axes_282457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 11), self_282456, '_axes')
        # Testing the type of an if condition (line 410)
        if_condition_282458 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 410, 8), _axes_282457)
        # Assigning a type to the variable 'if_condition_282458' (line 410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'if_condition_282458', if_condition_282458)
        # SSA begins for if statement (line 410)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to _is_full_circle_rad(...): (line 411)
        # Getting the type of 'self' (line 411)
        self_282460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 36), 'self', False)
        # Obtaining the member '_axes' of a type (line 411)
        _axes_282461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 36), self_282460, '_axes')
        # Obtaining the member 'viewLim' of a type (line 411)
        viewLim_282462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 36), _axes_282461, 'viewLim')
        # Obtaining the member 'intervalx' of a type (line 411)
        intervalx_282463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 36), viewLim_282462, 'intervalx')
        # Processing the call keyword arguments (line 411)
        kwargs_282464 = {}
        # Getting the type of '_is_full_circle_rad' (line 411)
        _is_full_circle_rad_282459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 15), '_is_full_circle_rad', False)
        # Calling _is_full_circle_rad(args, kwargs) (line 411)
        _is_full_circle_rad_call_result_282465 = invoke(stypy.reporting.localization.Localization(__file__, 411, 15), _is_full_circle_rad_282459, *[intervalx_282463], **kwargs_282464)
        
        # Testing the type of an if condition (line 411)
        if_condition_282466 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 411, 12), _is_full_circle_rad_call_result_282465)
        # Assigning a type to the variable 'if_condition_282466' (line 411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 12), 'if_condition_282466', if_condition_282466)
        # SSA begins for if statement (line 411)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 412):
        
        # Assigning a Call to a Name (line 412):
        
        # Call to get_rorigin(...): (line 412)
        # Processing the call keyword arguments (line 412)
        kwargs_282470 = {}
        # Getting the type of 'self' (line 412)
        self_282467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 26), 'self', False)
        # Obtaining the member '_axes' of a type (line 412)
        _axes_282468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 26), self_282467, '_axes')
        # Obtaining the member 'get_rorigin' of a type (line 412)
        get_rorigin_282469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 26), _axes_282468, 'get_rorigin')
        # Calling get_rorigin(args, kwargs) (line 412)
        get_rorigin_call_result_282471 = invoke(stypy.reporting.localization.Localization(__file__, 412, 26), get_rorigin_282469, *[], **kwargs_282470)
        
        # Assigning a type to the variable 'rorigin' (line 412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 16), 'rorigin', get_rorigin_call_result_282471)
        
        
        
        # Call to get_rmin(...): (line 413)
        # Processing the call keyword arguments (line 413)
        kwargs_282475 = {}
        # Getting the type of 'self' (line 413)
        self_282472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 19), 'self', False)
        # Obtaining the member '_axes' of a type (line 413)
        _axes_282473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 19), self_282472, '_axes')
        # Obtaining the member 'get_rmin' of a type (line 413)
        get_rmin_282474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 19), _axes_282473, 'get_rmin')
        # Calling get_rmin(args, kwargs) (line 413)
        get_rmin_call_result_282476 = invoke(stypy.reporting.localization.Localization(__file__, 413, 19), get_rmin_282474, *[], **kwargs_282475)
        
        # Getting the type of 'rorigin' (line 413)
        rorigin_282477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 44), 'rorigin')
        # Applying the binary operator '<=' (line 413)
        result_le_282478 = python_operator(stypy.reporting.localization.Localization(__file__, 413, 19), '<=', get_rmin_call_result_282476, rorigin_282477)
        
        # Testing the type of an if condition (line 413)
        if_condition_282479 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 413, 16), result_le_282478)
        # Assigning a type to the variable 'if_condition_282479' (line 413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 16), 'if_condition_282479', if_condition_282479)
        # SSA begins for if statement (line 413)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 414):
        
        # Assigning a Name to a Name (line 414):
        # Getting the type of 'False' (line 414)
        False_282480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 31), 'False')
        # Assigning a type to the variable 'show_all' (line 414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 20), 'show_all', False_282480)
        # SSA join for if statement (line 413)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 411)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 410)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'show_all' (line 416)
        show_all_282481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 11), 'show_all')
        # Testing the type of an if condition (line 416)
        if_condition_282482 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 416, 8), show_all_282481)
        # Assigning a type to the variable 'if_condition_282482' (line 416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 8), 'if_condition_282482', if_condition_282482)
        # SSA begins for if statement (line 416)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to base(...): (line 417)
        # Processing the call keyword arguments (line 417)
        kwargs_282485 = {}
        # Getting the type of 'self' (line 417)
        self_282483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 19), 'self', False)
        # Obtaining the member 'base' of a type (line 417)
        base_282484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 19), self_282483, 'base')
        # Calling base(args, kwargs) (line 417)
        base_call_result_282486 = invoke(stypy.reporting.localization.Localization(__file__, 417, 19), base_282484, *[], **kwargs_282485)
        
        # Assigning a type to the variable 'stypy_return_type' (line 417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 12), 'stypy_return_type', base_call_result_282486)
        # SSA branch for the else part of an if statement (line 416)
        module_type_store.open_ssa_branch('else')
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to base(...): (line 419)
        # Processing the call keyword arguments (line 419)
        kwargs_282493 = {}
        # Getting the type of 'self' (line 419)
        self_282491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 37), 'self', False)
        # Obtaining the member 'base' of a type (line 419)
        base_282492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 419, 37), self_282491, 'base')
        # Calling base(args, kwargs) (line 419)
        base_call_result_282494 = invoke(stypy.reporting.localization.Localization(__file__, 419, 37), base_282492, *[], **kwargs_282493)
        
        comprehension_282495 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 419, 20), base_call_result_282494)
        # Assigning a type to the variable 'tick' (line 419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 419, 20), 'tick', comprehension_282495)
        
        # Getting the type of 'tick' (line 419)
        tick_282488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 52), 'tick')
        # Getting the type of 'rorigin' (line 419)
        rorigin_282489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 59), 'rorigin')
        # Applying the binary operator '>' (line 419)
        result_gt_282490 = python_operator(stypy.reporting.localization.Localization(__file__, 419, 52), '>', tick_282488, rorigin_282489)
        
        # Getting the type of 'tick' (line 419)
        tick_282487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 20), 'tick')
        list_282496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 20), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 419, 20), list_282496, tick_282487)
        # Assigning a type to the variable 'stypy_return_type' (line 419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 419, 12), 'stypy_return_type', list_282496)
        # SSA join for if statement (line 416)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 407)
        stypy_return_type_282497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282497)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_282497


    @norecursion
    def autoscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'autoscale'
        module_type_store = module_type_store.open_function_context('autoscale', 421, 4, False)
        # Assigning a type to the variable 'self' (line 422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadialLocator.autoscale.__dict__.__setitem__('stypy_localization', localization)
        RadialLocator.autoscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadialLocator.autoscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadialLocator.autoscale.__dict__.__setitem__('stypy_function_name', 'RadialLocator.autoscale')
        RadialLocator.autoscale.__dict__.__setitem__('stypy_param_names_list', [])
        RadialLocator.autoscale.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadialLocator.autoscale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadialLocator.autoscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadialLocator.autoscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadialLocator.autoscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadialLocator.autoscale.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialLocator.autoscale', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale(...)' code ##################

        
        # Call to autoscale(...): (line 422)
        # Processing the call keyword arguments (line 422)
        kwargs_282501 = {}
        # Getting the type of 'self' (line 422)
        self_282498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 15), 'self', False)
        # Obtaining the member 'base' of a type (line 422)
        base_282499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 15), self_282498, 'base')
        # Obtaining the member 'autoscale' of a type (line 422)
        autoscale_282500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 15), base_282499, 'autoscale')
        # Calling autoscale(args, kwargs) (line 422)
        autoscale_call_result_282502 = invoke(stypy.reporting.localization.Localization(__file__, 422, 15), autoscale_282500, *[], **kwargs_282501)
        
        # Assigning a type to the variable 'stypy_return_type' (line 422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 8), 'stypy_return_type', autoscale_call_result_282502)
        
        # ################# End of 'autoscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale' in the type store
        # Getting the type of 'stypy_return_type' (line 421)
        stypy_return_type_282503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282503)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale'
        return stypy_return_type_282503


    @norecursion
    def pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pan'
        module_type_store = module_type_store.open_function_context('pan', 424, 4, False)
        # Assigning a type to the variable 'self' (line 425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadialLocator.pan.__dict__.__setitem__('stypy_localization', localization)
        RadialLocator.pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadialLocator.pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadialLocator.pan.__dict__.__setitem__('stypy_function_name', 'RadialLocator.pan')
        RadialLocator.pan.__dict__.__setitem__('stypy_param_names_list', ['numsteps'])
        RadialLocator.pan.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadialLocator.pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadialLocator.pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadialLocator.pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadialLocator.pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadialLocator.pan.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialLocator.pan', ['numsteps'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pan', localization, ['numsteps'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pan(...)' code ##################

        
        # Call to pan(...): (line 425)
        # Processing the call arguments (line 425)
        # Getting the type of 'numsteps' (line 425)
        numsteps_282507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 29), 'numsteps', False)
        # Processing the call keyword arguments (line 425)
        kwargs_282508 = {}
        # Getting the type of 'self' (line 425)
        self_282504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 15), 'self', False)
        # Obtaining the member 'base' of a type (line 425)
        base_282505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 15), self_282504, 'base')
        # Obtaining the member 'pan' of a type (line 425)
        pan_282506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 15), base_282505, 'pan')
        # Calling pan(args, kwargs) (line 425)
        pan_call_result_282509 = invoke(stypy.reporting.localization.Localization(__file__, 425, 15), pan_282506, *[numsteps_282507], **kwargs_282508)
        
        # Assigning a type to the variable 'stypy_return_type' (line 425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 8), 'stypy_return_type', pan_call_result_282509)
        
        # ################# End of 'pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pan' in the type store
        # Getting the type of 'stypy_return_type' (line 424)
        stypy_return_type_282510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282510)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pan'
        return stypy_return_type_282510


    @norecursion
    def zoom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'zoom'
        module_type_store = module_type_store.open_function_context('zoom', 427, 4, False)
        # Assigning a type to the variable 'self' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadialLocator.zoom.__dict__.__setitem__('stypy_localization', localization)
        RadialLocator.zoom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadialLocator.zoom.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadialLocator.zoom.__dict__.__setitem__('stypy_function_name', 'RadialLocator.zoom')
        RadialLocator.zoom.__dict__.__setitem__('stypy_param_names_list', ['direction'])
        RadialLocator.zoom.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadialLocator.zoom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadialLocator.zoom.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadialLocator.zoom.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadialLocator.zoom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadialLocator.zoom.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialLocator.zoom', ['direction'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'zoom', localization, ['direction'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'zoom(...)' code ##################

        
        # Call to zoom(...): (line 428)
        # Processing the call arguments (line 428)
        # Getting the type of 'direction' (line 428)
        direction_282514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 30), 'direction', False)
        # Processing the call keyword arguments (line 428)
        kwargs_282515 = {}
        # Getting the type of 'self' (line 428)
        self_282511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 15), 'self', False)
        # Obtaining the member 'base' of a type (line 428)
        base_282512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 15), self_282511, 'base')
        # Obtaining the member 'zoom' of a type (line 428)
        zoom_282513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 15), base_282512, 'zoom')
        # Calling zoom(args, kwargs) (line 428)
        zoom_call_result_282516 = invoke(stypy.reporting.localization.Localization(__file__, 428, 15), zoom_282513, *[direction_282514], **kwargs_282515)
        
        # Assigning a type to the variable 'stypy_return_type' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 'stypy_return_type', zoom_call_result_282516)
        
        # ################# End of 'zoom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'zoom' in the type store
        # Getting the type of 'stypy_return_type' (line 427)
        stypy_return_type_282517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282517)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'zoom'
        return stypy_return_type_282517


    @norecursion
    def refresh(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'refresh'
        module_type_store = module_type_store.open_function_context('refresh', 430, 4, False)
        # Assigning a type to the variable 'self' (line 431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 431, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadialLocator.refresh.__dict__.__setitem__('stypy_localization', localization)
        RadialLocator.refresh.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadialLocator.refresh.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadialLocator.refresh.__dict__.__setitem__('stypy_function_name', 'RadialLocator.refresh')
        RadialLocator.refresh.__dict__.__setitem__('stypy_param_names_list', [])
        RadialLocator.refresh.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadialLocator.refresh.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadialLocator.refresh.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadialLocator.refresh.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadialLocator.refresh.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadialLocator.refresh.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialLocator.refresh', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'refresh', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'refresh(...)' code ##################

        
        # Call to refresh(...): (line 431)
        # Processing the call keyword arguments (line 431)
        kwargs_282521 = {}
        # Getting the type of 'self' (line 431)
        self_282518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 15), 'self', False)
        # Obtaining the member 'base' of a type (line 431)
        base_282519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 15), self_282518, 'base')
        # Obtaining the member 'refresh' of a type (line 431)
        refresh_282520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 15), base_282519, 'refresh')
        # Calling refresh(args, kwargs) (line 431)
        refresh_call_result_282522 = invoke(stypy.reporting.localization.Localization(__file__, 431, 15), refresh_282520, *[], **kwargs_282521)
        
        # Assigning a type to the variable 'stypy_return_type' (line 431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 431, 8), 'stypy_return_type', refresh_call_result_282522)
        
        # ################# End of 'refresh(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'refresh' in the type store
        # Getting the type of 'stypy_return_type' (line 430)
        stypy_return_type_282523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282523)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'refresh'
        return stypy_return_type_282523


    @norecursion
    def view_limits(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'view_limits'
        module_type_store = module_type_store.open_function_context('view_limits', 433, 4, False)
        # Assigning a type to the variable 'self' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadialLocator.view_limits.__dict__.__setitem__('stypy_localization', localization)
        RadialLocator.view_limits.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadialLocator.view_limits.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadialLocator.view_limits.__dict__.__setitem__('stypy_function_name', 'RadialLocator.view_limits')
        RadialLocator.view_limits.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        RadialLocator.view_limits.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadialLocator.view_limits.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadialLocator.view_limits.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadialLocator.view_limits.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadialLocator.view_limits.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadialLocator.view_limits.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialLocator.view_limits', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'view_limits', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'view_limits(...)' code ##################

        
        # Assigning a Call to a Tuple (line 434):
        
        # Assigning a Call to a Name:
        
        # Call to view_limits(...): (line 434)
        # Processing the call arguments (line 434)
        # Getting the type of 'vmin' (line 434)
        vmin_282527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 43), 'vmin', False)
        # Getting the type of 'vmax' (line 434)
        vmax_282528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 49), 'vmax', False)
        # Processing the call keyword arguments (line 434)
        kwargs_282529 = {}
        # Getting the type of 'self' (line 434)
        self_282524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 21), 'self', False)
        # Obtaining the member 'base' of a type (line 434)
        base_282525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 21), self_282524, 'base')
        # Obtaining the member 'view_limits' of a type (line 434)
        view_limits_282526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 21), base_282525, 'view_limits')
        # Calling view_limits(args, kwargs) (line 434)
        view_limits_call_result_282530 = invoke(stypy.reporting.localization.Localization(__file__, 434, 21), view_limits_282526, *[vmin_282527, vmax_282528], **kwargs_282529)
        
        # Assigning a type to the variable 'call_assignment_281122' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 'call_assignment_281122', view_limits_call_result_282530)
        
        # Assigning a Call to a Name (line 434):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_282533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 8), 'int')
        # Processing the call keyword arguments
        kwargs_282534 = {}
        # Getting the type of 'call_assignment_281122' (line 434)
        call_assignment_281122_282531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 'call_assignment_281122', False)
        # Obtaining the member '__getitem__' of a type (line 434)
        getitem___282532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 8), call_assignment_281122_282531, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_282535 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___282532, *[int_282533], **kwargs_282534)
        
        # Assigning a type to the variable 'call_assignment_281123' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 'call_assignment_281123', getitem___call_result_282535)
        
        # Assigning a Name to a Name (line 434):
        # Getting the type of 'call_assignment_281123' (line 434)
        call_assignment_281123_282536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 'call_assignment_281123')
        # Assigning a type to the variable 'vmin' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 'vmin', call_assignment_281123_282536)
        
        # Assigning a Call to a Name (line 434):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_282539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 8), 'int')
        # Processing the call keyword arguments
        kwargs_282540 = {}
        # Getting the type of 'call_assignment_281122' (line 434)
        call_assignment_281122_282537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 'call_assignment_281122', False)
        # Obtaining the member '__getitem__' of a type (line 434)
        getitem___282538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 8), call_assignment_281122_282537, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_282541 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___282538, *[int_282539], **kwargs_282540)
        
        # Assigning a type to the variable 'call_assignment_281124' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 'call_assignment_281124', getitem___call_result_282541)
        
        # Assigning a Name to a Name (line 434):
        # Getting the type of 'call_assignment_281124' (line 434)
        call_assignment_281124_282542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 'call_assignment_281124')
        # Assigning a type to the variable 'vmax' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 14), 'vmax', call_assignment_281124_282542)
        
        # Call to nonsingular(...): (line 435)
        # Processing the call arguments (line 435)
        
        # Call to min(...): (line 435)
        # Processing the call arguments (line 435)
        int_282546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 43), 'int')
        # Getting the type of 'vmin' (line 435)
        vmin_282547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 46), 'vmin', False)
        # Processing the call keyword arguments (line 435)
        kwargs_282548 = {}
        # Getting the type of 'min' (line 435)
        min_282545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 39), 'min', False)
        # Calling min(args, kwargs) (line 435)
        min_call_result_282549 = invoke(stypy.reporting.localization.Localization(__file__, 435, 39), min_282545, *[int_282546, vmin_282547], **kwargs_282548)
        
        # Getting the type of 'vmax' (line 435)
        vmax_282550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 53), 'vmax', False)
        # Processing the call keyword arguments (line 435)
        kwargs_282551 = {}
        # Getting the type of 'mtransforms' (line 435)
        mtransforms_282543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 15), 'mtransforms', False)
        # Obtaining the member 'nonsingular' of a type (line 435)
        nonsingular_282544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 15), mtransforms_282543, 'nonsingular')
        # Calling nonsingular(args, kwargs) (line 435)
        nonsingular_call_result_282552 = invoke(stypy.reporting.localization.Localization(__file__, 435, 15), nonsingular_282544, *[min_call_result_282549, vmax_282550], **kwargs_282551)
        
        # Assigning a type to the variable 'stypy_return_type' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'stypy_return_type', nonsingular_call_result_282552)
        
        # ################# End of 'view_limits(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'view_limits' in the type store
        # Getting the type of 'stypy_return_type' (line 433)
        stypy_return_type_282553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282553)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'view_limits'
        return stypy_return_type_282553


# Assigning a type to the variable 'RadialLocator' (line 394)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 0), 'RadialLocator', RadialLocator)
# Declaration of the '_ThetaShift' class
# Getting the type of 'mtransforms' (line 438)
mtransforms_282554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 18), 'mtransforms')
# Obtaining the member 'ScaledTranslation' of a type (line 438)
ScaledTranslation_282555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 18), mtransforms_282554, 'ScaledTranslation')

class _ThetaShift(ScaledTranslation_282555, ):
    unicode_282556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 453, (-1)), 'unicode', u"\n    Apply a padding shift based on axes theta limits.\n\n    This is used to create padding for radial ticks.\n\n    Parameters\n    ----------\n    axes : matplotlib.axes.Axes\n        The owning axes; used to determine limits.\n    pad : float\n        The padding to apply, in points.\n    start : str, {'min', 'max', 'rlabel'}\n        Whether to shift away from the start (``'min'``) or the end (``'max'``)\n        of the axes, or using the rlabel position (``'rlabel'``).\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 454, 4, False)
        # Assigning a type to the variable 'self' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ThetaShift.__init__', ['axes', 'pad', 'mode'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['axes', 'pad', 'mode'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 455)
        # Processing the call arguments (line 455)
        # Getting the type of 'self' (line 455)
        self_282560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 47), 'self', False)
        # Getting the type of 'pad' (line 455)
        pad_282561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 53), 'pad', False)
        # Getting the type of 'pad' (line 455)
        pad_282562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 58), 'pad', False)
        # Getting the type of 'axes' (line 456)
        axes_282563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 47), 'axes', False)
        # Obtaining the member 'figure' of a type (line 456)
        figure_282564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 456, 47), axes_282563, 'figure')
        # Obtaining the member 'dpi_scale_trans' of a type (line 456)
        dpi_scale_trans_282565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 456, 47), figure_282564, 'dpi_scale_trans')
        # Processing the call keyword arguments (line 455)
        kwargs_282566 = {}
        # Getting the type of 'mtransforms' (line 455)
        mtransforms_282557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 8), 'mtransforms', False)
        # Obtaining the member 'ScaledTranslation' of a type (line 455)
        ScaledTranslation_282558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 8), mtransforms_282557, 'ScaledTranslation')
        # Obtaining the member '__init__' of a type (line 455)
        init___282559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 8), ScaledTranslation_282558, '__init__')
        # Calling __init__(args, kwargs) (line 455)
        init___call_result_282567 = invoke(stypy.reporting.localization.Localization(__file__, 455, 8), init___282559, *[self_282560, pad_282561, pad_282562, dpi_scale_trans_282565], **kwargs_282566)
        
        
        # Call to set_children(...): (line 457)
        # Processing the call arguments (line 457)
        # Getting the type of 'axes' (line 457)
        axes_282570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 26), 'axes', False)
        # Obtaining the member '_realViewLim' of a type (line 457)
        _realViewLim_282571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 457, 26), axes_282570, '_realViewLim')
        # Processing the call keyword arguments (line 457)
        kwargs_282572 = {}
        # Getting the type of 'self' (line 457)
        self_282568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 457)
        set_children_282569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 457, 8), self_282568, 'set_children')
        # Calling set_children(args, kwargs) (line 457)
        set_children_call_result_282573 = invoke(stypy.reporting.localization.Localization(__file__, 457, 8), set_children_282569, *[_realViewLim_282571], **kwargs_282572)
        
        
        # Assigning a Name to a Attribute (line 458):
        
        # Assigning a Name to a Attribute (line 458):
        # Getting the type of 'axes' (line 458)
        axes_282574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 20), 'axes')
        # Getting the type of 'self' (line 458)
        self_282575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 8), 'self')
        # Setting the type of the member 'axes' of a type (line 458)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 8), self_282575, 'axes', axes_282574)
        
        # Assigning a Name to a Attribute (line 459):
        
        # Assigning a Name to a Attribute (line 459):
        # Getting the type of 'mode' (line 459)
        mode_282576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 20), 'mode')
        # Getting the type of 'self' (line 459)
        self_282577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 8), 'self')
        # Setting the type of the member 'mode' of a type (line 459)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 459, 8), self_282577, 'mode', mode_282576)
        
        # Assigning a Name to a Attribute (line 460):
        
        # Assigning a Name to a Attribute (line 460):
        # Getting the type of 'pad' (line 460)
        pad_282578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 19), 'pad')
        # Getting the type of 'self' (line 460)
        self_282579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'self')
        # Setting the type of the member 'pad' of a type (line 460)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 8), self_282579, 'pad', pad_282578)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_matrix'
        module_type_store = module_type_store.open_function_context('get_matrix', 462, 4, False)
        # Assigning a type to the variable 'self' (line 463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ThetaShift.get_matrix.__dict__.__setitem__('stypy_localization', localization)
        _ThetaShift.get_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ThetaShift.get_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ThetaShift.get_matrix.__dict__.__setitem__('stypy_function_name', '_ThetaShift.get_matrix')
        _ThetaShift.get_matrix.__dict__.__setitem__('stypy_param_names_list', [])
        _ThetaShift.get_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ThetaShift.get_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ThetaShift.get_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ThetaShift.get_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ThetaShift.get_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ThetaShift.get_matrix.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ThetaShift.get_matrix', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_matrix', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_matrix(...)' code ##################

        
        # Getting the type of 'self' (line 463)
        self_282580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 11), 'self')
        # Obtaining the member '_invalid' of a type (line 463)
        _invalid_282581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 463, 11), self_282580, '_invalid')
        # Testing the type of an if condition (line 463)
        if_condition_282582 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 463, 8), _invalid_282581)
        # Assigning a type to the variable 'if_condition_282582' (line 463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 8), 'if_condition_282582', if_condition_282582)
        # SSA begins for if statement (line 463)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 464)
        self_282583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 15), 'self')
        # Obtaining the member 'mode' of a type (line 464)
        mode_282584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 15), self_282583, 'mode')
        unicode_282585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 28), 'unicode', u'rlabel')
        # Applying the binary operator '==' (line 464)
        result_eq_282586 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 15), '==', mode_282584, unicode_282585)
        
        # Testing the type of an if condition (line 464)
        if_condition_282587 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 464, 12), result_eq_282586)
        # Assigning a type to the variable 'if_condition_282587' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 12), 'if_condition_282587', if_condition_282587)
        # SSA begins for if statement (line 464)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 465):
        
        # Assigning a BinOp to a Name (line 465):
        
        # Call to deg2rad(...): (line 466)
        # Processing the call arguments (line 466)
        
        # Call to get_rlabel_position(...): (line 466)
        # Processing the call keyword arguments (line 466)
        kwargs_282593 = {}
        # Getting the type of 'self' (line 466)
        self_282590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 31), 'self', False)
        # Obtaining the member 'axes' of a type (line 466)
        axes_282591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 31), self_282590, 'axes')
        # Obtaining the member 'get_rlabel_position' of a type (line 466)
        get_rlabel_position_282592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 31), axes_282591, 'get_rlabel_position')
        # Calling get_rlabel_position(args, kwargs) (line 466)
        get_rlabel_position_call_result_282594 = invoke(stypy.reporting.localization.Localization(__file__, 466, 31), get_rlabel_position_282592, *[], **kwargs_282593)
        
        # Processing the call keyword arguments (line 466)
        kwargs_282595 = {}
        # Getting the type of 'np' (line 466)
        np_282588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 20), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 466)
        deg2rad_282589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 20), np_282588, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 466)
        deg2rad_call_result_282596 = invoke(stypy.reporting.localization.Localization(__file__, 466, 20), deg2rad_282589, *[get_rlabel_position_call_result_282594], **kwargs_282595)
        
        
        # Call to get_theta_direction(...): (line 467)
        # Processing the call keyword arguments (line 467)
        kwargs_282600 = {}
        # Getting the type of 'self' (line 467)
        self_282597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 20), 'self', False)
        # Obtaining the member 'axes' of a type (line 467)
        axes_282598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 20), self_282597, 'axes')
        # Obtaining the member 'get_theta_direction' of a type (line 467)
        get_theta_direction_282599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 20), axes_282598, 'get_theta_direction')
        # Calling get_theta_direction(args, kwargs) (line 467)
        get_theta_direction_call_result_282601 = invoke(stypy.reporting.localization.Localization(__file__, 467, 20), get_theta_direction_282599, *[], **kwargs_282600)
        
        # Applying the binary operator '*' (line 466)
        result_mul_282602 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 20), '*', deg2rad_call_result_282596, get_theta_direction_call_result_282601)
        
        
        # Call to get_theta_offset(...): (line 468)
        # Processing the call keyword arguments (line 468)
        kwargs_282606 = {}
        # Getting the type of 'self' (line 468)
        self_282603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 20), 'self', False)
        # Obtaining the member 'axes' of a type (line 468)
        axes_282604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 20), self_282603, 'axes')
        # Obtaining the member 'get_theta_offset' of a type (line 468)
        get_theta_offset_282605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 20), axes_282604, 'get_theta_offset')
        # Calling get_theta_offset(args, kwargs) (line 468)
        get_theta_offset_call_result_282607 = invoke(stypy.reporting.localization.Localization(__file__, 468, 20), get_theta_offset_282605, *[], **kwargs_282606)
        
        # Applying the binary operator '+' (line 466)
        result_add_282608 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 20), '+', result_mul_282602, get_theta_offset_call_result_282607)
        
        # Assigning a type to the variable 'angle' (line 465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 465, 16), 'angle', result_add_282608)
        # SSA branch for the else part of an if statement (line 464)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 471)
        self_282609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 19), 'self')
        # Obtaining the member 'mode' of a type (line 471)
        mode_282610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 19), self_282609, 'mode')
        unicode_282611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, 32), 'unicode', u'min')
        # Applying the binary operator '==' (line 471)
        result_eq_282612 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 19), '==', mode_282610, unicode_282611)
        
        # Testing the type of an if condition (line 471)
        if_condition_282613 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 471, 16), result_eq_282612)
        # Assigning a type to the variable 'if_condition_282613' (line 471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 16), 'if_condition_282613', if_condition_282613)
        # SSA begins for if statement (line 471)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 472):
        
        # Assigning a Attribute to a Name (line 472):
        # Getting the type of 'self' (line 472)
        self_282614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 28), 'self')
        # Obtaining the member 'axes' of a type (line 472)
        axes_282615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 28), self_282614, 'axes')
        # Obtaining the member '_realViewLim' of a type (line 472)
        _realViewLim_282616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 28), axes_282615, '_realViewLim')
        # Obtaining the member 'xmin' of a type (line 472)
        xmin_282617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 28), _realViewLim_282616, 'xmin')
        # Assigning a type to the variable 'angle' (line 472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 20), 'angle', xmin_282617)
        # SSA branch for the else part of an if statement (line 471)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 473)
        self_282618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 21), 'self')
        # Obtaining the member 'mode' of a type (line 473)
        mode_282619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 21), self_282618, 'mode')
        unicode_282620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 34), 'unicode', u'max')
        # Applying the binary operator '==' (line 473)
        result_eq_282621 = python_operator(stypy.reporting.localization.Localization(__file__, 473, 21), '==', mode_282619, unicode_282620)
        
        # Testing the type of an if condition (line 473)
        if_condition_282622 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 473, 21), result_eq_282621)
        # Assigning a type to the variable 'if_condition_282622' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 21), 'if_condition_282622', if_condition_282622)
        # SSA begins for if statement (line 473)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 474):
        
        # Assigning a Attribute to a Name (line 474):
        # Getting the type of 'self' (line 474)
        self_282623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 28), 'self')
        # Obtaining the member 'axes' of a type (line 474)
        axes_282624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 28), self_282623, 'axes')
        # Obtaining the member '_realViewLim' of a type (line 474)
        _realViewLim_282625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 28), axes_282624, '_realViewLim')
        # Obtaining the member 'xmax' of a type (line 474)
        xmax_282626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 28), _realViewLim_282625, 'xmax')
        # Assigning a type to the variable 'angle' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 20), 'angle', xmax_282626)
        # SSA join for if statement (line 473)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 471)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 464)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 476)
        self_282627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 15), 'self')
        # Obtaining the member 'mode' of a type (line 476)
        mode_282628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 15), self_282627, 'mode')
        
        # Obtaining an instance of the builtin type 'tuple' (line 476)
        tuple_282629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 476, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 476)
        # Adding element type (line 476)
        unicode_282630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 476, 29), 'unicode', u'rlabel')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 476, 29), tuple_282629, unicode_282630)
        # Adding element type (line 476)
        unicode_282631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 476, 39), 'unicode', u'min')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 476, 29), tuple_282629, unicode_282631)
        
        # Applying the binary operator 'in' (line 476)
        result_contains_282632 = python_operator(stypy.reporting.localization.Localization(__file__, 476, 15), 'in', mode_282628, tuple_282629)
        
        # Testing the type of an if condition (line 476)
        if_condition_282633 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 476, 12), result_contains_282632)
        # Assigning a type to the variable 'if_condition_282633' (line 476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 12), 'if_condition_282633', if_condition_282633)
        # SSA begins for if statement (line 476)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 477):
        
        # Assigning a Call to a Name (line 477):
        
        # Call to cos(...): (line 477)
        # Processing the call arguments (line 477)
        # Getting the type of 'angle' (line 477)
        angle_282636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 30), 'angle', False)
        # Getting the type of 'np' (line 477)
        np_282637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 38), 'np', False)
        # Obtaining the member 'pi' of a type (line 477)
        pi_282638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 38), np_282637, 'pi')
        int_282639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 46), 'int')
        # Applying the binary operator 'div' (line 477)
        result_div_282640 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 38), 'div', pi_282638, int_282639)
        
        # Applying the binary operator '-' (line 477)
        result_sub_282641 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 30), '-', angle_282636, result_div_282640)
        
        # Processing the call keyword arguments (line 477)
        kwargs_282642 = {}
        # Getting the type of 'np' (line 477)
        np_282634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 23), 'np', False)
        # Obtaining the member 'cos' of a type (line 477)
        cos_282635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 23), np_282634, 'cos')
        # Calling cos(args, kwargs) (line 477)
        cos_call_result_282643 = invoke(stypy.reporting.localization.Localization(__file__, 477, 23), cos_282635, *[result_sub_282641], **kwargs_282642)
        
        # Assigning a type to the variable 'padx' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 16), 'padx', cos_call_result_282643)
        
        # Assigning a Call to a Name (line 478):
        
        # Assigning a Call to a Name (line 478):
        
        # Call to sin(...): (line 478)
        # Processing the call arguments (line 478)
        # Getting the type of 'angle' (line 478)
        angle_282646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 30), 'angle', False)
        # Getting the type of 'np' (line 478)
        np_282647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 38), 'np', False)
        # Obtaining the member 'pi' of a type (line 478)
        pi_282648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 38), np_282647, 'pi')
        int_282649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 46), 'int')
        # Applying the binary operator 'div' (line 478)
        result_div_282650 = python_operator(stypy.reporting.localization.Localization(__file__, 478, 38), 'div', pi_282648, int_282649)
        
        # Applying the binary operator '-' (line 478)
        result_sub_282651 = python_operator(stypy.reporting.localization.Localization(__file__, 478, 30), '-', angle_282646, result_div_282650)
        
        # Processing the call keyword arguments (line 478)
        kwargs_282652 = {}
        # Getting the type of 'np' (line 478)
        np_282644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 23), 'np', False)
        # Obtaining the member 'sin' of a type (line 478)
        sin_282645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 23), np_282644, 'sin')
        # Calling sin(args, kwargs) (line 478)
        sin_call_result_282653 = invoke(stypy.reporting.localization.Localization(__file__, 478, 23), sin_282645, *[result_sub_282651], **kwargs_282652)
        
        # Assigning a type to the variable 'pady' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 16), 'pady', sin_call_result_282653)
        # SSA branch for the else part of an if statement (line 476)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 480):
        
        # Assigning a Call to a Name (line 480):
        
        # Call to cos(...): (line 480)
        # Processing the call arguments (line 480)
        # Getting the type of 'angle' (line 480)
        angle_282656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 30), 'angle', False)
        # Getting the type of 'np' (line 480)
        np_282657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 38), 'np', False)
        # Obtaining the member 'pi' of a type (line 480)
        pi_282658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 38), np_282657, 'pi')
        int_282659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 46), 'int')
        # Applying the binary operator 'div' (line 480)
        result_div_282660 = python_operator(stypy.reporting.localization.Localization(__file__, 480, 38), 'div', pi_282658, int_282659)
        
        # Applying the binary operator '+' (line 480)
        result_add_282661 = python_operator(stypy.reporting.localization.Localization(__file__, 480, 30), '+', angle_282656, result_div_282660)
        
        # Processing the call keyword arguments (line 480)
        kwargs_282662 = {}
        # Getting the type of 'np' (line 480)
        np_282654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 23), 'np', False)
        # Obtaining the member 'cos' of a type (line 480)
        cos_282655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 23), np_282654, 'cos')
        # Calling cos(args, kwargs) (line 480)
        cos_call_result_282663 = invoke(stypy.reporting.localization.Localization(__file__, 480, 23), cos_282655, *[result_add_282661], **kwargs_282662)
        
        # Assigning a type to the variable 'padx' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 16), 'padx', cos_call_result_282663)
        
        # Assigning a Call to a Name (line 481):
        
        # Assigning a Call to a Name (line 481):
        
        # Call to sin(...): (line 481)
        # Processing the call arguments (line 481)
        # Getting the type of 'angle' (line 481)
        angle_282666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 30), 'angle', False)
        # Getting the type of 'np' (line 481)
        np_282667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 38), 'np', False)
        # Obtaining the member 'pi' of a type (line 481)
        pi_282668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 481, 38), np_282667, 'pi')
        int_282669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 46), 'int')
        # Applying the binary operator 'div' (line 481)
        result_div_282670 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 38), 'div', pi_282668, int_282669)
        
        # Applying the binary operator '+' (line 481)
        result_add_282671 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 30), '+', angle_282666, result_div_282670)
        
        # Processing the call keyword arguments (line 481)
        kwargs_282672 = {}
        # Getting the type of 'np' (line 481)
        np_282664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 23), 'np', False)
        # Obtaining the member 'sin' of a type (line 481)
        sin_282665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 481, 23), np_282664, 'sin')
        # Calling sin(args, kwargs) (line 481)
        sin_call_result_282673 = invoke(stypy.reporting.localization.Localization(__file__, 481, 23), sin_282665, *[result_add_282671], **kwargs_282672)
        
        # Assigning a type to the variable 'pady' (line 481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 16), 'pady', sin_call_result_282673)
        # SSA join for if statement (line 476)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Attribute (line 483):
        
        # Assigning a Tuple to a Attribute (line 483):
        
        # Obtaining an instance of the builtin type 'tuple' (line 483)
        tuple_282674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 483)
        # Adding element type (line 483)
        # Getting the type of 'self' (line 483)
        self_282675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 23), 'self')
        # Obtaining the member 'pad' of a type (line 483)
        pad_282676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 23), self_282675, 'pad')
        # Getting the type of 'padx' (line 483)
        padx_282677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 34), 'padx')
        # Applying the binary operator '*' (line 483)
        result_mul_282678 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 23), '*', pad_282676, padx_282677)
        
        int_282679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 41), 'int')
        # Applying the binary operator 'div' (line 483)
        result_div_282680 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 39), 'div', result_mul_282678, int_282679)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 23), tuple_282674, result_div_282680)
        # Adding element type (line 483)
        # Getting the type of 'self' (line 483)
        self_282681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 45), 'self')
        # Obtaining the member 'pad' of a type (line 483)
        pad_282682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 45), self_282681, 'pad')
        # Getting the type of 'pady' (line 483)
        pady_282683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 56), 'pady')
        # Applying the binary operator '*' (line 483)
        result_mul_282684 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 45), '*', pad_282682, pady_282683)
        
        int_282685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 63), 'int')
        # Applying the binary operator 'div' (line 483)
        result_div_282686 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 61), 'div', result_mul_282684, int_282685)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 23), tuple_282674, result_div_282686)
        
        # Getting the type of 'self' (line 483)
        self_282687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 12), 'self')
        # Setting the type of the member '_t' of a type (line 483)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 12), self_282687, '_t', tuple_282674)
        # SSA join for if statement (line 463)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to get_matrix(...): (line 484)
        # Processing the call arguments (line 484)
        # Getting the type of 'self' (line 484)
        self_282691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 56), 'self', False)
        # Processing the call keyword arguments (line 484)
        kwargs_282692 = {}
        # Getting the type of 'mtransforms' (line 484)
        mtransforms_282688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 15), 'mtransforms', False)
        # Obtaining the member 'ScaledTranslation' of a type (line 484)
        ScaledTranslation_282689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 15), mtransforms_282688, 'ScaledTranslation')
        # Obtaining the member 'get_matrix' of a type (line 484)
        get_matrix_282690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 15), ScaledTranslation_282689, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 484)
        get_matrix_call_result_282693 = invoke(stypy.reporting.localization.Localization(__file__, 484, 15), get_matrix_282690, *[self_282691], **kwargs_282692)
        
        # Assigning a type to the variable 'stypy_return_type' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'stypy_return_type', get_matrix_call_result_282693)
        
        # ################# End of 'get_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 462)
        stypy_return_type_282694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282694)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_matrix'
        return stypy_return_type_282694


# Assigning a type to the variable '_ThetaShift' (line 438)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 0), '_ThetaShift', _ThetaShift)
# Declaration of the 'RadialTick' class
# Getting the type of 'maxis' (line 487)
maxis_282695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 17), 'maxis')
# Obtaining the member 'YTick' of a type (line 487)
YTick_282696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 17), maxis_282695, 'YTick')

class RadialTick(YTick_282696, ):
    unicode_282697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 496, (-1)), 'unicode', u"\n    A radial-axis tick.\n\n    This subclass of `YTick` provides radial ticks with some small modification\n    to their re-positioning such that ticks are rotated based on axes limits.\n    This results in ticks that are correctly perpendicular to the spine. Labels\n    are also rotated to be perpendicular to the spine, when 'auto' rotation is\n    enabled.\n    ")

    @norecursion
    def _get_text1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text1'
        module_type_store = module_type_store.open_function_context('_get_text1', 497, 4, False)
        # Assigning a type to the variable 'self' (line 498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadialTick._get_text1.__dict__.__setitem__('stypy_localization', localization)
        RadialTick._get_text1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadialTick._get_text1.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadialTick._get_text1.__dict__.__setitem__('stypy_function_name', 'RadialTick._get_text1')
        RadialTick._get_text1.__dict__.__setitem__('stypy_param_names_list', [])
        RadialTick._get_text1.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadialTick._get_text1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadialTick._get_text1.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadialTick._get_text1.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadialTick._get_text1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadialTick._get_text1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialTick._get_text1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text1(...)' code ##################

        
        # Assigning a Call to a Name (line 498):
        
        # Assigning a Call to a Name (line 498):
        
        # Call to _get_text1(...): (line 498)
        # Processing the call keyword arguments (line 498)
        kwargs_282704 = {}
        
        # Call to super(...): (line 498)
        # Processing the call arguments (line 498)
        # Getting the type of 'RadialTick' (line 498)
        RadialTick_282699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 18), 'RadialTick', False)
        # Getting the type of 'self' (line 498)
        self_282700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 30), 'self', False)
        # Processing the call keyword arguments (line 498)
        kwargs_282701 = {}
        # Getting the type of 'super' (line 498)
        super_282698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 12), 'super', False)
        # Calling super(args, kwargs) (line 498)
        super_call_result_282702 = invoke(stypy.reporting.localization.Localization(__file__, 498, 12), super_282698, *[RadialTick_282699, self_282700], **kwargs_282701)
        
        # Obtaining the member '_get_text1' of a type (line 498)
        _get_text1_282703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 12), super_call_result_282702, '_get_text1')
        # Calling _get_text1(args, kwargs) (line 498)
        _get_text1_call_result_282705 = invoke(stypy.reporting.localization.Localization(__file__, 498, 12), _get_text1_282703, *[], **kwargs_282704)
        
        # Assigning a type to the variable 't' (line 498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 8), 't', _get_text1_call_result_282705)
        
        # Call to set_rotation_mode(...): (line 499)
        # Processing the call arguments (line 499)
        unicode_282708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 499, 28), 'unicode', u'anchor')
        # Processing the call keyword arguments (line 499)
        kwargs_282709 = {}
        # Getting the type of 't' (line 499)
        t_282706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 8), 't', False)
        # Obtaining the member 'set_rotation_mode' of a type (line 499)
        set_rotation_mode_282707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 8), t_282706, 'set_rotation_mode')
        # Calling set_rotation_mode(args, kwargs) (line 499)
        set_rotation_mode_call_result_282710 = invoke(stypy.reporting.localization.Localization(__file__, 499, 8), set_rotation_mode_282707, *[unicode_282708], **kwargs_282709)
        
        # Getting the type of 't' (line 500)
        t_282711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 15), 't')
        # Assigning a type to the variable 'stypy_return_type' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 8), 'stypy_return_type', t_282711)
        
        # ################# End of '_get_text1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text1' in the type store
        # Getting the type of 'stypy_return_type' (line 497)
        stypy_return_type_282712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282712)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text1'
        return stypy_return_type_282712


    @norecursion
    def _get_text2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text2'
        module_type_store = module_type_store.open_function_context('_get_text2', 502, 4, False)
        # Assigning a type to the variable 'self' (line 503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadialTick._get_text2.__dict__.__setitem__('stypy_localization', localization)
        RadialTick._get_text2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadialTick._get_text2.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadialTick._get_text2.__dict__.__setitem__('stypy_function_name', 'RadialTick._get_text2')
        RadialTick._get_text2.__dict__.__setitem__('stypy_param_names_list', [])
        RadialTick._get_text2.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadialTick._get_text2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadialTick._get_text2.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadialTick._get_text2.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadialTick._get_text2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadialTick._get_text2.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialTick._get_text2', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text2', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text2(...)' code ##################

        
        # Assigning a Call to a Name (line 503):
        
        # Assigning a Call to a Name (line 503):
        
        # Call to _get_text2(...): (line 503)
        # Processing the call keyword arguments (line 503)
        kwargs_282719 = {}
        
        # Call to super(...): (line 503)
        # Processing the call arguments (line 503)
        # Getting the type of 'RadialTick' (line 503)
        RadialTick_282714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 18), 'RadialTick', False)
        # Getting the type of 'self' (line 503)
        self_282715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 30), 'self', False)
        # Processing the call keyword arguments (line 503)
        kwargs_282716 = {}
        # Getting the type of 'super' (line 503)
        super_282713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 12), 'super', False)
        # Calling super(args, kwargs) (line 503)
        super_call_result_282717 = invoke(stypy.reporting.localization.Localization(__file__, 503, 12), super_282713, *[RadialTick_282714, self_282715], **kwargs_282716)
        
        # Obtaining the member '_get_text2' of a type (line 503)
        _get_text2_282718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 12), super_call_result_282717, '_get_text2')
        # Calling _get_text2(args, kwargs) (line 503)
        _get_text2_call_result_282720 = invoke(stypy.reporting.localization.Localization(__file__, 503, 12), _get_text2_282718, *[], **kwargs_282719)
        
        # Assigning a type to the variable 't' (line 503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 8), 't', _get_text2_call_result_282720)
        
        # Call to set_rotation_mode(...): (line 504)
        # Processing the call arguments (line 504)
        unicode_282723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, 28), 'unicode', u'anchor')
        # Processing the call keyword arguments (line 504)
        kwargs_282724 = {}
        # Getting the type of 't' (line 504)
        t_282721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 8), 't', False)
        # Obtaining the member 'set_rotation_mode' of a type (line 504)
        set_rotation_mode_282722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 504, 8), t_282721, 'set_rotation_mode')
        # Calling set_rotation_mode(args, kwargs) (line 504)
        set_rotation_mode_call_result_282725 = invoke(stypy.reporting.localization.Localization(__file__, 504, 8), set_rotation_mode_282722, *[unicode_282723], **kwargs_282724)
        
        # Getting the type of 't' (line 505)
        t_282726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 15), 't')
        # Assigning a type to the variable 'stypy_return_type' (line 505)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 505, 8), 'stypy_return_type', t_282726)
        
        # ################# End of '_get_text2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text2' in the type store
        # Getting the type of 'stypy_return_type' (line 502)
        stypy_return_type_282727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282727)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text2'
        return stypy_return_type_282727


    @norecursion
    def _determine_anchor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_determine_anchor'
        module_type_store = module_type_store.open_function_context('_determine_anchor', 507, 4, False)
        # Assigning a type to the variable 'self' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadialTick._determine_anchor.__dict__.__setitem__('stypy_localization', localization)
        RadialTick._determine_anchor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadialTick._determine_anchor.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadialTick._determine_anchor.__dict__.__setitem__('stypy_function_name', 'RadialTick._determine_anchor')
        RadialTick._determine_anchor.__dict__.__setitem__('stypy_param_names_list', ['angle', 'start'])
        RadialTick._determine_anchor.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadialTick._determine_anchor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadialTick._determine_anchor.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadialTick._determine_anchor.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadialTick._determine_anchor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadialTick._determine_anchor.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialTick._determine_anchor', ['angle', 'start'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_determine_anchor', localization, ['angle', 'start'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_determine_anchor(...)' code ##################

        
        # Getting the type of 'start' (line 508)
        start_282728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 11), 'start')
        # Testing the type of an if condition (line 508)
        if_condition_282729 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 508, 8), start_282728)
        # Assigning a type to the variable 'if_condition_282729' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'if_condition_282729', if_condition_282729)
        # SSA begins for if statement (line 508)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        int_282730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 15), 'int')
        # Getting the type of 'angle' (line 509)
        angle_282731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 22), 'angle')
        # Applying the binary operator '<=' (line 509)
        result_le_282732 = python_operator(stypy.reporting.localization.Localization(__file__, 509, 15), '<=', int_282730, angle_282731)
        int_282733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 31), 'int')
        # Applying the binary operator '<=' (line 509)
        result_le_282734 = python_operator(stypy.reporting.localization.Localization(__file__, 509, 15), '<=', angle_282731, int_282733)
        # Applying the binary operator '&' (line 509)
        result_and__282735 = python_operator(stypy.reporting.localization.Localization(__file__, 509, 15), '&', result_le_282732, result_le_282734)
        
        # Testing the type of an if condition (line 509)
        if_condition_282736 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 509, 12), result_and__282735)
        # Assigning a type to the variable 'if_condition_282736' (line 509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 509, 12), 'if_condition_282736', if_condition_282736)
        # SSA begins for if statement (line 509)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 510)
        tuple_282737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 510)
        # Adding element type (line 510)
        unicode_282738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 23), 'unicode', u'left')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 510, 23), tuple_282737, unicode_282738)
        # Adding element type (line 510)
        unicode_282739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 31), 'unicode', u'center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 510, 23), tuple_282737, unicode_282739)
        
        # Assigning a type to the variable 'stypy_return_type' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 16), 'stypy_return_type', tuple_282737)
        # SSA branch for the else part of an if statement (line 509)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 512)
        tuple_282740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 512)
        # Adding element type (line 512)
        unicode_282741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 23), 'unicode', u'right')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 512, 23), tuple_282740, unicode_282741)
        # Adding element type (line 512)
        unicode_282742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 32), 'unicode', u'center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 512, 23), tuple_282740, unicode_282742)
        
        # Assigning a type to the variable 'stypy_return_type' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 16), 'stypy_return_type', tuple_282740)
        # SSA join for if statement (line 509)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 508)
        module_type_store.open_ssa_branch('else')
        
        
        int_282743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 15), 'int')
        # Getting the type of 'angle' (line 514)
        angle_282744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 22), 'angle')
        # Applying the binary operator '<=' (line 514)
        result_le_282745 = python_operator(stypy.reporting.localization.Localization(__file__, 514, 15), '<=', int_282743, angle_282744)
        int_282746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 31), 'int')
        # Applying the binary operator '<=' (line 514)
        result_le_282747 = python_operator(stypy.reporting.localization.Localization(__file__, 514, 15), '<=', angle_282744, int_282746)
        # Applying the binary operator '&' (line 514)
        result_and__282748 = python_operator(stypy.reporting.localization.Localization(__file__, 514, 15), '&', result_le_282745, result_le_282747)
        
        # Testing the type of an if condition (line 514)
        if_condition_282749 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 514, 12), result_and__282748)
        # Assigning a type to the variable 'if_condition_282749' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 12), 'if_condition_282749', if_condition_282749)
        # SSA begins for if statement (line 514)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 515)
        tuple_282750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 515)
        # Adding element type (line 515)
        unicode_282751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 23), 'unicode', u'right')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 515, 23), tuple_282750, unicode_282751)
        # Adding element type (line 515)
        unicode_282752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 32), 'unicode', u'center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 515, 23), tuple_282750, unicode_282752)
        
        # Assigning a type to the variable 'stypy_return_type' (line 515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 16), 'stypy_return_type', tuple_282750)
        # SSA branch for the else part of an if statement (line 514)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 517)
        tuple_282753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 517)
        # Adding element type (line 517)
        unicode_282754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 23), 'unicode', u'left')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 517, 23), tuple_282753, unicode_282754)
        # Adding element type (line 517)
        unicode_282755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 31), 'unicode', u'center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 517, 23), tuple_282753, unicode_282755)
        
        # Assigning a type to the variable 'stypy_return_type' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 16), 'stypy_return_type', tuple_282753)
        # SSA join for if statement (line 514)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 508)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_determine_anchor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_determine_anchor' in the type store
        # Getting the type of 'stypy_return_type' (line 507)
        stypy_return_type_282756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_282756)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_determine_anchor'
        return stypy_return_type_282756


    @norecursion
    def update_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_position'
        module_type_store = module_type_store.open_function_context('update_position', 519, 4, False)
        # Assigning a type to the variable 'self' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadialTick.update_position.__dict__.__setitem__('stypy_localization', localization)
        RadialTick.update_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadialTick.update_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadialTick.update_position.__dict__.__setitem__('stypy_function_name', 'RadialTick.update_position')
        RadialTick.update_position.__dict__.__setitem__('stypy_param_names_list', ['loc'])
        RadialTick.update_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadialTick.update_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadialTick.update_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadialTick.update_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadialTick.update_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadialTick.update_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialTick.update_position', ['loc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_position', localization, ['loc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_position(...)' code ##################

        
        # Call to update_position(...): (line 520)
        # Processing the call arguments (line 520)
        # Getting the type of 'loc' (line 520)
        loc_282763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 48), 'loc', False)
        # Processing the call keyword arguments (line 520)
        kwargs_282764 = {}
        
        # Call to super(...): (line 520)
        # Processing the call arguments (line 520)
        # Getting the type of 'RadialTick' (line 520)
        RadialTick_282758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 14), 'RadialTick', False)
        # Getting the type of 'self' (line 520)
        self_282759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 26), 'self', False)
        # Processing the call keyword arguments (line 520)
        kwargs_282760 = {}
        # Getting the type of 'super' (line 520)
        super_282757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 8), 'super', False)
        # Calling super(args, kwargs) (line 520)
        super_call_result_282761 = invoke(stypy.reporting.localization.Localization(__file__, 520, 8), super_282757, *[RadialTick_282758, self_282759], **kwargs_282760)
        
        # Obtaining the member 'update_position' of a type (line 520)
        update_position_282762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 8), super_call_result_282761, 'update_position')
        # Calling update_position(args, kwargs) (line 520)
        update_position_call_result_282765 = invoke(stypy.reporting.localization.Localization(__file__, 520, 8), update_position_282762, *[loc_282763], **kwargs_282764)
        
        
        # Assigning a Attribute to a Name (line 521):
        
        # Assigning a Attribute to a Name (line 521):
        # Getting the type of 'self' (line 521)
        self_282766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 15), 'self')
        # Obtaining the member 'axes' of a type (line 521)
        axes_282767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 15), self_282766, 'axes')
        # Assigning a type to the variable 'axes' (line 521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 521, 8), 'axes', axes_282767)
        
        # Assigning a Call to a Name (line 522):
        
        # Assigning a Call to a Name (line 522):
        
        # Call to get_thetamin(...): (line 522)
        # Processing the call keyword arguments (line 522)
        kwargs_282770 = {}
        # Getting the type of 'axes' (line 522)
        axes_282768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 19), 'axes', False)
        # Obtaining the member 'get_thetamin' of a type (line 522)
        get_thetamin_282769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 19), axes_282768, 'get_thetamin')
        # Calling get_thetamin(args, kwargs) (line 522)
        get_thetamin_call_result_282771 = invoke(stypy.reporting.localization.Localization(__file__, 522, 19), get_thetamin_282769, *[], **kwargs_282770)
        
        # Assigning a type to the variable 'thetamin' (line 522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 8), 'thetamin', get_thetamin_call_result_282771)
        
        # Assigning a Call to a Name (line 523):
        
        # Assigning a Call to a Name (line 523):
        
        # Call to get_thetamax(...): (line 523)
        # Processing the call keyword arguments (line 523)
        kwargs_282774 = {}
        # Getting the type of 'axes' (line 523)
        axes_282772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 19), 'axes', False)
        # Obtaining the member 'get_thetamax' of a type (line 523)
        get_thetamax_282773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 19), axes_282772, 'get_thetamax')
        # Calling get_thetamax(args, kwargs) (line 523)
        get_thetamax_call_result_282775 = invoke(stypy.reporting.localization.Localization(__file__, 523, 19), get_thetamax_282773, *[], **kwargs_282774)
        
        # Assigning a type to the variable 'thetamax' (line 523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'thetamax', get_thetamax_call_result_282775)
        
        # Assigning a Call to a Name (line 524):
        
        # Assigning a Call to a Name (line 524):
        
        # Call to get_theta_direction(...): (line 524)
        # Processing the call keyword arguments (line 524)
        kwargs_282778 = {}
        # Getting the type of 'axes' (line 524)
        axes_282776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 20), 'axes', False)
        # Obtaining the member 'get_theta_direction' of a type (line 524)
        get_theta_direction_282777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 20), axes_282776, 'get_theta_direction')
        # Calling get_theta_direction(args, kwargs) (line 524)
        get_theta_direction_call_result_282779 = invoke(stypy.reporting.localization.Localization(__file__, 524, 20), get_theta_direction_282777, *[], **kwargs_282778)
        
        # Assigning a type to the variable 'direction' (line 524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 8), 'direction', get_theta_direction_call_result_282779)
        
        # Assigning a Call to a Name (line 525):
        
        # Assigning a Call to a Name (line 525):
        
        # Call to get_theta_offset(...): (line 525)
        # Processing the call keyword arguments (line 525)
        kwargs_282782 = {}
        # Getting the type of 'axes' (line 525)
        axes_282780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 21), 'axes', False)
        # Obtaining the member 'get_theta_offset' of a type (line 525)
        get_theta_offset_282781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 525, 21), axes_282780, 'get_theta_offset')
        # Calling get_theta_offset(args, kwargs) (line 525)
        get_theta_offset_call_result_282783 = invoke(stypy.reporting.localization.Localization(__file__, 525, 21), get_theta_offset_282781, *[], **kwargs_282782)
        
        # Assigning a type to the variable 'offset_rad' (line 525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 525, 8), 'offset_rad', get_theta_offset_call_result_282783)
        
        # Assigning a Call to a Name (line 526):
        
        # Assigning a Call to a Name (line 526):
        
        # Call to rad2deg(...): (line 526)
        # Processing the call arguments (line 526)
        # Getting the type of 'offset_rad' (line 526)
        offset_rad_282786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 28), 'offset_rad', False)
        # Processing the call keyword arguments (line 526)
        kwargs_282787 = {}
        # Getting the type of 'np' (line 526)
        np_282784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 17), 'np', False)
        # Obtaining the member 'rad2deg' of a type (line 526)
        rad2deg_282785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 17), np_282784, 'rad2deg')
        # Calling rad2deg(args, kwargs) (line 526)
        rad2deg_call_result_282788 = invoke(stypy.reporting.localization.Localization(__file__, 526, 17), rad2deg_282785, *[offset_rad_282786], **kwargs_282787)
        
        # Assigning a type to the variable 'offset' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'offset', rad2deg_call_result_282788)
        
        # Assigning a Call to a Name (line 527):
        
        # Assigning a Call to a Name (line 527):
        
        # Call to _is_full_circle_deg(...): (line 527)
        # Processing the call arguments (line 527)
        # Getting the type of 'thetamin' (line 527)
        thetamin_282790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 35), 'thetamin', False)
        # Getting the type of 'thetamax' (line 527)
        thetamax_282791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 45), 'thetamax', False)
        # Processing the call keyword arguments (line 527)
        kwargs_282792 = {}
        # Getting the type of '_is_full_circle_deg' (line 527)
        _is_full_circle_deg_282789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 15), '_is_full_circle_deg', False)
        # Calling _is_full_circle_deg(args, kwargs) (line 527)
        _is_full_circle_deg_call_result_282793 = invoke(stypy.reporting.localization.Localization(__file__, 527, 15), _is_full_circle_deg_282789, *[thetamin_282790, thetamax_282791], **kwargs_282792)
        
        # Assigning a type to the variable 'full' (line 527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 527, 8), 'full', _is_full_circle_deg_call_result_282793)
        
        # Getting the type of 'full' (line 529)
        full_282794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 11), 'full')
        # Testing the type of an if condition (line 529)
        if_condition_282795 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 529, 8), full_282794)
        # Assigning a type to the variable 'if_condition_282795' (line 529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 8), 'if_condition_282795', if_condition_282795)
        # SSA begins for if statement (line 529)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 530):
        
        # Assigning a BinOp to a Name (line 530):
        
        # Call to get_rlabel_position(...): (line 530)
        # Processing the call keyword arguments (line 530)
        kwargs_282798 = {}
        # Getting the type of 'axes' (line 530)
        axes_282796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 20), 'axes', False)
        # Obtaining the member 'get_rlabel_position' of a type (line 530)
        get_rlabel_position_282797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 20), axes_282796, 'get_rlabel_position')
        # Calling get_rlabel_position(args, kwargs) (line 530)
        get_rlabel_position_call_result_282799 = invoke(stypy.reporting.localization.Localization(__file__, 530, 20), get_rlabel_position_282797, *[], **kwargs_282798)
        
        # Getting the type of 'direction' (line 530)
        direction_282800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 49), 'direction')
        # Applying the binary operator '*' (line 530)
        result_mul_282801 = python_operator(stypy.reporting.localization.Localization(__file__, 530, 20), '*', get_rlabel_position_call_result_282799, direction_282800)
        
        # Getting the type of 'offset' (line 530)
        offset_282802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 61), 'offset')
        # Applying the binary operator '+' (line 530)
        result_add_282803 = python_operator(stypy.reporting.localization.Localization(__file__, 530, 20), '+', result_mul_282801, offset_282802)
        
        int_282804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 70), 'int')
        # Applying the binary operator '-' (line 530)
        result_sub_282805 = python_operator(stypy.reporting.localization.Localization(__file__, 530, 68), '-', result_add_282803, int_282804)
        
        # Assigning a type to the variable 'angle' (line 530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 12), 'angle', result_sub_282805)
        
        # Assigning a Num to a Name (line 531):
        
        # Assigning a Num to a Name (line 531):
        int_282806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 25), 'int')
        # Assigning a type to the variable 'tick_angle' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 12), 'tick_angle', int_282806)
        
        
        # Getting the type of 'angle' (line 532)
        angle_282807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 15), 'angle')
        int_282808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, 23), 'int')
        # Applying the binary operator '>' (line 532)
        result_gt_282809 = python_operator(stypy.reporting.localization.Localization(__file__, 532, 15), '>', angle_282807, int_282808)
        
        # Testing the type of an if condition (line 532)
        if_condition_282810 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 532, 12), result_gt_282809)
        # Assigning a type to the variable 'if_condition_282810' (line 532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 12), 'if_condition_282810', if_condition_282810)
        # SSA begins for if statement (line 532)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 533):
        
        # Assigning a BinOp to a Name (line 533):
        # Getting the type of 'angle' (line 533)
        angle_282811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 29), 'angle')
        int_282812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 37), 'int')
        # Applying the binary operator '-' (line 533)
        result_sub_282813 = python_operator(stypy.reporting.localization.Localization(__file__, 533, 29), '-', angle_282811, int_282812)
        
        # Assigning a type to the variable 'text_angle' (line 533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 16), 'text_angle', result_sub_282813)
        # SSA branch for the else part of an if statement (line 532)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'angle' (line 534)
        angle_282814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 17), 'angle')
        int_282815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 25), 'int')
        # Applying the binary operator '<' (line 534)
        result_lt_282816 = python_operator(stypy.reporting.localization.Localization(__file__, 534, 17), '<', angle_282814, int_282815)
        
        # Testing the type of an if condition (line 534)
        if_condition_282817 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 534, 17), result_lt_282816)
        # Assigning a type to the variable 'if_condition_282817' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 17), 'if_condition_282817', if_condition_282817)
        # SSA begins for if statement (line 534)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 535):
        
        # Assigning a BinOp to a Name (line 535):
        # Getting the type of 'angle' (line 535)
        angle_282818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 29), 'angle')
        int_282819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 37), 'int')
        # Applying the binary operator '+' (line 535)
        result_add_282820 = python_operator(stypy.reporting.localization.Localization(__file__, 535, 29), '+', angle_282818, int_282819)
        
        # Assigning a type to the variable 'text_angle' (line 535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 16), 'text_angle', result_add_282820)
        # SSA branch for the else part of an if statement (line 534)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 537):
        
        # Assigning a Name to a Name (line 537):
        # Getting the type of 'angle' (line 537)
        angle_282821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 29), 'angle')
        # Assigning a type to the variable 'text_angle' (line 537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 537, 16), 'text_angle', angle_282821)
        # SSA join for if statement (line 534)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 532)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 529)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 539):
        
        # Assigning a BinOp to a Name (line 539):
        # Getting the type of 'thetamin' (line 539)
        thetamin_282822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 20), 'thetamin')
        # Getting the type of 'direction' (line 539)
        direction_282823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 31), 'direction')
        # Applying the binary operator '*' (line 539)
        result_mul_282824 = python_operator(stypy.reporting.localization.Localization(__file__, 539, 20), '*', thetamin_282822, direction_282823)
        
        # Getting the type of 'offset' (line 539)
        offset_282825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 43), 'offset')
        # Applying the binary operator '+' (line 539)
        result_add_282826 = python_operator(stypy.reporting.localization.Localization(__file__, 539, 20), '+', result_mul_282824, offset_282825)
        
        int_282827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 539, 52), 'int')
        # Applying the binary operator '-' (line 539)
        result_sub_282828 = python_operator(stypy.reporting.localization.Localization(__file__, 539, 50), '-', result_add_282826, int_282827)
        
        # Assigning a type to the variable 'angle' (line 539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 539, 12), 'angle', result_sub_282828)
        
        
        # Getting the type of 'direction' (line 540)
        direction_282829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 15), 'direction')
        int_282830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 27), 'int')
        # Applying the binary operator '>' (line 540)
        result_gt_282831 = python_operator(stypy.reporting.localization.Localization(__file__, 540, 15), '>', direction_282829, int_282830)
        
        # Testing the type of an if condition (line 540)
        if_condition_282832 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 540, 12), result_gt_282831)
        # Assigning a type to the variable 'if_condition_282832' (line 540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 12), 'if_condition_282832', if_condition_282832)
        # SSA begins for if statement (line 540)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 541):
        
        # Assigning a Call to a Name (line 541):
        
        # Call to deg2rad(...): (line 541)
        # Processing the call arguments (line 541)
        # Getting the type of 'angle' (line 541)
        angle_282835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 40), 'angle', False)
        # Processing the call keyword arguments (line 541)
        kwargs_282836 = {}
        # Getting the type of 'np' (line 541)
        np_282833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 29), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 541)
        deg2rad_282834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 29), np_282833, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 541)
        deg2rad_call_result_282837 = invoke(stypy.reporting.localization.Localization(__file__, 541, 29), deg2rad_282834, *[angle_282835], **kwargs_282836)
        
        # Assigning a type to the variable 'tick_angle' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 16), 'tick_angle', deg2rad_call_result_282837)
        # SSA branch for the else part of an if statement (line 540)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 543):
        
        # Assigning a Call to a Name (line 543):
        
        # Call to deg2rad(...): (line 543)
        # Processing the call arguments (line 543)
        # Getting the type of 'angle' (line 543)
        angle_282840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 40), 'angle', False)
        int_282841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 48), 'int')
        # Applying the binary operator '+' (line 543)
        result_add_282842 = python_operator(stypy.reporting.localization.Localization(__file__, 543, 40), '+', angle_282840, int_282841)
        
        # Processing the call keyword arguments (line 543)
        kwargs_282843 = {}
        # Getting the type of 'np' (line 543)
        np_282838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 29), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 543)
        deg2rad_282839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 29), np_282838, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 543)
        deg2rad_call_result_282844 = invoke(stypy.reporting.localization.Localization(__file__, 543, 29), deg2rad_282839, *[result_add_282842], **kwargs_282843)
        
        # Assigning a type to the variable 'tick_angle' (line 543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 16), 'tick_angle', deg2rad_call_result_282844)
        # SSA join for if statement (line 540)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'angle' (line 544)
        angle_282845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 15), 'angle')
        int_282846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 23), 'int')
        # Applying the binary operator '>' (line 544)
        result_gt_282847 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 15), '>', angle_282845, int_282846)
        
        # Testing the type of an if condition (line 544)
        if_condition_282848 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 544, 12), result_gt_282847)
        # Assigning a type to the variable 'if_condition_282848' (line 544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 12), 'if_condition_282848', if_condition_282848)
        # SSA begins for if statement (line 544)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 545):
        
        # Assigning a BinOp to a Name (line 545):
        # Getting the type of 'angle' (line 545)
        angle_282849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 29), 'angle')
        int_282850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 37), 'int')
        # Applying the binary operator '-' (line 545)
        result_sub_282851 = python_operator(stypy.reporting.localization.Localization(__file__, 545, 29), '-', angle_282849, int_282850)
        
        # Assigning a type to the variable 'text_angle' (line 545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 545, 16), 'text_angle', result_sub_282851)
        # SSA branch for the else part of an if statement (line 544)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'angle' (line 546)
        angle_282852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 17), 'angle')
        int_282853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 25), 'int')
        # Applying the binary operator '<' (line 546)
        result_lt_282854 = python_operator(stypy.reporting.localization.Localization(__file__, 546, 17), '<', angle_282852, int_282853)
        
        # Testing the type of an if condition (line 546)
        if_condition_282855 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 546, 17), result_lt_282854)
        # Assigning a type to the variable 'if_condition_282855' (line 546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 17), 'if_condition_282855', if_condition_282855)
        # SSA begins for if statement (line 546)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 547):
        
        # Assigning a BinOp to a Name (line 547):
        # Getting the type of 'angle' (line 547)
        angle_282856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 29), 'angle')
        int_282857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 37), 'int')
        # Applying the binary operator '+' (line 547)
        result_add_282858 = python_operator(stypy.reporting.localization.Localization(__file__, 547, 29), '+', angle_282856, int_282857)
        
        # Assigning a type to the variable 'text_angle' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 16), 'text_angle', result_add_282858)
        # SSA branch for the else part of an if statement (line 546)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 549):
        
        # Assigning a Name to a Name (line 549):
        # Getting the type of 'angle' (line 549)
        angle_282859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 29), 'angle')
        # Assigning a type to the variable 'text_angle' (line 549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 16), 'text_angle', angle_282859)
        # SSA join for if statement (line 546)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 544)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 529)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Tuple (line 550):
        
        # Assigning a Subscript to a Name (line 550):
        
        # Obtaining the type of the subscript
        int_282860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 550, 8), 'int')
        # Getting the type of 'self' (line 550)
        self_282861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 27), 'self')
        # Obtaining the member '_labelrotation' of a type (line 550)
        _labelrotation_282862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 550, 27), self_282861, '_labelrotation')
        # Obtaining the member '__getitem__' of a type (line 550)
        getitem___282863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 550, 8), _labelrotation_282862, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 550)
        subscript_call_result_282864 = invoke(stypy.reporting.localization.Localization(__file__, 550, 8), getitem___282863, int_282860)
        
        # Assigning a type to the variable 'tuple_var_assignment_281125' (line 550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 8), 'tuple_var_assignment_281125', subscript_call_result_282864)
        
        # Assigning a Subscript to a Name (line 550):
        
        # Obtaining the type of the subscript
        int_282865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 550, 8), 'int')
        # Getting the type of 'self' (line 550)
        self_282866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 27), 'self')
        # Obtaining the member '_labelrotation' of a type (line 550)
        _labelrotation_282867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 550, 27), self_282866, '_labelrotation')
        # Obtaining the member '__getitem__' of a type (line 550)
        getitem___282868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 550, 8), _labelrotation_282867, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 550)
        subscript_call_result_282869 = invoke(stypy.reporting.localization.Localization(__file__, 550, 8), getitem___282868, int_282865)
        
        # Assigning a type to the variable 'tuple_var_assignment_281126' (line 550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 8), 'tuple_var_assignment_281126', subscript_call_result_282869)
        
        # Assigning a Name to a Name (line 550):
        # Getting the type of 'tuple_var_assignment_281125' (line 550)
        tuple_var_assignment_281125_282870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 8), 'tuple_var_assignment_281125')
        # Assigning a type to the variable 'mode' (line 550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 8), 'mode', tuple_var_assignment_281125_282870)
        
        # Assigning a Name to a Name (line 550):
        # Getting the type of 'tuple_var_assignment_281126' (line 550)
        tuple_var_assignment_281126_282871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 8), 'tuple_var_assignment_281126')
        # Assigning a type to the variable 'user_angle' (line 550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 14), 'user_angle', tuple_var_assignment_281126_282871)
        
        
        # Getting the type of 'mode' (line 551)
        mode_282872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 11), 'mode')
        unicode_282873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 19), 'unicode', u'auto')
        # Applying the binary operator '==' (line 551)
        result_eq_282874 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 11), '==', mode_282872, unicode_282873)
        
        # Testing the type of an if condition (line 551)
        if_condition_282875 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 551, 8), result_eq_282874)
        # Assigning a type to the variable 'if_condition_282875' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 8), 'if_condition_282875', if_condition_282875)
        # SSA begins for if statement (line 551)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'text_angle' (line 552)
        text_angle_282876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 12), 'text_angle')
        # Getting the type of 'user_angle' (line 552)
        user_angle_282877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 26), 'user_angle')
        # Applying the binary operator '+=' (line 552)
        result_iadd_282878 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 12), '+=', text_angle_282876, user_angle_282877)
        # Assigning a type to the variable 'text_angle' (line 552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 12), 'text_angle', result_iadd_282878)
        
        # SSA branch for the else part of an if statement (line 551)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 554):
        
        # Assigning a Name to a Name (line 554):
        # Getting the type of 'user_angle' (line 554)
        user_angle_282879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 25), 'user_angle')
        # Assigning a type to the variable 'text_angle' (line 554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 12), 'text_angle', user_angle_282879)
        # SSA join for if statement (line 551)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 555)
        self_282880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 11), 'self')
        # Obtaining the member 'label1On' of a type (line 555)
        label1On_282881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 11), self_282880, 'label1On')
        # Testing the type of an if condition (line 555)
        if_condition_282882 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 555, 8), label1On_282881)
        # Assigning a type to the variable 'if_condition_282882' (line 555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 8), 'if_condition_282882', if_condition_282882)
        # SSA begins for if statement (line 555)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'full' (line 556)
        full_282883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 15), 'full')
        # Testing the type of an if condition (line 556)
        if_condition_282884 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 556, 12), full_282883)
        # Assigning a type to the variable 'if_condition_282884' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 12), 'if_condition_282884', if_condition_282884)
        # SSA begins for if statement (line 556)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 557):
        
        # Assigning a Str to a Name (line 557):
        unicode_282885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 21), 'unicode', u'left')
        # Assigning a type to the variable 'ha' (line 557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 16), 'ha', unicode_282885)
        
        # Assigning a Str to a Name (line 558):
        
        # Assigning a Str to a Name (line 558):
        unicode_282886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 558, 21), 'unicode', u'bottom')
        # Assigning a type to the variable 'va' (line 558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 558, 16), 'va', unicode_282886)
        # SSA branch for the else part of an if statement (line 556)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 560):
        
        # Assigning a Call to a Name:
        
        # Call to _determine_anchor(...): (line 560)
        # Processing the call arguments (line 560)
        # Getting the type of 'angle' (line 560)
        angle_282889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 48), 'angle', False)
        # Getting the type of 'True' (line 560)
        True_282890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 55), 'True', False)
        # Processing the call keyword arguments (line 560)
        kwargs_282891 = {}
        # Getting the type of 'self' (line 560)
        self_282887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 25), 'self', False)
        # Obtaining the member '_determine_anchor' of a type (line 560)
        _determine_anchor_282888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 25), self_282887, '_determine_anchor')
        # Calling _determine_anchor(args, kwargs) (line 560)
        _determine_anchor_call_result_282892 = invoke(stypy.reporting.localization.Localization(__file__, 560, 25), _determine_anchor_282888, *[angle_282889, True_282890], **kwargs_282891)
        
        # Assigning a type to the variable 'call_assignment_281127' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 16), 'call_assignment_281127', _determine_anchor_call_result_282892)
        
        # Assigning a Call to a Name (line 560):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_282895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 16), 'int')
        # Processing the call keyword arguments
        kwargs_282896 = {}
        # Getting the type of 'call_assignment_281127' (line 560)
        call_assignment_281127_282893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 16), 'call_assignment_281127', False)
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___282894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 16), call_assignment_281127_282893, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_282897 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___282894, *[int_282895], **kwargs_282896)
        
        # Assigning a type to the variable 'call_assignment_281128' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 16), 'call_assignment_281128', getitem___call_result_282897)
        
        # Assigning a Name to a Name (line 560):
        # Getting the type of 'call_assignment_281128' (line 560)
        call_assignment_281128_282898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 16), 'call_assignment_281128')
        # Assigning a type to the variable 'ha' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 16), 'ha', call_assignment_281128_282898)
        
        # Assigning a Call to a Name (line 560):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_282901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 16), 'int')
        # Processing the call keyword arguments
        kwargs_282902 = {}
        # Getting the type of 'call_assignment_281127' (line 560)
        call_assignment_281127_282899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 16), 'call_assignment_281127', False)
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___282900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 16), call_assignment_281127_282899, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_282903 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___282900, *[int_282901], **kwargs_282902)
        
        # Assigning a type to the variable 'call_assignment_281129' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 16), 'call_assignment_281129', getitem___call_result_282903)
        
        # Assigning a Name to a Name (line 560):
        # Getting the type of 'call_assignment_281129' (line 560)
        call_assignment_281129_282904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 16), 'call_assignment_281129')
        # Assigning a type to the variable 'va' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 20), 'va', call_assignment_281129_282904)
        # SSA join for if statement (line 556)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_ha(...): (line 561)
        # Processing the call arguments (line 561)
        # Getting the type of 'ha' (line 561)
        ha_282908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 31), 'ha', False)
        # Processing the call keyword arguments (line 561)
        kwargs_282909 = {}
        # Getting the type of 'self' (line 561)
        self_282905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 12), 'self', False)
        # Obtaining the member 'label1' of a type (line 561)
        label1_282906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 12), self_282905, 'label1')
        # Obtaining the member 'set_ha' of a type (line 561)
        set_ha_282907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 12), label1_282906, 'set_ha')
        # Calling set_ha(args, kwargs) (line 561)
        set_ha_call_result_282910 = invoke(stypy.reporting.localization.Localization(__file__, 561, 12), set_ha_282907, *[ha_282908], **kwargs_282909)
        
        
        # Call to set_va(...): (line 562)
        # Processing the call arguments (line 562)
        # Getting the type of 'va' (line 562)
        va_282914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 31), 'va', False)
        # Processing the call keyword arguments (line 562)
        kwargs_282915 = {}
        # Getting the type of 'self' (line 562)
        self_282911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 12), 'self', False)
        # Obtaining the member 'label1' of a type (line 562)
        label1_282912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 12), self_282911, 'label1')
        # Obtaining the member 'set_va' of a type (line 562)
        set_va_282913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 12), label1_282912, 'set_va')
        # Calling set_va(args, kwargs) (line 562)
        set_va_call_result_282916 = invoke(stypy.reporting.localization.Localization(__file__, 562, 12), set_va_282913, *[va_282914], **kwargs_282915)
        
        
        # Call to set_rotation(...): (line 563)
        # Processing the call arguments (line 563)
        # Getting the type of 'text_angle' (line 563)
        text_angle_282920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 37), 'text_angle', False)
        # Processing the call keyword arguments (line 563)
        kwargs_282921 = {}
        # Getting the type of 'self' (line 563)
        self_282917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 12), 'self', False)
        # Obtaining the member 'label1' of a type (line 563)
        label1_282918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 12), self_282917, 'label1')
        # Obtaining the member 'set_rotation' of a type (line 563)
        set_rotation_282919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 12), label1_282918, 'set_rotation')
        # Calling set_rotation(args, kwargs) (line 563)
        set_rotation_call_result_282922 = invoke(stypy.reporting.localization.Localization(__file__, 563, 12), set_rotation_282919, *[text_angle_282920], **kwargs_282921)
        
        # SSA join for if statement (line 555)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 564)
        self_282923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 11), 'self')
        # Obtaining the member 'tick1On' of a type (line 564)
        tick1On_282924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 11), self_282923, 'tick1On')
        # Testing the type of an if condition (line 564)
        if_condition_282925 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 564, 8), tick1On_282924)
        # Assigning a type to the variable 'if_condition_282925' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'if_condition_282925', if_condition_282925)
        # SSA begins for if statement (line 564)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 565):
        
        # Assigning a Call to a Name (line 565):
        
        # Call to get_marker(...): (line 565)
        # Processing the call keyword arguments (line 565)
        kwargs_282929 = {}
        # Getting the type of 'self' (line 565)
        self_282926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 21), 'self', False)
        # Obtaining the member 'tick1line' of a type (line 565)
        tick1line_282927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 21), self_282926, 'tick1line')
        # Obtaining the member 'get_marker' of a type (line 565)
        get_marker_282928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 21), tick1line_282927, 'get_marker')
        # Calling get_marker(args, kwargs) (line 565)
        get_marker_call_result_282930 = invoke(stypy.reporting.localization.Localization(__file__, 565, 21), get_marker_282928, *[], **kwargs_282929)
        
        # Assigning a type to the variable 'marker' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 12), 'marker', get_marker_call_result_282930)
        
        
        # Getting the type of 'marker' (line 566)
        marker_282931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 15), 'marker')
        # Getting the type of 'mmarkers' (line 566)
        mmarkers_282932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 25), 'mmarkers')
        # Obtaining the member 'TICKLEFT' of a type (line 566)
        TICKLEFT_282933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 25), mmarkers_282932, 'TICKLEFT')
        # Applying the binary operator '==' (line 566)
        result_eq_282934 = python_operator(stypy.reporting.localization.Localization(__file__, 566, 15), '==', marker_282931, TICKLEFT_282933)
        
        # Testing the type of an if condition (line 566)
        if_condition_282935 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 566, 12), result_eq_282934)
        # Assigning a type to the variable 'if_condition_282935' (line 566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 12), 'if_condition_282935', if_condition_282935)
        # SSA begins for if statement (line 566)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 567):
        
        # Assigning a Call to a Name (line 567):
        
        # Call to rotate(...): (line 567)
        # Processing the call arguments (line 567)
        # Getting the type of 'tick_angle' (line 569)
        tick_angle_282946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 33), 'tick_angle', False)
        # Processing the call keyword arguments (line 567)
        kwargs_282947 = {}
        
        # Call to scale(...): (line 567)
        # Processing the call arguments (line 567)
        float_282941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 32), 'float')
        float_282942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 37), 'float')
        # Processing the call keyword arguments (line 567)
        kwargs_282943 = {}
        
        # Call to Affine2D(...): (line 567)
        # Processing the call keyword arguments (line 567)
        kwargs_282938 = {}
        # Getting the type of 'mtransforms' (line 567)
        mtransforms_282936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 25), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 567)
        Affine2D_282937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 25), mtransforms_282936, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 567)
        Affine2D_call_result_282939 = invoke(stypy.reporting.localization.Localization(__file__, 567, 25), Affine2D_282937, *[], **kwargs_282938)
        
        # Obtaining the member 'scale' of a type (line 567)
        scale_282940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 25), Affine2D_call_result_282939, 'scale')
        # Calling scale(args, kwargs) (line 567)
        scale_call_result_282944 = invoke(stypy.reporting.localization.Localization(__file__, 567, 25), scale_282940, *[float_282941, float_282942], **kwargs_282943)
        
        # Obtaining the member 'rotate' of a type (line 567)
        rotate_282945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 25), scale_call_result_282944, 'rotate')
        # Calling rotate(args, kwargs) (line 567)
        rotate_call_result_282948 = invoke(stypy.reporting.localization.Localization(__file__, 567, 25), rotate_282945, *[tick_angle_282946], **kwargs_282947)
        
        # Assigning a type to the variable 'trans' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 16), 'trans', rotate_call_result_282948)
        # SSA branch for the else part of an if statement (line 566)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'marker' (line 570)
        marker_282949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 17), 'marker')
        unicode_282950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 27), 'unicode', u'_')
        # Applying the binary operator '==' (line 570)
        result_eq_282951 = python_operator(stypy.reporting.localization.Localization(__file__, 570, 17), '==', marker_282949, unicode_282950)
        
        # Testing the type of an if condition (line 570)
        if_condition_282952 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 570, 17), result_eq_282951)
        # Assigning a type to the variable 'if_condition_282952' (line 570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 17), 'if_condition_282952', if_condition_282952)
        # SSA begins for if statement (line 570)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 571):
        
        # Assigning a Call to a Name (line 571):
        
        # Call to rotate(...): (line 571)
        # Processing the call arguments (line 571)
        # Getting the type of 'tick_angle' (line 573)
        tick_angle_282963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 33), 'tick_angle', False)
        # Getting the type of 'np' (line 573)
        np_282964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 46), 'np', False)
        # Obtaining the member 'pi' of a type (line 573)
        pi_282965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 46), np_282964, 'pi')
        int_282966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, 54), 'int')
        # Applying the binary operator 'div' (line 573)
        result_div_282967 = python_operator(stypy.reporting.localization.Localization(__file__, 573, 46), 'div', pi_282965, int_282966)
        
        # Applying the binary operator '+' (line 573)
        result_add_282968 = python_operator(stypy.reporting.localization.Localization(__file__, 573, 33), '+', tick_angle_282963, result_div_282967)
        
        # Processing the call keyword arguments (line 571)
        kwargs_282969 = {}
        
        # Call to scale(...): (line 571)
        # Processing the call arguments (line 571)
        float_282958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 32), 'float')
        float_282959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 37), 'float')
        # Processing the call keyword arguments (line 571)
        kwargs_282960 = {}
        
        # Call to Affine2D(...): (line 571)
        # Processing the call keyword arguments (line 571)
        kwargs_282955 = {}
        # Getting the type of 'mtransforms' (line 571)
        mtransforms_282953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 25), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 571)
        Affine2D_282954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 25), mtransforms_282953, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 571)
        Affine2D_call_result_282956 = invoke(stypy.reporting.localization.Localization(__file__, 571, 25), Affine2D_282954, *[], **kwargs_282955)
        
        # Obtaining the member 'scale' of a type (line 571)
        scale_282957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 25), Affine2D_call_result_282956, 'scale')
        # Calling scale(args, kwargs) (line 571)
        scale_call_result_282961 = invoke(stypy.reporting.localization.Localization(__file__, 571, 25), scale_282957, *[float_282958, float_282959], **kwargs_282960)
        
        # Obtaining the member 'rotate' of a type (line 571)
        rotate_282962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 25), scale_call_result_282961, 'rotate')
        # Calling rotate(args, kwargs) (line 571)
        rotate_call_result_282970 = invoke(stypy.reporting.localization.Localization(__file__, 571, 25), rotate_282962, *[result_add_282968], **kwargs_282969)
        
        # Assigning a type to the variable 'trans' (line 571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 16), 'trans', rotate_call_result_282970)
        # SSA branch for the else part of an if statement (line 570)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'marker' (line 574)
        marker_282971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 17), 'marker')
        # Getting the type of 'mmarkers' (line 574)
        mmarkers_282972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 27), 'mmarkers')
        # Obtaining the member 'TICKRIGHT' of a type (line 574)
        TICKRIGHT_282973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 27), mmarkers_282972, 'TICKRIGHT')
        # Applying the binary operator '==' (line 574)
        result_eq_282974 = python_operator(stypy.reporting.localization.Localization(__file__, 574, 17), '==', marker_282971, TICKRIGHT_282973)
        
        # Testing the type of an if condition (line 574)
        if_condition_282975 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 574, 17), result_eq_282974)
        # Assigning a type to the variable 'if_condition_282975' (line 574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 574, 17), 'if_condition_282975', if_condition_282975)
        # SSA begins for if statement (line 574)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 575):
        
        # Assigning a Call to a Name (line 575):
        
        # Call to rotate(...): (line 575)
        # Processing the call arguments (line 575)
        # Getting the type of 'tick_angle' (line 577)
        tick_angle_282986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 33), 'tick_angle', False)
        # Processing the call keyword arguments (line 575)
        kwargs_282987 = {}
        
        # Call to scale(...): (line 575)
        # Processing the call arguments (line 575)
        float_282981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 32), 'float')
        float_282982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 38), 'float')
        # Processing the call keyword arguments (line 575)
        kwargs_282983 = {}
        
        # Call to Affine2D(...): (line 575)
        # Processing the call keyword arguments (line 575)
        kwargs_282978 = {}
        # Getting the type of 'mtransforms' (line 575)
        mtransforms_282976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 25), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 575)
        Affine2D_282977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 25), mtransforms_282976, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 575)
        Affine2D_call_result_282979 = invoke(stypy.reporting.localization.Localization(__file__, 575, 25), Affine2D_282977, *[], **kwargs_282978)
        
        # Obtaining the member 'scale' of a type (line 575)
        scale_282980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 25), Affine2D_call_result_282979, 'scale')
        # Calling scale(args, kwargs) (line 575)
        scale_call_result_282984 = invoke(stypy.reporting.localization.Localization(__file__, 575, 25), scale_282980, *[float_282981, float_282982], **kwargs_282983)
        
        # Obtaining the member 'rotate' of a type (line 575)
        rotate_282985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 25), scale_call_result_282984, 'rotate')
        # Calling rotate(args, kwargs) (line 575)
        rotate_call_result_282988 = invoke(stypy.reporting.localization.Localization(__file__, 575, 25), rotate_282985, *[tick_angle_282986], **kwargs_282987)
        
        # Assigning a type to the variable 'trans' (line 575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 575, 16), 'trans', rotate_call_result_282988)
        # SSA branch for the else part of an if statement (line 574)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 580):
        
        # Assigning a Attribute to a Name (line 580):
        # Getting the type of 'self' (line 580)
        self_282989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 24), 'self')
        # Obtaining the member 'tick1line' of a type (line 580)
        tick1line_282990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 580, 24), self_282989, 'tick1line')
        # Obtaining the member '_marker' of a type (line 580)
        _marker_282991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 580, 24), tick1line_282990, '_marker')
        # Obtaining the member '_transform' of a type (line 580)
        _transform_282992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 580, 24), _marker_282991, '_transform')
        # Assigning a type to the variable 'trans' (line 580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 580, 16), 'trans', _transform_282992)
        # SSA join for if statement (line 574)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 570)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 566)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 581):
        
        # Assigning a Name to a Attribute (line 581):
        # Getting the type of 'trans' (line 581)
        trans_282993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 48), 'trans')
        # Getting the type of 'self' (line 581)
        self_282994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 12), 'self')
        # Obtaining the member 'tick1line' of a type (line 581)
        tick1line_282995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 12), self_282994, 'tick1line')
        # Obtaining the member '_marker' of a type (line 581)
        _marker_282996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 12), tick1line_282995, '_marker')
        # Setting the type of the member '_transform' of a type (line 581)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 12), _marker_282996, '_transform', trans_282993)
        # SSA join for if statement (line 564)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'full' (line 583)
        full_282997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 11), 'full')
        # Testing the type of an if condition (line 583)
        if_condition_282998 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 583, 8), full_282997)
        # Assigning a type to the variable 'if_condition_282998' (line 583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 583, 8), 'if_condition_282998', if_condition_282998)
        # SSA begins for if statement (line 583)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 584):
        
        # Assigning a Name to a Attribute (line 584):
        # Getting the type of 'False' (line 584)
        False_282999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 28), 'False')
        # Getting the type of 'self' (line 584)
        self_283000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 12), 'self')
        # Setting the type of the member 'label2On' of a type (line 584)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 12), self_283000, 'label2On', False_282999)
        
        # Assigning a Name to a Attribute (line 585):
        
        # Assigning a Name to a Attribute (line 585):
        # Getting the type of 'False' (line 585)
        False_283001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 27), 'False')
        # Getting the type of 'self' (line 585)
        self_283002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 12), 'self')
        # Setting the type of the member 'tick2On' of a type (line 585)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 12), self_283002, 'tick2On', False_283001)
        # SSA branch for the else part of an if statement (line 583)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 587):
        
        # Assigning a BinOp to a Name (line 587):
        # Getting the type of 'thetamax' (line 587)
        thetamax_283003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 20), 'thetamax')
        # Getting the type of 'direction' (line 587)
        direction_283004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 31), 'direction')
        # Applying the binary operator '*' (line 587)
        result_mul_283005 = python_operator(stypy.reporting.localization.Localization(__file__, 587, 20), '*', thetamax_283003, direction_283004)
        
        # Getting the type of 'offset' (line 587)
        offset_283006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 43), 'offset')
        # Applying the binary operator '+' (line 587)
        result_add_283007 = python_operator(stypy.reporting.localization.Localization(__file__, 587, 20), '+', result_mul_283005, offset_283006)
        
        int_283008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 587, 52), 'int')
        # Applying the binary operator '-' (line 587)
        result_sub_283009 = python_operator(stypy.reporting.localization.Localization(__file__, 587, 50), '-', result_add_283007, int_283008)
        
        # Assigning a type to the variable 'angle' (line 587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 12), 'angle', result_sub_283009)
        
        
        # Getting the type of 'direction' (line 588)
        direction_283010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 15), 'direction')
        int_283011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, 27), 'int')
        # Applying the binary operator '>' (line 588)
        result_gt_283012 = python_operator(stypy.reporting.localization.Localization(__file__, 588, 15), '>', direction_283010, int_283011)
        
        # Testing the type of an if condition (line 588)
        if_condition_283013 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 588, 12), result_gt_283012)
        # Assigning a type to the variable 'if_condition_283013' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 12), 'if_condition_283013', if_condition_283013)
        # SSA begins for if statement (line 588)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 589):
        
        # Assigning a Call to a Name (line 589):
        
        # Call to deg2rad(...): (line 589)
        # Processing the call arguments (line 589)
        # Getting the type of 'angle' (line 589)
        angle_283016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 40), 'angle', False)
        # Processing the call keyword arguments (line 589)
        kwargs_283017 = {}
        # Getting the type of 'np' (line 589)
        np_283014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 29), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 589)
        deg2rad_283015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 29), np_283014, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 589)
        deg2rad_call_result_283018 = invoke(stypy.reporting.localization.Localization(__file__, 589, 29), deg2rad_283015, *[angle_283016], **kwargs_283017)
        
        # Assigning a type to the variable 'tick_angle' (line 589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 16), 'tick_angle', deg2rad_call_result_283018)
        # SSA branch for the else part of an if statement (line 588)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 591):
        
        # Assigning a Call to a Name (line 591):
        
        # Call to deg2rad(...): (line 591)
        # Processing the call arguments (line 591)
        # Getting the type of 'angle' (line 591)
        angle_283021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 40), 'angle', False)
        int_283022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 48), 'int')
        # Applying the binary operator '+' (line 591)
        result_add_283023 = python_operator(stypy.reporting.localization.Localization(__file__, 591, 40), '+', angle_283021, int_283022)
        
        # Processing the call keyword arguments (line 591)
        kwargs_283024 = {}
        # Getting the type of 'np' (line 591)
        np_283019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 29), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 591)
        deg2rad_283020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 29), np_283019, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 591)
        deg2rad_call_result_283025 = invoke(stypy.reporting.localization.Localization(__file__, 591, 29), deg2rad_283020, *[result_add_283023], **kwargs_283024)
        
        # Assigning a type to the variable 'tick_angle' (line 591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 16), 'tick_angle', deg2rad_call_result_283025)
        # SSA join for if statement (line 588)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'angle' (line 592)
        angle_283026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 15), 'angle')
        int_283027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, 23), 'int')
        # Applying the binary operator '>' (line 592)
        result_gt_283028 = python_operator(stypy.reporting.localization.Localization(__file__, 592, 15), '>', angle_283026, int_283027)
        
        # Testing the type of an if condition (line 592)
        if_condition_283029 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 592, 12), result_gt_283028)
        # Assigning a type to the variable 'if_condition_283029' (line 592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 12), 'if_condition_283029', if_condition_283029)
        # SSA begins for if statement (line 592)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 593):
        
        # Assigning a BinOp to a Name (line 593):
        # Getting the type of 'angle' (line 593)
        angle_283030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 29), 'angle')
        int_283031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 593, 37), 'int')
        # Applying the binary operator '-' (line 593)
        result_sub_283032 = python_operator(stypy.reporting.localization.Localization(__file__, 593, 29), '-', angle_283030, int_283031)
        
        # Assigning a type to the variable 'text_angle' (line 593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 16), 'text_angle', result_sub_283032)
        # SSA branch for the else part of an if statement (line 592)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'angle' (line 594)
        angle_283033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 17), 'angle')
        int_283034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 25), 'int')
        # Applying the binary operator '<' (line 594)
        result_lt_283035 = python_operator(stypy.reporting.localization.Localization(__file__, 594, 17), '<', angle_283033, int_283034)
        
        # Testing the type of an if condition (line 594)
        if_condition_283036 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 594, 17), result_lt_283035)
        # Assigning a type to the variable 'if_condition_283036' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 17), 'if_condition_283036', if_condition_283036)
        # SSA begins for if statement (line 594)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 595):
        
        # Assigning a BinOp to a Name (line 595):
        # Getting the type of 'angle' (line 595)
        angle_283037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 29), 'angle')
        int_283038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 37), 'int')
        # Applying the binary operator '+' (line 595)
        result_add_283039 = python_operator(stypy.reporting.localization.Localization(__file__, 595, 29), '+', angle_283037, int_283038)
        
        # Assigning a type to the variable 'text_angle' (line 595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 595, 16), 'text_angle', result_add_283039)
        # SSA branch for the else part of an if statement (line 594)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 597):
        
        # Assigning a Name to a Name (line 597):
        # Getting the type of 'angle' (line 597)
        angle_283040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 29), 'angle')
        # Assigning a type to the variable 'text_angle' (line 597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 16), 'text_angle', angle_283040)
        # SSA join for if statement (line 594)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 592)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 583)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Tuple (line 598):
        
        # Assigning a Subscript to a Name (line 598):
        
        # Obtaining the type of the subscript
        int_283041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 8), 'int')
        # Getting the type of 'self' (line 598)
        self_283042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 27), 'self')
        # Obtaining the member '_labelrotation' of a type (line 598)
        _labelrotation_283043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 27), self_283042, '_labelrotation')
        # Obtaining the member '__getitem__' of a type (line 598)
        getitem___283044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 8), _labelrotation_283043, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 598)
        subscript_call_result_283045 = invoke(stypy.reporting.localization.Localization(__file__, 598, 8), getitem___283044, int_283041)
        
        # Assigning a type to the variable 'tuple_var_assignment_281130' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'tuple_var_assignment_281130', subscript_call_result_283045)
        
        # Assigning a Subscript to a Name (line 598):
        
        # Obtaining the type of the subscript
        int_283046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 8), 'int')
        # Getting the type of 'self' (line 598)
        self_283047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 27), 'self')
        # Obtaining the member '_labelrotation' of a type (line 598)
        _labelrotation_283048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 27), self_283047, '_labelrotation')
        # Obtaining the member '__getitem__' of a type (line 598)
        getitem___283049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 8), _labelrotation_283048, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 598)
        subscript_call_result_283050 = invoke(stypy.reporting.localization.Localization(__file__, 598, 8), getitem___283049, int_283046)
        
        # Assigning a type to the variable 'tuple_var_assignment_281131' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'tuple_var_assignment_281131', subscript_call_result_283050)
        
        # Assigning a Name to a Name (line 598):
        # Getting the type of 'tuple_var_assignment_281130' (line 598)
        tuple_var_assignment_281130_283051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'tuple_var_assignment_281130')
        # Assigning a type to the variable 'mode' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'mode', tuple_var_assignment_281130_283051)
        
        # Assigning a Name to a Name (line 598):
        # Getting the type of 'tuple_var_assignment_281131' (line 598)
        tuple_var_assignment_281131_283052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'tuple_var_assignment_281131')
        # Assigning a type to the variable 'user_angle' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 14), 'user_angle', tuple_var_assignment_281131_283052)
        
        
        # Getting the type of 'mode' (line 599)
        mode_283053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 11), 'mode')
        unicode_283054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 19), 'unicode', u'auto')
        # Applying the binary operator '==' (line 599)
        result_eq_283055 = python_operator(stypy.reporting.localization.Localization(__file__, 599, 11), '==', mode_283053, unicode_283054)
        
        # Testing the type of an if condition (line 599)
        if_condition_283056 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 599, 8), result_eq_283055)
        # Assigning a type to the variable 'if_condition_283056' (line 599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 599, 8), 'if_condition_283056', if_condition_283056)
        # SSA begins for if statement (line 599)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'text_angle' (line 600)
        text_angle_283057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 12), 'text_angle')
        # Getting the type of 'user_angle' (line 600)
        user_angle_283058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 26), 'user_angle')
        # Applying the binary operator '+=' (line 600)
        result_iadd_283059 = python_operator(stypy.reporting.localization.Localization(__file__, 600, 12), '+=', text_angle_283057, user_angle_283058)
        # Assigning a type to the variable 'text_angle' (line 600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 12), 'text_angle', result_iadd_283059)
        
        # SSA branch for the else part of an if statement (line 599)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 602):
        
        # Assigning a Name to a Name (line 602):
        # Getting the type of 'user_angle' (line 602)
        user_angle_283060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 25), 'user_angle')
        # Assigning a type to the variable 'text_angle' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 12), 'text_angle', user_angle_283060)
        # SSA join for if statement (line 599)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 603)
        self_283061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 11), 'self')
        # Obtaining the member 'label2On' of a type (line 603)
        label2On_283062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 11), self_283061, 'label2On')
        # Testing the type of an if condition (line 603)
        if_condition_283063 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 603, 8), label2On_283062)
        # Assigning a type to the variable 'if_condition_283063' (line 603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 8), 'if_condition_283063', if_condition_283063)
        # SSA begins for if statement (line 603)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 604):
        
        # Assigning a Call to a Name:
        
        # Call to _determine_anchor(...): (line 604)
        # Processing the call arguments (line 604)
        # Getting the type of 'angle' (line 604)
        angle_283066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 44), 'angle', False)
        # Getting the type of 'False' (line 604)
        False_283067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 51), 'False', False)
        # Processing the call keyword arguments (line 604)
        kwargs_283068 = {}
        # Getting the type of 'self' (line 604)
        self_283064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 21), 'self', False)
        # Obtaining the member '_determine_anchor' of a type (line 604)
        _determine_anchor_283065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 21), self_283064, '_determine_anchor')
        # Calling _determine_anchor(args, kwargs) (line 604)
        _determine_anchor_call_result_283069 = invoke(stypy.reporting.localization.Localization(__file__, 604, 21), _determine_anchor_283065, *[angle_283066, False_283067], **kwargs_283068)
        
        # Assigning a type to the variable 'call_assignment_281132' (line 604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 12), 'call_assignment_281132', _determine_anchor_call_result_283069)
        
        # Assigning a Call to a Name (line 604):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_283072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 604, 12), 'int')
        # Processing the call keyword arguments
        kwargs_283073 = {}
        # Getting the type of 'call_assignment_281132' (line 604)
        call_assignment_281132_283070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 12), 'call_assignment_281132', False)
        # Obtaining the member '__getitem__' of a type (line 604)
        getitem___283071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 12), call_assignment_281132_283070, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_283074 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___283071, *[int_283072], **kwargs_283073)
        
        # Assigning a type to the variable 'call_assignment_281133' (line 604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 12), 'call_assignment_281133', getitem___call_result_283074)
        
        # Assigning a Name to a Name (line 604):
        # Getting the type of 'call_assignment_281133' (line 604)
        call_assignment_281133_283075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 12), 'call_assignment_281133')
        # Assigning a type to the variable 'ha' (line 604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 12), 'ha', call_assignment_281133_283075)
        
        # Assigning a Call to a Name (line 604):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_283078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 604, 12), 'int')
        # Processing the call keyword arguments
        kwargs_283079 = {}
        # Getting the type of 'call_assignment_281132' (line 604)
        call_assignment_281132_283076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 12), 'call_assignment_281132', False)
        # Obtaining the member '__getitem__' of a type (line 604)
        getitem___283077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 12), call_assignment_281132_283076, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_283080 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___283077, *[int_283078], **kwargs_283079)
        
        # Assigning a type to the variable 'call_assignment_281134' (line 604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 12), 'call_assignment_281134', getitem___call_result_283080)
        
        # Assigning a Name to a Name (line 604):
        # Getting the type of 'call_assignment_281134' (line 604)
        call_assignment_281134_283081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 12), 'call_assignment_281134')
        # Assigning a type to the variable 'va' (line 604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 16), 'va', call_assignment_281134_283081)
        
        # Call to set_ha(...): (line 605)
        # Processing the call arguments (line 605)
        # Getting the type of 'ha' (line 605)
        ha_283085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 31), 'ha', False)
        # Processing the call keyword arguments (line 605)
        kwargs_283086 = {}
        # Getting the type of 'self' (line 605)
        self_283082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 12), 'self', False)
        # Obtaining the member 'label2' of a type (line 605)
        label2_283083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 12), self_283082, 'label2')
        # Obtaining the member 'set_ha' of a type (line 605)
        set_ha_283084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 12), label2_283083, 'set_ha')
        # Calling set_ha(args, kwargs) (line 605)
        set_ha_call_result_283087 = invoke(stypy.reporting.localization.Localization(__file__, 605, 12), set_ha_283084, *[ha_283085], **kwargs_283086)
        
        
        # Call to set_va(...): (line 606)
        # Processing the call arguments (line 606)
        # Getting the type of 'va' (line 606)
        va_283091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 31), 'va', False)
        # Processing the call keyword arguments (line 606)
        kwargs_283092 = {}
        # Getting the type of 'self' (line 606)
        self_283088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 12), 'self', False)
        # Obtaining the member 'label2' of a type (line 606)
        label2_283089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 12), self_283088, 'label2')
        # Obtaining the member 'set_va' of a type (line 606)
        set_va_283090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 12), label2_283089, 'set_va')
        # Calling set_va(args, kwargs) (line 606)
        set_va_call_result_283093 = invoke(stypy.reporting.localization.Localization(__file__, 606, 12), set_va_283090, *[va_283091], **kwargs_283092)
        
        
        # Call to set_rotation(...): (line 607)
        # Processing the call arguments (line 607)
        # Getting the type of 'text_angle' (line 607)
        text_angle_283097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 37), 'text_angle', False)
        # Processing the call keyword arguments (line 607)
        kwargs_283098 = {}
        # Getting the type of 'self' (line 607)
        self_283094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 12), 'self', False)
        # Obtaining the member 'label2' of a type (line 607)
        label2_283095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 12), self_283094, 'label2')
        # Obtaining the member 'set_rotation' of a type (line 607)
        set_rotation_283096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 12), label2_283095, 'set_rotation')
        # Calling set_rotation(args, kwargs) (line 607)
        set_rotation_call_result_283099 = invoke(stypy.reporting.localization.Localization(__file__, 607, 12), set_rotation_283096, *[text_angle_283097], **kwargs_283098)
        
        # SSA join for if statement (line 603)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 608)
        self_283100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 11), 'self')
        # Obtaining the member 'tick2On' of a type (line 608)
        tick2On_283101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 11), self_283100, 'tick2On')
        # Testing the type of an if condition (line 608)
        if_condition_283102 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 608, 8), tick2On_283101)
        # Assigning a type to the variable 'if_condition_283102' (line 608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 608, 8), 'if_condition_283102', if_condition_283102)
        # SSA begins for if statement (line 608)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 609):
        
        # Assigning a Call to a Name (line 609):
        
        # Call to get_marker(...): (line 609)
        # Processing the call keyword arguments (line 609)
        kwargs_283106 = {}
        # Getting the type of 'self' (line 609)
        self_283103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 21), 'self', False)
        # Obtaining the member 'tick2line' of a type (line 609)
        tick2line_283104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 21), self_283103, 'tick2line')
        # Obtaining the member 'get_marker' of a type (line 609)
        get_marker_283105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 21), tick2line_283104, 'get_marker')
        # Calling get_marker(args, kwargs) (line 609)
        get_marker_call_result_283107 = invoke(stypy.reporting.localization.Localization(__file__, 609, 21), get_marker_283105, *[], **kwargs_283106)
        
        # Assigning a type to the variable 'marker' (line 609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 12), 'marker', get_marker_call_result_283107)
        
        
        # Getting the type of 'marker' (line 610)
        marker_283108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 15), 'marker')
        # Getting the type of 'mmarkers' (line 610)
        mmarkers_283109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 25), 'mmarkers')
        # Obtaining the member 'TICKLEFT' of a type (line 610)
        TICKLEFT_283110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 25), mmarkers_283109, 'TICKLEFT')
        # Applying the binary operator '==' (line 610)
        result_eq_283111 = python_operator(stypy.reporting.localization.Localization(__file__, 610, 15), '==', marker_283108, TICKLEFT_283110)
        
        # Testing the type of an if condition (line 610)
        if_condition_283112 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 610, 12), result_eq_283111)
        # Assigning a type to the variable 'if_condition_283112' (line 610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 12), 'if_condition_283112', if_condition_283112)
        # SSA begins for if statement (line 610)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 611):
        
        # Assigning a Call to a Name (line 611):
        
        # Call to rotate(...): (line 611)
        # Processing the call arguments (line 611)
        # Getting the type of 'tick_angle' (line 613)
        tick_angle_283123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 33), 'tick_angle', False)
        # Processing the call keyword arguments (line 611)
        kwargs_283124 = {}
        
        # Call to scale(...): (line 611)
        # Processing the call arguments (line 611)
        float_283118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 32), 'float')
        float_283119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 37), 'float')
        # Processing the call keyword arguments (line 611)
        kwargs_283120 = {}
        
        # Call to Affine2D(...): (line 611)
        # Processing the call keyword arguments (line 611)
        kwargs_283115 = {}
        # Getting the type of 'mtransforms' (line 611)
        mtransforms_283113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 25), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 611)
        Affine2D_283114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 25), mtransforms_283113, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 611)
        Affine2D_call_result_283116 = invoke(stypy.reporting.localization.Localization(__file__, 611, 25), Affine2D_283114, *[], **kwargs_283115)
        
        # Obtaining the member 'scale' of a type (line 611)
        scale_283117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 25), Affine2D_call_result_283116, 'scale')
        # Calling scale(args, kwargs) (line 611)
        scale_call_result_283121 = invoke(stypy.reporting.localization.Localization(__file__, 611, 25), scale_283117, *[float_283118, float_283119], **kwargs_283120)
        
        # Obtaining the member 'rotate' of a type (line 611)
        rotate_283122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 25), scale_call_result_283121, 'rotate')
        # Calling rotate(args, kwargs) (line 611)
        rotate_call_result_283125 = invoke(stypy.reporting.localization.Localization(__file__, 611, 25), rotate_283122, *[tick_angle_283123], **kwargs_283124)
        
        # Assigning a type to the variable 'trans' (line 611)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 611, 16), 'trans', rotate_call_result_283125)
        # SSA branch for the else part of an if statement (line 610)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'marker' (line 614)
        marker_283126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 17), 'marker')
        unicode_283127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 27), 'unicode', u'_')
        # Applying the binary operator '==' (line 614)
        result_eq_283128 = python_operator(stypy.reporting.localization.Localization(__file__, 614, 17), '==', marker_283126, unicode_283127)
        
        # Testing the type of an if condition (line 614)
        if_condition_283129 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 614, 17), result_eq_283128)
        # Assigning a type to the variable 'if_condition_283129' (line 614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 17), 'if_condition_283129', if_condition_283129)
        # SSA begins for if statement (line 614)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 615):
        
        # Assigning a Call to a Name (line 615):
        
        # Call to rotate(...): (line 615)
        # Processing the call arguments (line 615)
        # Getting the type of 'tick_angle' (line 617)
        tick_angle_283140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 33), 'tick_angle', False)
        # Getting the type of 'np' (line 617)
        np_283141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 46), 'np', False)
        # Obtaining the member 'pi' of a type (line 617)
        pi_283142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 46), np_283141, 'pi')
        int_283143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 54), 'int')
        # Applying the binary operator 'div' (line 617)
        result_div_283144 = python_operator(stypy.reporting.localization.Localization(__file__, 617, 46), 'div', pi_283142, int_283143)
        
        # Applying the binary operator '+' (line 617)
        result_add_283145 = python_operator(stypy.reporting.localization.Localization(__file__, 617, 33), '+', tick_angle_283140, result_div_283144)
        
        # Processing the call keyword arguments (line 615)
        kwargs_283146 = {}
        
        # Call to scale(...): (line 615)
        # Processing the call arguments (line 615)
        float_283135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 32), 'float')
        float_283136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 37), 'float')
        # Processing the call keyword arguments (line 615)
        kwargs_283137 = {}
        
        # Call to Affine2D(...): (line 615)
        # Processing the call keyword arguments (line 615)
        kwargs_283132 = {}
        # Getting the type of 'mtransforms' (line 615)
        mtransforms_283130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 25), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 615)
        Affine2D_283131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 25), mtransforms_283130, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 615)
        Affine2D_call_result_283133 = invoke(stypy.reporting.localization.Localization(__file__, 615, 25), Affine2D_283131, *[], **kwargs_283132)
        
        # Obtaining the member 'scale' of a type (line 615)
        scale_283134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 25), Affine2D_call_result_283133, 'scale')
        # Calling scale(args, kwargs) (line 615)
        scale_call_result_283138 = invoke(stypy.reporting.localization.Localization(__file__, 615, 25), scale_283134, *[float_283135, float_283136], **kwargs_283137)
        
        # Obtaining the member 'rotate' of a type (line 615)
        rotate_283139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 25), scale_call_result_283138, 'rotate')
        # Calling rotate(args, kwargs) (line 615)
        rotate_call_result_283147 = invoke(stypy.reporting.localization.Localization(__file__, 615, 25), rotate_283139, *[result_add_283145], **kwargs_283146)
        
        # Assigning a type to the variable 'trans' (line 615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 16), 'trans', rotate_call_result_283147)
        # SSA branch for the else part of an if statement (line 614)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'marker' (line 618)
        marker_283148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 17), 'marker')
        # Getting the type of 'mmarkers' (line 618)
        mmarkers_283149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 27), 'mmarkers')
        # Obtaining the member 'TICKRIGHT' of a type (line 618)
        TICKRIGHT_283150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 27), mmarkers_283149, 'TICKRIGHT')
        # Applying the binary operator '==' (line 618)
        result_eq_283151 = python_operator(stypy.reporting.localization.Localization(__file__, 618, 17), '==', marker_283148, TICKRIGHT_283150)
        
        # Testing the type of an if condition (line 618)
        if_condition_283152 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 618, 17), result_eq_283151)
        # Assigning a type to the variable 'if_condition_283152' (line 618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 17), 'if_condition_283152', if_condition_283152)
        # SSA begins for if statement (line 618)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 619):
        
        # Assigning a Call to a Name (line 619):
        
        # Call to rotate(...): (line 619)
        # Processing the call arguments (line 619)
        # Getting the type of 'tick_angle' (line 621)
        tick_angle_283163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 33), 'tick_angle', False)
        # Processing the call keyword arguments (line 619)
        kwargs_283164 = {}
        
        # Call to scale(...): (line 619)
        # Processing the call arguments (line 619)
        float_283158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 32), 'float')
        float_283159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 38), 'float')
        # Processing the call keyword arguments (line 619)
        kwargs_283160 = {}
        
        # Call to Affine2D(...): (line 619)
        # Processing the call keyword arguments (line 619)
        kwargs_283155 = {}
        # Getting the type of 'mtransforms' (line 619)
        mtransforms_283153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 25), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 619)
        Affine2D_283154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 25), mtransforms_283153, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 619)
        Affine2D_call_result_283156 = invoke(stypy.reporting.localization.Localization(__file__, 619, 25), Affine2D_283154, *[], **kwargs_283155)
        
        # Obtaining the member 'scale' of a type (line 619)
        scale_283157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 25), Affine2D_call_result_283156, 'scale')
        # Calling scale(args, kwargs) (line 619)
        scale_call_result_283161 = invoke(stypy.reporting.localization.Localization(__file__, 619, 25), scale_283157, *[float_283158, float_283159], **kwargs_283160)
        
        # Obtaining the member 'rotate' of a type (line 619)
        rotate_283162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 25), scale_call_result_283161, 'rotate')
        # Calling rotate(args, kwargs) (line 619)
        rotate_call_result_283165 = invoke(stypy.reporting.localization.Localization(__file__, 619, 25), rotate_283162, *[tick_angle_283163], **kwargs_283164)
        
        # Assigning a type to the variable 'trans' (line 619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 16), 'trans', rotate_call_result_283165)
        # SSA branch for the else part of an if statement (line 618)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 624):
        
        # Assigning a Attribute to a Name (line 624):
        # Getting the type of 'self' (line 624)
        self_283166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 24), 'self')
        # Obtaining the member 'tick2line' of a type (line 624)
        tick2line_283167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 24), self_283166, 'tick2line')
        # Obtaining the member '_marker' of a type (line 624)
        _marker_283168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 24), tick2line_283167, '_marker')
        # Obtaining the member '_transform' of a type (line 624)
        _transform_283169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 24), _marker_283168, '_transform')
        # Assigning a type to the variable 'trans' (line 624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 16), 'trans', _transform_283169)
        # SSA join for if statement (line 618)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 614)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 610)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 625):
        
        # Assigning a Name to a Attribute (line 625):
        # Getting the type of 'trans' (line 625)
        trans_283170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 48), 'trans')
        # Getting the type of 'self' (line 625)
        self_283171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 12), 'self')
        # Obtaining the member 'tick2line' of a type (line 625)
        tick2line_283172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 12), self_283171, 'tick2line')
        # Obtaining the member '_marker' of a type (line 625)
        _marker_283173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 12), tick2line_283172, '_marker')
        # Setting the type of the member '_transform' of a type (line 625)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 12), _marker_283173, '_transform', trans_283170)
        # SSA join for if statement (line 608)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'update_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_position' in the type store
        # Getting the type of 'stypy_return_type' (line 519)
        stypy_return_type_283174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_283174)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_position'
        return stypy_return_type_283174


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 487, 0, False)
        # Assigning a type to the variable 'self' (line 488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialTick.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'RadialTick' (line 487)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 0), 'RadialTick', RadialTick)
# Declaration of the 'RadialAxis' class
# Getting the type of 'maxis' (line 628)
maxis_283175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 17), 'maxis')
# Obtaining the member 'YAxis' of a type (line 628)
YAxis_283176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 17), maxis_283175, 'YAxis')

class RadialAxis(YAxis_283176, ):
    unicode_283177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, (-1)), 'unicode', u'\n    A radial Axis.\n\n    This overrides certain properties of a `YAxis` to provide special-casing\n    for a radial axis.\n    ')
    
    # Assigning a Str to a Name (line 635):
    
    # Assigning a Str to a Name (line 636):

    @norecursion
    def _get_tick(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_tick'
        module_type_store = module_type_store.open_function_context('_get_tick', 638, 4, False)
        # Assigning a type to the variable 'self' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadialAxis._get_tick.__dict__.__setitem__('stypy_localization', localization)
        RadialAxis._get_tick.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadialAxis._get_tick.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadialAxis._get_tick.__dict__.__setitem__('stypy_function_name', 'RadialAxis._get_tick')
        RadialAxis._get_tick.__dict__.__setitem__('stypy_param_names_list', ['major'])
        RadialAxis._get_tick.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadialAxis._get_tick.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadialAxis._get_tick.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadialAxis._get_tick.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadialAxis._get_tick.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadialAxis._get_tick.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialAxis._get_tick', ['major'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_tick', localization, ['major'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_tick(...)' code ##################

        
        # Getting the type of 'major' (line 639)
        major_283178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 11), 'major')
        # Testing the type of an if condition (line 639)
        if_condition_283179 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 639, 8), major_283178)
        # Assigning a type to the variable 'if_condition_283179' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 8), 'if_condition_283179', if_condition_283179)
        # SSA begins for if statement (line 639)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 640):
        
        # Assigning a Attribute to a Name (line 640):
        # Getting the type of 'self' (line 640)
        self_283180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 22), 'self')
        # Obtaining the member '_major_tick_kw' of a type (line 640)
        _major_tick_kw_283181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 22), self_283180, '_major_tick_kw')
        # Assigning a type to the variable 'tick_kw' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 12), 'tick_kw', _major_tick_kw_283181)
        # SSA branch for the else part of an if statement (line 639)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 642):
        
        # Assigning a Attribute to a Name (line 642):
        # Getting the type of 'self' (line 642)
        self_283182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 22), 'self')
        # Obtaining the member '_minor_tick_kw' of a type (line 642)
        _minor_tick_kw_283183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 642, 22), self_283182, '_minor_tick_kw')
        # Assigning a type to the variable 'tick_kw' (line 642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 12), 'tick_kw', _minor_tick_kw_283183)
        # SSA join for if statement (line 639)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to RadialTick(...): (line 643)
        # Processing the call arguments (line 643)
        # Getting the type of 'self' (line 643)
        self_283185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 26), 'self', False)
        # Obtaining the member 'axes' of a type (line 643)
        axes_283186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 26), self_283185, 'axes')
        int_283187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 643, 37), 'int')
        unicode_283188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 643, 40), 'unicode', u'')
        # Processing the call keyword arguments (line 643)
        # Getting the type of 'major' (line 643)
        major_283189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 50), 'major', False)
        keyword_283190 = major_283189
        # Getting the type of 'tick_kw' (line 643)
        tick_kw_283191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 59), 'tick_kw', False)
        kwargs_283192 = {'major': keyword_283190, 'tick_kw_283191': tick_kw_283191}
        # Getting the type of 'RadialTick' (line 643)
        RadialTick_283184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 15), 'RadialTick', False)
        # Calling RadialTick(args, kwargs) (line 643)
        RadialTick_call_result_283193 = invoke(stypy.reporting.localization.Localization(__file__, 643, 15), RadialTick_283184, *[axes_283186, int_283187, unicode_283188], **kwargs_283192)
        
        # Assigning a type to the variable 'stypy_return_type' (line 643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 8), 'stypy_return_type', RadialTick_call_result_283193)
        
        # ################# End of '_get_tick(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_tick' in the type store
        # Getting the type of 'stypy_return_type' (line 638)
        stypy_return_type_283194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_283194)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_tick'
        return stypy_return_type_283194


    @norecursion
    def _wrap_locator_formatter(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_wrap_locator_formatter'
        module_type_store = module_type_store.open_function_context('_wrap_locator_formatter', 645, 4, False)
        # Assigning a type to the variable 'self' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadialAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_localization', localization)
        RadialAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadialAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadialAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_function_name', 'RadialAxis._wrap_locator_formatter')
        RadialAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_param_names_list', [])
        RadialAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadialAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadialAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadialAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadialAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadialAxis._wrap_locator_formatter.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialAxis._wrap_locator_formatter', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_wrap_locator_formatter', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_wrap_locator_formatter(...)' code ##################

        
        # Call to set_major_locator(...): (line 646)
        # Processing the call arguments (line 646)
        
        # Call to RadialLocator(...): (line 646)
        # Processing the call arguments (line 646)
        
        # Call to get_major_locator(...): (line 646)
        # Processing the call keyword arguments (line 646)
        kwargs_283200 = {}
        # Getting the type of 'self' (line 646)
        self_283198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 45), 'self', False)
        # Obtaining the member 'get_major_locator' of a type (line 646)
        get_major_locator_283199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 45), self_283198, 'get_major_locator')
        # Calling get_major_locator(args, kwargs) (line 646)
        get_major_locator_call_result_283201 = invoke(stypy.reporting.localization.Localization(__file__, 646, 45), get_major_locator_283199, *[], **kwargs_283200)
        
        # Getting the type of 'self' (line 647)
        self_283202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 45), 'self', False)
        # Obtaining the member 'axes' of a type (line 647)
        axes_283203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 45), self_283202, 'axes')
        # Processing the call keyword arguments (line 646)
        kwargs_283204 = {}
        # Getting the type of 'RadialLocator' (line 646)
        RadialLocator_283197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 31), 'RadialLocator', False)
        # Calling RadialLocator(args, kwargs) (line 646)
        RadialLocator_call_result_283205 = invoke(stypy.reporting.localization.Localization(__file__, 646, 31), RadialLocator_283197, *[get_major_locator_call_result_283201, axes_283203], **kwargs_283204)
        
        # Processing the call keyword arguments (line 646)
        kwargs_283206 = {}
        # Getting the type of 'self' (line 646)
        self_283195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 8), 'self', False)
        # Obtaining the member 'set_major_locator' of a type (line 646)
        set_major_locator_283196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 8), self_283195, 'set_major_locator')
        # Calling set_major_locator(args, kwargs) (line 646)
        set_major_locator_call_result_283207 = invoke(stypy.reporting.localization.Localization(__file__, 646, 8), set_major_locator_283196, *[RadialLocator_call_result_283205], **kwargs_283206)
        
        
        # Assigning a Name to a Attribute (line 648):
        
        # Assigning a Name to a Attribute (line 648):
        # Getting the type of 'True' (line 648)
        True_283208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 32), 'True')
        # Getting the type of 'self' (line 648)
        self_283209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'self')
        # Setting the type of the member 'isDefault_majloc' of a type (line 648)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 8), self_283209, 'isDefault_majloc', True_283208)
        
        # ################# End of '_wrap_locator_formatter(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_wrap_locator_formatter' in the type store
        # Getting the type of 'stypy_return_type' (line 645)
        stypy_return_type_283210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_283210)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_wrap_locator_formatter'
        return stypy_return_type_283210


    @norecursion
    def cla(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'cla'
        module_type_store = module_type_store.open_function_context('cla', 650, 4, False)
        # Assigning a type to the variable 'self' (line 651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 651, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadialAxis.cla.__dict__.__setitem__('stypy_localization', localization)
        RadialAxis.cla.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadialAxis.cla.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadialAxis.cla.__dict__.__setitem__('stypy_function_name', 'RadialAxis.cla')
        RadialAxis.cla.__dict__.__setitem__('stypy_param_names_list', [])
        RadialAxis.cla.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadialAxis.cla.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadialAxis.cla.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadialAxis.cla.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadialAxis.cla.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadialAxis.cla.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialAxis.cla', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cla', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cla(...)' code ##################

        
        # Call to cla(...): (line 651)
        # Processing the call keyword arguments (line 651)
        kwargs_283217 = {}
        
        # Call to super(...): (line 651)
        # Processing the call arguments (line 651)
        # Getting the type of 'RadialAxis' (line 651)
        RadialAxis_283212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 14), 'RadialAxis', False)
        # Getting the type of 'self' (line 651)
        self_283213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 26), 'self', False)
        # Processing the call keyword arguments (line 651)
        kwargs_283214 = {}
        # Getting the type of 'super' (line 651)
        super_283211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 8), 'super', False)
        # Calling super(args, kwargs) (line 651)
        super_call_result_283215 = invoke(stypy.reporting.localization.Localization(__file__, 651, 8), super_283211, *[RadialAxis_283212, self_283213], **kwargs_283214)
        
        # Obtaining the member 'cla' of a type (line 651)
        cla_283216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 8), super_call_result_283215, 'cla')
        # Calling cla(args, kwargs) (line 651)
        cla_call_result_283218 = invoke(stypy.reporting.localization.Localization(__file__, 651, 8), cla_283216, *[], **kwargs_283217)
        
        
        # Call to set_ticks_position(...): (line 652)
        # Processing the call arguments (line 652)
        unicode_283221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 652, 32), 'unicode', u'none')
        # Processing the call keyword arguments (line 652)
        kwargs_283222 = {}
        # Getting the type of 'self' (line 652)
        self_283219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'self', False)
        # Obtaining the member 'set_ticks_position' of a type (line 652)
        set_ticks_position_283220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 8), self_283219, 'set_ticks_position')
        # Calling set_ticks_position(args, kwargs) (line 652)
        set_ticks_position_call_result_283223 = invoke(stypy.reporting.localization.Localization(__file__, 652, 8), set_ticks_position_283220, *[unicode_283221], **kwargs_283222)
        
        
        # Call to _wrap_locator_formatter(...): (line 653)
        # Processing the call keyword arguments (line 653)
        kwargs_283226 = {}
        # Getting the type of 'self' (line 653)
        self_283224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 8), 'self', False)
        # Obtaining the member '_wrap_locator_formatter' of a type (line 653)
        _wrap_locator_formatter_283225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 8), self_283224, '_wrap_locator_formatter')
        # Calling _wrap_locator_formatter(args, kwargs) (line 653)
        _wrap_locator_formatter_call_result_283227 = invoke(stypy.reporting.localization.Localization(__file__, 653, 8), _wrap_locator_formatter_283225, *[], **kwargs_283226)
        
        
        # ################# End of 'cla(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cla' in the type store
        # Getting the type of 'stypy_return_type' (line 650)
        stypy_return_type_283228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_283228)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cla'
        return stypy_return_type_283228


    @norecursion
    def _set_scale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_scale'
        module_type_store = module_type_store.open_function_context('_set_scale', 655, 4, False)
        # Assigning a type to the variable 'self' (line 656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadialAxis._set_scale.__dict__.__setitem__('stypy_localization', localization)
        RadialAxis._set_scale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadialAxis._set_scale.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadialAxis._set_scale.__dict__.__setitem__('stypy_function_name', 'RadialAxis._set_scale')
        RadialAxis._set_scale.__dict__.__setitem__('stypy_param_names_list', ['value'])
        RadialAxis._set_scale.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadialAxis._set_scale.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        RadialAxis._set_scale.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadialAxis._set_scale.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadialAxis._set_scale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadialAxis._set_scale.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialAxis._set_scale', ['value'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_scale', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_scale(...)' code ##################

        
        # Call to _set_scale(...): (line 656)
        # Processing the call arguments (line 656)
        # Getting the type of 'value' (line 656)
        value_283235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 43), 'value', False)
        # Processing the call keyword arguments (line 656)
        # Getting the type of 'kwargs' (line 656)
        kwargs_283236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 52), 'kwargs', False)
        kwargs_283237 = {'kwargs_283236': kwargs_283236}
        
        # Call to super(...): (line 656)
        # Processing the call arguments (line 656)
        # Getting the type of 'RadialAxis' (line 656)
        RadialAxis_283230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 14), 'RadialAxis', False)
        # Getting the type of 'self' (line 656)
        self_283231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 26), 'self', False)
        # Processing the call keyword arguments (line 656)
        kwargs_283232 = {}
        # Getting the type of 'super' (line 656)
        super_283229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 8), 'super', False)
        # Calling super(args, kwargs) (line 656)
        super_call_result_283233 = invoke(stypy.reporting.localization.Localization(__file__, 656, 8), super_283229, *[RadialAxis_283230, self_283231], **kwargs_283232)
        
        # Obtaining the member '_set_scale' of a type (line 656)
        _set_scale_283234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 8), super_call_result_283233, '_set_scale')
        # Calling _set_scale(args, kwargs) (line 656)
        _set_scale_call_result_283238 = invoke(stypy.reporting.localization.Localization(__file__, 656, 8), _set_scale_283234, *[value_283235], **kwargs_283237)
        
        
        # Call to _wrap_locator_formatter(...): (line 657)
        # Processing the call keyword arguments (line 657)
        kwargs_283241 = {}
        # Getting the type of 'self' (line 657)
        self_283239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 8), 'self', False)
        # Obtaining the member '_wrap_locator_formatter' of a type (line 657)
        _wrap_locator_formatter_283240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 657, 8), self_283239, '_wrap_locator_formatter')
        # Calling _wrap_locator_formatter(args, kwargs) (line 657)
        _wrap_locator_formatter_call_result_283242 = invoke(stypy.reporting.localization.Localization(__file__, 657, 8), _wrap_locator_formatter_283240, *[], **kwargs_283241)
        
        
        # ################# End of '_set_scale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_scale' in the type store
        # Getting the type of 'stypy_return_type' (line 655)
        stypy_return_type_283243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_283243)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_scale'
        return stypy_return_type_283243


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 628, 0, False)
        # Assigning a type to the variable 'self' (line 629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadialAxis.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'RadialAxis' (line 628)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 0), 'RadialAxis', RadialAxis)

# Assigning a Str to a Name (line 635):
unicode_283244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 635, 15), 'unicode', u'radialaxis')
# Getting the type of 'RadialAxis'
RadialAxis_283245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RadialAxis')
# Setting the type of the member '__name__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RadialAxis_283245, '__name__', unicode_283244)

# Assigning a Str to a Name (line 636):
unicode_283246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 16), 'unicode', u'radius')
# Getting the type of 'RadialAxis'
RadialAxis_283247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RadialAxis')
# Setting the type of the member 'axis_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RadialAxis_283247, 'axis_name', unicode_283246)

@norecursion
def _is_full_circle_deg(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_is_full_circle_deg'
    module_type_store = module_type_store.open_function_context('_is_full_circle_deg', 660, 0, False)
    
    # Passed parameters checking function
    _is_full_circle_deg.stypy_localization = localization
    _is_full_circle_deg.stypy_type_of_self = None
    _is_full_circle_deg.stypy_type_store = module_type_store
    _is_full_circle_deg.stypy_function_name = '_is_full_circle_deg'
    _is_full_circle_deg.stypy_param_names_list = ['thetamin', 'thetamax']
    _is_full_circle_deg.stypy_varargs_param_name = None
    _is_full_circle_deg.stypy_kwargs_param_name = None
    _is_full_circle_deg.stypy_call_defaults = defaults
    _is_full_circle_deg.stypy_call_varargs = varargs
    _is_full_circle_deg.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_is_full_circle_deg', ['thetamin', 'thetamax'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_is_full_circle_deg', localization, ['thetamin', 'thetamax'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_is_full_circle_deg(...)' code ##################

    unicode_283248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 665, (-1)), 'unicode', u'\n    Determine if a wedge (in degrees) spans the full circle.\n\n    The condition is derived from :class:`~matplotlib.patches.Wedge`.\n    ')
    
    
    # Call to abs(...): (line 666)
    # Processing the call arguments (line 666)
    
    # Call to abs(...): (line 666)
    # Processing the call arguments (line 666)
    # Getting the type of 'thetamax' (line 666)
    thetamax_283251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 19), 'thetamax', False)
    # Getting the type of 'thetamin' (line 666)
    thetamin_283252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 30), 'thetamin', False)
    # Applying the binary operator '-' (line 666)
    result_sub_283253 = python_operator(stypy.reporting.localization.Localization(__file__, 666, 19), '-', thetamax_283251, thetamin_283252)
    
    # Processing the call keyword arguments (line 666)
    kwargs_283254 = {}
    # Getting the type of 'abs' (line 666)
    abs_283250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 15), 'abs', False)
    # Calling abs(args, kwargs) (line 666)
    abs_call_result_283255 = invoke(stypy.reporting.localization.Localization(__file__, 666, 15), abs_283250, *[result_sub_283253], **kwargs_283254)
    
    float_283256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 42), 'float')
    # Applying the binary operator '-' (line 666)
    result_sub_283257 = python_operator(stypy.reporting.localization.Localization(__file__, 666, 15), '-', abs_call_result_283255, float_283256)
    
    # Processing the call keyword arguments (line 666)
    kwargs_283258 = {}
    # Getting the type of 'abs' (line 666)
    abs_283249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 11), 'abs', False)
    # Calling abs(args, kwargs) (line 666)
    abs_call_result_283259 = invoke(stypy.reporting.localization.Localization(__file__, 666, 11), abs_283249, *[result_sub_283257], **kwargs_283258)
    
    float_283260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 51), 'float')
    # Applying the binary operator '<' (line 666)
    result_lt_283261 = python_operator(stypy.reporting.localization.Localization(__file__, 666, 11), '<', abs_call_result_283259, float_283260)
    
    # Assigning a type to the variable 'stypy_return_type' (line 666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 4), 'stypy_return_type', result_lt_283261)
    
    # ################# End of '_is_full_circle_deg(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_is_full_circle_deg' in the type store
    # Getting the type of 'stypy_return_type' (line 660)
    stypy_return_type_283262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_283262)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_is_full_circle_deg'
    return stypy_return_type_283262

# Assigning a type to the variable '_is_full_circle_deg' (line 660)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 0), '_is_full_circle_deg', _is_full_circle_deg)

@norecursion
def _is_full_circle_rad(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_is_full_circle_rad'
    module_type_store = module_type_store.open_function_context('_is_full_circle_rad', 669, 0, False)
    
    # Passed parameters checking function
    _is_full_circle_rad.stypy_localization = localization
    _is_full_circle_rad.stypy_type_of_self = None
    _is_full_circle_rad.stypy_type_store = module_type_store
    _is_full_circle_rad.stypy_function_name = '_is_full_circle_rad'
    _is_full_circle_rad.stypy_param_names_list = ['thetamin', 'thetamax']
    _is_full_circle_rad.stypy_varargs_param_name = None
    _is_full_circle_rad.stypy_kwargs_param_name = None
    _is_full_circle_rad.stypy_call_defaults = defaults
    _is_full_circle_rad.stypy_call_varargs = varargs
    _is_full_circle_rad.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_is_full_circle_rad', ['thetamin', 'thetamax'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_is_full_circle_rad', localization, ['thetamin', 'thetamax'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_is_full_circle_rad(...)' code ##################

    unicode_283263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 674, (-1)), 'unicode', u'\n    Determine if a wedge (in radians) spans the full circle.\n\n    The condition is derived from :class:`~matplotlib.patches.Wedge`.\n    ')
    
    
    # Call to abs(...): (line 675)
    # Processing the call arguments (line 675)
    
    # Call to abs(...): (line 675)
    # Processing the call arguments (line 675)
    # Getting the type of 'thetamax' (line 675)
    thetamax_283266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 19), 'thetamax', False)
    # Getting the type of 'thetamin' (line 675)
    thetamin_283267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 30), 'thetamin', False)
    # Applying the binary operator '-' (line 675)
    result_sub_283268 = python_operator(stypy.reporting.localization.Localization(__file__, 675, 19), '-', thetamax_283266, thetamin_283267)
    
    # Processing the call keyword arguments (line 675)
    kwargs_283269 = {}
    # Getting the type of 'abs' (line 675)
    abs_283265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 15), 'abs', False)
    # Calling abs(args, kwargs) (line 675)
    abs_call_result_283270 = invoke(stypy.reporting.localization.Localization(__file__, 675, 15), abs_283265, *[result_sub_283268], **kwargs_283269)
    
    int_283271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 42), 'int')
    # Getting the type of 'np' (line 675)
    np_283272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 46), 'np', False)
    # Obtaining the member 'pi' of a type (line 675)
    pi_283273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 46), np_283272, 'pi')
    # Applying the binary operator '*' (line 675)
    result_mul_283274 = python_operator(stypy.reporting.localization.Localization(__file__, 675, 42), '*', int_283271, pi_283273)
    
    # Applying the binary operator '-' (line 675)
    result_sub_283275 = python_operator(stypy.reporting.localization.Localization(__file__, 675, 15), '-', abs_call_result_283270, result_mul_283274)
    
    # Processing the call keyword arguments (line 675)
    kwargs_283276 = {}
    # Getting the type of 'abs' (line 675)
    abs_283264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 11), 'abs', False)
    # Calling abs(args, kwargs) (line 675)
    abs_call_result_283277 = invoke(stypy.reporting.localization.Localization(__file__, 675, 11), abs_283264, *[result_sub_283275], **kwargs_283276)
    
    float_283278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 55), 'float')
    # Applying the binary operator '<' (line 675)
    result_lt_283279 = python_operator(stypy.reporting.localization.Localization(__file__, 675, 11), '<', abs_call_result_283277, float_283278)
    
    # Assigning a type to the variable 'stypy_return_type' (line 675)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 4), 'stypy_return_type', result_lt_283279)
    
    # ################# End of '_is_full_circle_rad(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_is_full_circle_rad' in the type store
    # Getting the type of 'stypy_return_type' (line 669)
    stypy_return_type_283280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_283280)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_is_full_circle_rad'
    return stypy_return_type_283280

# Assigning a type to the variable '_is_full_circle_rad' (line 669)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 0), '_is_full_circle_rad', _is_full_circle_rad)
# Declaration of the '_WedgeBbox' class
# Getting the type of 'mtransforms' (line 678)
mtransforms_283281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 17), 'mtransforms')
# Obtaining the member 'Bbox' of a type (line 678)
Bbox_283282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 678, 17), mtransforms_283281, 'Bbox')

class _WedgeBbox(Bbox_283282, ):
    unicode_283283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 690, (-1)), 'unicode', u'\n    Transform (theta,r) wedge Bbox into axes bounding box.\n\n    Parameters\n    ----------\n    center : tuple of float\n        Center of the wedge\n    viewLim : `~matplotlib.transforms.Bbox`\n        Bbox determining the boundaries of the wedge\n    originLim : `~matplotlib.transforms.Bbox`\n        Bbox determining the origin for the wedge, if different from *viewLim*\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 691, 4, False)
        # Assigning a type to the variable 'self' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_WedgeBbox.__init__', ['center', 'viewLim', 'originLim'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['center', 'viewLim', 'originLim'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 692)
        # Processing the call arguments (line 692)
        # Getting the type of 'self' (line 692)
        self_283287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 34), 'self', False)
        
        # Call to array(...): (line 693)
        # Processing the call arguments (line 693)
        
        # Obtaining an instance of the builtin type 'list' (line 693)
        list_283290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 43), 'list')
        # Adding type elements to the builtin type 'list' instance (line 693)
        # Adding element type (line 693)
        
        # Obtaining an instance of the builtin type 'list' (line 693)
        list_283291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 693)
        # Adding element type (line 693)
        float_283292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 45), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 693, 44), list_283291, float_283292)
        # Adding element type (line 693)
        float_283293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 50), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 693, 44), list_283291, float_283293)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 693, 43), list_283290, list_283291)
        # Adding element type (line 693)
        
        # Obtaining an instance of the builtin type 'list' (line 693)
        list_283294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 56), 'list')
        # Adding type elements to the builtin type 'list' instance (line 693)
        # Adding element type (line 693)
        float_283295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 57), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 693, 56), list_283294, float_283295)
        # Adding element type (line 693)
        float_283296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 62), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 693, 56), list_283294, float_283296)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 693, 43), list_283290, list_283294)
        
        # Getting the type of 'np' (line 693)
        np_283297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 69), 'np', False)
        # Obtaining the member 'float' of a type (line 693)
        float_283298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 693, 69), np_283297, 'float')
        # Processing the call keyword arguments (line 693)
        kwargs_283299 = {}
        # Getting the type of 'np' (line 693)
        np_283288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 34), 'np', False)
        # Obtaining the member 'array' of a type (line 693)
        array_283289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 693, 34), np_283288, 'array')
        # Calling array(args, kwargs) (line 693)
        array_call_result_283300 = invoke(stypy.reporting.localization.Localization(__file__, 693, 34), array_283289, *[list_283290, float_283298], **kwargs_283299)
        
        # Processing the call keyword arguments (line 692)
        # Getting the type of 'kwargs' (line 694)
        kwargs_283301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 36), 'kwargs', False)
        kwargs_283302 = {'kwargs_283301': kwargs_283301}
        # Getting the type of 'mtransforms' (line 692)
        mtransforms_283284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 8), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 692)
        Bbox_283285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 8), mtransforms_283284, 'Bbox')
        # Obtaining the member '__init__' of a type (line 692)
        init___283286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 8), Bbox_283285, '__init__')
        # Calling __init__(args, kwargs) (line 692)
        init___call_result_283303 = invoke(stypy.reporting.localization.Localization(__file__, 692, 8), init___283286, *[self_283287, array_call_result_283300], **kwargs_283302)
        
        
        # Assigning a Name to a Attribute (line 695):
        
        # Assigning a Name to a Attribute (line 695):
        # Getting the type of 'center' (line 695)
        center_283304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 23), 'center')
        # Getting the type of 'self' (line 695)
        self_283305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 8), 'self')
        # Setting the type of the member '_center' of a type (line 695)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 695, 8), self_283305, '_center', center_283304)
        
        # Assigning a Name to a Attribute (line 696):
        
        # Assigning a Name to a Attribute (line 696):
        # Getting the type of 'viewLim' (line 696)
        viewLim_283306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 24), 'viewLim')
        # Getting the type of 'self' (line 696)
        self_283307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 8), 'self')
        # Setting the type of the member '_viewLim' of a type (line 696)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 696, 8), self_283307, '_viewLim', viewLim_283306)
        
        # Assigning a Name to a Attribute (line 697):
        
        # Assigning a Name to a Attribute (line 697):
        # Getting the type of 'originLim' (line 697)
        originLim_283308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 26), 'originLim')
        # Getting the type of 'self' (line 697)
        self_283309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 8), 'self')
        # Setting the type of the member '_originLim' of a type (line 697)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 8), self_283309, '_originLim', originLim_283308)
        
        # Call to set_children(...): (line 698)
        # Processing the call arguments (line 698)
        # Getting the type of 'viewLim' (line 698)
        viewLim_283312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 26), 'viewLim', False)
        # Getting the type of 'originLim' (line 698)
        originLim_283313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 35), 'originLim', False)
        # Processing the call keyword arguments (line 698)
        kwargs_283314 = {}
        # Getting the type of 'self' (line 698)
        self_283310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 8), 'self', False)
        # Obtaining the member 'set_children' of a type (line 698)
        set_children_283311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 8), self_283310, 'set_children')
        # Calling set_children(args, kwargs) (line 698)
        set_children_call_result_283315 = invoke(stypy.reporting.localization.Localization(__file__, 698, 8), set_children_283311, *[viewLim_283312, originLim_283313], **kwargs_283314)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 700, 4, False)
        # Assigning a type to the variable 'self' (line 701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 701, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _WedgeBbox.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        _WedgeBbox.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _WedgeBbox.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _WedgeBbox.stypy__repr__.__dict__.__setitem__('stypy_function_name', '_WedgeBbox.stypy__repr__')
        _WedgeBbox.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        _WedgeBbox.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _WedgeBbox.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _WedgeBbox.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _WedgeBbox.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _WedgeBbox.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _WedgeBbox.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_WedgeBbox.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        unicode_283316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 15), 'unicode', u'_WedgeBbox(%r, %r, %r)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 701)
        tuple_283317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 43), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 701)
        # Adding element type (line 701)
        # Getting the type of 'self' (line 701)
        self_283318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 43), 'self')
        # Obtaining the member '_center' of a type (line 701)
        _center_283319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 43), self_283318, '_center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 701, 43), tuple_283317, _center_283319)
        # Adding element type (line 701)
        # Getting the type of 'self' (line 701)
        self_283320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 57), 'self')
        # Obtaining the member '_viewLim' of a type (line 701)
        _viewLim_283321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 57), self_283320, '_viewLim')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 701, 43), tuple_283317, _viewLim_283321)
        # Adding element type (line 701)
        # Getting the type of 'self' (line 702)
        self_283322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 43), 'self')
        # Obtaining the member '_originLim' of a type (line 702)
        _originLim_283323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 702, 43), self_283322, '_originLim')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 701, 43), tuple_283317, _originLim_283323)
        
        # Applying the binary operator '%' (line 701)
        result_mod_283324 = python_operator(stypy.reporting.localization.Localization(__file__, 701, 15), '%', unicode_283316, tuple_283317)
        
        # Assigning a type to the variable 'stypy_return_type' (line 701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 701, 8), 'stypy_return_type', result_mod_283324)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 700)
        stypy_return_type_283325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_283325)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_283325


    @norecursion
    def get_points(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_points'
        module_type_store = module_type_store.open_function_context('get_points', 704, 4, False)
        # Assigning a type to the variable 'self' (line 705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _WedgeBbox.get_points.__dict__.__setitem__('stypy_localization', localization)
        _WedgeBbox.get_points.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _WedgeBbox.get_points.__dict__.__setitem__('stypy_type_store', module_type_store)
        _WedgeBbox.get_points.__dict__.__setitem__('stypy_function_name', '_WedgeBbox.get_points')
        _WedgeBbox.get_points.__dict__.__setitem__('stypy_param_names_list', [])
        _WedgeBbox.get_points.__dict__.__setitem__('stypy_varargs_param_name', None)
        _WedgeBbox.get_points.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _WedgeBbox.get_points.__dict__.__setitem__('stypy_call_defaults', defaults)
        _WedgeBbox.get_points.__dict__.__setitem__('stypy_call_varargs', varargs)
        _WedgeBbox.get_points.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _WedgeBbox.get_points.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_WedgeBbox.get_points', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_points', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_points(...)' code ##################

        
        # Getting the type of 'self' (line 705)
        self_283326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 11), 'self')
        # Obtaining the member '_invalid' of a type (line 705)
        _invalid_283327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 11), self_283326, '_invalid')
        # Testing the type of an if condition (line 705)
        if_condition_283328 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 705, 8), _invalid_283327)
        # Assigning a type to the variable 'if_condition_283328' (line 705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 8), 'if_condition_283328', if_condition_283328)
        # SSA begins for if statement (line 705)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 706):
        
        # Assigning a Call to a Name (line 706):
        
        # Call to copy(...): (line 706)
        # Processing the call keyword arguments (line 706)
        kwargs_283335 = {}
        
        # Call to get_points(...): (line 706)
        # Processing the call keyword arguments (line 706)
        kwargs_283332 = {}
        # Getting the type of 'self' (line 706)
        self_283329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 21), 'self', False)
        # Obtaining the member '_viewLim' of a type (line 706)
        _viewLim_283330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 21), self_283329, '_viewLim')
        # Obtaining the member 'get_points' of a type (line 706)
        get_points_283331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 21), _viewLim_283330, 'get_points')
        # Calling get_points(args, kwargs) (line 706)
        get_points_call_result_283333 = invoke(stypy.reporting.localization.Localization(__file__, 706, 21), get_points_283331, *[], **kwargs_283332)
        
        # Obtaining the member 'copy' of a type (line 706)
        copy_283334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 21), get_points_call_result_283333, 'copy')
        # Calling copy(args, kwargs) (line 706)
        copy_call_result_283336 = invoke(stypy.reporting.localization.Localization(__file__, 706, 21), copy_283334, *[], **kwargs_283335)
        
        # Assigning a type to the variable 'points' (line 706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 12), 'points', copy_call_result_283336)
        
        # Getting the type of 'points' (line 709)
        points_283337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 12), 'points')
        
        # Obtaining the type of the subscript
        slice_283338 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 709, 12), None, None, None)
        int_283339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 709, 22), 'int')
        # Getting the type of 'points' (line 709)
        points_283340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 12), 'points')
        # Obtaining the member '__getitem__' of a type (line 709)
        getitem___283341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 12), points_283340, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 709)
        subscript_call_result_283342 = invoke(stypy.reporting.localization.Localization(__file__, 709, 12), getitem___283341, (slice_283338, int_283339))
        
        int_283343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 709, 28), 'int')
        # Getting the type of 'np' (line 709)
        np_283344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 34), 'np')
        # Obtaining the member 'pi' of a type (line 709)
        pi_283345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 34), np_283344, 'pi')
        # Applying the binary operator 'div' (line 709)
        result_div_283346 = python_operator(stypy.reporting.localization.Localization(__file__, 709, 28), 'div', int_283343, pi_283345)
        
        # Applying the binary operator '*=' (line 709)
        result_imul_283347 = python_operator(stypy.reporting.localization.Localization(__file__, 709, 12), '*=', subscript_call_result_283342, result_div_283346)
        # Getting the type of 'points' (line 709)
        points_283348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 12), 'points')
        slice_283349 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 709, 12), None, None, None)
        int_283350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 709, 22), 'int')
        # Storing an element on a container (line 709)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 709, 12), points_283348, ((slice_283349, int_283350), result_imul_283347))
        
        
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 710)
        tuple_283351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 710)
        # Adding element type (line 710)
        int_283352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 710, 22), tuple_283351, int_283352)
        # Adding element type (line 710)
        int_283353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 710, 22), tuple_283351, int_283353)
        
        # Getting the type of 'points' (line 710)
        points_283354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 15), 'points')
        # Obtaining the member '__getitem__' of a type (line 710)
        getitem___283355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 15), points_283354, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 710)
        subscript_call_result_283356 = invoke(stypy.reporting.localization.Localization(__file__, 710, 15), getitem___283355, tuple_283351)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 710)
        tuple_283357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 710)
        # Adding element type (line 710)
        int_283358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 37), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 710, 37), tuple_283357, int_283358)
        # Adding element type (line 710)
        int_283359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 40), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 710, 37), tuple_283357, int_283359)
        
        # Getting the type of 'points' (line 710)
        points_283360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 30), 'points')
        # Obtaining the member '__getitem__' of a type (line 710)
        getitem___283361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 30), points_283360, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 710)
        subscript_call_result_283362 = invoke(stypy.reporting.localization.Localization(__file__, 710, 30), getitem___283361, tuple_283357)
        
        # Applying the binary operator '>' (line 710)
        result_gt_283363 = python_operator(stypy.reporting.localization.Localization(__file__, 710, 15), '>', subscript_call_result_283356, subscript_call_result_283362)
        
        # Testing the type of an if condition (line 710)
        if_condition_283364 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 710, 12), result_gt_283363)
        # Assigning a type to the variable 'if_condition_283364' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'if_condition_283364', if_condition_283364)
        # SSA begins for if statement (line 710)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Subscript (line 711):
        
        # Assigning a Subscript to a Subscript (line 711):
        
        # Obtaining the type of the subscript
        int_283365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 40), 'int')
        slice_283366 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 711, 31), None, None, int_283365)
        int_283367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 44), 'int')
        # Getting the type of 'points' (line 711)
        points_283368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 31), 'points')
        # Obtaining the member '__getitem__' of a type (line 711)
        getitem___283369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 31), points_283368, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 711)
        subscript_call_result_283370 = invoke(stypy.reporting.localization.Localization(__file__, 711, 31), getitem___283369, (slice_283366, int_283367))
        
        # Getting the type of 'points' (line 711)
        points_283371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 16), 'points')
        slice_283372 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 711, 16), None, None, None)
        int_283373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 26), 'int')
        # Storing an element on a container (line 711)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 16), points_283371, ((slice_283372, int_283373), subscript_call_result_283370))
        # SSA join for if statement (line 710)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'points' (line 714)
        points_283374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 12), 'points')
        
        # Obtaining the type of the subscript
        slice_283375 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 714, 12), None, None, None)
        int_283376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 714, 22), 'int')
        # Getting the type of 'points' (line 714)
        points_283377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 12), 'points')
        # Obtaining the member '__getitem__' of a type (line 714)
        getitem___283378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 12), points_283377, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 714)
        subscript_call_result_283379 = invoke(stypy.reporting.localization.Localization(__file__, 714, 12), getitem___283378, (slice_283375, int_283376))
        
        # Getting the type of 'self' (line 714)
        self_283380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 28), 'self')
        # Obtaining the member '_originLim' of a type (line 714)
        _originLim_283381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 28), self_283380, '_originLim')
        # Obtaining the member 'y0' of a type (line 714)
        y0_283382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 28), _originLim_283381, 'y0')
        # Applying the binary operator '-=' (line 714)
        result_isub_283383 = python_operator(stypy.reporting.localization.Localization(__file__, 714, 12), '-=', subscript_call_result_283379, y0_283382)
        # Getting the type of 'points' (line 714)
        points_283384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 12), 'points')
        slice_283385 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 714, 12), None, None, None)
        int_283386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 714, 22), 'int')
        # Storing an element on a container (line 714)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 714, 12), points_283384, ((slice_283385, int_283386), result_isub_283383))
        
        
        # Assigning a BinOp to a Name (line 717):
        
        # Assigning a BinOp to a Name (line 717):
        float_283387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 717, 21), 'float')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 717)
        tuple_283388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 717, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 717)
        # Adding element type (line 717)
        int_283389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 717, 34), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 717, 34), tuple_283388, int_283389)
        # Adding element type (line 717)
        int_283390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 717, 37), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 717, 34), tuple_283388, int_283390)
        
        # Getting the type of 'points' (line 717)
        points_283391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 27), 'points')
        # Obtaining the member '__getitem__' of a type (line 717)
        getitem___283392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 27), points_283391, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 717)
        subscript_call_result_283393 = invoke(stypy.reporting.localization.Localization(__file__, 717, 27), getitem___283392, tuple_283388)
        
        # Applying the binary operator 'div' (line 717)
        result_div_283394 = python_operator(stypy.reporting.localization.Localization(__file__, 717, 21), 'div', float_283387, subscript_call_result_283393)
        
        # Assigning a type to the variable 'rscale' (line 717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 12), 'rscale', result_div_283394)
        
        # Getting the type of 'points' (line 718)
        points_283395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 12), 'points')
        
        # Obtaining the type of the subscript
        slice_283396 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 718, 12), None, None, None)
        int_283397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 22), 'int')
        # Getting the type of 'points' (line 718)
        points_283398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 12), 'points')
        # Obtaining the member '__getitem__' of a type (line 718)
        getitem___283399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 12), points_283398, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 718)
        subscript_call_result_283400 = invoke(stypy.reporting.localization.Localization(__file__, 718, 12), getitem___283399, (slice_283396, int_283397))
        
        # Getting the type of 'rscale' (line 718)
        rscale_283401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 28), 'rscale')
        # Applying the binary operator '*=' (line 718)
        result_imul_283402 = python_operator(stypy.reporting.localization.Localization(__file__, 718, 12), '*=', subscript_call_result_283400, rscale_283401)
        # Getting the type of 'points' (line 718)
        points_283403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 12), 'points')
        slice_283404 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 718, 12), None, None, None)
        int_283405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 22), 'int')
        # Storing an element on a container (line 718)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 12), points_283403, ((slice_283404, int_283405), result_imul_283402))
        
        
        # Assigning a Call to a Name (line 719):
        
        # Assigning a Call to a Name (line 719):
        
        # Call to min(...): (line 719)
        # Processing the call arguments (line 719)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 719)
        tuple_283407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 719)
        # Adding element type (line 719)
        int_283408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 31), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 719, 31), tuple_283407, int_283408)
        # Adding element type (line 719)
        int_283409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 34), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 719, 31), tuple_283407, int_283409)
        
        # Getting the type of 'points' (line 719)
        points_283410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 24), 'points', False)
        # Obtaining the member '__getitem__' of a type (line 719)
        getitem___283411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 24), points_283410, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 719)
        subscript_call_result_283412 = invoke(stypy.reporting.localization.Localization(__file__, 719, 24), getitem___283411, tuple_283407)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 719)
        tuple_283413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 719)
        # Adding element type (line 719)
        int_283414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 46), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 719, 46), tuple_283413, int_283414)
        # Adding element type (line 719)
        int_283415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 49), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 719, 46), tuple_283413, int_283415)
        
        # Getting the type of 'points' (line 719)
        points_283416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 39), 'points', False)
        # Obtaining the member '__getitem__' of a type (line 719)
        getitem___283417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 39), points_283416, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 719)
        subscript_call_result_283418 = invoke(stypy.reporting.localization.Localization(__file__, 719, 39), getitem___283417, tuple_283413)
        
        # Applying the binary operator '-' (line 719)
        result_sub_283419 = python_operator(stypy.reporting.localization.Localization(__file__, 719, 24), '-', subscript_call_result_283412, subscript_call_result_283418)
        
        float_283420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 53), 'float')
        # Processing the call keyword arguments (line 719)
        kwargs_283421 = {}
        # Getting the type of 'min' (line 719)
        min_283406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 20), 'min', False)
        # Calling min(args, kwargs) (line 719)
        min_call_result_283422 = invoke(stypy.reporting.localization.Localization(__file__, 719, 20), min_283406, *[result_sub_283419, float_283420], **kwargs_283421)
        
        # Assigning a type to the variable 'width' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 12), 'width', min_call_result_283422)
        
        # Assigning a Call to a Name (line 722):
        
        # Assigning a Call to a Name (line 722):
        
        # Call to Wedge(...): (line 722)
        # Processing the call arguments (line 722)
        # Getting the type of 'self' (line 722)
        self_283425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 35), 'self', False)
        # Obtaining the member '_center' of a type (line 722)
        _center_283426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 35), self_283425, '_center')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 722)
        tuple_283427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, 56), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 722)
        # Adding element type (line 722)
        int_283428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, 56), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 722, 56), tuple_283427, int_283428)
        # Adding element type (line 722)
        int_283429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, 59), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 722, 56), tuple_283427, int_283429)
        
        # Getting the type of 'points' (line 722)
        points_283430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 49), 'points', False)
        # Obtaining the member '__getitem__' of a type (line 722)
        getitem___283431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 49), points_283430, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 722)
        subscript_call_result_283432 = invoke(stypy.reporting.localization.Localization(__file__, 722, 49), getitem___283431, tuple_283427)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 723)
        tuple_283433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 723)
        # Adding element type (line 723)
        int_283434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 42), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 723, 42), tuple_283433, int_283434)
        # Adding element type (line 723)
        int_283435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 45), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 723, 42), tuple_283433, int_283435)
        
        # Getting the type of 'points' (line 723)
        points_283436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 35), 'points', False)
        # Obtaining the member '__getitem__' of a type (line 723)
        getitem___283437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 35), points_283436, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 723)
        subscript_call_result_283438 = invoke(stypy.reporting.localization.Localization(__file__, 723, 35), getitem___283437, tuple_283433)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 723)
        tuple_283439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 56), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 723)
        # Adding element type (line 723)
        int_283440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 56), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 723, 56), tuple_283439, int_283440)
        # Adding element type (line 723)
        int_283441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 59), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 723, 56), tuple_283439, int_283441)
        
        # Getting the type of 'points' (line 723)
        points_283442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 49), 'points', False)
        # Obtaining the member '__getitem__' of a type (line 723)
        getitem___283443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 49), points_283442, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 723)
        subscript_call_result_283444 = invoke(stypy.reporting.localization.Localization(__file__, 723, 49), getitem___283443, tuple_283439)
        
        # Processing the call keyword arguments (line 722)
        # Getting the type of 'width' (line 724)
        width_283445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 41), 'width', False)
        keyword_283446 = width_283445
        kwargs_283447 = {'width': keyword_283446}
        # Getting the type of 'mpatches' (line 722)
        mpatches_283423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 20), 'mpatches', False)
        # Obtaining the member 'Wedge' of a type (line 722)
        Wedge_283424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 20), mpatches_283423, 'Wedge')
        # Calling Wedge(args, kwargs) (line 722)
        Wedge_call_result_283448 = invoke(stypy.reporting.localization.Localization(__file__, 722, 20), Wedge_283424, *[_center_283426, subscript_call_result_283432, subscript_call_result_283438, subscript_call_result_283444], **kwargs_283447)
        
        # Assigning a type to the variable 'wedge' (line 722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 722, 12), 'wedge', Wedge_call_result_283448)
        
        # Call to update_from_path(...): (line 725)
        # Processing the call arguments (line 725)
        
        # Call to get_path(...): (line 725)
        # Processing the call keyword arguments (line 725)
        kwargs_283453 = {}
        # Getting the type of 'wedge' (line 725)
        wedge_283451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 34), 'wedge', False)
        # Obtaining the member 'get_path' of a type (line 725)
        get_path_283452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 34), wedge_283451, 'get_path')
        # Calling get_path(args, kwargs) (line 725)
        get_path_call_result_283454 = invoke(stypy.reporting.localization.Localization(__file__, 725, 34), get_path_283452, *[], **kwargs_283453)
        
        # Processing the call keyword arguments (line 725)
        kwargs_283455 = {}
        # Getting the type of 'self' (line 725)
        self_283449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 12), 'self', False)
        # Obtaining the member 'update_from_path' of a type (line 725)
        update_from_path_283450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 12), self_283449, 'update_from_path')
        # Calling update_from_path(args, kwargs) (line 725)
        update_from_path_call_result_283456 = invoke(stypy.reporting.localization.Localization(__file__, 725, 12), update_from_path_283450, *[get_path_call_result_283454], **kwargs_283455)
        
        
        # Assigning a BinOp to a Tuple (line 728):
        
        # Assigning a Subscript to a Name (line 728):
        
        # Obtaining the type of the subscript
        int_283457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 12), 'int')
        
        # Obtaining the type of the subscript
        int_283458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 32), 'int')
        # Getting the type of 'self' (line 728)
        self_283459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 19), 'self')
        # Obtaining the member '_points' of a type (line 728)
        _points_283460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 19), self_283459, '_points')
        # Obtaining the member '__getitem__' of a type (line 728)
        getitem___283461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 19), _points_283460, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 728)
        subscript_call_result_283462 = invoke(stypy.reporting.localization.Localization(__file__, 728, 19), getitem___283461, int_283458)
        
        
        # Obtaining the type of the subscript
        int_283463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 50), 'int')
        # Getting the type of 'self' (line 728)
        self_283464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 37), 'self')
        # Obtaining the member '_points' of a type (line 728)
        _points_283465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 37), self_283464, '_points')
        # Obtaining the member '__getitem__' of a type (line 728)
        getitem___283466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 37), _points_283465, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 728)
        subscript_call_result_283467 = invoke(stypy.reporting.localization.Localization(__file__, 728, 37), getitem___283466, int_283463)
        
        # Applying the binary operator '-' (line 728)
        result_sub_283468 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 19), '-', subscript_call_result_283462, subscript_call_result_283467)
        
        # Obtaining the member '__getitem__' of a type (line 728)
        getitem___283469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 12), result_sub_283468, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 728)
        subscript_call_result_283470 = invoke(stypy.reporting.localization.Localization(__file__, 728, 12), getitem___283469, int_283457)
        
        # Assigning a type to the variable 'tuple_var_assignment_281135' (line 728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'tuple_var_assignment_281135', subscript_call_result_283470)
        
        # Assigning a Subscript to a Name (line 728):
        
        # Obtaining the type of the subscript
        int_283471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 12), 'int')
        
        # Obtaining the type of the subscript
        int_283472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 32), 'int')
        # Getting the type of 'self' (line 728)
        self_283473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 19), 'self')
        # Obtaining the member '_points' of a type (line 728)
        _points_283474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 19), self_283473, '_points')
        # Obtaining the member '__getitem__' of a type (line 728)
        getitem___283475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 19), _points_283474, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 728)
        subscript_call_result_283476 = invoke(stypy.reporting.localization.Localization(__file__, 728, 19), getitem___283475, int_283472)
        
        
        # Obtaining the type of the subscript
        int_283477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 50), 'int')
        # Getting the type of 'self' (line 728)
        self_283478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 37), 'self')
        # Obtaining the member '_points' of a type (line 728)
        _points_283479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 37), self_283478, '_points')
        # Obtaining the member '__getitem__' of a type (line 728)
        getitem___283480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 37), _points_283479, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 728)
        subscript_call_result_283481 = invoke(stypy.reporting.localization.Localization(__file__, 728, 37), getitem___283480, int_283477)
        
        # Applying the binary operator '-' (line 728)
        result_sub_283482 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 19), '-', subscript_call_result_283476, subscript_call_result_283481)
        
        # Obtaining the member '__getitem__' of a type (line 728)
        getitem___283483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 12), result_sub_283482, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 728)
        subscript_call_result_283484 = invoke(stypy.reporting.localization.Localization(__file__, 728, 12), getitem___283483, int_283471)
        
        # Assigning a type to the variable 'tuple_var_assignment_281136' (line 728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'tuple_var_assignment_281136', subscript_call_result_283484)
        
        # Assigning a Name to a Name (line 728):
        # Getting the type of 'tuple_var_assignment_281135' (line 728)
        tuple_var_assignment_281135_283485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'tuple_var_assignment_281135')
        # Assigning a type to the variable 'w' (line 728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'w', tuple_var_assignment_281135_283485)
        
        # Assigning a Name to a Name (line 728):
        # Getting the type of 'tuple_var_assignment_281136' (line 728)
        tuple_var_assignment_281136_283486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'tuple_var_assignment_281136')
        # Assigning a type to the variable 'h' (line 728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 15), 'h', tuple_var_assignment_281136_283486)
        
        
        # Getting the type of 'h' (line 729)
        h_283487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 15), 'h')
        # Getting the type of 'w' (line 729)
        w_283488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 19), 'w')
        # Applying the binary operator '<' (line 729)
        result_lt_283489 = python_operator(stypy.reporting.localization.Localization(__file__, 729, 15), '<', h_283487, w_283488)
        
        # Testing the type of an if condition (line 729)
        if_condition_283490 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 729, 12), result_lt_283489)
        # Assigning a type to the variable 'if_condition_283490' (line 729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 12), 'if_condition_283490', if_condition_283490)
        # SSA begins for if statement (line 729)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 730):
        
        # Assigning a BinOp to a Name (line 730):
        # Getting the type of 'w' (line 730)
        w_283491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 26), 'w')
        # Getting the type of 'h' (line 730)
        h_283492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 30), 'h')
        # Applying the binary operator '-' (line 730)
        result_sub_283493 = python_operator(stypy.reporting.localization.Localization(__file__, 730, 26), '-', w_283491, h_283492)
        
        float_283494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 730, 35), 'float')
        # Applying the binary operator 'div' (line 730)
        result_div_283495 = python_operator(stypy.reporting.localization.Localization(__file__, 730, 25), 'div', result_sub_283493, float_283494)
        
        # Assigning a type to the variable 'deltah' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 16), 'deltah', result_div_283495)
        
        # Assigning a Num to a Name (line 731):
        
        # Assigning a Num to a Name (line 731):
        float_283496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 25), 'float')
        # Assigning a type to the variable 'deltaw' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 16), 'deltaw', float_283496)
        # SSA branch for the else part of an if statement (line 729)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'w' (line 732)
        w_283497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 17), 'w')
        # Getting the type of 'h' (line 732)
        h_283498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 21), 'h')
        # Applying the binary operator '<' (line 732)
        result_lt_283499 = python_operator(stypy.reporting.localization.Localization(__file__, 732, 17), '<', w_283497, h_283498)
        
        # Testing the type of an if condition (line 732)
        if_condition_283500 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 732, 17), result_lt_283499)
        # Assigning a type to the variable 'if_condition_283500' (line 732)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 17), 'if_condition_283500', if_condition_283500)
        # SSA begins for if statement (line 732)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 733):
        
        # Assigning a Num to a Name (line 733):
        float_283501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 733, 25), 'float')
        # Assigning a type to the variable 'deltah' (line 733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 16), 'deltah', float_283501)
        
        # Assigning a BinOp to a Name (line 734):
        
        # Assigning a BinOp to a Name (line 734):
        # Getting the type of 'h' (line 734)
        h_283502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 26), 'h')
        # Getting the type of 'w' (line 734)
        w_283503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 30), 'w')
        # Applying the binary operator '-' (line 734)
        result_sub_283504 = python_operator(stypy.reporting.localization.Localization(__file__, 734, 26), '-', h_283502, w_283503)
        
        float_283505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 35), 'float')
        # Applying the binary operator 'div' (line 734)
        result_div_283506 = python_operator(stypy.reporting.localization.Localization(__file__, 734, 25), 'div', result_sub_283504, float_283505)
        
        # Assigning a type to the variable 'deltaw' (line 734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 16), 'deltaw', result_div_283506)
        # SSA branch for the else part of an if statement (line 732)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 736):
        
        # Assigning a Num to a Name (line 736):
        float_283507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 736, 25), 'float')
        # Assigning a type to the variable 'deltah' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 16), 'deltah', float_283507)
        
        # Assigning a Num to a Name (line 737):
        
        # Assigning a Num to a Name (line 737):
        float_283508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 737, 25), 'float')
        # Assigning a type to the variable 'deltaw' (line 737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 16), 'deltaw', float_283508)
        # SSA join for if statement (line 732)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 729)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 738)
        self_283509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 12), 'self')
        # Obtaining the member '_points' of a type (line 738)
        _points_283510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 12), self_283509, '_points')
        
        # Call to array(...): (line 738)
        # Processing the call arguments (line 738)
        
        # Obtaining an instance of the builtin type 'list' (line 738)
        list_283513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 738)
        # Adding element type (line 738)
        
        # Obtaining an instance of the builtin type 'list' (line 738)
        list_283514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 738)
        # Adding element type (line 738)
        
        # Getting the type of 'deltaw' (line 738)
        deltaw_283515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 40), 'deltaw', False)
        # Applying the 'usub' unary operator (line 738)
        result___neg___283516 = python_operator(stypy.reporting.localization.Localization(__file__, 738, 39), 'usub', deltaw_283515)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 738, 38), list_283514, result___neg___283516)
        # Adding element type (line 738)
        
        # Getting the type of 'deltah' (line 738)
        deltah_283517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 49), 'deltah', False)
        # Applying the 'usub' unary operator (line 738)
        result___neg___283518 = python_operator(stypy.reporting.localization.Localization(__file__, 738, 48), 'usub', deltah_283517)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 738, 38), list_283514, result___neg___283518)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 738, 37), list_283513, list_283514)
        # Adding element type (line 738)
        
        # Obtaining an instance of the builtin type 'list' (line 738)
        list_283519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, 58), 'list')
        # Adding type elements to the builtin type 'list' instance (line 738)
        # Adding element type (line 738)
        # Getting the type of 'deltaw' (line 738)
        deltaw_283520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 59), 'deltaw', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 738, 58), list_283519, deltaw_283520)
        # Adding element type (line 738)
        # Getting the type of 'deltah' (line 738)
        deltah_283521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 67), 'deltah', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 738, 58), list_283519, deltah_283521)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 738, 37), list_283513, list_283519)
        
        # Processing the call keyword arguments (line 738)
        kwargs_283522 = {}
        # Getting the type of 'np' (line 738)
        np_283511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 28), 'np', False)
        # Obtaining the member 'array' of a type (line 738)
        array_283512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 28), np_283511, 'array')
        # Calling array(args, kwargs) (line 738)
        array_call_result_283523 = invoke(stypy.reporting.localization.Localization(__file__, 738, 28), array_283512, *[list_283513], **kwargs_283522)
        
        # Applying the binary operator '+=' (line 738)
        result_iadd_283524 = python_operator(stypy.reporting.localization.Localization(__file__, 738, 12), '+=', _points_283510, array_call_result_283523)
        # Getting the type of 'self' (line 738)
        self_283525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 12), 'self')
        # Setting the type of the member '_points' of a type (line 738)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 12), self_283525, '_points', result_iadd_283524)
        
        
        # Assigning a Num to a Attribute (line 740):
        
        # Assigning a Num to a Attribute (line 740):
        int_283526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 740, 28), 'int')
        # Getting the type of 'self' (line 740)
        self_283527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 12), 'self')
        # Setting the type of the member '_invalid' of a type (line 740)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 12), self_283527, '_invalid', int_283526)
        # SSA join for if statement (line 705)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 742)
        self_283528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 15), 'self')
        # Obtaining the member '_points' of a type (line 742)
        _points_283529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 15), self_283528, '_points')
        # Assigning a type to the variable 'stypy_return_type' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 8), 'stypy_return_type', _points_283529)
        
        # ################# End of 'get_points(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_points' in the type store
        # Getting the type of 'stypy_return_type' (line 704)
        stypy_return_type_283530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_283530)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_points'
        return stypy_return_type_283530

    
    # Assigning a Attribute to a Attribute (line 743):

# Assigning a type to the variable '_WedgeBbox' (line 678)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 678, 0), '_WedgeBbox', _WedgeBbox)

# Assigning a Attribute to a Attribute (line 743):
# Getting the type of 'mtransforms' (line 743)
mtransforms_283531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 25), 'mtransforms')
# Obtaining the member 'Bbox' of a type (line 743)
Bbox_283532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 25), mtransforms_283531, 'Bbox')
# Obtaining the member 'get_points' of a type (line 743)
get_points_283533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 25), Bbox_283532, 'get_points')
# Obtaining the member '__doc__' of a type (line 743)
doc___283534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 25), get_points_283533, '__doc__')
# Getting the type of '_WedgeBbox'
_WedgeBbox_283535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_WedgeBbox')
# Obtaining the member 'get_points' of a type
get_points_283536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _WedgeBbox_283535, 'get_points')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), get_points_283536, '__doc__', doc___283534)
# Declaration of the 'PolarAxes' class
# Getting the type of 'Axes' (line 746)
Axes_283537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 16), 'Axes')

class PolarAxes(Axes_283537, ):
    unicode_283538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, (-1)), 'unicode', u'\n    A polar graph projection, where the input dimensions are *theta*, *r*.\n\n    Theta starts pointing east and goes anti-clockwise.\n    ')
    
    # Assigning a Str to a Name (line 752):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 754, 4, False)
        # Assigning a type to the variable 'self' (line 755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.__init__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_283539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, (-1)), 'unicode', u'\n        Create a new Polar Axes for a polar plot.\n        ')
        
        # Assigning a Call to a Attribute (line 758):
        
        # Assigning a Call to a Attribute (line 758):
        
        # Call to pop(...): (line 758)
        # Processing the call arguments (line 758)
        unicode_283542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 48), 'unicode', u'theta_offset')
        int_283543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 64), 'int')
        # Processing the call keyword arguments (line 758)
        kwargs_283544 = {}
        # Getting the type of 'kwargs' (line 758)
        kwargs_283540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 37), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 758)
        pop_283541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 37), kwargs_283540, 'pop')
        # Calling pop(args, kwargs) (line 758)
        pop_call_result_283545 = invoke(stypy.reporting.localization.Localization(__file__, 758, 37), pop_283541, *[unicode_283542, int_283543], **kwargs_283544)
        
        # Getting the type of 'self' (line 758)
        self_283546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 8), 'self')
        # Setting the type of the member '_default_theta_offset' of a type (line 758)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 8), self_283546, '_default_theta_offset', pop_call_result_283545)
        
        # Assigning a Call to a Attribute (line 759):
        
        # Assigning a Call to a Attribute (line 759):
        
        # Call to pop(...): (line 759)
        # Processing the call arguments (line 759)
        unicode_283549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 51), 'unicode', u'theta_direction')
        int_283550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 70), 'int')
        # Processing the call keyword arguments (line 759)
        kwargs_283551 = {}
        # Getting the type of 'kwargs' (line 759)
        kwargs_283547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 40), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 759)
        pop_283548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 40), kwargs_283547, 'pop')
        # Calling pop(args, kwargs) (line 759)
        pop_call_result_283552 = invoke(stypy.reporting.localization.Localization(__file__, 759, 40), pop_283548, *[unicode_283549, int_283550], **kwargs_283551)
        
        # Getting the type of 'self' (line 759)
        self_283553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 8), 'self')
        # Setting the type of the member '_default_theta_direction' of a type (line 759)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 8), self_283553, '_default_theta_direction', pop_call_result_283552)
        
        # Assigning a Call to a Attribute (line 760):
        
        # Assigning a Call to a Attribute (line 760):
        
        # Call to deg2rad(...): (line 760)
        # Processing the call arguments (line 760)
        
        # Call to pop(...): (line 761)
        # Processing the call arguments (line 761)
        unicode_283558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 761, 23), 'unicode', u'rlabel_position')
        float_283559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 761, 42), 'float')
        # Processing the call keyword arguments (line 761)
        kwargs_283560 = {}
        # Getting the type of 'kwargs' (line 761)
        kwargs_283556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 12), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 761)
        pop_283557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 12), kwargs_283556, 'pop')
        # Calling pop(args, kwargs) (line 761)
        pop_call_result_283561 = invoke(stypy.reporting.localization.Localization(__file__, 761, 12), pop_283557, *[unicode_283558, float_283559], **kwargs_283560)
        
        # Processing the call keyword arguments (line 760)
        kwargs_283562 = {}
        # Getting the type of 'np' (line 760)
        np_283554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 40), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 760)
        deg2rad_283555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 40), np_283554, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 760)
        deg2rad_call_result_283563 = invoke(stypy.reporting.localization.Localization(__file__, 760, 40), deg2rad_283555, *[pop_call_result_283561], **kwargs_283562)
        
        # Getting the type of 'self' (line 760)
        self_283564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 8), 'self')
        # Setting the type of the member '_default_rlabel_position' of a type (line 760)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 8), self_283564, '_default_rlabel_position', deg2rad_call_result_283563)
        
        # Call to __init__(...): (line 763)
        # Processing the call arguments (line 763)
        # Getting the type of 'self' (line 763)
        self_283567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 22), 'self', False)
        # Getting the type of 'args' (line 763)
        args_283568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 29), 'args', False)
        # Processing the call keyword arguments (line 763)
        # Getting the type of 'kwargs' (line 763)
        kwargs_283569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 37), 'kwargs', False)
        kwargs_283570 = {'kwargs_283569': kwargs_283569}
        # Getting the type of 'Axes' (line 763)
        Axes_283565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 8), 'Axes', False)
        # Obtaining the member '__init__' of a type (line 763)
        init___283566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 8), Axes_283565, '__init__')
        # Calling __init__(args, kwargs) (line 763)
        init___call_result_283571 = invoke(stypy.reporting.localization.Localization(__file__, 763, 8), init___283566, *[self_283567, args_283568], **kwargs_283570)
        
        
        # Call to set_aspect(...): (line 764)
        # Processing the call arguments (line 764)
        unicode_283574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 24), 'unicode', u'equal')
        # Processing the call keyword arguments (line 764)
        unicode_283575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 44), 'unicode', u'box')
        keyword_283576 = unicode_283575
        unicode_283577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 58), 'unicode', u'C')
        keyword_283578 = unicode_283577
        kwargs_283579 = {'adjustable': keyword_283576, 'anchor': keyword_283578}
        # Getting the type of 'self' (line 764)
        self_283572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 8), 'self', False)
        # Obtaining the member 'set_aspect' of a type (line 764)
        set_aspect_283573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 8), self_283572, 'set_aspect')
        # Calling set_aspect(args, kwargs) (line 764)
        set_aspect_call_result_283580 = invoke(stypy.reporting.localization.Localization(__file__, 764, 8), set_aspect_283573, *[unicode_283574], **kwargs_283579)
        
        
        # Call to cla(...): (line 765)
        # Processing the call keyword arguments (line 765)
        kwargs_283583 = {}
        # Getting the type of 'self' (line 765)
        self_283581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 8), 'self', False)
        # Obtaining the member 'cla' of a type (line 765)
        cla_283582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 8), self_283581, 'cla')
        # Calling cla(args, kwargs) (line 765)
        cla_call_result_283584 = invoke(stypy.reporting.localization.Localization(__file__, 765, 8), cla_283582, *[], **kwargs_283583)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()

    
    # Assigning a Attribute to a Attribute (line 766):

    @norecursion
    def cla(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'cla'
        module_type_store = module_type_store.open_function_context('cla', 768, 4, False)
        # Assigning a type to the variable 'self' (line 769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.cla.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.cla.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.cla.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.cla.__dict__.__setitem__('stypy_function_name', 'PolarAxes.cla')
        PolarAxes.cla.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.cla.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.cla.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.cla.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.cla.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.cla.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.cla.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.cla', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cla', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cla(...)' code ##################

        
        # Call to cla(...): (line 769)
        # Processing the call arguments (line 769)
        # Getting the type of 'self' (line 769)
        self_283587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 17), 'self', False)
        # Processing the call keyword arguments (line 769)
        kwargs_283588 = {}
        # Getting the type of 'Axes' (line 769)
        Axes_283585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'Axes', False)
        # Obtaining the member 'cla' of a type (line 769)
        cla_283586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 8), Axes_283585, 'cla')
        # Calling cla(args, kwargs) (line 769)
        cla_call_result_283589 = invoke(stypy.reporting.localization.Localization(__file__, 769, 8), cla_283586, *[self_283587], **kwargs_283588)
        
        
        # Call to set_y(...): (line 771)
        # Processing the call arguments (line 771)
        float_283593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 771, 25), 'float')
        # Processing the call keyword arguments (line 771)
        kwargs_283594 = {}
        # Getting the type of 'self' (line 771)
        self_283590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 8), 'self', False)
        # Obtaining the member 'title' of a type (line 771)
        title_283591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 8), self_283590, 'title')
        # Obtaining the member 'set_y' of a type (line 771)
        set_y_283592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 8), title_283591, 'set_y')
        # Calling set_y(args, kwargs) (line 771)
        set_y_call_result_283595 = invoke(stypy.reporting.localization.Localization(__file__, 771, 8), set_y_283592, *[float_283593], **kwargs_283594)
        
        
        # Assigning a Call to a Name (line 773):
        
        # Assigning a Call to a Name (line 773):
        
        # Call to get(...): (line 773)
        # Processing the call arguments (line 773)
        unicode_283599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 773, 32), 'unicode', u'start')
        # Getting the type of 'None' (line 773)
        None_283600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 41), 'None', False)
        # Processing the call keyword arguments (line 773)
        kwargs_283601 = {}
        # Getting the type of 'self' (line 773)
        self_283596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 16), 'self', False)
        # Obtaining the member 'spines' of a type (line 773)
        spines_283597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 16), self_283596, 'spines')
        # Obtaining the member 'get' of a type (line 773)
        get_283598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 16), spines_283597, 'get')
        # Calling get(args, kwargs) (line 773)
        get_call_result_283602 = invoke(stypy.reporting.localization.Localization(__file__, 773, 16), get_283598, *[unicode_283599, None_283600], **kwargs_283601)
        
        # Assigning a type to the variable 'start' (line 773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 773, 8), 'start', get_call_result_283602)
        
        # Getting the type of 'start' (line 774)
        start_283603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 11), 'start')
        # Testing the type of an if condition (line 774)
        if_condition_283604 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 774, 8), start_283603)
        # Assigning a type to the variable 'if_condition_283604' (line 774)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 8), 'if_condition_283604', if_condition_283604)
        # SSA begins for if statement (line 774)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_visible(...): (line 775)
        # Processing the call arguments (line 775)
        # Getting the type of 'False' (line 775)
        False_283607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 30), 'False', False)
        # Processing the call keyword arguments (line 775)
        kwargs_283608 = {}
        # Getting the type of 'start' (line 775)
        start_283605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 12), 'start', False)
        # Obtaining the member 'set_visible' of a type (line 775)
        set_visible_283606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 12), start_283605, 'set_visible')
        # Calling set_visible(args, kwargs) (line 775)
        set_visible_call_result_283609 = invoke(stypy.reporting.localization.Localization(__file__, 775, 12), set_visible_283606, *[False_283607], **kwargs_283608)
        
        # SSA join for if statement (line 774)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 776):
        
        # Assigning a Call to a Name (line 776):
        
        # Call to get(...): (line 776)
        # Processing the call arguments (line 776)
        unicode_283613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 776, 30), 'unicode', u'end')
        # Getting the type of 'None' (line 776)
        None_283614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 37), 'None', False)
        # Processing the call keyword arguments (line 776)
        kwargs_283615 = {}
        # Getting the type of 'self' (line 776)
        self_283610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 14), 'self', False)
        # Obtaining the member 'spines' of a type (line 776)
        spines_283611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 14), self_283610, 'spines')
        # Obtaining the member 'get' of a type (line 776)
        get_283612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 14), spines_283611, 'get')
        # Calling get(args, kwargs) (line 776)
        get_call_result_283616 = invoke(stypy.reporting.localization.Localization(__file__, 776, 14), get_283612, *[unicode_283613, None_283614], **kwargs_283615)
        
        # Assigning a type to the variable 'end' (line 776)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 776, 8), 'end', get_call_result_283616)
        
        # Getting the type of 'end' (line 777)
        end_283617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 11), 'end')
        # Testing the type of an if condition (line 777)
        if_condition_283618 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 777, 8), end_283617)
        # Assigning a type to the variable 'if_condition_283618' (line 777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 8), 'if_condition_283618', if_condition_283618)
        # SSA begins for if statement (line 777)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_visible(...): (line 778)
        # Processing the call arguments (line 778)
        # Getting the type of 'False' (line 778)
        False_283621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 28), 'False', False)
        # Processing the call keyword arguments (line 778)
        kwargs_283622 = {}
        # Getting the type of 'end' (line 778)
        end_283619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 12), 'end', False)
        # Obtaining the member 'set_visible' of a type (line 778)
        set_visible_283620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 12), end_283619, 'set_visible')
        # Calling set_visible(args, kwargs) (line 778)
        set_visible_call_result_283623 = invoke(stypy.reporting.localization.Localization(__file__, 778, 12), set_visible_283620, *[False_283621], **kwargs_283622)
        
        # SSA join for if statement (line 777)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_xlim(...): (line 779)
        # Processing the call arguments (line 779)
        float_283626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 779, 22), 'float')
        int_283627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 779, 27), 'int')
        # Getting the type of 'np' (line 779)
        np_283628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 31), 'np', False)
        # Obtaining the member 'pi' of a type (line 779)
        pi_283629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 31), np_283628, 'pi')
        # Applying the binary operator '*' (line 779)
        result_mul_283630 = python_operator(stypy.reporting.localization.Localization(__file__, 779, 27), '*', int_283627, pi_283629)
        
        # Processing the call keyword arguments (line 779)
        kwargs_283631 = {}
        # Getting the type of 'self' (line 779)
        self_283624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 8), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 779)
        set_xlim_283625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 8), self_283624, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 779)
        set_xlim_call_result_283632 = invoke(stypy.reporting.localization.Localization(__file__, 779, 8), set_xlim_283625, *[float_283626, result_mul_283630], **kwargs_283631)
        
        
        # Call to grid(...): (line 781)
        # Processing the call arguments (line 781)
        
        # Obtaining the type of the subscript
        unicode_283635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 781, 27), 'unicode', u'polaraxes.grid')
        # Getting the type of 'rcParams' (line 781)
        rcParams_283636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 18), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 781)
        getitem___283637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 781, 18), rcParams_283636, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 781)
        subscript_call_result_283638 = invoke(stypy.reporting.localization.Localization(__file__, 781, 18), getitem___283637, unicode_283635)
        
        # Processing the call keyword arguments (line 781)
        kwargs_283639 = {}
        # Getting the type of 'self' (line 781)
        self_283633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 8), 'self', False)
        # Obtaining the member 'grid' of a type (line 781)
        grid_283634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 781, 8), self_283633, 'grid')
        # Calling grid(args, kwargs) (line 781)
        grid_call_result_283640 = invoke(stypy.reporting.localization.Localization(__file__, 781, 8), grid_283634, *[subscript_call_result_283638], **kwargs_283639)
        
        
        # Assigning a Call to a Name (line 782):
        
        # Assigning a Call to a Name (line 782):
        
        # Call to get(...): (line 782)
        # Processing the call arguments (line 782)
        unicode_283644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 782, 32), 'unicode', u'inner')
        # Getting the type of 'None' (line 782)
        None_283645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 41), 'None', False)
        # Processing the call keyword arguments (line 782)
        kwargs_283646 = {}
        # Getting the type of 'self' (line 782)
        self_283641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 16), 'self', False)
        # Obtaining the member 'spines' of a type (line 782)
        spines_283642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 16), self_283641, 'spines')
        # Obtaining the member 'get' of a type (line 782)
        get_283643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 16), spines_283642, 'get')
        # Calling get(args, kwargs) (line 782)
        get_call_result_283647 = invoke(stypy.reporting.localization.Localization(__file__, 782, 16), get_283643, *[unicode_283644, None_283645], **kwargs_283646)
        
        # Assigning a type to the variable 'inner' (line 782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 8), 'inner', get_call_result_283647)
        
        # Getting the type of 'inner' (line 783)
        inner_283648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 11), 'inner')
        # Testing the type of an if condition (line 783)
        if_condition_283649 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 783, 8), inner_283648)
        # Assigning a type to the variable 'if_condition_283649' (line 783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 783, 8), 'if_condition_283649', if_condition_283649)
        # SSA begins for if statement (line 783)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_visible(...): (line 784)
        # Processing the call arguments (line 784)
        # Getting the type of 'False' (line 784)
        False_283652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 30), 'False', False)
        # Processing the call keyword arguments (line 784)
        kwargs_283653 = {}
        # Getting the type of 'inner' (line 784)
        inner_283650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 12), 'inner', False)
        # Obtaining the member 'set_visible' of a type (line 784)
        set_visible_283651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 12), inner_283650, 'set_visible')
        # Calling set_visible(args, kwargs) (line 784)
        set_visible_call_result_283654 = invoke(stypy.reporting.localization.Localization(__file__, 784, 12), set_visible_283651, *[False_283652], **kwargs_283653)
        
        # SSA join for if statement (line 783)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_rorigin(...): (line 786)
        # Processing the call arguments (line 786)
        # Getting the type of 'None' (line 786)
        None_283657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 25), 'None', False)
        # Processing the call keyword arguments (line 786)
        kwargs_283658 = {}
        # Getting the type of 'self' (line 786)
        self_283655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 8), 'self', False)
        # Obtaining the member 'set_rorigin' of a type (line 786)
        set_rorigin_283656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 8), self_283655, 'set_rorigin')
        # Calling set_rorigin(args, kwargs) (line 786)
        set_rorigin_call_result_283659 = invoke(stypy.reporting.localization.Localization(__file__, 786, 8), set_rorigin_283656, *[None_283657], **kwargs_283658)
        
        
        # Call to set_theta_offset(...): (line 787)
        # Processing the call arguments (line 787)
        # Getting the type of 'self' (line 787)
        self_283662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 30), 'self', False)
        # Obtaining the member '_default_theta_offset' of a type (line 787)
        _default_theta_offset_283663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 30), self_283662, '_default_theta_offset')
        # Processing the call keyword arguments (line 787)
        kwargs_283664 = {}
        # Getting the type of 'self' (line 787)
        self_283660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 8), 'self', False)
        # Obtaining the member 'set_theta_offset' of a type (line 787)
        set_theta_offset_283661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 8), self_283660, 'set_theta_offset')
        # Calling set_theta_offset(args, kwargs) (line 787)
        set_theta_offset_call_result_283665 = invoke(stypy.reporting.localization.Localization(__file__, 787, 8), set_theta_offset_283661, *[_default_theta_offset_283663], **kwargs_283664)
        
        
        # Call to set_theta_direction(...): (line 788)
        # Processing the call arguments (line 788)
        # Getting the type of 'self' (line 788)
        self_283668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 33), 'self', False)
        # Obtaining the member '_default_theta_direction' of a type (line 788)
        _default_theta_direction_283669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 33), self_283668, '_default_theta_direction')
        # Processing the call keyword arguments (line 788)
        kwargs_283670 = {}
        # Getting the type of 'self' (line 788)
        self_283666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 8), 'self', False)
        # Obtaining the member 'set_theta_direction' of a type (line 788)
        set_theta_direction_283667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 8), self_283666, 'set_theta_direction')
        # Calling set_theta_direction(args, kwargs) (line 788)
        set_theta_direction_call_result_283671 = invoke(stypy.reporting.localization.Localization(__file__, 788, 8), set_theta_direction_283667, *[_default_theta_direction_283669], **kwargs_283670)
        
        
        # ################# End of 'cla(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cla' in the type store
        # Getting the type of 'stypy_return_type' (line 768)
        stypy_return_type_283672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_283672)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cla'
        return stypy_return_type_283672


    @norecursion
    def _init_axis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_init_axis'
        module_type_store = module_type_store.open_function_context('_init_axis', 790, 4, False)
        # Assigning a type to the variable 'self' (line 791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes._init_axis.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes._init_axis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes._init_axis.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes._init_axis.__dict__.__setitem__('stypy_function_name', 'PolarAxes._init_axis')
        PolarAxes._init_axis.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes._init_axis.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes._init_axis.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes._init_axis.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes._init_axis.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes._init_axis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes._init_axis.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes._init_axis', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_init_axis', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_init_axis(...)' code ##################

        unicode_283673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 8), 'unicode', u"move this out of __init__ because non-separable axes don't use it")
        
        # Assigning a Call to a Attribute (line 792):
        
        # Assigning a Call to a Attribute (line 792):
        
        # Call to ThetaAxis(...): (line 792)
        # Processing the call arguments (line 792)
        # Getting the type of 'self' (line 792)
        self_283675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 31), 'self', False)
        # Processing the call keyword arguments (line 792)
        kwargs_283676 = {}
        # Getting the type of 'ThetaAxis' (line 792)
        ThetaAxis_283674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 21), 'ThetaAxis', False)
        # Calling ThetaAxis(args, kwargs) (line 792)
        ThetaAxis_call_result_283677 = invoke(stypy.reporting.localization.Localization(__file__, 792, 21), ThetaAxis_283674, *[self_283675], **kwargs_283676)
        
        # Getting the type of 'self' (line 792)
        self_283678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 8), 'self')
        # Setting the type of the member 'xaxis' of a type (line 792)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 8), self_283678, 'xaxis', ThetaAxis_call_result_283677)
        
        # Assigning a Call to a Attribute (line 793):
        
        # Assigning a Call to a Attribute (line 793):
        
        # Call to RadialAxis(...): (line 793)
        # Processing the call arguments (line 793)
        # Getting the type of 'self' (line 793)
        self_283680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 32), 'self', False)
        # Processing the call keyword arguments (line 793)
        kwargs_283681 = {}
        # Getting the type of 'RadialAxis' (line 793)
        RadialAxis_283679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 21), 'RadialAxis', False)
        # Calling RadialAxis(args, kwargs) (line 793)
        RadialAxis_call_result_283682 = invoke(stypy.reporting.localization.Localization(__file__, 793, 21), RadialAxis_283679, *[self_283680], **kwargs_283681)
        
        # Getting the type of 'self' (line 793)
        self_283683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 8), 'self')
        # Setting the type of the member 'yaxis' of a type (line 793)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 8), self_283683, 'yaxis', RadialAxis_call_result_283682)
        
        # Call to _update_transScale(...): (line 798)
        # Processing the call keyword arguments (line 798)
        kwargs_283686 = {}
        # Getting the type of 'self' (line 798)
        self_283684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 8), 'self', False)
        # Obtaining the member '_update_transScale' of a type (line 798)
        _update_transScale_283685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 8), self_283684, '_update_transScale')
        # Calling _update_transScale(args, kwargs) (line 798)
        _update_transScale_call_result_283687 = invoke(stypy.reporting.localization.Localization(__file__, 798, 8), _update_transScale_283685, *[], **kwargs_283686)
        
        
        # ################# End of '_init_axis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_init_axis' in the type store
        # Getting the type of 'stypy_return_type' (line 790)
        stypy_return_type_283688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_283688)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_init_axis'
        return stypy_return_type_283688


    @norecursion
    def _set_lim_and_transforms(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_lim_and_transforms'
        module_type_store = module_type_store.open_function_context('_set_lim_and_transforms', 800, 4, False)
        # Assigning a type to the variable 'self' (line 801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 801, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes._set_lim_and_transforms.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes._set_lim_and_transforms.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes._set_lim_and_transforms.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes._set_lim_and_transforms.__dict__.__setitem__('stypy_function_name', 'PolarAxes._set_lim_and_transforms')
        PolarAxes._set_lim_and_transforms.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes._set_lim_and_transforms.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes._set_lim_and_transforms.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes._set_lim_and_transforms.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes._set_lim_and_transforms.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes._set_lim_and_transforms.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes._set_lim_and_transforms.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes._set_lim_and_transforms', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_lim_and_transforms', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_lim_and_transforms(...)' code ##################

        
        # Assigning a Call to a Attribute (line 803):
        
        # Assigning a Call to a Attribute (line 803):
        
        # Call to LockableBbox(...): (line 803)
        # Processing the call arguments (line 803)
        # Getting the type of 'self' (line 803)
        self_283691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 55), 'self', False)
        # Obtaining the member 'viewLim' of a type (line 803)
        viewLim_283692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 55), self_283691, 'viewLim')
        # Processing the call keyword arguments (line 803)
        kwargs_283693 = {}
        # Getting the type of 'mtransforms' (line 803)
        mtransforms_283689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 30), 'mtransforms', False)
        # Obtaining the member 'LockableBbox' of a type (line 803)
        LockableBbox_283690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 30), mtransforms_283689, 'LockableBbox')
        # Calling LockableBbox(args, kwargs) (line 803)
        LockableBbox_call_result_283694 = invoke(stypy.reporting.localization.Localization(__file__, 803, 30), LockableBbox_283690, *[viewLim_283692], **kwargs_283693)
        
        # Getting the type of 'self' (line 803)
        self_283695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 8), 'self')
        # Setting the type of the member '_originViewLim' of a type (line 803)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 8), self_283695, '_originViewLim', LockableBbox_call_result_283694)
        
        # Assigning a Call to a Attribute (line 806):
        
        # Assigning a Call to a Attribute (line 806):
        
        # Call to scale(...): (line 806)
        # Processing the call arguments (line 806)
        # Getting the type of 'self' (line 807)
        self_283701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 19), 'self', False)
        # Obtaining the member '_default_theta_direction' of a type (line 807)
        _default_theta_direction_283702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 19), self_283701, '_default_theta_direction')
        float_283703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 807, 50), 'float')
        # Processing the call keyword arguments (line 806)
        kwargs_283704 = {}
        
        # Call to Affine2D(...): (line 806)
        # Processing the call keyword arguments (line 806)
        kwargs_283698 = {}
        # Getting the type of 'mtransforms' (line 806)
        mtransforms_283696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 26), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 806)
        Affine2D_283697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 26), mtransforms_283696, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 806)
        Affine2D_call_result_283699 = invoke(stypy.reporting.localization.Localization(__file__, 806, 26), Affine2D_283697, *[], **kwargs_283698)
        
        # Obtaining the member 'scale' of a type (line 806)
        scale_283700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 26), Affine2D_call_result_283699, 'scale')
        # Calling scale(args, kwargs) (line 806)
        scale_call_result_283705 = invoke(stypy.reporting.localization.Localization(__file__, 806, 26), scale_283700, *[_default_theta_direction_283702, float_283703], **kwargs_283704)
        
        # Getting the type of 'self' (line 806)
        self_283706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 8), 'self')
        # Setting the type of the member '_direction' of a type (line 806)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 8), self_283706, '_direction', scale_call_result_283705)
        
        # Assigning a Call to a Attribute (line 808):
        
        # Assigning a Call to a Attribute (line 808):
        
        # Call to translate(...): (line 808)
        # Processing the call arguments (line 808)
        # Getting the type of 'self' (line 809)
        self_283712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 23), 'self', False)
        # Obtaining the member '_default_theta_offset' of a type (line 809)
        _default_theta_offset_283713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 23), self_283712, '_default_theta_offset')
        float_283714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 51), 'float')
        # Processing the call keyword arguments (line 808)
        kwargs_283715 = {}
        
        # Call to Affine2D(...): (line 808)
        # Processing the call keyword arguments (line 808)
        kwargs_283709 = {}
        # Getting the type of 'mtransforms' (line 808)
        mtransforms_283707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 29), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 808)
        Affine2D_283708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 29), mtransforms_283707, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 808)
        Affine2D_call_result_283710 = invoke(stypy.reporting.localization.Localization(__file__, 808, 29), Affine2D_283708, *[], **kwargs_283709)
        
        # Obtaining the member 'translate' of a type (line 808)
        translate_283711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 29), Affine2D_call_result_283710, 'translate')
        # Calling translate(args, kwargs) (line 808)
        translate_call_result_283716 = invoke(stypy.reporting.localization.Localization(__file__, 808, 29), translate_283711, *[_default_theta_offset_283713, float_283714], **kwargs_283715)
        
        # Getting the type of 'self' (line 808)
        self_283717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 8), 'self')
        # Setting the type of the member '_theta_offset' of a type (line 808)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 8), self_283717, '_theta_offset', translate_call_result_283716)
        
        # Assigning a Call to a Attribute (line 810):
        
        # Assigning a Call to a Attribute (line 810):
        
        # Call to composite_transform_factory(...): (line 810)
        # Processing the call arguments (line 810)
        # Getting the type of 'self' (line 811)
        self_283720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 12), 'self', False)
        # Obtaining the member '_direction' of a type (line 811)
        _direction_283721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 811, 12), self_283720, '_direction')
        # Getting the type of 'self' (line 812)
        self_283722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 12), 'self', False)
        # Obtaining the member '_theta_offset' of a type (line 812)
        _theta_offset_283723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 12), self_283722, '_theta_offset')
        # Processing the call keyword arguments (line 810)
        kwargs_283724 = {}
        # Getting the type of 'mtransforms' (line 810)
        mtransforms_283718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 26), 'mtransforms', False)
        # Obtaining the member 'composite_transform_factory' of a type (line 810)
        composite_transform_factory_283719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 810, 26), mtransforms_283718, 'composite_transform_factory')
        # Calling composite_transform_factory(args, kwargs) (line 810)
        composite_transform_factory_call_result_283725 = invoke(stypy.reporting.localization.Localization(__file__, 810, 26), composite_transform_factory_283719, *[_direction_283721, _theta_offset_283723], **kwargs_283724)
        
        # Getting the type of 'self' (line 810)
        self_283726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 8), 'self')
        # Setting the type of the member 'transShift' of a type (line 810)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 810, 8), self_283726, 'transShift', composite_transform_factory_call_result_283725)
        
        # Assigning a Call to a Attribute (line 815):
        
        # Assigning a Call to a Attribute (line 815):
        
        # Call to TransformedBbox(...): (line 815)
        # Processing the call arguments (line 815)
        # Getting the type of 'self' (line 815)
        self_283729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 56), 'self', False)
        # Obtaining the member 'viewLim' of a type (line 815)
        viewLim_283730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 56), self_283729, 'viewLim')
        # Getting the type of 'self' (line 816)
        self_283731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 56), 'self', False)
        # Obtaining the member 'transShift' of a type (line 816)
        transShift_283732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 816, 56), self_283731, 'transShift')
        # Processing the call keyword arguments (line 815)
        kwargs_283733 = {}
        # Getting the type of 'mtransforms' (line 815)
        mtransforms_283727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 28), 'mtransforms', False)
        # Obtaining the member 'TransformedBbox' of a type (line 815)
        TransformedBbox_283728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 28), mtransforms_283727, 'TransformedBbox')
        # Calling TransformedBbox(args, kwargs) (line 815)
        TransformedBbox_call_result_283734 = invoke(stypy.reporting.localization.Localization(__file__, 815, 28), TransformedBbox_283728, *[viewLim_283730, transShift_283732], **kwargs_283733)
        
        # Getting the type of 'self' (line 815)
        self_283735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 8), 'self')
        # Setting the type of the member '_realViewLim' of a type (line 815)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 8), self_283735, '_realViewLim', TransformedBbox_call_result_283734)
        
        # Assigning a Call to a Attribute (line 820):
        
        # Assigning a Call to a Attribute (line 820):
        
        # Call to TransformWrapper(...): (line 820)
        # Processing the call arguments (line 820)
        
        # Call to IdentityTransform(...): (line 821)
        # Processing the call keyword arguments (line 821)
        kwargs_283740 = {}
        # Getting the type of 'mtransforms' (line 821)
        mtransforms_283738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 12), 'mtransforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 821)
        IdentityTransform_283739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 821, 12), mtransforms_283738, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 821)
        IdentityTransform_call_result_283741 = invoke(stypy.reporting.localization.Localization(__file__, 821, 12), IdentityTransform_283739, *[], **kwargs_283740)
        
        # Processing the call keyword arguments (line 820)
        kwargs_283742 = {}
        # Getting the type of 'mtransforms' (line 820)
        mtransforms_283736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 26), 'mtransforms', False)
        # Obtaining the member 'TransformWrapper' of a type (line 820)
        TransformWrapper_283737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 26), mtransforms_283736, 'TransformWrapper')
        # Calling TransformWrapper(args, kwargs) (line 820)
        TransformWrapper_call_result_283743 = invoke(stypy.reporting.localization.Localization(__file__, 820, 26), TransformWrapper_283737, *[IdentityTransform_call_result_283741], **kwargs_283742)
        
        # Getting the type of 'self' (line 820)
        self_283744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'self')
        # Setting the type of the member 'transScale' of a type (line 820)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 8), self_283744, 'transScale', TransformWrapper_call_result_283743)
        
        # Assigning a Call to a Attribute (line 826):
        
        # Assigning a Call to a Attribute (line 826):
        
        # Call to _WedgeBbox(...): (line 826)
        # Processing the call arguments (line 826)
        
        # Obtaining an instance of the builtin type 'tuple' (line 826)
        tuple_283746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 826)
        # Adding element type (line 826)
        float_283747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 35), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 35), tuple_283746, float_283747)
        # Adding element type (line 826)
        float_283748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 40), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 35), tuple_283746, float_283748)
        
        # Getting the type of 'self' (line 827)
        self_283749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 34), 'self', False)
        # Obtaining the member '_realViewLim' of a type (line 827)
        _realViewLim_283750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 34), self_283749, '_realViewLim')
        # Getting the type of 'self' (line 827)
        self_283751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 53), 'self', False)
        # Obtaining the member '_originViewLim' of a type (line 827)
        _originViewLim_283752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 53), self_283751, '_originViewLim')
        # Processing the call keyword arguments (line 826)
        kwargs_283753 = {}
        # Getting the type of '_WedgeBbox' (line 826)
        _WedgeBbox_283745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 23), '_WedgeBbox', False)
        # Calling _WedgeBbox(args, kwargs) (line 826)
        _WedgeBbox_call_result_283754 = invoke(stypy.reporting.localization.Localization(__file__, 826, 23), _WedgeBbox_283745, *[tuple_283746, _realViewLim_283750, _originViewLim_283752], **kwargs_283753)
        
        # Getting the type of 'self' (line 826)
        self_283755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'self')
        # Setting the type of the member 'axesLim' of a type (line 826)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 8), self_283755, 'axesLim', _WedgeBbox_call_result_283754)
        
        # Assigning a Call to a Attribute (line 830):
        
        # Assigning a Call to a Attribute (line 830):
        
        # Call to BboxTransformFrom(...): (line 830)
        # Processing the call arguments (line 830)
        # Getting the type of 'self' (line 830)
        self_283758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 56), 'self', False)
        # Obtaining the member 'axesLim' of a type (line 830)
        axesLim_283759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 56), self_283758, 'axesLim')
        # Processing the call keyword arguments (line 830)
        kwargs_283760 = {}
        # Getting the type of 'mtransforms' (line 830)
        mtransforms_283756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 26), 'mtransforms', False)
        # Obtaining the member 'BboxTransformFrom' of a type (line 830)
        BboxTransformFrom_283757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 26), mtransforms_283756, 'BboxTransformFrom')
        # Calling BboxTransformFrom(args, kwargs) (line 830)
        BboxTransformFrom_call_result_283761 = invoke(stypy.reporting.localization.Localization(__file__, 830, 26), BboxTransformFrom_283757, *[axesLim_283759], **kwargs_283760)
        
        # Getting the type of 'self' (line 830)
        self_283762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 8), 'self')
        # Setting the type of the member 'transWedge' of a type (line 830)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 8), self_283762, 'transWedge', BboxTransformFrom_call_result_283761)
        
        # Assigning a Call to a Attribute (line 833):
        
        # Assigning a Call to a Attribute (line 833):
        
        # Call to BboxTransformTo(...): (line 833)
        # Processing the call arguments (line 833)
        # Getting the type of 'self' (line 833)
        self_283765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 53), 'self', False)
        # Obtaining the member 'bbox' of a type (line 833)
        bbox_283766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 53), self_283765, 'bbox')
        # Processing the call keyword arguments (line 833)
        kwargs_283767 = {}
        # Getting the type of 'mtransforms' (line 833)
        mtransforms_283763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 25), 'mtransforms', False)
        # Obtaining the member 'BboxTransformTo' of a type (line 833)
        BboxTransformTo_283764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 25), mtransforms_283763, 'BboxTransformTo')
        # Calling BboxTransformTo(args, kwargs) (line 833)
        BboxTransformTo_call_result_283768 = invoke(stypy.reporting.localization.Localization(__file__, 833, 25), BboxTransformTo_283764, *[bbox_283766], **kwargs_283767)
        
        # Getting the type of 'self' (line 833)
        self_283769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 8), 'self')
        # Setting the type of the member 'transAxes' of a type (line 833)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 8), self_283769, 'transAxes', BboxTransformTo_call_result_283768)
        
        # Assigning a Call to a Attribute (line 837):
        
        # Assigning a Call to a Attribute (line 837):
        
        # Call to PolarTransform(...): (line 837)
        # Processing the call arguments (line 837)
        # Getting the type of 'self' (line 838)
        self_283772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 12), 'self', False)
        # Processing the call keyword arguments (line 837)
        # Getting the type of 'False' (line 839)
        False_283773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 36), 'False', False)
        keyword_283774 = False_283773
        kwargs_283775 = {'_apply_theta_transforms': keyword_283774}
        # Getting the type of 'self' (line 837)
        self_283770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 31), 'self', False)
        # Obtaining the member 'PolarTransform' of a type (line 837)
        PolarTransform_283771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 31), self_283770, 'PolarTransform')
        # Calling PolarTransform(args, kwargs) (line 837)
        PolarTransform_call_result_283776 = invoke(stypy.reporting.localization.Localization(__file__, 837, 31), PolarTransform_283771, *[self_283772], **kwargs_283775)
        
        # Getting the type of 'self' (line 837)
        self_283777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 8), 'self')
        # Setting the type of the member 'transProjection' of a type (line 837)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 8), self_283777, 'transProjection', PolarTransform_call_result_283776)
        
        # Call to set_children(...): (line 841)
        # Processing the call arguments (line 841)
        # Getting the type of 'self' (line 841)
        self_283781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 42), 'self', False)
        # Obtaining the member '_originViewLim' of a type (line 841)
        _originViewLim_283782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 42), self_283781, '_originViewLim')
        # Processing the call keyword arguments (line 841)
        kwargs_283783 = {}
        # Getting the type of 'self' (line 841)
        self_283778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 8), 'self', False)
        # Obtaining the member 'transProjection' of a type (line 841)
        transProjection_283779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 8), self_283778, 'transProjection')
        # Obtaining the member 'set_children' of a type (line 841)
        set_children_283780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 8), transProjection_283779, 'set_children')
        # Calling set_children(args, kwargs) (line 841)
        set_children_call_result_283784 = invoke(stypy.reporting.localization.Localization(__file__, 841, 8), set_children_283780, *[_originViewLim_283782], **kwargs_283783)
        
        
        # Assigning a Call to a Attribute (line 845):
        
        # Assigning a Call to a Attribute (line 845):
        
        # Call to PolarAffine(...): (line 845)
        # Processing the call arguments (line 845)
        # Getting the type of 'self' (line 845)
        self_283787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 54), 'self', False)
        # Obtaining the member 'transScale' of a type (line 845)
        transScale_283788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 54), self_283787, 'transScale')
        # Getting the type of 'self' (line 846)
        self_283789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 54), 'self', False)
        # Obtaining the member '_originViewLim' of a type (line 846)
        _originViewLim_283790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 846, 54), self_283789, '_originViewLim')
        # Processing the call keyword arguments (line 845)
        kwargs_283791 = {}
        # Getting the type of 'self' (line 845)
        self_283785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 37), 'self', False)
        # Obtaining the member 'PolarAffine' of a type (line 845)
        PolarAffine_283786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 37), self_283785, 'PolarAffine')
        # Calling PolarAffine(args, kwargs) (line 845)
        PolarAffine_call_result_283792 = invoke(stypy.reporting.localization.Localization(__file__, 845, 37), PolarAffine_283786, *[transScale_283788, _originViewLim_283790], **kwargs_283791)
        
        # Getting the type of 'self' (line 845)
        self_283793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 8), 'self')
        # Setting the type of the member 'transProjectionAffine' of a type (line 845)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 8), self_283793, 'transProjectionAffine', PolarAffine_call_result_283792)
        
        # Assigning a BinOp to a Attribute (line 850):
        
        # Assigning a BinOp to a Attribute (line 850):
        # Getting the type of 'self' (line 851)
        self_283794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 12), 'self')
        # Obtaining the member 'transScale' of a type (line 851)
        transScale_283795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 12), self_283794, 'transScale')
        # Getting the type of 'self' (line 851)
        self_283796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 30), 'self')
        # Obtaining the member 'transShift' of a type (line 851)
        transShift_283797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 30), self_283796, 'transShift')
        # Applying the binary operator '+' (line 851)
        result_add_283798 = python_operator(stypy.reporting.localization.Localization(__file__, 851, 12), '+', transScale_283795, transShift_283797)
        
        # Getting the type of 'self' (line 851)
        self_283799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 48), 'self')
        # Obtaining the member 'transProjection' of a type (line 851)
        transProjection_283800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 48), self_283799, 'transProjection')
        # Applying the binary operator '+' (line 851)
        result_add_283801 = python_operator(stypy.reporting.localization.Localization(__file__, 851, 46), '+', result_add_283798, transProjection_283800)
        
        # Getting the type of 'self' (line 852)
        self_283802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 13), 'self')
        # Obtaining the member 'transProjectionAffine' of a type (line 852)
        transProjectionAffine_283803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 13), self_283802, 'transProjectionAffine')
        # Getting the type of 'self' (line 852)
        self_283804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 42), 'self')
        # Obtaining the member 'transWedge' of a type (line 852)
        transWedge_283805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 42), self_283804, 'transWedge')
        # Applying the binary operator '+' (line 852)
        result_add_283806 = python_operator(stypy.reporting.localization.Localization(__file__, 852, 13), '+', transProjectionAffine_283803, transWedge_283805)
        
        # Getting the type of 'self' (line 852)
        self_283807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 60), 'self')
        # Obtaining the member 'transAxes' of a type (line 852)
        transAxes_283808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 60), self_283807, 'transAxes')
        # Applying the binary operator '+' (line 852)
        result_add_283809 = python_operator(stypy.reporting.localization.Localization(__file__, 852, 58), '+', result_add_283806, transAxes_283808)
        
        # Applying the binary operator '+' (line 851)
        result_add_283810 = python_operator(stypy.reporting.localization.Localization(__file__, 851, 69), '+', result_add_283801, result_add_283809)
        
        # Getting the type of 'self' (line 850)
        self_283811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 8), 'self')
        # Setting the type of the member 'transData' of a type (line 850)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 850, 8), self_283811, 'transData', result_add_283810)
        
        # Assigning a BinOp to a Attribute (line 857):
        
        # Assigning a BinOp to a Attribute (line 857):
        
        # Call to blended_transform_factory(...): (line 858)
        # Processing the call arguments (line 858)
        
        # Call to IdentityTransform(...): (line 859)
        # Processing the call keyword arguments (line 859)
        kwargs_283816 = {}
        # Getting the type of 'mtransforms' (line 859)
        mtransforms_283814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 16), 'mtransforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 859)
        IdentityTransform_283815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 859, 16), mtransforms_283814, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 859)
        IdentityTransform_call_result_283817 = invoke(stypy.reporting.localization.Localization(__file__, 859, 16), IdentityTransform_283815, *[], **kwargs_283816)
        
        
        # Call to BboxTransformTo(...): (line 860)
        # Processing the call arguments (line 860)
        # Getting the type of 'self' (line 860)
        self_283820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 44), 'self', False)
        # Obtaining the member 'viewLim' of a type (line 860)
        viewLim_283821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 860, 44), self_283820, 'viewLim')
        # Processing the call keyword arguments (line 860)
        kwargs_283822 = {}
        # Getting the type of 'mtransforms' (line 860)
        mtransforms_283818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 16), 'mtransforms', False)
        # Obtaining the member 'BboxTransformTo' of a type (line 860)
        BboxTransformTo_283819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 860, 16), mtransforms_283818, 'BboxTransformTo')
        # Calling BboxTransformTo(args, kwargs) (line 860)
        BboxTransformTo_call_result_283823 = invoke(stypy.reporting.localization.Localization(__file__, 860, 16), BboxTransformTo_283819, *[viewLim_283821], **kwargs_283822)
        
        # Processing the call keyword arguments (line 858)
        kwargs_283824 = {}
        # Getting the type of 'mtransforms' (line 858)
        mtransforms_283812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 12), 'mtransforms', False)
        # Obtaining the member 'blended_transform_factory' of a type (line 858)
        blended_transform_factory_283813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 858, 12), mtransforms_283812, 'blended_transform_factory')
        # Calling blended_transform_factory(args, kwargs) (line 858)
        blended_transform_factory_call_result_283825 = invoke(stypy.reporting.localization.Localization(__file__, 858, 12), blended_transform_factory_283813, *[IdentityTransform_call_result_283817, BboxTransformTo_call_result_283823], **kwargs_283824)
        
        # Getting the type of 'self' (line 861)
        self_283826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 12), 'self')
        # Obtaining the member 'transData' of a type (line 861)
        transData_283827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 12), self_283826, 'transData')
        # Applying the binary operator '+' (line 858)
        result_add_283828 = python_operator(stypy.reporting.localization.Localization(__file__, 858, 12), '+', blended_transform_factory_call_result_283825, transData_283827)
        
        # Getting the type of 'self' (line 857)
        self_283829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 8), 'self')
        # Setting the type of the member '_xaxis_transform' of a type (line 857)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 857, 8), self_283829, '_xaxis_transform', result_add_283828)
        
        # Assigning a Call to a Name (line 864):
        
        # Assigning a Call to a Name (line 864):
        
        # Call to translate(...): (line 864)
        # Processing the call arguments (line 864)
        float_283845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 867, 23), 'float')
        float_283846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 867, 28), 'float')
        # Processing the call keyword arguments (line 864)
        kwargs_283847 = {}
        
        # Call to scale(...): (line 864)
        # Processing the call arguments (line 864)
        float_283840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 866, 19), 'float')
        float_283841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 866, 24), 'float')
        # Processing the call keyword arguments (line 864)
        kwargs_283842 = {}
        
        # Call to translate(...): (line 864)
        # Processing the call arguments (line 864)
        float_283835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 865, 23), 'float')
        float_283836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 865, 28), 'float')
        # Processing the call keyword arguments (line 864)
        kwargs_283837 = {}
        
        # Call to Affine2D(...): (line 864)
        # Processing the call keyword arguments (line 864)
        kwargs_283832 = {}
        # Getting the type of 'mtransforms' (line 864)
        mtransforms_283830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 26), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 864)
        Affine2D_283831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 26), mtransforms_283830, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 864)
        Affine2D_call_result_283833 = invoke(stypy.reporting.localization.Localization(__file__, 864, 26), Affine2D_283831, *[], **kwargs_283832)
        
        # Obtaining the member 'translate' of a type (line 864)
        translate_283834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 26), Affine2D_call_result_283833, 'translate')
        # Calling translate(args, kwargs) (line 864)
        translate_call_result_283838 = invoke(stypy.reporting.localization.Localization(__file__, 864, 26), translate_283834, *[float_283835, float_283836], **kwargs_283837)
        
        # Obtaining the member 'scale' of a type (line 864)
        scale_283839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 26), translate_call_result_283838, 'scale')
        # Calling scale(args, kwargs) (line 864)
        scale_call_result_283843 = invoke(stypy.reporting.localization.Localization(__file__, 864, 26), scale_283839, *[float_283840, float_283841], **kwargs_283842)
        
        # Obtaining the member 'translate' of a type (line 864)
        translate_283844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 26), scale_call_result_283843, 'translate')
        # Calling translate(args, kwargs) (line 864)
        translate_call_result_283848 = invoke(stypy.reporting.localization.Localization(__file__, 864, 26), translate_283844, *[float_283845, float_283846], **kwargs_283847)
        
        # Assigning a type to the variable 'flipr_transform' (line 864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 864, 8), 'flipr_transform', translate_call_result_283848)
        
        # Assigning a BinOp to a Attribute (line 868):
        
        # Assigning a BinOp to a Attribute (line 868):
        # Getting the type of 'flipr_transform' (line 868)
        flipr_transform_283849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 37), 'flipr_transform')
        # Getting the type of 'self' (line 868)
        self_283850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 55), 'self')
        # Obtaining the member '_xaxis_transform' of a type (line 868)
        _xaxis_transform_283851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 55), self_283850, '_xaxis_transform')
        # Applying the binary operator '+' (line 868)
        result_add_283852 = python_operator(stypy.reporting.localization.Localization(__file__, 868, 37), '+', flipr_transform_283849, _xaxis_transform_283851)
        
        # Getting the type of 'self' (line 868)
        self_283853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 8), 'self')
        # Setting the type of the member '_xaxis_text_transform' of a type (line 868)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 8), self_283853, '_xaxis_text_transform', result_add_283852)
        
        # Assigning a BinOp to a Attribute (line 873):
        
        # Assigning a BinOp to a Attribute (line 873):
        
        # Call to blended_transform_factory(...): (line 874)
        # Processing the call arguments (line 874)
        
        # Call to BboxTransformTo(...): (line 875)
        # Processing the call arguments (line 875)
        # Getting the type of 'self' (line 875)
        self_283858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 44), 'self', False)
        # Obtaining the member 'viewLim' of a type (line 875)
        viewLim_283859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 875, 44), self_283858, 'viewLim')
        # Processing the call keyword arguments (line 875)
        kwargs_283860 = {}
        # Getting the type of 'mtransforms' (line 875)
        mtransforms_283856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 16), 'mtransforms', False)
        # Obtaining the member 'BboxTransformTo' of a type (line 875)
        BboxTransformTo_283857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 875, 16), mtransforms_283856, 'BboxTransformTo')
        # Calling BboxTransformTo(args, kwargs) (line 875)
        BboxTransformTo_call_result_283861 = invoke(stypy.reporting.localization.Localization(__file__, 875, 16), BboxTransformTo_283857, *[viewLim_283859], **kwargs_283860)
        
        
        # Call to IdentityTransform(...): (line 876)
        # Processing the call keyword arguments (line 876)
        kwargs_283864 = {}
        # Getting the type of 'mtransforms' (line 876)
        mtransforms_283862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 16), 'mtransforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 876)
        IdentityTransform_283863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 16), mtransforms_283862, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 876)
        IdentityTransform_call_result_283865 = invoke(stypy.reporting.localization.Localization(__file__, 876, 16), IdentityTransform_283863, *[], **kwargs_283864)
        
        # Processing the call keyword arguments (line 874)
        kwargs_283866 = {}
        # Getting the type of 'mtransforms' (line 874)
        mtransforms_283854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 12), 'mtransforms', False)
        # Obtaining the member 'blended_transform_factory' of a type (line 874)
        blended_transform_factory_283855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 874, 12), mtransforms_283854, 'blended_transform_factory')
        # Calling blended_transform_factory(args, kwargs) (line 874)
        blended_transform_factory_call_result_283867 = invoke(stypy.reporting.localization.Localization(__file__, 874, 12), blended_transform_factory_283855, *[BboxTransformTo_call_result_283861, IdentityTransform_call_result_283865], **kwargs_283866)
        
        # Getting the type of 'self' (line 877)
        self_283868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 12), 'self')
        # Obtaining the member 'transData' of a type (line 877)
        transData_283869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 12), self_283868, 'transData')
        # Applying the binary operator '+' (line 874)
        result_add_283870 = python_operator(stypy.reporting.localization.Localization(__file__, 874, 12), '+', blended_transform_factory_call_result_283867, transData_283869)
        
        # Getting the type of 'self' (line 873)
        self_283871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'self')
        # Setting the type of the member '_yaxis_transform' of a type (line 873)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 8), self_283871, '_yaxis_transform', result_add_283870)
        
        # Assigning a Call to a Attribute (line 879):
        
        # Assigning a Call to a Attribute (line 879):
        
        # Call to translate(...): (line 879)
        # Processing the call arguments (line 879)
        # Getting the type of 'self' (line 880)
        self_283877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 23), 'self', False)
        # Obtaining the member '_default_rlabel_position' of a type (line 880)
        _default_rlabel_position_283878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 880, 23), self_283877, '_default_rlabel_position')
        float_283879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, 54), 'float')
        # Processing the call keyword arguments (line 879)
        kwargs_283880 = {}
        
        # Call to Affine2D(...): (line 879)
        # Processing the call keyword arguments (line 879)
        kwargs_283874 = {}
        # Getting the type of 'mtransforms' (line 879)
        mtransforms_283872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 33), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 879)
        Affine2D_283873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 33), mtransforms_283872, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 879)
        Affine2D_call_result_283875 = invoke(stypy.reporting.localization.Localization(__file__, 879, 33), Affine2D_283873, *[], **kwargs_283874)
        
        # Obtaining the member 'translate' of a type (line 879)
        translate_283876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 33), Affine2D_call_result_283875, 'translate')
        # Calling translate(args, kwargs) (line 879)
        translate_call_result_283881 = invoke(stypy.reporting.localization.Localization(__file__, 879, 33), translate_283876, *[_default_rlabel_position_283878, float_283879], **kwargs_283880)
        
        # Getting the type of 'self' (line 879)
        self_283882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 8), 'self')
        # Setting the type of the member '_r_label_position' of a type (line 879)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 8), self_283882, '_r_label_position', translate_call_result_283881)
        
        # Assigning a Call to a Attribute (line 881):
        
        # Assigning a Call to a Attribute (line 881):
        
        # Call to TransformWrapper(...): (line 881)
        # Processing the call arguments (line 881)
        # Getting the type of 'self' (line 882)
        self_283885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 12), 'self', False)
        # Obtaining the member '_r_label_position' of a type (line 882)
        _r_label_position_283886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 12), self_283885, '_r_label_position')
        # Getting the type of 'self' (line 882)
        self_283887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 37), 'self', False)
        # Obtaining the member 'transData' of a type (line 882)
        transData_283888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 37), self_283887, 'transData')
        # Applying the binary operator '+' (line 882)
        result_add_283889 = python_operator(stypy.reporting.localization.Localization(__file__, 882, 12), '+', _r_label_position_283886, transData_283888)
        
        # Processing the call keyword arguments (line 881)
        kwargs_283890 = {}
        # Getting the type of 'mtransforms' (line 881)
        mtransforms_283883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 37), 'mtransforms', False)
        # Obtaining the member 'TransformWrapper' of a type (line 881)
        TransformWrapper_283884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 37), mtransforms_283883, 'TransformWrapper')
        # Calling TransformWrapper(args, kwargs) (line 881)
        TransformWrapper_call_result_283891 = invoke(stypy.reporting.localization.Localization(__file__, 881, 37), TransformWrapper_283884, *[result_add_283889], **kwargs_283890)
        
        # Getting the type of 'self' (line 881)
        self_283892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 8), 'self')
        # Setting the type of the member '_yaxis_text_transform' of a type (line 881)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 8), self_283892, '_yaxis_text_transform', TransformWrapper_call_result_283891)
        
        # ################# End of '_set_lim_and_transforms(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_lim_and_transforms' in the type store
        # Getting the type of 'stypy_return_type' (line 800)
        stypy_return_type_283893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_283893)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_lim_and_transforms'
        return stypy_return_type_283893


    @norecursion
    def get_xaxis_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_283894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 40), 'unicode', u'grid')
        defaults = [unicode_283894]
        # Create a new context for function 'get_xaxis_transform'
        module_type_store = module_type_store.open_function_context('get_xaxis_transform', 884, 4, False)
        # Assigning a type to the variable 'self' (line 885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.get_xaxis_transform.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.get_xaxis_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.get_xaxis_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.get_xaxis_transform.__dict__.__setitem__('stypy_function_name', 'PolarAxes.get_xaxis_transform')
        PolarAxes.get_xaxis_transform.__dict__.__setitem__('stypy_param_names_list', ['which'])
        PolarAxes.get_xaxis_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.get_xaxis_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.get_xaxis_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.get_xaxis_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.get_xaxis_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.get_xaxis_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.get_xaxis_transform', ['which'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xaxis_transform', localization, ['which'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xaxis_transform(...)' code ##################

        
        
        # Getting the type of 'which' (line 885)
        which_283895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 11), 'which')
        
        # Obtaining an instance of the builtin type 'list' (line 885)
        list_283896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 885)
        # Adding element type (line 885)
        unicode_283897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 25), 'unicode', u'tick1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 885, 24), list_283896, unicode_283897)
        # Adding element type (line 885)
        unicode_283898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 34), 'unicode', u'tick2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 885, 24), list_283896, unicode_283898)
        # Adding element type (line 885)
        unicode_283899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 43), 'unicode', u'grid')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 885, 24), list_283896, unicode_283899)
        
        # Applying the binary operator 'notin' (line 885)
        result_contains_283900 = python_operator(stypy.reporting.localization.Localization(__file__, 885, 11), 'notin', which_283895, list_283896)
        
        # Testing the type of an if condition (line 885)
        if_condition_283901 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 885, 8), result_contains_283900)
        # Assigning a type to the variable 'if_condition_283901' (line 885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 8), 'if_condition_283901', if_condition_283901)
        # SSA begins for if statement (line 885)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 886):
        
        # Assigning a Str to a Name (line 886):
        unicode_283902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 886, 18), 'unicode', u"'which' must be one of [ 'tick1' | 'tick2' | 'grid' ]")
        # Assigning a type to the variable 'msg' (line 886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 12), 'msg', unicode_283902)
        
        # Call to ValueError(...): (line 887)
        # Processing the call arguments (line 887)
        # Getting the type of 'msg' (line 887)
        msg_283904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 29), 'msg', False)
        # Processing the call keyword arguments (line 887)
        kwargs_283905 = {}
        # Getting the type of 'ValueError' (line 887)
        ValueError_283903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 887)
        ValueError_call_result_283906 = invoke(stypy.reporting.localization.Localization(__file__, 887, 18), ValueError_283903, *[msg_283904], **kwargs_283905)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 887, 12), ValueError_call_result_283906, 'raise parameter', BaseException)
        # SSA join for if statement (line 885)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 888)
        self_283907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 15), 'self')
        # Obtaining the member '_xaxis_transform' of a type (line 888)
        _xaxis_transform_283908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 15), self_283907, '_xaxis_transform')
        # Assigning a type to the variable 'stypy_return_type' (line 888)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 888, 8), 'stypy_return_type', _xaxis_transform_283908)
        
        # ################# End of 'get_xaxis_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xaxis_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 884)
        stypy_return_type_283909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_283909)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xaxis_transform'
        return stypy_return_type_283909


    @norecursion
    def get_xaxis_text1_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_xaxis_text1_transform'
        module_type_store = module_type_store.open_function_context('get_xaxis_text1_transform', 890, 4, False)
        # Assigning a type to the variable 'self' (line 891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.get_xaxis_text1_transform.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.get_xaxis_text1_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.get_xaxis_text1_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.get_xaxis_text1_transform.__dict__.__setitem__('stypy_function_name', 'PolarAxes.get_xaxis_text1_transform')
        PolarAxes.get_xaxis_text1_transform.__dict__.__setitem__('stypy_param_names_list', ['pad'])
        PolarAxes.get_xaxis_text1_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.get_xaxis_text1_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.get_xaxis_text1_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.get_xaxis_text1_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.get_xaxis_text1_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.get_xaxis_text1_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.get_xaxis_text1_transform', ['pad'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xaxis_text1_transform', localization, ['pad'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xaxis_text1_transform(...)' code ##################

        
        
        # Call to _is_full_circle_rad(...): (line 891)
        # Getting the type of 'self' (line 891)
        self_283911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 32), 'self', False)
        # Obtaining the member '_realViewLim' of a type (line 891)
        _realViewLim_283912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 32), self_283911, '_realViewLim')
        # Obtaining the member 'intervalx' of a type (line 891)
        intervalx_283913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 32), _realViewLim_283912, 'intervalx')
        # Processing the call keyword arguments (line 891)
        kwargs_283914 = {}
        # Getting the type of '_is_full_circle_rad' (line 891)
        _is_full_circle_rad_283910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 11), '_is_full_circle_rad', False)
        # Calling _is_full_circle_rad(args, kwargs) (line 891)
        _is_full_circle_rad_call_result_283915 = invoke(stypy.reporting.localization.Localization(__file__, 891, 11), _is_full_circle_rad_283910, *[intervalx_283913], **kwargs_283914)
        
        # Testing the type of an if condition (line 891)
        if_condition_283916 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 891, 8), _is_full_circle_rad_call_result_283915)
        # Assigning a type to the variable 'if_condition_283916' (line 891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 8), 'if_condition_283916', if_condition_283916)
        # SSA begins for if statement (line 891)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 892)
        tuple_283917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 892)
        # Adding element type (line 892)
        # Getting the type of 'self' (line 892)
        self_283918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 19), 'self')
        # Obtaining the member '_xaxis_text_transform' of a type (line 892)
        _xaxis_text_transform_283919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 19), self_283918, '_xaxis_text_transform')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 892, 19), tuple_283917, _xaxis_text_transform_283919)
        # Adding element type (line 892)
        unicode_283920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 47), 'unicode', u'center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 892, 19), tuple_283917, unicode_283920)
        # Adding element type (line 892)
        unicode_283921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 57), 'unicode', u'center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 892, 19), tuple_283917, unicode_283921)
        
        # Assigning a type to the variable 'stypy_return_type' (line 892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 12), 'stypy_return_type', tuple_283917)
        # SSA branch for the else part of an if statement (line 891)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 894)
        tuple_283922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 894, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 894)
        # Adding element type (line 894)
        # Getting the type of 'self' (line 894)
        self_283923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 19), 'self')
        # Obtaining the member '_xaxis_text_transform' of a type (line 894)
        _xaxis_text_transform_283924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 19), self_283923, '_xaxis_text_transform')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 894, 19), tuple_283922, _xaxis_text_transform_283924)
        # Adding element type (line 894)
        unicode_283925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 894, 47), 'unicode', u'bottom')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 894, 19), tuple_283922, unicode_283925)
        # Adding element type (line 894)
        unicode_283926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 894, 57), 'unicode', u'center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 894, 19), tuple_283922, unicode_283926)
        
        # Assigning a type to the variable 'stypy_return_type' (line 894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 894, 12), 'stypy_return_type', tuple_283922)
        # SSA join for if statement (line 891)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_xaxis_text1_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xaxis_text1_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 890)
        stypy_return_type_283927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_283927)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xaxis_text1_transform'
        return stypy_return_type_283927


    @norecursion
    def get_xaxis_text2_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_xaxis_text2_transform'
        module_type_store = module_type_store.open_function_context('get_xaxis_text2_transform', 896, 4, False)
        # Assigning a type to the variable 'self' (line 897)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 897, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.get_xaxis_text2_transform.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.get_xaxis_text2_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.get_xaxis_text2_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.get_xaxis_text2_transform.__dict__.__setitem__('stypy_function_name', 'PolarAxes.get_xaxis_text2_transform')
        PolarAxes.get_xaxis_text2_transform.__dict__.__setitem__('stypy_param_names_list', ['pad'])
        PolarAxes.get_xaxis_text2_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.get_xaxis_text2_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.get_xaxis_text2_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.get_xaxis_text2_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.get_xaxis_text2_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.get_xaxis_text2_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.get_xaxis_text2_transform', ['pad'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xaxis_text2_transform', localization, ['pad'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xaxis_text2_transform(...)' code ##################

        
        
        # Call to _is_full_circle_rad(...): (line 897)
        # Getting the type of 'self' (line 897)
        self_283929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 32), 'self', False)
        # Obtaining the member '_realViewLim' of a type (line 897)
        _realViewLim_283930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 897, 32), self_283929, '_realViewLim')
        # Obtaining the member 'intervalx' of a type (line 897)
        intervalx_283931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 897, 32), _realViewLim_283930, 'intervalx')
        # Processing the call keyword arguments (line 897)
        kwargs_283932 = {}
        # Getting the type of '_is_full_circle_rad' (line 897)
        _is_full_circle_rad_283928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 11), '_is_full_circle_rad', False)
        # Calling _is_full_circle_rad(args, kwargs) (line 897)
        _is_full_circle_rad_call_result_283933 = invoke(stypy.reporting.localization.Localization(__file__, 897, 11), _is_full_circle_rad_283928, *[intervalx_283931], **kwargs_283932)
        
        # Testing the type of an if condition (line 897)
        if_condition_283934 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 897, 8), _is_full_circle_rad_call_result_283933)
        # Assigning a type to the variable 'if_condition_283934' (line 897)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 897, 8), 'if_condition_283934', if_condition_283934)
        # SSA begins for if statement (line 897)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 898)
        tuple_283935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 898, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 898)
        # Adding element type (line 898)
        # Getting the type of 'self' (line 898)
        self_283936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 19), 'self')
        # Obtaining the member '_xaxis_text_transform' of a type (line 898)
        _xaxis_text_transform_283937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 19), self_283936, '_xaxis_text_transform')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 898, 19), tuple_283935, _xaxis_text_transform_283937)
        # Adding element type (line 898)
        unicode_283938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 898, 47), 'unicode', u'center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 898, 19), tuple_283935, unicode_283938)
        # Adding element type (line 898)
        unicode_283939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 898, 57), 'unicode', u'center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 898, 19), tuple_283935, unicode_283939)
        
        # Assigning a type to the variable 'stypy_return_type' (line 898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 898, 12), 'stypy_return_type', tuple_283935)
        # SSA branch for the else part of an if statement (line 897)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 900)
        tuple_283940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 900, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 900)
        # Adding element type (line 900)
        # Getting the type of 'self' (line 900)
        self_283941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 19), 'self')
        # Obtaining the member '_xaxis_text_transform' of a type (line 900)
        _xaxis_text_transform_283942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 19), self_283941, '_xaxis_text_transform')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 900, 19), tuple_283940, _xaxis_text_transform_283942)
        # Adding element type (line 900)
        unicode_283943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 900, 47), 'unicode', u'top')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 900, 19), tuple_283940, unicode_283943)
        # Adding element type (line 900)
        unicode_283944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 900, 54), 'unicode', u'center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 900, 19), tuple_283940, unicode_283944)
        
        # Assigning a type to the variable 'stypy_return_type' (line 900)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 12), 'stypy_return_type', tuple_283940)
        # SSA join for if statement (line 897)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_xaxis_text2_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xaxis_text2_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 896)
        stypy_return_type_283945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_283945)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xaxis_text2_transform'
        return stypy_return_type_283945


    @norecursion
    def get_yaxis_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_283946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 902, 40), 'unicode', u'grid')
        defaults = [unicode_283946]
        # Create a new context for function 'get_yaxis_transform'
        module_type_store = module_type_store.open_function_context('get_yaxis_transform', 902, 4, False)
        # Assigning a type to the variable 'self' (line 903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.get_yaxis_transform.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.get_yaxis_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.get_yaxis_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.get_yaxis_transform.__dict__.__setitem__('stypy_function_name', 'PolarAxes.get_yaxis_transform')
        PolarAxes.get_yaxis_transform.__dict__.__setitem__('stypy_param_names_list', ['which'])
        PolarAxes.get_yaxis_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.get_yaxis_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.get_yaxis_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.get_yaxis_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.get_yaxis_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.get_yaxis_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.get_yaxis_transform', ['which'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_yaxis_transform', localization, ['which'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_yaxis_transform(...)' code ##################

        
        
        # Getting the type of 'which' (line 903)
        which_283947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 11), 'which')
        
        # Obtaining an instance of the builtin type 'tuple' (line 903)
        tuple_283948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 903)
        # Adding element type (line 903)
        unicode_283949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, 21), 'unicode', u'tick1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 903, 21), tuple_283948, unicode_283949)
        # Adding element type (line 903)
        unicode_283950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, 30), 'unicode', u'tick2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 903, 21), tuple_283948, unicode_283950)
        
        # Applying the binary operator 'in' (line 903)
        result_contains_283951 = python_operator(stypy.reporting.localization.Localization(__file__, 903, 11), 'in', which_283947, tuple_283948)
        
        # Testing the type of an if condition (line 903)
        if_condition_283952 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 903, 8), result_contains_283951)
        # Assigning a type to the variable 'if_condition_283952' (line 903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 8), 'if_condition_283952', if_condition_283952)
        # SSA begins for if statement (line 903)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 904)
        self_283953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 19), 'self')
        # Obtaining the member '_yaxis_text_transform' of a type (line 904)
        _yaxis_text_transform_283954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 904, 19), self_283953, '_yaxis_text_transform')
        # Assigning a type to the variable 'stypy_return_type' (line 904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 12), 'stypy_return_type', _yaxis_text_transform_283954)
        # SSA branch for the else part of an if statement (line 903)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'which' (line 905)
        which_283955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 13), 'which')
        unicode_283956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 22), 'unicode', u'grid')
        # Applying the binary operator '==' (line 905)
        result_eq_283957 = python_operator(stypy.reporting.localization.Localization(__file__, 905, 13), '==', which_283955, unicode_283956)
        
        # Testing the type of an if condition (line 905)
        if_condition_283958 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 905, 13), result_eq_283957)
        # Assigning a type to the variable 'if_condition_283958' (line 905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 13), 'if_condition_283958', if_condition_283958)
        # SSA begins for if statement (line 905)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 906)
        self_283959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 19), 'self')
        # Obtaining the member '_yaxis_transform' of a type (line 906)
        _yaxis_transform_283960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 906, 19), self_283959, '_yaxis_transform')
        # Assigning a type to the variable 'stypy_return_type' (line 906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 906, 12), 'stypy_return_type', _yaxis_transform_283960)
        # SSA branch for the else part of an if statement (line 905)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 908):
        
        # Assigning a Str to a Name (line 908):
        unicode_283961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, 18), 'unicode', u"'which' must be on of [ 'tick1' | 'tick2' | 'grid' ]")
        # Assigning a type to the variable 'msg' (line 908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 12), 'msg', unicode_283961)
        
        # Call to ValueError(...): (line 909)
        # Processing the call arguments (line 909)
        # Getting the type of 'msg' (line 909)
        msg_283963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 29), 'msg', False)
        # Processing the call keyword arguments (line 909)
        kwargs_283964 = {}
        # Getting the type of 'ValueError' (line 909)
        ValueError_283962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 909)
        ValueError_call_result_283965 = invoke(stypy.reporting.localization.Localization(__file__, 909, 18), ValueError_283962, *[msg_283963], **kwargs_283964)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 909, 12), ValueError_call_result_283965, 'raise parameter', BaseException)
        # SSA join for if statement (line 905)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 903)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_yaxis_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_yaxis_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 902)
        stypy_return_type_283966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_283966)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_yaxis_transform'
        return stypy_return_type_283966


    @norecursion
    def get_yaxis_text1_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_yaxis_text1_transform'
        module_type_store = module_type_store.open_function_context('get_yaxis_text1_transform', 911, 4, False)
        # Assigning a type to the variable 'self' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.get_yaxis_text1_transform.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.get_yaxis_text1_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.get_yaxis_text1_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.get_yaxis_text1_transform.__dict__.__setitem__('stypy_function_name', 'PolarAxes.get_yaxis_text1_transform')
        PolarAxes.get_yaxis_text1_transform.__dict__.__setitem__('stypy_param_names_list', ['pad'])
        PolarAxes.get_yaxis_text1_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.get_yaxis_text1_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.get_yaxis_text1_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.get_yaxis_text1_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.get_yaxis_text1_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.get_yaxis_text1_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.get_yaxis_text1_transform', ['pad'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_yaxis_text1_transform', localization, ['pad'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_yaxis_text1_transform(...)' code ##################

        
        # Assigning a Attribute to a Tuple (line 912):
        
        # Assigning a Subscript to a Name (line 912):
        
        # Obtaining the type of the subscript
        int_283967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 912, 8), 'int')
        # Getting the type of 'self' (line 912)
        self_283968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 29), 'self')
        # Obtaining the member '_realViewLim' of a type (line 912)
        _realViewLim_283969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 29), self_283968, '_realViewLim')
        # Obtaining the member 'intervalx' of a type (line 912)
        intervalx_283970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 29), _realViewLim_283969, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 912)
        getitem___283971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 8), intervalx_283970, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 912)
        subscript_call_result_283972 = invoke(stypy.reporting.localization.Localization(__file__, 912, 8), getitem___283971, int_283967)
        
        # Assigning a type to the variable 'tuple_var_assignment_281137' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 8), 'tuple_var_assignment_281137', subscript_call_result_283972)
        
        # Assigning a Subscript to a Name (line 912):
        
        # Obtaining the type of the subscript
        int_283973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 912, 8), 'int')
        # Getting the type of 'self' (line 912)
        self_283974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 29), 'self')
        # Obtaining the member '_realViewLim' of a type (line 912)
        _realViewLim_283975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 29), self_283974, '_realViewLim')
        # Obtaining the member 'intervalx' of a type (line 912)
        intervalx_283976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 29), _realViewLim_283975, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 912)
        getitem___283977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 8), intervalx_283976, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 912)
        subscript_call_result_283978 = invoke(stypy.reporting.localization.Localization(__file__, 912, 8), getitem___283977, int_283973)
        
        # Assigning a type to the variable 'tuple_var_assignment_281138' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 8), 'tuple_var_assignment_281138', subscript_call_result_283978)
        
        # Assigning a Name to a Name (line 912):
        # Getting the type of 'tuple_var_assignment_281137' (line 912)
        tuple_var_assignment_281137_283979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 8), 'tuple_var_assignment_281137')
        # Assigning a type to the variable 'thetamin' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 8), 'thetamin', tuple_var_assignment_281137_283979)
        
        # Assigning a Name to a Name (line 912):
        # Getting the type of 'tuple_var_assignment_281138' (line 912)
        tuple_var_assignment_281138_283980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 8), 'tuple_var_assignment_281138')
        # Assigning a type to the variable 'thetamax' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 18), 'thetamax', tuple_var_assignment_281138_283980)
        
        
        # Call to _is_full_circle_rad(...): (line 913)
        # Processing the call arguments (line 913)
        # Getting the type of 'thetamin' (line 913)
        thetamin_283982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 31), 'thetamin', False)
        # Getting the type of 'thetamax' (line 913)
        thetamax_283983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 41), 'thetamax', False)
        # Processing the call keyword arguments (line 913)
        kwargs_283984 = {}
        # Getting the type of '_is_full_circle_rad' (line 913)
        _is_full_circle_rad_283981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 11), '_is_full_circle_rad', False)
        # Calling _is_full_circle_rad(args, kwargs) (line 913)
        _is_full_circle_rad_call_result_283985 = invoke(stypy.reporting.localization.Localization(__file__, 913, 11), _is_full_circle_rad_283981, *[thetamin_283982, thetamax_283983], **kwargs_283984)
        
        # Testing the type of an if condition (line 913)
        if_condition_283986 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 913, 8), _is_full_circle_rad_call_result_283985)
        # Assigning a type to the variable 'if_condition_283986' (line 913)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 913, 8), 'if_condition_283986', if_condition_283986)
        # SSA begins for if statement (line 913)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 914)
        tuple_283987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 914)
        # Adding element type (line 914)
        # Getting the type of 'self' (line 914)
        self_283988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 19), 'self')
        # Obtaining the member '_yaxis_text_transform' of a type (line 914)
        _yaxis_text_transform_283989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 19), self_283988, '_yaxis_text_transform')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 914, 19), tuple_283987, _yaxis_text_transform_283989)
        # Adding element type (line 914)
        unicode_283990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 47), 'unicode', u'bottom')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 914, 19), tuple_283987, unicode_283990)
        # Adding element type (line 914)
        unicode_283991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 57), 'unicode', u'left')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 914, 19), tuple_283987, unicode_283991)
        
        # Assigning a type to the variable 'stypy_return_type' (line 914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 914, 12), 'stypy_return_type', tuple_283987)
        # SSA branch for the else part of an if statement (line 913)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to get_theta_direction(...): (line 915)
        # Processing the call keyword arguments (line 915)
        kwargs_283994 = {}
        # Getting the type of 'self' (line 915)
        self_283992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 13), 'self', False)
        # Obtaining the member 'get_theta_direction' of a type (line 915)
        get_theta_direction_283993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 915, 13), self_283992, 'get_theta_direction')
        # Calling get_theta_direction(args, kwargs) (line 915)
        get_theta_direction_call_result_283995 = invoke(stypy.reporting.localization.Localization(__file__, 915, 13), get_theta_direction_283993, *[], **kwargs_283994)
        
        int_283996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, 42), 'int')
        # Applying the binary operator '>' (line 915)
        result_gt_283997 = python_operator(stypy.reporting.localization.Localization(__file__, 915, 13), '>', get_theta_direction_call_result_283995, int_283996)
        
        # Testing the type of an if condition (line 915)
        if_condition_283998 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 915, 13), result_gt_283997)
        # Assigning a type to the variable 'if_condition_283998' (line 915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 13), 'if_condition_283998', if_condition_283998)
        # SSA begins for if statement (line 915)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 916):
        
        # Assigning a Str to a Name (line 916):
        unicode_283999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 21), 'unicode', u'left')
        # Assigning a type to the variable 'halign' (line 916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 916, 12), 'halign', unicode_283999)
        
        # Assigning a Call to a Name (line 917):
        
        # Assigning a Call to a Name (line 917):
        
        # Call to _ThetaShift(...): (line 917)
        # Processing the call arguments (line 917)
        # Getting the type of 'self' (line 917)
        self_284001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 36), 'self', False)
        # Getting the type of 'pad' (line 917)
        pad_284002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 42), 'pad', False)
        unicode_284003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 917, 47), 'unicode', u'min')
        # Processing the call keyword arguments (line 917)
        kwargs_284004 = {}
        # Getting the type of '_ThetaShift' (line 917)
        _ThetaShift_284000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 24), '_ThetaShift', False)
        # Calling _ThetaShift(args, kwargs) (line 917)
        _ThetaShift_call_result_284005 = invoke(stypy.reporting.localization.Localization(__file__, 917, 24), _ThetaShift_284000, *[self_284001, pad_284002, unicode_284003], **kwargs_284004)
        
        # Assigning a type to the variable 'pad_shift' (line 917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 12), 'pad_shift', _ThetaShift_call_result_284005)
        # SSA branch for the else part of an if statement (line 915)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 919):
        
        # Assigning a Str to a Name (line 919):
        unicode_284006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 919, 21), 'unicode', u'right')
        # Assigning a type to the variable 'halign' (line 919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 12), 'halign', unicode_284006)
        
        # Assigning a Call to a Name (line 920):
        
        # Assigning a Call to a Name (line 920):
        
        # Call to _ThetaShift(...): (line 920)
        # Processing the call arguments (line 920)
        # Getting the type of 'self' (line 920)
        self_284008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 36), 'self', False)
        # Getting the type of 'pad' (line 920)
        pad_284009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 42), 'pad', False)
        unicode_284010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 47), 'unicode', u'max')
        # Processing the call keyword arguments (line 920)
        kwargs_284011 = {}
        # Getting the type of '_ThetaShift' (line 920)
        _ThetaShift_284007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 24), '_ThetaShift', False)
        # Calling _ThetaShift(args, kwargs) (line 920)
        _ThetaShift_call_result_284012 = invoke(stypy.reporting.localization.Localization(__file__, 920, 24), _ThetaShift_284007, *[self_284008, pad_284009, unicode_284010], **kwargs_284011)
        
        # Assigning a type to the variable 'pad_shift' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 12), 'pad_shift', _ThetaShift_call_result_284012)
        # SSA join for if statement (line 915)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 913)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 921)
        tuple_284013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 921, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 921)
        # Adding element type (line 921)
        # Getting the type of 'self' (line 921)
        self_284014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 15), 'self')
        # Obtaining the member '_yaxis_text_transform' of a type (line 921)
        _yaxis_text_transform_284015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 15), self_284014, '_yaxis_text_transform')
        # Getting the type of 'pad_shift' (line 921)
        pad_shift_284016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 44), 'pad_shift')
        # Applying the binary operator '+' (line 921)
        result_add_284017 = python_operator(stypy.reporting.localization.Localization(__file__, 921, 15), '+', _yaxis_text_transform_284015, pad_shift_284016)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 921, 15), tuple_284013, result_add_284017)
        # Adding element type (line 921)
        unicode_284018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 921, 55), 'unicode', u'center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 921, 15), tuple_284013, unicode_284018)
        # Adding element type (line 921)
        # Getting the type of 'halign' (line 921)
        halign_284019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 65), 'halign')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 921, 15), tuple_284013, halign_284019)
        
        # Assigning a type to the variable 'stypy_return_type' (line 921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 8), 'stypy_return_type', tuple_284013)
        
        # ################# End of 'get_yaxis_text1_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_yaxis_text1_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 911)
        stypy_return_type_284020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284020)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_yaxis_text1_transform'
        return stypy_return_type_284020


    @norecursion
    def get_yaxis_text2_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_yaxis_text2_transform'
        module_type_store = module_type_store.open_function_context('get_yaxis_text2_transform', 923, 4, False)
        # Assigning a type to the variable 'self' (line 924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.get_yaxis_text2_transform.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.get_yaxis_text2_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.get_yaxis_text2_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.get_yaxis_text2_transform.__dict__.__setitem__('stypy_function_name', 'PolarAxes.get_yaxis_text2_transform')
        PolarAxes.get_yaxis_text2_transform.__dict__.__setitem__('stypy_param_names_list', ['pad'])
        PolarAxes.get_yaxis_text2_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.get_yaxis_text2_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.get_yaxis_text2_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.get_yaxis_text2_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.get_yaxis_text2_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.get_yaxis_text2_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.get_yaxis_text2_transform', ['pad'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_yaxis_text2_transform', localization, ['pad'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_yaxis_text2_transform(...)' code ##################

        
        
        
        # Call to get_theta_direction(...): (line 924)
        # Processing the call keyword arguments (line 924)
        kwargs_284023 = {}
        # Getting the type of 'self' (line 924)
        self_284021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 11), 'self', False)
        # Obtaining the member 'get_theta_direction' of a type (line 924)
        get_theta_direction_284022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 11), self_284021, 'get_theta_direction')
        # Calling get_theta_direction(args, kwargs) (line 924)
        get_theta_direction_call_result_284024 = invoke(stypy.reporting.localization.Localization(__file__, 924, 11), get_theta_direction_284022, *[], **kwargs_284023)
        
        int_284025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 924, 40), 'int')
        # Applying the binary operator '>' (line 924)
        result_gt_284026 = python_operator(stypy.reporting.localization.Localization(__file__, 924, 11), '>', get_theta_direction_call_result_284024, int_284025)
        
        # Testing the type of an if condition (line 924)
        if_condition_284027 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 924, 8), result_gt_284026)
        # Assigning a type to the variable 'if_condition_284027' (line 924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'if_condition_284027', if_condition_284027)
        # SSA begins for if statement (line 924)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 925):
        
        # Assigning a Str to a Name (line 925):
        unicode_284028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 925, 21), 'unicode', u'right')
        # Assigning a type to the variable 'halign' (line 925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 12), 'halign', unicode_284028)
        
        # Assigning a Call to a Name (line 926):
        
        # Assigning a Call to a Name (line 926):
        
        # Call to _ThetaShift(...): (line 926)
        # Processing the call arguments (line 926)
        # Getting the type of 'self' (line 926)
        self_284030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 36), 'self', False)
        # Getting the type of 'pad' (line 926)
        pad_284031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 42), 'pad', False)
        unicode_284032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 926, 47), 'unicode', u'max')
        # Processing the call keyword arguments (line 926)
        kwargs_284033 = {}
        # Getting the type of '_ThetaShift' (line 926)
        _ThetaShift_284029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 24), '_ThetaShift', False)
        # Calling _ThetaShift(args, kwargs) (line 926)
        _ThetaShift_call_result_284034 = invoke(stypy.reporting.localization.Localization(__file__, 926, 24), _ThetaShift_284029, *[self_284030, pad_284031, unicode_284032], **kwargs_284033)
        
        # Assigning a type to the variable 'pad_shift' (line 926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 926, 12), 'pad_shift', _ThetaShift_call_result_284034)
        # SSA branch for the else part of an if statement (line 924)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 928):
        
        # Assigning a Str to a Name (line 928):
        unicode_284035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 21), 'unicode', u'left')
        # Assigning a type to the variable 'halign' (line 928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 12), 'halign', unicode_284035)
        
        # Assigning a Call to a Name (line 929):
        
        # Assigning a Call to a Name (line 929):
        
        # Call to _ThetaShift(...): (line 929)
        # Processing the call arguments (line 929)
        # Getting the type of 'self' (line 929)
        self_284037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 36), 'self', False)
        # Getting the type of 'pad' (line 929)
        pad_284038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 42), 'pad', False)
        unicode_284039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 47), 'unicode', u'min')
        # Processing the call keyword arguments (line 929)
        kwargs_284040 = {}
        # Getting the type of '_ThetaShift' (line 929)
        _ThetaShift_284036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 24), '_ThetaShift', False)
        # Calling _ThetaShift(args, kwargs) (line 929)
        _ThetaShift_call_result_284041 = invoke(stypy.reporting.localization.Localization(__file__, 929, 24), _ThetaShift_284036, *[self_284037, pad_284038, unicode_284039], **kwargs_284040)
        
        # Assigning a type to the variable 'pad_shift' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 12), 'pad_shift', _ThetaShift_call_result_284041)
        # SSA join for if statement (line 924)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 930)
        tuple_284042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 930, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 930)
        # Adding element type (line 930)
        # Getting the type of 'self' (line 930)
        self_284043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 15), 'self')
        # Obtaining the member '_yaxis_text_transform' of a type (line 930)
        _yaxis_text_transform_284044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 930, 15), self_284043, '_yaxis_text_transform')
        # Getting the type of 'pad_shift' (line 930)
        pad_shift_284045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 44), 'pad_shift')
        # Applying the binary operator '+' (line 930)
        result_add_284046 = python_operator(stypy.reporting.localization.Localization(__file__, 930, 15), '+', _yaxis_text_transform_284044, pad_shift_284045)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 930, 15), tuple_284042, result_add_284046)
        # Adding element type (line 930)
        unicode_284047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 930, 55), 'unicode', u'center')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 930, 15), tuple_284042, unicode_284047)
        # Adding element type (line 930)
        # Getting the type of 'halign' (line 930)
        halign_284048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 65), 'halign')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 930, 15), tuple_284042, halign_284048)
        
        # Assigning a type to the variable 'stypy_return_type' (line 930)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 8), 'stypy_return_type', tuple_284042)
        
        # ################# End of 'get_yaxis_text2_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_yaxis_text2_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 923)
        stypy_return_type_284049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284049)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_yaxis_text2_transform'
        return stypy_return_type_284049


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 932, 4, False)
        # Assigning a type to the variable 'self' (line 933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.draw.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.draw.__dict__.__setitem__('stypy_function_name', 'PolarAxes.draw')
        PolarAxes.draw.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.draw.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        PolarAxes.draw.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        PolarAxes.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.draw.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.draw', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        
        # Assigning a Attribute to a Tuple (line 933):
        
        # Assigning a Subscript to a Name (line 933):
        
        # Obtaining the type of the subscript
        int_284050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 933, 8), 'int')
        # Getting the type of 'self' (line 933)
        self_284051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 29), 'self')
        # Obtaining the member '_realViewLim' of a type (line 933)
        _realViewLim_284052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 29), self_284051, '_realViewLim')
        # Obtaining the member 'intervalx' of a type (line 933)
        intervalx_284053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 29), _realViewLim_284052, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 933)
        getitem___284054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 8), intervalx_284053, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 933)
        subscript_call_result_284055 = invoke(stypy.reporting.localization.Localization(__file__, 933, 8), getitem___284054, int_284050)
        
        # Assigning a type to the variable 'tuple_var_assignment_281139' (line 933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 8), 'tuple_var_assignment_281139', subscript_call_result_284055)
        
        # Assigning a Subscript to a Name (line 933):
        
        # Obtaining the type of the subscript
        int_284056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 933, 8), 'int')
        # Getting the type of 'self' (line 933)
        self_284057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 29), 'self')
        # Obtaining the member '_realViewLim' of a type (line 933)
        _realViewLim_284058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 29), self_284057, '_realViewLim')
        # Obtaining the member 'intervalx' of a type (line 933)
        intervalx_284059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 29), _realViewLim_284058, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 933)
        getitem___284060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 8), intervalx_284059, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 933)
        subscript_call_result_284061 = invoke(stypy.reporting.localization.Localization(__file__, 933, 8), getitem___284060, int_284056)
        
        # Assigning a type to the variable 'tuple_var_assignment_281140' (line 933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 8), 'tuple_var_assignment_281140', subscript_call_result_284061)
        
        # Assigning a Name to a Name (line 933):
        # Getting the type of 'tuple_var_assignment_281139' (line 933)
        tuple_var_assignment_281139_284062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 8), 'tuple_var_assignment_281139')
        # Assigning a type to the variable 'thetamin' (line 933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 8), 'thetamin', tuple_var_assignment_281139_284062)
        
        # Assigning a Name to a Name (line 933):
        # Getting the type of 'tuple_var_assignment_281140' (line 933)
        tuple_var_assignment_281140_284063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 8), 'tuple_var_assignment_281140')
        # Assigning a type to the variable 'thetamax' (line 933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 18), 'thetamax', tuple_var_assignment_281140_284063)
        
        # Getting the type of 'thetamin' (line 934)
        thetamin_284064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'thetamin')
        int_284065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, 20), 'int')
        # Getting the type of 'np' (line 934)
        np_284066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 26), 'np')
        # Obtaining the member 'pi' of a type (line 934)
        pi_284067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 26), np_284066, 'pi')
        # Applying the binary operator 'div' (line 934)
        result_div_284068 = python_operator(stypy.reporting.localization.Localization(__file__, 934, 20), 'div', int_284065, pi_284067)
        
        # Applying the binary operator '*=' (line 934)
        result_imul_284069 = python_operator(stypy.reporting.localization.Localization(__file__, 934, 8), '*=', thetamin_284064, result_div_284068)
        # Assigning a type to the variable 'thetamin' (line 934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'thetamin', result_imul_284069)
        
        
        # Getting the type of 'thetamax' (line 935)
        thetamax_284070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 8), 'thetamax')
        int_284071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 935, 20), 'int')
        # Getting the type of 'np' (line 935)
        np_284072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 26), 'np')
        # Obtaining the member 'pi' of a type (line 935)
        pi_284073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 26), np_284072, 'pi')
        # Applying the binary operator 'div' (line 935)
        result_div_284074 = python_operator(stypy.reporting.localization.Localization(__file__, 935, 20), 'div', int_284071, pi_284073)
        
        # Applying the binary operator '*=' (line 935)
        result_imul_284075 = python_operator(stypy.reporting.localization.Localization(__file__, 935, 8), '*=', thetamax_284070, result_div_284074)
        # Assigning a type to the variable 'thetamax' (line 935)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 8), 'thetamax', result_imul_284075)
        
        
        
        # Getting the type of 'thetamin' (line 936)
        thetamin_284076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 11), 'thetamin')
        # Getting the type of 'thetamax' (line 936)
        thetamax_284077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 22), 'thetamax')
        # Applying the binary operator '>' (line 936)
        result_gt_284078 = python_operator(stypy.reporting.localization.Localization(__file__, 936, 11), '>', thetamin_284076, thetamax_284077)
        
        # Testing the type of an if condition (line 936)
        if_condition_284079 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 936, 8), result_gt_284078)
        # Assigning a type to the variable 'if_condition_284079' (line 936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 8), 'if_condition_284079', if_condition_284079)
        # SSA begins for if statement (line 936)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 937):
        
        # Assigning a Name to a Name (line 937):
        # Getting the type of 'thetamax' (line 937)
        thetamax_284080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 33), 'thetamax')
        # Assigning a type to the variable 'tuple_assignment_281141' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 12), 'tuple_assignment_281141', thetamax_284080)
        
        # Assigning a Name to a Name (line 937):
        # Getting the type of 'thetamin' (line 937)
        thetamin_284081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 43), 'thetamin')
        # Assigning a type to the variable 'tuple_assignment_281142' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 12), 'tuple_assignment_281142', thetamin_284081)
        
        # Assigning a Name to a Name (line 937):
        # Getting the type of 'tuple_assignment_281141' (line 937)
        tuple_assignment_281141_284082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 12), 'tuple_assignment_281141')
        # Assigning a type to the variable 'thetamin' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 12), 'thetamin', tuple_assignment_281141_284082)
        
        # Assigning a Name to a Name (line 937):
        # Getting the type of 'tuple_assignment_281142' (line 937)
        tuple_assignment_281142_284083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 12), 'tuple_assignment_281142')
        # Assigning a type to the variable 'thetamax' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 22), 'thetamax', tuple_assignment_281142_284083)
        # SSA join for if statement (line 936)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Tuple (line 938):
        
        # Assigning a Subscript to a Name (line 938):
        
        # Obtaining the type of the subscript
        int_284084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 8), 'int')
        # Getting the type of 'self' (line 938)
        self_284085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 21), 'self')
        # Obtaining the member '_realViewLim' of a type (line 938)
        _realViewLim_284086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 21), self_284085, '_realViewLim')
        # Obtaining the member 'intervaly' of a type (line 938)
        intervaly_284087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 21), _realViewLim_284086, 'intervaly')
        
        # Call to get_rorigin(...): (line 938)
        # Processing the call keyword arguments (line 938)
        kwargs_284090 = {}
        # Getting the type of 'self' (line 938)
        self_284088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 51), 'self', False)
        # Obtaining the member 'get_rorigin' of a type (line 938)
        get_rorigin_284089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 51), self_284088, 'get_rorigin')
        # Calling get_rorigin(args, kwargs) (line 938)
        get_rorigin_call_result_284091 = invoke(stypy.reporting.localization.Localization(__file__, 938, 51), get_rorigin_284089, *[], **kwargs_284090)
        
        # Applying the binary operator '-' (line 938)
        result_sub_284092 = python_operator(stypy.reporting.localization.Localization(__file__, 938, 21), '-', intervaly_284087, get_rorigin_call_result_284091)
        
        # Obtaining the member '__getitem__' of a type (line 938)
        getitem___284093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 8), result_sub_284092, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 938)
        subscript_call_result_284094 = invoke(stypy.reporting.localization.Localization(__file__, 938, 8), getitem___284093, int_284084)
        
        # Assigning a type to the variable 'tuple_var_assignment_281143' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'tuple_var_assignment_281143', subscript_call_result_284094)
        
        # Assigning a Subscript to a Name (line 938):
        
        # Obtaining the type of the subscript
        int_284095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 8), 'int')
        # Getting the type of 'self' (line 938)
        self_284096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 21), 'self')
        # Obtaining the member '_realViewLim' of a type (line 938)
        _realViewLim_284097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 21), self_284096, '_realViewLim')
        # Obtaining the member 'intervaly' of a type (line 938)
        intervaly_284098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 21), _realViewLim_284097, 'intervaly')
        
        # Call to get_rorigin(...): (line 938)
        # Processing the call keyword arguments (line 938)
        kwargs_284101 = {}
        # Getting the type of 'self' (line 938)
        self_284099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 51), 'self', False)
        # Obtaining the member 'get_rorigin' of a type (line 938)
        get_rorigin_284100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 51), self_284099, 'get_rorigin')
        # Calling get_rorigin(args, kwargs) (line 938)
        get_rorigin_call_result_284102 = invoke(stypy.reporting.localization.Localization(__file__, 938, 51), get_rorigin_284100, *[], **kwargs_284101)
        
        # Applying the binary operator '-' (line 938)
        result_sub_284103 = python_operator(stypy.reporting.localization.Localization(__file__, 938, 21), '-', intervaly_284098, get_rorigin_call_result_284102)
        
        # Obtaining the member '__getitem__' of a type (line 938)
        getitem___284104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 8), result_sub_284103, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 938)
        subscript_call_result_284105 = invoke(stypy.reporting.localization.Localization(__file__, 938, 8), getitem___284104, int_284095)
        
        # Assigning a type to the variable 'tuple_var_assignment_281144' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'tuple_var_assignment_281144', subscript_call_result_284105)
        
        # Assigning a Name to a Name (line 938):
        # Getting the type of 'tuple_var_assignment_281143' (line 938)
        tuple_var_assignment_281143_284106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'tuple_var_assignment_281143')
        # Assigning a type to the variable 'rmin' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'rmin', tuple_var_assignment_281143_284106)
        
        # Assigning a Name to a Name (line 938):
        # Getting the type of 'tuple_var_assignment_281144' (line 938)
        tuple_var_assignment_281144_284107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'tuple_var_assignment_281144')
        # Assigning a type to the variable 'rmax' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 14), 'rmax', tuple_var_assignment_281144_284107)
        
        
        # Call to isinstance(...): (line 940)
        # Processing the call arguments (line 940)
        # Getting the type of 'self' (line 940)
        self_284109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 22), 'self', False)
        # Obtaining the member 'patch' of a type (line 940)
        patch_284110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 22), self_284109, 'patch')
        # Getting the type of 'mpatches' (line 940)
        mpatches_284111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 34), 'mpatches', False)
        # Obtaining the member 'Wedge' of a type (line 940)
        Wedge_284112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 34), mpatches_284111, 'Wedge')
        # Processing the call keyword arguments (line 940)
        kwargs_284113 = {}
        # Getting the type of 'isinstance' (line 940)
        isinstance_284108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 940)
        isinstance_call_result_284114 = invoke(stypy.reporting.localization.Localization(__file__, 940, 11), isinstance_284108, *[patch_284110, Wedge_284112], **kwargs_284113)
        
        # Testing the type of an if condition (line 940)
        if_condition_284115 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 940, 8), isinstance_call_result_284114)
        # Assigning a type to the variable 'if_condition_284115' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 8), 'if_condition_284115', if_condition_284115)
        # SSA begins for if statement (line 940)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 943):
        
        # Assigning a Call to a Name (line 943):
        
        # Call to transform_point(...): (line 943)
        # Processing the call arguments (line 943)
        
        # Obtaining an instance of the builtin type 'tuple' (line 943)
        tuple_284119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 54), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 943)
        # Adding element type (line 943)
        float_284120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 54), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 943, 54), tuple_284119, float_284120)
        # Adding element type (line 943)
        float_284121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 59), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 943, 54), tuple_284119, float_284121)
        
        # Processing the call keyword arguments (line 943)
        kwargs_284122 = {}
        # Getting the type of 'self' (line 943)
        self_284116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 21), 'self', False)
        # Obtaining the member 'transWedge' of a type (line 943)
        transWedge_284117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 21), self_284116, 'transWedge')
        # Obtaining the member 'transform_point' of a type (line 943)
        transform_point_284118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 21), transWedge_284117, 'transform_point')
        # Calling transform_point(args, kwargs) (line 943)
        transform_point_call_result_284123 = invoke(stypy.reporting.localization.Localization(__file__, 943, 21), transform_point_284118, *[tuple_284119], **kwargs_284122)
        
        # Assigning a type to the variable 'center' (line 943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 12), 'center', transform_point_call_result_284123)
        
        # Call to set_center(...): (line 944)
        # Processing the call arguments (line 944)
        # Getting the type of 'center' (line 944)
        center_284127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 34), 'center', False)
        # Processing the call keyword arguments (line 944)
        kwargs_284128 = {}
        # Getting the type of 'self' (line 944)
        self_284124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 12), 'self', False)
        # Obtaining the member 'patch' of a type (line 944)
        patch_284125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 12), self_284124, 'patch')
        # Obtaining the member 'set_center' of a type (line 944)
        set_center_284126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 12), patch_284125, 'set_center')
        # Calling set_center(args, kwargs) (line 944)
        set_center_call_result_284129 = invoke(stypy.reporting.localization.Localization(__file__, 944, 12), set_center_284126, *[center_284127], **kwargs_284128)
        
        
        # Call to set_theta1(...): (line 945)
        # Processing the call arguments (line 945)
        # Getting the type of 'thetamin' (line 945)
        thetamin_284133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 34), 'thetamin', False)
        # Processing the call keyword arguments (line 945)
        kwargs_284134 = {}
        # Getting the type of 'self' (line 945)
        self_284130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 12), 'self', False)
        # Obtaining the member 'patch' of a type (line 945)
        patch_284131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 12), self_284130, 'patch')
        # Obtaining the member 'set_theta1' of a type (line 945)
        set_theta1_284132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 12), patch_284131, 'set_theta1')
        # Calling set_theta1(args, kwargs) (line 945)
        set_theta1_call_result_284135 = invoke(stypy.reporting.localization.Localization(__file__, 945, 12), set_theta1_284132, *[thetamin_284133], **kwargs_284134)
        
        
        # Call to set_theta2(...): (line 946)
        # Processing the call arguments (line 946)
        # Getting the type of 'thetamax' (line 946)
        thetamax_284139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 34), 'thetamax', False)
        # Processing the call keyword arguments (line 946)
        kwargs_284140 = {}
        # Getting the type of 'self' (line 946)
        self_284136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 12), 'self', False)
        # Obtaining the member 'patch' of a type (line 946)
        patch_284137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 946, 12), self_284136, 'patch')
        # Obtaining the member 'set_theta2' of a type (line 946)
        set_theta2_284138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 946, 12), patch_284137, 'set_theta2')
        # Calling set_theta2(args, kwargs) (line 946)
        set_theta2_call_result_284141 = invoke(stypy.reporting.localization.Localization(__file__, 946, 12), set_theta2_284138, *[thetamax_284139], **kwargs_284140)
        
        
        # Assigning a Call to a Tuple (line 948):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 948)
        # Processing the call arguments (line 948)
        
        # Obtaining an instance of the builtin type 'tuple' (line 948)
        tuple_284145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 55), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 948)
        # Adding element type (line 948)
        int_284146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 55), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 948, 55), tuple_284145, int_284146)
        # Adding element type (line 948)
        int_284147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 58), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 948, 55), tuple_284145, int_284147)
        
        # Processing the call keyword arguments (line 948)
        kwargs_284148 = {}
        # Getting the type of 'self' (line 948)
        self_284142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 22), 'self', False)
        # Obtaining the member 'transWedge' of a type (line 948)
        transWedge_284143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 22), self_284142, 'transWedge')
        # Obtaining the member 'transform_point' of a type (line 948)
        transform_point_284144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 22), transWedge_284143, 'transform_point')
        # Calling transform_point(args, kwargs) (line 948)
        transform_point_call_result_284149 = invoke(stypy.reporting.localization.Localization(__file__, 948, 22), transform_point_284144, *[tuple_284145], **kwargs_284148)
        
        # Assigning a type to the variable 'call_assignment_281145' (line 948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 948, 12), 'call_assignment_281145', transform_point_call_result_284149)
        
        # Assigning a Call to a Name (line 948):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_284152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 12), 'int')
        # Processing the call keyword arguments
        kwargs_284153 = {}
        # Getting the type of 'call_assignment_281145' (line 948)
        call_assignment_281145_284150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 12), 'call_assignment_281145', False)
        # Obtaining the member '__getitem__' of a type (line 948)
        getitem___284151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 12), call_assignment_281145_284150, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_284154 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___284151, *[int_284152], **kwargs_284153)
        
        # Assigning a type to the variable 'call_assignment_281146' (line 948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 948, 12), 'call_assignment_281146', getitem___call_result_284154)
        
        # Assigning a Name to a Name (line 948):
        # Getting the type of 'call_assignment_281146' (line 948)
        call_assignment_281146_284155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 12), 'call_assignment_281146')
        # Assigning a type to the variable 'edge' (line 948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 948, 12), 'edge', call_assignment_281146_284155)
        
        # Assigning a Call to a Name (line 948):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_284158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 12), 'int')
        # Processing the call keyword arguments
        kwargs_284159 = {}
        # Getting the type of 'call_assignment_281145' (line 948)
        call_assignment_281145_284156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 12), 'call_assignment_281145', False)
        # Obtaining the member '__getitem__' of a type (line 948)
        getitem___284157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 12), call_assignment_281145_284156, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_284160 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___284157, *[int_284158], **kwargs_284159)
        
        # Assigning a type to the variable 'call_assignment_281147' (line 948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 948, 12), 'call_assignment_281147', getitem___call_result_284160)
        
        # Assigning a Name to a Name (line 948):
        # Getting the type of 'call_assignment_281147' (line 948)
        call_assignment_281147_284161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 12), 'call_assignment_281147')
        # Assigning a type to the variable '_' (line 948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 948, 18), '_', call_assignment_281147_284161)
        
        # Assigning a BinOp to a Name (line 949):
        
        # Assigning a BinOp to a Name (line 949):
        # Getting the type of 'edge' (line 949)
        edge_284162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 21), 'edge')
        
        # Obtaining the type of the subscript
        int_284163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 35), 'int')
        # Getting the type of 'center' (line 949)
        center_284164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 28), 'center')
        # Obtaining the member '__getitem__' of a type (line 949)
        getitem___284165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 28), center_284164, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 949)
        subscript_call_result_284166 = invoke(stypy.reporting.localization.Localization(__file__, 949, 28), getitem___284165, int_284163)
        
        # Applying the binary operator '-' (line 949)
        result_sub_284167 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 21), '-', edge_284162, subscript_call_result_284166)
        
        # Assigning a type to the variable 'radius' (line 949)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 12), 'radius', result_sub_284167)
        
        # Assigning a Call to a Name (line 950):
        
        # Assigning a Call to a Name (line 950):
        
        # Call to min(...): (line 950)
        # Processing the call arguments (line 950)
        # Getting the type of 'radius' (line 950)
        radius_284169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 24), 'radius', False)
        # Getting the type of 'rmax' (line 950)
        rmax_284170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 34), 'rmax', False)
        # Getting the type of 'rmin' (line 950)
        rmin_284171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 41), 'rmin', False)
        # Applying the binary operator '-' (line 950)
        result_sub_284172 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 34), '-', rmax_284170, rmin_284171)
        
        # Applying the binary operator '*' (line 950)
        result_mul_284173 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 24), '*', radius_284169, result_sub_284172)
        
        # Getting the type of 'rmax' (line 950)
        rmax_284174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 49), 'rmax', False)
        # Applying the binary operator 'div' (line 950)
        result_div_284175 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 47), 'div', result_mul_284173, rmax_284174)
        
        # Getting the type of 'radius' (line 950)
        radius_284176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 55), 'radius', False)
        # Processing the call keyword arguments (line 950)
        kwargs_284177 = {}
        # Getting the type of 'min' (line 950)
        min_284168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 20), 'min', False)
        # Calling min(args, kwargs) (line 950)
        min_call_result_284178 = invoke(stypy.reporting.localization.Localization(__file__, 950, 20), min_284168, *[result_div_284175, radius_284176], **kwargs_284177)
        
        # Assigning a type to the variable 'width' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 12), 'width', min_call_result_284178)
        
        # Call to set_radius(...): (line 951)
        # Processing the call arguments (line 951)
        # Getting the type of 'radius' (line 951)
        radius_284182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 34), 'radius', False)
        # Processing the call keyword arguments (line 951)
        kwargs_284183 = {}
        # Getting the type of 'self' (line 951)
        self_284179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 12), 'self', False)
        # Obtaining the member 'patch' of a type (line 951)
        patch_284180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 12), self_284179, 'patch')
        # Obtaining the member 'set_radius' of a type (line 951)
        set_radius_284181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 12), patch_284180, 'set_radius')
        # Calling set_radius(args, kwargs) (line 951)
        set_radius_call_result_284184 = invoke(stypy.reporting.localization.Localization(__file__, 951, 12), set_radius_284181, *[radius_284182], **kwargs_284183)
        
        
        # Call to set_width(...): (line 952)
        # Processing the call arguments (line 952)
        # Getting the type of 'width' (line 952)
        width_284188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 33), 'width', False)
        # Processing the call keyword arguments (line 952)
        kwargs_284189 = {}
        # Getting the type of 'self' (line 952)
        self_284185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 12), 'self', False)
        # Obtaining the member 'patch' of a type (line 952)
        patch_284186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 12), self_284185, 'patch')
        # Obtaining the member 'set_width' of a type (line 952)
        set_width_284187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 12), patch_284186, 'set_width')
        # Calling set_width(args, kwargs) (line 952)
        set_width_call_result_284190 = invoke(stypy.reporting.localization.Localization(__file__, 952, 12), set_width_284187, *[width_284188], **kwargs_284189)
        
        
        # Assigning a BinOp to a Name (line 954):
        
        # Assigning a BinOp to a Name (line 954):
        # Getting the type of 'radius' (line 954)
        radius_284191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 26), 'radius')
        # Getting the type of 'width' (line 954)
        width_284192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 35), 'width')
        # Applying the binary operator '-' (line 954)
        result_sub_284193 = python_operator(stypy.reporting.localization.Localization(__file__, 954, 26), '-', radius_284191, width_284192)
        
        # Assigning a type to the variable 'inner_width' (line 954)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 12), 'inner_width', result_sub_284193)
        
        # Assigning a Call to a Name (line 955):
        
        # Assigning a Call to a Name (line 955):
        
        # Call to get(...): (line 955)
        # Processing the call arguments (line 955)
        unicode_284197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 955, 36), 'unicode', u'inner')
        # Getting the type of 'None' (line 955)
        None_284198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 45), 'None', False)
        # Processing the call keyword arguments (line 955)
        kwargs_284199 = {}
        # Getting the type of 'self' (line 955)
        self_284194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 20), 'self', False)
        # Obtaining the member 'spines' of a type (line 955)
        spines_284195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 20), self_284194, 'spines')
        # Obtaining the member 'get' of a type (line 955)
        get_284196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 20), spines_284195, 'get')
        # Calling get(args, kwargs) (line 955)
        get_call_result_284200 = invoke(stypy.reporting.localization.Localization(__file__, 955, 20), get_284196, *[unicode_284197, None_284198], **kwargs_284199)
        
        # Assigning a type to the variable 'inner' (line 955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 955, 12), 'inner', get_call_result_284200)
        
        # Getting the type of 'inner' (line 956)
        inner_284201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 15), 'inner')
        # Testing the type of an if condition (line 956)
        if_condition_284202 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 956, 12), inner_284201)
        # Assigning a type to the variable 'if_condition_284202' (line 956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 12), 'if_condition_284202', if_condition_284202)
        # SSA begins for if statement (line 956)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_visible(...): (line 957)
        # Processing the call arguments (line 957)
        
        # Getting the type of 'inner_width' (line 957)
        inner_width_284205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 34), 'inner_width', False)
        float_284206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 49), 'float')
        # Applying the binary operator '!=' (line 957)
        result_ne_284207 = python_operator(stypy.reporting.localization.Localization(__file__, 957, 34), '!=', inner_width_284205, float_284206)
        
        # Processing the call keyword arguments (line 957)
        kwargs_284208 = {}
        # Getting the type of 'inner' (line 957)
        inner_284203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 16), 'inner', False)
        # Obtaining the member 'set_visible' of a type (line 957)
        set_visible_284204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 16), inner_284203, 'set_visible')
        # Calling set_visible(args, kwargs) (line 957)
        set_visible_call_result_284209 = invoke(stypy.reporting.localization.Localization(__file__, 957, 16), set_visible_284204, *[result_ne_284207], **kwargs_284208)
        
        # SSA join for if statement (line 956)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 940)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a UnaryOp to a Name (line 959):
        
        # Assigning a UnaryOp to a Name (line 959):
        
        
        # Call to _is_full_circle_deg(...): (line 959)
        # Processing the call arguments (line 959)
        # Getting the type of 'thetamin' (line 959)
        thetamin_284211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 42), 'thetamin', False)
        # Getting the type of 'thetamax' (line 959)
        thetamax_284212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 52), 'thetamax', False)
        # Processing the call keyword arguments (line 959)
        kwargs_284213 = {}
        # Getting the type of '_is_full_circle_deg' (line 959)
        _is_full_circle_deg_284210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 22), '_is_full_circle_deg', False)
        # Calling _is_full_circle_deg(args, kwargs) (line 959)
        _is_full_circle_deg_call_result_284214 = invoke(stypy.reporting.localization.Localization(__file__, 959, 22), _is_full_circle_deg_284210, *[thetamin_284211, thetamax_284212], **kwargs_284213)
        
        # Applying the 'not' unary operator (line 959)
        result_not__284215 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 18), 'not', _is_full_circle_deg_call_result_284214)
        
        # Assigning a type to the variable 'visible' (line 959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 8), 'visible', result_not__284215)
        
        # Assigning a Call to a Name (line 962):
        
        # Assigning a Call to a Name (line 962):
        
        # Call to get(...): (line 962)
        # Processing the call arguments (line 962)
        unicode_284219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 32), 'unicode', u'start')
        # Getting the type of 'None' (line 962)
        None_284220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 41), 'None', False)
        # Processing the call keyword arguments (line 962)
        kwargs_284221 = {}
        # Getting the type of 'self' (line 962)
        self_284216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 16), 'self', False)
        # Obtaining the member 'spines' of a type (line 962)
        spines_284217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 16), self_284216, 'spines')
        # Obtaining the member 'get' of a type (line 962)
        get_284218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 16), spines_284217, 'get')
        # Calling get(args, kwargs) (line 962)
        get_call_result_284222 = invoke(stypy.reporting.localization.Localization(__file__, 962, 16), get_284218, *[unicode_284219, None_284220], **kwargs_284221)
        
        # Assigning a type to the variable 'start' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 8), 'start', get_call_result_284222)
        
        # Assigning a Call to a Name (line 963):
        
        # Assigning a Call to a Name (line 963):
        
        # Call to get(...): (line 963)
        # Processing the call arguments (line 963)
        unicode_284226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 30), 'unicode', u'end')
        # Getting the type of 'None' (line 963)
        None_284227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 37), 'None', False)
        # Processing the call keyword arguments (line 963)
        kwargs_284228 = {}
        # Getting the type of 'self' (line 963)
        self_284223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 14), 'self', False)
        # Obtaining the member 'spines' of a type (line 963)
        spines_284224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 14), self_284223, 'spines')
        # Obtaining the member 'get' of a type (line 963)
        get_284225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 14), spines_284224, 'get')
        # Calling get(args, kwargs) (line 963)
        get_call_result_284229 = invoke(stypy.reporting.localization.Localization(__file__, 963, 14), get_284225, *[unicode_284226, None_284227], **kwargs_284228)
        
        # Assigning a type to the variable 'end' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 8), 'end', get_call_result_284229)
        
        # Getting the type of 'start' (line 964)
        start_284230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 11), 'start')
        # Testing the type of an if condition (line 964)
        if_condition_284231 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 964, 8), start_284230)
        # Assigning a type to the variable 'if_condition_284231' (line 964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 964, 8), 'if_condition_284231', if_condition_284231)
        # SSA begins for if statement (line 964)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_visible(...): (line 965)
        # Processing the call arguments (line 965)
        # Getting the type of 'visible' (line 965)
        visible_284234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 30), 'visible', False)
        # Processing the call keyword arguments (line 965)
        kwargs_284235 = {}
        # Getting the type of 'start' (line 965)
        start_284232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 12), 'start', False)
        # Obtaining the member 'set_visible' of a type (line 965)
        set_visible_284233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 12), start_284232, 'set_visible')
        # Calling set_visible(args, kwargs) (line 965)
        set_visible_call_result_284236 = invoke(stypy.reporting.localization.Localization(__file__, 965, 12), set_visible_284233, *[visible_284234], **kwargs_284235)
        
        # SSA join for if statement (line 964)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'end' (line 966)
        end_284237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 11), 'end')
        # Testing the type of an if condition (line 966)
        if_condition_284238 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 966, 8), end_284237)
        # Assigning a type to the variable 'if_condition_284238' (line 966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'if_condition_284238', if_condition_284238)
        # SSA begins for if statement (line 966)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_visible(...): (line 967)
        # Processing the call arguments (line 967)
        # Getting the type of 'visible' (line 967)
        visible_284241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 28), 'visible', False)
        # Processing the call keyword arguments (line 967)
        kwargs_284242 = {}
        # Getting the type of 'end' (line 967)
        end_284239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 12), 'end', False)
        # Obtaining the member 'set_visible' of a type (line 967)
        set_visible_284240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 12), end_284239, 'set_visible')
        # Calling set_visible(args, kwargs) (line 967)
        set_visible_call_result_284243 = invoke(stypy.reporting.localization.Localization(__file__, 967, 12), set_visible_284240, *[visible_284241], **kwargs_284242)
        
        # SSA join for if statement (line 966)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'visible' (line 968)
        visible_284244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 11), 'visible')
        # Testing the type of an if condition (line 968)
        if_condition_284245 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 968, 8), visible_284244)
        # Assigning a type to the variable 'if_condition_284245' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'if_condition_284245', if_condition_284245)
        # SSA begins for if statement (line 968)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 969):
        
        # Assigning a Attribute to a Name (line 969):
        # Getting the type of 'self' (line 969)
        self_284246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 35), 'self')
        # Obtaining the member '_yaxis_transform' of a type (line 969)
        _yaxis_transform_284247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 969, 35), self_284246, '_yaxis_transform')
        # Assigning a type to the variable 'yaxis_text_transform' (line 969)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 969, 12), 'yaxis_text_transform', _yaxis_transform_284247)
        # SSA branch for the else part of an if statement (line 968)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 971):
        
        # Assigning a BinOp to a Name (line 971):
        # Getting the type of 'self' (line 971)
        self_284248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 35), 'self')
        # Obtaining the member '_r_label_position' of a type (line 971)
        _r_label_position_284249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 35), self_284248, '_r_label_position')
        # Getting the type of 'self' (line 971)
        self_284250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 60), 'self')
        # Obtaining the member 'transData' of a type (line 971)
        transData_284251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 60), self_284250, 'transData')
        # Applying the binary operator '+' (line 971)
        result_add_284252 = python_operator(stypy.reporting.localization.Localization(__file__, 971, 35), '+', _r_label_position_284249, transData_284251)
        
        # Assigning a type to the variable 'yaxis_text_transform' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 12), 'yaxis_text_transform', result_add_284252)
        # SSA join for if statement (line 968)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 972)
        self_284253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 11), 'self')
        # Obtaining the member '_yaxis_text_transform' of a type (line 972)
        _yaxis_text_transform_284254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 972, 11), self_284253, '_yaxis_text_transform')
        # Getting the type of 'yaxis_text_transform' (line 972)
        yaxis_text_transform_284255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 41), 'yaxis_text_transform')
        # Applying the binary operator '!=' (line 972)
        result_ne_284256 = python_operator(stypy.reporting.localization.Localization(__file__, 972, 11), '!=', _yaxis_text_transform_284254, yaxis_text_transform_284255)
        
        # Testing the type of an if condition (line 972)
        if_condition_284257 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 972, 8), result_ne_284256)
        # Assigning a type to the variable 'if_condition_284257' (line 972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 8), 'if_condition_284257', if_condition_284257)
        # SSA begins for if statement (line 972)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set(...): (line 973)
        # Processing the call arguments (line 973)
        # Getting the type of 'yaxis_text_transform' (line 973)
        yaxis_text_transform_284261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 43), 'yaxis_text_transform', False)
        # Processing the call keyword arguments (line 973)
        kwargs_284262 = {}
        # Getting the type of 'self' (line 973)
        self_284258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 12), 'self', False)
        # Obtaining the member '_yaxis_text_transform' of a type (line 973)
        _yaxis_text_transform_284259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 12), self_284258, '_yaxis_text_transform')
        # Obtaining the member 'set' of a type (line 973)
        set_284260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 12), _yaxis_text_transform_284259, 'set')
        # Calling set(args, kwargs) (line 973)
        set_call_result_284263 = invoke(stypy.reporting.localization.Localization(__file__, 973, 12), set_284260, *[yaxis_text_transform_284261], **kwargs_284262)
        
        
        # Call to reset_ticks(...): (line 974)
        # Processing the call keyword arguments (line 974)
        kwargs_284267 = {}
        # Getting the type of 'self' (line 974)
        self_284264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 12), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 974)
        yaxis_284265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 12), self_284264, 'yaxis')
        # Obtaining the member 'reset_ticks' of a type (line 974)
        reset_ticks_284266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 12), yaxis_284265, 'reset_ticks')
        # Calling reset_ticks(args, kwargs) (line 974)
        reset_ticks_call_result_284268 = invoke(stypy.reporting.localization.Localization(__file__, 974, 12), reset_ticks_284266, *[], **kwargs_284267)
        
        
        # Call to set_clip_path(...): (line 975)
        # Processing the call arguments (line 975)
        # Getting the type of 'self' (line 975)
        self_284272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 37), 'self', False)
        # Obtaining the member 'patch' of a type (line 975)
        patch_284273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 37), self_284272, 'patch')
        # Processing the call keyword arguments (line 975)
        kwargs_284274 = {}
        # Getting the type of 'self' (line 975)
        self_284269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 12), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 975)
        yaxis_284270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 12), self_284269, 'yaxis')
        # Obtaining the member 'set_clip_path' of a type (line 975)
        set_clip_path_284271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 12), yaxis_284270, 'set_clip_path')
        # Calling set_clip_path(args, kwargs) (line 975)
        set_clip_path_call_result_284275 = invoke(stypy.reporting.localization.Localization(__file__, 975, 12), set_clip_path_284271, *[patch_284273], **kwargs_284274)
        
        # SSA join for if statement (line 972)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw(...): (line 977)
        # Processing the call arguments (line 977)
        # Getting the type of 'self' (line 977)
        self_284278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 18), 'self', False)
        # Getting the type of 'args' (line 977)
        args_284279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 25), 'args', False)
        # Processing the call keyword arguments (line 977)
        # Getting the type of 'kwargs' (line 977)
        kwargs_284280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 33), 'kwargs', False)
        kwargs_284281 = {'kwargs_284280': kwargs_284280}
        # Getting the type of 'Axes' (line 977)
        Axes_284276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 8), 'Axes', False)
        # Obtaining the member 'draw' of a type (line 977)
        draw_284277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 8), Axes_284276, 'draw')
        # Calling draw(args, kwargs) (line 977)
        draw_call_result_284282 = invoke(stypy.reporting.localization.Localization(__file__, 977, 8), draw_284277, *[self_284278, args_284279], **kwargs_284281)
        
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 932)
        stypy_return_type_284283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284283)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_284283


    @norecursion
    def _gen_axes_patch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_gen_axes_patch'
        module_type_store = module_type_store.open_function_context('_gen_axes_patch', 979, 4, False)
        # Assigning a type to the variable 'self' (line 980)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 980, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes._gen_axes_patch.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes._gen_axes_patch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes._gen_axes_patch.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes._gen_axes_patch.__dict__.__setitem__('stypy_function_name', 'PolarAxes._gen_axes_patch')
        PolarAxes._gen_axes_patch.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes._gen_axes_patch.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes._gen_axes_patch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes._gen_axes_patch.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes._gen_axes_patch.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes._gen_axes_patch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes._gen_axes_patch.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes._gen_axes_patch', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_gen_axes_patch', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_gen_axes_patch(...)' code ##################

        
        # Call to Wedge(...): (line 980)
        # Processing the call arguments (line 980)
        
        # Obtaining an instance of the builtin type 'tuple' (line 980)
        tuple_284286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 980)
        # Adding element type (line 980)
        float_284287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, 31), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 980, 31), tuple_284286, float_284287)
        # Adding element type (line 980)
        float_284288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 980, 31), tuple_284286, float_284288)
        
        float_284289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, 42), 'float')
        float_284290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, 47), 'float')
        float_284291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, 52), 'float')
        # Processing the call keyword arguments (line 980)
        kwargs_284292 = {}
        # Getting the type of 'mpatches' (line 980)
        mpatches_284284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 15), 'mpatches', False)
        # Obtaining the member 'Wedge' of a type (line 980)
        Wedge_284285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 15), mpatches_284284, 'Wedge')
        # Calling Wedge(args, kwargs) (line 980)
        Wedge_call_result_284293 = invoke(stypy.reporting.localization.Localization(__file__, 980, 15), Wedge_284285, *[tuple_284286, float_284289, float_284290, float_284291], **kwargs_284292)
        
        # Assigning a type to the variable 'stypy_return_type' (line 980)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 980, 8), 'stypy_return_type', Wedge_call_result_284293)
        
        # ################# End of '_gen_axes_patch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_gen_axes_patch' in the type store
        # Getting the type of 'stypy_return_type' (line 979)
        stypy_return_type_284294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284294)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_gen_axes_patch'
        return stypy_return_type_284294


    @norecursion
    def _gen_axes_spines(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_gen_axes_spines'
        module_type_store = module_type_store.open_function_context('_gen_axes_spines', 982, 4, False)
        # Assigning a type to the variable 'self' (line 983)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 983, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes._gen_axes_spines.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes._gen_axes_spines.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes._gen_axes_spines.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes._gen_axes_spines.__dict__.__setitem__('stypy_function_name', 'PolarAxes._gen_axes_spines')
        PolarAxes._gen_axes_spines.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes._gen_axes_spines.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes._gen_axes_spines.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes._gen_axes_spines.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes._gen_axes_spines.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes._gen_axes_spines.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes._gen_axes_spines.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes._gen_axes_spines', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_gen_axes_spines', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_gen_axes_spines(...)' code ##################

        
        # Assigning a Call to a Name (line 983):
        
        # Assigning a Call to a Name (line 983):
        
        # Call to OrderedDict(...): (line 983)
        # Processing the call arguments (line 983)
        
        # Obtaining an instance of the builtin type 'list' (line 983)
        list_284296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 983, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 983)
        # Adding element type (line 983)
        
        # Obtaining an instance of the builtin type 'tuple' (line 984)
        tuple_284297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 984)
        # Adding element type (line 984)
        unicode_284298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, 13), 'unicode', u'polar')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 984, 13), tuple_284297, unicode_284298)
        # Adding element type (line 984)
        
        # Call to arc_spine(...): (line 984)
        # Processing the call arguments (line 984)
        # Getting the type of 'self' (line 984)
        self_284302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 46), 'self', False)
        unicode_284303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, 52), 'unicode', u'top')
        
        # Obtaining an instance of the builtin type 'tuple' (line 985)
        tuple_284304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 985)
        # Adding element type (line 985)
        float_284305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, 47), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 985, 47), tuple_284304, float_284305)
        # Adding element type (line 985)
        float_284306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, 52), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 985, 47), tuple_284304, float_284306)
        
        float_284307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, 58), 'float')
        float_284308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, 63), 'float')
        float_284309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, 68), 'float')
        # Processing the call keyword arguments (line 984)
        kwargs_284310 = {}
        # Getting the type of 'mspines' (line 984)
        mspines_284299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 22), 'mspines', False)
        # Obtaining the member 'Spine' of a type (line 984)
        Spine_284300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 22), mspines_284299, 'Spine')
        # Obtaining the member 'arc_spine' of a type (line 984)
        arc_spine_284301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 22), Spine_284300, 'arc_spine')
        # Calling arc_spine(args, kwargs) (line 984)
        arc_spine_call_result_284311 = invoke(stypy.reporting.localization.Localization(__file__, 984, 22), arc_spine_284301, *[self_284302, unicode_284303, tuple_284304, float_284307, float_284308, float_284309], **kwargs_284310)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 984, 13), tuple_284297, arc_spine_call_result_284311)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 983, 29), list_284296, tuple_284297)
        # Adding element type (line 983)
        
        # Obtaining an instance of the builtin type 'tuple' (line 986)
        tuple_284312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 986)
        # Adding element type (line 986)
        unicode_284313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 13), 'unicode', u'start')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 986, 13), tuple_284312, unicode_284313)
        # Adding element type (line 986)
        
        # Call to linear_spine(...): (line 986)
        # Processing the call arguments (line 986)
        # Getting the type of 'self' (line 986)
        self_284317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 49), 'self', False)
        unicode_284318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 55), 'unicode', u'left')
        # Processing the call keyword arguments (line 986)
        kwargs_284319 = {}
        # Getting the type of 'mspines' (line 986)
        mspines_284314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 22), 'mspines', False)
        # Obtaining the member 'Spine' of a type (line 986)
        Spine_284315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 22), mspines_284314, 'Spine')
        # Obtaining the member 'linear_spine' of a type (line 986)
        linear_spine_284316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 22), Spine_284315, 'linear_spine')
        # Calling linear_spine(args, kwargs) (line 986)
        linear_spine_call_result_284320 = invoke(stypy.reporting.localization.Localization(__file__, 986, 22), linear_spine_284316, *[self_284317, unicode_284318], **kwargs_284319)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 986, 13), tuple_284312, linear_spine_call_result_284320)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 983, 29), list_284296, tuple_284312)
        # Adding element type (line 983)
        
        # Obtaining an instance of the builtin type 'tuple' (line 987)
        tuple_284321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 987, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 987)
        # Adding element type (line 987)
        unicode_284322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 987, 13), 'unicode', u'end')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 987, 13), tuple_284321, unicode_284322)
        # Adding element type (line 987)
        
        # Call to linear_spine(...): (line 987)
        # Processing the call arguments (line 987)
        # Getting the type of 'self' (line 987)
        self_284326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 47), 'self', False)
        unicode_284327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 987, 53), 'unicode', u'right')
        # Processing the call keyword arguments (line 987)
        kwargs_284328 = {}
        # Getting the type of 'mspines' (line 987)
        mspines_284323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 20), 'mspines', False)
        # Obtaining the member 'Spine' of a type (line 987)
        Spine_284324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 20), mspines_284323, 'Spine')
        # Obtaining the member 'linear_spine' of a type (line 987)
        linear_spine_284325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 20), Spine_284324, 'linear_spine')
        # Calling linear_spine(args, kwargs) (line 987)
        linear_spine_call_result_284329 = invoke(stypy.reporting.localization.Localization(__file__, 987, 20), linear_spine_284325, *[self_284326, unicode_284327], **kwargs_284328)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 987, 13), tuple_284321, linear_spine_call_result_284329)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 983, 29), list_284296, tuple_284321)
        # Adding element type (line 983)
        
        # Obtaining an instance of the builtin type 'tuple' (line 988)
        tuple_284330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 988, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 988)
        # Adding element type (line 988)
        unicode_284331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 988, 13), 'unicode', u'inner')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 988, 13), tuple_284330, unicode_284331)
        # Adding element type (line 988)
        
        # Call to arc_spine(...): (line 988)
        # Processing the call arguments (line 988)
        # Getting the type of 'self' (line 988)
        self_284335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 46), 'self', False)
        unicode_284336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 988, 52), 'unicode', u'bottom')
        
        # Obtaining an instance of the builtin type 'tuple' (line 989)
        tuple_284337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 989)
        # Adding element type (line 989)
        float_284338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 47), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 989, 47), tuple_284337, float_284338)
        # Adding element type (line 989)
        float_284339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 52), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 989, 47), tuple_284337, float_284339)
        
        float_284340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 58), 'float')
        float_284341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 63), 'float')
        float_284342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 68), 'float')
        # Processing the call keyword arguments (line 988)
        kwargs_284343 = {}
        # Getting the type of 'mspines' (line 988)
        mspines_284332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 22), 'mspines', False)
        # Obtaining the member 'Spine' of a type (line 988)
        Spine_284333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 988, 22), mspines_284332, 'Spine')
        # Obtaining the member 'arc_spine' of a type (line 988)
        arc_spine_284334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 988, 22), Spine_284333, 'arc_spine')
        # Calling arc_spine(args, kwargs) (line 988)
        arc_spine_call_result_284344 = invoke(stypy.reporting.localization.Localization(__file__, 988, 22), arc_spine_284334, *[self_284335, unicode_284336, tuple_284337, float_284340, float_284341, float_284342], **kwargs_284343)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 988, 13), tuple_284330, arc_spine_call_result_284344)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 983, 29), list_284296, tuple_284330)
        
        # Processing the call keyword arguments (line 983)
        kwargs_284345 = {}
        # Getting the type of 'OrderedDict' (line 983)
        OrderedDict_284295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 17), 'OrderedDict', False)
        # Calling OrderedDict(args, kwargs) (line 983)
        OrderedDict_call_result_284346 = invoke(stypy.reporting.localization.Localization(__file__, 983, 17), OrderedDict_284295, *[list_284296], **kwargs_284345)
        
        # Assigning a type to the variable 'spines' (line 983)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 983, 8), 'spines', OrderedDict_call_result_284346)
        
        # Call to set_transform(...): (line 991)
        # Processing the call arguments (line 991)
        # Getting the type of 'self' (line 991)
        self_284352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 38), 'self', False)
        # Obtaining the member 'transWedge' of a type (line 991)
        transWedge_284353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 38), self_284352, 'transWedge')
        # Getting the type of 'self' (line 991)
        self_284354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 56), 'self', False)
        # Obtaining the member 'transAxes' of a type (line 991)
        transAxes_284355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 56), self_284354, 'transAxes')
        # Applying the binary operator '+' (line 991)
        result_add_284356 = python_operator(stypy.reporting.localization.Localization(__file__, 991, 38), '+', transWedge_284353, transAxes_284355)
        
        # Processing the call keyword arguments (line 991)
        kwargs_284357 = {}
        
        # Obtaining the type of the subscript
        unicode_284347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 991, 15), 'unicode', u'polar')
        # Getting the type of 'spines' (line 991)
        spines_284348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 8), 'spines', False)
        # Obtaining the member '__getitem__' of a type (line 991)
        getitem___284349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 8), spines_284348, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 991)
        subscript_call_result_284350 = invoke(stypy.reporting.localization.Localization(__file__, 991, 8), getitem___284349, unicode_284347)
        
        # Obtaining the member 'set_transform' of a type (line 991)
        set_transform_284351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 8), subscript_call_result_284350, 'set_transform')
        # Calling set_transform(args, kwargs) (line 991)
        set_transform_call_result_284358 = invoke(stypy.reporting.localization.Localization(__file__, 991, 8), set_transform_284351, *[result_add_284356], **kwargs_284357)
        
        
        # Call to set_transform(...): (line 992)
        # Processing the call arguments (line 992)
        # Getting the type of 'self' (line 992)
        self_284364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 38), 'self', False)
        # Obtaining the member 'transWedge' of a type (line 992)
        transWedge_284365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 38), self_284364, 'transWedge')
        # Getting the type of 'self' (line 992)
        self_284366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 56), 'self', False)
        # Obtaining the member 'transAxes' of a type (line 992)
        transAxes_284367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 56), self_284366, 'transAxes')
        # Applying the binary operator '+' (line 992)
        result_add_284368 = python_operator(stypy.reporting.localization.Localization(__file__, 992, 38), '+', transWedge_284365, transAxes_284367)
        
        # Processing the call keyword arguments (line 992)
        kwargs_284369 = {}
        
        # Obtaining the type of the subscript
        unicode_284359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 992, 15), 'unicode', u'inner')
        # Getting the type of 'spines' (line 992)
        spines_284360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 8), 'spines', False)
        # Obtaining the member '__getitem__' of a type (line 992)
        getitem___284361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 8), spines_284360, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 992)
        subscript_call_result_284362 = invoke(stypy.reporting.localization.Localization(__file__, 992, 8), getitem___284361, unicode_284359)
        
        # Obtaining the member 'set_transform' of a type (line 992)
        set_transform_284363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 8), subscript_call_result_284362, 'set_transform')
        # Calling set_transform(args, kwargs) (line 992)
        set_transform_call_result_284370 = invoke(stypy.reporting.localization.Localization(__file__, 992, 8), set_transform_284363, *[result_add_284368], **kwargs_284369)
        
        
        # Call to set_transform(...): (line 993)
        # Processing the call arguments (line 993)
        # Getting the type of 'self' (line 993)
        self_284376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 38), 'self', False)
        # Obtaining the member '_yaxis_transform' of a type (line 993)
        _yaxis_transform_284377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 38), self_284376, '_yaxis_transform')
        # Processing the call keyword arguments (line 993)
        kwargs_284378 = {}
        
        # Obtaining the type of the subscript
        unicode_284371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 993, 15), 'unicode', u'start')
        # Getting the type of 'spines' (line 993)
        spines_284372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 8), 'spines', False)
        # Obtaining the member '__getitem__' of a type (line 993)
        getitem___284373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 8), spines_284372, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 993)
        subscript_call_result_284374 = invoke(stypy.reporting.localization.Localization(__file__, 993, 8), getitem___284373, unicode_284371)
        
        # Obtaining the member 'set_transform' of a type (line 993)
        set_transform_284375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 8), subscript_call_result_284374, 'set_transform')
        # Calling set_transform(args, kwargs) (line 993)
        set_transform_call_result_284379 = invoke(stypy.reporting.localization.Localization(__file__, 993, 8), set_transform_284375, *[_yaxis_transform_284377], **kwargs_284378)
        
        
        # Call to set_transform(...): (line 994)
        # Processing the call arguments (line 994)
        # Getting the type of 'self' (line 994)
        self_284385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 36), 'self', False)
        # Obtaining the member '_yaxis_transform' of a type (line 994)
        _yaxis_transform_284386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 36), self_284385, '_yaxis_transform')
        # Processing the call keyword arguments (line 994)
        kwargs_284387 = {}
        
        # Obtaining the type of the subscript
        unicode_284380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 994, 15), 'unicode', u'end')
        # Getting the type of 'spines' (line 994)
        spines_284381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 8), 'spines', False)
        # Obtaining the member '__getitem__' of a type (line 994)
        getitem___284382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 8), spines_284381, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 994)
        subscript_call_result_284383 = invoke(stypy.reporting.localization.Localization(__file__, 994, 8), getitem___284382, unicode_284380)
        
        # Obtaining the member 'set_transform' of a type (line 994)
        set_transform_284384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 8), subscript_call_result_284383, 'set_transform')
        # Calling set_transform(args, kwargs) (line 994)
        set_transform_call_result_284388 = invoke(stypy.reporting.localization.Localization(__file__, 994, 8), set_transform_284384, *[_yaxis_transform_284386], **kwargs_284387)
        
        # Getting the type of 'spines' (line 995)
        spines_284389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 15), 'spines')
        # Assigning a type to the variable 'stypy_return_type' (line 995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 8), 'stypy_return_type', spines_284389)
        
        # ################# End of '_gen_axes_spines(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_gen_axes_spines' in the type store
        # Getting the type of 'stypy_return_type' (line 982)
        stypy_return_type_284390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284390)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_gen_axes_spines'
        return stypy_return_type_284390


    @norecursion
    def set_thetamax(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_thetamax'
        module_type_store = module_type_store.open_function_context('set_thetamax', 997, 4, False)
        # Assigning a type to the variable 'self' (line 998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_thetamax.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_thetamax.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_thetamax.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_thetamax.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_thetamax')
        PolarAxes.set_thetamax.__dict__.__setitem__('stypy_param_names_list', ['thetamax'])
        PolarAxes.set_thetamax.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.set_thetamax.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.set_thetamax.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_thetamax.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_thetamax.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_thetamax.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_thetamax', ['thetamax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_thetamax', localization, ['thetamax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_thetamax(...)' code ##################

        
        # Assigning a Call to a Attribute (line 998):
        
        # Assigning a Call to a Attribute (line 998):
        
        # Call to deg2rad(...): (line 998)
        # Processing the call arguments (line 998)
        # Getting the type of 'thetamax' (line 998)
        thetamax_284393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 37), 'thetamax', False)
        # Processing the call keyword arguments (line 998)
        kwargs_284394 = {}
        # Getting the type of 'np' (line 998)
        np_284391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 26), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 998)
        deg2rad_284392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 26), np_284391, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 998)
        deg2rad_call_result_284395 = invoke(stypy.reporting.localization.Localization(__file__, 998, 26), deg2rad_284392, *[thetamax_284393], **kwargs_284394)
        
        # Getting the type of 'self' (line 998)
        self_284396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 8), 'self')
        # Obtaining the member 'viewLim' of a type (line 998)
        viewLim_284397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 8), self_284396, 'viewLim')
        # Setting the type of the member 'x1' of a type (line 998)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 8), viewLim_284397, 'x1', deg2rad_call_result_284395)
        
        # ################# End of 'set_thetamax(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_thetamax' in the type store
        # Getting the type of 'stypy_return_type' (line 997)
        stypy_return_type_284398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284398)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_thetamax'
        return stypy_return_type_284398


    @norecursion
    def get_thetamax(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_thetamax'
        module_type_store = module_type_store.open_function_context('get_thetamax', 1000, 4, False)
        # Assigning a type to the variable 'self' (line 1001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.get_thetamax.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.get_thetamax.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.get_thetamax.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.get_thetamax.__dict__.__setitem__('stypy_function_name', 'PolarAxes.get_thetamax')
        PolarAxes.get_thetamax.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.get_thetamax.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.get_thetamax.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.get_thetamax.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.get_thetamax.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.get_thetamax.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.get_thetamax.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.get_thetamax', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_thetamax', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_thetamax(...)' code ##################

        
        # Call to rad2deg(...): (line 1001)
        # Processing the call arguments (line 1001)
        # Getting the type of 'self' (line 1001)
        self_284401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 26), 'self', False)
        # Obtaining the member 'viewLim' of a type (line 1001)
        viewLim_284402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 26), self_284401, 'viewLim')
        # Obtaining the member 'xmax' of a type (line 1001)
        xmax_284403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 26), viewLim_284402, 'xmax')
        # Processing the call keyword arguments (line 1001)
        kwargs_284404 = {}
        # Getting the type of 'np' (line 1001)
        np_284399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 15), 'np', False)
        # Obtaining the member 'rad2deg' of a type (line 1001)
        rad2deg_284400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 15), np_284399, 'rad2deg')
        # Calling rad2deg(args, kwargs) (line 1001)
        rad2deg_call_result_284405 = invoke(stypy.reporting.localization.Localization(__file__, 1001, 15), rad2deg_284400, *[xmax_284403], **kwargs_284404)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 8), 'stypy_return_type', rad2deg_call_result_284405)
        
        # ################# End of 'get_thetamax(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_thetamax' in the type store
        # Getting the type of 'stypy_return_type' (line 1000)
        stypy_return_type_284406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284406)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_thetamax'
        return stypy_return_type_284406


    @norecursion
    def set_thetamin(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_thetamin'
        module_type_store = module_type_store.open_function_context('set_thetamin', 1003, 4, False)
        # Assigning a type to the variable 'self' (line 1004)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1004, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_thetamin.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_thetamin.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_thetamin.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_thetamin.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_thetamin')
        PolarAxes.set_thetamin.__dict__.__setitem__('stypy_param_names_list', ['thetamin'])
        PolarAxes.set_thetamin.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.set_thetamin.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.set_thetamin.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_thetamin.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_thetamin.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_thetamin.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_thetamin', ['thetamin'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_thetamin', localization, ['thetamin'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_thetamin(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1004):
        
        # Assigning a Call to a Attribute (line 1004):
        
        # Call to deg2rad(...): (line 1004)
        # Processing the call arguments (line 1004)
        # Getting the type of 'thetamin' (line 1004)
        thetamin_284409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 37), 'thetamin', False)
        # Processing the call keyword arguments (line 1004)
        kwargs_284410 = {}
        # Getting the type of 'np' (line 1004)
        np_284407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 26), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 1004)
        deg2rad_284408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 26), np_284407, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 1004)
        deg2rad_call_result_284411 = invoke(stypy.reporting.localization.Localization(__file__, 1004, 26), deg2rad_284408, *[thetamin_284409], **kwargs_284410)
        
        # Getting the type of 'self' (line 1004)
        self_284412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 8), 'self')
        # Obtaining the member 'viewLim' of a type (line 1004)
        viewLim_284413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 8), self_284412, 'viewLim')
        # Setting the type of the member 'x0' of a type (line 1004)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 8), viewLim_284413, 'x0', deg2rad_call_result_284411)
        
        # ################# End of 'set_thetamin(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_thetamin' in the type store
        # Getting the type of 'stypy_return_type' (line 1003)
        stypy_return_type_284414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284414)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_thetamin'
        return stypy_return_type_284414


    @norecursion
    def get_thetamin(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_thetamin'
        module_type_store = module_type_store.open_function_context('get_thetamin', 1006, 4, False)
        # Assigning a type to the variable 'self' (line 1007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1007, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.get_thetamin.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.get_thetamin.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.get_thetamin.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.get_thetamin.__dict__.__setitem__('stypy_function_name', 'PolarAxes.get_thetamin')
        PolarAxes.get_thetamin.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.get_thetamin.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.get_thetamin.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.get_thetamin.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.get_thetamin.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.get_thetamin.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.get_thetamin.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.get_thetamin', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_thetamin', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_thetamin(...)' code ##################

        
        # Call to rad2deg(...): (line 1007)
        # Processing the call arguments (line 1007)
        # Getting the type of 'self' (line 1007)
        self_284417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 26), 'self', False)
        # Obtaining the member 'viewLim' of a type (line 1007)
        viewLim_284418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1007, 26), self_284417, 'viewLim')
        # Obtaining the member 'xmin' of a type (line 1007)
        xmin_284419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1007, 26), viewLim_284418, 'xmin')
        # Processing the call keyword arguments (line 1007)
        kwargs_284420 = {}
        # Getting the type of 'np' (line 1007)
        np_284415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 15), 'np', False)
        # Obtaining the member 'rad2deg' of a type (line 1007)
        rad2deg_284416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1007, 15), np_284415, 'rad2deg')
        # Calling rad2deg(args, kwargs) (line 1007)
        rad2deg_call_result_284421 = invoke(stypy.reporting.localization.Localization(__file__, 1007, 15), rad2deg_284416, *[xmin_284419], **kwargs_284420)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1007, 8), 'stypy_return_type', rad2deg_call_result_284421)
        
        # ################# End of 'get_thetamin(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_thetamin' in the type store
        # Getting the type of 'stypy_return_type' (line 1006)
        stypy_return_type_284422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284422)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_thetamin'
        return stypy_return_type_284422


    @norecursion
    def set_thetalim(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_thetalim'
        module_type_store = module_type_store.open_function_context('set_thetalim', 1009, 4, False)
        # Assigning a type to the variable 'self' (line 1010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_thetalim.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_thetalim.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_thetalim.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_thetalim.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_thetalim')
        PolarAxes.set_thetalim.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.set_thetalim.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        PolarAxes.set_thetalim.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        PolarAxes.set_thetalim.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_thetalim.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_thetalim.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_thetalim.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_thetalim', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_thetalim', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_thetalim(...)' code ##################

        
        
        unicode_284423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1010, 11), 'unicode', u'thetamin')
        # Getting the type of 'kwargs' (line 1010)
        kwargs_284424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 25), 'kwargs')
        # Applying the binary operator 'in' (line 1010)
        result_contains_284425 = python_operator(stypy.reporting.localization.Localization(__file__, 1010, 11), 'in', unicode_284423, kwargs_284424)
        
        # Testing the type of an if condition (line 1010)
        if_condition_284426 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1010, 8), result_contains_284425)
        # Assigning a type to the variable 'if_condition_284426' (line 1010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 8), 'if_condition_284426', if_condition_284426)
        # SSA begins for if statement (line 1010)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 1011):
        
        # Assigning a Call to a Subscript (line 1011):
        
        # Call to deg2rad(...): (line 1011)
        # Processing the call arguments (line 1011)
        
        # Call to pop(...): (line 1011)
        # Processing the call arguments (line 1011)
        unicode_284431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1011, 51), 'unicode', u'thetamin')
        # Processing the call keyword arguments (line 1011)
        kwargs_284432 = {}
        # Getting the type of 'kwargs' (line 1011)
        kwargs_284429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 40), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 1011)
        pop_284430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1011, 40), kwargs_284429, 'pop')
        # Calling pop(args, kwargs) (line 1011)
        pop_call_result_284433 = invoke(stypy.reporting.localization.Localization(__file__, 1011, 40), pop_284430, *[unicode_284431], **kwargs_284432)
        
        # Processing the call keyword arguments (line 1011)
        kwargs_284434 = {}
        # Getting the type of 'np' (line 1011)
        np_284427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 29), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 1011)
        deg2rad_284428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1011, 29), np_284427, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 1011)
        deg2rad_call_result_284435 = invoke(stypy.reporting.localization.Localization(__file__, 1011, 29), deg2rad_284428, *[pop_call_result_284433], **kwargs_284434)
        
        # Getting the type of 'kwargs' (line 1011)
        kwargs_284436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 12), 'kwargs')
        unicode_284437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1011, 19), 'unicode', u'xmin')
        # Storing an element on a container (line 1011)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1011, 12), kwargs_284436, (unicode_284437, deg2rad_call_result_284435))
        # SSA join for if statement (line 1010)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_284438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, 11), 'unicode', u'thetamax')
        # Getting the type of 'kwargs' (line 1012)
        kwargs_284439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 25), 'kwargs')
        # Applying the binary operator 'in' (line 1012)
        result_contains_284440 = python_operator(stypy.reporting.localization.Localization(__file__, 1012, 11), 'in', unicode_284438, kwargs_284439)
        
        # Testing the type of an if condition (line 1012)
        if_condition_284441 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1012, 8), result_contains_284440)
        # Assigning a type to the variable 'if_condition_284441' (line 1012)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1012, 8), 'if_condition_284441', if_condition_284441)
        # SSA begins for if statement (line 1012)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 1013):
        
        # Assigning a Call to a Subscript (line 1013):
        
        # Call to deg2rad(...): (line 1013)
        # Processing the call arguments (line 1013)
        
        # Call to pop(...): (line 1013)
        # Processing the call arguments (line 1013)
        unicode_284446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 51), 'unicode', u'thetamax')
        # Processing the call keyword arguments (line 1013)
        kwargs_284447 = {}
        # Getting the type of 'kwargs' (line 1013)
        kwargs_284444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 40), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 1013)
        pop_284445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 40), kwargs_284444, 'pop')
        # Calling pop(args, kwargs) (line 1013)
        pop_call_result_284448 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 40), pop_284445, *[unicode_284446], **kwargs_284447)
        
        # Processing the call keyword arguments (line 1013)
        kwargs_284449 = {}
        # Getting the type of 'np' (line 1013)
        np_284442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 29), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 1013)
        deg2rad_284443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 29), np_284442, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 1013)
        deg2rad_call_result_284450 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 29), deg2rad_284443, *[pop_call_result_284448], **kwargs_284449)
        
        # Getting the type of 'kwargs' (line 1013)
        kwargs_284451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 12), 'kwargs')
        unicode_284452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 19), 'unicode', u'xmax')
        # Storing an element on a container (line 1013)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1013, 12), kwargs_284451, (unicode_284452, deg2rad_call_result_284450))
        # SSA join for if statement (line 1012)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to tuple(...): (line 1014)
        # Processing the call arguments (line 1014)
        
        # Call to rad2deg(...): (line 1014)
        # Processing the call arguments (line 1014)
        
        # Call to set_xlim(...): (line 1014)
        # Getting the type of 'args' (line 1014)
        args_284458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 47), 'args', False)
        # Processing the call keyword arguments (line 1014)
        # Getting the type of 'kwargs' (line 1014)
        kwargs_284459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 55), 'kwargs', False)
        kwargs_284460 = {'kwargs_284459': kwargs_284459}
        # Getting the type of 'self' (line 1014)
        self_284456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 32), 'self', False)
        # Obtaining the member 'set_xlim' of a type (line 1014)
        set_xlim_284457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1014, 32), self_284456, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 1014)
        set_xlim_call_result_284461 = invoke(stypy.reporting.localization.Localization(__file__, 1014, 32), set_xlim_284457, *[args_284458], **kwargs_284460)
        
        # Processing the call keyword arguments (line 1014)
        kwargs_284462 = {}
        # Getting the type of 'np' (line 1014)
        np_284454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 21), 'np', False)
        # Obtaining the member 'rad2deg' of a type (line 1014)
        rad2deg_284455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1014, 21), np_284454, 'rad2deg')
        # Calling rad2deg(args, kwargs) (line 1014)
        rad2deg_call_result_284463 = invoke(stypy.reporting.localization.Localization(__file__, 1014, 21), rad2deg_284455, *[set_xlim_call_result_284461], **kwargs_284462)
        
        # Processing the call keyword arguments (line 1014)
        kwargs_284464 = {}
        # Getting the type of 'tuple' (line 1014)
        tuple_284453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 15), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1014)
        tuple_call_result_284465 = invoke(stypy.reporting.localization.Localization(__file__, 1014, 15), tuple_284453, *[rad2deg_call_result_284463], **kwargs_284464)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1014, 8), 'stypy_return_type', tuple_call_result_284465)
        
        # ################# End of 'set_thetalim(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_thetalim' in the type store
        # Getting the type of 'stypy_return_type' (line 1009)
        stypy_return_type_284466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284466)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_thetalim'
        return stypy_return_type_284466


    @norecursion
    def set_theta_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_theta_offset'
        module_type_store = module_type_store.open_function_context('set_theta_offset', 1016, 4, False)
        # Assigning a type to the variable 'self' (line 1017)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1017, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_theta_offset.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_theta_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_theta_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_theta_offset.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_theta_offset')
        PolarAxes.set_theta_offset.__dict__.__setitem__('stypy_param_names_list', ['offset'])
        PolarAxes.set_theta_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.set_theta_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.set_theta_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_theta_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_theta_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_theta_offset.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_theta_offset', ['offset'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_theta_offset', localization, ['offset'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_theta_offset(...)' code ##################

        unicode_284467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1019, (-1)), 'unicode', u'\n        Set the offset for the location of 0 in radians.\n        ')
        
        # Assigning a Call to a Name (line 1020):
        
        # Assigning a Call to a Name (line 1020):
        
        # Call to get_matrix(...): (line 1020)
        # Processing the call keyword arguments (line 1020)
        kwargs_284471 = {}
        # Getting the type of 'self' (line 1020)
        self_284468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 14), 'self', False)
        # Obtaining the member '_theta_offset' of a type (line 1020)
        _theta_offset_284469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 14), self_284468, '_theta_offset')
        # Obtaining the member 'get_matrix' of a type (line 1020)
        get_matrix_284470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 14), _theta_offset_284469, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1020)
        get_matrix_call_result_284472 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 14), get_matrix_284470, *[], **kwargs_284471)
        
        # Assigning a type to the variable 'mtx' (line 1020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1020, 8), 'mtx', get_matrix_call_result_284472)
        
        # Assigning a Name to a Subscript (line 1021):
        
        # Assigning a Name to a Subscript (line 1021):
        # Getting the type of 'offset' (line 1021)
        offset_284473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 20), 'offset')
        # Getting the type of 'mtx' (line 1021)
        mtx_284474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 8), 'mtx')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1021)
        tuple_284475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 12), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1021)
        # Adding element type (line 1021)
        int_284476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 12), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1021, 12), tuple_284475, int_284476)
        # Adding element type (line 1021)
        int_284477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 15), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1021, 12), tuple_284475, int_284477)
        
        # Storing an element on a container (line 1021)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1021, 8), mtx_284474, (tuple_284475, offset_284473))
        
        # Call to invalidate(...): (line 1022)
        # Processing the call keyword arguments (line 1022)
        kwargs_284481 = {}
        # Getting the type of 'self' (line 1022)
        self_284478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 8), 'self', False)
        # Obtaining the member '_theta_offset' of a type (line 1022)
        _theta_offset_284479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1022, 8), self_284478, '_theta_offset')
        # Obtaining the member 'invalidate' of a type (line 1022)
        invalidate_284480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1022, 8), _theta_offset_284479, 'invalidate')
        # Calling invalidate(args, kwargs) (line 1022)
        invalidate_call_result_284482 = invoke(stypy.reporting.localization.Localization(__file__, 1022, 8), invalidate_284480, *[], **kwargs_284481)
        
        
        # ################# End of 'set_theta_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_theta_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 1016)
        stypy_return_type_284483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284483)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_theta_offset'
        return stypy_return_type_284483


    @norecursion
    def get_theta_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_theta_offset'
        module_type_store = module_type_store.open_function_context('get_theta_offset', 1024, 4, False)
        # Assigning a type to the variable 'self' (line 1025)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1025, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.get_theta_offset.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.get_theta_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.get_theta_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.get_theta_offset.__dict__.__setitem__('stypy_function_name', 'PolarAxes.get_theta_offset')
        PolarAxes.get_theta_offset.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.get_theta_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.get_theta_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.get_theta_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.get_theta_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.get_theta_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.get_theta_offset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.get_theta_offset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_theta_offset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_theta_offset(...)' code ##################

        unicode_284484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, (-1)), 'unicode', u'\n        Get the offset for the location of 0 in radians.\n        ')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1028)
        tuple_284485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1028)
        # Adding element type (line 1028)
        int_284486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 47), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1028, 47), tuple_284485, int_284486)
        # Adding element type (line 1028)
        int_284487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 50), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1028, 47), tuple_284485, int_284487)
        
        
        # Call to get_matrix(...): (line 1028)
        # Processing the call keyword arguments (line 1028)
        kwargs_284491 = {}
        # Getting the type of 'self' (line 1028)
        self_284488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 15), 'self', False)
        # Obtaining the member '_theta_offset' of a type (line 1028)
        _theta_offset_284489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 15), self_284488, '_theta_offset')
        # Obtaining the member 'get_matrix' of a type (line 1028)
        get_matrix_284490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 15), _theta_offset_284489, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1028)
        get_matrix_call_result_284492 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 15), get_matrix_284490, *[], **kwargs_284491)
        
        # Obtaining the member '__getitem__' of a type (line 1028)
        getitem___284493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 15), get_matrix_call_result_284492, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1028)
        subscript_call_result_284494 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 15), getitem___284493, tuple_284485)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1028)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 8), 'stypy_return_type', subscript_call_result_284494)
        
        # ################# End of 'get_theta_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_theta_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 1024)
        stypy_return_type_284495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284495)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_theta_offset'
        return stypy_return_type_284495


    @norecursion
    def set_theta_zero_location(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_284496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 50), 'float')
        defaults = [float_284496]
        # Create a new context for function 'set_theta_zero_location'
        module_type_store = module_type_store.open_function_context('set_theta_zero_location', 1030, 4, False)
        # Assigning a type to the variable 'self' (line 1031)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1031, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_theta_zero_location.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_theta_zero_location.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_theta_zero_location.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_theta_zero_location.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_theta_zero_location')
        PolarAxes.set_theta_zero_location.__dict__.__setitem__('stypy_param_names_list', ['loc', 'offset'])
        PolarAxes.set_theta_zero_location.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.set_theta_zero_location.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.set_theta_zero_location.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_theta_zero_location.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_theta_zero_location.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_theta_zero_location.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_theta_zero_location', ['loc', 'offset'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_theta_zero_location', localization, ['loc', 'offset'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_theta_zero_location(...)' code ##################

        unicode_284497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, (-1)), 'unicode', u'\n        Sets the location of theta\'s zero.  (Calls set_theta_offset\n        with the correct value in radians under the hood.)\n\n        loc : str\n            May be one of "N", "NW", "W", "SW", "S", "SE", "E", or "NE".\n\n        offset : float, optional\n            An offset in degrees to apply from the specified `loc`. **Note:**\n            this offset is *always* applied counter-clockwise regardless of\n            the direction setting.\n        ')
        
        # Assigning a Dict to a Name (line 1043):
        
        # Assigning a Dict to a Name (line 1043):
        
        # Obtaining an instance of the builtin type 'dict' (line 1043)
        dict_284498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 18), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1043)
        # Adding element type (key, value) (line 1043)
        unicode_284499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 12), 'unicode', u'N')
        # Getting the type of 'np' (line 1044)
        np_284500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 17), 'np')
        # Obtaining the member 'pi' of a type (line 1044)
        pi_284501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1044, 17), np_284500, 'pi')
        float_284502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 25), 'float')
        # Applying the binary operator '*' (line 1044)
        result_mul_284503 = python_operator(stypy.reporting.localization.Localization(__file__, 1044, 17), '*', pi_284501, float_284502)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 18), dict_284498, (unicode_284499, result_mul_284503))
        # Adding element type (key, value) (line 1043)
        unicode_284504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 12), 'unicode', u'NW')
        # Getting the type of 'np' (line 1045)
        np_284505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 18), 'np')
        # Obtaining the member 'pi' of a type (line 1045)
        pi_284506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 18), np_284505, 'pi')
        float_284507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 26), 'float')
        # Applying the binary operator '*' (line 1045)
        result_mul_284508 = python_operator(stypy.reporting.localization.Localization(__file__, 1045, 18), '*', pi_284506, float_284507)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 18), dict_284498, (unicode_284504, result_mul_284508))
        # Adding element type (key, value) (line 1043)
        unicode_284509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 12), 'unicode', u'W')
        # Getting the type of 'np' (line 1046)
        np_284510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 17), 'np')
        # Obtaining the member 'pi' of a type (line 1046)
        pi_284511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 17), np_284510, 'pi')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 18), dict_284498, (unicode_284509, pi_284511))
        # Adding element type (key, value) (line 1043)
        unicode_284512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 12), 'unicode', u'SW')
        # Getting the type of 'np' (line 1047)
        np_284513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 18), 'np')
        # Obtaining the member 'pi' of a type (line 1047)
        pi_284514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 18), np_284513, 'pi')
        float_284515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 26), 'float')
        # Applying the binary operator '*' (line 1047)
        result_mul_284516 = python_operator(stypy.reporting.localization.Localization(__file__, 1047, 18), '*', pi_284514, float_284515)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 18), dict_284498, (unicode_284512, result_mul_284516))
        # Adding element type (key, value) (line 1043)
        unicode_284517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 12), 'unicode', u'S')
        # Getting the type of 'np' (line 1048)
        np_284518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 17), 'np')
        # Obtaining the member 'pi' of a type (line 1048)
        pi_284519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 17), np_284518, 'pi')
        float_284520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 25), 'float')
        # Applying the binary operator '*' (line 1048)
        result_mul_284521 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 17), '*', pi_284519, float_284520)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 18), dict_284498, (unicode_284517, result_mul_284521))
        # Adding element type (key, value) (line 1043)
        unicode_284522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 12), 'unicode', u'SE')
        # Getting the type of 'np' (line 1049)
        np_284523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 18), 'np')
        # Obtaining the member 'pi' of a type (line 1049)
        pi_284524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 18), np_284523, 'pi')
        float_284525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 26), 'float')
        # Applying the binary operator '*' (line 1049)
        result_mul_284526 = python_operator(stypy.reporting.localization.Localization(__file__, 1049, 18), '*', pi_284524, float_284525)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 18), dict_284498, (unicode_284522, result_mul_284526))
        # Adding element type (key, value) (line 1043)
        unicode_284527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 12), 'unicode', u'E')
        int_284528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 17), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 18), dict_284498, (unicode_284527, int_284528))
        # Adding element type (key, value) (line 1043)
        unicode_284529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 12), 'unicode', u'NE')
        # Getting the type of 'np' (line 1051)
        np_284530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 18), 'np')
        # Obtaining the member 'pi' of a type (line 1051)
        pi_284531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 18), np_284530, 'pi')
        float_284532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 26), 'float')
        # Applying the binary operator '*' (line 1051)
        result_mul_284533 = python_operator(stypy.reporting.localization.Localization(__file__, 1051, 18), '*', pi_284531, float_284532)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 18), dict_284498, (unicode_284529, result_mul_284533))
        
        # Assigning a type to the variable 'mapping' (line 1043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'mapping', dict_284498)
        
        # Call to set_theta_offset(...): (line 1052)
        # Processing the call arguments (line 1052)
        
        # Obtaining the type of the subscript
        # Getting the type of 'loc' (line 1052)
        loc_284536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 45), 'loc', False)
        # Getting the type of 'mapping' (line 1052)
        mapping_284537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 37), 'mapping', False)
        # Obtaining the member '__getitem__' of a type (line 1052)
        getitem___284538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 37), mapping_284537, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1052)
        subscript_call_result_284539 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 37), getitem___284538, loc_284536)
        
        
        # Call to deg2rad(...): (line 1052)
        # Processing the call arguments (line 1052)
        # Getting the type of 'offset' (line 1052)
        offset_284542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 63), 'offset', False)
        # Processing the call keyword arguments (line 1052)
        kwargs_284543 = {}
        # Getting the type of 'np' (line 1052)
        np_284540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 52), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 1052)
        deg2rad_284541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 52), np_284540, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 1052)
        deg2rad_call_result_284544 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 52), deg2rad_284541, *[offset_284542], **kwargs_284543)
        
        # Applying the binary operator '+' (line 1052)
        result_add_284545 = python_operator(stypy.reporting.localization.Localization(__file__, 1052, 37), '+', subscript_call_result_284539, deg2rad_call_result_284544)
        
        # Processing the call keyword arguments (line 1052)
        kwargs_284546 = {}
        # Getting the type of 'self' (line 1052)
        self_284534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 15), 'self', False)
        # Obtaining the member 'set_theta_offset' of a type (line 1052)
        set_theta_offset_284535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 15), self_284534, 'set_theta_offset')
        # Calling set_theta_offset(args, kwargs) (line 1052)
        set_theta_offset_call_result_284547 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 15), set_theta_offset_284535, *[result_add_284545], **kwargs_284546)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 8), 'stypy_return_type', set_theta_offset_call_result_284547)
        
        # ################# End of 'set_theta_zero_location(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_theta_zero_location' in the type store
        # Getting the type of 'stypy_return_type' (line 1030)
        stypy_return_type_284548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284548)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_theta_zero_location'
        return stypy_return_type_284548


    @norecursion
    def set_theta_direction(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_theta_direction'
        module_type_store = module_type_store.open_function_context('set_theta_direction', 1054, 4, False)
        # Assigning a type to the variable 'self' (line 1055)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_theta_direction.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_theta_direction.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_theta_direction.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_theta_direction.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_theta_direction')
        PolarAxes.set_theta_direction.__dict__.__setitem__('stypy_param_names_list', ['direction'])
        PolarAxes.set_theta_direction.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.set_theta_direction.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.set_theta_direction.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_theta_direction.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_theta_direction.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_theta_direction.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_theta_direction', ['direction'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_theta_direction', localization, ['direction'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_theta_direction(...)' code ##################

        unicode_284549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1063, (-1)), 'unicode', u'\n        Set the direction in which theta increases.\n\n        clockwise, -1:\n           Theta increases in the clockwise direction\n\n        counterclockwise, anticlockwise, 1:\n           Theta increases in the counterclockwise direction\n        ')
        
        # Assigning a Call to a Name (line 1064):
        
        # Assigning a Call to a Name (line 1064):
        
        # Call to get_matrix(...): (line 1064)
        # Processing the call keyword arguments (line 1064)
        kwargs_284553 = {}
        # Getting the type of 'self' (line 1064)
        self_284550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 14), 'self', False)
        # Obtaining the member '_direction' of a type (line 1064)
        _direction_284551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1064, 14), self_284550, '_direction')
        # Obtaining the member 'get_matrix' of a type (line 1064)
        get_matrix_284552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1064, 14), _direction_284551, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1064)
        get_matrix_call_result_284554 = invoke(stypy.reporting.localization.Localization(__file__, 1064, 14), get_matrix_284552, *[], **kwargs_284553)
        
        # Assigning a type to the variable 'mtx' (line 1064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1064, 8), 'mtx', get_matrix_call_result_284554)
        
        
        # Getting the type of 'direction' (line 1065)
        direction_284555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 11), 'direction')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1065)
        tuple_284556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1065, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1065)
        # Adding element type (line 1065)
        unicode_284557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1065, 25), 'unicode', u'clockwise')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1065, 25), tuple_284556, unicode_284557)
        
        # Applying the binary operator 'in' (line 1065)
        result_contains_284558 = python_operator(stypy.reporting.localization.Localization(__file__, 1065, 11), 'in', direction_284555, tuple_284556)
        
        # Testing the type of an if condition (line 1065)
        if_condition_284559 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1065, 8), result_contains_284558)
        # Assigning a type to the variable 'if_condition_284559' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 8), 'if_condition_284559', if_condition_284559)
        # SSA begins for if statement (line 1065)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Subscript (line 1066):
        
        # Assigning a Num to a Subscript (line 1066):
        int_284560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 24), 'int')
        # Getting the type of 'mtx' (line 1066)
        mtx_284561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 12), 'mtx')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1066)
        tuple_284562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1066)
        # Adding element type (line 1066)
        int_284563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1066, 16), tuple_284562, int_284563)
        # Adding element type (line 1066)
        int_284564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1066, 16), tuple_284562, int_284564)
        
        # Storing an element on a container (line 1066)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1066, 12), mtx_284561, (tuple_284562, int_284560))
        # SSA branch for the else part of an if statement (line 1065)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'direction' (line 1067)
        direction_284565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 13), 'direction')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1067)
        tuple_284566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1067)
        # Adding element type (line 1067)
        unicode_284567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 27), 'unicode', u'counterclockwise')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1067, 27), tuple_284566, unicode_284567)
        # Adding element type (line 1067)
        unicode_284568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 47), 'unicode', u'anticlockwise')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1067, 27), tuple_284566, unicode_284568)
        
        # Applying the binary operator 'in' (line 1067)
        result_contains_284569 = python_operator(stypy.reporting.localization.Localization(__file__, 1067, 13), 'in', direction_284565, tuple_284566)
        
        # Testing the type of an if condition (line 1067)
        if_condition_284570 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1067, 13), result_contains_284569)
        # Assigning a type to the variable 'if_condition_284570' (line 1067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 13), 'if_condition_284570', if_condition_284570)
        # SSA begins for if statement (line 1067)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Subscript (line 1068):
        
        # Assigning a Num to a Subscript (line 1068):
        int_284571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, 24), 'int')
        # Getting the type of 'mtx' (line 1068)
        mtx_284572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 12), 'mtx')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1068)
        tuple_284573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1068)
        # Adding element type (line 1068)
        int_284574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1068, 16), tuple_284573, int_284574)
        # Adding element type (line 1068)
        int_284575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1068, 16), tuple_284573, int_284575)
        
        # Storing an element on a container (line 1068)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1068, 12), mtx_284572, (tuple_284573, int_284571))
        # SSA branch for the else part of an if statement (line 1067)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'direction' (line 1069)
        direction_284576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 13), 'direction')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1069)
        tuple_284577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1069, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1069)
        # Adding element type (line 1069)
        int_284578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1069, 27), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1069, 27), tuple_284577, int_284578)
        # Adding element type (line 1069)
        int_284579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1069, 30), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1069, 27), tuple_284577, int_284579)
        
        # Applying the binary operator 'in' (line 1069)
        result_contains_284580 = python_operator(stypy.reporting.localization.Localization(__file__, 1069, 13), 'in', direction_284576, tuple_284577)
        
        # Testing the type of an if condition (line 1069)
        if_condition_284581 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1069, 13), result_contains_284580)
        # Assigning a type to the variable 'if_condition_284581' (line 1069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1069, 13), 'if_condition_284581', if_condition_284581)
        # SSA begins for if statement (line 1069)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 1070):
        
        # Assigning a Name to a Subscript (line 1070):
        # Getting the type of 'direction' (line 1070)
        direction_284582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 24), 'direction')
        # Getting the type of 'mtx' (line 1070)
        mtx_284583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 12), 'mtx')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1070)
        tuple_284584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1070, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1070)
        # Adding element type (line 1070)
        int_284585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1070, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1070, 16), tuple_284584, int_284585)
        # Adding element type (line 1070)
        int_284586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1070, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1070, 16), tuple_284584, int_284586)
        
        # Storing an element on a container (line 1070)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1070, 12), mtx_284583, (tuple_284584, direction_284582))
        # SSA branch for the else part of an if statement (line 1069)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1072)
        # Processing the call arguments (line 1072)
        unicode_284588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1073, 16), 'unicode', u'direction must be 1, -1, clockwise or counterclockwise')
        # Processing the call keyword arguments (line 1072)
        kwargs_284589 = {}
        # Getting the type of 'ValueError' (line 1072)
        ValueError_284587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1072)
        ValueError_call_result_284590 = invoke(stypy.reporting.localization.Localization(__file__, 1072, 18), ValueError_284587, *[unicode_284588], **kwargs_284589)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1072, 12), ValueError_call_result_284590, 'raise parameter', BaseException)
        # SSA join for if statement (line 1069)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1067)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1065)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to invalidate(...): (line 1074)
        # Processing the call keyword arguments (line 1074)
        kwargs_284594 = {}
        # Getting the type of 'self' (line 1074)
        self_284591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'self', False)
        # Obtaining the member '_direction' of a type (line 1074)
        _direction_284592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 8), self_284591, '_direction')
        # Obtaining the member 'invalidate' of a type (line 1074)
        invalidate_284593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 8), _direction_284592, 'invalidate')
        # Calling invalidate(args, kwargs) (line 1074)
        invalidate_call_result_284595 = invoke(stypy.reporting.localization.Localization(__file__, 1074, 8), invalidate_284593, *[], **kwargs_284594)
        
        
        # Call to reset_ticks(...): (line 1077)
        # Processing the call keyword arguments (line 1077)
        kwargs_284599 = {}
        # Getting the type of 'self' (line 1077)
        self_284596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 8), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 1077)
        yaxis_284597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 8), self_284596, 'yaxis')
        # Obtaining the member 'reset_ticks' of a type (line 1077)
        reset_ticks_284598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 8), yaxis_284597, 'reset_ticks')
        # Calling reset_ticks(args, kwargs) (line 1077)
        reset_ticks_call_result_284600 = invoke(stypy.reporting.localization.Localization(__file__, 1077, 8), reset_ticks_284598, *[], **kwargs_284599)
        
        
        # Call to set_clip_path(...): (line 1078)
        # Processing the call arguments (line 1078)
        # Getting the type of 'self' (line 1078)
        self_284604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 33), 'self', False)
        # Obtaining the member 'patch' of a type (line 1078)
        patch_284605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 33), self_284604, 'patch')
        # Processing the call keyword arguments (line 1078)
        kwargs_284606 = {}
        # Getting the type of 'self' (line 1078)
        self_284601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 8), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 1078)
        yaxis_284602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 8), self_284601, 'yaxis')
        # Obtaining the member 'set_clip_path' of a type (line 1078)
        set_clip_path_284603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 8), yaxis_284602, 'set_clip_path')
        # Calling set_clip_path(args, kwargs) (line 1078)
        set_clip_path_call_result_284607 = invoke(stypy.reporting.localization.Localization(__file__, 1078, 8), set_clip_path_284603, *[patch_284605], **kwargs_284606)
        
        
        # ################# End of 'set_theta_direction(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_theta_direction' in the type store
        # Getting the type of 'stypy_return_type' (line 1054)
        stypy_return_type_284608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284608)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_theta_direction'
        return stypy_return_type_284608


    @norecursion
    def get_theta_direction(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_theta_direction'
        module_type_store = module_type_store.open_function_context('get_theta_direction', 1080, 4, False)
        # Assigning a type to the variable 'self' (line 1081)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1081, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.get_theta_direction.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.get_theta_direction.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.get_theta_direction.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.get_theta_direction.__dict__.__setitem__('stypy_function_name', 'PolarAxes.get_theta_direction')
        PolarAxes.get_theta_direction.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.get_theta_direction.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.get_theta_direction.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.get_theta_direction.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.get_theta_direction.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.get_theta_direction.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.get_theta_direction.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.get_theta_direction', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_theta_direction', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_theta_direction(...)' code ##################

        unicode_284609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1089, (-1)), 'unicode', u'\n        Get the direction in which theta increases.\n\n        -1:\n           Theta increases in the clockwise direction\n\n        1:\n           Theta increases in the counterclockwise direction\n        ')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1090)
        tuple_284610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1090)
        # Adding element type (line 1090)
        int_284611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 44), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1090, 44), tuple_284610, int_284611)
        # Adding element type (line 1090)
        int_284612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 47), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1090, 44), tuple_284610, int_284612)
        
        
        # Call to get_matrix(...): (line 1090)
        # Processing the call keyword arguments (line 1090)
        kwargs_284616 = {}
        # Getting the type of 'self' (line 1090)
        self_284613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 15), 'self', False)
        # Obtaining the member '_direction' of a type (line 1090)
        _direction_284614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 15), self_284613, '_direction')
        # Obtaining the member 'get_matrix' of a type (line 1090)
        get_matrix_284615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 15), _direction_284614, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1090)
        get_matrix_call_result_284617 = invoke(stypy.reporting.localization.Localization(__file__, 1090, 15), get_matrix_284615, *[], **kwargs_284616)
        
        # Obtaining the member '__getitem__' of a type (line 1090)
        getitem___284618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 15), get_matrix_call_result_284617, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1090)
        subscript_call_result_284619 = invoke(stypy.reporting.localization.Localization(__file__, 1090, 15), getitem___284618, tuple_284610)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'stypy_return_type', subscript_call_result_284619)
        
        # ################# End of 'get_theta_direction(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_theta_direction' in the type store
        # Getting the type of 'stypy_return_type' (line 1080)
        stypy_return_type_284620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284620)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_theta_direction'
        return stypy_return_type_284620


    @norecursion
    def set_rmax(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_rmax'
        module_type_store = module_type_store.open_function_context('set_rmax', 1092, 4, False)
        # Assigning a type to the variable 'self' (line 1093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1093, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_rmax.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_rmax.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_rmax.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_rmax.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_rmax')
        PolarAxes.set_rmax.__dict__.__setitem__('stypy_param_names_list', ['rmax'])
        PolarAxes.set_rmax.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.set_rmax.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.set_rmax.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_rmax.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_rmax.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_rmax.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_rmax', ['rmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_rmax', localization, ['rmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_rmax(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1093):
        
        # Assigning a Name to a Attribute (line 1093):
        # Getting the type of 'rmax' (line 1093)
        rmax_284621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 26), 'rmax')
        # Getting the type of 'self' (line 1093)
        self_284622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 8), 'self')
        # Obtaining the member 'viewLim' of a type (line 1093)
        viewLim_284623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 8), self_284622, 'viewLim')
        # Setting the type of the member 'y1' of a type (line 1093)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 8), viewLim_284623, 'y1', rmax_284621)
        
        # ################# End of 'set_rmax(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_rmax' in the type store
        # Getting the type of 'stypy_return_type' (line 1092)
        stypy_return_type_284624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284624)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_rmax'
        return stypy_return_type_284624


    @norecursion
    def get_rmax(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_rmax'
        module_type_store = module_type_store.open_function_context('get_rmax', 1095, 4, False)
        # Assigning a type to the variable 'self' (line 1096)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.get_rmax.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.get_rmax.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.get_rmax.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.get_rmax.__dict__.__setitem__('stypy_function_name', 'PolarAxes.get_rmax')
        PolarAxes.get_rmax.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.get_rmax.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.get_rmax.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.get_rmax.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.get_rmax.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.get_rmax.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.get_rmax.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.get_rmax', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_rmax', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_rmax(...)' code ##################

        # Getting the type of 'self' (line 1096)
        self_284625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 15), 'self')
        # Obtaining the member 'viewLim' of a type (line 1096)
        viewLim_284626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1096, 15), self_284625, 'viewLim')
        # Obtaining the member 'ymax' of a type (line 1096)
        ymax_284627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1096, 15), viewLim_284626, 'ymax')
        # Assigning a type to the variable 'stypy_return_type' (line 1096)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 8), 'stypy_return_type', ymax_284627)
        
        # ################# End of 'get_rmax(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_rmax' in the type store
        # Getting the type of 'stypy_return_type' (line 1095)
        stypy_return_type_284628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284628)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_rmax'
        return stypy_return_type_284628


    @norecursion
    def set_rmin(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_rmin'
        module_type_store = module_type_store.open_function_context('set_rmin', 1098, 4, False)
        # Assigning a type to the variable 'self' (line 1099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_rmin.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_rmin.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_rmin.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_rmin.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_rmin')
        PolarAxes.set_rmin.__dict__.__setitem__('stypy_param_names_list', ['rmin'])
        PolarAxes.set_rmin.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.set_rmin.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.set_rmin.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_rmin.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_rmin.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_rmin.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_rmin', ['rmin'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_rmin', localization, ['rmin'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_rmin(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1099):
        
        # Assigning a Name to a Attribute (line 1099):
        # Getting the type of 'rmin' (line 1099)
        rmin_284629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 26), 'rmin')
        # Getting the type of 'self' (line 1099)
        self_284630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 8), 'self')
        # Obtaining the member 'viewLim' of a type (line 1099)
        viewLim_284631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 8), self_284630, 'viewLim')
        # Setting the type of the member 'y0' of a type (line 1099)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 8), viewLim_284631, 'y0', rmin_284629)
        
        # ################# End of 'set_rmin(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_rmin' in the type store
        # Getting the type of 'stypy_return_type' (line 1098)
        stypy_return_type_284632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284632)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_rmin'
        return stypy_return_type_284632


    @norecursion
    def get_rmin(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_rmin'
        module_type_store = module_type_store.open_function_context('get_rmin', 1101, 4, False)
        # Assigning a type to the variable 'self' (line 1102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1102, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.get_rmin.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.get_rmin.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.get_rmin.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.get_rmin.__dict__.__setitem__('stypy_function_name', 'PolarAxes.get_rmin')
        PolarAxes.get_rmin.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.get_rmin.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.get_rmin.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.get_rmin.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.get_rmin.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.get_rmin.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.get_rmin.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.get_rmin', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_rmin', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_rmin(...)' code ##################

        # Getting the type of 'self' (line 1102)
        self_284633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 15), 'self')
        # Obtaining the member 'viewLim' of a type (line 1102)
        viewLim_284634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 15), self_284633, 'viewLim')
        # Obtaining the member 'ymin' of a type (line 1102)
        ymin_284635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 15), viewLim_284634, 'ymin')
        # Assigning a type to the variable 'stypy_return_type' (line 1102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1102, 8), 'stypy_return_type', ymin_284635)
        
        # ################# End of 'get_rmin(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_rmin' in the type store
        # Getting the type of 'stypy_return_type' (line 1101)
        stypy_return_type_284636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284636)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_rmin'
        return stypy_return_type_284636


    @norecursion
    def set_rorigin(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_rorigin'
        module_type_store = module_type_store.open_function_context('set_rorigin', 1104, 4, False)
        # Assigning a type to the variable 'self' (line 1105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1105, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_rorigin.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_rorigin.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_rorigin.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_rorigin.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_rorigin')
        PolarAxes.set_rorigin.__dict__.__setitem__('stypy_param_names_list', ['rorigin'])
        PolarAxes.set_rorigin.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.set_rorigin.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.set_rorigin.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_rorigin.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_rorigin.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_rorigin.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_rorigin', ['rorigin'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_rorigin', localization, ['rorigin'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_rorigin(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1105):
        
        # Assigning a Name to a Attribute (line 1105):
        # Getting the type of 'rorigin' (line 1105)
        rorigin_284637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 40), 'rorigin')
        # Getting the type of 'self' (line 1105)
        self_284638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'self')
        # Obtaining the member '_originViewLim' of a type (line 1105)
        _originViewLim_284639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1105, 8), self_284638, '_originViewLim')
        # Setting the type of the member 'locked_y0' of a type (line 1105)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1105, 8), _originViewLim_284639, 'locked_y0', rorigin_284637)
        
        # ################# End of 'set_rorigin(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_rorigin' in the type store
        # Getting the type of 'stypy_return_type' (line 1104)
        stypy_return_type_284640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284640)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_rorigin'
        return stypy_return_type_284640


    @norecursion
    def get_rorigin(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_rorigin'
        module_type_store = module_type_store.open_function_context('get_rorigin', 1107, 4, False)
        # Assigning a type to the variable 'self' (line 1108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1108, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.get_rorigin.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.get_rorigin.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.get_rorigin.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.get_rorigin.__dict__.__setitem__('stypy_function_name', 'PolarAxes.get_rorigin')
        PolarAxes.get_rorigin.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.get_rorigin.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.get_rorigin.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.get_rorigin.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.get_rorigin.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.get_rorigin.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.get_rorigin.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.get_rorigin', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_rorigin', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_rorigin(...)' code ##################

        # Getting the type of 'self' (line 1108)
        self_284641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 15), 'self')
        # Obtaining the member '_originViewLim' of a type (line 1108)
        _originViewLim_284642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 15), self_284641, '_originViewLim')
        # Obtaining the member 'y0' of a type (line 1108)
        y0_284643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 15), _originViewLim_284642, 'y0')
        # Assigning a type to the variable 'stypy_return_type' (line 1108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1108, 8), 'stypy_return_type', y0_284643)
        
        # ################# End of 'get_rorigin(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_rorigin' in the type store
        # Getting the type of 'stypy_return_type' (line 1107)
        stypy_return_type_284644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284644)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_rorigin'
        return stypy_return_type_284644


    @norecursion
    def set_rlim(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_rlim'
        module_type_store = module_type_store.open_function_context('set_rlim', 1110, 4, False)
        # Assigning a type to the variable 'self' (line 1111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_rlim.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_rlim.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_rlim.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_rlim.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_rlim')
        PolarAxes.set_rlim.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.set_rlim.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        PolarAxes.set_rlim.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        PolarAxes.set_rlim.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_rlim.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_rlim.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_rlim.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_rlim', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_rlim', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_rlim(...)' code ##################

        
        
        unicode_284645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1111, 11), 'unicode', u'rmin')
        # Getting the type of 'kwargs' (line 1111)
        kwargs_284646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 21), 'kwargs')
        # Applying the binary operator 'in' (line 1111)
        result_contains_284647 = python_operator(stypy.reporting.localization.Localization(__file__, 1111, 11), 'in', unicode_284645, kwargs_284646)
        
        # Testing the type of an if condition (line 1111)
        if_condition_284648 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1111, 8), result_contains_284647)
        # Assigning a type to the variable 'if_condition_284648' (line 1111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 8), 'if_condition_284648', if_condition_284648)
        # SSA begins for if statement (line 1111)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 1112):
        
        # Assigning a Call to a Subscript (line 1112):
        
        # Call to pop(...): (line 1112)
        # Processing the call arguments (line 1112)
        unicode_284651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1112, 40), 'unicode', u'rmin')
        # Processing the call keyword arguments (line 1112)
        kwargs_284652 = {}
        # Getting the type of 'kwargs' (line 1112)
        kwargs_284649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 29), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 1112)
        pop_284650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 29), kwargs_284649, 'pop')
        # Calling pop(args, kwargs) (line 1112)
        pop_call_result_284653 = invoke(stypy.reporting.localization.Localization(__file__, 1112, 29), pop_284650, *[unicode_284651], **kwargs_284652)
        
        # Getting the type of 'kwargs' (line 1112)
        kwargs_284654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 12), 'kwargs')
        unicode_284655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1112, 19), 'unicode', u'ymin')
        # Storing an element on a container (line 1112)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1112, 12), kwargs_284654, (unicode_284655, pop_call_result_284653))
        # SSA join for if statement (line 1111)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_284656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, 11), 'unicode', u'rmax')
        # Getting the type of 'kwargs' (line 1113)
        kwargs_284657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 21), 'kwargs')
        # Applying the binary operator 'in' (line 1113)
        result_contains_284658 = python_operator(stypy.reporting.localization.Localization(__file__, 1113, 11), 'in', unicode_284656, kwargs_284657)
        
        # Testing the type of an if condition (line 1113)
        if_condition_284659 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1113, 8), result_contains_284658)
        # Assigning a type to the variable 'if_condition_284659' (line 1113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 8), 'if_condition_284659', if_condition_284659)
        # SSA begins for if statement (line 1113)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 1114):
        
        # Assigning a Call to a Subscript (line 1114):
        
        # Call to pop(...): (line 1114)
        # Processing the call arguments (line 1114)
        unicode_284662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, 40), 'unicode', u'rmax')
        # Processing the call keyword arguments (line 1114)
        kwargs_284663 = {}
        # Getting the type of 'kwargs' (line 1114)
        kwargs_284660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 29), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 1114)
        pop_284661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 29), kwargs_284660, 'pop')
        # Calling pop(args, kwargs) (line 1114)
        pop_call_result_284664 = invoke(stypy.reporting.localization.Localization(__file__, 1114, 29), pop_284661, *[unicode_284662], **kwargs_284663)
        
        # Getting the type of 'kwargs' (line 1114)
        kwargs_284665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 12), 'kwargs')
        unicode_284666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, 19), 'unicode', u'ymax')
        # Storing an element on a container (line 1114)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1114, 12), kwargs_284665, (unicode_284666, pop_call_result_284664))
        # SSA join for if statement (line 1113)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_ylim(...): (line 1115)
        # Getting the type of 'args' (line 1115)
        args_284669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 30), 'args', False)
        # Processing the call keyword arguments (line 1115)
        # Getting the type of 'kwargs' (line 1115)
        kwargs_284670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 38), 'kwargs', False)
        kwargs_284671 = {'kwargs_284670': kwargs_284670}
        # Getting the type of 'self' (line 1115)
        self_284667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 15), 'self', False)
        # Obtaining the member 'set_ylim' of a type (line 1115)
        set_ylim_284668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 15), self_284667, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 1115)
        set_ylim_call_result_284672 = invoke(stypy.reporting.localization.Localization(__file__, 1115, 15), set_ylim_284668, *[args_284669], **kwargs_284671)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'stypy_return_type', set_ylim_call_result_284672)
        
        # ################# End of 'set_rlim(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_rlim' in the type store
        # Getting the type of 'stypy_return_type' (line 1110)
        stypy_return_type_284673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284673)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_rlim'
        return stypy_return_type_284673


    @norecursion
    def get_rlabel_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_rlabel_position'
        module_type_store = module_type_store.open_function_context('get_rlabel_position', 1117, 4, False)
        # Assigning a type to the variable 'self' (line 1118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.get_rlabel_position.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.get_rlabel_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.get_rlabel_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.get_rlabel_position.__dict__.__setitem__('stypy_function_name', 'PolarAxes.get_rlabel_position')
        PolarAxes.get_rlabel_position.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.get_rlabel_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.get_rlabel_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.get_rlabel_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.get_rlabel_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.get_rlabel_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.get_rlabel_position.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.get_rlabel_position', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_rlabel_position', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_rlabel_position(...)' code ##################

        unicode_284674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, (-1)), 'unicode', u'\n        Returns\n        -------\n        float\n            The theta position of the radius labels in degrees.\n        ')
        
        # Call to rad2deg(...): (line 1124)
        # Processing the call arguments (line 1124)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1124)
        tuple_284677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 62), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1124)
        # Adding element type (line 1124)
        int_284678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 62), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1124, 62), tuple_284677, int_284678)
        # Adding element type (line 1124)
        int_284679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 65), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1124, 62), tuple_284677, int_284679)
        
        
        # Call to get_matrix(...): (line 1124)
        # Processing the call keyword arguments (line 1124)
        kwargs_284683 = {}
        # Getting the type of 'self' (line 1124)
        self_284680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 26), 'self', False)
        # Obtaining the member '_r_label_position' of a type (line 1124)
        _r_label_position_284681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 26), self_284680, '_r_label_position')
        # Obtaining the member 'get_matrix' of a type (line 1124)
        get_matrix_284682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 26), _r_label_position_284681, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1124)
        get_matrix_call_result_284684 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 26), get_matrix_284682, *[], **kwargs_284683)
        
        # Obtaining the member '__getitem__' of a type (line 1124)
        getitem___284685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 26), get_matrix_call_result_284684, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1124)
        subscript_call_result_284686 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 26), getitem___284685, tuple_284677)
        
        # Processing the call keyword arguments (line 1124)
        kwargs_284687 = {}
        # Getting the type of 'np' (line 1124)
        np_284675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 15), 'np', False)
        # Obtaining the member 'rad2deg' of a type (line 1124)
        rad2deg_284676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 15), np_284675, 'rad2deg')
        # Calling rad2deg(args, kwargs) (line 1124)
        rad2deg_call_result_284688 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 15), rad2deg_284676, *[subscript_call_result_284686], **kwargs_284687)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 8), 'stypy_return_type', rad2deg_call_result_284688)
        
        # ################# End of 'get_rlabel_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_rlabel_position' in the type store
        # Getting the type of 'stypy_return_type' (line 1117)
        stypy_return_type_284689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284689)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_rlabel_position'
        return stypy_return_type_284689


    @norecursion
    def set_rlabel_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_rlabel_position'
        module_type_store = module_type_store.open_function_context('set_rlabel_position', 1126, 4, False)
        # Assigning a type to the variable 'self' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_rlabel_position.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_rlabel_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_rlabel_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_rlabel_position.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_rlabel_position')
        PolarAxes.set_rlabel_position.__dict__.__setitem__('stypy_param_names_list', ['value'])
        PolarAxes.set_rlabel_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.set_rlabel_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.set_rlabel_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_rlabel_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_rlabel_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_rlabel_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_rlabel_position', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_rlabel_position', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_rlabel_position(...)' code ##################

        unicode_284690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1133, (-1)), 'unicode', u'Updates the theta position of the radius labels.\n\n        Parameters\n        ----------\n        value : number\n            The angular position of the radius labels in degrees.\n        ')
        
        # Call to translate(...): (line 1134)
        # Processing the call arguments (line 1134)
        
        # Call to deg2rad(...): (line 1134)
        # Processing the call arguments (line 1134)
        # Getting the type of 'value' (line 1134)
        value_284699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 60), 'value', False)
        # Processing the call keyword arguments (line 1134)
        kwargs_284700 = {}
        # Getting the type of 'np' (line 1134)
        np_284697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 49), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 1134)
        deg2rad_284698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1134, 49), np_284697, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 1134)
        deg2rad_call_result_284701 = invoke(stypy.reporting.localization.Localization(__file__, 1134, 49), deg2rad_284698, *[value_284699], **kwargs_284700)
        
        float_284702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 68), 'float')
        # Processing the call keyword arguments (line 1134)
        kwargs_284703 = {}
        
        # Call to clear(...): (line 1134)
        # Processing the call keyword arguments (line 1134)
        kwargs_284694 = {}
        # Getting the type of 'self' (line 1134)
        self_284691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 8), 'self', False)
        # Obtaining the member '_r_label_position' of a type (line 1134)
        _r_label_position_284692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1134, 8), self_284691, '_r_label_position')
        # Obtaining the member 'clear' of a type (line 1134)
        clear_284693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1134, 8), _r_label_position_284692, 'clear')
        # Calling clear(args, kwargs) (line 1134)
        clear_call_result_284695 = invoke(stypy.reporting.localization.Localization(__file__, 1134, 8), clear_284693, *[], **kwargs_284694)
        
        # Obtaining the member 'translate' of a type (line 1134)
        translate_284696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1134, 8), clear_call_result_284695, 'translate')
        # Calling translate(args, kwargs) (line 1134)
        translate_call_result_284704 = invoke(stypy.reporting.localization.Localization(__file__, 1134, 8), translate_284696, *[deg2rad_call_result_284701, float_284702], **kwargs_284703)
        
        
        # Call to reset_ticks(...): (line 1135)
        # Processing the call keyword arguments (line 1135)
        kwargs_284708 = {}
        # Getting the type of 'self' (line 1135)
        self_284705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 8), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 1135)
        yaxis_284706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1135, 8), self_284705, 'yaxis')
        # Obtaining the member 'reset_ticks' of a type (line 1135)
        reset_ticks_284707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1135, 8), yaxis_284706, 'reset_ticks')
        # Calling reset_ticks(args, kwargs) (line 1135)
        reset_ticks_call_result_284709 = invoke(stypy.reporting.localization.Localization(__file__, 1135, 8), reset_ticks_284707, *[], **kwargs_284708)
        
        
        # Call to set_clip_path(...): (line 1136)
        # Processing the call arguments (line 1136)
        # Getting the type of 'self' (line 1136)
        self_284713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 33), 'self', False)
        # Obtaining the member 'patch' of a type (line 1136)
        patch_284714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 33), self_284713, 'patch')
        # Processing the call keyword arguments (line 1136)
        kwargs_284715 = {}
        # Getting the type of 'self' (line 1136)
        self_284710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 8), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 1136)
        yaxis_284711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 8), self_284710, 'yaxis')
        # Obtaining the member 'set_clip_path' of a type (line 1136)
        set_clip_path_284712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 8), yaxis_284711, 'set_clip_path')
        # Calling set_clip_path(args, kwargs) (line 1136)
        set_clip_path_call_result_284716 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 8), set_clip_path_284712, *[patch_284714], **kwargs_284715)
        
        
        # ################# End of 'set_rlabel_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_rlabel_position' in the type store
        # Getting the type of 'stypy_return_type' (line 1126)
        stypy_return_type_284717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284717)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_rlabel_position'
        return stypy_return_type_284717


    @norecursion
    def set_yscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_yscale'
        module_type_store = module_type_store.open_function_context('set_yscale', 1138, 4, False)
        # Assigning a type to the variable 'self' (line 1139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_yscale.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_yscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_yscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_yscale.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_yscale')
        PolarAxes.set_yscale.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.set_yscale.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        PolarAxes.set_yscale.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        PolarAxes.set_yscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_yscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_yscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_yscale.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_yscale', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_yscale', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_yscale(...)' code ##################

        
        # Call to set_yscale(...): (line 1139)
        # Processing the call arguments (line 1139)
        # Getting the type of 'self' (line 1139)
        self_284720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 24), 'self', False)
        # Getting the type of 'args' (line 1139)
        args_284721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 31), 'args', False)
        # Processing the call keyword arguments (line 1139)
        # Getting the type of 'kwargs' (line 1139)
        kwargs_284722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 39), 'kwargs', False)
        kwargs_284723 = {'kwargs_284722': kwargs_284722}
        # Getting the type of 'Axes' (line 1139)
        Axes_284718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'Axes', False)
        # Obtaining the member 'set_yscale' of a type (line 1139)
        set_yscale_284719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 8), Axes_284718, 'set_yscale')
        # Calling set_yscale(args, kwargs) (line 1139)
        set_yscale_call_result_284724 = invoke(stypy.reporting.localization.Localization(__file__, 1139, 8), set_yscale_284719, *[self_284720, args_284721], **kwargs_284723)
        
        
        # Call to set_major_locator(...): (line 1140)
        # Processing the call arguments (line 1140)
        
        # Call to RadialLocator(...): (line 1141)
        # Processing the call arguments (line 1141)
        
        # Call to get_major_locator(...): (line 1141)
        # Processing the call keyword arguments (line 1141)
        kwargs_284733 = {}
        # Getting the type of 'self' (line 1141)
        self_284730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 31), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 1141)
        yaxis_284731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1141, 31), self_284730, 'yaxis')
        # Obtaining the member 'get_major_locator' of a type (line 1141)
        get_major_locator_284732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1141, 31), yaxis_284731, 'get_major_locator')
        # Calling get_major_locator(args, kwargs) (line 1141)
        get_major_locator_call_result_284734 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 31), get_major_locator_284732, *[], **kwargs_284733)
        
        # Getting the type of 'self' (line 1141)
        self_284735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 63), 'self', False)
        # Processing the call keyword arguments (line 1141)
        kwargs_284736 = {}
        # Getting the type of 'self' (line 1141)
        self_284728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 12), 'self', False)
        # Obtaining the member 'RadialLocator' of a type (line 1141)
        RadialLocator_284729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1141, 12), self_284728, 'RadialLocator')
        # Calling RadialLocator(args, kwargs) (line 1141)
        RadialLocator_call_result_284737 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 12), RadialLocator_284729, *[get_major_locator_call_result_284734, self_284735], **kwargs_284736)
        
        # Processing the call keyword arguments (line 1140)
        kwargs_284738 = {}
        # Getting the type of 'self' (line 1140)
        self_284725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 1140)
        yaxis_284726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 8), self_284725, 'yaxis')
        # Obtaining the member 'set_major_locator' of a type (line 1140)
        set_major_locator_284727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 8), yaxis_284726, 'set_major_locator')
        # Calling set_major_locator(args, kwargs) (line 1140)
        set_major_locator_call_result_284739 = invoke(stypy.reporting.localization.Localization(__file__, 1140, 8), set_major_locator_284727, *[RadialLocator_call_result_284737], **kwargs_284738)
        
        
        # ################# End of 'set_yscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_yscale' in the type store
        # Getting the type of 'stypy_return_type' (line 1138)
        stypy_return_type_284740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284740)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_yscale'
        return stypy_return_type_284740


    @norecursion
    def set_rscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_rscale'
        module_type_store = module_type_store.open_function_context('set_rscale', 1143, 4, False)
        # Assigning a type to the variable 'self' (line 1144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_rscale.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_rscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_rscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_rscale.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_rscale')
        PolarAxes.set_rscale.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.set_rscale.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        PolarAxes.set_rscale.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        PolarAxes.set_rscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_rscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_rscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_rscale.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_rscale', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_rscale', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_rscale(...)' code ##################

        
        # Call to set_yscale(...): (line 1144)
        # Processing the call arguments (line 1144)
        # Getting the type of 'self' (line 1144)
        self_284743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 31), 'self', False)
        # Getting the type of 'args' (line 1144)
        args_284744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 38), 'args', False)
        # Processing the call keyword arguments (line 1144)
        # Getting the type of 'kwargs' (line 1144)
        kwargs_284745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 46), 'kwargs', False)
        kwargs_284746 = {'kwargs_284745': kwargs_284745}
        # Getting the type of 'Axes' (line 1144)
        Axes_284741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 15), 'Axes', False)
        # Obtaining the member 'set_yscale' of a type (line 1144)
        set_yscale_284742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 15), Axes_284741, 'set_yscale')
        # Calling set_yscale(args, kwargs) (line 1144)
        set_yscale_call_result_284747 = invoke(stypy.reporting.localization.Localization(__file__, 1144, 15), set_yscale_284742, *[self_284743, args_284744], **kwargs_284746)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 8), 'stypy_return_type', set_yscale_call_result_284747)
        
        # ################# End of 'set_rscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_rscale' in the type store
        # Getting the type of 'stypy_return_type' (line 1143)
        stypy_return_type_284748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284748)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_rscale'
        return stypy_return_type_284748


    @norecursion
    def set_rticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_rticks'
        module_type_store = module_type_store.open_function_context('set_rticks', 1146, 4, False)
        # Assigning a type to the variable 'self' (line 1147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_rticks.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_rticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_rticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_rticks.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_rticks')
        PolarAxes.set_rticks.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.set_rticks.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        PolarAxes.set_rticks.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        PolarAxes.set_rticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_rticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_rticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_rticks.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_rticks', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_rticks', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_rticks(...)' code ##################

        
        # Call to set_yticks(...): (line 1147)
        # Processing the call arguments (line 1147)
        # Getting the type of 'self' (line 1147)
        self_284751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 31), 'self', False)
        # Getting the type of 'args' (line 1147)
        args_284752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 38), 'args', False)
        # Processing the call keyword arguments (line 1147)
        # Getting the type of 'kwargs' (line 1147)
        kwargs_284753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 46), 'kwargs', False)
        kwargs_284754 = {'kwargs_284753': kwargs_284753}
        # Getting the type of 'Axes' (line 1147)
        Axes_284749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 15), 'Axes', False)
        # Obtaining the member 'set_yticks' of a type (line 1147)
        set_yticks_284750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 15), Axes_284749, 'set_yticks')
        # Calling set_yticks(args, kwargs) (line 1147)
        set_yticks_call_result_284755 = invoke(stypy.reporting.localization.Localization(__file__, 1147, 15), set_yticks_284750, *[self_284751, args_284752], **kwargs_284754)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 8), 'stypy_return_type', set_yticks_call_result_284755)
        
        # ################# End of 'set_rticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_rticks' in the type store
        # Getting the type of 'stypy_return_type' (line 1146)
        stypy_return_type_284756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284756)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_rticks'
        return stypy_return_type_284756


    @norecursion
    def set_thetagrids(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1150)
        None_284757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 44), 'None')
        # Getting the type of 'None' (line 1150)
        None_284758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 55), 'None')
        # Getting the type of 'None' (line 1150)
        None_284759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 65), 'None')
        defaults = [None_284757, None_284758, None_284759]
        # Create a new context for function 'set_thetagrids'
        module_type_store = module_type_store.open_function_context('set_thetagrids', 1149, 4, False)
        # Assigning a type to the variable 'self' (line 1150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_thetagrids.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_thetagrids.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_thetagrids.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_thetagrids.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_thetagrids')
        PolarAxes.set_thetagrids.__dict__.__setitem__('stypy_param_names_list', ['angles', 'labels', 'frac', 'fmt'])
        PolarAxes.set_thetagrids.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.set_thetagrids.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        PolarAxes.set_thetagrids.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_thetagrids.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_thetagrids.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_thetagrids.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_thetagrids', ['angles', 'labels', 'frac', 'fmt'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_thetagrids', localization, ['angles', 'labels', 'frac', 'fmt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_thetagrids(...)' code ##################

        unicode_284760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, (-1)), 'unicode', u'\n        Set the angles at which to place the theta grids (these\n        gridlines are equal along the theta dimension).  *angles* is in\n        degrees.\n\n        *labels*, if not None, is a ``len(angles)`` list of strings of\n        the labels to use at each angle.\n\n        If *labels* is None, the labels will be ``fmt %% angle``\n\n        *frac* is the fraction of the polar axes radius at which to\n        place the label (1 is the edge). e.g., 1.05 is outside the axes\n        and 0.95 is inside the axes.\n\n        Return value is a list of tuples (*line*, *label*), where\n        *line* is :class:`~matplotlib.lines.Line2D` instances and the\n        *label* is :class:`~matplotlib.text.Text` instances.\n\n        kwargs are optional text properties for the labels:\n\n        %(Text)s\n\n        ACCEPTS: sequence of floats\n        ')
        
        # Assigning a Call to a Name (line 1177):
        
        # Assigning a Call to a Name (line 1177):
        
        # Call to convert_yunits(...): (line 1177)
        # Processing the call arguments (line 1177)
        # Getting the type of 'angles' (line 1177)
        angles_284763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 37), 'angles', False)
        # Processing the call keyword arguments (line 1177)
        kwargs_284764 = {}
        # Getting the type of 'self' (line 1177)
        self_284761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 17), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 1177)
        convert_yunits_284762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 17), self_284761, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 1177)
        convert_yunits_call_result_284765 = invoke(stypy.reporting.localization.Localization(__file__, 1177, 17), convert_yunits_284762, *[angles_284763], **kwargs_284764)
        
        # Assigning a type to the variable 'angles' (line 1177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1177, 8), 'angles', convert_yunits_call_result_284765)
        
        # Assigning a Call to a Name (line 1178):
        
        # Assigning a Call to a Name (line 1178):
        
        # Call to asarray(...): (line 1178)
        # Processing the call arguments (line 1178)
        # Getting the type of 'angles' (line 1178)
        angles_284768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 28), 'angles', False)
        # Getting the type of 'float' (line 1178)
        float_284769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 36), 'float', False)
        # Processing the call keyword arguments (line 1178)
        kwargs_284770 = {}
        # Getting the type of 'np' (line 1178)
        np_284766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 17), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1178)
        asarray_284767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1178, 17), np_284766, 'asarray')
        # Calling asarray(args, kwargs) (line 1178)
        asarray_call_result_284771 = invoke(stypy.reporting.localization.Localization(__file__, 1178, 17), asarray_284767, *[angles_284768, float_284769], **kwargs_284770)
        
        # Assigning a type to the variable 'angles' (line 1178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1178, 8), 'angles', asarray_call_result_284771)
        
        # Call to set_xticks(...): (line 1179)
        # Processing the call arguments (line 1179)
        # Getting the type of 'angles' (line 1179)
        angles_284774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 24), 'angles', False)
        # Getting the type of 'np' (line 1179)
        np_284775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 34), 'np', False)
        # Obtaining the member 'pi' of a type (line 1179)
        pi_284776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 34), np_284775, 'pi')
        float_284777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 42), 'float')
        # Applying the binary operator 'div' (line 1179)
        result_div_284778 = python_operator(stypy.reporting.localization.Localization(__file__, 1179, 34), 'div', pi_284776, float_284777)
        
        # Applying the binary operator '*' (line 1179)
        result_mul_284779 = python_operator(stypy.reporting.localization.Localization(__file__, 1179, 24), '*', angles_284774, result_div_284778)
        
        # Processing the call keyword arguments (line 1179)
        kwargs_284780 = {}
        # Getting the type of 'self' (line 1179)
        self_284772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 8), 'self', False)
        # Obtaining the member 'set_xticks' of a type (line 1179)
        set_xticks_284773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 8), self_284772, 'set_xticks')
        # Calling set_xticks(args, kwargs) (line 1179)
        set_xticks_call_result_284781 = invoke(stypy.reporting.localization.Localization(__file__, 1179, 8), set_xticks_284773, *[result_mul_284779], **kwargs_284780)
        
        
        # Type idiom detected: calculating its left and rigth part (line 1180)
        # Getting the type of 'labels' (line 1180)
        labels_284782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 8), 'labels')
        # Getting the type of 'None' (line 1180)
        None_284783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 25), 'None')
        
        (may_be_284784, more_types_in_union_284785) = may_not_be_none(labels_284782, None_284783)

        if may_be_284784:

            if more_types_in_union_284785:
                # Runtime conditional SSA (line 1180)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_xticklabels(...): (line 1181)
            # Processing the call arguments (line 1181)
            # Getting the type of 'labels' (line 1181)
            labels_284788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 33), 'labels', False)
            # Processing the call keyword arguments (line 1181)
            kwargs_284789 = {}
            # Getting the type of 'self' (line 1181)
            self_284786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 12), 'self', False)
            # Obtaining the member 'set_xticklabels' of a type (line 1181)
            set_xticklabels_284787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 12), self_284786, 'set_xticklabels')
            # Calling set_xticklabels(args, kwargs) (line 1181)
            set_xticklabels_call_result_284790 = invoke(stypy.reporting.localization.Localization(__file__, 1181, 12), set_xticklabels_284787, *[labels_284788], **kwargs_284789)
            

            if more_types_in_union_284785:
                # Runtime conditional SSA for else branch (line 1180)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_284784) or more_types_in_union_284785):
            
            # Type idiom detected: calculating its left and rigth part (line 1182)
            # Getting the type of 'fmt' (line 1182)
            fmt_284791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 13), 'fmt')
            # Getting the type of 'None' (line 1182)
            None_284792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 24), 'None')
            
            (may_be_284793, more_types_in_union_284794) = may_not_be_none(fmt_284791, None_284792)

            if may_be_284793:

                if more_types_in_union_284794:
                    # Runtime conditional SSA (line 1182)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Call to set_major_formatter(...): (line 1183)
                # Processing the call arguments (line 1183)
                
                # Call to FormatStrFormatter(...): (line 1183)
                # Processing the call arguments (line 1183)
                # Getting the type of 'fmt' (line 1183)
                fmt_284800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 70), 'fmt', False)
                # Processing the call keyword arguments (line 1183)
                kwargs_284801 = {}
                # Getting the type of 'mticker' (line 1183)
                mticker_284798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 43), 'mticker', False)
                # Obtaining the member 'FormatStrFormatter' of a type (line 1183)
                FormatStrFormatter_284799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 43), mticker_284798, 'FormatStrFormatter')
                # Calling FormatStrFormatter(args, kwargs) (line 1183)
                FormatStrFormatter_call_result_284802 = invoke(stypy.reporting.localization.Localization(__file__, 1183, 43), FormatStrFormatter_284799, *[fmt_284800], **kwargs_284801)
                
                # Processing the call keyword arguments (line 1183)
                kwargs_284803 = {}
                # Getting the type of 'self' (line 1183)
                self_284795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 12), 'self', False)
                # Obtaining the member 'xaxis' of a type (line 1183)
                xaxis_284796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 12), self_284795, 'xaxis')
                # Obtaining the member 'set_major_formatter' of a type (line 1183)
                set_major_formatter_284797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 12), xaxis_284796, 'set_major_formatter')
                # Calling set_major_formatter(args, kwargs) (line 1183)
                set_major_formatter_call_result_284804 = invoke(stypy.reporting.localization.Localization(__file__, 1183, 12), set_major_formatter_284797, *[FormatStrFormatter_call_result_284802], **kwargs_284803)
                

                if more_types_in_union_284794:
                    # SSA join for if statement (line 1182)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_284784 and more_types_in_union_284785):
                # SSA join for if statement (line 1180)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to get_ticklabels(...): (line 1184)
        # Processing the call keyword arguments (line 1184)
        kwargs_284808 = {}
        # Getting the type of 'self' (line 1184)
        self_284805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 17), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 1184)
        xaxis_284806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1184, 17), self_284805, 'xaxis')
        # Obtaining the member 'get_ticklabels' of a type (line 1184)
        get_ticklabels_284807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1184, 17), xaxis_284806, 'get_ticklabels')
        # Calling get_ticklabels(args, kwargs) (line 1184)
        get_ticklabels_call_result_284809 = invoke(stypy.reporting.localization.Localization(__file__, 1184, 17), get_ticklabels_284807, *[], **kwargs_284808)
        
        # Testing the type of a for loop iterable (line 1184)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1184, 8), get_ticklabels_call_result_284809)
        # Getting the type of the for loop variable (line 1184)
        for_loop_var_284810 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1184, 8), get_ticklabels_call_result_284809)
        # Assigning a type to the variable 't' (line 1184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1184, 8), 't', for_loop_var_284810)
        # SSA begins for a for statement (line 1184)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to update(...): (line 1185)
        # Processing the call arguments (line 1185)
        # Getting the type of 'kwargs' (line 1185)
        kwargs_284813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 21), 'kwargs', False)
        # Processing the call keyword arguments (line 1185)
        kwargs_284814 = {}
        # Getting the type of 't' (line 1185)
        t_284811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 12), 't', False)
        # Obtaining the member 'update' of a type (line 1185)
        update_284812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 12), t_284811, 'update')
        # Calling update(args, kwargs) (line 1185)
        update_call_result_284815 = invoke(stypy.reporting.localization.Localization(__file__, 1185, 12), update_284812, *[kwargs_284813], **kwargs_284814)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1186)
        tuple_284816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1186)
        # Adding element type (line 1186)
        
        # Call to get_ticklines(...): (line 1186)
        # Processing the call keyword arguments (line 1186)
        kwargs_284820 = {}
        # Getting the type of 'self' (line 1186)
        self_284817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 15), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 1186)
        xaxis_284818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 15), self_284817, 'xaxis')
        # Obtaining the member 'get_ticklines' of a type (line 1186)
        get_ticklines_284819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 15), xaxis_284818, 'get_ticklines')
        # Calling get_ticklines(args, kwargs) (line 1186)
        get_ticklines_call_result_284821 = invoke(stypy.reporting.localization.Localization(__file__, 1186, 15), get_ticklines_284819, *[], **kwargs_284820)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1186, 15), tuple_284816, get_ticklines_call_result_284821)
        # Adding element type (line 1186)
        
        # Call to get_ticklabels(...): (line 1186)
        # Processing the call keyword arguments (line 1186)
        kwargs_284825 = {}
        # Getting the type of 'self' (line 1186)
        self_284822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 43), 'self', False)
        # Obtaining the member 'xaxis' of a type (line 1186)
        xaxis_284823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 43), self_284822, 'xaxis')
        # Obtaining the member 'get_ticklabels' of a type (line 1186)
        get_ticklabels_284824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 43), xaxis_284823, 'get_ticklabels')
        # Calling get_ticklabels(args, kwargs) (line 1186)
        get_ticklabels_call_result_284826 = invoke(stypy.reporting.localization.Localization(__file__, 1186, 43), get_ticklabels_284824, *[], **kwargs_284825)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1186, 15), tuple_284816, get_ticklabels_call_result_284826)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 8), 'stypy_return_type', tuple_284816)
        
        # ################# End of 'set_thetagrids(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_thetagrids' in the type store
        # Getting the type of 'stypy_return_type' (line 1149)
        stypy_return_type_284827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284827)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_thetagrids'
        return stypy_return_type_284827


    @norecursion
    def set_rgrids(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1189)
        None_284828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 39), 'None')
        # Getting the type of 'None' (line 1189)
        None_284829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 51), 'None')
        # Getting the type of 'None' (line 1189)
        None_284830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 61), 'None')
        defaults = [None_284828, None_284829, None_284830]
        # Create a new context for function 'set_rgrids'
        module_type_store = module_type_store.open_function_context('set_rgrids', 1188, 4, False)
        # Assigning a type to the variable 'self' (line 1189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_rgrids.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_rgrids.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_rgrids.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_rgrids.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_rgrids')
        PolarAxes.set_rgrids.__dict__.__setitem__('stypy_param_names_list', ['radii', 'labels', 'angle', 'fmt'])
        PolarAxes.set_rgrids.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.set_rgrids.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        PolarAxes.set_rgrids.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_rgrids.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_rgrids.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_rgrids.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_rgrids', ['radii', 'labels', 'angle', 'fmt'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_rgrids', localization, ['radii', 'labels', 'angle', 'fmt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_rgrids(...)' code ##################

        unicode_284831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, (-1)), 'unicode', u'\n        Set the radial locations and labels of the *r* grids.\n\n        The labels will appear at radial distances *radii* at the\n        given *angle* in degrees.\n\n        *labels*, if not None, is a ``len(radii)`` list of strings of the\n        labels to use at each radius.\n\n        If *labels* is None, the built-in formatter will be used.\n\n        Return value is a list of tuples (*line*, *label*), where\n        *line* is :class:`~matplotlib.lines.Line2D` instances and the\n        *label* is :class:`~matplotlib.text.Text` instances.\n\n        kwargs are optional text properties for the labels:\n\n        %(Text)s\n\n        ACCEPTS: sequence of floats\n        ')
        
        # Assigning a Call to a Name (line 1213):
        
        # Assigning a Call to a Name (line 1213):
        
        # Call to convert_xunits(...): (line 1213)
        # Processing the call arguments (line 1213)
        # Getting the type of 'radii' (line 1213)
        radii_284834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 36), 'radii', False)
        # Processing the call keyword arguments (line 1213)
        kwargs_284835 = {}
        # Getting the type of 'self' (line 1213)
        self_284832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 16), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 1213)
        convert_xunits_284833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1213, 16), self_284832, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 1213)
        convert_xunits_call_result_284836 = invoke(stypy.reporting.localization.Localization(__file__, 1213, 16), convert_xunits_284833, *[radii_284834], **kwargs_284835)
        
        # Assigning a type to the variable 'radii' (line 1213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 8), 'radii', convert_xunits_call_result_284836)
        
        # Assigning a Call to a Name (line 1214):
        
        # Assigning a Call to a Name (line 1214):
        
        # Call to asarray(...): (line 1214)
        # Processing the call arguments (line 1214)
        # Getting the type of 'radii' (line 1214)
        radii_284839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 27), 'radii', False)
        # Processing the call keyword arguments (line 1214)
        kwargs_284840 = {}
        # Getting the type of 'np' (line 1214)
        np_284837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 16), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1214)
        asarray_284838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1214, 16), np_284837, 'asarray')
        # Calling asarray(args, kwargs) (line 1214)
        asarray_call_result_284841 = invoke(stypy.reporting.localization.Localization(__file__, 1214, 16), asarray_284838, *[radii_284839], **kwargs_284840)
        
        # Assigning a type to the variable 'radii' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 8), 'radii', asarray_call_result_284841)
        
        # Call to set_yticks(...): (line 1216)
        # Processing the call arguments (line 1216)
        # Getting the type of 'radii' (line 1216)
        radii_284844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 24), 'radii', False)
        # Processing the call keyword arguments (line 1216)
        kwargs_284845 = {}
        # Getting the type of 'self' (line 1216)
        self_284842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 8), 'self', False)
        # Obtaining the member 'set_yticks' of a type (line 1216)
        set_yticks_284843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 8), self_284842, 'set_yticks')
        # Calling set_yticks(args, kwargs) (line 1216)
        set_yticks_call_result_284846 = invoke(stypy.reporting.localization.Localization(__file__, 1216, 8), set_yticks_284843, *[radii_284844], **kwargs_284845)
        
        
        # Type idiom detected: calculating its left and rigth part (line 1217)
        # Getting the type of 'labels' (line 1217)
        labels_284847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 8), 'labels')
        # Getting the type of 'None' (line 1217)
        None_284848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 25), 'None')
        
        (may_be_284849, more_types_in_union_284850) = may_not_be_none(labels_284847, None_284848)

        if may_be_284849:

            if more_types_in_union_284850:
                # Runtime conditional SSA (line 1217)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_yticklabels(...): (line 1218)
            # Processing the call arguments (line 1218)
            # Getting the type of 'labels' (line 1218)
            labels_284853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 33), 'labels', False)
            # Processing the call keyword arguments (line 1218)
            kwargs_284854 = {}
            # Getting the type of 'self' (line 1218)
            self_284851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 12), 'self', False)
            # Obtaining the member 'set_yticklabels' of a type (line 1218)
            set_yticklabels_284852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 12), self_284851, 'set_yticklabels')
            # Calling set_yticklabels(args, kwargs) (line 1218)
            set_yticklabels_call_result_284855 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 12), set_yticklabels_284852, *[labels_284853], **kwargs_284854)
            

            if more_types_in_union_284850:
                # Runtime conditional SSA for else branch (line 1217)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_284849) or more_types_in_union_284850):
            
            # Type idiom detected: calculating its left and rigth part (line 1219)
            # Getting the type of 'fmt' (line 1219)
            fmt_284856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 13), 'fmt')
            # Getting the type of 'None' (line 1219)
            None_284857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 24), 'None')
            
            (may_be_284858, more_types_in_union_284859) = may_not_be_none(fmt_284856, None_284857)

            if may_be_284858:

                if more_types_in_union_284859:
                    # Runtime conditional SSA (line 1219)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Call to set_major_formatter(...): (line 1220)
                # Processing the call arguments (line 1220)
                
                # Call to FormatStrFormatter(...): (line 1220)
                # Processing the call arguments (line 1220)
                # Getting the type of 'fmt' (line 1220)
                fmt_284865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 70), 'fmt', False)
                # Processing the call keyword arguments (line 1220)
                kwargs_284866 = {}
                # Getting the type of 'mticker' (line 1220)
                mticker_284863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 43), 'mticker', False)
                # Obtaining the member 'FormatStrFormatter' of a type (line 1220)
                FormatStrFormatter_284864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1220, 43), mticker_284863, 'FormatStrFormatter')
                # Calling FormatStrFormatter(args, kwargs) (line 1220)
                FormatStrFormatter_call_result_284867 = invoke(stypy.reporting.localization.Localization(__file__, 1220, 43), FormatStrFormatter_284864, *[fmt_284865], **kwargs_284866)
                
                # Processing the call keyword arguments (line 1220)
                kwargs_284868 = {}
                # Getting the type of 'self' (line 1220)
                self_284860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 12), 'self', False)
                # Obtaining the member 'yaxis' of a type (line 1220)
                yaxis_284861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1220, 12), self_284860, 'yaxis')
                # Obtaining the member 'set_major_formatter' of a type (line 1220)
                set_major_formatter_284862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1220, 12), yaxis_284861, 'set_major_formatter')
                # Calling set_major_formatter(args, kwargs) (line 1220)
                set_major_formatter_call_result_284869 = invoke(stypy.reporting.localization.Localization(__file__, 1220, 12), set_major_formatter_284862, *[FormatStrFormatter_call_result_284867], **kwargs_284868)
                

                if more_types_in_union_284859:
                    # SSA join for if statement (line 1219)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_284849 and more_types_in_union_284850):
                # SSA join for if statement (line 1217)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1221)
        # Getting the type of 'angle' (line 1221)
        angle_284870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 11), 'angle')
        # Getting the type of 'None' (line 1221)
        None_284871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 20), 'None')
        
        (may_be_284872, more_types_in_union_284873) = may_be_none(angle_284870, None_284871)

        if may_be_284872:

            if more_types_in_union_284873:
                # Runtime conditional SSA (line 1221)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1222):
            
            # Assigning a Call to a Name (line 1222):
            
            # Call to get_rlabel_position(...): (line 1222)
            # Processing the call keyword arguments (line 1222)
            kwargs_284876 = {}
            # Getting the type of 'self' (line 1222)
            self_284874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 20), 'self', False)
            # Obtaining the member 'get_rlabel_position' of a type (line 1222)
            get_rlabel_position_284875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 20), self_284874, 'get_rlabel_position')
            # Calling get_rlabel_position(args, kwargs) (line 1222)
            get_rlabel_position_call_result_284877 = invoke(stypy.reporting.localization.Localization(__file__, 1222, 20), get_rlabel_position_284875, *[], **kwargs_284876)
            
            # Assigning a type to the variable 'angle' (line 1222)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1222, 12), 'angle', get_rlabel_position_call_result_284877)

            if more_types_in_union_284873:
                # SSA join for if statement (line 1221)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to set_rlabel_position(...): (line 1223)
        # Processing the call arguments (line 1223)
        # Getting the type of 'angle' (line 1223)
        angle_284880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 33), 'angle', False)
        # Processing the call keyword arguments (line 1223)
        kwargs_284881 = {}
        # Getting the type of 'self' (line 1223)
        self_284878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 8), 'self', False)
        # Obtaining the member 'set_rlabel_position' of a type (line 1223)
        set_rlabel_position_284879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1223, 8), self_284878, 'set_rlabel_position')
        # Calling set_rlabel_position(args, kwargs) (line 1223)
        set_rlabel_position_call_result_284882 = invoke(stypy.reporting.localization.Localization(__file__, 1223, 8), set_rlabel_position_284879, *[angle_284880], **kwargs_284881)
        
        
        
        # Call to get_ticklabels(...): (line 1224)
        # Processing the call keyword arguments (line 1224)
        kwargs_284886 = {}
        # Getting the type of 'self' (line 1224)
        self_284883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 17), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 1224)
        yaxis_284884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 17), self_284883, 'yaxis')
        # Obtaining the member 'get_ticklabels' of a type (line 1224)
        get_ticklabels_284885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 17), yaxis_284884, 'get_ticklabels')
        # Calling get_ticklabels(args, kwargs) (line 1224)
        get_ticklabels_call_result_284887 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 17), get_ticklabels_284885, *[], **kwargs_284886)
        
        # Testing the type of a for loop iterable (line 1224)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1224, 8), get_ticklabels_call_result_284887)
        # Getting the type of the for loop variable (line 1224)
        for_loop_var_284888 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1224, 8), get_ticklabels_call_result_284887)
        # Assigning a type to the variable 't' (line 1224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1224, 8), 't', for_loop_var_284888)
        # SSA begins for a for statement (line 1224)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to update(...): (line 1225)
        # Processing the call arguments (line 1225)
        # Getting the type of 'kwargs' (line 1225)
        kwargs_284891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 21), 'kwargs', False)
        # Processing the call keyword arguments (line 1225)
        kwargs_284892 = {}
        # Getting the type of 't' (line 1225)
        t_284889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 12), 't', False)
        # Obtaining the member 'update' of a type (line 1225)
        update_284890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1225, 12), t_284889, 'update')
        # Calling update(args, kwargs) (line 1225)
        update_call_result_284893 = invoke(stypy.reporting.localization.Localization(__file__, 1225, 12), update_284890, *[kwargs_284891], **kwargs_284892)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1226)
        tuple_284894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1226)
        # Adding element type (line 1226)
        
        # Call to get_gridlines(...): (line 1226)
        # Processing the call keyword arguments (line 1226)
        kwargs_284898 = {}
        # Getting the type of 'self' (line 1226)
        self_284895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 15), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 1226)
        yaxis_284896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 15), self_284895, 'yaxis')
        # Obtaining the member 'get_gridlines' of a type (line 1226)
        get_gridlines_284897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 15), yaxis_284896, 'get_gridlines')
        # Calling get_gridlines(args, kwargs) (line 1226)
        get_gridlines_call_result_284899 = invoke(stypy.reporting.localization.Localization(__file__, 1226, 15), get_gridlines_284897, *[], **kwargs_284898)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1226, 15), tuple_284894, get_gridlines_call_result_284899)
        # Adding element type (line 1226)
        
        # Call to get_ticklabels(...): (line 1226)
        # Processing the call keyword arguments (line 1226)
        kwargs_284903 = {}
        # Getting the type of 'self' (line 1226)
        self_284900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 43), 'self', False)
        # Obtaining the member 'yaxis' of a type (line 1226)
        yaxis_284901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 43), self_284900, 'yaxis')
        # Obtaining the member 'get_ticklabels' of a type (line 1226)
        get_ticklabels_284902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 43), yaxis_284901, 'get_ticklabels')
        # Calling get_ticklabels(args, kwargs) (line 1226)
        get_ticklabels_call_result_284904 = invoke(stypy.reporting.localization.Localization(__file__, 1226, 43), get_ticklabels_284902, *[], **kwargs_284903)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1226, 15), tuple_284894, get_ticklabels_call_result_284904)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1226, 8), 'stypy_return_type', tuple_284894)
        
        # ################# End of 'set_rgrids(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_rgrids' in the type store
        # Getting the type of 'stypy_return_type' (line 1188)
        stypy_return_type_284905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284905)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_rgrids'
        return stypy_return_type_284905


    @norecursion
    def set_xscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_xscale'
        module_type_store = module_type_store.open_function_context('set_xscale', 1228, 4, False)
        # Assigning a type to the variable 'self' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.set_xscale.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.set_xscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.set_xscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.set_xscale.__dict__.__setitem__('stypy_function_name', 'PolarAxes.set_xscale')
        PolarAxes.set_xscale.__dict__.__setitem__('stypy_param_names_list', ['scale'])
        PolarAxes.set_xscale.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        PolarAxes.set_xscale.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        PolarAxes.set_xscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.set_xscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.set_xscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.set_xscale.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.set_xscale', ['scale'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_xscale', localization, ['scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_xscale(...)' code ##################

        
        
        # Getting the type of 'scale' (line 1229)
        scale_284906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 11), 'scale')
        unicode_284907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1229, 20), 'unicode', u'linear')
        # Applying the binary operator '!=' (line 1229)
        result_ne_284908 = python_operator(stypy.reporting.localization.Localization(__file__, 1229, 11), '!=', scale_284906, unicode_284907)
        
        # Testing the type of an if condition (line 1229)
        if_condition_284909 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1229, 8), result_ne_284908)
        # Assigning a type to the variable 'if_condition_284909' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 8), 'if_condition_284909', if_condition_284909)
        # SSA begins for if statement (line 1229)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to NotImplementedError(...): (line 1230)
        # Processing the call arguments (line 1230)
        unicode_284911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 16), 'unicode', u'You can not set the xscale on a polar plot.')
        # Processing the call keyword arguments (line 1230)
        kwargs_284912 = {}
        # Getting the type of 'NotImplementedError' (line 1230)
        NotImplementedError_284910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 18), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1230)
        NotImplementedError_call_result_284913 = invoke(stypy.reporting.localization.Localization(__file__, 1230, 18), NotImplementedError_284910, *[unicode_284911], **kwargs_284912)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1230, 12), NotImplementedError_call_result_284913, 'raise parameter', BaseException)
        # SSA join for if statement (line 1229)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_xscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_xscale' in the type store
        # Getting the type of 'stypy_return_type' (line 1228)
        stypy_return_type_284914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284914)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_xscale'
        return stypy_return_type_284914


    @norecursion
    def format_coord(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'format_coord'
        module_type_store = module_type_store.open_function_context('format_coord', 1233, 4, False)
        # Assigning a type to the variable 'self' (line 1234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1234, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.format_coord.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.format_coord.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.format_coord.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.format_coord.__dict__.__setitem__('stypy_function_name', 'PolarAxes.format_coord')
        PolarAxes.format_coord.__dict__.__setitem__('stypy_param_names_list', ['theta', 'r'])
        PolarAxes.format_coord.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.format_coord.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.format_coord.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.format_coord.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.format_coord.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.format_coord.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.format_coord', ['theta', 'r'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'format_coord', localization, ['theta', 'r'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'format_coord(...)' code ##################

        unicode_284915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, (-1)), 'unicode', u'\n        Return a format string formatting the coordinate using Unicode\n        characters.\n        ')
        
        
        # Getting the type of 'theta' (line 1238)
        theta_284916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 11), 'theta')
        int_284917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 19), 'int')
        # Applying the binary operator '<' (line 1238)
        result_lt_284918 = python_operator(stypy.reporting.localization.Localization(__file__, 1238, 11), '<', theta_284916, int_284917)
        
        # Testing the type of an if condition (line 1238)
        if_condition_284919 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1238, 8), result_lt_284918)
        # Assigning a type to the variable 'if_condition_284919' (line 1238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 8), 'if_condition_284919', if_condition_284919)
        # SSA begins for if statement (line 1238)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'theta' (line 1239)
        theta_284920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 12), 'theta')
        int_284921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 21), 'int')
        # Getting the type of 'np' (line 1239)
        np_284922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 25), 'np')
        # Obtaining the member 'pi' of a type (line 1239)
        pi_284923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 25), np_284922, 'pi')
        # Applying the binary operator '*' (line 1239)
        result_mul_284924 = python_operator(stypy.reporting.localization.Localization(__file__, 1239, 21), '*', int_284921, pi_284923)
        
        # Applying the binary operator '+=' (line 1239)
        result_iadd_284925 = python_operator(stypy.reporting.localization.Localization(__file__, 1239, 12), '+=', theta_284920, result_mul_284924)
        # Assigning a type to the variable 'theta' (line 1239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1239, 12), 'theta', result_iadd_284925)
        
        # SSA join for if statement (line 1238)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'theta' (line 1240)
        theta_284926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 8), 'theta')
        # Getting the type of 'np' (line 1240)
        np_284927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 17), 'np')
        # Obtaining the member 'pi' of a type (line 1240)
        pi_284928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 17), np_284927, 'pi')
        # Applying the binary operator 'div=' (line 1240)
        result_div_284929 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 8), 'div=', theta_284926, pi_284928)
        # Assigning a type to the variable 'theta' (line 1240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 8), 'theta', result_div_284929)
        
        unicode_284930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1241, 16), 'unicode', u'\u03b8=%0.3f\u03c0 (%0.3f\xb0), r=%0.3f')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1242)
        tuple_284931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1242, 54), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1242)
        # Adding element type (line 1242)
        # Getting the type of 'theta' (line 1242)
        theta_284932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 54), 'theta')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1242, 54), tuple_284931, theta_284932)
        # Adding element type (line 1242)
        # Getting the type of 'theta' (line 1242)
        theta_284933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 61), 'theta')
        float_284934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1242, 69), 'float')
        # Applying the binary operator '*' (line 1242)
        result_mul_284935 = python_operator(stypy.reporting.localization.Localization(__file__, 1242, 61), '*', theta_284933, float_284934)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1242, 54), tuple_284931, result_mul_284935)
        # Adding element type (line 1242)
        # Getting the type of 'r' (line 1242)
        r_284936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 76), 'r')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1242, 54), tuple_284931, r_284936)
        
        # Applying the binary operator '%' (line 1241)
        result_mod_284937 = python_operator(stypy.reporting.localization.Localization(__file__, 1241, 15), '%', unicode_284930, tuple_284931)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1241, 8), 'stypy_return_type', result_mod_284937)
        
        # ################# End of 'format_coord(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'format_coord' in the type store
        # Getting the type of 'stypy_return_type' (line 1233)
        stypy_return_type_284938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284938)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'format_coord'
        return stypy_return_type_284938


    @norecursion
    def get_data_ratio(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_data_ratio'
        module_type_store = module_type_store.open_function_context('get_data_ratio', 1244, 4, False)
        # Assigning a type to the variable 'self' (line 1245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.get_data_ratio.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.get_data_ratio.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.get_data_ratio.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.get_data_ratio.__dict__.__setitem__('stypy_function_name', 'PolarAxes.get_data_ratio')
        PolarAxes.get_data_ratio.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.get_data_ratio.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.get_data_ratio.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.get_data_ratio.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.get_data_ratio.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.get_data_ratio.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.get_data_ratio.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.get_data_ratio', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_data_ratio', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_data_ratio(...)' code ##################

        unicode_284939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1248, (-1)), 'unicode', u'\n        Return the aspect ratio of the data itself.  For a polar plot,\n        this should always be 1.0\n        ')
        float_284940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 15), 'float')
        # Assigning a type to the variable 'stypy_return_type' (line 1249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 8), 'stypy_return_type', float_284940)
        
        # ################# End of 'get_data_ratio(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_data_ratio' in the type store
        # Getting the type of 'stypy_return_type' (line 1244)
        stypy_return_type_284941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284941)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_data_ratio'
        return stypy_return_type_284941


    @norecursion
    def can_zoom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'can_zoom'
        module_type_store = module_type_store.open_function_context('can_zoom', 1253, 4, False)
        # Assigning a type to the variable 'self' (line 1254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1254, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.can_zoom.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.can_zoom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.can_zoom.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.can_zoom.__dict__.__setitem__('stypy_function_name', 'PolarAxes.can_zoom')
        PolarAxes.can_zoom.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.can_zoom.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.can_zoom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.can_zoom.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.can_zoom.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.can_zoom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.can_zoom.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.can_zoom', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'can_zoom', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'can_zoom(...)' code ##################

        unicode_284942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1258, (-1)), 'unicode', u'\n        Return *True* if this axes supports the zoom box button functionality.\n\n        Polar axes do not support zoom boxes.\n        ')
        # Getting the type of 'False' (line 1259)
        False_284943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 8), 'stypy_return_type', False_284943)
        
        # ################# End of 'can_zoom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'can_zoom' in the type store
        # Getting the type of 'stypy_return_type' (line 1253)
        stypy_return_type_284944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284944)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'can_zoom'
        return stypy_return_type_284944


    @norecursion
    def can_pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'can_pan'
        module_type_store = module_type_store.open_function_context('can_pan', 1261, 4, False)
        # Assigning a type to the variable 'self' (line 1262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1262, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.can_pan.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.can_pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.can_pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.can_pan.__dict__.__setitem__('stypy_function_name', 'PolarAxes.can_pan')
        PolarAxes.can_pan.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.can_pan.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.can_pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.can_pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.can_pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.can_pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.can_pan.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.can_pan', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'can_pan', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'can_pan(...)' code ##################

        unicode_284945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1268, (-1)), 'unicode', u'\n        Return *True* if this axes supports the pan/zoom button functionality.\n\n        For polar axes, this is slightly misleading. Both panning and\n        zooming are performed by the same button. Panning is performed\n        in azimuth while zooming is done along the radial.\n        ')
        # Getting the type of 'True' (line 1269)
        True_284946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 8), 'stypy_return_type', True_284946)
        
        # ################# End of 'can_pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'can_pan' in the type store
        # Getting the type of 'stypy_return_type' (line 1261)
        stypy_return_type_284947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_284947)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'can_pan'
        return stypy_return_type_284947


    @norecursion
    def start_pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'start_pan'
        module_type_store = module_type_store.open_function_context('start_pan', 1271, 4, False)
        # Assigning a type to the variable 'self' (line 1272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.start_pan.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.start_pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.start_pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.start_pan.__dict__.__setitem__('stypy_function_name', 'PolarAxes.start_pan')
        PolarAxes.start_pan.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'button'])
        PolarAxes.start_pan.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.start_pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.start_pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.start_pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.start_pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.start_pan.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.start_pan', ['x', 'y', 'button'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'start_pan', localization, ['x', 'y', 'button'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'start_pan(...)' code ##################

        
        # Assigning a Call to a Name (line 1272):
        
        # Assigning a Call to a Name (line 1272):
        
        # Call to deg2rad(...): (line 1272)
        # Processing the call arguments (line 1272)
        
        # Call to get_rlabel_position(...): (line 1272)
        # Processing the call keyword arguments (line 1272)
        kwargs_284952 = {}
        # Getting the type of 'self' (line 1272)
        self_284950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 27), 'self', False)
        # Obtaining the member 'get_rlabel_position' of a type (line 1272)
        get_rlabel_position_284951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 27), self_284950, 'get_rlabel_position')
        # Calling get_rlabel_position(args, kwargs) (line 1272)
        get_rlabel_position_call_result_284953 = invoke(stypy.reporting.localization.Localization(__file__, 1272, 27), get_rlabel_position_284951, *[], **kwargs_284952)
        
        # Processing the call keyword arguments (line 1272)
        kwargs_284954 = {}
        # Getting the type of 'np' (line 1272)
        np_284948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 16), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 1272)
        deg2rad_284949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 16), np_284948, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 1272)
        deg2rad_call_result_284955 = invoke(stypy.reporting.localization.Localization(__file__, 1272, 16), deg2rad_284949, *[get_rlabel_position_call_result_284953], **kwargs_284954)
        
        # Assigning a type to the variable 'angle' (line 1272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 8), 'angle', deg2rad_call_result_284955)
        
        # Assigning a Str to a Name (line 1273):
        
        # Assigning a Str to a Name (line 1273):
        unicode_284956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1273, 15), 'unicode', u'')
        # Assigning a type to the variable 'mode' (line 1273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1273, 8), 'mode', unicode_284956)
        
        
        # Getting the type of 'button' (line 1274)
        button_284957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 11), 'button')
        int_284958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1274, 21), 'int')
        # Applying the binary operator '==' (line 1274)
        result_eq_284959 = python_operator(stypy.reporting.localization.Localization(__file__, 1274, 11), '==', button_284957, int_284958)
        
        # Testing the type of an if condition (line 1274)
        if_condition_284960 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1274, 8), result_eq_284959)
        # Assigning a type to the variable 'if_condition_284960' (line 1274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1274, 8), 'if_condition_284960', if_condition_284960)
        # SSA begins for if statement (line 1274)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1275):
        
        # Assigning a BinOp to a Name (line 1275):
        # Getting the type of 'np' (line 1275)
        np_284961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 22), 'np')
        # Obtaining the member 'pi' of a type (line 1275)
        pi_284962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1275, 22), np_284961, 'pi')
        float_284963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1275, 30), 'float')
        # Applying the binary operator 'div' (line 1275)
        result_div_284964 = python_operator(stypy.reporting.localization.Localization(__file__, 1275, 22), 'div', pi_284962, float_284963)
        
        # Assigning a type to the variable 'epsilon' (line 1275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 12), 'epsilon', result_div_284964)
        
        # Assigning a Call to a Tuple (line 1276):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 1276)
        # Processing the call arguments (line 1276)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1276)
        tuple_284971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1276, 62), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1276)
        # Adding element type (line 1276)
        # Getting the type of 'x' (line 1276)
        x_284972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 62), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1276, 62), tuple_284971, x_284972)
        # Adding element type (line 1276)
        # Getting the type of 'y' (line 1276)
        y_284973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 65), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1276, 62), tuple_284971, y_284973)
        
        # Processing the call keyword arguments (line 1276)
        kwargs_284974 = {}
        
        # Call to inverted(...): (line 1276)
        # Processing the call keyword arguments (line 1276)
        kwargs_284968 = {}
        # Getting the type of 'self' (line 1276)
        self_284965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 19), 'self', False)
        # Obtaining the member 'transData' of a type (line 1276)
        transData_284966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1276, 19), self_284965, 'transData')
        # Obtaining the member 'inverted' of a type (line 1276)
        inverted_284967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1276, 19), transData_284966, 'inverted')
        # Calling inverted(args, kwargs) (line 1276)
        inverted_call_result_284969 = invoke(stypy.reporting.localization.Localization(__file__, 1276, 19), inverted_284967, *[], **kwargs_284968)
        
        # Obtaining the member 'transform_point' of a type (line 1276)
        transform_point_284970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1276, 19), inverted_call_result_284969, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1276)
        transform_point_call_result_284975 = invoke(stypy.reporting.localization.Localization(__file__, 1276, 19), transform_point_284970, *[tuple_284971], **kwargs_284974)
        
        # Assigning a type to the variable 'call_assignment_281148' (line 1276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 12), 'call_assignment_281148', transform_point_call_result_284975)
        
        # Assigning a Call to a Name (line 1276):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_284978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1276, 12), 'int')
        # Processing the call keyword arguments
        kwargs_284979 = {}
        # Getting the type of 'call_assignment_281148' (line 1276)
        call_assignment_281148_284976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 12), 'call_assignment_281148', False)
        # Obtaining the member '__getitem__' of a type (line 1276)
        getitem___284977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1276, 12), call_assignment_281148_284976, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_284980 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___284977, *[int_284978], **kwargs_284979)
        
        # Assigning a type to the variable 'call_assignment_281149' (line 1276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 12), 'call_assignment_281149', getitem___call_result_284980)
        
        # Assigning a Name to a Name (line 1276):
        # Getting the type of 'call_assignment_281149' (line 1276)
        call_assignment_281149_284981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 12), 'call_assignment_281149')
        # Assigning a type to the variable 't' (line 1276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 12), 't', call_assignment_281149_284981)
        
        # Assigning a Call to a Name (line 1276):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_284984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1276, 12), 'int')
        # Processing the call keyword arguments
        kwargs_284985 = {}
        # Getting the type of 'call_assignment_281148' (line 1276)
        call_assignment_281148_284982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 12), 'call_assignment_281148', False)
        # Obtaining the member '__getitem__' of a type (line 1276)
        getitem___284983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1276, 12), call_assignment_281148_284982, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_284986 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___284983, *[int_284984], **kwargs_284985)
        
        # Assigning a type to the variable 'call_assignment_281150' (line 1276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 12), 'call_assignment_281150', getitem___call_result_284986)
        
        # Assigning a Name to a Name (line 1276):
        # Getting the type of 'call_assignment_281150' (line 1276)
        call_assignment_281150_284987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 12), 'call_assignment_281150')
        # Assigning a type to the variable 'r' (line 1276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 15), 'r', call_assignment_281150_284987)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 't' (line 1277)
        t_284988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 15), 't')
        # Getting the type of 'angle' (line 1277)
        angle_284989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 20), 'angle')
        # Getting the type of 'epsilon' (line 1277)
        epsilon_284990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 28), 'epsilon')
        # Applying the binary operator '-' (line 1277)
        result_sub_284991 = python_operator(stypy.reporting.localization.Localization(__file__, 1277, 20), '-', angle_284989, epsilon_284990)
        
        # Applying the binary operator '>=' (line 1277)
        result_ge_284992 = python_operator(stypy.reporting.localization.Localization(__file__, 1277, 15), '>=', t_284988, result_sub_284991)
        
        
        # Getting the type of 't' (line 1277)
        t_284993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 40), 't')
        # Getting the type of 'angle' (line 1277)
        angle_284994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 45), 'angle')
        # Getting the type of 'epsilon' (line 1277)
        epsilon_284995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 53), 'epsilon')
        # Applying the binary operator '+' (line 1277)
        result_add_284996 = python_operator(stypy.reporting.localization.Localization(__file__, 1277, 45), '+', angle_284994, epsilon_284995)
        
        # Applying the binary operator '<=' (line 1277)
        result_le_284997 = python_operator(stypy.reporting.localization.Localization(__file__, 1277, 40), '<=', t_284993, result_add_284996)
        
        # Applying the binary operator 'and' (line 1277)
        result_and_keyword_284998 = python_operator(stypy.reporting.localization.Localization(__file__, 1277, 15), 'and', result_ge_284992, result_le_284997)
        
        # Testing the type of an if condition (line 1277)
        if_condition_284999 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1277, 12), result_and_keyword_284998)
        # Assigning a type to the variable 'if_condition_284999' (line 1277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1277, 12), 'if_condition_284999', if_condition_284999)
        # SSA begins for if statement (line 1277)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1278):
        
        # Assigning a Str to a Name (line 1278):
        unicode_285000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1278, 23), 'unicode', u'drag_r_labels')
        # Assigning a type to the variable 'mode' (line 1278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 16), 'mode', unicode_285000)
        # SSA join for if statement (line 1277)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1274)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'button' (line 1279)
        button_285001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 13), 'button')
        int_285002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1279, 23), 'int')
        # Applying the binary operator '==' (line 1279)
        result_eq_285003 = python_operator(stypy.reporting.localization.Localization(__file__, 1279, 13), '==', button_285001, int_285002)
        
        # Testing the type of an if condition (line 1279)
        if_condition_285004 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1279, 13), result_eq_285003)
        # Assigning a type to the variable 'if_condition_285004' (line 1279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1279, 13), 'if_condition_285004', if_condition_285004)
        # SSA begins for if statement (line 1279)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1280):
        
        # Assigning a Str to a Name (line 1280):
        unicode_285005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1280, 19), 'unicode', u'zoom')
        # Assigning a type to the variable 'mode' (line 1280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1280, 12), 'mode', unicode_285005)
        # SSA join for if statement (line 1279)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1274)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1282):
        
        # Assigning a Call to a Attribute (line 1282):
        
        # Call to Bunch(...): (line 1282)
        # Processing the call keyword arguments (line 1282)
        
        # Call to get_rmax(...): (line 1283)
        # Processing the call keyword arguments (line 1283)
        kwargs_285010 = {}
        # Getting the type of 'self' (line 1283)
        self_285008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 17), 'self', False)
        # Obtaining the member 'get_rmax' of a type (line 1283)
        get_rmax_285009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1283, 17), self_285008, 'get_rmax')
        # Calling get_rmax(args, kwargs) (line 1283)
        get_rmax_call_result_285011 = invoke(stypy.reporting.localization.Localization(__file__, 1283, 17), get_rmax_285009, *[], **kwargs_285010)
        
        keyword_285012 = get_rmax_call_result_285011
        
        # Call to frozen(...): (line 1284)
        # Processing the call keyword arguments (line 1284)
        kwargs_285016 = {}
        # Getting the type of 'self' (line 1284)
        self_285013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 18), 'self', False)
        # Obtaining the member 'transData' of a type (line 1284)
        transData_285014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 18), self_285013, 'transData')
        # Obtaining the member 'frozen' of a type (line 1284)
        frozen_285015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 18), transData_285014, 'frozen')
        # Calling frozen(args, kwargs) (line 1284)
        frozen_call_result_285017 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 18), frozen_285015, *[], **kwargs_285016)
        
        keyword_285018 = frozen_call_result_285017
        
        # Call to frozen(...): (line 1285)
        # Processing the call keyword arguments (line 1285)
        kwargs_285025 = {}
        
        # Call to inverted(...): (line 1285)
        # Processing the call keyword arguments (line 1285)
        kwargs_285022 = {}
        # Getting the type of 'self' (line 1285)
        self_285019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 26), 'self', False)
        # Obtaining the member 'transData' of a type (line 1285)
        transData_285020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 26), self_285019, 'transData')
        # Obtaining the member 'inverted' of a type (line 1285)
        inverted_285021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 26), transData_285020, 'inverted')
        # Calling inverted(args, kwargs) (line 1285)
        inverted_call_result_285023 = invoke(stypy.reporting.localization.Localization(__file__, 1285, 26), inverted_285021, *[], **kwargs_285022)
        
        # Obtaining the member 'frozen' of a type (line 1285)
        frozen_285024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 26), inverted_call_result_285023, 'frozen')
        # Calling frozen(args, kwargs) (line 1285)
        frozen_call_result_285026 = invoke(stypy.reporting.localization.Localization(__file__, 1285, 26), frozen_285024, *[], **kwargs_285025)
        
        keyword_285027 = frozen_call_result_285026
        
        # Call to get_rlabel_position(...): (line 1286)
        # Processing the call keyword arguments (line 1286)
        kwargs_285030 = {}
        # Getting the type of 'self' (line 1286)
        self_285028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 26), 'self', False)
        # Obtaining the member 'get_rlabel_position' of a type (line 1286)
        get_rlabel_position_285029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1286, 26), self_285028, 'get_rlabel_position')
        # Calling get_rlabel_position(args, kwargs) (line 1286)
        get_rlabel_position_call_result_285031 = invoke(stypy.reporting.localization.Localization(__file__, 1286, 26), get_rlabel_position_285029, *[], **kwargs_285030)
        
        keyword_285032 = get_rlabel_position_call_result_285031
        # Getting the type of 'x' (line 1287)
        x_285033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 14), 'x', False)
        keyword_285034 = x_285033
        # Getting the type of 'y' (line 1288)
        y_285035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 14), 'y', False)
        keyword_285036 = y_285035
        # Getting the type of 'mode' (line 1289)
        mode_285037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 17), 'mode', False)
        keyword_285038 = mode_285037
        kwargs_285039 = {'rmax': keyword_285012, 'trans_inverse': keyword_285027, 'y': keyword_285036, 'mode': keyword_285038, 'r_label_angle': keyword_285032, 'x': keyword_285034, 'trans': keyword_285018}
        # Getting the type of 'cbook' (line 1282)
        cbook_285006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 26), 'cbook', False)
        # Obtaining the member 'Bunch' of a type (line 1282)
        Bunch_285007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 26), cbook_285006, 'Bunch')
        # Calling Bunch(args, kwargs) (line 1282)
        Bunch_call_result_285040 = invoke(stypy.reporting.localization.Localization(__file__, 1282, 26), Bunch_285007, *[], **kwargs_285039)
        
        # Getting the type of 'self' (line 1282)
        self_285041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 8), 'self')
        # Setting the type of the member '_pan_start' of a type (line 1282)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 8), self_285041, '_pan_start', Bunch_call_result_285040)
        
        # ################# End of 'start_pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'start_pan' in the type store
        # Getting the type of 'stypy_return_type' (line 1271)
        stypy_return_type_285042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_285042)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'start_pan'
        return stypy_return_type_285042


    @norecursion
    def end_pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'end_pan'
        module_type_store = module_type_store.open_function_context('end_pan', 1291, 4, False)
        # Assigning a type to the variable 'self' (line 1292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1292, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.end_pan.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.end_pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.end_pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.end_pan.__dict__.__setitem__('stypy_function_name', 'PolarAxes.end_pan')
        PolarAxes.end_pan.__dict__.__setitem__('stypy_param_names_list', [])
        PolarAxes.end_pan.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.end_pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.end_pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.end_pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.end_pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.end_pan.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.end_pan', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'end_pan', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'end_pan(...)' code ##################

        # Deleting a member
        # Getting the type of 'self' (line 1292)
        self_285043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 8), 'self')
        module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 1292, 8), self_285043, '_pan_start')
        
        # ################# End of 'end_pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'end_pan' in the type store
        # Getting the type of 'stypy_return_type' (line 1291)
        stypy_return_type_285044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_285044)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'end_pan'
        return stypy_return_type_285044


    @norecursion
    def drag_pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'drag_pan'
        module_type_store = module_type_store.open_function_context('drag_pan', 1294, 4, False)
        # Assigning a type to the variable 'self' (line 1295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1295, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolarAxes.drag_pan.__dict__.__setitem__('stypy_localization', localization)
        PolarAxes.drag_pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolarAxes.drag_pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolarAxes.drag_pan.__dict__.__setitem__('stypy_function_name', 'PolarAxes.drag_pan')
        PolarAxes.drag_pan.__dict__.__setitem__('stypy_param_names_list', ['button', 'key', 'x', 'y'])
        PolarAxes.drag_pan.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolarAxes.drag_pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolarAxes.drag_pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolarAxes.drag_pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolarAxes.drag_pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolarAxes.drag_pan.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolarAxes.drag_pan', ['button', 'key', 'x', 'y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'drag_pan', localization, ['button', 'key', 'x', 'y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'drag_pan(...)' code ##################

        
        # Assigning a Attribute to a Name (line 1295):
        
        # Assigning a Attribute to a Name (line 1295):
        # Getting the type of 'self' (line 1295)
        self_285045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 12), 'self')
        # Obtaining the member '_pan_start' of a type (line 1295)
        _pan_start_285046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 12), self_285045, '_pan_start')
        # Assigning a type to the variable 'p' (line 1295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1295, 8), 'p', _pan_start_285046)
        
        
        # Getting the type of 'p' (line 1297)
        p_285047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 11), 'p')
        # Obtaining the member 'mode' of a type (line 1297)
        mode_285048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 11), p_285047, 'mode')
        unicode_285049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 21), 'unicode', u'drag_r_labels')
        # Applying the binary operator '==' (line 1297)
        result_eq_285050 = python_operator(stypy.reporting.localization.Localization(__file__, 1297, 11), '==', mode_285048, unicode_285049)
        
        # Testing the type of an if condition (line 1297)
        if_condition_285051 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1297, 8), result_eq_285050)
        # Assigning a type to the variable 'if_condition_285051' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 8), 'if_condition_285051', if_condition_285051)
        # SSA begins for if statement (line 1297)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1298):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 1298)
        # Processing the call arguments (line 1298)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1298)
        tuple_285055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 62), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1298)
        # Adding element type (line 1298)
        # Getting the type of 'p' (line 1298)
        p_285056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 62), 'p', False)
        # Obtaining the member 'x' of a type (line 1298)
        x_285057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 62), p_285056, 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1298, 62), tuple_285055, x_285057)
        # Adding element type (line 1298)
        # Getting the type of 'p' (line 1298)
        p_285058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 67), 'p', False)
        # Obtaining the member 'y' of a type (line 1298)
        y_285059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 67), p_285058, 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1298, 62), tuple_285055, y_285059)
        
        # Processing the call keyword arguments (line 1298)
        kwargs_285060 = {}
        # Getting the type of 'p' (line 1298)
        p_285052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 29), 'p', False)
        # Obtaining the member 'trans_inverse' of a type (line 1298)
        trans_inverse_285053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 29), p_285052, 'trans_inverse')
        # Obtaining the member 'transform_point' of a type (line 1298)
        transform_point_285054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 29), trans_inverse_285053, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1298)
        transform_point_call_result_285061 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 29), transform_point_285054, *[tuple_285055], **kwargs_285060)
        
        # Assigning a type to the variable 'call_assignment_281151' (line 1298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 12), 'call_assignment_281151', transform_point_call_result_285061)
        
        # Assigning a Call to a Name (line 1298):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_285064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 12), 'int')
        # Processing the call keyword arguments
        kwargs_285065 = {}
        # Getting the type of 'call_assignment_281151' (line 1298)
        call_assignment_281151_285062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 12), 'call_assignment_281151', False)
        # Obtaining the member '__getitem__' of a type (line 1298)
        getitem___285063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 12), call_assignment_281151_285062, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_285066 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___285063, *[int_285064], **kwargs_285065)
        
        # Assigning a type to the variable 'call_assignment_281152' (line 1298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 12), 'call_assignment_281152', getitem___call_result_285066)
        
        # Assigning a Name to a Name (line 1298):
        # Getting the type of 'call_assignment_281152' (line 1298)
        call_assignment_281152_285067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 12), 'call_assignment_281152')
        # Assigning a type to the variable 'startt' (line 1298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 12), 'startt', call_assignment_281152_285067)
        
        # Assigning a Call to a Name (line 1298):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_285070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 12), 'int')
        # Processing the call keyword arguments
        kwargs_285071 = {}
        # Getting the type of 'call_assignment_281151' (line 1298)
        call_assignment_281151_285068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 12), 'call_assignment_281151', False)
        # Obtaining the member '__getitem__' of a type (line 1298)
        getitem___285069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 12), call_assignment_281151_285068, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_285072 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___285069, *[int_285070], **kwargs_285071)
        
        # Assigning a type to the variable 'call_assignment_281153' (line 1298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 12), 'call_assignment_281153', getitem___call_result_285072)
        
        # Assigning a Name to a Name (line 1298):
        # Getting the type of 'call_assignment_281153' (line 1298)
        call_assignment_281153_285073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 12), 'call_assignment_281153')
        # Assigning a type to the variable 'startr' (line 1298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 20), 'startr', call_assignment_281153_285073)
        
        # Assigning a Call to a Tuple (line 1299):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 1299)
        # Processing the call arguments (line 1299)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1299)
        tuple_285077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1299, 52), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1299)
        # Adding element type (line 1299)
        # Getting the type of 'x' (line 1299)
        x_285078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 52), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1299, 52), tuple_285077, x_285078)
        # Adding element type (line 1299)
        # Getting the type of 'y' (line 1299)
        y_285079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 55), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1299, 52), tuple_285077, y_285079)
        
        # Processing the call keyword arguments (line 1299)
        kwargs_285080 = {}
        # Getting the type of 'p' (line 1299)
        p_285074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 19), 'p', False)
        # Obtaining the member 'trans_inverse' of a type (line 1299)
        trans_inverse_285075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 19), p_285074, 'trans_inverse')
        # Obtaining the member 'transform_point' of a type (line 1299)
        transform_point_285076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 19), trans_inverse_285075, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1299)
        transform_point_call_result_285081 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 19), transform_point_285076, *[tuple_285077], **kwargs_285080)
        
        # Assigning a type to the variable 'call_assignment_281154' (line 1299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 12), 'call_assignment_281154', transform_point_call_result_285081)
        
        # Assigning a Call to a Name (line 1299):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_285084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1299, 12), 'int')
        # Processing the call keyword arguments
        kwargs_285085 = {}
        # Getting the type of 'call_assignment_281154' (line 1299)
        call_assignment_281154_285082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 12), 'call_assignment_281154', False)
        # Obtaining the member '__getitem__' of a type (line 1299)
        getitem___285083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 12), call_assignment_281154_285082, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_285086 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___285083, *[int_285084], **kwargs_285085)
        
        # Assigning a type to the variable 'call_assignment_281155' (line 1299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 12), 'call_assignment_281155', getitem___call_result_285086)
        
        # Assigning a Name to a Name (line 1299):
        # Getting the type of 'call_assignment_281155' (line 1299)
        call_assignment_281155_285087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 12), 'call_assignment_281155')
        # Assigning a type to the variable 't' (line 1299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 12), 't', call_assignment_281155_285087)
        
        # Assigning a Call to a Name (line 1299):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_285090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1299, 12), 'int')
        # Processing the call keyword arguments
        kwargs_285091 = {}
        # Getting the type of 'call_assignment_281154' (line 1299)
        call_assignment_281154_285088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 12), 'call_assignment_281154', False)
        # Obtaining the member '__getitem__' of a type (line 1299)
        getitem___285089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 12), call_assignment_281154_285088, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_285092 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___285089, *[int_285090], **kwargs_285091)
        
        # Assigning a type to the variable 'call_assignment_281156' (line 1299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 12), 'call_assignment_281156', getitem___call_result_285092)
        
        # Assigning a Name to a Name (line 1299):
        # Getting the type of 'call_assignment_281156' (line 1299)
        call_assignment_281156_285093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 12), 'call_assignment_281156')
        # Assigning a type to the variable 'r' (line 1299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 15), 'r', call_assignment_281156_285093)
        
        # Assigning a BinOp to a Name (line 1302):
        
        # Assigning a BinOp to a Name (line 1302):
        # Getting the type of 't' (line 1302)
        t_285094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 18), 't')
        # Getting the type of 'startt' (line 1302)
        startt_285095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 22), 'startt')
        # Applying the binary operator '-' (line 1302)
        result_sub_285096 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 18), '-', t_285094, startt_285095)
        
        # Assigning a type to the variable 'dt0' (line 1302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 12), 'dt0', result_sub_285096)
        
        # Assigning a BinOp to a Name (line 1303):
        
        # Assigning a BinOp to a Name (line 1303):
        # Getting the type of 'startt' (line 1303)
        startt_285097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 18), 'startt')
        # Getting the type of 't' (line 1303)
        t_285098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 27), 't')
        # Applying the binary operator '-' (line 1303)
        result_sub_285099 = python_operator(stypy.reporting.localization.Localization(__file__, 1303, 18), '-', startt_285097, t_285098)
        
        # Assigning a type to the variable 'dt1' (line 1303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 12), 'dt1', result_sub_285099)
        
        
        
        # Call to abs(...): (line 1304)
        # Processing the call arguments (line 1304)
        # Getting the type of 'dt1' (line 1304)
        dt1_285101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 19), 'dt1', False)
        # Processing the call keyword arguments (line 1304)
        kwargs_285102 = {}
        # Getting the type of 'abs' (line 1304)
        abs_285100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 15), 'abs', False)
        # Calling abs(args, kwargs) (line 1304)
        abs_call_result_285103 = invoke(stypy.reporting.localization.Localization(__file__, 1304, 15), abs_285100, *[dt1_285101], **kwargs_285102)
        
        
        # Call to abs(...): (line 1304)
        # Processing the call arguments (line 1304)
        # Getting the type of 'dt0' (line 1304)
        dt0_285105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 30), 'dt0', False)
        # Processing the call keyword arguments (line 1304)
        kwargs_285106 = {}
        # Getting the type of 'abs' (line 1304)
        abs_285104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 26), 'abs', False)
        # Calling abs(args, kwargs) (line 1304)
        abs_call_result_285107 = invoke(stypy.reporting.localization.Localization(__file__, 1304, 26), abs_285104, *[dt0_285105], **kwargs_285106)
        
        # Applying the binary operator '<' (line 1304)
        result_lt_285108 = python_operator(stypy.reporting.localization.Localization(__file__, 1304, 15), '<', abs_call_result_285103, abs_call_result_285107)
        
        # Testing the type of an if condition (line 1304)
        if_condition_285109 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1304, 12), result_lt_285108)
        # Assigning a type to the variable 'if_condition_285109' (line 1304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 12), 'if_condition_285109', if_condition_285109)
        # SSA begins for if statement (line 1304)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1305):
        
        # Assigning a BinOp to a Name (line 1305):
        
        # Call to abs(...): (line 1305)
        # Processing the call arguments (line 1305)
        # Getting the type of 'dt1' (line 1305)
        dt1_285111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 25), 'dt1', False)
        # Processing the call keyword arguments (line 1305)
        kwargs_285112 = {}
        # Getting the type of 'abs' (line 1305)
        abs_285110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 21), 'abs', False)
        # Calling abs(args, kwargs) (line 1305)
        abs_call_result_285113 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 21), abs_285110, *[dt1_285111], **kwargs_285112)
        
        
        # Call to sign(...): (line 1305)
        # Processing the call arguments (line 1305)
        # Getting the type of 'dt0' (line 1305)
        dt0_285116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 40), 'dt0', False)
        # Processing the call keyword arguments (line 1305)
        kwargs_285117 = {}
        # Getting the type of 'np' (line 1305)
        np_285114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 32), 'np', False)
        # Obtaining the member 'sign' of a type (line 1305)
        sign_285115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 32), np_285114, 'sign')
        # Calling sign(args, kwargs) (line 1305)
        sign_call_result_285118 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 32), sign_285115, *[dt0_285116], **kwargs_285117)
        
        # Applying the binary operator '*' (line 1305)
        result_mul_285119 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 21), '*', abs_call_result_285113, sign_call_result_285118)
        
        float_285120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 47), 'float')
        # Applying the binary operator '*' (line 1305)
        result_mul_285121 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 45), '*', result_mul_285119, float_285120)
        
        # Assigning a type to the variable 'dt' (line 1305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 16), 'dt', result_mul_285121)
        # SSA branch for the else part of an if statement (line 1304)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1307):
        
        # Assigning a BinOp to a Name (line 1307):
        # Getting the type of 'dt0' (line 1307)
        dt0_285122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 21), 'dt0')
        float_285123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, 27), 'float')
        # Applying the binary operator '*' (line 1307)
        result_mul_285124 = python_operator(stypy.reporting.localization.Localization(__file__, 1307, 21), '*', dt0_285122, float_285123)
        
        # Assigning a type to the variable 'dt' (line 1307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 16), 'dt', result_mul_285124)
        # SSA join for if statement (line 1304)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1308):
        
        # Assigning a BinOp to a Name (line 1308):
        # Getting the type of 'dt' (line 1308)
        dt_285125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 18), 'dt')
        # Getting the type of 'np' (line 1308)
        np_285126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 23), 'np')
        # Obtaining the member 'pi' of a type (line 1308)
        pi_285127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 23), np_285126, 'pi')
        # Applying the binary operator 'div' (line 1308)
        result_div_285128 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 18), 'div', dt_285125, pi_285127)
        
        float_285129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1308, 32), 'float')
        # Applying the binary operator '*' (line 1308)
        result_mul_285130 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 17), '*', result_div_285128, float_285129)
        
        # Assigning a type to the variable 'dt' (line 1308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1308, 12), 'dt', result_mul_285130)
        
        # Call to set_rlabel_position(...): (line 1309)
        # Processing the call arguments (line 1309)
        # Getting the type of 'p' (line 1309)
        p_285133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 37), 'p', False)
        # Obtaining the member 'r_label_angle' of a type (line 1309)
        r_label_angle_285134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1309, 37), p_285133, 'r_label_angle')
        # Getting the type of 'dt' (line 1309)
        dt_285135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 55), 'dt', False)
        # Applying the binary operator '-' (line 1309)
        result_sub_285136 = python_operator(stypy.reporting.localization.Localization(__file__, 1309, 37), '-', r_label_angle_285134, dt_285135)
        
        # Processing the call keyword arguments (line 1309)
        kwargs_285137 = {}
        # Getting the type of 'self' (line 1309)
        self_285131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 12), 'self', False)
        # Obtaining the member 'set_rlabel_position' of a type (line 1309)
        set_rlabel_position_285132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1309, 12), self_285131, 'set_rlabel_position')
        # Calling set_rlabel_position(args, kwargs) (line 1309)
        set_rlabel_position_call_result_285138 = invoke(stypy.reporting.localization.Localization(__file__, 1309, 12), set_rlabel_position_285132, *[result_sub_285136], **kwargs_285137)
        
        
        # Assigning a Call to a Tuple (line 1311):
        
        # Assigning a Call to a Name:
        
        # Call to get_yaxis_text1_transform(...): (line 1311)
        # Processing the call arguments (line 1311)
        float_285141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1311, 66), 'float')
        # Processing the call keyword arguments (line 1311)
        kwargs_285142 = {}
        # Getting the type of 'self' (line 1311)
        self_285139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 35), 'self', False)
        # Obtaining the member 'get_yaxis_text1_transform' of a type (line 1311)
        get_yaxis_text1_transform_285140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 35), self_285139, 'get_yaxis_text1_transform')
        # Calling get_yaxis_text1_transform(args, kwargs) (line 1311)
        get_yaxis_text1_transform_call_result_285143 = invoke(stypy.reporting.localization.Localization(__file__, 1311, 35), get_yaxis_text1_transform_285140, *[float_285141], **kwargs_285142)
        
        # Assigning a type to the variable 'call_assignment_281157' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 12), 'call_assignment_281157', get_yaxis_text1_transform_call_result_285143)
        
        # Assigning a Call to a Name (line 1311):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_285146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1311, 12), 'int')
        # Processing the call keyword arguments
        kwargs_285147 = {}
        # Getting the type of 'call_assignment_281157' (line 1311)
        call_assignment_281157_285144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 12), 'call_assignment_281157', False)
        # Obtaining the member '__getitem__' of a type (line 1311)
        getitem___285145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 12), call_assignment_281157_285144, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_285148 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___285145, *[int_285146], **kwargs_285147)
        
        # Assigning a type to the variable 'call_assignment_281158' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 12), 'call_assignment_281158', getitem___call_result_285148)
        
        # Assigning a Name to a Name (line 1311):
        # Getting the type of 'call_assignment_281158' (line 1311)
        call_assignment_281158_285149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 12), 'call_assignment_281158')
        # Assigning a type to the variable 'trans' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 12), 'trans', call_assignment_281158_285149)
        
        # Assigning a Call to a Name (line 1311):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_285152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1311, 12), 'int')
        # Processing the call keyword arguments
        kwargs_285153 = {}
        # Getting the type of 'call_assignment_281157' (line 1311)
        call_assignment_281157_285150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 12), 'call_assignment_281157', False)
        # Obtaining the member '__getitem__' of a type (line 1311)
        getitem___285151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 12), call_assignment_281157_285150, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_285154 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___285151, *[int_285152], **kwargs_285153)
        
        # Assigning a type to the variable 'call_assignment_281159' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 12), 'call_assignment_281159', getitem___call_result_285154)
        
        # Assigning a Name to a Name (line 1311):
        # Getting the type of 'call_assignment_281159' (line 1311)
        call_assignment_281159_285155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 12), 'call_assignment_281159')
        # Assigning a type to the variable 'vert1' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 19), 'vert1', call_assignment_281159_285155)
        
        # Assigning a Call to a Name (line 1311):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_285158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1311, 12), 'int')
        # Processing the call keyword arguments
        kwargs_285159 = {}
        # Getting the type of 'call_assignment_281157' (line 1311)
        call_assignment_281157_285156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 12), 'call_assignment_281157', False)
        # Obtaining the member '__getitem__' of a type (line 1311)
        getitem___285157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 12), call_assignment_281157_285156, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_285160 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___285157, *[int_285158], **kwargs_285159)
        
        # Assigning a type to the variable 'call_assignment_281160' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 12), 'call_assignment_281160', getitem___call_result_285160)
        
        # Assigning a Name to a Name (line 1311):
        # Getting the type of 'call_assignment_281160' (line 1311)
        call_assignment_281160_285161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 12), 'call_assignment_281160')
        # Assigning a type to the variable 'horiz1' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 26), 'horiz1', call_assignment_281160_285161)
        
        # Assigning a Call to a Tuple (line 1312):
        
        # Assigning a Call to a Name:
        
        # Call to get_yaxis_text2_transform(...): (line 1312)
        # Processing the call arguments (line 1312)
        float_285164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 66), 'float')
        # Processing the call keyword arguments (line 1312)
        kwargs_285165 = {}
        # Getting the type of 'self' (line 1312)
        self_285162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 35), 'self', False)
        # Obtaining the member 'get_yaxis_text2_transform' of a type (line 1312)
        get_yaxis_text2_transform_285163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 35), self_285162, 'get_yaxis_text2_transform')
        # Calling get_yaxis_text2_transform(args, kwargs) (line 1312)
        get_yaxis_text2_transform_call_result_285166 = invoke(stypy.reporting.localization.Localization(__file__, 1312, 35), get_yaxis_text2_transform_285163, *[float_285164], **kwargs_285165)
        
        # Assigning a type to the variable 'call_assignment_281161' (line 1312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 12), 'call_assignment_281161', get_yaxis_text2_transform_call_result_285166)
        
        # Assigning a Call to a Name (line 1312):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_285169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 12), 'int')
        # Processing the call keyword arguments
        kwargs_285170 = {}
        # Getting the type of 'call_assignment_281161' (line 1312)
        call_assignment_281161_285167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 12), 'call_assignment_281161', False)
        # Obtaining the member '__getitem__' of a type (line 1312)
        getitem___285168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 12), call_assignment_281161_285167, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_285171 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___285168, *[int_285169], **kwargs_285170)
        
        # Assigning a type to the variable 'call_assignment_281162' (line 1312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 12), 'call_assignment_281162', getitem___call_result_285171)
        
        # Assigning a Name to a Name (line 1312):
        # Getting the type of 'call_assignment_281162' (line 1312)
        call_assignment_281162_285172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 12), 'call_assignment_281162')
        # Assigning a type to the variable 'trans' (line 1312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 12), 'trans', call_assignment_281162_285172)
        
        # Assigning a Call to a Name (line 1312):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_285175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 12), 'int')
        # Processing the call keyword arguments
        kwargs_285176 = {}
        # Getting the type of 'call_assignment_281161' (line 1312)
        call_assignment_281161_285173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 12), 'call_assignment_281161', False)
        # Obtaining the member '__getitem__' of a type (line 1312)
        getitem___285174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 12), call_assignment_281161_285173, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_285177 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___285174, *[int_285175], **kwargs_285176)
        
        # Assigning a type to the variable 'call_assignment_281163' (line 1312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 12), 'call_assignment_281163', getitem___call_result_285177)
        
        # Assigning a Name to a Name (line 1312):
        # Getting the type of 'call_assignment_281163' (line 1312)
        call_assignment_281163_285178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 12), 'call_assignment_281163')
        # Assigning a type to the variable 'vert2' (line 1312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 19), 'vert2', call_assignment_281163_285178)
        
        # Assigning a Call to a Name (line 1312):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_285181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 12), 'int')
        # Processing the call keyword arguments
        kwargs_285182 = {}
        # Getting the type of 'call_assignment_281161' (line 1312)
        call_assignment_281161_285179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 12), 'call_assignment_281161', False)
        # Obtaining the member '__getitem__' of a type (line 1312)
        getitem___285180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 12), call_assignment_281161_285179, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_285183 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___285180, *[int_285181], **kwargs_285182)
        
        # Assigning a type to the variable 'call_assignment_281164' (line 1312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 12), 'call_assignment_281164', getitem___call_result_285183)
        
        # Assigning a Name to a Name (line 1312):
        # Getting the type of 'call_assignment_281164' (line 1312)
        call_assignment_281164_285184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 12), 'call_assignment_281164')
        # Assigning a type to the variable 'horiz2' (line 1312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 26), 'horiz2', call_assignment_281164_285184)
        
        # Getting the type of 'self' (line 1313)
        self_285185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 21), 'self')
        # Obtaining the member 'yaxis' of a type (line 1313)
        yaxis_285186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 21), self_285185, 'yaxis')
        # Obtaining the member 'majorTicks' of a type (line 1313)
        majorTicks_285187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 21), yaxis_285186, 'majorTicks')
        # Getting the type of 'self' (line 1313)
        self_285188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 45), 'self')
        # Obtaining the member 'yaxis' of a type (line 1313)
        yaxis_285189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 45), self_285188, 'yaxis')
        # Obtaining the member 'minorTicks' of a type (line 1313)
        minorTicks_285190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 45), yaxis_285189, 'minorTicks')
        # Applying the binary operator '+' (line 1313)
        result_add_285191 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 21), '+', majorTicks_285187, minorTicks_285190)
        
        # Testing the type of a for loop iterable (line 1313)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1313, 12), result_add_285191)
        # Getting the type of the for loop variable (line 1313)
        for_loop_var_285192 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1313, 12), result_add_285191)
        # Assigning a type to the variable 't' (line 1313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1313, 12), 't', for_loop_var_285192)
        # SSA begins for a for statement (line 1313)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_va(...): (line 1314)
        # Processing the call arguments (line 1314)
        # Getting the type of 'vert1' (line 1314)
        vert1_285196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 32), 'vert1', False)
        # Processing the call keyword arguments (line 1314)
        kwargs_285197 = {}
        # Getting the type of 't' (line 1314)
        t_285193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 16), 't', False)
        # Obtaining the member 'label1' of a type (line 1314)
        label1_285194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 16), t_285193, 'label1')
        # Obtaining the member 'set_va' of a type (line 1314)
        set_va_285195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 16), label1_285194, 'set_va')
        # Calling set_va(args, kwargs) (line 1314)
        set_va_call_result_285198 = invoke(stypy.reporting.localization.Localization(__file__, 1314, 16), set_va_285195, *[vert1_285196], **kwargs_285197)
        
        
        # Call to set_ha(...): (line 1315)
        # Processing the call arguments (line 1315)
        # Getting the type of 'horiz1' (line 1315)
        horiz1_285202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 32), 'horiz1', False)
        # Processing the call keyword arguments (line 1315)
        kwargs_285203 = {}
        # Getting the type of 't' (line 1315)
        t_285199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 16), 't', False)
        # Obtaining the member 'label1' of a type (line 1315)
        label1_285200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1315, 16), t_285199, 'label1')
        # Obtaining the member 'set_ha' of a type (line 1315)
        set_ha_285201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1315, 16), label1_285200, 'set_ha')
        # Calling set_ha(args, kwargs) (line 1315)
        set_ha_call_result_285204 = invoke(stypy.reporting.localization.Localization(__file__, 1315, 16), set_ha_285201, *[horiz1_285202], **kwargs_285203)
        
        
        # Call to set_va(...): (line 1316)
        # Processing the call arguments (line 1316)
        # Getting the type of 'vert2' (line 1316)
        vert2_285208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 32), 'vert2', False)
        # Processing the call keyword arguments (line 1316)
        kwargs_285209 = {}
        # Getting the type of 't' (line 1316)
        t_285205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 16), 't', False)
        # Obtaining the member 'label2' of a type (line 1316)
        label2_285206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 16), t_285205, 'label2')
        # Obtaining the member 'set_va' of a type (line 1316)
        set_va_285207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 16), label2_285206, 'set_va')
        # Calling set_va(args, kwargs) (line 1316)
        set_va_call_result_285210 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 16), set_va_285207, *[vert2_285208], **kwargs_285209)
        
        
        # Call to set_ha(...): (line 1317)
        # Processing the call arguments (line 1317)
        # Getting the type of 'horiz2' (line 1317)
        horiz2_285214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 32), 'horiz2', False)
        # Processing the call keyword arguments (line 1317)
        kwargs_285215 = {}
        # Getting the type of 't' (line 1317)
        t_285211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 16), 't', False)
        # Obtaining the member 'label2' of a type (line 1317)
        label2_285212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1317, 16), t_285211, 'label2')
        # Obtaining the member 'set_ha' of a type (line 1317)
        set_ha_285213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1317, 16), label2_285212, 'set_ha')
        # Calling set_ha(args, kwargs) (line 1317)
        set_ha_call_result_285216 = invoke(stypy.reporting.localization.Localization(__file__, 1317, 16), set_ha_285213, *[horiz2_285214], **kwargs_285215)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1297)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'p' (line 1319)
        p_285217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 13), 'p')
        # Obtaining the member 'mode' of a type (line 1319)
        mode_285218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 13), p_285217, 'mode')
        unicode_285219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1319, 23), 'unicode', u'zoom')
        # Applying the binary operator '==' (line 1319)
        result_eq_285220 = python_operator(stypy.reporting.localization.Localization(__file__, 1319, 13), '==', mode_285218, unicode_285219)
        
        # Testing the type of an if condition (line 1319)
        if_condition_285221 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1319, 13), result_eq_285220)
        # Assigning a type to the variable 'if_condition_285221' (line 1319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1319, 13), 'if_condition_285221', if_condition_285221)
        # SSA begins for if statement (line 1319)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1320):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 1320)
        # Processing the call arguments (line 1320)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1320)
        tuple_285225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 62), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1320)
        # Adding element type (line 1320)
        # Getting the type of 'p' (line 1320)
        p_285226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 62), 'p', False)
        # Obtaining the member 'x' of a type (line 1320)
        x_285227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 62), p_285226, 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1320, 62), tuple_285225, x_285227)
        # Adding element type (line 1320)
        # Getting the type of 'p' (line 1320)
        p_285228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 67), 'p', False)
        # Obtaining the member 'y' of a type (line 1320)
        y_285229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 67), p_285228, 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1320, 62), tuple_285225, y_285229)
        
        # Processing the call keyword arguments (line 1320)
        kwargs_285230 = {}
        # Getting the type of 'p' (line 1320)
        p_285222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 29), 'p', False)
        # Obtaining the member 'trans_inverse' of a type (line 1320)
        trans_inverse_285223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 29), p_285222, 'trans_inverse')
        # Obtaining the member 'transform_point' of a type (line 1320)
        transform_point_285224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 29), trans_inverse_285223, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1320)
        transform_point_call_result_285231 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 29), transform_point_285224, *[tuple_285225], **kwargs_285230)
        
        # Assigning a type to the variable 'call_assignment_281165' (line 1320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'call_assignment_281165', transform_point_call_result_285231)
        
        # Assigning a Call to a Name (line 1320):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_285234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 12), 'int')
        # Processing the call keyword arguments
        kwargs_285235 = {}
        # Getting the type of 'call_assignment_281165' (line 1320)
        call_assignment_281165_285232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'call_assignment_281165', False)
        # Obtaining the member '__getitem__' of a type (line 1320)
        getitem___285233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 12), call_assignment_281165_285232, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_285236 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___285233, *[int_285234], **kwargs_285235)
        
        # Assigning a type to the variable 'call_assignment_281166' (line 1320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'call_assignment_281166', getitem___call_result_285236)
        
        # Assigning a Name to a Name (line 1320):
        # Getting the type of 'call_assignment_281166' (line 1320)
        call_assignment_281166_285237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'call_assignment_281166')
        # Assigning a type to the variable 'startt' (line 1320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'startt', call_assignment_281166_285237)
        
        # Assigning a Call to a Name (line 1320):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_285240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 12), 'int')
        # Processing the call keyword arguments
        kwargs_285241 = {}
        # Getting the type of 'call_assignment_281165' (line 1320)
        call_assignment_281165_285238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'call_assignment_281165', False)
        # Obtaining the member '__getitem__' of a type (line 1320)
        getitem___285239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 12), call_assignment_281165_285238, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_285242 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___285239, *[int_285240], **kwargs_285241)
        
        # Assigning a type to the variable 'call_assignment_281167' (line 1320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'call_assignment_281167', getitem___call_result_285242)
        
        # Assigning a Name to a Name (line 1320):
        # Getting the type of 'call_assignment_281167' (line 1320)
        call_assignment_281167_285243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'call_assignment_281167')
        # Assigning a type to the variable 'startr' (line 1320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 20), 'startr', call_assignment_281167_285243)
        
        # Assigning a Call to a Tuple (line 1321):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 1321)
        # Processing the call arguments (line 1321)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1321)
        tuple_285247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1321, 52), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1321)
        # Adding element type (line 1321)
        # Getting the type of 'x' (line 1321)
        x_285248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 52), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1321, 52), tuple_285247, x_285248)
        # Adding element type (line 1321)
        # Getting the type of 'y' (line 1321)
        y_285249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 55), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1321, 52), tuple_285247, y_285249)
        
        # Processing the call keyword arguments (line 1321)
        kwargs_285250 = {}
        # Getting the type of 'p' (line 1321)
        p_285244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 19), 'p', False)
        # Obtaining the member 'trans_inverse' of a type (line 1321)
        trans_inverse_285245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1321, 19), p_285244, 'trans_inverse')
        # Obtaining the member 'transform_point' of a type (line 1321)
        transform_point_285246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1321, 19), trans_inverse_285245, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1321)
        transform_point_call_result_285251 = invoke(stypy.reporting.localization.Localization(__file__, 1321, 19), transform_point_285246, *[tuple_285247], **kwargs_285250)
        
        # Assigning a type to the variable 'call_assignment_281168' (line 1321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1321, 12), 'call_assignment_281168', transform_point_call_result_285251)
        
        # Assigning a Call to a Name (line 1321):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_285254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1321, 12), 'int')
        # Processing the call keyword arguments
        kwargs_285255 = {}
        # Getting the type of 'call_assignment_281168' (line 1321)
        call_assignment_281168_285252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 12), 'call_assignment_281168', False)
        # Obtaining the member '__getitem__' of a type (line 1321)
        getitem___285253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1321, 12), call_assignment_281168_285252, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_285256 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___285253, *[int_285254], **kwargs_285255)
        
        # Assigning a type to the variable 'call_assignment_281169' (line 1321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1321, 12), 'call_assignment_281169', getitem___call_result_285256)
        
        # Assigning a Name to a Name (line 1321):
        # Getting the type of 'call_assignment_281169' (line 1321)
        call_assignment_281169_285257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 12), 'call_assignment_281169')
        # Assigning a type to the variable 't' (line 1321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1321, 12), 't', call_assignment_281169_285257)
        
        # Assigning a Call to a Name (line 1321):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_285260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1321, 12), 'int')
        # Processing the call keyword arguments
        kwargs_285261 = {}
        # Getting the type of 'call_assignment_281168' (line 1321)
        call_assignment_281168_285258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 12), 'call_assignment_281168', False)
        # Obtaining the member '__getitem__' of a type (line 1321)
        getitem___285259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1321, 12), call_assignment_281168_285258, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_285262 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___285259, *[int_285260], **kwargs_285261)
        
        # Assigning a type to the variable 'call_assignment_281170' (line 1321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1321, 12), 'call_assignment_281170', getitem___call_result_285262)
        
        # Assigning a Name to a Name (line 1321):
        # Getting the type of 'call_assignment_281170' (line 1321)
        call_assignment_281170_285263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 12), 'call_assignment_281170')
        # Assigning a type to the variable 'r' (line 1321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1321, 15), 'r', call_assignment_281170_285263)
        
        # Assigning a BinOp to a Name (line 1324):
        
        # Assigning a BinOp to a Name (line 1324):
        # Getting the type of 'r' (line 1324)
        r_285264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 20), 'r')
        # Getting the type of 'startr' (line 1324)
        startr_285265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 24), 'startr')
        # Applying the binary operator 'div' (line 1324)
        result_div_285266 = python_operator(stypy.reporting.localization.Localization(__file__, 1324, 20), 'div', r_285264, startr_285265)
        
        # Assigning a type to the variable 'scale' (line 1324)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1324, 12), 'scale', result_div_285266)
        
        # Call to set_rmax(...): (line 1325)
        # Processing the call arguments (line 1325)
        # Getting the type of 'p' (line 1325)
        p_285269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 26), 'p', False)
        # Obtaining the member 'rmax' of a type (line 1325)
        rmax_285270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1325, 26), p_285269, 'rmax')
        # Getting the type of 'scale' (line 1325)
        scale_285271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 35), 'scale', False)
        # Applying the binary operator 'div' (line 1325)
        result_div_285272 = python_operator(stypy.reporting.localization.Localization(__file__, 1325, 26), 'div', rmax_285270, scale_285271)
        
        # Processing the call keyword arguments (line 1325)
        kwargs_285273 = {}
        # Getting the type of 'self' (line 1325)
        self_285267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 12), 'self', False)
        # Obtaining the member 'set_rmax' of a type (line 1325)
        set_rmax_285268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1325, 12), self_285267, 'set_rmax')
        # Calling set_rmax(args, kwargs) (line 1325)
        set_rmax_call_result_285274 = invoke(stypy.reporting.localization.Localization(__file__, 1325, 12), set_rmax_285268, *[result_div_285272], **kwargs_285273)
        
        # SSA join for if statement (line 1319)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1297)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'drag_pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'drag_pan' in the type store
        # Getting the type of 'stypy_return_type' (line 1294)
        stypy_return_type_285275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_285275)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'drag_pan'
        return stypy_return_type_285275


# Assigning a type to the variable 'PolarAxes' (line 746)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 0), 'PolarAxes', PolarAxes)

# Assigning a Str to a Name (line 752):
unicode_285276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 11), 'unicode', u'polar')
# Getting the type of 'PolarAxes'
PolarAxes_285277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'PolarAxes')
# Setting the type of the member 'name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), PolarAxes_285277, 'name', unicode_285276)

# Assigning a Attribute to a Attribute (line 766):
# Getting the type of 'Axes' (line 766)
Axes_285278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 23), 'Axes')
# Obtaining the member '__init__' of a type (line 766)
init___285279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 23), Axes_285278, '__init__')
# Obtaining the member '__doc__' of a type (line 766)
doc___285280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 23), init___285279, '__doc__')
# Getting the type of 'PolarAxes'
PolarAxes_285281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'PolarAxes')
# Obtaining the member '__init__' of a type
init___285282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), PolarAxes_285281, '__init__')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), init___285282, '__doc__', doc___285280)

# Assigning a Name to a Attribute (line 1331):

# Assigning a Name to a Attribute (line 1331):
# Getting the type of 'PolarTransform' (line 1331)
PolarTransform_285283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 27), 'PolarTransform')
# Getting the type of 'PolarAxes' (line 1331)
PolarAxes_285284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 0), 'PolarAxes')
# Setting the type of the member 'PolarTransform' of a type (line 1331)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1331, 0), PolarAxes_285284, 'PolarTransform', PolarTransform_285283)

# Assigning a Name to a Attribute (line 1332):

# Assigning a Name to a Attribute (line 1332):
# Getting the type of 'PolarAffine' (line 1332)
PolarAffine_285285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 24), 'PolarAffine')
# Getting the type of 'PolarAxes' (line 1332)
PolarAxes_285286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 0), 'PolarAxes')
# Setting the type of the member 'PolarAffine' of a type (line 1332)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1332, 0), PolarAxes_285286, 'PolarAffine', PolarAffine_285285)

# Assigning a Name to a Attribute (line 1333):

# Assigning a Name to a Attribute (line 1333):
# Getting the type of 'InvertedPolarTransform' (line 1333)
InvertedPolarTransform_285287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 35), 'InvertedPolarTransform')
# Getting the type of 'PolarAxes' (line 1333)
PolarAxes_285288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 0), 'PolarAxes')
# Setting the type of the member 'InvertedPolarTransform' of a type (line 1333)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1333, 0), PolarAxes_285288, 'InvertedPolarTransform', InvertedPolarTransform_285287)

# Assigning a Name to a Attribute (line 1334):

# Assigning a Name to a Attribute (line 1334):
# Getting the type of 'ThetaFormatter' (line 1334)
ThetaFormatter_285289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 27), 'ThetaFormatter')
# Getting the type of 'PolarAxes' (line 1334)
PolarAxes_285290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 0), 'PolarAxes')
# Setting the type of the member 'ThetaFormatter' of a type (line 1334)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 0), PolarAxes_285290, 'ThetaFormatter', ThetaFormatter_285289)

# Assigning a Name to a Attribute (line 1335):

# Assigning a Name to a Attribute (line 1335):
# Getting the type of 'RadialLocator' (line 1335)
RadialLocator_285291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 26), 'RadialLocator')
# Getting the type of 'PolarAxes' (line 1335)
PolarAxes_285292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 0), 'PolarAxes')
# Setting the type of the member 'RadialLocator' of a type (line 1335)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 0), PolarAxes_285292, 'RadialLocator', RadialLocator_285291)

# Assigning a Name to a Attribute (line 1336):

# Assigning a Name to a Attribute (line 1336):
# Getting the type of 'ThetaLocator' (line 1336)
ThetaLocator_285293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 25), 'ThetaLocator')
# Getting the type of 'PolarAxes' (line 1336)
PolarAxes_285294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 0), 'PolarAxes')
# Setting the type of the member 'ThetaLocator' of a type (line 1336)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 0), PolarAxes_285294, 'ThetaLocator', ThetaLocator_285293)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
