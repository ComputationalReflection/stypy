
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: The OffsetBox is a simple container artist. The child artist are meant
3: to be drawn at a relative position to its parent.  The [VH]Packer,
4: DrawingArea and TextArea are derived from the OffsetBox.
5: 
6: The [VH]Packer automatically adjust the relative postisions of their
7: children, which should be instances of the OffsetBox. This is used to
8: align similar artists together, e.g., in legend.
9: 
10: The DrawingArea can contain any Artist as a child. The
11: DrawingArea has a fixed width and height. The position of children
12: relative to the parent is fixed.  The TextArea is contains a single
13: Text instance. The width and height of the TextArea instance is the
14: width and height of the its child text.
15: '''
16: 
17: from __future__ import (absolute_import, division, print_function,
18:                         unicode_literals)
19: 
20: import six
21: from six.moves import xrange, zip
22: 
23: import warnings
24: import matplotlib.transforms as mtransforms
25: import matplotlib.artist as martist
26: import matplotlib.text as mtext
27: import matplotlib.path as mpath
28: import numpy as np
29: from matplotlib.transforms import Bbox, BboxBase, TransformedBbox
30: 
31: from matplotlib.font_manager import FontProperties
32: from matplotlib.patches import FancyBboxPatch, FancyArrowPatch
33: from matplotlib import rcParams
34: 
35: from matplotlib import docstring
36: 
37: #from bboximage import BboxImage
38: from matplotlib.image import BboxImage
39: 
40: from matplotlib.patches import bbox_artist as mbbox_artist
41: from matplotlib.text import _AnnotationBase
42: 
43: 
44: DEBUG = False
45: 
46: 
47: # for debuging use
48: def bbox_artist(*args, **kwargs):
49:     if DEBUG:
50:         mbbox_artist(*args, **kwargs)
51: 
52: # _get_packed_offsets() and _get_aligned_offsets() are coded assuming
53: # that we are packing boxes horizontally. But same function will be
54: # used with vertical packing.
55: 
56: 
57: def _get_packed_offsets(wd_list, total, sep, mode="fixed"):
58:     '''
59:     Geiven a list of (width, xdescent) of each boxes, calculate the
60:     total width and the x-offset positions of each items according to
61:     *mode*. xdescent is analagous to the usual descent, but along the
62:     x-direction. xdescent values are currently ignored.
63: 
64:     *wd_list* : list of (width, xdescent) of boxes to be packed.
65:     *sep* : spacing between boxes
66:     *total* : Intended total length. None if not used.
67:     *mode* : packing mode. 'fixed', 'expand', or 'equal'.
68:     '''
69: 
70:     w_list, d_list = zip(*wd_list)
71:     # d_list is currently not used.
72: 
73:     if mode == "fixed":
74:         offsets_ = np.cumsum([0] + [w + sep for w in w_list])
75:         offsets = offsets_[:-1]
76:         if total is None:
77:             total = offsets_[-1] - sep
78:         return total, offsets
79: 
80:     elif mode == "expand":
81:         if len(w_list) > 1:
82:             sep = (total - sum(w_list)) / (len(w_list) - 1.)
83:         else:
84:             sep = 0
85:         offsets_ = np.cumsum([0] + [w + sep for w in w_list])
86:         offsets = offsets_[:-1]
87:         return total, offsets
88: 
89:     elif mode == "equal":
90:         maxh = max(w_list)
91:         if total is None:
92:             total = (maxh + sep) * len(w_list)
93:         else:
94:             sep = total / len(w_list) - maxh
95:         offsets = (maxh + sep) * np.arange(len(w_list))
96:         return total, offsets
97: 
98:     else:
99:         raise ValueError("Unknown mode : %s" % (mode,))
100: 
101: 
102: def _get_aligned_offsets(hd_list, height, align="baseline"):
103:     '''
104:     Given a list of (height, descent) of each boxes, align the boxes
105:     with *align* and calculate the y-offsets of each boxes.
106:     total width and the offset positions of each items according to
107:     *mode*. xdescent is analogous to the usual descent, but along the
108:     x-direction. xdescent values are currently ignored.
109: 
110:     *hd_list* : list of (width, xdescent) of boxes to be aligned.
111:     *sep* : spacing between boxes
112:     *height* : Intended total length. None if not used.
113:     *align* : align mode. 'baseline', 'top', 'bottom', or 'center'.
114:     '''
115: 
116:     if height is None:
117:         height = max(h for h, d in hd_list)
118: 
119:     if align == "baseline":
120:         height_descent = max(h - d for h, d in hd_list)
121:         descent = max(d for h, d in hd_list)
122:         height = height_descent + descent
123:         offsets = [0. for h, d in hd_list]
124:     elif align in ["left", "top"]:
125:         descent = 0.
126:         offsets = [d for h, d in hd_list]
127:     elif align in ["right", "bottom"]:
128:         descent = 0.
129:         offsets = [height - h + d for h, d in hd_list]
130:     elif align == "center":
131:         descent = 0.
132:         offsets = [(height - h) * .5 + d for h, d in hd_list]
133:     else:
134:         raise ValueError("Unknown Align mode : %s" % (align,))
135: 
136:     return height, descent, offsets
137: 
138: 
139: class OffsetBox(martist.Artist):
140:     '''
141:     The OffsetBox is a simple container artist. The child artist are meant
142:     to be drawn at a relative position to its parent.
143:     '''
144:     def __init__(self, *args, **kwargs):
145: 
146:         super(OffsetBox, self).__init__(*args, **kwargs)
147: 
148:         # Clipping has not been implemented in the OffesetBox family, so
149:         # disable the clip flag for consistency. It can always be turned back
150:         # on to zero effect.
151:         self.set_clip_on(False)
152: 
153:         self._children = []
154:         self._offset = (0, 0)
155: 
156:     def __getstate__(self):
157:         state = martist.Artist.__getstate__(self)
158: 
159:         # pickle cannot save instancemethods, so handle them here
160:         from .cbook import _InstanceMethodPickler
161:         import inspect
162: 
163:         offset = state['_offset']
164:         if inspect.ismethod(offset):
165:             state['_offset'] = _InstanceMethodPickler(offset)
166:         return state
167: 
168:     def __setstate__(self, state):
169:         self.__dict__ = state
170:         from .cbook import _InstanceMethodPickler
171:         if isinstance(self._offset, _InstanceMethodPickler):
172:             self._offset = self._offset.get_instancemethod()
173:         self.stale = True
174: 
175:     def set_figure(self, fig):
176:         '''
177:         Set the figure
178: 
179:         accepts a class:`~matplotlib.figure.Figure` instance
180:         '''
181:         martist.Artist.set_figure(self, fig)
182:         for c in self.get_children():
183:             c.set_figure(fig)
184: 
185:     @martist.Artist.axes.setter
186:     def axes(self, ax):
187:         # TODO deal with this better
188:         martist.Artist.axes.fset(self, ax)
189:         for c in self.get_children():
190:             if c is not None:
191:                 c.axes = ax
192: 
193:     def contains(self, mouseevent):
194:         for c in self.get_children():
195:             a, b = c.contains(mouseevent)
196:             if a:
197:                 return a, b
198:         return False, {}
199: 
200:     def set_offset(self, xy):
201:         '''
202:         Set the offset
203: 
204:         accepts x, y, tuple, or a callable object.
205:         '''
206:         self._offset = xy
207:         self.stale = True
208: 
209:     def get_offset(self, width, height, xdescent, ydescent, renderer):
210:         '''
211:         Get the offset
212: 
213:         accepts extent of the box
214:         '''
215:         return (self._offset(width, height, xdescent, ydescent, renderer)
216:                 if callable(self._offset)
217:                 else self._offset)
218: 
219:     def set_width(self, width):
220:         '''
221:         Set the width
222: 
223:         accepts float
224:         '''
225:         self.width = width
226:         self.stale = True
227: 
228:     def set_height(self, height):
229:         '''
230:         Set the height
231: 
232:         accepts float
233:         '''
234:         self.height = height
235:         self.stale = True
236: 
237:     def get_visible_children(self):
238:         '''
239:         Return a list of visible artists it contains.
240:         '''
241:         return [c for c in self._children if c.get_visible()]
242: 
243:     def get_children(self):
244:         '''
245:         Return a list of artists it contains.
246:         '''
247:         return self._children
248: 
249:     def get_extent_offsets(self, renderer):
250:         raise Exception("")
251: 
252:     def get_extent(self, renderer):
253:         '''
254:         Return with, height, xdescent, ydescent of box
255:         '''
256:         w, h, xd, yd, offsets = self.get_extent_offsets(renderer)
257:         return w, h, xd, yd
258: 
259:     def get_window_extent(self, renderer):
260:         '''
261:         get the bounding box in display space.
262:         '''
263:         w, h, xd, yd, offsets = self.get_extent_offsets(renderer)
264:         px, py = self.get_offset(w, h, xd, yd, renderer)
265:         return mtransforms.Bbox.from_bounds(px - xd, py - yd, w, h)
266: 
267:     def draw(self, renderer):
268:         '''
269:         Update the location of children if necessary and draw them
270:         to the given *renderer*.
271:         '''
272: 
273:         width, height, xdescent, ydescent, offsets = self.get_extent_offsets(
274:                                                         renderer)
275: 
276:         px, py = self.get_offset(width, height, xdescent, ydescent, renderer)
277: 
278:         for c, (ox, oy) in zip(self.get_visible_children(), offsets):
279:             c.set_offset((px + ox, py + oy))
280:             c.draw(renderer)
281: 
282:         bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
283:         self.stale = False
284: 
285: 
286: class PackerBase(OffsetBox):
287:     def __init__(self, pad=None, sep=None, width=None, height=None,
288:                  align=None, mode=None,
289:                  children=None):
290:         '''
291:         Parameters
292:         ----------
293:         pad : float, optional
294:             Boundary pad.
295: 
296:         sep : float, optional
297:             Spacing between items.
298: 
299:         width : float, optional
300: 
301:         height : float, optional
302:            Width and height of the container box, calculated if
303:            `None`.
304: 
305:         align : str, optional
306:             Alignment of boxes. Can be one of ``top``, ``bottom``,
307:             ``left``, ``right``, ``center`` and ``baseline``
308: 
309:         mode : str, optional
310:             Packing mode.
311: 
312:         Notes
313:         -----
314:         *pad* and *sep* need to given in points and will be scale with
315:         the renderer dpi, while *width* and *height* need to be in
316:         pixels.
317:         '''
318:         super(PackerBase, self).__init__()
319: 
320:         self.height = height
321:         self.width = width
322:         self.sep = sep
323:         self.pad = pad
324:         self.mode = mode
325:         self.align = align
326: 
327:         self._children = children
328: 
329: 
330: class VPacker(PackerBase):
331:     '''
332:     The VPacker has its children packed vertically. It automatically
333:     adjust the relative positions of children in the drawing time.
334:     '''
335:     def __init__(self, pad=None, sep=None, width=None, height=None,
336:                  align="baseline", mode="fixed",
337:                  children=None):
338:         '''
339:         Parameters
340:         ----------
341:         pad : float, optional
342:             Boundary pad.
343: 
344:         sep : float, optional
345:             Spacing between items.
346: 
347:         width : float, optional
348: 
349:         height : float, optional
350: 
351:             width and height of the container box, calculated if
352:             `None`.
353: 
354:         align : str, optional
355:             Alignment of boxes.
356: 
357:         mode : str, optional
358:             Packing mode.
359: 
360:         Notes
361:         -----
362:         *pad* and *sep* need to given in points and will be scale with
363:         the renderer dpi, while *width* and *height* need to be in
364:         pixels.
365:         '''
366:         super(VPacker, self).__init__(pad, sep, width, height,
367:                                       align, mode,
368:                                       children)
369: 
370:     def get_extent_offsets(self, renderer):
371:         '''
372:         update offset of childrens and return the extents of the box
373:         '''
374: 
375:         dpicor = renderer.points_to_pixels(1.)
376:         pad = self.pad * dpicor
377:         sep = self.sep * dpicor
378: 
379:         if self.width is not None:
380:             for c in self.get_visible_children():
381:                 if isinstance(c, PackerBase) and c.mode == "expand":
382:                     c.set_width(self.width)
383: 
384:         whd_list = [c.get_extent(renderer)
385:                     for c in self.get_visible_children()]
386:         whd_list = [(w, h, xd, (h - yd)) for w, h, xd, yd in whd_list]
387: 
388:         wd_list = [(w, xd) for w, h, xd, yd in whd_list]
389:         width, xdescent, xoffsets = _get_aligned_offsets(wd_list,
390:                                                          self.width,
391:                                                          self.align)
392: 
393:         pack_list = [(h, yd) for w, h, xd, yd in whd_list]
394:         height, yoffsets_ = _get_packed_offsets(pack_list, self.height,
395:                                                 sep, self.mode)
396: 
397:         yoffsets = yoffsets_ + [yd for w, h, xd, yd in whd_list]
398:         ydescent = height - yoffsets[0]
399:         yoffsets = height - yoffsets
400: 
401:         #w, h, xd, h_yd = whd_list[-1]
402:         yoffsets = yoffsets - ydescent
403: 
404:         return width + 2 * pad, height + 2 * pad, \
405:                xdescent + pad, ydescent + pad, \
406:                list(zip(xoffsets, yoffsets))
407: 
408: 
409: class HPacker(PackerBase):
410:     '''
411:     The HPacker has its children packed horizontally. It automatically
412:     adjusts the relative positions of children at draw time.
413:     '''
414:     def __init__(self, pad=None, sep=None, width=None, height=None,
415:                  align="baseline", mode="fixed",
416:                  children=None):
417:         '''
418:         Parameters
419:         ----------
420:         pad : float, optional
421:             Boundary pad.
422: 
423:         sep : float, optional
424:             Spacing between items.
425: 
426:         width : float, optional
427: 
428:         height : float, optional
429:            Width and height of the container box, calculated if
430:            `None`.
431: 
432:         align : str
433:            Alignment of boxes.
434: 
435:         mode : str
436:            Packing mode.
437: 
438:         Notes
439:         -----
440:         *pad* and *sep* need to given in points and will be scale with
441:         the renderer dpi, while *width* and *height* need to be in
442:         pixels.
443:         '''
444:         super(HPacker, self).__init__(pad, sep, width, height,
445:                                       align, mode, children)
446: 
447:     def get_extent_offsets(self, renderer):
448:         '''
449:         update offset of children and return the extents of the box
450:         '''
451:         dpicor = renderer.points_to_pixels(1.)
452:         pad = self.pad * dpicor
453:         sep = self.sep * dpicor
454: 
455:         whd_list = [c.get_extent(renderer)
456:                     for c in self.get_visible_children()]
457: 
458:         if not whd_list:
459:             return 2 * pad, 2 * pad, pad, pad, []
460: 
461:         if self.height is None:
462:             height_descent = max(h - yd for w, h, xd, yd in whd_list)
463:             ydescent = max(yd for w, h, xd, yd in whd_list)
464:             height = height_descent + ydescent
465:         else:
466:             height = self.height - 2 * pad  # width w/o pad
467: 
468:         hd_list = [(h, yd) for w, h, xd, yd in whd_list]
469:         height, ydescent, yoffsets = _get_aligned_offsets(hd_list,
470:                                                           self.height,
471:                                                           self.align)
472: 
473:         pack_list = [(w, xd) for w, h, xd, yd in whd_list]
474: 
475:         width, xoffsets_ = _get_packed_offsets(pack_list, self.width,
476:                                                sep, self.mode)
477: 
478:         xoffsets = xoffsets_ + [xd for w, h, xd, yd in whd_list]
479: 
480:         xdescent = whd_list[0][2]
481:         xoffsets = xoffsets - xdescent
482: 
483:         return width + 2 * pad, height + 2 * pad, \
484:                xdescent + pad, ydescent + pad, \
485:                list(zip(xoffsets, yoffsets))
486: 
487: 
488: class PaddedBox(OffsetBox):
489:     def __init__(self, child, pad=None, draw_frame=False, patch_attrs=None):
490:         '''
491:         *pad* : boundary pad
492: 
493:         .. note::
494:           *pad* need to given in points and will be
495:           scale with the renderer dpi, while *width* and *height*
496:           need to be in pixels.
497:         '''
498: 
499:         super(PaddedBox, self).__init__()
500: 
501:         self.pad = pad
502:         self._children = [child]
503: 
504:         self.patch = FancyBboxPatch(
505:             xy=(0.0, 0.0), width=1., height=1.,
506:             facecolor='w', edgecolor='k',
507:             mutation_scale=1,  # self.prop.get_size_in_points(),
508:             snap=True
509:             )
510: 
511:         self.patch.set_boxstyle("square", pad=0)
512: 
513:         if patch_attrs is not None:
514:             self.patch.update(patch_attrs)
515: 
516:         self._drawFrame = draw_frame
517: 
518:     def get_extent_offsets(self, renderer):
519:         '''
520:         update offset of childrens and return the extents of the box
521:         '''
522: 
523:         dpicor = renderer.points_to_pixels(1.)
524:         pad = self.pad * dpicor
525: 
526:         w, h, xd, yd = self._children[0].get_extent(renderer)
527: 
528:         return w + 2 * pad, h + 2 * pad, \
529:                xd + pad, yd + pad, \
530:                [(0, 0)]
531: 
532:     def draw(self, renderer):
533:         '''
534:         Update the location of children if necessary and draw them
535:         to the given *renderer*.
536:         '''
537: 
538:         width, height, xdescent, ydescent, offsets = self.get_extent_offsets(
539:                                                         renderer)
540: 
541:         px, py = self.get_offset(width, height, xdescent, ydescent, renderer)
542: 
543:         for c, (ox, oy) in zip(self.get_visible_children(), offsets):
544:             c.set_offset((px + ox, py + oy))
545: 
546:         self.draw_frame(renderer)
547: 
548:         for c in self.get_visible_children():
549:             c.draw(renderer)
550: 
551:         #bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
552:         self.stale = False
553: 
554:     def update_frame(self, bbox, fontsize=None):
555:         self.patch.set_bounds(bbox.x0, bbox.y0,
556:                               bbox.width, bbox.height)
557: 
558:         if fontsize:
559:             self.patch.set_mutation_scale(fontsize)
560:         self.stale = True
561: 
562:     def draw_frame(self, renderer):
563:         # update the location and size of the legend
564:         bbox = self.get_window_extent(renderer)
565:         self.update_frame(bbox)
566: 
567:         if self._drawFrame:
568:             self.patch.draw(renderer)
569: 
570: 
571: class DrawingArea(OffsetBox):
572:     '''
573:     The DrawingArea can contain any Artist as a child. The DrawingArea
574:     has a fixed width and height. The position of children relative to
575:     the parent is fixed. The children can be clipped at the
576:     boundaries of the parent.
577:     '''
578: 
579:     def __init__(self, width, height, xdescent=0.,
580:                  ydescent=0., clip=False):
581:         '''
582:         *width*, *height* : width and height of the container box.
583:         *xdescent*, *ydescent* : descent of the box in x- and y-direction.
584:         *clip* : Whether to clip the children
585:         '''
586: 
587:         super(DrawingArea, self).__init__()
588: 
589:         self.width = width
590:         self.height = height
591:         self.xdescent = xdescent
592:         self.ydescent = ydescent
593:         self._clip_children = clip
594: 
595:         self.offset_transform = mtransforms.Affine2D()
596:         self.offset_transform.clear()
597:         self.offset_transform.translate(0, 0)
598: 
599:         self.dpi_transform = mtransforms.Affine2D()
600: 
601:     @property
602:     def clip_children(self):
603:         '''
604:         If the children of this DrawingArea should be clipped
605:         by DrawingArea bounding box.
606:         '''
607:         return self._clip_children
608: 
609:     @clip_children.setter
610:     def clip_children(self, val):
611:         self._clip_children = bool(val)
612:         self.stale = True
613: 
614:     def get_transform(self):
615:         '''
616:         Return the :class:`~matplotlib.transforms.Transform` applied
617:         to the children
618:         '''
619:         return self.dpi_transform + self.offset_transform
620: 
621:     def set_transform(self, t):
622:         '''
623:         set_transform is ignored.
624:         '''
625:         pass
626: 
627:     def set_offset(self, xy):
628:         '''
629:         set offset of the container.
630: 
631:         Accept : tuple of x,y cooridnate in disokay units.
632:         '''
633:         self._offset = xy
634: 
635:         self.offset_transform.clear()
636:         self.offset_transform.translate(xy[0], xy[1])
637:         self.stale = True
638: 
639:     def get_offset(self):
640:         '''
641:         return offset of the container.
642:         '''
643:         return self._offset
644: 
645:     def get_window_extent(self, renderer):
646:         '''
647:         get the bounding box in display space.
648:         '''
649:         w, h, xd, yd = self.get_extent(renderer)
650:         ox, oy = self.get_offset()  # w, h, xd, yd)
651: 
652:         return mtransforms.Bbox.from_bounds(ox - xd, oy - yd, w, h)
653: 
654:     def get_extent(self, renderer):
655:         '''
656:         Return with, height, xdescent, ydescent of box
657:         '''
658: 
659:         dpi_cor = renderer.points_to_pixels(1.)
660:         return self.width * dpi_cor, self.height * dpi_cor, \
661:                self.xdescent * dpi_cor, self.ydescent * dpi_cor
662: 
663:     def add_artist(self, a):
664:         'Add any :class:`~matplotlib.artist.Artist` to the container box'
665:         self._children.append(a)
666:         if not a.is_transform_set():
667:             a.set_transform(self.get_transform())
668:         if self.axes is not None:
669:             a.axes = self.axes
670:         fig = self.figure
671:         if fig is not None:
672:             a.set_figure(fig)
673: 
674:     def draw(self, renderer):
675:         '''
676:         Draw the children
677:         '''
678: 
679:         dpi_cor = renderer.points_to_pixels(1.)
680:         self.dpi_transform.clear()
681:         self.dpi_transform.scale(dpi_cor, dpi_cor)
682: 
683:         # At this point the DrawingArea has a transform
684:         # to the display space so the path created is
685:         # good for clipping children
686:         tpath = mtransforms.TransformedPath(
687:             mpath.Path([[0, 0], [0, self.height],
688:                         [self.width, self.height],
689:                         [self.width, 0]]),
690:             self.get_transform())
691:         for c in self._children:
692:             if self._clip_children and not (c.clipbox or c._clippath):
693:                 c.set_clip_path(tpath)
694:             c.draw(renderer)
695: 
696:         bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
697:         self.stale = False
698: 
699: 
700: class TextArea(OffsetBox):
701:     '''
702:     The TextArea is contains a single Text instance. The text is
703:     placed at (0,0) with baseline+left alignment. The width and height
704:     of the TextArea instance is the width and height of the its child
705:     text.
706:     '''
707:     def __init__(self, s,
708:                  textprops=None,
709:                  multilinebaseline=None,
710:                  minimumdescent=True,
711:                  ):
712:         '''
713:         Parameters
714:         ----------
715:         s : str
716:             a string to be displayed.
717: 
718:         textprops : `~matplotlib.font_manager.FontProperties`, optional
719: 
720:         multilinebaseline : bool, optional
721:             If `True`, baseline for multiline text is adjusted so that
722:             it is (approximatedly) center-aligned with singleline
723:             text.
724: 
725:         minimumdescent : bool, optional
726:             If `True`, the box has a minimum descent of "p".
727:         '''
728:         if textprops is None:
729:             textprops = {}
730: 
731:         if "va" not in textprops:
732:             textprops["va"] = "baseline"
733: 
734:         self._text = mtext.Text(0, 0, s, **textprops)
735: 
736:         OffsetBox.__init__(self)
737: 
738:         self._children = [self._text]
739: 
740:         self.offset_transform = mtransforms.Affine2D()
741:         self.offset_transform.clear()
742:         self.offset_transform.translate(0, 0)
743:         self._baseline_transform = mtransforms.Affine2D()
744:         self._text.set_transform(self.offset_transform +
745:                                  self._baseline_transform)
746: 
747:         self._multilinebaseline = multilinebaseline
748:         self._minimumdescent = minimumdescent
749: 
750:     def set_text(self, s):
751:         "Set the text of this area as a string."
752:         self._text.set_text(s)
753:         self.stale = True
754: 
755:     def get_text(self):
756:         "Returns the string representation of this area's text"
757:         return self._text.get_text()
758: 
759:     def set_multilinebaseline(self, t):
760:         '''
761:         Set multilinebaseline .
762: 
763:         If True, baseline for multiline text is
764:         adjusted so that it is (approximatedly) center-aligned with
765:         singleline text.
766:         '''
767:         self._multilinebaseline = t
768:         self.stale = True
769: 
770:     def get_multilinebaseline(self):
771:         '''
772:         get multilinebaseline .
773:         '''
774:         return self._multilinebaseline
775: 
776:     def set_minimumdescent(self, t):
777:         '''
778:         Set minimumdescent .
779: 
780:         If True, extent of the single line text is adjusted so that
781:         it has minimum descent of "p"
782:         '''
783:         self._minimumdescent = t
784:         self.stale = True
785: 
786:     def get_minimumdescent(self):
787:         '''
788:         get minimumdescent.
789:         '''
790:         return self._minimumdescent
791: 
792:     def set_transform(self, t):
793:         '''
794:         set_transform is ignored.
795:         '''
796:         pass
797: 
798:     def set_offset(self, xy):
799:         '''
800:         set offset of the container.
801: 
802:         Accept : tuple of x,y coordinates in display units.
803:         '''
804:         self._offset = xy
805: 
806:         self.offset_transform.clear()
807:         self.offset_transform.translate(xy[0], xy[1])
808:         self.stale = True
809: 
810:     def get_offset(self):
811:         '''
812:         return offset of the container.
813:         '''
814:         return self._offset
815: 
816:     def get_window_extent(self, renderer):
817:         '''
818:         get the bounding box in display space.
819:         '''
820:         w, h, xd, yd = self.get_extent(renderer)
821:         ox, oy = self.get_offset()  # w, h, xd, yd)
822:         return mtransforms.Bbox.from_bounds(ox - xd, oy - yd, w, h)
823: 
824:     def get_extent(self, renderer):
825:         clean_line, ismath = self._text.is_math_text(self._text._text)
826:         _, h_, d_ = renderer.get_text_width_height_descent(
827:             "lp", self._text._fontproperties, ismath=False)
828: 
829:         bbox, info, d = self._text._get_layout(renderer)
830:         w, h = bbox.width, bbox.height
831: 
832:         line = info[-1][0]  # last line
833: 
834:         self._baseline_transform.clear()
835: 
836:         if len(info) > 1 and self._multilinebaseline:
837:             d_new = 0.5 * h - 0.5 * (h_ - d_)
838:             self._baseline_transform.translate(0, d - d_new)
839:             d = d_new
840: 
841:         else:  # single line
842: 
843:             h_d = max(h_ - d_, h - d)
844: 
845:             if self.get_minimumdescent():
846:                 ## to have a minimum descent, #i.e., "l" and "p" have same
847:                 ## descents.
848:                 d = max(d, d_)
849:             #else:
850:             #    d = d
851: 
852:             h = h_d + d
853: 
854:         return w, h, 0., d
855: 
856:     def draw(self, renderer):
857:         '''
858:         Draw the children
859:         '''
860: 
861:         self._text.draw(renderer)
862: 
863:         bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
864:         self.stale = False
865: 
866: 
867: class AuxTransformBox(OffsetBox):
868:     '''
869:     Offset Box with the aux_transform . Its children will be
870:     transformed with the aux_transform first then will be
871:     offseted. The absolute coordinate of the aux_transform is meaning
872:     as it will be automatically adjust so that the left-lower corner
873:     of the bounding box of children will be set to (0,0) before the
874:     offset transform.
875: 
876:     It is similar to drawing area, except that the extent of the box
877:     is not predetermined but calculated from the window extent of its
878:     children. Furthermore, the extent of the children will be
879:     calculated in the transformed coordinate.
880:     '''
881:     def __init__(self, aux_transform):
882:         self.aux_transform = aux_transform
883:         OffsetBox.__init__(self)
884: 
885:         self.offset_transform = mtransforms.Affine2D()
886:         self.offset_transform.clear()
887:         self.offset_transform.translate(0, 0)
888: 
889:         # ref_offset_transform is used to make the offset_transform is
890:         # always reference to the lower-left corner of the bbox of its
891:         # children.
892:         self.ref_offset_transform = mtransforms.Affine2D()
893:         self.ref_offset_transform.clear()
894: 
895:     def add_artist(self, a):
896:         'Add any :class:`~matplotlib.artist.Artist` to the container box'
897:         self._children.append(a)
898:         a.set_transform(self.get_transform())
899:         self.stale = True
900: 
901:     def get_transform(self):
902:         '''
903:         Return the :class:`~matplotlib.transforms.Transform` applied
904:         to the children
905:         '''
906:         return self.aux_transform + \
907:                self.ref_offset_transform + \
908:                self.offset_transform
909: 
910:     def set_transform(self, t):
911:         '''
912:         set_transform is ignored.
913:         '''
914:         pass
915: 
916:     def set_offset(self, xy):
917:         '''
918:         set offset of the container.
919: 
920:         Accept : tuple of x,y coordinate in disokay units.
921:         '''
922:         self._offset = xy
923: 
924:         self.offset_transform.clear()
925:         self.offset_transform.translate(xy[0], xy[1])
926:         self.stale = True
927: 
928:     def get_offset(self):
929:         '''
930:         return offset of the container.
931:         '''
932:         return self._offset
933: 
934:     def get_window_extent(self, renderer):
935:         '''
936:         get the bounding box in display space.
937:         '''
938:         w, h, xd, yd = self.get_extent(renderer)
939:         ox, oy = self.get_offset()  # w, h, xd, yd)
940:         return mtransforms.Bbox.from_bounds(ox - xd, oy - yd, w, h)
941: 
942:     def get_extent(self, renderer):
943: 
944:         # clear the offset transforms
945:         _off = self.offset_transform.to_values()  # to be restored later
946:         self.ref_offset_transform.clear()
947:         self.offset_transform.clear()
948: 
949:         # calculate the extent
950:         bboxes = [c.get_window_extent(renderer) for c in self._children]
951:         ub = mtransforms.Bbox.union(bboxes)
952: 
953:         # adjust ref_offset_tansform
954:         self.ref_offset_transform.translate(-ub.x0, -ub.y0)
955: 
956:         # restor offset transform
957:         mtx = self.offset_transform.matrix_from_values(*_off)
958:         self.offset_transform.set_matrix(mtx)
959: 
960:         return ub.width, ub.height, 0., 0.
961: 
962:     def draw(self, renderer):
963:         '''
964:         Draw the children
965:         '''
966: 
967:         for c in self._children:
968:             c.draw(renderer)
969: 
970:         bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
971:         self.stale = False
972: 
973: 
974: class AnchoredOffsetbox(OffsetBox):
975:     '''
976:     An offset box placed according to the legend location
977:     loc. AnchoredOffsetbox has a single child. When multiple children
978:     is needed, use other OffsetBox class to enclose them.  By default,
979:     the offset box is anchored against its parent axes. You may
980:     explicitly specify the bbox_to_anchor.
981:     '''
982:     zorder = 5  # zorder of the legend
983: 
984:     # Location codes
985:     codes = {'upper right': 1,
986:              'upper left': 2,
987:              'lower left': 3,
988:              'lower right': 4,
989:              'right': 5,
990:              'center left': 6,
991:              'center right': 7,
992:              'lower center': 8,
993:              'upper center': 9,
994:              'center': 10,
995:              }
996: 
997:     def __init__(self, loc,
998:                  pad=0.4, borderpad=0.5,
999:                  child=None, prop=None, frameon=True,
1000:                  bbox_to_anchor=None,
1001:                  bbox_transform=None,
1002:                  **kwargs):
1003:         '''
1004:         loc is a string or an integer specifying the legend location.
1005:         The valid location codes are::
1006: 
1007:         'upper right'  : 1,
1008:         'upper left'   : 2,
1009:         'lower left'   : 3,
1010:         'lower right'  : 4,
1011:         'right'        : 5, (same as 'center right', for back-compatibility)
1012:         'center left'  : 6,
1013:         'center right' : 7,
1014:         'lower center' : 8,
1015:         'upper center' : 9,
1016:         'center'       : 10,
1017: 
1018:         pad : pad around the child for drawing a frame. given in
1019:           fraction of fontsize.
1020: 
1021:         borderpad : pad between offsetbox frame and the bbox_to_anchor,
1022: 
1023:         child : OffsetBox instance that will be anchored.
1024: 
1025:         prop : font property. This is only used as a reference for paddings.
1026: 
1027:         frameon : draw a frame box if True.
1028: 
1029:         bbox_to_anchor : bbox to anchor. Use self.axes.bbox if None.
1030: 
1031:         bbox_transform : with which the bbox_to_anchor will be transformed.
1032: 
1033:         '''
1034:         super(AnchoredOffsetbox, self).__init__(**kwargs)
1035: 
1036:         self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)
1037:         self.set_child(child)
1038: 
1039:         if isinstance(loc, six.string_types):
1040:             try:
1041:                 loc = self.codes[loc]
1042:             except KeyError:
1043:                 raise ValueError('Unrecognized location "%s". Valid '
1044:                                  'locations are\n\t%s\n'
1045:                                  % (loc, '\n\t'.join(self.codes)))
1046: 
1047:         self.loc = loc
1048:         self.borderpad = borderpad
1049:         self.pad = pad
1050: 
1051:         if prop is None:
1052:             self.prop = FontProperties(size=rcParams["legend.fontsize"])
1053:         elif isinstance(prop, dict):
1054:             self.prop = FontProperties(**prop)
1055:             if "size" not in prop:
1056:                 self.prop.set_size(rcParams["legend.fontsize"])
1057:         else:
1058:             self.prop = prop
1059: 
1060:         self.patch = FancyBboxPatch(
1061:             xy=(0.0, 0.0), width=1., height=1.,
1062:             facecolor='w', edgecolor='k',
1063:             mutation_scale=self.prop.get_size_in_points(),
1064:             snap=True
1065:             )
1066:         self.patch.set_boxstyle("square", pad=0)
1067:         self._drawFrame = frameon
1068: 
1069:     def set_child(self, child):
1070:         "set the child to be anchored"
1071:         self._child = child
1072:         if child is not None:
1073:             child.axes = self.axes
1074:         self.stale = True
1075: 
1076:     def get_child(self):
1077:         "return the child"
1078:         return self._child
1079: 
1080:     def get_children(self):
1081:         "return the list of children"
1082:         return [self._child]
1083: 
1084:     def get_extent(self, renderer):
1085:         '''
1086:         return the extent of the artist. The extent of the child
1087:         added with the pad is returned
1088:         '''
1089:         w, h, xd, yd = self.get_child().get_extent(renderer)
1090:         fontsize = renderer.points_to_pixels(self.prop.get_size_in_points())
1091:         pad = self.pad * fontsize
1092: 
1093:         return w + 2 * pad, h + 2 * pad, xd + pad, yd + pad
1094: 
1095:     def get_bbox_to_anchor(self):
1096:         '''
1097:         return the bbox that the legend will be anchored
1098:         '''
1099:         if self._bbox_to_anchor is None:
1100:             return self.axes.bbox
1101:         else:
1102:             transform = self._bbox_to_anchor_transform
1103:             if transform is None:
1104:                 return self._bbox_to_anchor
1105:             else:
1106:                 return TransformedBbox(self._bbox_to_anchor,
1107:                                        transform)
1108: 
1109:     def set_bbox_to_anchor(self, bbox, transform=None):
1110:         '''
1111:         set the bbox that the child will be anchored.
1112: 
1113:         *bbox* can be a Bbox instance, a list of [left, bottom, width,
1114:         height], or a list of [left, bottom] where the width and
1115:         height will be assumed to be zero. The bbox will be
1116:         transformed to display coordinate by the given transform.
1117:         '''
1118:         if bbox is None or isinstance(bbox, BboxBase):
1119:             self._bbox_to_anchor = bbox
1120:         else:
1121:             try:
1122:                 l = len(bbox)
1123:             except TypeError:
1124:                 raise ValueError("Invalid argument for bbox : %s" % str(bbox))
1125: 
1126:             if l == 2:
1127:                 bbox = [bbox[0], bbox[1], 0, 0]
1128: 
1129:             self._bbox_to_anchor = Bbox.from_bounds(*bbox)
1130: 
1131:         self._bbox_to_anchor_transform = transform
1132:         self.stale = True
1133: 
1134:     def get_window_extent(self, renderer):
1135:         '''
1136:         get the bounding box in display space.
1137:         '''
1138:         self._update_offset_func(renderer)
1139:         w, h, xd, yd = self.get_extent(renderer)
1140:         ox, oy = self.get_offset(w, h, xd, yd, renderer)
1141:         return Bbox.from_bounds(ox - xd, oy - yd, w, h)
1142: 
1143:     def _update_offset_func(self, renderer, fontsize=None):
1144:         '''
1145:         Update the offset func which depends on the dpi of the
1146:         renderer (because of the padding).
1147:         '''
1148:         if fontsize is None:
1149:             fontsize = renderer.points_to_pixels(
1150:                             self.prop.get_size_in_points())
1151: 
1152:         def _offset(w, h, xd, yd, renderer, fontsize=fontsize, self=self):
1153:             bbox = Bbox.from_bounds(0, 0, w, h)
1154:             borderpad = self.borderpad * fontsize
1155:             bbox_to_anchor = self.get_bbox_to_anchor()
1156: 
1157:             x0, y0 = self._get_anchored_bbox(self.loc,
1158:                                              bbox,
1159:                                              bbox_to_anchor,
1160:                                              borderpad)
1161:             return x0 + xd, y0 + yd
1162: 
1163:         self.set_offset(_offset)
1164: 
1165:     def update_frame(self, bbox, fontsize=None):
1166:         self.patch.set_bounds(bbox.x0, bbox.y0,
1167:                               bbox.width, bbox.height)
1168: 
1169:         if fontsize:
1170:             self.patch.set_mutation_scale(fontsize)
1171: 
1172:     def draw(self, renderer):
1173:         "draw the artist"
1174: 
1175:         if not self.get_visible():
1176:             return
1177: 
1178:         fontsize = renderer.points_to_pixels(self.prop.get_size_in_points())
1179:         self._update_offset_func(renderer, fontsize)
1180: 
1181:         if self._drawFrame:
1182:             # update the location and size of the legend
1183:             bbox = self.get_window_extent(renderer)
1184:             self.update_frame(bbox, fontsize)
1185:             self.patch.draw(renderer)
1186: 
1187:         width, height, xdescent, ydescent = self.get_extent(renderer)
1188: 
1189:         px, py = self.get_offset(width, height, xdescent, ydescent, renderer)
1190: 
1191:         self.get_child().set_offset((px, py))
1192:         self.get_child().draw(renderer)
1193:         self.stale = False
1194: 
1195:     def _get_anchored_bbox(self, loc, bbox, parentbbox, borderpad):
1196:         '''
1197:         return the position of the bbox anchored at the parentbbox
1198:         with the loc code, with the borderpad.
1199:         '''
1200:         assert loc in range(1, 11)  # called only internally
1201: 
1202:         BEST, UR, UL, LL, LR, R, CL, CR, LC, UC, C = xrange(11)
1203: 
1204:         anchor_coefs = {UR: "NE",
1205:                         UL: "NW",
1206:                         LL: "SW",
1207:                         LR: "SE",
1208:                         R: "E",
1209:                         CL: "W",
1210:                         CR: "E",
1211:                         LC: "S",
1212:                         UC: "N",
1213:                         C: "C"}
1214: 
1215:         c = anchor_coefs[loc]
1216: 
1217:         container = parentbbox.padded(-borderpad)
1218:         anchored_box = bbox.anchored(c, container=container)
1219:         return anchored_box.x0, anchored_box.y0
1220: 
1221: 
1222: class AnchoredText(AnchoredOffsetbox):
1223:     '''
1224:     AnchoredOffsetbox with Text.
1225:     '''
1226: 
1227:     def __init__(self, s, loc, pad=0.4, borderpad=0.5, prop=None, **kwargs):
1228:         '''
1229:         Parameters
1230:         ----------
1231:         s : string
1232:             Text.
1233: 
1234:         loc : str
1235:             Location code.
1236: 
1237:         pad : float, optional
1238:             Pad between the text and the frame as fraction of the font
1239:             size.
1240: 
1241:         borderpad : float, optional
1242:             Pad between the frame and the axes (or *bbox_to_anchor*).
1243: 
1244:         prop : `matplotlib.font_manager.FontProperties`
1245:             Font properties.
1246: 
1247:         Notes
1248:         -----
1249:         Other keyword parameters of `AnchoredOffsetbox` are also
1250:         allowed.
1251:         '''
1252: 
1253:         if prop is None:
1254:             prop = {}
1255:         badkwargs = {'ha', 'horizontalalignment', 'va', 'verticalalignment'}
1256:         if badkwargs & set(prop):
1257:             warnings.warn("Mixing horizontalalignment or verticalalignment "
1258:                           "with AnchoredText is not supported.")
1259: 
1260:         self.txt = TextArea(s, textprops=prop, minimumdescent=False)
1261:         fp = self.txt._text.get_fontproperties()
1262:         super(AnchoredText, self).__init__(
1263:             loc, pad=pad, borderpad=borderpad, child=self.txt, prop=fp,
1264:             **kwargs)
1265: 
1266: 
1267: class OffsetImage(OffsetBox):
1268:     def __init__(self, arr,
1269:                  zoom=1,
1270:                  cmap=None,
1271:                  norm=None,
1272:                  interpolation=None,
1273:                  origin=None,
1274:                  filternorm=1,
1275:                  filterrad=4.0,
1276:                  resample=False,
1277:                  dpi_cor=True,
1278:                  **kwargs
1279:                  ):
1280: 
1281:         OffsetBox.__init__(self)
1282:         self._dpi_cor = dpi_cor
1283: 
1284:         self.image = BboxImage(bbox=self.get_window_extent,
1285:                                cmap=cmap,
1286:                                norm=norm,
1287:                                interpolation=interpolation,
1288:                                origin=origin,
1289:                                filternorm=filternorm,
1290:                                filterrad=filterrad,
1291:                                resample=resample,
1292:                                **kwargs
1293:                                )
1294: 
1295:         self._children = [self.image]
1296: 
1297:         self.set_zoom(zoom)
1298:         self.set_data(arr)
1299: 
1300:     def set_data(self, arr):
1301:         self._data = np.asarray(arr)
1302:         self.image.set_data(self._data)
1303:         self.stale = True
1304: 
1305:     def get_data(self):
1306:         return self._data
1307: 
1308:     def set_zoom(self, zoom):
1309:         self._zoom = zoom
1310:         self.stale = True
1311: 
1312:     def get_zoom(self):
1313:         return self._zoom
1314: 
1315: #     def set_axes(self, axes):
1316: #         self.image.set_axes(axes)
1317: #         martist.Artist.set_axes(self, axes)
1318: 
1319: #     def set_offset(self, xy):
1320: #         '''
1321: #         set offset of the container.
1322: 
1323: #         Accept : tuple of x,y coordinate in disokay units.
1324: #         '''
1325: #         self._offset = xy
1326: 
1327: #         self.offset_transform.clear()
1328: #         self.offset_transform.translate(xy[0], xy[1])
1329: 
1330:     def get_offset(self):
1331:         '''
1332:         return offset of the container.
1333:         '''
1334:         return self._offset
1335: 
1336:     def get_children(self):
1337:         return [self.image]
1338: 
1339:     def get_window_extent(self, renderer):
1340:         '''
1341:         get the bounding box in display space.
1342:         '''
1343:         w, h, xd, yd = self.get_extent(renderer)
1344:         ox, oy = self.get_offset()
1345:         return mtransforms.Bbox.from_bounds(ox - xd, oy - yd, w, h)
1346: 
1347:     def get_extent(self, renderer):
1348:         if self._dpi_cor:  # True, do correction
1349:             dpi_cor = renderer.points_to_pixels(1.)
1350:         else:
1351:             dpi_cor = 1.
1352: 
1353:         zoom = self.get_zoom()
1354:         data = self.get_data()
1355:         ny, nx = data.shape[:2]
1356:         w, h = dpi_cor * nx * zoom, dpi_cor * ny * zoom
1357: 
1358:         return w, h, 0, 0
1359: 
1360:     def draw(self, renderer):
1361:         '''
1362:         Draw the children
1363:         '''
1364:         self.image.draw(renderer)
1365:         # bbox_artist(self, renderer, fill=False, props=dict(pad=0.))
1366:         self.stale = False
1367: 
1368: 
1369: class AnnotationBbox(martist.Artist, _AnnotationBase):
1370:     '''
1371:     Annotation-like class, but with offsetbox instead of Text.
1372:     '''
1373:     zorder = 3
1374: 
1375:     def __str__(self):
1376:         return "AnnotationBbox(%g,%g)" % (self.xy[0], self.xy[1])
1377: 
1378:     @docstring.dedent_interpd
1379:     def __init__(self, offsetbox, xy,
1380:                  xybox=None,
1381:                  xycoords='data',
1382:                  boxcoords=None,
1383:                  frameon=True, pad=0.4,  # BboxPatch
1384:                  annotation_clip=None,
1385:                  box_alignment=(0.5, 0.5),
1386:                  bboxprops=None,
1387:                  arrowprops=None,
1388:                  fontsize=None,
1389:                  **kwargs):
1390:         '''
1391:         *offsetbox* : OffsetBox instance
1392: 
1393:         *xycoords* : same as Annotation but can be a tuple of two
1394:            strings which are interpreted as x and y coordinates.
1395: 
1396:         *boxcoords* : similar to textcoords as Annotation but can be a
1397:            tuple of two strings which are interpreted as x and y
1398:            coordinates.
1399: 
1400:         *box_alignment* : a tuple of two floats for a vertical and
1401:            horizontal alignment of the offset box w.r.t. the *boxcoords*.
1402:            The lower-left corner is (0.0) and upper-right corner is (1.1).
1403: 
1404:         other parameters are identical to that of Annotation.
1405:         '''
1406: 
1407:         martist.Artist.__init__(self, **kwargs)
1408:         _AnnotationBase.__init__(self,
1409:                                  xy,
1410:                                  xycoords=xycoords,
1411:                                  annotation_clip=annotation_clip)
1412: 
1413:         self.offsetbox = offsetbox
1414: 
1415:         self.arrowprops = arrowprops
1416: 
1417:         self.set_fontsize(fontsize)
1418: 
1419:         if xybox is None:
1420:             self.xybox = xy
1421:         else:
1422:             self.xybox = xybox
1423: 
1424:         if boxcoords is None:
1425:             self.boxcoords = xycoords
1426:         else:
1427:             self.boxcoords = boxcoords
1428: 
1429:         if arrowprops is not None:
1430:             self._arrow_relpos = self.arrowprops.pop("relpos", (0.5, 0.5))
1431:             self.arrow_patch = FancyArrowPatch((0, 0), (1, 1),
1432:                                                **self.arrowprops)
1433:         else:
1434:             self._arrow_relpos = None
1435:             self.arrow_patch = None
1436: 
1437:         #self._fw, self._fh = 0., 0. # for alignment
1438:         self._box_alignment = box_alignment
1439: 
1440:         # frame
1441:         self.patch = FancyBboxPatch(
1442:             xy=(0.0, 0.0), width=1., height=1.,
1443:             facecolor='w', edgecolor='k',
1444:             mutation_scale=self.prop.get_size_in_points(),
1445:             snap=True
1446:             )
1447:         self.patch.set_boxstyle("square", pad=pad)
1448:         if bboxprops:
1449:             self.patch.set(**bboxprops)
1450:         self._drawFrame = frameon
1451: 
1452:     @property
1453:     def xyann(self):
1454:         return self.xybox
1455: 
1456:     @xyann.setter
1457:     def xyann(self, xyann):
1458:         self.xybox = xyann
1459:         self.stale = True
1460: 
1461:     @property
1462:     def anncoords(self):
1463:         return self.boxcoords
1464: 
1465:     @anncoords.setter
1466:     def anncoords(self, coords):
1467:         self.boxcoords = coords
1468:         self.stale = True
1469: 
1470:     def contains(self, event):
1471:         t, tinfo = self.offsetbox.contains(event)
1472:         #if self.arrow_patch is not None:
1473:         #    a,ainfo=self.arrow_patch.contains(event)
1474:         #    t = t or a
1475: 
1476:         # self.arrow_patch is currently not checked as this can be a line - JJ
1477: 
1478:         return t, tinfo
1479: 
1480:     def get_children(self):
1481:         children = [self.offsetbox, self.patch]
1482:         if self.arrow_patch:
1483:             children.append(self.arrow_patch)
1484:         return children
1485: 
1486:     def set_figure(self, fig):
1487: 
1488:         if self.arrow_patch is not None:
1489:             self.arrow_patch.set_figure(fig)
1490:         self.offsetbox.set_figure(fig)
1491:         martist.Artist.set_figure(self, fig)
1492: 
1493:     def set_fontsize(self, s=None):
1494:         '''
1495:         set fontsize in points
1496:         '''
1497:         if s is None:
1498:             s = rcParams["legend.fontsize"]
1499: 
1500:         self.prop = FontProperties(size=s)
1501:         self.stale = True
1502: 
1503:     def get_fontsize(self, s=None):
1504:         '''
1505:         return fontsize in points
1506:         '''
1507:         return self.prop.get_size_in_points()
1508: 
1509:     def update_positions(self, renderer):
1510:         '''
1511:         Update the pixel positions of the annotated point and the text.
1512:         '''
1513:         xy_pixel = self._get_position_xy(renderer)
1514:         self._update_position_xybox(renderer, xy_pixel)
1515: 
1516:         mutation_scale = renderer.points_to_pixels(self.get_fontsize())
1517:         self.patch.set_mutation_scale(mutation_scale)
1518: 
1519:         if self.arrow_patch:
1520:             self.arrow_patch.set_mutation_scale(mutation_scale)
1521: 
1522:     def _update_position_xybox(self, renderer, xy_pixel):
1523:         '''
1524:         Update the pixel positions of the annotation text and the arrow
1525:         patch.
1526:         '''
1527: 
1528:         x, y = self.xybox
1529:         if isinstance(self.boxcoords, tuple):
1530:             xcoord, ycoord = self.boxcoords
1531:             x1, y1 = self._get_xy(renderer, x, y, xcoord)
1532:             x2, y2 = self._get_xy(renderer, x, y, ycoord)
1533:             ox0, oy0 = x1, y2
1534:         else:
1535:             ox0, oy0 = self._get_xy(renderer, x, y, self.boxcoords)
1536: 
1537:         w, h, xd, yd = self.offsetbox.get_extent(renderer)
1538: 
1539:         _fw, _fh = self._box_alignment
1540:         self.offsetbox.set_offset((ox0 - _fw * w + xd, oy0 - _fh * h + yd))
1541: 
1542:         # update patch position
1543:         bbox = self.offsetbox.get_window_extent(renderer)
1544:         #self.offsetbox.set_offset((ox0-_fw*w, oy0-_fh*h))
1545:         self.patch.set_bounds(bbox.x0, bbox.y0,
1546:                               bbox.width, bbox.height)
1547: 
1548:         x, y = xy_pixel
1549: 
1550:         ox1, oy1 = x, y
1551: 
1552:         if self.arrowprops:
1553:             x0, y0 = x, y
1554: 
1555:             d = self.arrowprops.copy()
1556: 
1557:             # Use FancyArrowPatch if self.arrowprops has "arrowstyle" key.
1558: 
1559:             # adjust the starting point of the arrow relative to
1560:             # the textbox.
1561:             # TODO : Rotation needs to be accounted.
1562:             relpos = self._arrow_relpos
1563: 
1564:             ox0 = bbox.x0 + bbox.width * relpos[0]
1565:             oy0 = bbox.y0 + bbox.height * relpos[1]
1566: 
1567:             # The arrow will be drawn from (ox0, oy0) to (ox1,
1568:             # oy1). It will be first clipped by patchA and patchB.
1569:             # Then it will be shrinked by shirnkA and shrinkB
1570:             # (in points). If patch A is not set, self.bbox_patch
1571:             # is used.
1572: 
1573:             self.arrow_patch.set_positions((ox0, oy0), (ox1, oy1))
1574:             fs = self.prop.get_size_in_points()
1575:             mutation_scale = d.pop("mutation_scale", fs)
1576:             mutation_scale = renderer.points_to_pixels(mutation_scale)
1577:             self.arrow_patch.set_mutation_scale(mutation_scale)
1578: 
1579:             patchA = d.pop("patchA", self.patch)
1580:             self.arrow_patch.set_patchA(patchA)
1581: 
1582:     def draw(self, renderer):
1583:         '''
1584:         Draw the :class:`Annotation` object to the given *renderer*.
1585:         '''
1586: 
1587:         if renderer is not None:
1588:             self._renderer = renderer
1589:         if not self.get_visible():
1590:             return
1591: 
1592:         xy_pixel = self._get_position_xy(renderer)
1593: 
1594:         if not self._check_xy(renderer, xy_pixel):
1595:             return
1596: 
1597:         self.update_positions(renderer)
1598: 
1599:         if self.arrow_patch is not None:
1600:             if self.arrow_patch.figure is None and self.figure is not None:
1601:                 self.arrow_patch.figure = self.figure
1602:             self.arrow_patch.draw(renderer)
1603: 
1604:         if self._drawFrame:
1605:             self.patch.draw(renderer)
1606: 
1607:         self.offsetbox.draw(renderer)
1608:         self.stale = False
1609: 
1610: 
1611: class DraggableBase(object):
1612:     '''
1613:     helper code for a draggable artist (legend, offsetbox)
1614:     The derived class must override following two method.
1615: 
1616:       def saveoffset(self):
1617:           pass
1618: 
1619:       def update_offset(self, dx, dy):
1620:           pass
1621: 
1622:     *saveoffset* is called when the object is picked for dragging and it is
1623:     meant to save reference position of the artist.
1624: 
1625:     *update_offset* is called during the dragging. dx and dy is the pixel
1626:      offset from the point where the mouse drag started.
1627: 
1628:     Optionally you may override following two methods.
1629: 
1630:       def artist_picker(self, artist, evt):
1631:           return self.ref_artist.contains(evt)
1632: 
1633:       def finalize_offset(self):
1634:           pass
1635: 
1636:     *artist_picker* is a picker method that will be
1637:      used. *finalize_offset* is called when the mouse is released. In
1638:      current implementation of DraggableLegend and DraggableAnnotation,
1639:      *update_offset* places the artists simply in display
1640:      coordinates. And *finalize_offset* recalculate their position in
1641:      the normalized axes coordinate and set a relavant attribute.
1642: 
1643:     '''
1644:     def __init__(self, ref_artist, use_blit=False):
1645:         self.ref_artist = ref_artist
1646:         self.got_artist = False
1647: 
1648:         self.canvas = self.ref_artist.figure.canvas
1649:         self._use_blit = use_blit and self.canvas.supports_blit
1650: 
1651:         c2 = self.canvas.mpl_connect('pick_event', self.on_pick)
1652:         c3 = self.canvas.mpl_connect('button_release_event', self.on_release)
1653: 
1654:         ref_artist.set_picker(self.artist_picker)
1655:         self.cids = [c2, c3]
1656: 
1657:     def on_motion(self, evt):
1658:         if self.got_artist:
1659:             dx = evt.x - self.mouse_x
1660:             dy = evt.y - self.mouse_y
1661:             self.update_offset(dx, dy)
1662:             self.canvas.draw()
1663: 
1664:     def on_motion_blit(self, evt):
1665:         if self.got_artist:
1666:             dx = evt.x - self.mouse_x
1667:             dy = evt.y - self.mouse_y
1668:             self.update_offset(dx, dy)
1669:             self.canvas.restore_region(self.background)
1670:             self.ref_artist.draw(self.ref_artist.figure._cachedRenderer)
1671:             self.canvas.blit(self.ref_artist.figure.bbox)
1672: 
1673:     def on_pick(self, evt):
1674:         if evt.artist == self.ref_artist:
1675: 
1676:             self.mouse_x = evt.mouseevent.x
1677:             self.mouse_y = evt.mouseevent.y
1678:             self.got_artist = True
1679: 
1680:             if self._use_blit:
1681:                 self.ref_artist.set_animated(True)
1682:                 self.canvas.draw()
1683:                 self.background = self.canvas.copy_from_bbox(
1684:                                     self.ref_artist.figure.bbox)
1685:                 self.ref_artist.draw(self.ref_artist.figure._cachedRenderer)
1686:                 self.canvas.blit(self.ref_artist.figure.bbox)
1687:                 self._c1 = self.canvas.mpl_connect('motion_notify_event',
1688:                                                    self.on_motion_blit)
1689:             else:
1690:                 self._c1 = self.canvas.mpl_connect('motion_notify_event',
1691:                                                    self.on_motion)
1692:             self.save_offset()
1693: 
1694:     def on_release(self, event):
1695:         if self.got_artist:
1696:             self.finalize_offset()
1697:             self.got_artist = False
1698:             self.canvas.mpl_disconnect(self._c1)
1699: 
1700:             if self._use_blit:
1701:                 self.ref_artist.set_animated(False)
1702: 
1703:     def disconnect(self):
1704:         '''disconnect the callbacks'''
1705:         for cid in self.cids:
1706:             self.canvas.mpl_disconnect(cid)
1707:         try:
1708:             c1 = self._c1
1709:         except AttributeError:
1710:             pass
1711:         else:
1712:             self.canvas.mpl_disconnect(c1)
1713: 
1714:     def artist_picker(self, artist, evt):
1715:         return self.ref_artist.contains(evt)
1716: 
1717:     def save_offset(self):
1718:         pass
1719: 
1720:     def update_offset(self, dx, dy):
1721:         pass
1722: 
1723:     def finalize_offset(self):
1724:         pass
1725: 
1726: 
1727: class DraggableOffsetBox(DraggableBase):
1728:     def __init__(self, ref_artist, offsetbox, use_blit=False):
1729:         DraggableBase.__init__(self, ref_artist, use_blit=use_blit)
1730:         self.offsetbox = offsetbox
1731: 
1732:     def save_offset(self):
1733:         offsetbox = self.offsetbox
1734:         renderer = offsetbox.figure._cachedRenderer
1735:         w, h, xd, yd = offsetbox.get_extent(renderer)
1736:         offset = offsetbox.get_offset(w, h, xd, yd, renderer)
1737:         self.offsetbox_x, self.offsetbox_y = offset
1738:         self.offsetbox.set_offset(offset)
1739: 
1740:     def update_offset(self, dx, dy):
1741:         loc_in_canvas = self.offsetbox_x + dx, self.offsetbox_y + dy
1742:         self.offsetbox.set_offset(loc_in_canvas)
1743: 
1744:     def get_loc_in_canvas(self):
1745: 
1746:         offsetbox = self.offsetbox
1747:         renderer = offsetbox.figure._cachedRenderer
1748:         w, h, xd, yd = offsetbox.get_extent(renderer)
1749:         ox, oy = offsetbox._offset
1750:         loc_in_canvas = (ox - xd, oy - yd)
1751: 
1752:         return loc_in_canvas
1753: 
1754: 
1755: class DraggableAnnotation(DraggableBase):
1756:     def __init__(self, annotation, use_blit=False):
1757:         DraggableBase.__init__(self, annotation, use_blit=use_blit)
1758:         self.annotation = annotation
1759: 
1760:     def save_offset(self):
1761:         ann = self.annotation
1762:         self.ox, self.oy = ann.get_transform().transform(ann.xyann)
1763: 
1764:     def update_offset(self, dx, dy):
1765:         ann = self.annotation
1766:         ann.xyann = ann.get_transform().inverted().transform(
1767:             (self.ox + dx, self.oy + dy))
1768: 
1769: 
1770: if __name__ == "__main__":
1771:     import matplotlib.pyplot as plt
1772:     fig = plt.figure(1)
1773:     fig.clf()
1774:     ax = plt.subplot(121)
1775: 
1776:     #txt = ax.text(0.5, 0.5, "Test", size=30, ha="center", color="w")
1777:     kwargs = dict()
1778: 
1779:     a = np.arange(256).reshape(16, 16) / 256.
1780:     myimage = OffsetImage(a,
1781:                           zoom=2,
1782:                           norm=None,
1783:                           origin=None,
1784:                           **kwargs
1785:                           )
1786:     ax.add_artist(myimage)
1787: 
1788:     myimage.set_offset((100, 100))
1789: 
1790:     myimage2 = OffsetImage(a,
1791:                            zoom=2,
1792:                            norm=None,
1793:                            origin=None,
1794:                            **kwargs
1795:                            )
1796:     ann = AnnotationBbox(myimage2, (0.5, 0.5),
1797:                          xybox=(30, 30),
1798:                          xycoords='data',
1799:                          boxcoords="offset points",
1800:                          frameon=True, pad=0.4,  # BboxPatch
1801:                          bboxprops=dict(boxstyle="round", fc="y"),
1802:                          fontsize=None,
1803:                          arrowprops=dict(arrowstyle="->"),
1804:                          )
1805: 
1806:     ax.add_artist(ann)
1807: 
1808:     plt.draw()
1809:     plt.show()
1810: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_95858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 15, (-1)), 'unicode', u'\nThe OffsetBox is a simple container artist. The child artist are meant\nto be drawn at a relative position to its parent.  The [VH]Packer,\nDrawingArea and TextArea are derived from the OffsetBox.\n\nThe [VH]Packer automatically adjust the relative postisions of their\nchildren, which should be instances of the OffsetBox. This is used to\nalign similar artists together, e.g., in legend.\n\nThe DrawingArea can contain any Artist as a child. The\nDrawingArea has a fixed width and height. The position of children\nrelative to the parent is fixed.  The TextArea is contains a single\nText instance. The width and height of the TextArea instance is the\nwidth and height of the its child text.\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'import six' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_95859 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'six')

if (type(import_95859) is not StypyTypeError):

    if (import_95859 != 'pyd_module'):
        __import__(import_95859)
        sys_modules_95860 = sys.modules[import_95859]
        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'six', sys_modules_95860.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'six', import_95859)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'from six.moves import xrange, zip' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_95861 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'six.moves')

if (type(import_95861) is not StypyTypeError):

    if (import_95861 != 'pyd_module'):
        __import__(import_95861)
        sys_modules_95862 = sys.modules[import_95861]
        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'six.moves', sys_modules_95862.module_type_store, module_type_store, ['xrange', 'zip'])
        nest_module(stypy.reporting.localization.Localization(__file__, 21, 0), __file__, sys_modules_95862, sys_modules_95862.module_type_store, module_type_store)
    else:
        from six.moves import xrange, zip

        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'six.moves', None, module_type_store, ['xrange', 'zip'], [xrange, zip])

else:
    # Assigning a type to the variable 'six.moves' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'six.moves', import_95861)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'import warnings' statement (line 23)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'import matplotlib.transforms' statement (line 24)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_95863 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.transforms')

if (type(import_95863) is not StypyTypeError):

    if (import_95863 != 'pyd_module'):
        __import__(import_95863)
        sys_modules_95864 = sys.modules[import_95863]
        import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'mtransforms', sys_modules_95864.module_type_store, module_type_store)
    else:
        import matplotlib.transforms as mtransforms

        import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'mtransforms', matplotlib.transforms, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.transforms', import_95863)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'import matplotlib.artist' statement (line 25)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_95865 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.artist')

if (type(import_95865) is not StypyTypeError):

    if (import_95865 != 'pyd_module'):
        __import__(import_95865)
        sys_modules_95866 = sys.modules[import_95865]
        import_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'martist', sys_modules_95866.module_type_store, module_type_store)
    else:
        import matplotlib.artist as martist

        import_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'martist', matplotlib.artist, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 25)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.artist', import_95865)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'import matplotlib.text' statement (line 26)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_95867 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.text')

if (type(import_95867) is not StypyTypeError):

    if (import_95867 != 'pyd_module'):
        __import__(import_95867)
        sys_modules_95868 = sys.modules[import_95867]
        import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'mtext', sys_modules_95868.module_type_store, module_type_store)
    else:
        import matplotlib.text as mtext

        import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'mtext', matplotlib.text, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.text' (line 26)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.text', import_95867)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'import matplotlib.path' statement (line 27)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_95869 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.path')

if (type(import_95869) is not StypyTypeError):

    if (import_95869 != 'pyd_module'):
        __import__(import_95869)
        sys_modules_95870 = sys.modules[import_95869]
        import_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'mpath', sys_modules_95870.module_type_store, module_type_store)
    else:
        import matplotlib.path as mpath

        import_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'mpath', matplotlib.path, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.path' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.path', import_95869)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'import numpy' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_95871 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy')

if (type(import_95871) is not StypyTypeError):

    if (import_95871 != 'pyd_module'):
        __import__(import_95871)
        sys_modules_95872 = sys.modules[import_95871]
        import_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'np', sys_modules_95872.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy', import_95871)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'from matplotlib.transforms import Bbox, BboxBase, TransformedBbox' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_95873 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.transforms')

if (type(import_95873) is not StypyTypeError):

    if (import_95873 != 'pyd_module'):
        __import__(import_95873)
        sys_modules_95874 = sys.modules[import_95873]
        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.transforms', sys_modules_95874.module_type_store, module_type_store, ['Bbox', 'BboxBase', 'TransformedBbox'])
        nest_module(stypy.reporting.localization.Localization(__file__, 29, 0), __file__, sys_modules_95874, sys_modules_95874.module_type_store, module_type_store)
    else:
        from matplotlib.transforms import Bbox, BboxBase, TransformedBbox

        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.transforms', None, module_type_store, ['Bbox', 'BboxBase', 'TransformedBbox'], [Bbox, BboxBase, TransformedBbox])

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.transforms', import_95873)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 31, 0))

# 'from matplotlib.font_manager import FontProperties' statement (line 31)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_95875 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.font_manager')

if (type(import_95875) is not StypyTypeError):

    if (import_95875 != 'pyd_module'):
        __import__(import_95875)
        sys_modules_95876 = sys.modules[import_95875]
        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.font_manager', sys_modules_95876.module_type_store, module_type_store, ['FontProperties'])
        nest_module(stypy.reporting.localization.Localization(__file__, 31, 0), __file__, sys_modules_95876, sys_modules_95876.module_type_store, module_type_store)
    else:
        from matplotlib.font_manager import FontProperties

        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.font_manager', None, module_type_store, ['FontProperties'], [FontProperties])

else:
    # Assigning a type to the variable 'matplotlib.font_manager' (line 31)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.font_manager', import_95875)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 0))

# 'from matplotlib.patches import FancyBboxPatch, FancyArrowPatch' statement (line 32)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_95877 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.patches')

if (type(import_95877) is not StypyTypeError):

    if (import_95877 != 'pyd_module'):
        __import__(import_95877)
        sys_modules_95878 = sys.modules[import_95877]
        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.patches', sys_modules_95878.module_type_store, module_type_store, ['FancyBboxPatch', 'FancyArrowPatch'])
        nest_module(stypy.reporting.localization.Localization(__file__, 32, 0), __file__, sys_modules_95878, sys_modules_95878.module_type_store, module_type_store)
    else:
        from matplotlib.patches import FancyBboxPatch, FancyArrowPatch

        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.patches', None, module_type_store, ['FancyBboxPatch', 'FancyArrowPatch'], [FancyBboxPatch, FancyArrowPatch])

else:
    # Assigning a type to the variable 'matplotlib.patches' (line 32)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.patches', import_95877)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 33, 0))

# 'from matplotlib import rcParams' statement (line 33)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_95879 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib')

if (type(import_95879) is not StypyTypeError):

    if (import_95879 != 'pyd_module'):
        __import__(import_95879)
        sys_modules_95880 = sys.modules[import_95879]
        import_from_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib', sys_modules_95880.module_type_store, module_type_store, ['rcParams'])
        nest_module(stypy.reporting.localization.Localization(__file__, 33, 0), __file__, sys_modules_95880, sys_modules_95880.module_type_store, module_type_store)
    else:
        from matplotlib import rcParams

        import_from_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib', None, module_type_store, ['rcParams'], [rcParams])

else:
    # Assigning a type to the variable 'matplotlib' (line 33)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib', import_95879)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 35, 0))

# 'from matplotlib import docstring' statement (line 35)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_95881 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib')

if (type(import_95881) is not StypyTypeError):

    if (import_95881 != 'pyd_module'):
        __import__(import_95881)
        sys_modules_95882 = sys.modules[import_95881]
        import_from_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib', sys_modules_95882.module_type_store, module_type_store, ['docstring'])
        nest_module(stypy.reporting.localization.Localization(__file__, 35, 0), __file__, sys_modules_95882, sys_modules_95882.module_type_store, module_type_store)
    else:
        from matplotlib import docstring

        import_from_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib', None, module_type_store, ['docstring'], [docstring])

else:
    # Assigning a type to the variable 'matplotlib' (line 35)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib', import_95881)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 38, 0))

# 'from matplotlib.image import BboxImage' statement (line 38)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_95883 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.image')

if (type(import_95883) is not StypyTypeError):

    if (import_95883 != 'pyd_module'):
        __import__(import_95883)
        sys_modules_95884 = sys.modules[import_95883]
        import_from_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.image', sys_modules_95884.module_type_store, module_type_store, ['BboxImage'])
        nest_module(stypy.reporting.localization.Localization(__file__, 38, 0), __file__, sys_modules_95884, sys_modules_95884.module_type_store, module_type_store)
    else:
        from matplotlib.image import BboxImage

        import_from_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.image', None, module_type_store, ['BboxImage'], [BboxImage])

else:
    # Assigning a type to the variable 'matplotlib.image' (line 38)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.image', import_95883)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 40, 0))

# 'from matplotlib.patches import mbbox_artist' statement (line 40)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_95885 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.patches')

if (type(import_95885) is not StypyTypeError):

    if (import_95885 != 'pyd_module'):
        __import__(import_95885)
        sys_modules_95886 = sys.modules[import_95885]
        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.patches', sys_modules_95886.module_type_store, module_type_store, ['bbox_artist'])
        nest_module(stypy.reporting.localization.Localization(__file__, 40, 0), __file__, sys_modules_95886, sys_modules_95886.module_type_store, module_type_store)
    else:
        from matplotlib.patches import bbox_artist as mbbox_artist

        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.patches', None, module_type_store, ['bbox_artist'], [mbbox_artist])

else:
    # Assigning a type to the variable 'matplotlib.patches' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.patches', import_95885)

# Adding an alias
module_type_store.add_alias('mbbox_artist', 'bbox_artist')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 41, 0))

# 'from matplotlib.text import _AnnotationBase' statement (line 41)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_95887 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib.text')

if (type(import_95887) is not StypyTypeError):

    if (import_95887 != 'pyd_module'):
        __import__(import_95887)
        sys_modules_95888 = sys.modules[import_95887]
        import_from_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib.text', sys_modules_95888.module_type_store, module_type_store, ['_AnnotationBase'])
        nest_module(stypy.reporting.localization.Localization(__file__, 41, 0), __file__, sys_modules_95888, sys_modules_95888.module_type_store, module_type_store)
    else:
        from matplotlib.text import _AnnotationBase

        import_from_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib.text', None, module_type_store, ['_AnnotationBase'], [_AnnotationBase])

else:
    # Assigning a type to the variable 'matplotlib.text' (line 41)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib.text', import_95887)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')


# Assigning a Name to a Name (line 44):

# Assigning a Name to a Name (line 44):
# Getting the type of 'False' (line 44)
False_95889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 44, 8), 'False')
# Assigning a type to the variable 'DEBUG' (line 44)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 0), 'DEBUG', False_95889)

@norecursion
def bbox_artist(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'bbox_artist'
    module_type_store = module_type_store.open_function_context('bbox_artist', 48, 0, False)
    
    # Passed parameters checking function
    bbox_artist.stypy_localization = localization
    bbox_artist.stypy_type_of_self = None
    bbox_artist.stypy_type_store = module_type_store
    bbox_artist.stypy_function_name = 'bbox_artist'
    bbox_artist.stypy_param_names_list = []
    bbox_artist.stypy_varargs_param_name = 'args'
    bbox_artist.stypy_kwargs_param_name = 'kwargs'
    bbox_artist.stypy_call_defaults = defaults
    bbox_artist.stypy_call_varargs = varargs
    bbox_artist.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'bbox_artist', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'bbox_artist', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'bbox_artist(...)' code ##################

    
    # Getting the type of 'DEBUG' (line 49)
    DEBUG_95890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 7), 'DEBUG')
    # Testing the type of an if condition (line 49)
    if_condition_95891 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 49, 4), DEBUG_95890)
    # Assigning a type to the variable 'if_condition_95891' (line 49)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 4), 'if_condition_95891', if_condition_95891)
    # SSA begins for if statement (line 49)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to mbbox_artist(...): (line 50)
    # Getting the type of 'args' (line 50)
    args_95893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 22), 'args', False)
    # Processing the call keyword arguments (line 50)
    # Getting the type of 'kwargs' (line 50)
    kwargs_95894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 30), 'kwargs', False)
    kwargs_95895 = {'kwargs_95894': kwargs_95894}
    # Getting the type of 'mbbox_artist' (line 50)
    mbbox_artist_95892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 8), 'mbbox_artist', False)
    # Calling mbbox_artist(args, kwargs) (line 50)
    mbbox_artist_call_result_95896 = invoke(stypy.reporting.localization.Localization(__file__, 50, 8), mbbox_artist_95892, *[args_95893], **kwargs_95895)
    
    # SSA join for if statement (line 49)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'bbox_artist(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'bbox_artist' in the type store
    # Getting the type of 'stypy_return_type' (line 48)
    stypy_return_type_95897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_95897)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'bbox_artist'
    return stypy_return_type_95897

# Assigning a type to the variable 'bbox_artist' (line 48)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 48, 0), 'bbox_artist', bbox_artist)

@norecursion
def _get_packed_offsets(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_95898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 57, 50), 'unicode', u'fixed')
    defaults = [unicode_95898]
    # Create a new context for function '_get_packed_offsets'
    module_type_store = module_type_store.open_function_context('_get_packed_offsets', 57, 0, False)
    
    # Passed parameters checking function
    _get_packed_offsets.stypy_localization = localization
    _get_packed_offsets.stypy_type_of_self = None
    _get_packed_offsets.stypy_type_store = module_type_store
    _get_packed_offsets.stypy_function_name = '_get_packed_offsets'
    _get_packed_offsets.stypy_param_names_list = ['wd_list', 'total', 'sep', 'mode']
    _get_packed_offsets.stypy_varargs_param_name = None
    _get_packed_offsets.stypy_kwargs_param_name = None
    _get_packed_offsets.stypy_call_defaults = defaults
    _get_packed_offsets.stypy_call_varargs = varargs
    _get_packed_offsets.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_packed_offsets', ['wd_list', 'total', 'sep', 'mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_packed_offsets', localization, ['wd_list', 'total', 'sep', 'mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_packed_offsets(...)' code ##################

    unicode_95899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, (-1)), 'unicode', u"\n    Geiven a list of (width, xdescent) of each boxes, calculate the\n    total width and the x-offset positions of each items according to\n    *mode*. xdescent is analagous to the usual descent, but along the\n    x-direction. xdescent values are currently ignored.\n\n    *wd_list* : list of (width, xdescent) of boxes to be packed.\n    *sep* : spacing between boxes\n    *total* : Intended total length. None if not used.\n    *mode* : packing mode. 'fixed', 'expand', or 'equal'.\n    ")
    
    # Assigning a Call to a Tuple (line 70):
    
    # Assigning a Call to a Name:
    
    # Call to zip(...): (line 70)
    # Getting the type of 'wd_list' (line 70)
    wd_list_95901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 26), 'wd_list', False)
    # Processing the call keyword arguments (line 70)
    kwargs_95902 = {}
    # Getting the type of 'zip' (line 70)
    zip_95900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 21), 'zip', False)
    # Calling zip(args, kwargs) (line 70)
    zip_call_result_95903 = invoke(stypy.reporting.localization.Localization(__file__, 70, 21), zip_95900, *[wd_list_95901], **kwargs_95902)
    
    # Assigning a type to the variable 'call_assignment_95667' (line 70)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 4), 'call_assignment_95667', zip_call_result_95903)
    
    # Assigning a Call to a Name (line 70):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_95906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 70, 4), 'int')
    # Processing the call keyword arguments
    kwargs_95907 = {}
    # Getting the type of 'call_assignment_95667' (line 70)
    call_assignment_95667_95904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 4), 'call_assignment_95667', False)
    # Obtaining the member '__getitem__' of a type (line 70)
    getitem___95905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 70, 4), call_assignment_95667_95904, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_95908 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___95905, *[int_95906], **kwargs_95907)
    
    # Assigning a type to the variable 'call_assignment_95668' (line 70)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 4), 'call_assignment_95668', getitem___call_result_95908)
    
    # Assigning a Name to a Name (line 70):
    # Getting the type of 'call_assignment_95668' (line 70)
    call_assignment_95668_95909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 4), 'call_assignment_95668')
    # Assigning a type to the variable 'w_list' (line 70)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 4), 'w_list', call_assignment_95668_95909)
    
    # Assigning a Call to a Name (line 70):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_95912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 70, 4), 'int')
    # Processing the call keyword arguments
    kwargs_95913 = {}
    # Getting the type of 'call_assignment_95667' (line 70)
    call_assignment_95667_95910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 4), 'call_assignment_95667', False)
    # Obtaining the member '__getitem__' of a type (line 70)
    getitem___95911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 70, 4), call_assignment_95667_95910, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_95914 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___95911, *[int_95912], **kwargs_95913)
    
    # Assigning a type to the variable 'call_assignment_95669' (line 70)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 4), 'call_assignment_95669', getitem___call_result_95914)
    
    # Assigning a Name to a Name (line 70):
    # Getting the type of 'call_assignment_95669' (line 70)
    call_assignment_95669_95915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 4), 'call_assignment_95669')
    # Assigning a type to the variable 'd_list' (line 70)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 12), 'd_list', call_assignment_95669_95915)
    
    
    # Getting the type of 'mode' (line 73)
    mode_95916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 7), 'mode')
    unicode_95917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, 15), 'unicode', u'fixed')
    # Applying the binary operator '==' (line 73)
    result_eq_95918 = python_operator(stypy.reporting.localization.Localization(__file__, 73, 7), '==', mode_95916, unicode_95917)
    
    # Testing the type of an if condition (line 73)
    if_condition_95919 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 73, 4), result_eq_95918)
    # Assigning a type to the variable 'if_condition_95919' (line 73)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 73, 4), 'if_condition_95919', if_condition_95919)
    # SSA begins for if statement (line 73)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 74):
    
    # Assigning a Call to a Name (line 74):
    
    # Call to cumsum(...): (line 74)
    # Processing the call arguments (line 74)
    
    # Obtaining an instance of the builtin type 'list' (line 74)
    list_95922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, 29), 'list')
    # Adding type elements to the builtin type 'list' instance (line 74)
    # Adding element type (line 74)
    int_95923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, 30), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 74, 29), list_95922, int_95923)
    
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'w_list' (line 74)
    w_list_95927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 53), 'w_list', False)
    comprehension_95928 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 74, 36), w_list_95927)
    # Assigning a type to the variable 'w' (line 74)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 74, 36), 'w', comprehension_95928)
    # Getting the type of 'w' (line 74)
    w_95924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 36), 'w', False)
    # Getting the type of 'sep' (line 74)
    sep_95925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 40), 'sep', False)
    # Applying the binary operator '+' (line 74)
    result_add_95926 = python_operator(stypy.reporting.localization.Localization(__file__, 74, 36), '+', w_95924, sep_95925)
    
    list_95929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, 36), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 74, 36), list_95929, result_add_95926)
    # Applying the binary operator '+' (line 74)
    result_add_95930 = python_operator(stypy.reporting.localization.Localization(__file__, 74, 29), '+', list_95922, list_95929)
    
    # Processing the call keyword arguments (line 74)
    kwargs_95931 = {}
    # Getting the type of 'np' (line 74)
    np_95920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 19), 'np', False)
    # Obtaining the member 'cumsum' of a type (line 74)
    cumsum_95921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 74, 19), np_95920, 'cumsum')
    # Calling cumsum(args, kwargs) (line 74)
    cumsum_call_result_95932 = invoke(stypy.reporting.localization.Localization(__file__, 74, 19), cumsum_95921, *[result_add_95930], **kwargs_95931)
    
    # Assigning a type to the variable 'offsets_' (line 74)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 74, 8), 'offsets_', cumsum_call_result_95932)
    
    # Assigning a Subscript to a Name (line 75):
    
    # Assigning a Subscript to a Name (line 75):
    
    # Obtaining the type of the subscript
    int_95933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 28), 'int')
    slice_95934 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 75, 18), None, int_95933, None)
    # Getting the type of 'offsets_' (line 75)
    offsets__95935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 18), 'offsets_')
    # Obtaining the member '__getitem__' of a type (line 75)
    getitem___95936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 75, 18), offsets__95935, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 75)
    subscript_call_result_95937 = invoke(stypy.reporting.localization.Localization(__file__, 75, 18), getitem___95936, slice_95934)
    
    # Assigning a type to the variable 'offsets' (line 75)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 8), 'offsets', subscript_call_result_95937)
    
    # Type idiom detected: calculating its left and rigth part (line 76)
    # Getting the type of 'total' (line 76)
    total_95938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 11), 'total')
    # Getting the type of 'None' (line 76)
    None_95939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 20), 'None')
    
    (may_be_95940, more_types_in_union_95941) = may_be_none(total_95938, None_95939)

    if may_be_95940:

        if more_types_in_union_95941:
            # Runtime conditional SSA (line 76)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 77):
        
        # Assigning a BinOp to a Name (line 77):
        
        # Obtaining the type of the subscript
        int_95942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 29), 'int')
        # Getting the type of 'offsets_' (line 77)
        offsets__95943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 20), 'offsets_')
        # Obtaining the member '__getitem__' of a type (line 77)
        getitem___95944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 77, 20), offsets__95943, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 77)
        subscript_call_result_95945 = invoke(stypy.reporting.localization.Localization(__file__, 77, 20), getitem___95944, int_95942)
        
        # Getting the type of 'sep' (line 77)
        sep_95946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 35), 'sep')
        # Applying the binary operator '-' (line 77)
        result_sub_95947 = python_operator(stypy.reporting.localization.Localization(__file__, 77, 20), '-', subscript_call_result_95945, sep_95946)
        
        # Assigning a type to the variable 'total' (line 77)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 12), 'total', result_sub_95947)

        if more_types_in_union_95941:
            # SSA join for if statement (line 76)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining an instance of the builtin type 'tuple' (line 78)
    tuple_95948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 78)
    # Adding element type (line 78)
    # Getting the type of 'total' (line 78)
    total_95949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 15), 'total')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 78, 15), tuple_95948, total_95949)
    # Adding element type (line 78)
    # Getting the type of 'offsets' (line 78)
    offsets_95950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 22), 'offsets')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 78, 15), tuple_95948, offsets_95950)
    
    # Assigning a type to the variable 'stypy_return_type' (line 78)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 78, 8), 'stypy_return_type', tuple_95948)
    # SSA branch for the else part of an if statement (line 73)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'mode' (line 80)
    mode_95951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 9), 'mode')
    unicode_95952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 80, 17), 'unicode', u'expand')
    # Applying the binary operator '==' (line 80)
    result_eq_95953 = python_operator(stypy.reporting.localization.Localization(__file__, 80, 9), '==', mode_95951, unicode_95952)
    
    # Testing the type of an if condition (line 80)
    if_condition_95954 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 80, 9), result_eq_95953)
    # Assigning a type to the variable 'if_condition_95954' (line 80)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 9), 'if_condition_95954', if_condition_95954)
    # SSA begins for if statement (line 80)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to len(...): (line 81)
    # Processing the call arguments (line 81)
    # Getting the type of 'w_list' (line 81)
    w_list_95956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 15), 'w_list', False)
    # Processing the call keyword arguments (line 81)
    kwargs_95957 = {}
    # Getting the type of 'len' (line 81)
    len_95955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 11), 'len', False)
    # Calling len(args, kwargs) (line 81)
    len_call_result_95958 = invoke(stypy.reporting.localization.Localization(__file__, 81, 11), len_95955, *[w_list_95956], **kwargs_95957)
    
    int_95959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 25), 'int')
    # Applying the binary operator '>' (line 81)
    result_gt_95960 = python_operator(stypy.reporting.localization.Localization(__file__, 81, 11), '>', len_call_result_95958, int_95959)
    
    # Testing the type of an if condition (line 81)
    if_condition_95961 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 81, 8), result_gt_95960)
    # Assigning a type to the variable 'if_condition_95961' (line 81)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 81, 8), 'if_condition_95961', if_condition_95961)
    # SSA begins for if statement (line 81)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 82):
    
    # Assigning a BinOp to a Name (line 82):
    # Getting the type of 'total' (line 82)
    total_95962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 19), 'total')
    
    # Call to sum(...): (line 82)
    # Processing the call arguments (line 82)
    # Getting the type of 'w_list' (line 82)
    w_list_95964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 31), 'w_list', False)
    # Processing the call keyword arguments (line 82)
    kwargs_95965 = {}
    # Getting the type of 'sum' (line 82)
    sum_95963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 27), 'sum', False)
    # Calling sum(args, kwargs) (line 82)
    sum_call_result_95966 = invoke(stypy.reporting.localization.Localization(__file__, 82, 27), sum_95963, *[w_list_95964], **kwargs_95965)
    
    # Applying the binary operator '-' (line 82)
    result_sub_95967 = python_operator(stypy.reporting.localization.Localization(__file__, 82, 19), '-', total_95962, sum_call_result_95966)
    
    
    # Call to len(...): (line 82)
    # Processing the call arguments (line 82)
    # Getting the type of 'w_list' (line 82)
    w_list_95969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 47), 'w_list', False)
    # Processing the call keyword arguments (line 82)
    kwargs_95970 = {}
    # Getting the type of 'len' (line 82)
    len_95968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 43), 'len', False)
    # Calling len(args, kwargs) (line 82)
    len_call_result_95971 = invoke(stypy.reporting.localization.Localization(__file__, 82, 43), len_95968, *[w_list_95969], **kwargs_95970)
    
    float_95972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 82, 57), 'float')
    # Applying the binary operator '-' (line 82)
    result_sub_95973 = python_operator(stypy.reporting.localization.Localization(__file__, 82, 43), '-', len_call_result_95971, float_95972)
    
    # Applying the binary operator 'div' (line 82)
    result_div_95974 = python_operator(stypy.reporting.localization.Localization(__file__, 82, 18), 'div', result_sub_95967, result_sub_95973)
    
    # Assigning a type to the variable 'sep' (line 82)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 12), 'sep', result_div_95974)
    # SSA branch for the else part of an if statement (line 81)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 84):
    
    # Assigning a Num to a Name (line 84):
    int_95975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 18), 'int')
    # Assigning a type to the variable 'sep' (line 84)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 12), 'sep', int_95975)
    # SSA join for if statement (line 81)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 85):
    
    # Assigning a Call to a Name (line 85):
    
    # Call to cumsum(...): (line 85)
    # Processing the call arguments (line 85)
    
    # Obtaining an instance of the builtin type 'list' (line 85)
    list_95978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 29), 'list')
    # Adding type elements to the builtin type 'list' instance (line 85)
    # Adding element type (line 85)
    int_95979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 30), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 29), list_95978, int_95979)
    
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'w_list' (line 85)
    w_list_95983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 53), 'w_list', False)
    comprehension_95984 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 36), w_list_95983)
    # Assigning a type to the variable 'w' (line 85)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 36), 'w', comprehension_95984)
    # Getting the type of 'w' (line 85)
    w_95980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 36), 'w', False)
    # Getting the type of 'sep' (line 85)
    sep_95981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 40), 'sep', False)
    # Applying the binary operator '+' (line 85)
    result_add_95982 = python_operator(stypy.reporting.localization.Localization(__file__, 85, 36), '+', w_95980, sep_95981)
    
    list_95985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 36), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 36), list_95985, result_add_95982)
    # Applying the binary operator '+' (line 85)
    result_add_95986 = python_operator(stypy.reporting.localization.Localization(__file__, 85, 29), '+', list_95978, list_95985)
    
    # Processing the call keyword arguments (line 85)
    kwargs_95987 = {}
    # Getting the type of 'np' (line 85)
    np_95976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 19), 'np', False)
    # Obtaining the member 'cumsum' of a type (line 85)
    cumsum_95977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 85, 19), np_95976, 'cumsum')
    # Calling cumsum(args, kwargs) (line 85)
    cumsum_call_result_95988 = invoke(stypy.reporting.localization.Localization(__file__, 85, 19), cumsum_95977, *[result_add_95986], **kwargs_95987)
    
    # Assigning a type to the variable 'offsets_' (line 85)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 8), 'offsets_', cumsum_call_result_95988)
    
    # Assigning a Subscript to a Name (line 86):
    
    # Assigning a Subscript to a Name (line 86):
    
    # Obtaining the type of the subscript
    int_95989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 28), 'int')
    slice_95990 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 86, 18), None, int_95989, None)
    # Getting the type of 'offsets_' (line 86)
    offsets__95991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 18), 'offsets_')
    # Obtaining the member '__getitem__' of a type (line 86)
    getitem___95992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 86, 18), offsets__95991, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 86)
    subscript_call_result_95993 = invoke(stypy.reporting.localization.Localization(__file__, 86, 18), getitem___95992, slice_95990)
    
    # Assigning a type to the variable 'offsets' (line 86)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 8), 'offsets', subscript_call_result_95993)
    
    # Obtaining an instance of the builtin type 'tuple' (line 87)
    tuple_95994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 87)
    # Adding element type (line 87)
    # Getting the type of 'total' (line 87)
    total_95995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 15), 'total')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 87, 15), tuple_95994, total_95995)
    # Adding element type (line 87)
    # Getting the type of 'offsets' (line 87)
    offsets_95996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 22), 'offsets')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 87, 15), tuple_95994, offsets_95996)
    
    # Assigning a type to the variable 'stypy_return_type' (line 87)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 87, 8), 'stypy_return_type', tuple_95994)
    # SSA branch for the else part of an if statement (line 80)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'mode' (line 89)
    mode_95997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 9), 'mode')
    unicode_95998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 17), 'unicode', u'equal')
    # Applying the binary operator '==' (line 89)
    result_eq_95999 = python_operator(stypy.reporting.localization.Localization(__file__, 89, 9), '==', mode_95997, unicode_95998)
    
    # Testing the type of an if condition (line 89)
    if_condition_96000 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 89, 9), result_eq_95999)
    # Assigning a type to the variable 'if_condition_96000' (line 89)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 9), 'if_condition_96000', if_condition_96000)
    # SSA begins for if statement (line 89)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 90):
    
    # Assigning a Call to a Name (line 90):
    
    # Call to max(...): (line 90)
    # Processing the call arguments (line 90)
    # Getting the type of 'w_list' (line 90)
    w_list_96002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 19), 'w_list', False)
    # Processing the call keyword arguments (line 90)
    kwargs_96003 = {}
    # Getting the type of 'max' (line 90)
    max_96001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 15), 'max', False)
    # Calling max(args, kwargs) (line 90)
    max_call_result_96004 = invoke(stypy.reporting.localization.Localization(__file__, 90, 15), max_96001, *[w_list_96002], **kwargs_96003)
    
    # Assigning a type to the variable 'maxh' (line 90)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 90, 8), 'maxh', max_call_result_96004)
    
    # Type idiom detected: calculating its left and rigth part (line 91)
    # Getting the type of 'total' (line 91)
    total_96005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 11), 'total')
    # Getting the type of 'None' (line 91)
    None_96006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 20), 'None')
    
    (may_be_96007, more_types_in_union_96008) = may_be_none(total_96005, None_96006)

    if may_be_96007:

        if more_types_in_union_96008:
            # Runtime conditional SSA (line 91)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 92):
        
        # Assigning a BinOp to a Name (line 92):
        # Getting the type of 'maxh' (line 92)
        maxh_96009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 21), 'maxh')
        # Getting the type of 'sep' (line 92)
        sep_96010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 28), 'sep')
        # Applying the binary operator '+' (line 92)
        result_add_96011 = python_operator(stypy.reporting.localization.Localization(__file__, 92, 21), '+', maxh_96009, sep_96010)
        
        
        # Call to len(...): (line 92)
        # Processing the call arguments (line 92)
        # Getting the type of 'w_list' (line 92)
        w_list_96013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 39), 'w_list', False)
        # Processing the call keyword arguments (line 92)
        kwargs_96014 = {}
        # Getting the type of 'len' (line 92)
        len_96012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 35), 'len', False)
        # Calling len(args, kwargs) (line 92)
        len_call_result_96015 = invoke(stypy.reporting.localization.Localization(__file__, 92, 35), len_96012, *[w_list_96013], **kwargs_96014)
        
        # Applying the binary operator '*' (line 92)
        result_mul_96016 = python_operator(stypy.reporting.localization.Localization(__file__, 92, 20), '*', result_add_96011, len_call_result_96015)
        
        # Assigning a type to the variable 'total' (line 92)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 92, 12), 'total', result_mul_96016)

        if more_types_in_union_96008:
            # Runtime conditional SSA for else branch (line 91)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_96007) or more_types_in_union_96008):
        
        # Assigning a BinOp to a Name (line 94):
        
        # Assigning a BinOp to a Name (line 94):
        # Getting the type of 'total' (line 94)
        total_96017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 18), 'total')
        
        # Call to len(...): (line 94)
        # Processing the call arguments (line 94)
        # Getting the type of 'w_list' (line 94)
        w_list_96019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 30), 'w_list', False)
        # Processing the call keyword arguments (line 94)
        kwargs_96020 = {}
        # Getting the type of 'len' (line 94)
        len_96018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 26), 'len', False)
        # Calling len(args, kwargs) (line 94)
        len_call_result_96021 = invoke(stypy.reporting.localization.Localization(__file__, 94, 26), len_96018, *[w_list_96019], **kwargs_96020)
        
        # Applying the binary operator 'div' (line 94)
        result_div_96022 = python_operator(stypy.reporting.localization.Localization(__file__, 94, 18), 'div', total_96017, len_call_result_96021)
        
        # Getting the type of 'maxh' (line 94)
        maxh_96023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 40), 'maxh')
        # Applying the binary operator '-' (line 94)
        result_sub_96024 = python_operator(stypy.reporting.localization.Localization(__file__, 94, 18), '-', result_div_96022, maxh_96023)
        
        # Assigning a type to the variable 'sep' (line 94)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 12), 'sep', result_sub_96024)

        if (may_be_96007 and more_types_in_union_96008):
            # SSA join for if statement (line 91)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a BinOp to a Name (line 95):
    
    # Assigning a BinOp to a Name (line 95):
    # Getting the type of 'maxh' (line 95)
    maxh_96025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 19), 'maxh')
    # Getting the type of 'sep' (line 95)
    sep_96026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 26), 'sep')
    # Applying the binary operator '+' (line 95)
    result_add_96027 = python_operator(stypy.reporting.localization.Localization(__file__, 95, 19), '+', maxh_96025, sep_96026)
    
    
    # Call to arange(...): (line 95)
    # Processing the call arguments (line 95)
    
    # Call to len(...): (line 95)
    # Processing the call arguments (line 95)
    # Getting the type of 'w_list' (line 95)
    w_list_96031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 47), 'w_list', False)
    # Processing the call keyword arguments (line 95)
    kwargs_96032 = {}
    # Getting the type of 'len' (line 95)
    len_96030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 43), 'len', False)
    # Calling len(args, kwargs) (line 95)
    len_call_result_96033 = invoke(stypy.reporting.localization.Localization(__file__, 95, 43), len_96030, *[w_list_96031], **kwargs_96032)
    
    # Processing the call keyword arguments (line 95)
    kwargs_96034 = {}
    # Getting the type of 'np' (line 95)
    np_96028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 33), 'np', False)
    # Obtaining the member 'arange' of a type (line 95)
    arange_96029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 33), np_96028, 'arange')
    # Calling arange(args, kwargs) (line 95)
    arange_call_result_96035 = invoke(stypy.reporting.localization.Localization(__file__, 95, 33), arange_96029, *[len_call_result_96033], **kwargs_96034)
    
    # Applying the binary operator '*' (line 95)
    result_mul_96036 = python_operator(stypy.reporting.localization.Localization(__file__, 95, 18), '*', result_add_96027, arange_call_result_96035)
    
    # Assigning a type to the variable 'offsets' (line 95)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 8), 'offsets', result_mul_96036)
    
    # Obtaining an instance of the builtin type 'tuple' (line 96)
    tuple_96037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 96)
    # Adding element type (line 96)
    # Getting the type of 'total' (line 96)
    total_96038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 15), 'total')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 96, 15), tuple_96037, total_96038)
    # Adding element type (line 96)
    # Getting the type of 'offsets' (line 96)
    offsets_96039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 22), 'offsets')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 96, 15), tuple_96037, offsets_96039)
    
    # Assigning a type to the variable 'stypy_return_type' (line 96)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'stypy_return_type', tuple_96037)
    # SSA branch for the else part of an if statement (line 89)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 99)
    # Processing the call arguments (line 99)
    unicode_96041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 25), 'unicode', u'Unknown mode : %s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 99)
    tuple_96042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 48), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 99)
    # Adding element type (line 99)
    # Getting the type of 'mode' (line 99)
    mode_96043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 48), 'mode', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 99, 48), tuple_96042, mode_96043)
    
    # Applying the binary operator '%' (line 99)
    result_mod_96044 = python_operator(stypy.reporting.localization.Localization(__file__, 99, 25), '%', unicode_96041, tuple_96042)
    
    # Processing the call keyword arguments (line 99)
    kwargs_96045 = {}
    # Getting the type of 'ValueError' (line 99)
    ValueError_96040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 99)
    ValueError_call_result_96046 = invoke(stypy.reporting.localization.Localization(__file__, 99, 14), ValueError_96040, *[result_mod_96044], **kwargs_96045)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 99, 8), ValueError_call_result_96046, 'raise parameter', BaseException)
    # SSA join for if statement (line 89)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 80)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 73)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_get_packed_offsets(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_packed_offsets' in the type store
    # Getting the type of 'stypy_return_type' (line 57)
    stypy_return_type_96047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_96047)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_packed_offsets'
    return stypy_return_type_96047

# Assigning a type to the variable '_get_packed_offsets' (line 57)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 0), '_get_packed_offsets', _get_packed_offsets)

@norecursion
def _get_aligned_offsets(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_96048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 48), 'unicode', u'baseline')
    defaults = [unicode_96048]
    # Create a new context for function '_get_aligned_offsets'
    module_type_store = module_type_store.open_function_context('_get_aligned_offsets', 102, 0, False)
    
    # Passed parameters checking function
    _get_aligned_offsets.stypy_localization = localization
    _get_aligned_offsets.stypy_type_of_self = None
    _get_aligned_offsets.stypy_type_store = module_type_store
    _get_aligned_offsets.stypy_function_name = '_get_aligned_offsets'
    _get_aligned_offsets.stypy_param_names_list = ['hd_list', 'height', 'align']
    _get_aligned_offsets.stypy_varargs_param_name = None
    _get_aligned_offsets.stypy_kwargs_param_name = None
    _get_aligned_offsets.stypy_call_defaults = defaults
    _get_aligned_offsets.stypy_call_varargs = varargs
    _get_aligned_offsets.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_aligned_offsets', ['hd_list', 'height', 'align'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_aligned_offsets', localization, ['hd_list', 'height', 'align'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_aligned_offsets(...)' code ##################

    unicode_96049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 114, (-1)), 'unicode', u"\n    Given a list of (height, descent) of each boxes, align the boxes\n    with *align* and calculate the y-offsets of each boxes.\n    total width and the offset positions of each items according to\n    *mode*. xdescent is analogous to the usual descent, but along the\n    x-direction. xdescent values are currently ignored.\n\n    *hd_list* : list of (width, xdescent) of boxes to be aligned.\n    *sep* : spacing between boxes\n    *height* : Intended total length. None if not used.\n    *align* : align mode. 'baseline', 'top', 'bottom', or 'center'.\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 116)
    # Getting the type of 'height' (line 116)
    height_96050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 7), 'height')
    # Getting the type of 'None' (line 116)
    None_96051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 17), 'None')
    
    (may_be_96052, more_types_in_union_96053) = may_be_none(height_96050, None_96051)

    if may_be_96052:

        if more_types_in_union_96053:
            # Runtime conditional SSA (line 116)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 117):
        
        # Assigning a Call to a Name (line 117):
        
        # Call to max(...): (line 117)
        # Processing the call arguments (line 117)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 117, 21, True)
        # Calculating comprehension expression
        # Getting the type of 'hd_list' (line 117)
        hd_list_96056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 35), 'hd_list', False)
        comprehension_96057 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 117, 21), hd_list_96056)
        # Assigning a type to the variable 'h' (line 117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 21), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 117, 21), comprehension_96057))
        # Assigning a type to the variable 'd' (line 117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 21), 'd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 117, 21), comprehension_96057))
        # Getting the type of 'h' (line 117)
        h_96055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 21), 'h', False)
        list_96058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 21), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 117, 21), list_96058, h_96055)
        # Processing the call keyword arguments (line 117)
        kwargs_96059 = {}
        # Getting the type of 'max' (line 117)
        max_96054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 17), 'max', False)
        # Calling max(args, kwargs) (line 117)
        max_call_result_96060 = invoke(stypy.reporting.localization.Localization(__file__, 117, 17), max_96054, *[list_96058], **kwargs_96059)
        
        # Assigning a type to the variable 'height' (line 117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 8), 'height', max_call_result_96060)

        if more_types_in_union_96053:
            # SSA join for if statement (line 116)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'align' (line 119)
    align_96061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 7), 'align')
    unicode_96062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 119, 16), 'unicode', u'baseline')
    # Applying the binary operator '==' (line 119)
    result_eq_96063 = python_operator(stypy.reporting.localization.Localization(__file__, 119, 7), '==', align_96061, unicode_96062)
    
    # Testing the type of an if condition (line 119)
    if_condition_96064 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 119, 4), result_eq_96063)
    # Assigning a type to the variable 'if_condition_96064' (line 119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 4), 'if_condition_96064', if_condition_96064)
    # SSA begins for if statement (line 119)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 120):
    
    # Assigning a Call to a Name (line 120):
    
    # Call to max(...): (line 120)
    # Processing the call arguments (line 120)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 120, 29, True)
    # Calculating comprehension expression
    # Getting the type of 'hd_list' (line 120)
    hd_list_96069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 47), 'hd_list', False)
    comprehension_96070 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 120, 29), hd_list_96069)
    # Assigning a type to the variable 'h' (line 120)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 120, 29), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 120, 29), comprehension_96070))
    # Assigning a type to the variable 'd' (line 120)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 120, 29), 'd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 120, 29), comprehension_96070))
    # Getting the type of 'h' (line 120)
    h_96066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 29), 'h', False)
    # Getting the type of 'd' (line 120)
    d_96067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 33), 'd', False)
    # Applying the binary operator '-' (line 120)
    result_sub_96068 = python_operator(stypy.reporting.localization.Localization(__file__, 120, 29), '-', h_96066, d_96067)
    
    list_96071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 120, 29), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 120, 29), list_96071, result_sub_96068)
    # Processing the call keyword arguments (line 120)
    kwargs_96072 = {}
    # Getting the type of 'max' (line 120)
    max_96065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 25), 'max', False)
    # Calling max(args, kwargs) (line 120)
    max_call_result_96073 = invoke(stypy.reporting.localization.Localization(__file__, 120, 25), max_96065, *[list_96071], **kwargs_96072)
    
    # Assigning a type to the variable 'height_descent' (line 120)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 120, 8), 'height_descent', max_call_result_96073)
    
    # Assigning a Call to a Name (line 121):
    
    # Assigning a Call to a Name (line 121):
    
    # Call to max(...): (line 121)
    # Processing the call arguments (line 121)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 121, 22, True)
    # Calculating comprehension expression
    # Getting the type of 'hd_list' (line 121)
    hd_list_96076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 36), 'hd_list', False)
    comprehension_96077 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 121, 22), hd_list_96076)
    # Assigning a type to the variable 'h' (line 121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 22), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 121, 22), comprehension_96077))
    # Assigning a type to the variable 'd' (line 121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 22), 'd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 121, 22), comprehension_96077))
    # Getting the type of 'd' (line 121)
    d_96075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 22), 'd', False)
    list_96078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 22), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 121, 22), list_96078, d_96075)
    # Processing the call keyword arguments (line 121)
    kwargs_96079 = {}
    # Getting the type of 'max' (line 121)
    max_96074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 18), 'max', False)
    # Calling max(args, kwargs) (line 121)
    max_call_result_96080 = invoke(stypy.reporting.localization.Localization(__file__, 121, 18), max_96074, *[list_96078], **kwargs_96079)
    
    # Assigning a type to the variable 'descent' (line 121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 8), 'descent', max_call_result_96080)
    
    # Assigning a BinOp to a Name (line 122):
    
    # Assigning a BinOp to a Name (line 122):
    # Getting the type of 'height_descent' (line 122)
    height_descent_96081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 17), 'height_descent')
    # Getting the type of 'descent' (line 122)
    descent_96082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 34), 'descent')
    # Applying the binary operator '+' (line 122)
    result_add_96083 = python_operator(stypy.reporting.localization.Localization(__file__, 122, 17), '+', height_descent_96081, descent_96082)
    
    # Assigning a type to the variable 'height' (line 122)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 8), 'height', result_add_96083)
    
    # Assigning a ListComp to a Name (line 123):
    
    # Assigning a ListComp to a Name (line 123):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'hd_list' (line 123)
    hd_list_96085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 34), 'hd_list')
    comprehension_96086 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 123, 19), hd_list_96085)
    # Assigning a type to the variable 'h' (line 123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 123, 19), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 123, 19), comprehension_96086))
    # Assigning a type to the variable 'd' (line 123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 123, 19), 'd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 123, 19), comprehension_96086))
    float_96084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 19), 'float')
    list_96087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 19), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 123, 19), list_96087, float_96084)
    # Assigning a type to the variable 'offsets' (line 123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 123, 8), 'offsets', list_96087)
    # SSA branch for the else part of an if statement (line 119)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'align' (line 124)
    align_96088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 9), 'align')
    
    # Obtaining an instance of the builtin type 'list' (line 124)
    list_96089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 124)
    # Adding element type (line 124)
    unicode_96090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 19), 'unicode', u'left')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 124, 18), list_96089, unicode_96090)
    # Adding element type (line 124)
    unicode_96091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 27), 'unicode', u'top')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 124, 18), list_96089, unicode_96091)
    
    # Applying the binary operator 'in' (line 124)
    result_contains_96092 = python_operator(stypy.reporting.localization.Localization(__file__, 124, 9), 'in', align_96088, list_96089)
    
    # Testing the type of an if condition (line 124)
    if_condition_96093 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 124, 9), result_contains_96092)
    # Assigning a type to the variable 'if_condition_96093' (line 124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 9), 'if_condition_96093', if_condition_96093)
    # SSA begins for if statement (line 124)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 125):
    
    # Assigning a Num to a Name (line 125):
    float_96094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 18), 'float')
    # Assigning a type to the variable 'descent' (line 125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 8), 'descent', float_96094)
    
    # Assigning a ListComp to a Name (line 126):
    
    # Assigning a ListComp to a Name (line 126):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'hd_list' (line 126)
    hd_list_96096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 33), 'hd_list')
    comprehension_96097 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 126, 19), hd_list_96096)
    # Assigning a type to the variable 'h' (line 126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 19), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 126, 19), comprehension_96097))
    # Assigning a type to the variable 'd' (line 126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 19), 'd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 126, 19), comprehension_96097))
    # Getting the type of 'd' (line 126)
    d_96095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 19), 'd')
    list_96098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 19), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 126, 19), list_96098, d_96095)
    # Assigning a type to the variable 'offsets' (line 126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 8), 'offsets', list_96098)
    # SSA branch for the else part of an if statement (line 124)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'align' (line 127)
    align_96099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 9), 'align')
    
    # Obtaining an instance of the builtin type 'list' (line 127)
    list_96100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 127)
    # Adding element type (line 127)
    unicode_96101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 19), 'unicode', u'right')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 127, 18), list_96100, unicode_96101)
    # Adding element type (line 127)
    unicode_96102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 28), 'unicode', u'bottom')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 127, 18), list_96100, unicode_96102)
    
    # Applying the binary operator 'in' (line 127)
    result_contains_96103 = python_operator(stypy.reporting.localization.Localization(__file__, 127, 9), 'in', align_96099, list_96100)
    
    # Testing the type of an if condition (line 127)
    if_condition_96104 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 127, 9), result_contains_96103)
    # Assigning a type to the variable 'if_condition_96104' (line 127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 127, 9), 'if_condition_96104', if_condition_96104)
    # SSA begins for if statement (line 127)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 128):
    
    # Assigning a Num to a Name (line 128):
    float_96105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 128, 18), 'float')
    # Assigning a type to the variable 'descent' (line 128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 8), 'descent', float_96105)
    
    # Assigning a ListComp to a Name (line 129):
    
    # Assigning a ListComp to a Name (line 129):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'hd_list' (line 129)
    hd_list_96111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 46), 'hd_list')
    comprehension_96112 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 129, 19), hd_list_96111)
    # Assigning a type to the variable 'h' (line 129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 19), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 129, 19), comprehension_96112))
    # Assigning a type to the variable 'd' (line 129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 19), 'd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 129, 19), comprehension_96112))
    # Getting the type of 'height' (line 129)
    height_96106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 19), 'height')
    # Getting the type of 'h' (line 129)
    h_96107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 28), 'h')
    # Applying the binary operator '-' (line 129)
    result_sub_96108 = python_operator(stypy.reporting.localization.Localization(__file__, 129, 19), '-', height_96106, h_96107)
    
    # Getting the type of 'd' (line 129)
    d_96109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 32), 'd')
    # Applying the binary operator '+' (line 129)
    result_add_96110 = python_operator(stypy.reporting.localization.Localization(__file__, 129, 30), '+', result_sub_96108, d_96109)
    
    list_96113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 19), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 129, 19), list_96113, result_add_96110)
    # Assigning a type to the variable 'offsets' (line 129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 8), 'offsets', list_96113)
    # SSA branch for the else part of an if statement (line 127)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'align' (line 130)
    align_96114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 9), 'align')
    unicode_96115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, 18), 'unicode', u'center')
    # Applying the binary operator '==' (line 130)
    result_eq_96116 = python_operator(stypy.reporting.localization.Localization(__file__, 130, 9), '==', align_96114, unicode_96115)
    
    # Testing the type of an if condition (line 130)
    if_condition_96117 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 130, 9), result_eq_96116)
    # Assigning a type to the variable 'if_condition_96117' (line 130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 9), 'if_condition_96117', if_condition_96117)
    # SSA begins for if statement (line 130)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 131):
    
    # Assigning a Num to a Name (line 131):
    float_96118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 131, 18), 'float')
    # Assigning a type to the variable 'descent' (line 131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 131, 8), 'descent', float_96118)
    
    # Assigning a ListComp to a Name (line 132):
    
    # Assigning a ListComp to a Name (line 132):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'hd_list' (line 132)
    hd_list_96126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 53), 'hd_list')
    comprehension_96127 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 132, 19), hd_list_96126)
    # Assigning a type to the variable 'h' (line 132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 19), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 132, 19), comprehension_96127))
    # Assigning a type to the variable 'd' (line 132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 19), 'd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 132, 19), comprehension_96127))
    # Getting the type of 'height' (line 132)
    height_96119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 20), 'height')
    # Getting the type of 'h' (line 132)
    h_96120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 29), 'h')
    # Applying the binary operator '-' (line 132)
    result_sub_96121 = python_operator(stypy.reporting.localization.Localization(__file__, 132, 20), '-', height_96119, h_96120)
    
    float_96122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 132, 34), 'float')
    # Applying the binary operator '*' (line 132)
    result_mul_96123 = python_operator(stypy.reporting.localization.Localization(__file__, 132, 19), '*', result_sub_96121, float_96122)
    
    # Getting the type of 'd' (line 132)
    d_96124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 39), 'd')
    # Applying the binary operator '+' (line 132)
    result_add_96125 = python_operator(stypy.reporting.localization.Localization(__file__, 132, 19), '+', result_mul_96123, d_96124)
    
    list_96128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 132, 19), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 132, 19), list_96128, result_add_96125)
    # Assigning a type to the variable 'offsets' (line 132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 8), 'offsets', list_96128)
    # SSA branch for the else part of an if statement (line 130)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 134)
    # Processing the call arguments (line 134)
    unicode_96130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 134, 25), 'unicode', u'Unknown Align mode : %s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 134)
    tuple_96131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 134, 54), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 134)
    # Adding element type (line 134)
    # Getting the type of 'align' (line 134)
    align_96132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 54), 'align', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 134, 54), tuple_96131, align_96132)
    
    # Applying the binary operator '%' (line 134)
    result_mod_96133 = python_operator(stypy.reporting.localization.Localization(__file__, 134, 25), '%', unicode_96130, tuple_96131)
    
    # Processing the call keyword arguments (line 134)
    kwargs_96134 = {}
    # Getting the type of 'ValueError' (line 134)
    ValueError_96129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 134)
    ValueError_call_result_96135 = invoke(stypy.reporting.localization.Localization(__file__, 134, 14), ValueError_96129, *[result_mod_96133], **kwargs_96134)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 134, 8), ValueError_call_result_96135, 'raise parameter', BaseException)
    # SSA join for if statement (line 130)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 127)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 124)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 119)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 136)
    tuple_96136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 136, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 136)
    # Adding element type (line 136)
    # Getting the type of 'height' (line 136)
    height_96137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 11), 'height')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 136, 11), tuple_96136, height_96137)
    # Adding element type (line 136)
    # Getting the type of 'descent' (line 136)
    descent_96138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 19), 'descent')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 136, 11), tuple_96136, descent_96138)
    # Adding element type (line 136)
    # Getting the type of 'offsets' (line 136)
    offsets_96139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 28), 'offsets')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 136, 11), tuple_96136, offsets_96139)
    
    # Assigning a type to the variable 'stypy_return_type' (line 136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 4), 'stypy_return_type', tuple_96136)
    
    # ################# End of '_get_aligned_offsets(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_aligned_offsets' in the type store
    # Getting the type of 'stypy_return_type' (line 102)
    stypy_return_type_96140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_96140)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_aligned_offsets'
    return stypy_return_type_96140

# Assigning a type to the variable '_get_aligned_offsets' (line 102)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 102, 0), '_get_aligned_offsets', _get_aligned_offsets)
# Declaration of the 'OffsetBox' class
# Getting the type of 'martist' (line 139)
martist_96141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 16), 'martist')
# Obtaining the member 'Artist' of a type (line 139)
Artist_96142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 139, 16), martist_96141, 'Artist')

class OffsetBox(Artist_96142, ):
    unicode_96143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 143, (-1)), 'unicode', u'\n    The OffsetBox is a simple container artist. The child artist are meant\n    to be drawn at a relative position to its parent.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 144, 4, False)
        # Assigning a type to the variable 'self' (line 145)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 145, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.__init__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 146)
        # Getting the type of 'args' (line 146)
        args_96150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 41), 'args', False)
        # Processing the call keyword arguments (line 146)
        # Getting the type of 'kwargs' (line 146)
        kwargs_96151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 49), 'kwargs', False)
        kwargs_96152 = {'kwargs_96151': kwargs_96151}
        
        # Call to super(...): (line 146)
        # Processing the call arguments (line 146)
        # Getting the type of 'OffsetBox' (line 146)
        OffsetBox_96145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 14), 'OffsetBox', False)
        # Getting the type of 'self' (line 146)
        self_96146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 25), 'self', False)
        # Processing the call keyword arguments (line 146)
        kwargs_96147 = {}
        # Getting the type of 'super' (line 146)
        super_96144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 8), 'super', False)
        # Calling super(args, kwargs) (line 146)
        super_call_result_96148 = invoke(stypy.reporting.localization.Localization(__file__, 146, 8), super_96144, *[OffsetBox_96145, self_96146], **kwargs_96147)
        
        # Obtaining the member '__init__' of a type (line 146)
        init___96149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 8), super_call_result_96148, '__init__')
        # Calling __init__(args, kwargs) (line 146)
        init___call_result_96153 = invoke(stypy.reporting.localization.Localization(__file__, 146, 8), init___96149, *[args_96150], **kwargs_96152)
        
        
        # Call to set_clip_on(...): (line 151)
        # Processing the call arguments (line 151)
        # Getting the type of 'False' (line 151)
        False_96156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 25), 'False', False)
        # Processing the call keyword arguments (line 151)
        kwargs_96157 = {}
        # Getting the type of 'self' (line 151)
        self_96154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 8), 'self', False)
        # Obtaining the member 'set_clip_on' of a type (line 151)
        set_clip_on_96155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 8), self_96154, 'set_clip_on')
        # Calling set_clip_on(args, kwargs) (line 151)
        set_clip_on_call_result_96158 = invoke(stypy.reporting.localization.Localization(__file__, 151, 8), set_clip_on_96155, *[False_96156], **kwargs_96157)
        
        
        # Assigning a List to a Attribute (line 153):
        
        # Assigning a List to a Attribute (line 153):
        
        # Obtaining an instance of the builtin type 'list' (line 153)
        list_96159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 153, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 153)
        
        # Getting the type of 'self' (line 153)
        self_96160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 8), 'self')
        # Setting the type of the member '_children' of a type (line 153)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 8), self_96160, '_children', list_96159)
        
        # Assigning a Tuple to a Attribute (line 154):
        
        # Assigning a Tuple to a Attribute (line 154):
        
        # Obtaining an instance of the builtin type 'tuple' (line 154)
        tuple_96161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 154)
        # Adding element type (line 154)
        int_96162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 154, 24), tuple_96161, int_96162)
        # Adding element type (line 154)
        int_96163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 27), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 154, 24), tuple_96161, int_96163)
        
        # Getting the type of 'self' (line 154)
        self_96164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 8), 'self')
        # Setting the type of the member '_offset' of a type (line 154)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 8), self_96164, '_offset', tuple_96161)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __getstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getstate__'
        module_type_store = module_type_store.open_function_context('__getstate__', 156, 4, False)
        # Assigning a type to the variable 'self' (line 157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetBox.__getstate__.__dict__.__setitem__('stypy_localization', localization)
        OffsetBox.__getstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetBox.__getstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetBox.__getstate__.__dict__.__setitem__('stypy_function_name', 'OffsetBox.__getstate__')
        OffsetBox.__getstate__.__dict__.__setitem__('stypy_param_names_list', [])
        OffsetBox.__getstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetBox.__getstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetBox.__getstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetBox.__getstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetBox.__getstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetBox.__getstate__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.__getstate__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getstate__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getstate__(...)' code ##################

        
        # Assigning a Call to a Name (line 157):
        
        # Assigning a Call to a Name (line 157):
        
        # Call to __getstate__(...): (line 157)
        # Processing the call arguments (line 157)
        # Getting the type of 'self' (line 157)
        self_96168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 44), 'self', False)
        # Processing the call keyword arguments (line 157)
        kwargs_96169 = {}
        # Getting the type of 'martist' (line 157)
        martist_96165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 16), 'martist', False)
        # Obtaining the member 'Artist' of a type (line 157)
        Artist_96166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 16), martist_96165, 'Artist')
        # Obtaining the member '__getstate__' of a type (line 157)
        getstate___96167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 16), Artist_96166, '__getstate__')
        # Calling __getstate__(args, kwargs) (line 157)
        getstate___call_result_96170 = invoke(stypy.reporting.localization.Localization(__file__, 157, 16), getstate___96167, *[self_96168], **kwargs_96169)
        
        # Assigning a type to the variable 'state' (line 157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 8), 'state', getstate___call_result_96170)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 160, 8))
        
        # 'from matplotlib.cbook import _InstanceMethodPickler' statement (line 160)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_96171 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 160, 8), 'matplotlib.cbook')

        if (type(import_96171) is not StypyTypeError):

            if (import_96171 != 'pyd_module'):
                __import__(import_96171)
                sys_modules_96172 = sys.modules[import_96171]
                import_from_module(stypy.reporting.localization.Localization(__file__, 160, 8), 'matplotlib.cbook', sys_modules_96172.module_type_store, module_type_store, ['_InstanceMethodPickler'])
                nest_module(stypy.reporting.localization.Localization(__file__, 160, 8), __file__, sys_modules_96172, sys_modules_96172.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import _InstanceMethodPickler

                import_from_module(stypy.reporting.localization.Localization(__file__, 160, 8), 'matplotlib.cbook', None, module_type_store, ['_InstanceMethodPickler'], [_InstanceMethodPickler])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 160)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 8), 'matplotlib.cbook', import_96171)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 161, 8))
        
        # 'import inspect' statement (line 161)
        import inspect

        import_module(stypy.reporting.localization.Localization(__file__, 161, 8), 'inspect', inspect, module_type_store)
        
        
        # Assigning a Subscript to a Name (line 163):
        
        # Assigning a Subscript to a Name (line 163):
        
        # Obtaining the type of the subscript
        unicode_96173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 23), 'unicode', u'_offset')
        # Getting the type of 'state' (line 163)
        state_96174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 17), 'state')
        # Obtaining the member '__getitem__' of a type (line 163)
        getitem___96175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 163, 17), state_96174, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 163)
        subscript_call_result_96176 = invoke(stypy.reporting.localization.Localization(__file__, 163, 17), getitem___96175, unicode_96173)
        
        # Assigning a type to the variable 'offset' (line 163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 8), 'offset', subscript_call_result_96176)
        
        
        # Call to ismethod(...): (line 164)
        # Processing the call arguments (line 164)
        # Getting the type of 'offset' (line 164)
        offset_96179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 28), 'offset', False)
        # Processing the call keyword arguments (line 164)
        kwargs_96180 = {}
        # Getting the type of 'inspect' (line 164)
        inspect_96177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 11), 'inspect', False)
        # Obtaining the member 'ismethod' of a type (line 164)
        ismethod_96178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 11), inspect_96177, 'ismethod')
        # Calling ismethod(args, kwargs) (line 164)
        ismethod_call_result_96181 = invoke(stypy.reporting.localization.Localization(__file__, 164, 11), ismethod_96178, *[offset_96179], **kwargs_96180)
        
        # Testing the type of an if condition (line 164)
        if_condition_96182 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 164, 8), ismethod_call_result_96181)
        # Assigning a type to the variable 'if_condition_96182' (line 164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 8), 'if_condition_96182', if_condition_96182)
        # SSA begins for if statement (line 164)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 165):
        
        # Assigning a Call to a Subscript (line 165):
        
        # Call to _InstanceMethodPickler(...): (line 165)
        # Processing the call arguments (line 165)
        # Getting the type of 'offset' (line 165)
        offset_96184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 54), 'offset', False)
        # Processing the call keyword arguments (line 165)
        kwargs_96185 = {}
        # Getting the type of '_InstanceMethodPickler' (line 165)
        _InstanceMethodPickler_96183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 31), '_InstanceMethodPickler', False)
        # Calling _InstanceMethodPickler(args, kwargs) (line 165)
        _InstanceMethodPickler_call_result_96186 = invoke(stypy.reporting.localization.Localization(__file__, 165, 31), _InstanceMethodPickler_96183, *[offset_96184], **kwargs_96185)
        
        # Getting the type of 'state' (line 165)
        state_96187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 12), 'state')
        unicode_96188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 18), 'unicode', u'_offset')
        # Storing an element on a container (line 165)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 165, 12), state_96187, (unicode_96188, _InstanceMethodPickler_call_result_96186))
        # SSA join for if statement (line 164)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'state' (line 166)
        state_96189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 15), 'state')
        # Assigning a type to the variable 'stypy_return_type' (line 166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 166, 8), 'stypy_return_type', state_96189)
        
        # ################# End of '__getstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 156)
        stypy_return_type_96190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96190)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getstate__'
        return stypy_return_type_96190


    @norecursion
    def __setstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setstate__'
        module_type_store = module_type_store.open_function_context('__setstate__', 168, 4, False)
        # Assigning a type to the variable 'self' (line 169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetBox.__setstate__.__dict__.__setitem__('stypy_localization', localization)
        OffsetBox.__setstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetBox.__setstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetBox.__setstate__.__dict__.__setitem__('stypy_function_name', 'OffsetBox.__setstate__')
        OffsetBox.__setstate__.__dict__.__setitem__('stypy_param_names_list', ['state'])
        OffsetBox.__setstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetBox.__setstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetBox.__setstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetBox.__setstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetBox.__setstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetBox.__setstate__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.__setstate__', ['state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setstate__', localization, ['state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setstate__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 169):
        
        # Assigning a Name to a Attribute (line 169):
        # Getting the type of 'state' (line 169)
        state_96191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 24), 'state')
        # Getting the type of 'self' (line 169)
        self_96192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 8), 'self')
        # Setting the type of the member '__dict__' of a type (line 169)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 8), self_96192, '__dict__', state_96191)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 170, 8))
        
        # 'from matplotlib.cbook import _InstanceMethodPickler' statement (line 170)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_96193 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 170, 8), 'matplotlib.cbook')

        if (type(import_96193) is not StypyTypeError):

            if (import_96193 != 'pyd_module'):
                __import__(import_96193)
                sys_modules_96194 = sys.modules[import_96193]
                import_from_module(stypy.reporting.localization.Localization(__file__, 170, 8), 'matplotlib.cbook', sys_modules_96194.module_type_store, module_type_store, ['_InstanceMethodPickler'])
                nest_module(stypy.reporting.localization.Localization(__file__, 170, 8), __file__, sys_modules_96194, sys_modules_96194.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import _InstanceMethodPickler

                import_from_module(stypy.reporting.localization.Localization(__file__, 170, 8), 'matplotlib.cbook', None, module_type_store, ['_InstanceMethodPickler'], [_InstanceMethodPickler])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 170)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 170, 8), 'matplotlib.cbook', import_96193)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        
        # Call to isinstance(...): (line 171)
        # Processing the call arguments (line 171)
        # Getting the type of 'self' (line 171)
        self_96196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 22), 'self', False)
        # Obtaining the member '_offset' of a type (line 171)
        _offset_96197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 22), self_96196, '_offset')
        # Getting the type of '_InstanceMethodPickler' (line 171)
        _InstanceMethodPickler_96198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 36), '_InstanceMethodPickler', False)
        # Processing the call keyword arguments (line 171)
        kwargs_96199 = {}
        # Getting the type of 'isinstance' (line 171)
        isinstance_96195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 171)
        isinstance_call_result_96200 = invoke(stypy.reporting.localization.Localization(__file__, 171, 11), isinstance_96195, *[_offset_96197, _InstanceMethodPickler_96198], **kwargs_96199)
        
        # Testing the type of an if condition (line 171)
        if_condition_96201 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 171, 8), isinstance_call_result_96200)
        # Assigning a type to the variable 'if_condition_96201' (line 171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 8), 'if_condition_96201', if_condition_96201)
        # SSA begins for if statement (line 171)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 172):
        
        # Assigning a Call to a Attribute (line 172):
        
        # Call to get_instancemethod(...): (line 172)
        # Processing the call keyword arguments (line 172)
        kwargs_96205 = {}
        # Getting the type of 'self' (line 172)
        self_96202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 27), 'self', False)
        # Obtaining the member '_offset' of a type (line 172)
        _offset_96203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 27), self_96202, '_offset')
        # Obtaining the member 'get_instancemethod' of a type (line 172)
        get_instancemethod_96204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 27), _offset_96203, 'get_instancemethod')
        # Calling get_instancemethod(args, kwargs) (line 172)
        get_instancemethod_call_result_96206 = invoke(stypy.reporting.localization.Localization(__file__, 172, 27), get_instancemethod_96204, *[], **kwargs_96205)
        
        # Getting the type of 'self' (line 172)
        self_96207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 12), 'self')
        # Setting the type of the member '_offset' of a type (line 172)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 12), self_96207, '_offset', get_instancemethod_call_result_96206)
        # SSA join for if statement (line 171)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 173):
        
        # Assigning a Name to a Attribute (line 173):
        # Getting the type of 'True' (line 173)
        True_96208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 21), 'True')
        # Getting the type of 'self' (line 173)
        self_96209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 173)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 8), self_96209, 'stale', True_96208)
        
        # ################# End of '__setstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 168)
        stypy_return_type_96210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96210)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setstate__'
        return stypy_return_type_96210


    @norecursion
    def set_figure(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_figure'
        module_type_store = module_type_store.open_function_context('set_figure', 175, 4, False)
        # Assigning a type to the variable 'self' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetBox.set_figure.__dict__.__setitem__('stypy_localization', localization)
        OffsetBox.set_figure.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetBox.set_figure.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetBox.set_figure.__dict__.__setitem__('stypy_function_name', 'OffsetBox.set_figure')
        OffsetBox.set_figure.__dict__.__setitem__('stypy_param_names_list', ['fig'])
        OffsetBox.set_figure.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetBox.set_figure.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetBox.set_figure.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetBox.set_figure.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetBox.set_figure.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetBox.set_figure.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.set_figure', ['fig'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_figure', localization, ['fig'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_figure(...)' code ##################

        unicode_96211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, (-1)), 'unicode', u'\n        Set the figure\n\n        accepts a class:`~matplotlib.figure.Figure` instance\n        ')
        
        # Call to set_figure(...): (line 181)
        # Processing the call arguments (line 181)
        # Getting the type of 'self' (line 181)
        self_96215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 34), 'self', False)
        # Getting the type of 'fig' (line 181)
        fig_96216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 40), 'fig', False)
        # Processing the call keyword arguments (line 181)
        kwargs_96217 = {}
        # Getting the type of 'martist' (line 181)
        martist_96212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 8), 'martist', False)
        # Obtaining the member 'Artist' of a type (line 181)
        Artist_96213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 8), martist_96212, 'Artist')
        # Obtaining the member 'set_figure' of a type (line 181)
        set_figure_96214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 8), Artist_96213, 'set_figure')
        # Calling set_figure(args, kwargs) (line 181)
        set_figure_call_result_96218 = invoke(stypy.reporting.localization.Localization(__file__, 181, 8), set_figure_96214, *[self_96215, fig_96216], **kwargs_96217)
        
        
        
        # Call to get_children(...): (line 182)
        # Processing the call keyword arguments (line 182)
        kwargs_96221 = {}
        # Getting the type of 'self' (line 182)
        self_96219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 17), 'self', False)
        # Obtaining the member 'get_children' of a type (line 182)
        get_children_96220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 182, 17), self_96219, 'get_children')
        # Calling get_children(args, kwargs) (line 182)
        get_children_call_result_96222 = invoke(stypy.reporting.localization.Localization(__file__, 182, 17), get_children_96220, *[], **kwargs_96221)
        
        # Testing the type of a for loop iterable (line 182)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 182, 8), get_children_call_result_96222)
        # Getting the type of the for loop variable (line 182)
        for_loop_var_96223 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 182, 8), get_children_call_result_96222)
        # Assigning a type to the variable 'c' (line 182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 182, 8), 'c', for_loop_var_96223)
        # SSA begins for a for statement (line 182)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_figure(...): (line 183)
        # Processing the call arguments (line 183)
        # Getting the type of 'fig' (line 183)
        fig_96226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 25), 'fig', False)
        # Processing the call keyword arguments (line 183)
        kwargs_96227 = {}
        # Getting the type of 'c' (line 183)
        c_96224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 12), 'c', False)
        # Obtaining the member 'set_figure' of a type (line 183)
        set_figure_96225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 12), c_96224, 'set_figure')
        # Calling set_figure(args, kwargs) (line 183)
        set_figure_call_result_96228 = invoke(stypy.reporting.localization.Localization(__file__, 183, 12), set_figure_96225, *[fig_96226], **kwargs_96227)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_figure(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_figure' in the type store
        # Getting the type of 'stypy_return_type' (line 175)
        stypy_return_type_96229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96229)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_figure'
        return stypy_return_type_96229


    @norecursion
    def axes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'axes'
        module_type_store = module_type_store.open_function_context('axes', 185, 4, False)
        # Assigning a type to the variable 'self' (line 186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetBox.axes.__dict__.__setitem__('stypy_localization', localization)
        OffsetBox.axes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetBox.axes.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetBox.axes.__dict__.__setitem__('stypy_function_name', 'OffsetBox.axes')
        OffsetBox.axes.__dict__.__setitem__('stypy_param_names_list', ['ax'])
        OffsetBox.axes.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetBox.axes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetBox.axes.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetBox.axes.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetBox.axes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetBox.axes.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.axes', ['ax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'axes', localization, ['ax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'axes(...)' code ##################

        
        # Call to fset(...): (line 188)
        # Processing the call arguments (line 188)
        # Getting the type of 'self' (line 188)
        self_96234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 33), 'self', False)
        # Getting the type of 'ax' (line 188)
        ax_96235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 39), 'ax', False)
        # Processing the call keyword arguments (line 188)
        kwargs_96236 = {}
        # Getting the type of 'martist' (line 188)
        martist_96230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 8), 'martist', False)
        # Obtaining the member 'Artist' of a type (line 188)
        Artist_96231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 8), martist_96230, 'Artist')
        # Obtaining the member 'axes' of a type (line 188)
        axes_96232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 8), Artist_96231, 'axes')
        # Obtaining the member 'fset' of a type (line 188)
        fset_96233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 8), axes_96232, 'fset')
        # Calling fset(args, kwargs) (line 188)
        fset_call_result_96237 = invoke(stypy.reporting.localization.Localization(__file__, 188, 8), fset_96233, *[self_96234, ax_96235], **kwargs_96236)
        
        
        
        # Call to get_children(...): (line 189)
        # Processing the call keyword arguments (line 189)
        kwargs_96240 = {}
        # Getting the type of 'self' (line 189)
        self_96238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 17), 'self', False)
        # Obtaining the member 'get_children' of a type (line 189)
        get_children_96239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 17), self_96238, 'get_children')
        # Calling get_children(args, kwargs) (line 189)
        get_children_call_result_96241 = invoke(stypy.reporting.localization.Localization(__file__, 189, 17), get_children_96239, *[], **kwargs_96240)
        
        # Testing the type of a for loop iterable (line 189)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 189, 8), get_children_call_result_96241)
        # Getting the type of the for loop variable (line 189)
        for_loop_var_96242 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 189, 8), get_children_call_result_96241)
        # Assigning a type to the variable 'c' (line 189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 8), 'c', for_loop_var_96242)
        # SSA begins for a for statement (line 189)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Type idiom detected: calculating its left and rigth part (line 190)
        # Getting the type of 'c' (line 190)
        c_96243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 12), 'c')
        # Getting the type of 'None' (line 190)
        None_96244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 24), 'None')
        
        (may_be_96245, more_types_in_union_96246) = may_not_be_none(c_96243, None_96244)

        if may_be_96245:

            if more_types_in_union_96246:
                # Runtime conditional SSA (line 190)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 191):
            
            # Assigning a Name to a Attribute (line 191):
            # Getting the type of 'ax' (line 191)
            ax_96247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 25), 'ax')
            # Getting the type of 'c' (line 191)
            c_96248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 16), 'c')
            # Setting the type of the member 'axes' of a type (line 191)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 191, 16), c_96248, 'axes', ax_96247)

            if more_types_in_union_96246:
                # SSA join for if statement (line 190)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'axes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'axes' in the type store
        # Getting the type of 'stypy_return_type' (line 185)
        stypy_return_type_96249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96249)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'axes'
        return stypy_return_type_96249


    @norecursion
    def contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains'
        module_type_store = module_type_store.open_function_context('contains', 193, 4, False)
        # Assigning a type to the variable 'self' (line 194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetBox.contains.__dict__.__setitem__('stypy_localization', localization)
        OffsetBox.contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetBox.contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetBox.contains.__dict__.__setitem__('stypy_function_name', 'OffsetBox.contains')
        OffsetBox.contains.__dict__.__setitem__('stypy_param_names_list', ['mouseevent'])
        OffsetBox.contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetBox.contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetBox.contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetBox.contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetBox.contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetBox.contains.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.contains', ['mouseevent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains', localization, ['mouseevent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains(...)' code ##################

        
        
        # Call to get_children(...): (line 194)
        # Processing the call keyword arguments (line 194)
        kwargs_96252 = {}
        # Getting the type of 'self' (line 194)
        self_96250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 17), 'self', False)
        # Obtaining the member 'get_children' of a type (line 194)
        get_children_96251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 17), self_96250, 'get_children')
        # Calling get_children(args, kwargs) (line 194)
        get_children_call_result_96253 = invoke(stypy.reporting.localization.Localization(__file__, 194, 17), get_children_96251, *[], **kwargs_96252)
        
        # Testing the type of a for loop iterable (line 194)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 194, 8), get_children_call_result_96253)
        # Getting the type of the for loop variable (line 194)
        for_loop_var_96254 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 194, 8), get_children_call_result_96253)
        # Assigning a type to the variable 'c' (line 194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 8), 'c', for_loop_var_96254)
        # SSA begins for a for statement (line 194)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Tuple (line 195):
        
        # Assigning a Call to a Name:
        
        # Call to contains(...): (line 195)
        # Processing the call arguments (line 195)
        # Getting the type of 'mouseevent' (line 195)
        mouseevent_96257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 30), 'mouseevent', False)
        # Processing the call keyword arguments (line 195)
        kwargs_96258 = {}
        # Getting the type of 'c' (line 195)
        c_96255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 19), 'c', False)
        # Obtaining the member 'contains' of a type (line 195)
        contains_96256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 19), c_96255, 'contains')
        # Calling contains(args, kwargs) (line 195)
        contains_call_result_96259 = invoke(stypy.reporting.localization.Localization(__file__, 195, 19), contains_96256, *[mouseevent_96257], **kwargs_96258)
        
        # Assigning a type to the variable 'call_assignment_95670' (line 195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 12), 'call_assignment_95670', contains_call_result_96259)
        
        # Assigning a Call to a Name (line 195):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 12), 'int')
        # Processing the call keyword arguments
        kwargs_96263 = {}
        # Getting the type of 'call_assignment_95670' (line 195)
        call_assignment_95670_96260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 12), 'call_assignment_95670', False)
        # Obtaining the member '__getitem__' of a type (line 195)
        getitem___96261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 12), call_assignment_95670_96260, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96264 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96261, *[int_96262], **kwargs_96263)
        
        # Assigning a type to the variable 'call_assignment_95671' (line 195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 12), 'call_assignment_95671', getitem___call_result_96264)
        
        # Assigning a Name to a Name (line 195):
        # Getting the type of 'call_assignment_95671' (line 195)
        call_assignment_95671_96265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 12), 'call_assignment_95671')
        # Assigning a type to the variable 'a' (line 195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 12), 'a', call_assignment_95671_96265)
        
        # Assigning a Call to a Name (line 195):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 12), 'int')
        # Processing the call keyword arguments
        kwargs_96269 = {}
        # Getting the type of 'call_assignment_95670' (line 195)
        call_assignment_95670_96266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 12), 'call_assignment_95670', False)
        # Obtaining the member '__getitem__' of a type (line 195)
        getitem___96267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 12), call_assignment_95670_96266, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96270 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96267, *[int_96268], **kwargs_96269)
        
        # Assigning a type to the variable 'call_assignment_95672' (line 195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 12), 'call_assignment_95672', getitem___call_result_96270)
        
        # Assigning a Name to a Name (line 195):
        # Getting the type of 'call_assignment_95672' (line 195)
        call_assignment_95672_96271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 12), 'call_assignment_95672')
        # Assigning a type to the variable 'b' (line 195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 15), 'b', call_assignment_95672_96271)
        
        # Getting the type of 'a' (line 196)
        a_96272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 15), 'a')
        # Testing the type of an if condition (line 196)
        if_condition_96273 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 196, 12), a_96272)
        # Assigning a type to the variable 'if_condition_96273' (line 196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 196, 12), 'if_condition_96273', if_condition_96273)
        # SSA begins for if statement (line 196)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 197)
        tuple_96274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 197, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 197)
        # Adding element type (line 197)
        # Getting the type of 'a' (line 197)
        a_96275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 23), 'a')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 197, 23), tuple_96274, a_96275)
        # Adding element type (line 197)
        # Getting the type of 'b' (line 197)
        b_96276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 26), 'b')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 197, 23), tuple_96274, b_96276)
        
        # Assigning a type to the variable 'stypy_return_type' (line 197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 16), 'stypy_return_type', tuple_96274)
        # SSA join for if statement (line 196)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 198)
        tuple_96277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 198)
        # Adding element type (line 198)
        # Getting the type of 'False' (line 198)
        False_96278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 15), 'False')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 15), tuple_96277, False_96278)
        # Adding element type (line 198)
        
        # Obtaining an instance of the builtin type 'dict' (line 198)
        dict_96279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 22), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 198)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 15), tuple_96277, dict_96279)
        
        # Assigning a type to the variable 'stypy_return_type' (line 198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 8), 'stypy_return_type', tuple_96277)
        
        # ################# End of 'contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains' in the type store
        # Getting the type of 'stypy_return_type' (line 193)
        stypy_return_type_96280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96280)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains'
        return stypy_return_type_96280


    @norecursion
    def set_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_offset'
        module_type_store = module_type_store.open_function_context('set_offset', 200, 4, False)
        # Assigning a type to the variable 'self' (line 201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetBox.set_offset.__dict__.__setitem__('stypy_localization', localization)
        OffsetBox.set_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetBox.set_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetBox.set_offset.__dict__.__setitem__('stypy_function_name', 'OffsetBox.set_offset')
        OffsetBox.set_offset.__dict__.__setitem__('stypy_param_names_list', ['xy'])
        OffsetBox.set_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetBox.set_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetBox.set_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetBox.set_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetBox.set_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetBox.set_offset.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.set_offset', ['xy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_offset', localization, ['xy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_offset(...)' code ##################

        unicode_96281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 205, (-1)), 'unicode', u'\n        Set the offset\n\n        accepts x, y, tuple, or a callable object.\n        ')
        
        # Assigning a Name to a Attribute (line 206):
        
        # Assigning a Name to a Attribute (line 206):
        # Getting the type of 'xy' (line 206)
        xy_96282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 23), 'xy')
        # Getting the type of 'self' (line 206)
        self_96283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 8), 'self')
        # Setting the type of the member '_offset' of a type (line 206)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 8), self_96283, '_offset', xy_96282)
        
        # Assigning a Name to a Attribute (line 207):
        
        # Assigning a Name to a Attribute (line 207):
        # Getting the type of 'True' (line 207)
        True_96284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 21), 'True')
        # Getting the type of 'self' (line 207)
        self_96285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 207)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 8), self_96285, 'stale', True_96284)
        
        # ################# End of 'set_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 200)
        stypy_return_type_96286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96286)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_offset'
        return stypy_return_type_96286


    @norecursion
    def get_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_offset'
        module_type_store = module_type_store.open_function_context('get_offset', 209, 4, False)
        # Assigning a type to the variable 'self' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetBox.get_offset.__dict__.__setitem__('stypy_localization', localization)
        OffsetBox.get_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetBox.get_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetBox.get_offset.__dict__.__setitem__('stypy_function_name', 'OffsetBox.get_offset')
        OffsetBox.get_offset.__dict__.__setitem__('stypy_param_names_list', ['width', 'height', 'xdescent', 'ydescent', 'renderer'])
        OffsetBox.get_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetBox.get_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetBox.get_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetBox.get_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetBox.get_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetBox.get_offset.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.get_offset', ['width', 'height', 'xdescent', 'ydescent', 'renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_offset', localization, ['width', 'height', 'xdescent', 'ydescent', 'renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_offset(...)' code ##################

        unicode_96287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, (-1)), 'unicode', u'\n        Get the offset\n\n        accepts extent of the box\n        ')
        
        
        # Call to callable(...): (line 216)
        # Processing the call arguments (line 216)
        # Getting the type of 'self' (line 216)
        self_96289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 28), 'self', False)
        # Obtaining the member '_offset' of a type (line 216)
        _offset_96290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 28), self_96289, '_offset')
        # Processing the call keyword arguments (line 216)
        kwargs_96291 = {}
        # Getting the type of 'callable' (line 216)
        callable_96288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 19), 'callable', False)
        # Calling callable(args, kwargs) (line 216)
        callable_call_result_96292 = invoke(stypy.reporting.localization.Localization(__file__, 216, 19), callable_96288, *[_offset_96290], **kwargs_96291)
        
        # Testing the type of an if expression (line 215)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 215, 16), callable_call_result_96292)
        # SSA begins for if expression (line 215)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Call to _offset(...): (line 215)
        # Processing the call arguments (line 215)
        # Getting the type of 'width' (line 215)
        width_96295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 29), 'width', False)
        # Getting the type of 'height' (line 215)
        height_96296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 36), 'height', False)
        # Getting the type of 'xdescent' (line 215)
        xdescent_96297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 44), 'xdescent', False)
        # Getting the type of 'ydescent' (line 215)
        ydescent_96298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 54), 'ydescent', False)
        # Getting the type of 'renderer' (line 215)
        renderer_96299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 64), 'renderer', False)
        # Processing the call keyword arguments (line 215)
        kwargs_96300 = {}
        # Getting the type of 'self' (line 215)
        self_96293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 16), 'self', False)
        # Obtaining the member '_offset' of a type (line 215)
        _offset_96294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 16), self_96293, '_offset')
        # Calling _offset(args, kwargs) (line 215)
        _offset_call_result_96301 = invoke(stypy.reporting.localization.Localization(__file__, 215, 16), _offset_96294, *[width_96295, height_96296, xdescent_96297, ydescent_96298, renderer_96299], **kwargs_96300)
        
        # SSA branch for the else part of an if expression (line 215)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'self' (line 217)
        self_96302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 21), 'self')
        # Obtaining the member '_offset' of a type (line 217)
        _offset_96303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 21), self_96302, '_offset')
        # SSA join for if expression (line 215)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_96304 = union_type.UnionType.add(_offset_call_result_96301, _offset_96303)
        
        # Assigning a type to the variable 'stypy_return_type' (line 215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 8), 'stypy_return_type', if_exp_96304)
        
        # ################# End of 'get_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 209)
        stypy_return_type_96305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96305)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_offset'
        return stypy_return_type_96305


    @norecursion
    def set_width(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_width'
        module_type_store = module_type_store.open_function_context('set_width', 219, 4, False)
        # Assigning a type to the variable 'self' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetBox.set_width.__dict__.__setitem__('stypy_localization', localization)
        OffsetBox.set_width.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetBox.set_width.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetBox.set_width.__dict__.__setitem__('stypy_function_name', 'OffsetBox.set_width')
        OffsetBox.set_width.__dict__.__setitem__('stypy_param_names_list', ['width'])
        OffsetBox.set_width.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetBox.set_width.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetBox.set_width.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetBox.set_width.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetBox.set_width.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetBox.set_width.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.set_width', ['width'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_width', localization, ['width'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_width(...)' code ##################

        unicode_96306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, (-1)), 'unicode', u'\n        Set the width\n\n        accepts float\n        ')
        
        # Assigning a Name to a Attribute (line 225):
        
        # Assigning a Name to a Attribute (line 225):
        # Getting the type of 'width' (line 225)
        width_96307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 21), 'width')
        # Getting the type of 'self' (line 225)
        self_96308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 8), 'self')
        # Setting the type of the member 'width' of a type (line 225)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 8), self_96308, 'width', width_96307)
        
        # Assigning a Name to a Attribute (line 226):
        
        # Assigning a Name to a Attribute (line 226):
        # Getting the type of 'True' (line 226)
        True_96309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 21), 'True')
        # Getting the type of 'self' (line 226)
        self_96310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 226)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 8), self_96310, 'stale', True_96309)
        
        # ################# End of 'set_width(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_width' in the type store
        # Getting the type of 'stypy_return_type' (line 219)
        stypy_return_type_96311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96311)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_width'
        return stypy_return_type_96311


    @norecursion
    def set_height(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_height'
        module_type_store = module_type_store.open_function_context('set_height', 228, 4, False)
        # Assigning a type to the variable 'self' (line 229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 229, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetBox.set_height.__dict__.__setitem__('stypy_localization', localization)
        OffsetBox.set_height.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetBox.set_height.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetBox.set_height.__dict__.__setitem__('stypy_function_name', 'OffsetBox.set_height')
        OffsetBox.set_height.__dict__.__setitem__('stypy_param_names_list', ['height'])
        OffsetBox.set_height.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetBox.set_height.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetBox.set_height.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetBox.set_height.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetBox.set_height.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetBox.set_height.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.set_height', ['height'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_height', localization, ['height'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_height(...)' code ##################

        unicode_96312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 233, (-1)), 'unicode', u'\n        Set the height\n\n        accepts float\n        ')
        
        # Assigning a Name to a Attribute (line 234):
        
        # Assigning a Name to a Attribute (line 234):
        # Getting the type of 'height' (line 234)
        height_96313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 22), 'height')
        # Getting the type of 'self' (line 234)
        self_96314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 8), 'self')
        # Setting the type of the member 'height' of a type (line 234)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 234, 8), self_96314, 'height', height_96313)
        
        # Assigning a Name to a Attribute (line 235):
        
        # Assigning a Name to a Attribute (line 235):
        # Getting the type of 'True' (line 235)
        True_96315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 21), 'True')
        # Getting the type of 'self' (line 235)
        self_96316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 235)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 8), self_96316, 'stale', True_96315)
        
        # ################# End of 'set_height(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_height' in the type store
        # Getting the type of 'stypy_return_type' (line 228)
        stypy_return_type_96317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96317)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_height'
        return stypy_return_type_96317


    @norecursion
    def get_visible_children(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_visible_children'
        module_type_store = module_type_store.open_function_context('get_visible_children', 237, 4, False)
        # Assigning a type to the variable 'self' (line 238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetBox.get_visible_children.__dict__.__setitem__('stypy_localization', localization)
        OffsetBox.get_visible_children.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetBox.get_visible_children.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetBox.get_visible_children.__dict__.__setitem__('stypy_function_name', 'OffsetBox.get_visible_children')
        OffsetBox.get_visible_children.__dict__.__setitem__('stypy_param_names_list', [])
        OffsetBox.get_visible_children.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetBox.get_visible_children.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetBox.get_visible_children.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetBox.get_visible_children.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetBox.get_visible_children.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetBox.get_visible_children.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.get_visible_children', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_visible_children', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_visible_children(...)' code ##################

        unicode_96318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, (-1)), 'unicode', u'\n        Return a list of visible artists it contains.\n        ')
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'self' (line 241)
        self_96324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 27), 'self')
        # Obtaining the member '_children' of a type (line 241)
        _children_96325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 27), self_96324, '_children')
        comprehension_96326 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 241, 16), _children_96325)
        # Assigning a type to the variable 'c' (line 241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 16), 'c', comprehension_96326)
        
        # Call to get_visible(...): (line 241)
        # Processing the call keyword arguments (line 241)
        kwargs_96322 = {}
        # Getting the type of 'c' (line 241)
        c_96320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 45), 'c', False)
        # Obtaining the member 'get_visible' of a type (line 241)
        get_visible_96321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 45), c_96320, 'get_visible')
        # Calling get_visible(args, kwargs) (line 241)
        get_visible_call_result_96323 = invoke(stypy.reporting.localization.Localization(__file__, 241, 45), get_visible_96321, *[], **kwargs_96322)
        
        # Getting the type of 'c' (line 241)
        c_96319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 16), 'c')
        list_96327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 241, 16), list_96327, c_96319)
        # Assigning a type to the variable 'stypy_return_type' (line 241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 8), 'stypy_return_type', list_96327)
        
        # ################# End of 'get_visible_children(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_visible_children' in the type store
        # Getting the type of 'stypy_return_type' (line 237)
        stypy_return_type_96328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96328)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_visible_children'
        return stypy_return_type_96328


    @norecursion
    def get_children(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_children'
        module_type_store = module_type_store.open_function_context('get_children', 243, 4, False)
        # Assigning a type to the variable 'self' (line 244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetBox.get_children.__dict__.__setitem__('stypy_localization', localization)
        OffsetBox.get_children.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetBox.get_children.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetBox.get_children.__dict__.__setitem__('stypy_function_name', 'OffsetBox.get_children')
        OffsetBox.get_children.__dict__.__setitem__('stypy_param_names_list', [])
        OffsetBox.get_children.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetBox.get_children.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetBox.get_children.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetBox.get_children.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetBox.get_children.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetBox.get_children.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.get_children', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_children', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_children(...)' code ##################

        unicode_96329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, (-1)), 'unicode', u'\n        Return a list of artists it contains.\n        ')
        # Getting the type of 'self' (line 247)
        self_96330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 15), 'self')
        # Obtaining the member '_children' of a type (line 247)
        _children_96331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 15), self_96330, '_children')
        # Assigning a type to the variable 'stypy_return_type' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 8), 'stypy_return_type', _children_96331)
        
        # ################# End of 'get_children(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_children' in the type store
        # Getting the type of 'stypy_return_type' (line 243)
        stypy_return_type_96332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96332)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_children'
        return stypy_return_type_96332


    @norecursion
    def get_extent_offsets(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_extent_offsets'
        module_type_store = module_type_store.open_function_context('get_extent_offsets', 249, 4, False)
        # Assigning a type to the variable 'self' (line 250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 250, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetBox.get_extent_offsets.__dict__.__setitem__('stypy_localization', localization)
        OffsetBox.get_extent_offsets.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetBox.get_extent_offsets.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetBox.get_extent_offsets.__dict__.__setitem__('stypy_function_name', 'OffsetBox.get_extent_offsets')
        OffsetBox.get_extent_offsets.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        OffsetBox.get_extent_offsets.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetBox.get_extent_offsets.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetBox.get_extent_offsets.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetBox.get_extent_offsets.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetBox.get_extent_offsets.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetBox.get_extent_offsets.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.get_extent_offsets', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_extent_offsets', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_extent_offsets(...)' code ##################

        
        # Call to Exception(...): (line 250)
        # Processing the call arguments (line 250)
        unicode_96334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 250, 24), 'unicode', u'')
        # Processing the call keyword arguments (line 250)
        kwargs_96335 = {}
        # Getting the type of 'Exception' (line 250)
        Exception_96333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 14), 'Exception', False)
        # Calling Exception(args, kwargs) (line 250)
        Exception_call_result_96336 = invoke(stypy.reporting.localization.Localization(__file__, 250, 14), Exception_96333, *[unicode_96334], **kwargs_96335)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 250, 8), Exception_call_result_96336, 'raise parameter', BaseException)
        
        # ################# End of 'get_extent_offsets(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_extent_offsets' in the type store
        # Getting the type of 'stypy_return_type' (line 249)
        stypy_return_type_96337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96337)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_extent_offsets'
        return stypy_return_type_96337


    @norecursion
    def get_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_extent'
        module_type_store = module_type_store.open_function_context('get_extent', 252, 4, False)
        # Assigning a type to the variable 'self' (line 253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetBox.get_extent.__dict__.__setitem__('stypy_localization', localization)
        OffsetBox.get_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetBox.get_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetBox.get_extent.__dict__.__setitem__('stypy_function_name', 'OffsetBox.get_extent')
        OffsetBox.get_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        OffsetBox.get_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetBox.get_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetBox.get_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetBox.get_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetBox.get_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetBox.get_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.get_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_extent(...)' code ##################

        unicode_96338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, (-1)), 'unicode', u'\n        Return with, height, xdescent, ydescent of box\n        ')
        
        # Assigning a Call to a Tuple (line 256):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent_offsets(...): (line 256)
        # Processing the call arguments (line 256)
        # Getting the type of 'renderer' (line 256)
        renderer_96341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 56), 'renderer', False)
        # Processing the call keyword arguments (line 256)
        kwargs_96342 = {}
        # Getting the type of 'self' (line 256)
        self_96339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 32), 'self', False)
        # Obtaining the member 'get_extent_offsets' of a type (line 256)
        get_extent_offsets_96340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 32), self_96339, 'get_extent_offsets')
        # Calling get_extent_offsets(args, kwargs) (line 256)
        get_extent_offsets_call_result_96343 = invoke(stypy.reporting.localization.Localization(__file__, 256, 32), get_extent_offsets_96340, *[renderer_96341], **kwargs_96342)
        
        # Assigning a type to the variable 'call_assignment_95673' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95673', get_extent_offsets_call_result_96343)
        
        # Assigning a Call to a Name (line 256):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96347 = {}
        # Getting the type of 'call_assignment_95673' (line 256)
        call_assignment_95673_96344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95673', False)
        # Obtaining the member '__getitem__' of a type (line 256)
        getitem___96345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 8), call_assignment_95673_96344, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96348 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96345, *[int_96346], **kwargs_96347)
        
        # Assigning a type to the variable 'call_assignment_95674' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95674', getitem___call_result_96348)
        
        # Assigning a Name to a Name (line 256):
        # Getting the type of 'call_assignment_95674' (line 256)
        call_assignment_95674_96349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95674')
        # Assigning a type to the variable 'w' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'w', call_assignment_95674_96349)
        
        # Assigning a Call to a Name (line 256):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96353 = {}
        # Getting the type of 'call_assignment_95673' (line 256)
        call_assignment_95673_96350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95673', False)
        # Obtaining the member '__getitem__' of a type (line 256)
        getitem___96351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 8), call_assignment_95673_96350, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96354 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96351, *[int_96352], **kwargs_96353)
        
        # Assigning a type to the variable 'call_assignment_95675' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95675', getitem___call_result_96354)
        
        # Assigning a Name to a Name (line 256):
        # Getting the type of 'call_assignment_95675' (line 256)
        call_assignment_95675_96355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95675')
        # Assigning a type to the variable 'h' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 11), 'h', call_assignment_95675_96355)
        
        # Assigning a Call to a Name (line 256):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96359 = {}
        # Getting the type of 'call_assignment_95673' (line 256)
        call_assignment_95673_96356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95673', False)
        # Obtaining the member '__getitem__' of a type (line 256)
        getitem___96357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 8), call_assignment_95673_96356, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96360 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96357, *[int_96358], **kwargs_96359)
        
        # Assigning a type to the variable 'call_assignment_95676' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95676', getitem___call_result_96360)
        
        # Assigning a Name to a Name (line 256):
        # Getting the type of 'call_assignment_95676' (line 256)
        call_assignment_95676_96361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95676')
        # Assigning a type to the variable 'xd' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 14), 'xd', call_assignment_95676_96361)
        
        # Assigning a Call to a Name (line 256):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96365 = {}
        # Getting the type of 'call_assignment_95673' (line 256)
        call_assignment_95673_96362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95673', False)
        # Obtaining the member '__getitem__' of a type (line 256)
        getitem___96363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 8), call_assignment_95673_96362, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96366 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96363, *[int_96364], **kwargs_96365)
        
        # Assigning a type to the variable 'call_assignment_95677' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95677', getitem___call_result_96366)
        
        # Assigning a Name to a Name (line 256):
        # Getting the type of 'call_assignment_95677' (line 256)
        call_assignment_95677_96367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95677')
        # Assigning a type to the variable 'yd' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 18), 'yd', call_assignment_95677_96367)
        
        # Assigning a Call to a Name (line 256):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96371 = {}
        # Getting the type of 'call_assignment_95673' (line 256)
        call_assignment_95673_96368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95673', False)
        # Obtaining the member '__getitem__' of a type (line 256)
        getitem___96369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 8), call_assignment_95673_96368, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96372 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96369, *[int_96370], **kwargs_96371)
        
        # Assigning a type to the variable 'call_assignment_95678' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95678', getitem___call_result_96372)
        
        # Assigning a Name to a Name (line 256):
        # Getting the type of 'call_assignment_95678' (line 256)
        call_assignment_95678_96373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_95678')
        # Assigning a type to the variable 'offsets' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 22), 'offsets', call_assignment_95678_96373)
        
        # Obtaining an instance of the builtin type 'tuple' (line 257)
        tuple_96374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 257)
        # Adding element type (line 257)
        # Getting the type of 'w' (line 257)
        w_96375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 15), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 257, 15), tuple_96374, w_96375)
        # Adding element type (line 257)
        # Getting the type of 'h' (line 257)
        h_96376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 18), 'h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 257, 15), tuple_96374, h_96376)
        # Adding element type (line 257)
        # Getting the type of 'xd' (line 257)
        xd_96377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 21), 'xd')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 257, 15), tuple_96374, xd_96377)
        # Adding element type (line 257)
        # Getting the type of 'yd' (line 257)
        yd_96378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 25), 'yd')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 257, 15), tuple_96374, yd_96378)
        
        # Assigning a type to the variable 'stypy_return_type' (line 257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 8), 'stypy_return_type', tuple_96374)
        
        # ################# End of 'get_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 252)
        stypy_return_type_96379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96379)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_extent'
        return stypy_return_type_96379


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 259, 4, False)
        # Assigning a type to the variable 'self' (line 260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 260, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetBox.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        OffsetBox.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetBox.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetBox.get_window_extent.__dict__.__setitem__('stypy_function_name', 'OffsetBox.get_window_extent')
        OffsetBox.get_window_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        OffsetBox.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetBox.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetBox.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetBox.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetBox.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetBox.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.get_window_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        unicode_96380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 262, (-1)), 'unicode', u'\n        get the bounding box in display space.\n        ')
        
        # Assigning a Call to a Tuple (line 263):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent_offsets(...): (line 263)
        # Processing the call arguments (line 263)
        # Getting the type of 'renderer' (line 263)
        renderer_96383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 56), 'renderer', False)
        # Processing the call keyword arguments (line 263)
        kwargs_96384 = {}
        # Getting the type of 'self' (line 263)
        self_96381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 32), 'self', False)
        # Obtaining the member 'get_extent_offsets' of a type (line 263)
        get_extent_offsets_96382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 32), self_96381, 'get_extent_offsets')
        # Calling get_extent_offsets(args, kwargs) (line 263)
        get_extent_offsets_call_result_96385 = invoke(stypy.reporting.localization.Localization(__file__, 263, 32), get_extent_offsets_96382, *[renderer_96383], **kwargs_96384)
        
        # Assigning a type to the variable 'call_assignment_95679' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95679', get_extent_offsets_call_result_96385)
        
        # Assigning a Call to a Name (line 263):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 263, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96389 = {}
        # Getting the type of 'call_assignment_95679' (line 263)
        call_assignment_95679_96386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95679', False)
        # Obtaining the member '__getitem__' of a type (line 263)
        getitem___96387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 8), call_assignment_95679_96386, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96390 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96387, *[int_96388], **kwargs_96389)
        
        # Assigning a type to the variable 'call_assignment_95680' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95680', getitem___call_result_96390)
        
        # Assigning a Name to a Name (line 263):
        # Getting the type of 'call_assignment_95680' (line 263)
        call_assignment_95680_96391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95680')
        # Assigning a type to the variable 'w' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'w', call_assignment_95680_96391)
        
        # Assigning a Call to a Name (line 263):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 263, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96395 = {}
        # Getting the type of 'call_assignment_95679' (line 263)
        call_assignment_95679_96392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95679', False)
        # Obtaining the member '__getitem__' of a type (line 263)
        getitem___96393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 8), call_assignment_95679_96392, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96396 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96393, *[int_96394], **kwargs_96395)
        
        # Assigning a type to the variable 'call_assignment_95681' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95681', getitem___call_result_96396)
        
        # Assigning a Name to a Name (line 263):
        # Getting the type of 'call_assignment_95681' (line 263)
        call_assignment_95681_96397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95681')
        # Assigning a type to the variable 'h' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 11), 'h', call_assignment_95681_96397)
        
        # Assigning a Call to a Name (line 263):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 263, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96401 = {}
        # Getting the type of 'call_assignment_95679' (line 263)
        call_assignment_95679_96398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95679', False)
        # Obtaining the member '__getitem__' of a type (line 263)
        getitem___96399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 8), call_assignment_95679_96398, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96402 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96399, *[int_96400], **kwargs_96401)
        
        # Assigning a type to the variable 'call_assignment_95682' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95682', getitem___call_result_96402)
        
        # Assigning a Name to a Name (line 263):
        # Getting the type of 'call_assignment_95682' (line 263)
        call_assignment_95682_96403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95682')
        # Assigning a type to the variable 'xd' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 14), 'xd', call_assignment_95682_96403)
        
        # Assigning a Call to a Name (line 263):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 263, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96407 = {}
        # Getting the type of 'call_assignment_95679' (line 263)
        call_assignment_95679_96404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95679', False)
        # Obtaining the member '__getitem__' of a type (line 263)
        getitem___96405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 8), call_assignment_95679_96404, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96408 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96405, *[int_96406], **kwargs_96407)
        
        # Assigning a type to the variable 'call_assignment_95683' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95683', getitem___call_result_96408)
        
        # Assigning a Name to a Name (line 263):
        # Getting the type of 'call_assignment_95683' (line 263)
        call_assignment_95683_96409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95683')
        # Assigning a type to the variable 'yd' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 18), 'yd', call_assignment_95683_96409)
        
        # Assigning a Call to a Name (line 263):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 263, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96413 = {}
        # Getting the type of 'call_assignment_95679' (line 263)
        call_assignment_95679_96410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95679', False)
        # Obtaining the member '__getitem__' of a type (line 263)
        getitem___96411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 8), call_assignment_95679_96410, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96414 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96411, *[int_96412], **kwargs_96413)
        
        # Assigning a type to the variable 'call_assignment_95684' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95684', getitem___call_result_96414)
        
        # Assigning a Name to a Name (line 263):
        # Getting the type of 'call_assignment_95684' (line 263)
        call_assignment_95684_96415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'call_assignment_95684')
        # Assigning a type to the variable 'offsets' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 22), 'offsets', call_assignment_95684_96415)
        
        # Assigning a Call to a Tuple (line 264):
        
        # Assigning a Call to a Name:
        
        # Call to get_offset(...): (line 264)
        # Processing the call arguments (line 264)
        # Getting the type of 'w' (line 264)
        w_96418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 33), 'w', False)
        # Getting the type of 'h' (line 264)
        h_96419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 36), 'h', False)
        # Getting the type of 'xd' (line 264)
        xd_96420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 39), 'xd', False)
        # Getting the type of 'yd' (line 264)
        yd_96421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 43), 'yd', False)
        # Getting the type of 'renderer' (line 264)
        renderer_96422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 47), 'renderer', False)
        # Processing the call keyword arguments (line 264)
        kwargs_96423 = {}
        # Getting the type of 'self' (line 264)
        self_96416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 17), 'self', False)
        # Obtaining the member 'get_offset' of a type (line 264)
        get_offset_96417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 264, 17), self_96416, 'get_offset')
        # Calling get_offset(args, kwargs) (line 264)
        get_offset_call_result_96424 = invoke(stypy.reporting.localization.Localization(__file__, 264, 17), get_offset_96417, *[w_96418, h_96419, xd_96420, yd_96421, renderer_96422], **kwargs_96423)
        
        # Assigning a type to the variable 'call_assignment_95685' (line 264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 264, 8), 'call_assignment_95685', get_offset_call_result_96424)
        
        # Assigning a Call to a Name (line 264):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96428 = {}
        # Getting the type of 'call_assignment_95685' (line 264)
        call_assignment_95685_96425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 8), 'call_assignment_95685', False)
        # Obtaining the member '__getitem__' of a type (line 264)
        getitem___96426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 264, 8), call_assignment_95685_96425, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96429 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96426, *[int_96427], **kwargs_96428)
        
        # Assigning a type to the variable 'call_assignment_95686' (line 264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 264, 8), 'call_assignment_95686', getitem___call_result_96429)
        
        # Assigning a Name to a Name (line 264):
        # Getting the type of 'call_assignment_95686' (line 264)
        call_assignment_95686_96430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 8), 'call_assignment_95686')
        # Assigning a type to the variable 'px' (line 264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 264, 8), 'px', call_assignment_95686_96430)
        
        # Assigning a Call to a Name (line 264):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96434 = {}
        # Getting the type of 'call_assignment_95685' (line 264)
        call_assignment_95685_96431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 8), 'call_assignment_95685', False)
        # Obtaining the member '__getitem__' of a type (line 264)
        getitem___96432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 264, 8), call_assignment_95685_96431, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96435 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96432, *[int_96433], **kwargs_96434)
        
        # Assigning a type to the variable 'call_assignment_95687' (line 264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 264, 8), 'call_assignment_95687', getitem___call_result_96435)
        
        # Assigning a Name to a Name (line 264):
        # Getting the type of 'call_assignment_95687' (line 264)
        call_assignment_95687_96436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 8), 'call_assignment_95687')
        # Assigning a type to the variable 'py' (line 264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 264, 12), 'py', call_assignment_95687_96436)
        
        # Call to from_bounds(...): (line 265)
        # Processing the call arguments (line 265)
        # Getting the type of 'px' (line 265)
        px_96440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 44), 'px', False)
        # Getting the type of 'xd' (line 265)
        xd_96441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 49), 'xd', False)
        # Applying the binary operator '-' (line 265)
        result_sub_96442 = python_operator(stypy.reporting.localization.Localization(__file__, 265, 44), '-', px_96440, xd_96441)
        
        # Getting the type of 'py' (line 265)
        py_96443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 53), 'py', False)
        # Getting the type of 'yd' (line 265)
        yd_96444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 58), 'yd', False)
        # Applying the binary operator '-' (line 265)
        result_sub_96445 = python_operator(stypy.reporting.localization.Localization(__file__, 265, 53), '-', py_96443, yd_96444)
        
        # Getting the type of 'w' (line 265)
        w_96446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 62), 'w', False)
        # Getting the type of 'h' (line 265)
        h_96447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 65), 'h', False)
        # Processing the call keyword arguments (line 265)
        kwargs_96448 = {}
        # Getting the type of 'mtransforms' (line 265)
        mtransforms_96437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 15), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 265)
        Bbox_96438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 15), mtransforms_96437, 'Bbox')
        # Obtaining the member 'from_bounds' of a type (line 265)
        from_bounds_96439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 15), Bbox_96438, 'from_bounds')
        # Calling from_bounds(args, kwargs) (line 265)
        from_bounds_call_result_96449 = invoke(stypy.reporting.localization.Localization(__file__, 265, 15), from_bounds_96439, *[result_sub_96442, result_sub_96445, w_96446, h_96447], **kwargs_96448)
        
        # Assigning a type to the variable 'stypy_return_type' (line 265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 8), 'stypy_return_type', from_bounds_call_result_96449)
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 259)
        stypy_return_type_96450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96450)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_96450


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 267, 4, False)
        # Assigning a type to the variable 'self' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetBox.draw.__dict__.__setitem__('stypy_localization', localization)
        OffsetBox.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetBox.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetBox.draw.__dict__.__setitem__('stypy_function_name', 'OffsetBox.draw')
        OffsetBox.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        OffsetBox.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetBox.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetBox.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetBox.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetBox.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetBox.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetBox.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_96451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, (-1)), 'unicode', u'\n        Update the location of children if necessary and draw them\n        to the given *renderer*.\n        ')
        
        # Assigning a Call to a Tuple (line 273):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent_offsets(...): (line 273)
        # Processing the call arguments (line 273)
        # Getting the type of 'renderer' (line 274)
        renderer_96454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 56), 'renderer', False)
        # Processing the call keyword arguments (line 273)
        kwargs_96455 = {}
        # Getting the type of 'self' (line 273)
        self_96452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 53), 'self', False)
        # Obtaining the member 'get_extent_offsets' of a type (line 273)
        get_extent_offsets_96453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 53), self_96452, 'get_extent_offsets')
        # Calling get_extent_offsets(args, kwargs) (line 273)
        get_extent_offsets_call_result_96456 = invoke(stypy.reporting.localization.Localization(__file__, 273, 53), get_extent_offsets_96453, *[renderer_96454], **kwargs_96455)
        
        # Assigning a type to the variable 'call_assignment_95688' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95688', get_extent_offsets_call_result_96456)
        
        # Assigning a Call to a Name (line 273):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96460 = {}
        # Getting the type of 'call_assignment_95688' (line 273)
        call_assignment_95688_96457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95688', False)
        # Obtaining the member '__getitem__' of a type (line 273)
        getitem___96458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 8), call_assignment_95688_96457, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96461 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96458, *[int_96459], **kwargs_96460)
        
        # Assigning a type to the variable 'call_assignment_95689' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95689', getitem___call_result_96461)
        
        # Assigning a Name to a Name (line 273):
        # Getting the type of 'call_assignment_95689' (line 273)
        call_assignment_95689_96462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95689')
        # Assigning a type to the variable 'width' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'width', call_assignment_95689_96462)
        
        # Assigning a Call to a Name (line 273):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96466 = {}
        # Getting the type of 'call_assignment_95688' (line 273)
        call_assignment_95688_96463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95688', False)
        # Obtaining the member '__getitem__' of a type (line 273)
        getitem___96464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 8), call_assignment_95688_96463, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96467 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96464, *[int_96465], **kwargs_96466)
        
        # Assigning a type to the variable 'call_assignment_95690' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95690', getitem___call_result_96467)
        
        # Assigning a Name to a Name (line 273):
        # Getting the type of 'call_assignment_95690' (line 273)
        call_assignment_95690_96468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95690')
        # Assigning a type to the variable 'height' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 15), 'height', call_assignment_95690_96468)
        
        # Assigning a Call to a Name (line 273):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96472 = {}
        # Getting the type of 'call_assignment_95688' (line 273)
        call_assignment_95688_96469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95688', False)
        # Obtaining the member '__getitem__' of a type (line 273)
        getitem___96470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 8), call_assignment_95688_96469, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96473 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96470, *[int_96471], **kwargs_96472)
        
        # Assigning a type to the variable 'call_assignment_95691' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95691', getitem___call_result_96473)
        
        # Assigning a Name to a Name (line 273):
        # Getting the type of 'call_assignment_95691' (line 273)
        call_assignment_95691_96474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95691')
        # Assigning a type to the variable 'xdescent' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 23), 'xdescent', call_assignment_95691_96474)
        
        # Assigning a Call to a Name (line 273):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96478 = {}
        # Getting the type of 'call_assignment_95688' (line 273)
        call_assignment_95688_96475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95688', False)
        # Obtaining the member '__getitem__' of a type (line 273)
        getitem___96476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 8), call_assignment_95688_96475, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96479 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96476, *[int_96477], **kwargs_96478)
        
        # Assigning a type to the variable 'call_assignment_95692' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95692', getitem___call_result_96479)
        
        # Assigning a Name to a Name (line 273):
        # Getting the type of 'call_assignment_95692' (line 273)
        call_assignment_95692_96480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95692')
        # Assigning a type to the variable 'ydescent' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 33), 'ydescent', call_assignment_95692_96480)
        
        # Assigning a Call to a Name (line 273):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96484 = {}
        # Getting the type of 'call_assignment_95688' (line 273)
        call_assignment_95688_96481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95688', False)
        # Obtaining the member '__getitem__' of a type (line 273)
        getitem___96482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 8), call_assignment_95688_96481, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96485 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96482, *[int_96483], **kwargs_96484)
        
        # Assigning a type to the variable 'call_assignment_95693' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95693', getitem___call_result_96485)
        
        # Assigning a Name to a Name (line 273):
        # Getting the type of 'call_assignment_95693' (line 273)
        call_assignment_95693_96486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'call_assignment_95693')
        # Assigning a type to the variable 'offsets' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 43), 'offsets', call_assignment_95693_96486)
        
        # Assigning a Call to a Tuple (line 276):
        
        # Assigning a Call to a Name:
        
        # Call to get_offset(...): (line 276)
        # Processing the call arguments (line 276)
        # Getting the type of 'width' (line 276)
        width_96489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 33), 'width', False)
        # Getting the type of 'height' (line 276)
        height_96490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 40), 'height', False)
        # Getting the type of 'xdescent' (line 276)
        xdescent_96491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 48), 'xdescent', False)
        # Getting the type of 'ydescent' (line 276)
        ydescent_96492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 58), 'ydescent', False)
        # Getting the type of 'renderer' (line 276)
        renderer_96493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 68), 'renderer', False)
        # Processing the call keyword arguments (line 276)
        kwargs_96494 = {}
        # Getting the type of 'self' (line 276)
        self_96487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 17), 'self', False)
        # Obtaining the member 'get_offset' of a type (line 276)
        get_offset_96488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 17), self_96487, 'get_offset')
        # Calling get_offset(args, kwargs) (line 276)
        get_offset_call_result_96495 = invoke(stypy.reporting.localization.Localization(__file__, 276, 17), get_offset_96488, *[width_96489, height_96490, xdescent_96491, ydescent_96492, renderer_96493], **kwargs_96494)
        
        # Assigning a type to the variable 'call_assignment_95694' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 8), 'call_assignment_95694', get_offset_call_result_96495)
        
        # Assigning a Call to a Name (line 276):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96499 = {}
        # Getting the type of 'call_assignment_95694' (line 276)
        call_assignment_95694_96496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 8), 'call_assignment_95694', False)
        # Obtaining the member '__getitem__' of a type (line 276)
        getitem___96497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 8), call_assignment_95694_96496, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96500 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96497, *[int_96498], **kwargs_96499)
        
        # Assigning a type to the variable 'call_assignment_95695' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 8), 'call_assignment_95695', getitem___call_result_96500)
        
        # Assigning a Name to a Name (line 276):
        # Getting the type of 'call_assignment_95695' (line 276)
        call_assignment_95695_96501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 8), 'call_assignment_95695')
        # Assigning a type to the variable 'px' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 8), 'px', call_assignment_95695_96501)
        
        # Assigning a Call to a Name (line 276):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96505 = {}
        # Getting the type of 'call_assignment_95694' (line 276)
        call_assignment_95694_96502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 8), 'call_assignment_95694', False)
        # Obtaining the member '__getitem__' of a type (line 276)
        getitem___96503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 8), call_assignment_95694_96502, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96506 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96503, *[int_96504], **kwargs_96505)
        
        # Assigning a type to the variable 'call_assignment_95696' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 8), 'call_assignment_95696', getitem___call_result_96506)
        
        # Assigning a Name to a Name (line 276):
        # Getting the type of 'call_assignment_95696' (line 276)
        call_assignment_95696_96507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 8), 'call_assignment_95696')
        # Assigning a type to the variable 'py' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 12), 'py', call_assignment_95696_96507)
        
        
        # Call to zip(...): (line 278)
        # Processing the call arguments (line 278)
        
        # Call to get_visible_children(...): (line 278)
        # Processing the call keyword arguments (line 278)
        kwargs_96511 = {}
        # Getting the type of 'self' (line 278)
        self_96509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 31), 'self', False)
        # Obtaining the member 'get_visible_children' of a type (line 278)
        get_visible_children_96510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 31), self_96509, 'get_visible_children')
        # Calling get_visible_children(args, kwargs) (line 278)
        get_visible_children_call_result_96512 = invoke(stypy.reporting.localization.Localization(__file__, 278, 31), get_visible_children_96510, *[], **kwargs_96511)
        
        # Getting the type of 'offsets' (line 278)
        offsets_96513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 60), 'offsets', False)
        # Processing the call keyword arguments (line 278)
        kwargs_96514 = {}
        # Getting the type of 'zip' (line 278)
        zip_96508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 27), 'zip', False)
        # Calling zip(args, kwargs) (line 278)
        zip_call_result_96515 = invoke(stypy.reporting.localization.Localization(__file__, 278, 27), zip_96508, *[get_visible_children_call_result_96512, offsets_96513], **kwargs_96514)
        
        # Testing the type of a for loop iterable (line 278)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 278, 8), zip_call_result_96515)
        # Getting the type of the for loop variable (line 278)
        for_loop_var_96516 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 278, 8), zip_call_result_96515)
        # Assigning a type to the variable 'c' (line 278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 8), 'c', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 278, 8), for_loop_var_96516))
        # Assigning a type to the variable 'ox' (line 278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 8), 'ox', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 278, 8), for_loop_var_96516))
        # Assigning a type to the variable 'oy' (line 278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 8), 'oy', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 278, 8), for_loop_var_96516))
        # SSA begins for a for statement (line 278)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_offset(...): (line 279)
        # Processing the call arguments (line 279)
        
        # Obtaining an instance of the builtin type 'tuple' (line 279)
        tuple_96519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 279)
        # Adding element type (line 279)
        # Getting the type of 'px' (line 279)
        px_96520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 26), 'px', False)
        # Getting the type of 'ox' (line 279)
        ox_96521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 31), 'ox', False)
        # Applying the binary operator '+' (line 279)
        result_add_96522 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 26), '+', px_96520, ox_96521)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 279, 26), tuple_96519, result_add_96522)
        # Adding element type (line 279)
        # Getting the type of 'py' (line 279)
        py_96523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 35), 'py', False)
        # Getting the type of 'oy' (line 279)
        oy_96524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 40), 'oy', False)
        # Applying the binary operator '+' (line 279)
        result_add_96525 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 35), '+', py_96523, oy_96524)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 279, 26), tuple_96519, result_add_96525)
        
        # Processing the call keyword arguments (line 279)
        kwargs_96526 = {}
        # Getting the type of 'c' (line 279)
        c_96517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 12), 'c', False)
        # Obtaining the member 'set_offset' of a type (line 279)
        set_offset_96518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 12), c_96517, 'set_offset')
        # Calling set_offset(args, kwargs) (line 279)
        set_offset_call_result_96527 = invoke(stypy.reporting.localization.Localization(__file__, 279, 12), set_offset_96518, *[tuple_96519], **kwargs_96526)
        
        
        # Call to draw(...): (line 280)
        # Processing the call arguments (line 280)
        # Getting the type of 'renderer' (line 280)
        renderer_96530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 19), 'renderer', False)
        # Processing the call keyword arguments (line 280)
        kwargs_96531 = {}
        # Getting the type of 'c' (line 280)
        c_96528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 12), 'c', False)
        # Obtaining the member 'draw' of a type (line 280)
        draw_96529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 12), c_96528, 'draw')
        # Calling draw(args, kwargs) (line 280)
        draw_call_result_96532 = invoke(stypy.reporting.localization.Localization(__file__, 280, 12), draw_96529, *[renderer_96530], **kwargs_96531)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to bbox_artist(...): (line 282)
        # Processing the call arguments (line 282)
        # Getting the type of 'self' (line 282)
        self_96534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 20), 'self', False)
        # Getting the type of 'renderer' (line 282)
        renderer_96535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 26), 'renderer', False)
        # Processing the call keyword arguments (line 282)
        # Getting the type of 'False' (line 282)
        False_96536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 41), 'False', False)
        keyword_96537 = False_96536
        
        # Call to dict(...): (line 282)
        # Processing the call keyword arguments (line 282)
        float_96539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 282, 63), 'float')
        keyword_96540 = float_96539
        kwargs_96541 = {'pad': keyword_96540}
        # Getting the type of 'dict' (line 282)
        dict_96538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 54), 'dict', False)
        # Calling dict(args, kwargs) (line 282)
        dict_call_result_96542 = invoke(stypy.reporting.localization.Localization(__file__, 282, 54), dict_96538, *[], **kwargs_96541)
        
        keyword_96543 = dict_call_result_96542
        kwargs_96544 = {'props': keyword_96543, 'fill': keyword_96537}
        # Getting the type of 'bbox_artist' (line 282)
        bbox_artist_96533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 8), 'bbox_artist', False)
        # Calling bbox_artist(args, kwargs) (line 282)
        bbox_artist_call_result_96545 = invoke(stypy.reporting.localization.Localization(__file__, 282, 8), bbox_artist_96533, *[self_96534, renderer_96535], **kwargs_96544)
        
        
        # Assigning a Name to a Attribute (line 283):
        
        # Assigning a Name to a Attribute (line 283):
        # Getting the type of 'False' (line 283)
        False_96546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 21), 'False')
        # Getting the type of 'self' (line 283)
        self_96547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 283)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 283, 8), self_96547, 'stale', False_96546)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 267)
        stypy_return_type_96548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96548)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_96548


# Assigning a type to the variable 'OffsetBox' (line 139)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 0), 'OffsetBox', OffsetBox)
# Declaration of the 'PackerBase' class
# Getting the type of 'OffsetBox' (line 286)
OffsetBox_96549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 17), 'OffsetBox')

class PackerBase(OffsetBox_96549, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 287)
        None_96550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 27), 'None')
        # Getting the type of 'None' (line 287)
        None_96551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 37), 'None')
        # Getting the type of 'None' (line 287)
        None_96552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 49), 'None')
        # Getting the type of 'None' (line 287)
        None_96553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 62), 'None')
        # Getting the type of 'None' (line 288)
        None_96554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 23), 'None')
        # Getting the type of 'None' (line 288)
        None_96555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 34), 'None')
        # Getting the type of 'None' (line 289)
        None_96556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 26), 'None')
        defaults = [None_96550, None_96551, None_96552, None_96553, None_96554, None_96555, None_96556]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 287, 4, False)
        # Assigning a type to the variable 'self' (line 288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 288, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PackerBase.__init__', ['pad', 'sep', 'width', 'height', 'align', 'mode', 'children'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['pad', 'sep', 'width', 'height', 'align', 'mode', 'children'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_96557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, (-1)), 'unicode', u'\n        Parameters\n        ----------\n        pad : float, optional\n            Boundary pad.\n\n        sep : float, optional\n            Spacing between items.\n\n        width : float, optional\n\n        height : float, optional\n           Width and height of the container box, calculated if\n           `None`.\n\n        align : str, optional\n            Alignment of boxes. Can be one of ``top``, ``bottom``,\n            ``left``, ``right``, ``center`` and ``baseline``\n\n        mode : str, optional\n            Packing mode.\n\n        Notes\n        -----\n        *pad* and *sep* need to given in points and will be scale with\n        the renderer dpi, while *width* and *height* need to be in\n        pixels.\n        ')
        
        # Call to __init__(...): (line 318)
        # Processing the call keyword arguments (line 318)
        kwargs_96564 = {}
        
        # Call to super(...): (line 318)
        # Processing the call arguments (line 318)
        # Getting the type of 'PackerBase' (line 318)
        PackerBase_96559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 14), 'PackerBase', False)
        # Getting the type of 'self' (line 318)
        self_96560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 26), 'self', False)
        # Processing the call keyword arguments (line 318)
        kwargs_96561 = {}
        # Getting the type of 'super' (line 318)
        super_96558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 8), 'super', False)
        # Calling super(args, kwargs) (line 318)
        super_call_result_96562 = invoke(stypy.reporting.localization.Localization(__file__, 318, 8), super_96558, *[PackerBase_96559, self_96560], **kwargs_96561)
        
        # Obtaining the member '__init__' of a type (line 318)
        init___96563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 8), super_call_result_96562, '__init__')
        # Calling __init__(args, kwargs) (line 318)
        init___call_result_96565 = invoke(stypy.reporting.localization.Localization(__file__, 318, 8), init___96563, *[], **kwargs_96564)
        
        
        # Assigning a Name to a Attribute (line 320):
        
        # Assigning a Name to a Attribute (line 320):
        # Getting the type of 'height' (line 320)
        height_96566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 22), 'height')
        # Getting the type of 'self' (line 320)
        self_96567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 8), 'self')
        # Setting the type of the member 'height' of a type (line 320)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 8), self_96567, 'height', height_96566)
        
        # Assigning a Name to a Attribute (line 321):
        
        # Assigning a Name to a Attribute (line 321):
        # Getting the type of 'width' (line 321)
        width_96568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 21), 'width')
        # Getting the type of 'self' (line 321)
        self_96569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 8), 'self')
        # Setting the type of the member 'width' of a type (line 321)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 8), self_96569, 'width', width_96568)
        
        # Assigning a Name to a Attribute (line 322):
        
        # Assigning a Name to a Attribute (line 322):
        # Getting the type of 'sep' (line 322)
        sep_96570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 19), 'sep')
        # Getting the type of 'self' (line 322)
        self_96571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'self')
        # Setting the type of the member 'sep' of a type (line 322)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 8), self_96571, 'sep', sep_96570)
        
        # Assigning a Name to a Attribute (line 323):
        
        # Assigning a Name to a Attribute (line 323):
        # Getting the type of 'pad' (line 323)
        pad_96572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 19), 'pad')
        # Getting the type of 'self' (line 323)
        self_96573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 8), 'self')
        # Setting the type of the member 'pad' of a type (line 323)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 8), self_96573, 'pad', pad_96572)
        
        # Assigning a Name to a Attribute (line 324):
        
        # Assigning a Name to a Attribute (line 324):
        # Getting the type of 'mode' (line 324)
        mode_96574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 20), 'mode')
        # Getting the type of 'self' (line 324)
        self_96575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 8), 'self')
        # Setting the type of the member 'mode' of a type (line 324)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 8), self_96575, 'mode', mode_96574)
        
        # Assigning a Name to a Attribute (line 325):
        
        # Assigning a Name to a Attribute (line 325):
        # Getting the type of 'align' (line 325)
        align_96576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 21), 'align')
        # Getting the type of 'self' (line 325)
        self_96577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 8), 'self')
        # Setting the type of the member 'align' of a type (line 325)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 8), self_96577, 'align', align_96576)
        
        # Assigning a Name to a Attribute (line 327):
        
        # Assigning a Name to a Attribute (line 327):
        # Getting the type of 'children' (line 327)
        children_96578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 25), 'children')
        # Getting the type of 'self' (line 327)
        self_96579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'self')
        # Setting the type of the member '_children' of a type (line 327)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 8), self_96579, '_children', children_96578)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'PackerBase' (line 286)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 0), 'PackerBase', PackerBase)
# Declaration of the 'VPacker' class
# Getting the type of 'PackerBase' (line 330)
PackerBase_96580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 14), 'PackerBase')

class VPacker(PackerBase_96580, ):
    unicode_96581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, (-1)), 'unicode', u'\n    The VPacker has its children packed vertically. It automatically\n    adjust the relative positions of children in the drawing time.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 335)
        None_96582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 27), 'None')
        # Getting the type of 'None' (line 335)
        None_96583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 37), 'None')
        # Getting the type of 'None' (line 335)
        None_96584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 49), 'None')
        # Getting the type of 'None' (line 335)
        None_96585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 62), 'None')
        unicode_96586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 336, 23), 'unicode', u'baseline')
        unicode_96587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 336, 40), 'unicode', u'fixed')
        # Getting the type of 'None' (line 337)
        None_96588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 26), 'None')
        defaults = [None_96582, None_96583, None_96584, None_96585, unicode_96586, unicode_96587, None_96588]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 335, 4, False)
        # Assigning a type to the variable 'self' (line 336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'VPacker.__init__', ['pad', 'sep', 'width', 'height', 'align', 'mode', 'children'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['pad', 'sep', 'width', 'height', 'align', 'mode', 'children'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_96589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, (-1)), 'unicode', u'\n        Parameters\n        ----------\n        pad : float, optional\n            Boundary pad.\n\n        sep : float, optional\n            Spacing between items.\n\n        width : float, optional\n\n        height : float, optional\n\n            width and height of the container box, calculated if\n            `None`.\n\n        align : str, optional\n            Alignment of boxes.\n\n        mode : str, optional\n            Packing mode.\n\n        Notes\n        -----\n        *pad* and *sep* need to given in points and will be scale with\n        the renderer dpi, while *width* and *height* need to be in\n        pixels.\n        ')
        
        # Call to __init__(...): (line 366)
        # Processing the call arguments (line 366)
        # Getting the type of 'pad' (line 366)
        pad_96596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 38), 'pad', False)
        # Getting the type of 'sep' (line 366)
        sep_96597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 43), 'sep', False)
        # Getting the type of 'width' (line 366)
        width_96598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 48), 'width', False)
        # Getting the type of 'height' (line 366)
        height_96599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 55), 'height', False)
        # Getting the type of 'align' (line 367)
        align_96600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 38), 'align', False)
        # Getting the type of 'mode' (line 367)
        mode_96601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 45), 'mode', False)
        # Getting the type of 'children' (line 368)
        children_96602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 38), 'children', False)
        # Processing the call keyword arguments (line 366)
        kwargs_96603 = {}
        
        # Call to super(...): (line 366)
        # Processing the call arguments (line 366)
        # Getting the type of 'VPacker' (line 366)
        VPacker_96591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 14), 'VPacker', False)
        # Getting the type of 'self' (line 366)
        self_96592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 23), 'self', False)
        # Processing the call keyword arguments (line 366)
        kwargs_96593 = {}
        # Getting the type of 'super' (line 366)
        super_96590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 8), 'super', False)
        # Calling super(args, kwargs) (line 366)
        super_call_result_96594 = invoke(stypy.reporting.localization.Localization(__file__, 366, 8), super_96590, *[VPacker_96591, self_96592], **kwargs_96593)
        
        # Obtaining the member '__init__' of a type (line 366)
        init___96595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 8), super_call_result_96594, '__init__')
        # Calling __init__(args, kwargs) (line 366)
        init___call_result_96604 = invoke(stypy.reporting.localization.Localization(__file__, 366, 8), init___96595, *[pad_96596, sep_96597, width_96598, height_96599, align_96600, mode_96601, children_96602], **kwargs_96603)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_extent_offsets(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_extent_offsets'
        module_type_store = module_type_store.open_function_context('get_extent_offsets', 370, 4, False)
        # Assigning a type to the variable 'self' (line 371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        VPacker.get_extent_offsets.__dict__.__setitem__('stypy_localization', localization)
        VPacker.get_extent_offsets.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        VPacker.get_extent_offsets.__dict__.__setitem__('stypy_type_store', module_type_store)
        VPacker.get_extent_offsets.__dict__.__setitem__('stypy_function_name', 'VPacker.get_extent_offsets')
        VPacker.get_extent_offsets.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        VPacker.get_extent_offsets.__dict__.__setitem__('stypy_varargs_param_name', None)
        VPacker.get_extent_offsets.__dict__.__setitem__('stypy_kwargs_param_name', None)
        VPacker.get_extent_offsets.__dict__.__setitem__('stypy_call_defaults', defaults)
        VPacker.get_extent_offsets.__dict__.__setitem__('stypy_call_varargs', varargs)
        VPacker.get_extent_offsets.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        VPacker.get_extent_offsets.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'VPacker.get_extent_offsets', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_extent_offsets', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_extent_offsets(...)' code ##################

        unicode_96605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, (-1)), 'unicode', u'\n        update offset of childrens and return the extents of the box\n        ')
        
        # Assigning a Call to a Name (line 375):
        
        # Assigning a Call to a Name (line 375):
        
        # Call to points_to_pixels(...): (line 375)
        # Processing the call arguments (line 375)
        float_96608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 43), 'float')
        # Processing the call keyword arguments (line 375)
        kwargs_96609 = {}
        # Getting the type of 'renderer' (line 375)
        renderer_96606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 17), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 375)
        points_to_pixels_96607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 17), renderer_96606, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 375)
        points_to_pixels_call_result_96610 = invoke(stypy.reporting.localization.Localization(__file__, 375, 17), points_to_pixels_96607, *[float_96608], **kwargs_96609)
        
        # Assigning a type to the variable 'dpicor' (line 375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 8), 'dpicor', points_to_pixels_call_result_96610)
        
        # Assigning a BinOp to a Name (line 376):
        
        # Assigning a BinOp to a Name (line 376):
        # Getting the type of 'self' (line 376)
        self_96611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 14), 'self')
        # Obtaining the member 'pad' of a type (line 376)
        pad_96612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 14), self_96611, 'pad')
        # Getting the type of 'dpicor' (line 376)
        dpicor_96613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 25), 'dpicor')
        # Applying the binary operator '*' (line 376)
        result_mul_96614 = python_operator(stypy.reporting.localization.Localization(__file__, 376, 14), '*', pad_96612, dpicor_96613)
        
        # Assigning a type to the variable 'pad' (line 376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 8), 'pad', result_mul_96614)
        
        # Assigning a BinOp to a Name (line 377):
        
        # Assigning a BinOp to a Name (line 377):
        # Getting the type of 'self' (line 377)
        self_96615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 14), 'self')
        # Obtaining the member 'sep' of a type (line 377)
        sep_96616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 14), self_96615, 'sep')
        # Getting the type of 'dpicor' (line 377)
        dpicor_96617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 25), 'dpicor')
        # Applying the binary operator '*' (line 377)
        result_mul_96618 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 14), '*', sep_96616, dpicor_96617)
        
        # Assigning a type to the variable 'sep' (line 377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'sep', result_mul_96618)
        
        
        # Getting the type of 'self' (line 379)
        self_96619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 11), 'self')
        # Obtaining the member 'width' of a type (line 379)
        width_96620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 11), self_96619, 'width')
        # Getting the type of 'None' (line 379)
        None_96621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 29), 'None')
        # Applying the binary operator 'isnot' (line 379)
        result_is_not_96622 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 11), 'isnot', width_96620, None_96621)
        
        # Testing the type of an if condition (line 379)
        if_condition_96623 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 379, 8), result_is_not_96622)
        # Assigning a type to the variable 'if_condition_96623' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 8), 'if_condition_96623', if_condition_96623)
        # SSA begins for if statement (line 379)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to get_visible_children(...): (line 380)
        # Processing the call keyword arguments (line 380)
        kwargs_96626 = {}
        # Getting the type of 'self' (line 380)
        self_96624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 21), 'self', False)
        # Obtaining the member 'get_visible_children' of a type (line 380)
        get_visible_children_96625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 380, 21), self_96624, 'get_visible_children')
        # Calling get_visible_children(args, kwargs) (line 380)
        get_visible_children_call_result_96627 = invoke(stypy.reporting.localization.Localization(__file__, 380, 21), get_visible_children_96625, *[], **kwargs_96626)
        
        # Testing the type of a for loop iterable (line 380)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 380, 12), get_visible_children_call_result_96627)
        # Getting the type of the for loop variable (line 380)
        for_loop_var_96628 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 380, 12), get_visible_children_call_result_96627)
        # Assigning a type to the variable 'c' (line 380)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 12), 'c', for_loop_var_96628)
        # SSA begins for a for statement (line 380)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 381)
        # Processing the call arguments (line 381)
        # Getting the type of 'c' (line 381)
        c_96630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 30), 'c', False)
        # Getting the type of 'PackerBase' (line 381)
        PackerBase_96631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 33), 'PackerBase', False)
        # Processing the call keyword arguments (line 381)
        kwargs_96632 = {}
        # Getting the type of 'isinstance' (line 381)
        isinstance_96629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 19), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 381)
        isinstance_call_result_96633 = invoke(stypy.reporting.localization.Localization(__file__, 381, 19), isinstance_96629, *[c_96630, PackerBase_96631], **kwargs_96632)
        
        
        # Getting the type of 'c' (line 381)
        c_96634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 49), 'c')
        # Obtaining the member 'mode' of a type (line 381)
        mode_96635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 381, 49), c_96634, 'mode')
        unicode_96636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 381, 59), 'unicode', u'expand')
        # Applying the binary operator '==' (line 381)
        result_eq_96637 = python_operator(stypy.reporting.localization.Localization(__file__, 381, 49), '==', mode_96635, unicode_96636)
        
        # Applying the binary operator 'and' (line 381)
        result_and_keyword_96638 = python_operator(stypy.reporting.localization.Localization(__file__, 381, 19), 'and', isinstance_call_result_96633, result_eq_96637)
        
        # Testing the type of an if condition (line 381)
        if_condition_96639 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 381, 16), result_and_keyword_96638)
        # Assigning a type to the variable 'if_condition_96639' (line 381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 16), 'if_condition_96639', if_condition_96639)
        # SSA begins for if statement (line 381)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_width(...): (line 382)
        # Processing the call arguments (line 382)
        # Getting the type of 'self' (line 382)
        self_96642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 32), 'self', False)
        # Obtaining the member 'width' of a type (line 382)
        width_96643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 382, 32), self_96642, 'width')
        # Processing the call keyword arguments (line 382)
        kwargs_96644 = {}
        # Getting the type of 'c' (line 382)
        c_96640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 20), 'c', False)
        # Obtaining the member 'set_width' of a type (line 382)
        set_width_96641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 382, 20), c_96640, 'set_width')
        # Calling set_width(args, kwargs) (line 382)
        set_width_call_result_96645 = invoke(stypy.reporting.localization.Localization(__file__, 382, 20), set_width_96641, *[width_96643], **kwargs_96644)
        
        # SSA join for if statement (line 381)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 379)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a ListComp to a Name (line 384):
        
        # Assigning a ListComp to a Name (line 384):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to get_visible_children(...): (line 385)
        # Processing the call keyword arguments (line 385)
        kwargs_96653 = {}
        # Getting the type of 'self' (line 385)
        self_96651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 29), 'self', False)
        # Obtaining the member 'get_visible_children' of a type (line 385)
        get_visible_children_96652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 29), self_96651, 'get_visible_children')
        # Calling get_visible_children(args, kwargs) (line 385)
        get_visible_children_call_result_96654 = invoke(stypy.reporting.localization.Localization(__file__, 385, 29), get_visible_children_96652, *[], **kwargs_96653)
        
        comprehension_96655 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 384, 20), get_visible_children_call_result_96654)
        # Assigning a type to the variable 'c' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 20), 'c', comprehension_96655)
        
        # Call to get_extent(...): (line 384)
        # Processing the call arguments (line 384)
        # Getting the type of 'renderer' (line 384)
        renderer_96648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 33), 'renderer', False)
        # Processing the call keyword arguments (line 384)
        kwargs_96649 = {}
        # Getting the type of 'c' (line 384)
        c_96646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 20), 'c', False)
        # Obtaining the member 'get_extent' of a type (line 384)
        get_extent_96647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 20), c_96646, 'get_extent')
        # Calling get_extent(args, kwargs) (line 384)
        get_extent_call_result_96650 = invoke(stypy.reporting.localization.Localization(__file__, 384, 20), get_extent_96647, *[renderer_96648], **kwargs_96649)
        
        list_96656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 20), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 384, 20), list_96656, get_extent_call_result_96650)
        # Assigning a type to the variable 'whd_list' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'whd_list', list_96656)
        
        # Assigning a ListComp to a Name (line 386):
        
        # Assigning a ListComp to a Name (line 386):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'whd_list' (line 386)
        whd_list_96664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 61), 'whd_list')
        comprehension_96665 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 386, 20), whd_list_96664)
        # Assigning a type to the variable 'w' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 20), 'w', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 386, 20), comprehension_96665))
        # Assigning a type to the variable 'h' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 20), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 386, 20), comprehension_96665))
        # Assigning a type to the variable 'xd' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 20), 'xd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 386, 20), comprehension_96665))
        # Assigning a type to the variable 'yd' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 20), 'yd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 386, 20), comprehension_96665))
        
        # Obtaining an instance of the builtin type 'tuple' (line 386)
        tuple_96657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 386)
        # Adding element type (line 386)
        # Getting the type of 'w' (line 386)
        w_96658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 21), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 386, 21), tuple_96657, w_96658)
        # Adding element type (line 386)
        # Getting the type of 'h' (line 386)
        h_96659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 24), 'h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 386, 21), tuple_96657, h_96659)
        # Adding element type (line 386)
        # Getting the type of 'xd' (line 386)
        xd_96660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 27), 'xd')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 386, 21), tuple_96657, xd_96660)
        # Adding element type (line 386)
        # Getting the type of 'h' (line 386)
        h_96661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 32), 'h')
        # Getting the type of 'yd' (line 386)
        yd_96662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 36), 'yd')
        # Applying the binary operator '-' (line 386)
        result_sub_96663 = python_operator(stypy.reporting.localization.Localization(__file__, 386, 32), '-', h_96661, yd_96662)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 386, 21), tuple_96657, result_sub_96663)
        
        list_96666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 20), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 386, 20), list_96666, tuple_96657)
        # Assigning a type to the variable 'whd_list' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 8), 'whd_list', list_96666)
        
        # Assigning a ListComp to a Name (line 388):
        
        # Assigning a ListComp to a Name (line 388):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'whd_list' (line 388)
        whd_list_96670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 47), 'whd_list')
        comprehension_96671 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 388, 19), whd_list_96670)
        # Assigning a type to the variable 'w' (line 388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 19), 'w', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 388, 19), comprehension_96671))
        # Assigning a type to the variable 'h' (line 388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 19), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 388, 19), comprehension_96671))
        # Assigning a type to the variable 'xd' (line 388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 19), 'xd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 388, 19), comprehension_96671))
        # Assigning a type to the variable 'yd' (line 388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 19), 'yd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 388, 19), comprehension_96671))
        
        # Obtaining an instance of the builtin type 'tuple' (line 388)
        tuple_96667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 388)
        # Adding element type (line 388)
        # Getting the type of 'w' (line 388)
        w_96668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 20), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 388, 20), tuple_96667, w_96668)
        # Adding element type (line 388)
        # Getting the type of 'xd' (line 388)
        xd_96669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 23), 'xd')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 388, 20), tuple_96667, xd_96669)
        
        list_96672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 19), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 388, 19), list_96672, tuple_96667)
        # Assigning a type to the variable 'wd_list' (line 388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 8), 'wd_list', list_96672)
        
        # Assigning a Call to a Tuple (line 389):
        
        # Assigning a Call to a Name:
        
        # Call to _get_aligned_offsets(...): (line 389)
        # Processing the call arguments (line 389)
        # Getting the type of 'wd_list' (line 389)
        wd_list_96674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 57), 'wd_list', False)
        # Getting the type of 'self' (line 390)
        self_96675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 57), 'self', False)
        # Obtaining the member 'width' of a type (line 390)
        width_96676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 57), self_96675, 'width')
        # Getting the type of 'self' (line 391)
        self_96677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 57), 'self', False)
        # Obtaining the member 'align' of a type (line 391)
        align_96678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 57), self_96677, 'align')
        # Processing the call keyword arguments (line 389)
        kwargs_96679 = {}
        # Getting the type of '_get_aligned_offsets' (line 389)
        _get_aligned_offsets_96673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 36), '_get_aligned_offsets', False)
        # Calling _get_aligned_offsets(args, kwargs) (line 389)
        _get_aligned_offsets_call_result_96680 = invoke(stypy.reporting.localization.Localization(__file__, 389, 36), _get_aligned_offsets_96673, *[wd_list_96674, width_96676, align_96678], **kwargs_96679)
        
        # Assigning a type to the variable 'call_assignment_95697' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'call_assignment_95697', _get_aligned_offsets_call_result_96680)
        
        # Assigning a Call to a Name (line 389):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96684 = {}
        # Getting the type of 'call_assignment_95697' (line 389)
        call_assignment_95697_96681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'call_assignment_95697', False)
        # Obtaining the member '__getitem__' of a type (line 389)
        getitem___96682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 8), call_assignment_95697_96681, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96685 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96682, *[int_96683], **kwargs_96684)
        
        # Assigning a type to the variable 'call_assignment_95698' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'call_assignment_95698', getitem___call_result_96685)
        
        # Assigning a Name to a Name (line 389):
        # Getting the type of 'call_assignment_95698' (line 389)
        call_assignment_95698_96686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'call_assignment_95698')
        # Assigning a type to the variable 'width' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'width', call_assignment_95698_96686)
        
        # Assigning a Call to a Name (line 389):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96690 = {}
        # Getting the type of 'call_assignment_95697' (line 389)
        call_assignment_95697_96687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'call_assignment_95697', False)
        # Obtaining the member '__getitem__' of a type (line 389)
        getitem___96688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 8), call_assignment_95697_96687, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96691 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96688, *[int_96689], **kwargs_96690)
        
        # Assigning a type to the variable 'call_assignment_95699' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'call_assignment_95699', getitem___call_result_96691)
        
        # Assigning a Name to a Name (line 389):
        # Getting the type of 'call_assignment_95699' (line 389)
        call_assignment_95699_96692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'call_assignment_95699')
        # Assigning a type to the variable 'xdescent' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 15), 'xdescent', call_assignment_95699_96692)
        
        # Assigning a Call to a Name (line 389):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96696 = {}
        # Getting the type of 'call_assignment_95697' (line 389)
        call_assignment_95697_96693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'call_assignment_95697', False)
        # Obtaining the member '__getitem__' of a type (line 389)
        getitem___96694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 8), call_assignment_95697_96693, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96697 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96694, *[int_96695], **kwargs_96696)
        
        # Assigning a type to the variable 'call_assignment_95700' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'call_assignment_95700', getitem___call_result_96697)
        
        # Assigning a Name to a Name (line 389):
        # Getting the type of 'call_assignment_95700' (line 389)
        call_assignment_95700_96698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'call_assignment_95700')
        # Assigning a type to the variable 'xoffsets' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 25), 'xoffsets', call_assignment_95700_96698)
        
        # Assigning a ListComp to a Name (line 393):
        
        # Assigning a ListComp to a Name (line 393):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'whd_list' (line 393)
        whd_list_96702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 49), 'whd_list')
        comprehension_96703 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 393, 21), whd_list_96702)
        # Assigning a type to the variable 'w' (line 393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 21), 'w', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 393, 21), comprehension_96703))
        # Assigning a type to the variable 'h' (line 393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 21), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 393, 21), comprehension_96703))
        # Assigning a type to the variable 'xd' (line 393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 21), 'xd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 393, 21), comprehension_96703))
        # Assigning a type to the variable 'yd' (line 393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 21), 'yd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 393, 21), comprehension_96703))
        
        # Obtaining an instance of the builtin type 'tuple' (line 393)
        tuple_96699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 393)
        # Adding element type (line 393)
        # Getting the type of 'h' (line 393)
        h_96700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 22), 'h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 393, 22), tuple_96699, h_96700)
        # Adding element type (line 393)
        # Getting the type of 'yd' (line 393)
        yd_96701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 25), 'yd')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 393, 22), tuple_96699, yd_96701)
        
        list_96704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 393, 21), list_96704, tuple_96699)
        # Assigning a type to the variable 'pack_list' (line 393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'pack_list', list_96704)
        
        # Assigning a Call to a Tuple (line 394):
        
        # Assigning a Call to a Name:
        
        # Call to _get_packed_offsets(...): (line 394)
        # Processing the call arguments (line 394)
        # Getting the type of 'pack_list' (line 394)
        pack_list_96706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 48), 'pack_list', False)
        # Getting the type of 'self' (line 394)
        self_96707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 59), 'self', False)
        # Obtaining the member 'height' of a type (line 394)
        height_96708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 59), self_96707, 'height')
        # Getting the type of 'sep' (line 395)
        sep_96709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 48), 'sep', False)
        # Getting the type of 'self' (line 395)
        self_96710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 53), 'self', False)
        # Obtaining the member 'mode' of a type (line 395)
        mode_96711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 395, 53), self_96710, 'mode')
        # Processing the call keyword arguments (line 394)
        kwargs_96712 = {}
        # Getting the type of '_get_packed_offsets' (line 394)
        _get_packed_offsets_96705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 28), '_get_packed_offsets', False)
        # Calling _get_packed_offsets(args, kwargs) (line 394)
        _get_packed_offsets_call_result_96713 = invoke(stypy.reporting.localization.Localization(__file__, 394, 28), _get_packed_offsets_96705, *[pack_list_96706, height_96708, sep_96709, mode_96711], **kwargs_96712)
        
        # Assigning a type to the variable 'call_assignment_95701' (line 394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'call_assignment_95701', _get_packed_offsets_call_result_96713)
        
        # Assigning a Call to a Name (line 394):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96717 = {}
        # Getting the type of 'call_assignment_95701' (line 394)
        call_assignment_95701_96714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'call_assignment_95701', False)
        # Obtaining the member '__getitem__' of a type (line 394)
        getitem___96715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 8), call_assignment_95701_96714, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96718 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96715, *[int_96716], **kwargs_96717)
        
        # Assigning a type to the variable 'call_assignment_95702' (line 394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'call_assignment_95702', getitem___call_result_96718)
        
        # Assigning a Name to a Name (line 394):
        # Getting the type of 'call_assignment_95702' (line 394)
        call_assignment_95702_96719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'call_assignment_95702')
        # Assigning a type to the variable 'height' (line 394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'height', call_assignment_95702_96719)
        
        # Assigning a Call to a Name (line 394):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96723 = {}
        # Getting the type of 'call_assignment_95701' (line 394)
        call_assignment_95701_96720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'call_assignment_95701', False)
        # Obtaining the member '__getitem__' of a type (line 394)
        getitem___96721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 8), call_assignment_95701_96720, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96724 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96721, *[int_96722], **kwargs_96723)
        
        # Assigning a type to the variable 'call_assignment_95703' (line 394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'call_assignment_95703', getitem___call_result_96724)
        
        # Assigning a Name to a Name (line 394):
        # Getting the type of 'call_assignment_95703' (line 394)
        call_assignment_95703_96725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'call_assignment_95703')
        # Assigning a type to the variable 'yoffsets_' (line 394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 16), 'yoffsets_', call_assignment_95703_96725)
        
        # Assigning a BinOp to a Name (line 397):
        
        # Assigning a BinOp to a Name (line 397):
        # Getting the type of 'yoffsets_' (line 397)
        yoffsets__96726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 19), 'yoffsets_')
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'whd_list' (line 397)
        whd_list_96728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 55), 'whd_list')
        comprehension_96729 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 32), whd_list_96728)
        # Assigning a type to the variable 'w' (line 397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 32), 'w', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 32), comprehension_96729))
        # Assigning a type to the variable 'h' (line 397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 32), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 32), comprehension_96729))
        # Assigning a type to the variable 'xd' (line 397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 32), 'xd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 32), comprehension_96729))
        # Assigning a type to the variable 'yd' (line 397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 32), 'yd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 32), comprehension_96729))
        # Getting the type of 'yd' (line 397)
        yd_96727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 32), 'yd')
        list_96730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 32), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 32), list_96730, yd_96727)
        # Applying the binary operator '+' (line 397)
        result_add_96731 = python_operator(stypy.reporting.localization.Localization(__file__, 397, 19), '+', yoffsets__96726, list_96730)
        
        # Assigning a type to the variable 'yoffsets' (line 397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 8), 'yoffsets', result_add_96731)
        
        # Assigning a BinOp to a Name (line 398):
        
        # Assigning a BinOp to a Name (line 398):
        # Getting the type of 'height' (line 398)
        height_96732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 19), 'height')
        
        # Obtaining the type of the subscript
        int_96733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 398, 37), 'int')
        # Getting the type of 'yoffsets' (line 398)
        yoffsets_96734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 28), 'yoffsets')
        # Obtaining the member '__getitem__' of a type (line 398)
        getitem___96735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 398, 28), yoffsets_96734, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 398)
        subscript_call_result_96736 = invoke(stypy.reporting.localization.Localization(__file__, 398, 28), getitem___96735, int_96733)
        
        # Applying the binary operator '-' (line 398)
        result_sub_96737 = python_operator(stypy.reporting.localization.Localization(__file__, 398, 19), '-', height_96732, subscript_call_result_96736)
        
        # Assigning a type to the variable 'ydescent' (line 398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 8), 'ydescent', result_sub_96737)
        
        # Assigning a BinOp to a Name (line 399):
        
        # Assigning a BinOp to a Name (line 399):
        # Getting the type of 'height' (line 399)
        height_96738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 19), 'height')
        # Getting the type of 'yoffsets' (line 399)
        yoffsets_96739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 28), 'yoffsets')
        # Applying the binary operator '-' (line 399)
        result_sub_96740 = python_operator(stypy.reporting.localization.Localization(__file__, 399, 19), '-', height_96738, yoffsets_96739)
        
        # Assigning a type to the variable 'yoffsets' (line 399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 399, 8), 'yoffsets', result_sub_96740)
        
        # Assigning a BinOp to a Name (line 402):
        
        # Assigning a BinOp to a Name (line 402):
        # Getting the type of 'yoffsets' (line 402)
        yoffsets_96741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 19), 'yoffsets')
        # Getting the type of 'ydescent' (line 402)
        ydescent_96742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 30), 'ydescent')
        # Applying the binary operator '-' (line 402)
        result_sub_96743 = python_operator(stypy.reporting.localization.Localization(__file__, 402, 19), '-', yoffsets_96741, ydescent_96742)
        
        # Assigning a type to the variable 'yoffsets' (line 402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 8), 'yoffsets', result_sub_96743)
        
        # Obtaining an instance of the builtin type 'tuple' (line 404)
        tuple_96744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 404)
        # Adding element type (line 404)
        # Getting the type of 'width' (line 404)
        width_96745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 15), 'width')
        int_96746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, 23), 'int')
        # Getting the type of 'pad' (line 404)
        pad_96747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 27), 'pad')
        # Applying the binary operator '*' (line 404)
        result_mul_96748 = python_operator(stypy.reporting.localization.Localization(__file__, 404, 23), '*', int_96746, pad_96747)
        
        # Applying the binary operator '+' (line 404)
        result_add_96749 = python_operator(stypy.reporting.localization.Localization(__file__, 404, 15), '+', width_96745, result_mul_96748)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 404, 15), tuple_96744, result_add_96749)
        # Adding element type (line 404)
        # Getting the type of 'height' (line 404)
        height_96750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 32), 'height')
        int_96751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, 41), 'int')
        # Getting the type of 'pad' (line 404)
        pad_96752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 45), 'pad')
        # Applying the binary operator '*' (line 404)
        result_mul_96753 = python_operator(stypy.reporting.localization.Localization(__file__, 404, 41), '*', int_96751, pad_96752)
        
        # Applying the binary operator '+' (line 404)
        result_add_96754 = python_operator(stypy.reporting.localization.Localization(__file__, 404, 32), '+', height_96750, result_mul_96753)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 404, 15), tuple_96744, result_add_96754)
        # Adding element type (line 404)
        # Getting the type of 'xdescent' (line 405)
        xdescent_96755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 15), 'xdescent')
        # Getting the type of 'pad' (line 405)
        pad_96756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 26), 'pad')
        # Applying the binary operator '+' (line 405)
        result_add_96757 = python_operator(stypy.reporting.localization.Localization(__file__, 405, 15), '+', xdescent_96755, pad_96756)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 404, 15), tuple_96744, result_add_96757)
        # Adding element type (line 404)
        # Getting the type of 'ydescent' (line 405)
        ydescent_96758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 31), 'ydescent')
        # Getting the type of 'pad' (line 405)
        pad_96759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 42), 'pad')
        # Applying the binary operator '+' (line 405)
        result_add_96760 = python_operator(stypy.reporting.localization.Localization(__file__, 405, 31), '+', ydescent_96758, pad_96759)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 404, 15), tuple_96744, result_add_96760)
        # Adding element type (line 404)
        
        # Call to list(...): (line 406)
        # Processing the call arguments (line 406)
        
        # Call to zip(...): (line 406)
        # Processing the call arguments (line 406)
        # Getting the type of 'xoffsets' (line 406)
        xoffsets_96763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 24), 'xoffsets', False)
        # Getting the type of 'yoffsets' (line 406)
        yoffsets_96764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 34), 'yoffsets', False)
        # Processing the call keyword arguments (line 406)
        kwargs_96765 = {}
        # Getting the type of 'zip' (line 406)
        zip_96762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 20), 'zip', False)
        # Calling zip(args, kwargs) (line 406)
        zip_call_result_96766 = invoke(stypy.reporting.localization.Localization(__file__, 406, 20), zip_96762, *[xoffsets_96763, yoffsets_96764], **kwargs_96765)
        
        # Processing the call keyword arguments (line 406)
        kwargs_96767 = {}
        # Getting the type of 'list' (line 406)
        list_96761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 15), 'list', False)
        # Calling list(args, kwargs) (line 406)
        list_call_result_96768 = invoke(stypy.reporting.localization.Localization(__file__, 406, 15), list_96761, *[zip_call_result_96766], **kwargs_96767)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 404, 15), tuple_96744, list_call_result_96768)
        
        # Assigning a type to the variable 'stypy_return_type' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 8), 'stypy_return_type', tuple_96744)
        
        # ################# End of 'get_extent_offsets(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_extent_offsets' in the type store
        # Getting the type of 'stypy_return_type' (line 370)
        stypy_return_type_96769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96769)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_extent_offsets'
        return stypy_return_type_96769


# Assigning a type to the variable 'VPacker' (line 330)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 330, 0), 'VPacker', VPacker)
# Declaration of the 'HPacker' class
# Getting the type of 'PackerBase' (line 409)
PackerBase_96770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 14), 'PackerBase')

class HPacker(PackerBase_96770, ):
    unicode_96771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 413, (-1)), 'unicode', u'\n    The HPacker has its children packed horizontally. It automatically\n    adjusts the relative positions of children at draw time.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 414)
        None_96772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 27), 'None')
        # Getting the type of 'None' (line 414)
        None_96773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 37), 'None')
        # Getting the type of 'None' (line 414)
        None_96774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 49), 'None')
        # Getting the type of 'None' (line 414)
        None_96775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 62), 'None')
        unicode_96776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 415, 23), 'unicode', u'baseline')
        unicode_96777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 415, 40), 'unicode', u'fixed')
        # Getting the type of 'None' (line 416)
        None_96778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 26), 'None')
        defaults = [None_96772, None_96773, None_96774, None_96775, unicode_96776, unicode_96777, None_96778]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 414, 4, False)
        # Assigning a type to the variable 'self' (line 415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 415, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'HPacker.__init__', ['pad', 'sep', 'width', 'height', 'align', 'mode', 'children'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['pad', 'sep', 'width', 'height', 'align', 'mode', 'children'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_96779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 443, (-1)), 'unicode', u'\n        Parameters\n        ----------\n        pad : float, optional\n            Boundary pad.\n\n        sep : float, optional\n            Spacing between items.\n\n        width : float, optional\n\n        height : float, optional\n           Width and height of the container box, calculated if\n           `None`.\n\n        align : str\n           Alignment of boxes.\n\n        mode : str\n           Packing mode.\n\n        Notes\n        -----\n        *pad* and *sep* need to given in points and will be scale with\n        the renderer dpi, while *width* and *height* need to be in\n        pixels.\n        ')
        
        # Call to __init__(...): (line 444)
        # Processing the call arguments (line 444)
        # Getting the type of 'pad' (line 444)
        pad_96786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 38), 'pad', False)
        # Getting the type of 'sep' (line 444)
        sep_96787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 43), 'sep', False)
        # Getting the type of 'width' (line 444)
        width_96788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 48), 'width', False)
        # Getting the type of 'height' (line 444)
        height_96789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 55), 'height', False)
        # Getting the type of 'align' (line 445)
        align_96790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 38), 'align', False)
        # Getting the type of 'mode' (line 445)
        mode_96791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 45), 'mode', False)
        # Getting the type of 'children' (line 445)
        children_96792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 51), 'children', False)
        # Processing the call keyword arguments (line 444)
        kwargs_96793 = {}
        
        # Call to super(...): (line 444)
        # Processing the call arguments (line 444)
        # Getting the type of 'HPacker' (line 444)
        HPacker_96781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 14), 'HPacker', False)
        # Getting the type of 'self' (line 444)
        self_96782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 23), 'self', False)
        # Processing the call keyword arguments (line 444)
        kwargs_96783 = {}
        # Getting the type of 'super' (line 444)
        super_96780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'super', False)
        # Calling super(args, kwargs) (line 444)
        super_call_result_96784 = invoke(stypy.reporting.localization.Localization(__file__, 444, 8), super_96780, *[HPacker_96781, self_96782], **kwargs_96783)
        
        # Obtaining the member '__init__' of a type (line 444)
        init___96785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 8), super_call_result_96784, '__init__')
        # Calling __init__(args, kwargs) (line 444)
        init___call_result_96794 = invoke(stypy.reporting.localization.Localization(__file__, 444, 8), init___96785, *[pad_96786, sep_96787, width_96788, height_96789, align_96790, mode_96791, children_96792], **kwargs_96793)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_extent_offsets(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_extent_offsets'
        module_type_store = module_type_store.open_function_context('get_extent_offsets', 447, 4, False)
        # Assigning a type to the variable 'self' (line 448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        HPacker.get_extent_offsets.__dict__.__setitem__('stypy_localization', localization)
        HPacker.get_extent_offsets.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        HPacker.get_extent_offsets.__dict__.__setitem__('stypy_type_store', module_type_store)
        HPacker.get_extent_offsets.__dict__.__setitem__('stypy_function_name', 'HPacker.get_extent_offsets')
        HPacker.get_extent_offsets.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        HPacker.get_extent_offsets.__dict__.__setitem__('stypy_varargs_param_name', None)
        HPacker.get_extent_offsets.__dict__.__setitem__('stypy_kwargs_param_name', None)
        HPacker.get_extent_offsets.__dict__.__setitem__('stypy_call_defaults', defaults)
        HPacker.get_extent_offsets.__dict__.__setitem__('stypy_call_varargs', varargs)
        HPacker.get_extent_offsets.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        HPacker.get_extent_offsets.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'HPacker.get_extent_offsets', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_extent_offsets', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_extent_offsets(...)' code ##################

        unicode_96795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, (-1)), 'unicode', u'\n        update offset of children and return the extents of the box\n        ')
        
        # Assigning a Call to a Name (line 451):
        
        # Assigning a Call to a Name (line 451):
        
        # Call to points_to_pixels(...): (line 451)
        # Processing the call arguments (line 451)
        float_96798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 451, 43), 'float')
        # Processing the call keyword arguments (line 451)
        kwargs_96799 = {}
        # Getting the type of 'renderer' (line 451)
        renderer_96796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 17), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 451)
        points_to_pixels_96797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 451, 17), renderer_96796, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 451)
        points_to_pixels_call_result_96800 = invoke(stypy.reporting.localization.Localization(__file__, 451, 17), points_to_pixels_96797, *[float_96798], **kwargs_96799)
        
        # Assigning a type to the variable 'dpicor' (line 451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 8), 'dpicor', points_to_pixels_call_result_96800)
        
        # Assigning a BinOp to a Name (line 452):
        
        # Assigning a BinOp to a Name (line 452):
        # Getting the type of 'self' (line 452)
        self_96801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 14), 'self')
        # Obtaining the member 'pad' of a type (line 452)
        pad_96802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 452, 14), self_96801, 'pad')
        # Getting the type of 'dpicor' (line 452)
        dpicor_96803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 25), 'dpicor')
        # Applying the binary operator '*' (line 452)
        result_mul_96804 = python_operator(stypy.reporting.localization.Localization(__file__, 452, 14), '*', pad_96802, dpicor_96803)
        
        # Assigning a type to the variable 'pad' (line 452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 8), 'pad', result_mul_96804)
        
        # Assigning a BinOp to a Name (line 453):
        
        # Assigning a BinOp to a Name (line 453):
        # Getting the type of 'self' (line 453)
        self_96805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 14), 'self')
        # Obtaining the member 'sep' of a type (line 453)
        sep_96806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 14), self_96805, 'sep')
        # Getting the type of 'dpicor' (line 453)
        dpicor_96807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 25), 'dpicor')
        # Applying the binary operator '*' (line 453)
        result_mul_96808 = python_operator(stypy.reporting.localization.Localization(__file__, 453, 14), '*', sep_96806, dpicor_96807)
        
        # Assigning a type to the variable 'sep' (line 453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 453, 8), 'sep', result_mul_96808)
        
        # Assigning a ListComp to a Name (line 455):
        
        # Assigning a ListComp to a Name (line 455):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to get_visible_children(...): (line 456)
        # Processing the call keyword arguments (line 456)
        kwargs_96816 = {}
        # Getting the type of 'self' (line 456)
        self_96814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 29), 'self', False)
        # Obtaining the member 'get_visible_children' of a type (line 456)
        get_visible_children_96815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 456, 29), self_96814, 'get_visible_children')
        # Calling get_visible_children(args, kwargs) (line 456)
        get_visible_children_call_result_96817 = invoke(stypy.reporting.localization.Localization(__file__, 456, 29), get_visible_children_96815, *[], **kwargs_96816)
        
        comprehension_96818 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 20), get_visible_children_call_result_96817)
        # Assigning a type to the variable 'c' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 20), 'c', comprehension_96818)
        
        # Call to get_extent(...): (line 455)
        # Processing the call arguments (line 455)
        # Getting the type of 'renderer' (line 455)
        renderer_96811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 33), 'renderer', False)
        # Processing the call keyword arguments (line 455)
        kwargs_96812 = {}
        # Getting the type of 'c' (line 455)
        c_96809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 20), 'c', False)
        # Obtaining the member 'get_extent' of a type (line 455)
        get_extent_96810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 20), c_96809, 'get_extent')
        # Calling get_extent(args, kwargs) (line 455)
        get_extent_call_result_96813 = invoke(stypy.reporting.localization.Localization(__file__, 455, 20), get_extent_96810, *[renderer_96811], **kwargs_96812)
        
        list_96819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 455, 20), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 20), list_96819, get_extent_call_result_96813)
        # Assigning a type to the variable 'whd_list' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 8), 'whd_list', list_96819)
        
        
        # Getting the type of 'whd_list' (line 458)
        whd_list_96820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 15), 'whd_list')
        # Applying the 'not' unary operator (line 458)
        result_not__96821 = python_operator(stypy.reporting.localization.Localization(__file__, 458, 11), 'not', whd_list_96820)
        
        # Testing the type of an if condition (line 458)
        if_condition_96822 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 458, 8), result_not__96821)
        # Assigning a type to the variable 'if_condition_96822' (line 458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 458, 8), 'if_condition_96822', if_condition_96822)
        # SSA begins for if statement (line 458)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 459)
        tuple_96823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 459)
        # Adding element type (line 459)
        int_96824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, 19), 'int')
        # Getting the type of 'pad' (line 459)
        pad_96825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 23), 'pad')
        # Applying the binary operator '*' (line 459)
        result_mul_96826 = python_operator(stypy.reporting.localization.Localization(__file__, 459, 19), '*', int_96824, pad_96825)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 459, 19), tuple_96823, result_mul_96826)
        # Adding element type (line 459)
        int_96827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, 28), 'int')
        # Getting the type of 'pad' (line 459)
        pad_96828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 32), 'pad')
        # Applying the binary operator '*' (line 459)
        result_mul_96829 = python_operator(stypy.reporting.localization.Localization(__file__, 459, 28), '*', int_96827, pad_96828)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 459, 19), tuple_96823, result_mul_96829)
        # Adding element type (line 459)
        # Getting the type of 'pad' (line 459)
        pad_96830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 37), 'pad')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 459, 19), tuple_96823, pad_96830)
        # Adding element type (line 459)
        # Getting the type of 'pad' (line 459)
        pad_96831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 42), 'pad')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 459, 19), tuple_96823, pad_96831)
        # Adding element type (line 459)
        
        # Obtaining an instance of the builtin type 'list' (line 459)
        list_96832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, 47), 'list')
        # Adding type elements to the builtin type 'list' instance (line 459)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 459, 19), tuple_96823, list_96832)
        
        # Assigning a type to the variable 'stypy_return_type' (line 459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 459, 12), 'stypy_return_type', tuple_96823)
        # SSA join for if statement (line 458)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 461)
        # Getting the type of 'self' (line 461)
        self_96833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 11), 'self')
        # Obtaining the member 'height' of a type (line 461)
        height_96834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 11), self_96833, 'height')
        # Getting the type of 'None' (line 461)
        None_96835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 26), 'None')
        
        (may_be_96836, more_types_in_union_96837) = may_be_none(height_96834, None_96835)

        if may_be_96836:

            if more_types_in_union_96837:
                # Runtime conditional SSA (line 461)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 462):
            
            # Assigning a Call to a Name (line 462):
            
            # Call to max(...): (line 462)
            # Processing the call arguments (line 462)
            # Calculating generator expression
            module_type_store = module_type_store.open_function_context('list comprehension expression', 462, 33, True)
            # Calculating comprehension expression
            # Getting the type of 'whd_list' (line 462)
            whd_list_96842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 60), 'whd_list', False)
            comprehension_96843 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 462, 33), whd_list_96842)
            # Assigning a type to the variable 'w' (line 462)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 33), 'w', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 462, 33), comprehension_96843))
            # Assigning a type to the variable 'h' (line 462)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 33), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 462, 33), comprehension_96843))
            # Assigning a type to the variable 'xd' (line 462)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 33), 'xd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 462, 33), comprehension_96843))
            # Assigning a type to the variable 'yd' (line 462)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 33), 'yd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 462, 33), comprehension_96843))
            # Getting the type of 'h' (line 462)
            h_96839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 33), 'h', False)
            # Getting the type of 'yd' (line 462)
            yd_96840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 37), 'yd', False)
            # Applying the binary operator '-' (line 462)
            result_sub_96841 = python_operator(stypy.reporting.localization.Localization(__file__, 462, 33), '-', h_96839, yd_96840)
            
            list_96844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 462, 33), 'list')
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 462, 33), list_96844, result_sub_96841)
            # Processing the call keyword arguments (line 462)
            kwargs_96845 = {}
            # Getting the type of 'max' (line 462)
            max_96838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 29), 'max', False)
            # Calling max(args, kwargs) (line 462)
            max_call_result_96846 = invoke(stypy.reporting.localization.Localization(__file__, 462, 29), max_96838, *[list_96844], **kwargs_96845)
            
            # Assigning a type to the variable 'height_descent' (line 462)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 12), 'height_descent', max_call_result_96846)
            
            # Assigning a Call to a Name (line 463):
            
            # Assigning a Call to a Name (line 463):
            
            # Call to max(...): (line 463)
            # Processing the call arguments (line 463)
            # Calculating generator expression
            module_type_store = module_type_store.open_function_context('list comprehension expression', 463, 27, True)
            # Calculating comprehension expression
            # Getting the type of 'whd_list' (line 463)
            whd_list_96849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 50), 'whd_list', False)
            comprehension_96850 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 463, 27), whd_list_96849)
            # Assigning a type to the variable 'w' (line 463)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 27), 'w', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 463, 27), comprehension_96850))
            # Assigning a type to the variable 'h' (line 463)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 27), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 463, 27), comprehension_96850))
            # Assigning a type to the variable 'xd' (line 463)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 27), 'xd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 463, 27), comprehension_96850))
            # Assigning a type to the variable 'yd' (line 463)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 27), 'yd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 463, 27), comprehension_96850))
            # Getting the type of 'yd' (line 463)
            yd_96848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 27), 'yd', False)
            list_96851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 463, 27), 'list')
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 463, 27), list_96851, yd_96848)
            # Processing the call keyword arguments (line 463)
            kwargs_96852 = {}
            # Getting the type of 'max' (line 463)
            max_96847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 23), 'max', False)
            # Calling max(args, kwargs) (line 463)
            max_call_result_96853 = invoke(stypy.reporting.localization.Localization(__file__, 463, 23), max_96847, *[list_96851], **kwargs_96852)
            
            # Assigning a type to the variable 'ydescent' (line 463)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 12), 'ydescent', max_call_result_96853)
            
            # Assigning a BinOp to a Name (line 464):
            
            # Assigning a BinOp to a Name (line 464):
            # Getting the type of 'height_descent' (line 464)
            height_descent_96854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 21), 'height_descent')
            # Getting the type of 'ydescent' (line 464)
            ydescent_96855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 38), 'ydescent')
            # Applying the binary operator '+' (line 464)
            result_add_96856 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 21), '+', height_descent_96854, ydescent_96855)
            
            # Assigning a type to the variable 'height' (line 464)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 12), 'height', result_add_96856)

            if more_types_in_union_96837:
                # Runtime conditional SSA for else branch (line 461)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_96836) or more_types_in_union_96837):
            
            # Assigning a BinOp to a Name (line 466):
            
            # Assigning a BinOp to a Name (line 466):
            # Getting the type of 'self' (line 466)
            self_96857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 21), 'self')
            # Obtaining the member 'height' of a type (line 466)
            height_96858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 21), self_96857, 'height')
            int_96859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, 35), 'int')
            # Getting the type of 'pad' (line 466)
            pad_96860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 39), 'pad')
            # Applying the binary operator '*' (line 466)
            result_mul_96861 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 35), '*', int_96859, pad_96860)
            
            # Applying the binary operator '-' (line 466)
            result_sub_96862 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 21), '-', height_96858, result_mul_96861)
            
            # Assigning a type to the variable 'height' (line 466)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'height', result_sub_96862)

            if (may_be_96836 and more_types_in_union_96837):
                # SSA join for if statement (line 461)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a ListComp to a Name (line 468):
        
        # Assigning a ListComp to a Name (line 468):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'whd_list' (line 468)
        whd_list_96866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 47), 'whd_list')
        comprehension_96867 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 468, 19), whd_list_96866)
        # Assigning a type to the variable 'w' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 19), 'w', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 468, 19), comprehension_96867))
        # Assigning a type to the variable 'h' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 19), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 468, 19), comprehension_96867))
        # Assigning a type to the variable 'xd' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 19), 'xd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 468, 19), comprehension_96867))
        # Assigning a type to the variable 'yd' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 19), 'yd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 468, 19), comprehension_96867))
        
        # Obtaining an instance of the builtin type 'tuple' (line 468)
        tuple_96863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 468)
        # Adding element type (line 468)
        # Getting the type of 'h' (line 468)
        h_96864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 20), 'h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 468, 20), tuple_96863, h_96864)
        # Adding element type (line 468)
        # Getting the type of 'yd' (line 468)
        yd_96865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 23), 'yd')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 468, 20), tuple_96863, yd_96865)
        
        list_96868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 19), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 468, 19), list_96868, tuple_96863)
        # Assigning a type to the variable 'hd_list' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 8), 'hd_list', list_96868)
        
        # Assigning a Call to a Tuple (line 469):
        
        # Assigning a Call to a Name:
        
        # Call to _get_aligned_offsets(...): (line 469)
        # Processing the call arguments (line 469)
        # Getting the type of 'hd_list' (line 469)
        hd_list_96870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 58), 'hd_list', False)
        # Getting the type of 'self' (line 470)
        self_96871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 58), 'self', False)
        # Obtaining the member 'height' of a type (line 470)
        height_96872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 58), self_96871, 'height')
        # Getting the type of 'self' (line 471)
        self_96873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 58), 'self', False)
        # Obtaining the member 'align' of a type (line 471)
        align_96874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 58), self_96873, 'align')
        # Processing the call keyword arguments (line 469)
        kwargs_96875 = {}
        # Getting the type of '_get_aligned_offsets' (line 469)
        _get_aligned_offsets_96869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 37), '_get_aligned_offsets', False)
        # Calling _get_aligned_offsets(args, kwargs) (line 469)
        _get_aligned_offsets_call_result_96876 = invoke(stypy.reporting.localization.Localization(__file__, 469, 37), _get_aligned_offsets_96869, *[hd_list_96870, height_96872, align_96874], **kwargs_96875)
        
        # Assigning a type to the variable 'call_assignment_95704' (line 469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'call_assignment_95704', _get_aligned_offsets_call_result_96876)
        
        # Assigning a Call to a Name (line 469):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96880 = {}
        # Getting the type of 'call_assignment_95704' (line 469)
        call_assignment_95704_96877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'call_assignment_95704', False)
        # Obtaining the member '__getitem__' of a type (line 469)
        getitem___96878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 8), call_assignment_95704_96877, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96881 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96878, *[int_96879], **kwargs_96880)
        
        # Assigning a type to the variable 'call_assignment_95705' (line 469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'call_assignment_95705', getitem___call_result_96881)
        
        # Assigning a Name to a Name (line 469):
        # Getting the type of 'call_assignment_95705' (line 469)
        call_assignment_95705_96882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'call_assignment_95705')
        # Assigning a type to the variable 'height' (line 469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'height', call_assignment_95705_96882)
        
        # Assigning a Call to a Name (line 469):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96886 = {}
        # Getting the type of 'call_assignment_95704' (line 469)
        call_assignment_95704_96883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'call_assignment_95704', False)
        # Obtaining the member '__getitem__' of a type (line 469)
        getitem___96884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 8), call_assignment_95704_96883, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96887 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96884, *[int_96885], **kwargs_96886)
        
        # Assigning a type to the variable 'call_assignment_95706' (line 469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'call_assignment_95706', getitem___call_result_96887)
        
        # Assigning a Name to a Name (line 469):
        # Getting the type of 'call_assignment_95706' (line 469)
        call_assignment_95706_96888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'call_assignment_95706')
        # Assigning a type to the variable 'ydescent' (line 469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 16), 'ydescent', call_assignment_95706_96888)
        
        # Assigning a Call to a Name (line 469):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96892 = {}
        # Getting the type of 'call_assignment_95704' (line 469)
        call_assignment_95704_96889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'call_assignment_95704', False)
        # Obtaining the member '__getitem__' of a type (line 469)
        getitem___96890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 8), call_assignment_95704_96889, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96893 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96890, *[int_96891], **kwargs_96892)
        
        # Assigning a type to the variable 'call_assignment_95707' (line 469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'call_assignment_95707', getitem___call_result_96893)
        
        # Assigning a Name to a Name (line 469):
        # Getting the type of 'call_assignment_95707' (line 469)
        call_assignment_95707_96894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'call_assignment_95707')
        # Assigning a type to the variable 'yoffsets' (line 469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 26), 'yoffsets', call_assignment_95707_96894)
        
        # Assigning a ListComp to a Name (line 473):
        
        # Assigning a ListComp to a Name (line 473):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'whd_list' (line 473)
        whd_list_96898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 49), 'whd_list')
        comprehension_96899 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 21), whd_list_96898)
        # Assigning a type to the variable 'w' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 21), 'w', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 21), comprehension_96899))
        # Assigning a type to the variable 'h' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 21), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 21), comprehension_96899))
        # Assigning a type to the variable 'xd' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 21), 'xd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 21), comprehension_96899))
        # Assigning a type to the variable 'yd' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 21), 'yd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 21), comprehension_96899))
        
        # Obtaining an instance of the builtin type 'tuple' (line 473)
        tuple_96895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 473)
        # Adding element type (line 473)
        # Getting the type of 'w' (line 473)
        w_96896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 22), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 22), tuple_96895, w_96896)
        # Adding element type (line 473)
        # Getting the type of 'xd' (line 473)
        xd_96897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 25), 'xd')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 22), tuple_96895, xd_96897)
        
        list_96900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 21), list_96900, tuple_96895)
        # Assigning a type to the variable 'pack_list' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'pack_list', list_96900)
        
        # Assigning a Call to a Tuple (line 475):
        
        # Assigning a Call to a Name:
        
        # Call to _get_packed_offsets(...): (line 475)
        # Processing the call arguments (line 475)
        # Getting the type of 'pack_list' (line 475)
        pack_list_96902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 47), 'pack_list', False)
        # Getting the type of 'self' (line 475)
        self_96903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 58), 'self', False)
        # Obtaining the member 'width' of a type (line 475)
        width_96904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 58), self_96903, 'width')
        # Getting the type of 'sep' (line 476)
        sep_96905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 47), 'sep', False)
        # Getting the type of 'self' (line 476)
        self_96906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 52), 'self', False)
        # Obtaining the member 'mode' of a type (line 476)
        mode_96907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 52), self_96906, 'mode')
        # Processing the call keyword arguments (line 475)
        kwargs_96908 = {}
        # Getting the type of '_get_packed_offsets' (line 475)
        _get_packed_offsets_96901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 27), '_get_packed_offsets', False)
        # Calling _get_packed_offsets(args, kwargs) (line 475)
        _get_packed_offsets_call_result_96909 = invoke(stypy.reporting.localization.Localization(__file__, 475, 27), _get_packed_offsets_96901, *[pack_list_96902, width_96904, sep_96905, mode_96907], **kwargs_96908)
        
        # Assigning a type to the variable 'call_assignment_95708' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'call_assignment_95708', _get_packed_offsets_call_result_96909)
        
        # Assigning a Call to a Name (line 475):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96913 = {}
        # Getting the type of 'call_assignment_95708' (line 475)
        call_assignment_95708_96910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'call_assignment_95708', False)
        # Obtaining the member '__getitem__' of a type (line 475)
        getitem___96911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 8), call_assignment_95708_96910, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96914 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96911, *[int_96912], **kwargs_96913)
        
        # Assigning a type to the variable 'call_assignment_95709' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'call_assignment_95709', getitem___call_result_96914)
        
        # Assigning a Name to a Name (line 475):
        # Getting the type of 'call_assignment_95709' (line 475)
        call_assignment_95709_96915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'call_assignment_95709')
        # Assigning a type to the variable 'width' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'width', call_assignment_95709_96915)
        
        # Assigning a Call to a Name (line 475):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_96918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 8), 'int')
        # Processing the call keyword arguments
        kwargs_96919 = {}
        # Getting the type of 'call_assignment_95708' (line 475)
        call_assignment_95708_96916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'call_assignment_95708', False)
        # Obtaining the member '__getitem__' of a type (line 475)
        getitem___96917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 8), call_assignment_95708_96916, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_96920 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___96917, *[int_96918], **kwargs_96919)
        
        # Assigning a type to the variable 'call_assignment_95710' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'call_assignment_95710', getitem___call_result_96920)
        
        # Assigning a Name to a Name (line 475):
        # Getting the type of 'call_assignment_95710' (line 475)
        call_assignment_95710_96921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'call_assignment_95710')
        # Assigning a type to the variable 'xoffsets_' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 15), 'xoffsets_', call_assignment_95710_96921)
        
        # Assigning a BinOp to a Name (line 478):
        
        # Assigning a BinOp to a Name (line 478):
        # Getting the type of 'xoffsets_' (line 478)
        xoffsets__96922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 19), 'xoffsets_')
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'whd_list' (line 478)
        whd_list_96924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 55), 'whd_list')
        comprehension_96925 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 478, 32), whd_list_96924)
        # Assigning a type to the variable 'w' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 32), 'w', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 478, 32), comprehension_96925))
        # Assigning a type to the variable 'h' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 32), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 478, 32), comprehension_96925))
        # Assigning a type to the variable 'xd' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 32), 'xd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 478, 32), comprehension_96925))
        # Assigning a type to the variable 'yd' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 32), 'yd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 478, 32), comprehension_96925))
        # Getting the type of 'xd' (line 478)
        xd_96923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 32), 'xd')
        list_96926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 32), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 478, 32), list_96926, xd_96923)
        # Applying the binary operator '+' (line 478)
        result_add_96927 = python_operator(stypy.reporting.localization.Localization(__file__, 478, 19), '+', xoffsets__96922, list_96926)
        
        # Assigning a type to the variable 'xoffsets' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 8), 'xoffsets', result_add_96927)
        
        # Assigning a Subscript to a Name (line 480):
        
        # Assigning a Subscript to a Name (line 480):
        
        # Obtaining the type of the subscript
        int_96928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 31), 'int')
        
        # Obtaining the type of the subscript
        int_96929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 28), 'int')
        # Getting the type of 'whd_list' (line 480)
        whd_list_96930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 19), 'whd_list')
        # Obtaining the member '__getitem__' of a type (line 480)
        getitem___96931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 19), whd_list_96930, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 480)
        subscript_call_result_96932 = invoke(stypy.reporting.localization.Localization(__file__, 480, 19), getitem___96931, int_96929)
        
        # Obtaining the member '__getitem__' of a type (line 480)
        getitem___96933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 19), subscript_call_result_96932, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 480)
        subscript_call_result_96934 = invoke(stypy.reporting.localization.Localization(__file__, 480, 19), getitem___96933, int_96928)
        
        # Assigning a type to the variable 'xdescent' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'xdescent', subscript_call_result_96934)
        
        # Assigning a BinOp to a Name (line 481):
        
        # Assigning a BinOp to a Name (line 481):
        # Getting the type of 'xoffsets' (line 481)
        xoffsets_96935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 19), 'xoffsets')
        # Getting the type of 'xdescent' (line 481)
        xdescent_96936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 30), 'xdescent')
        # Applying the binary operator '-' (line 481)
        result_sub_96937 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 19), '-', xoffsets_96935, xdescent_96936)
        
        # Assigning a type to the variable 'xoffsets' (line 481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 8), 'xoffsets', result_sub_96937)
        
        # Obtaining an instance of the builtin type 'tuple' (line 483)
        tuple_96938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 483)
        # Adding element type (line 483)
        # Getting the type of 'width' (line 483)
        width_96939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 15), 'width')
        int_96940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 23), 'int')
        # Getting the type of 'pad' (line 483)
        pad_96941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 27), 'pad')
        # Applying the binary operator '*' (line 483)
        result_mul_96942 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 23), '*', int_96940, pad_96941)
        
        # Applying the binary operator '+' (line 483)
        result_add_96943 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 15), '+', width_96939, result_mul_96942)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 15), tuple_96938, result_add_96943)
        # Adding element type (line 483)
        # Getting the type of 'height' (line 483)
        height_96944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 32), 'height')
        int_96945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 41), 'int')
        # Getting the type of 'pad' (line 483)
        pad_96946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 45), 'pad')
        # Applying the binary operator '*' (line 483)
        result_mul_96947 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 41), '*', int_96945, pad_96946)
        
        # Applying the binary operator '+' (line 483)
        result_add_96948 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 32), '+', height_96944, result_mul_96947)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 15), tuple_96938, result_add_96948)
        # Adding element type (line 483)
        # Getting the type of 'xdescent' (line 484)
        xdescent_96949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 15), 'xdescent')
        # Getting the type of 'pad' (line 484)
        pad_96950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 26), 'pad')
        # Applying the binary operator '+' (line 484)
        result_add_96951 = python_operator(stypy.reporting.localization.Localization(__file__, 484, 15), '+', xdescent_96949, pad_96950)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 15), tuple_96938, result_add_96951)
        # Adding element type (line 483)
        # Getting the type of 'ydescent' (line 484)
        ydescent_96952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 31), 'ydescent')
        # Getting the type of 'pad' (line 484)
        pad_96953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 42), 'pad')
        # Applying the binary operator '+' (line 484)
        result_add_96954 = python_operator(stypy.reporting.localization.Localization(__file__, 484, 31), '+', ydescent_96952, pad_96953)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 15), tuple_96938, result_add_96954)
        # Adding element type (line 483)
        
        # Call to list(...): (line 485)
        # Processing the call arguments (line 485)
        
        # Call to zip(...): (line 485)
        # Processing the call arguments (line 485)
        # Getting the type of 'xoffsets' (line 485)
        xoffsets_96957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 24), 'xoffsets', False)
        # Getting the type of 'yoffsets' (line 485)
        yoffsets_96958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 34), 'yoffsets', False)
        # Processing the call keyword arguments (line 485)
        kwargs_96959 = {}
        # Getting the type of 'zip' (line 485)
        zip_96956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 20), 'zip', False)
        # Calling zip(args, kwargs) (line 485)
        zip_call_result_96960 = invoke(stypy.reporting.localization.Localization(__file__, 485, 20), zip_96956, *[xoffsets_96957, yoffsets_96958], **kwargs_96959)
        
        # Processing the call keyword arguments (line 485)
        kwargs_96961 = {}
        # Getting the type of 'list' (line 485)
        list_96955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 15), 'list', False)
        # Calling list(args, kwargs) (line 485)
        list_call_result_96962 = invoke(stypy.reporting.localization.Localization(__file__, 485, 15), list_96955, *[zip_call_result_96960], **kwargs_96961)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 15), tuple_96938, list_call_result_96962)
        
        # Assigning a type to the variable 'stypy_return_type' (line 483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'stypy_return_type', tuple_96938)
        
        # ################# End of 'get_extent_offsets(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_extent_offsets' in the type store
        # Getting the type of 'stypy_return_type' (line 447)
        stypy_return_type_96963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_96963)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_extent_offsets'
        return stypy_return_type_96963


# Assigning a type to the variable 'HPacker' (line 409)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 409, 0), 'HPacker', HPacker)
# Declaration of the 'PaddedBox' class
# Getting the type of 'OffsetBox' (line 488)
OffsetBox_96964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 16), 'OffsetBox')

class PaddedBox(OffsetBox_96964, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 489)
        None_96965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 34), 'None')
        # Getting the type of 'False' (line 489)
        False_96966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 51), 'False')
        # Getting the type of 'None' (line 489)
        None_96967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 70), 'None')
        defaults = [None_96965, False_96966, None_96967]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 489, 4, False)
        # Assigning a type to the variable 'self' (line 490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PaddedBox.__init__', ['child', 'pad', 'draw_frame', 'patch_attrs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['child', 'pad', 'draw_frame', 'patch_attrs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_96968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 497, (-1)), 'unicode', u'\n        *pad* : boundary pad\n\n        .. note::\n          *pad* need to given in points and will be\n          scale with the renderer dpi, while *width* and *height*\n          need to be in pixels.\n        ')
        
        # Call to __init__(...): (line 499)
        # Processing the call keyword arguments (line 499)
        kwargs_96975 = {}
        
        # Call to super(...): (line 499)
        # Processing the call arguments (line 499)
        # Getting the type of 'PaddedBox' (line 499)
        PaddedBox_96970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 14), 'PaddedBox', False)
        # Getting the type of 'self' (line 499)
        self_96971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 25), 'self', False)
        # Processing the call keyword arguments (line 499)
        kwargs_96972 = {}
        # Getting the type of 'super' (line 499)
        super_96969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 8), 'super', False)
        # Calling super(args, kwargs) (line 499)
        super_call_result_96973 = invoke(stypy.reporting.localization.Localization(__file__, 499, 8), super_96969, *[PaddedBox_96970, self_96971], **kwargs_96972)
        
        # Obtaining the member '__init__' of a type (line 499)
        init___96974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 8), super_call_result_96973, '__init__')
        # Calling __init__(args, kwargs) (line 499)
        init___call_result_96976 = invoke(stypy.reporting.localization.Localization(__file__, 499, 8), init___96974, *[], **kwargs_96975)
        
        
        # Assigning a Name to a Attribute (line 501):
        
        # Assigning a Name to a Attribute (line 501):
        # Getting the type of 'pad' (line 501)
        pad_96977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 19), 'pad')
        # Getting the type of 'self' (line 501)
        self_96978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 8), 'self')
        # Setting the type of the member 'pad' of a type (line 501)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 501, 8), self_96978, 'pad', pad_96977)
        
        # Assigning a List to a Attribute (line 502):
        
        # Assigning a List to a Attribute (line 502):
        
        # Obtaining an instance of the builtin type 'list' (line 502)
        list_96979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 502)
        # Adding element type (line 502)
        # Getting the type of 'child' (line 502)
        child_96980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 26), 'child')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 25), list_96979, child_96980)
        
        # Getting the type of 'self' (line 502)
        self_96981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 8), 'self')
        # Setting the type of the member '_children' of a type (line 502)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 8), self_96981, '_children', list_96979)
        
        # Assigning a Call to a Attribute (line 504):
        
        # Assigning a Call to a Attribute (line 504):
        
        # Call to FancyBboxPatch(...): (line 504)
        # Processing the call keyword arguments (line 504)
        
        # Obtaining an instance of the builtin type 'tuple' (line 505)
        tuple_96983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 505)
        # Adding element type (line 505)
        float_96984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 16), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 505, 16), tuple_96983, float_96984)
        # Adding element type (line 505)
        float_96985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 21), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 505, 16), tuple_96983, float_96985)
        
        keyword_96986 = tuple_96983
        float_96987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 33), 'float')
        keyword_96988 = float_96987
        float_96989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 44), 'float')
        keyword_96990 = float_96989
        unicode_96991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 506, 22), 'unicode', u'w')
        keyword_96992 = unicode_96991
        unicode_96993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 506, 37), 'unicode', u'k')
        keyword_96994 = unicode_96993
        int_96995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 507, 27), 'int')
        keyword_96996 = int_96995
        # Getting the type of 'True' (line 508)
        True_96997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 17), 'True', False)
        keyword_96998 = True_96997
        kwargs_96999 = {'mutation_scale': keyword_96996, 'edgecolor': keyword_96994, 'facecolor': keyword_96992, 'height': keyword_96990, 'width': keyword_96988, 'xy': keyword_96986, 'snap': keyword_96998}
        # Getting the type of 'FancyBboxPatch' (line 504)
        FancyBboxPatch_96982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 21), 'FancyBboxPatch', False)
        # Calling FancyBboxPatch(args, kwargs) (line 504)
        FancyBboxPatch_call_result_97000 = invoke(stypy.reporting.localization.Localization(__file__, 504, 21), FancyBboxPatch_96982, *[], **kwargs_96999)
        
        # Getting the type of 'self' (line 504)
        self_97001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 8), 'self')
        # Setting the type of the member 'patch' of a type (line 504)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 504, 8), self_97001, 'patch', FancyBboxPatch_call_result_97000)
        
        # Call to set_boxstyle(...): (line 511)
        # Processing the call arguments (line 511)
        unicode_97005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 511, 32), 'unicode', u'square')
        # Processing the call keyword arguments (line 511)
        int_97006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 511, 46), 'int')
        keyword_97007 = int_97006
        kwargs_97008 = {'pad': keyword_97007}
        # Getting the type of 'self' (line 511)
        self_97002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'self', False)
        # Obtaining the member 'patch' of a type (line 511)
        patch_97003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 8), self_97002, 'patch')
        # Obtaining the member 'set_boxstyle' of a type (line 511)
        set_boxstyle_97004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 8), patch_97003, 'set_boxstyle')
        # Calling set_boxstyle(args, kwargs) (line 511)
        set_boxstyle_call_result_97009 = invoke(stypy.reporting.localization.Localization(__file__, 511, 8), set_boxstyle_97004, *[unicode_97005], **kwargs_97008)
        
        
        # Type idiom detected: calculating its left and rigth part (line 513)
        # Getting the type of 'patch_attrs' (line 513)
        patch_attrs_97010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 8), 'patch_attrs')
        # Getting the type of 'None' (line 513)
        None_97011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 30), 'None')
        
        (may_be_97012, more_types_in_union_97013) = may_not_be_none(patch_attrs_97010, None_97011)

        if may_be_97012:

            if more_types_in_union_97013:
                # Runtime conditional SSA (line 513)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to update(...): (line 514)
            # Processing the call arguments (line 514)
            # Getting the type of 'patch_attrs' (line 514)
            patch_attrs_97017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 30), 'patch_attrs', False)
            # Processing the call keyword arguments (line 514)
            kwargs_97018 = {}
            # Getting the type of 'self' (line 514)
            self_97014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 12), 'self', False)
            # Obtaining the member 'patch' of a type (line 514)
            patch_97015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 12), self_97014, 'patch')
            # Obtaining the member 'update' of a type (line 514)
            update_97016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 12), patch_97015, 'update')
            # Calling update(args, kwargs) (line 514)
            update_call_result_97019 = invoke(stypy.reporting.localization.Localization(__file__, 514, 12), update_97016, *[patch_attrs_97017], **kwargs_97018)
            

            if more_types_in_union_97013:
                # SSA join for if statement (line 513)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 516):
        
        # Assigning a Name to a Attribute (line 516):
        # Getting the type of 'draw_frame' (line 516)
        draw_frame_97020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 26), 'draw_frame')
        # Getting the type of 'self' (line 516)
        self_97021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 8), 'self')
        # Setting the type of the member '_drawFrame' of a type (line 516)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 8), self_97021, '_drawFrame', draw_frame_97020)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_extent_offsets(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_extent_offsets'
        module_type_store = module_type_store.open_function_context('get_extent_offsets', 518, 4, False)
        # Assigning a type to the variable 'self' (line 519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PaddedBox.get_extent_offsets.__dict__.__setitem__('stypy_localization', localization)
        PaddedBox.get_extent_offsets.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PaddedBox.get_extent_offsets.__dict__.__setitem__('stypy_type_store', module_type_store)
        PaddedBox.get_extent_offsets.__dict__.__setitem__('stypy_function_name', 'PaddedBox.get_extent_offsets')
        PaddedBox.get_extent_offsets.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        PaddedBox.get_extent_offsets.__dict__.__setitem__('stypy_varargs_param_name', None)
        PaddedBox.get_extent_offsets.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PaddedBox.get_extent_offsets.__dict__.__setitem__('stypy_call_defaults', defaults)
        PaddedBox.get_extent_offsets.__dict__.__setitem__('stypy_call_varargs', varargs)
        PaddedBox.get_extent_offsets.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PaddedBox.get_extent_offsets.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PaddedBox.get_extent_offsets', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_extent_offsets', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_extent_offsets(...)' code ##################

        unicode_97022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, (-1)), 'unicode', u'\n        update offset of childrens and return the extents of the box\n        ')
        
        # Assigning a Call to a Name (line 523):
        
        # Assigning a Call to a Name (line 523):
        
        # Call to points_to_pixels(...): (line 523)
        # Processing the call arguments (line 523)
        float_97025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 43), 'float')
        # Processing the call keyword arguments (line 523)
        kwargs_97026 = {}
        # Getting the type of 'renderer' (line 523)
        renderer_97023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 17), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 523)
        points_to_pixels_97024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 17), renderer_97023, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 523)
        points_to_pixels_call_result_97027 = invoke(stypy.reporting.localization.Localization(__file__, 523, 17), points_to_pixels_97024, *[float_97025], **kwargs_97026)
        
        # Assigning a type to the variable 'dpicor' (line 523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'dpicor', points_to_pixels_call_result_97027)
        
        # Assigning a BinOp to a Name (line 524):
        
        # Assigning a BinOp to a Name (line 524):
        # Getting the type of 'self' (line 524)
        self_97028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 14), 'self')
        # Obtaining the member 'pad' of a type (line 524)
        pad_97029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 14), self_97028, 'pad')
        # Getting the type of 'dpicor' (line 524)
        dpicor_97030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 25), 'dpicor')
        # Applying the binary operator '*' (line 524)
        result_mul_97031 = python_operator(stypy.reporting.localization.Localization(__file__, 524, 14), '*', pad_97029, dpicor_97030)
        
        # Assigning a type to the variable 'pad' (line 524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 8), 'pad', result_mul_97031)
        
        # Assigning a Call to a Tuple (line 526):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent(...): (line 526)
        # Processing the call arguments (line 526)
        # Getting the type of 'renderer' (line 526)
        renderer_97038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 52), 'renderer', False)
        # Processing the call keyword arguments (line 526)
        kwargs_97039 = {}
        
        # Obtaining the type of the subscript
        int_97032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 38), 'int')
        # Getting the type of 'self' (line 526)
        self_97033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 23), 'self', False)
        # Obtaining the member '_children' of a type (line 526)
        _children_97034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 23), self_97033, '_children')
        # Obtaining the member '__getitem__' of a type (line 526)
        getitem___97035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 23), _children_97034, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 526)
        subscript_call_result_97036 = invoke(stypy.reporting.localization.Localization(__file__, 526, 23), getitem___97035, int_97032)
        
        # Obtaining the member 'get_extent' of a type (line 526)
        get_extent_97037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 23), subscript_call_result_97036, 'get_extent')
        # Calling get_extent(args, kwargs) (line 526)
        get_extent_call_result_97040 = invoke(stypy.reporting.localization.Localization(__file__, 526, 23), get_extent_97037, *[renderer_97038], **kwargs_97039)
        
        # Assigning a type to the variable 'call_assignment_95711' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'call_assignment_95711', get_extent_call_result_97040)
        
        # Assigning a Call to a Name (line 526):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97044 = {}
        # Getting the type of 'call_assignment_95711' (line 526)
        call_assignment_95711_97041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'call_assignment_95711', False)
        # Obtaining the member '__getitem__' of a type (line 526)
        getitem___97042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 8), call_assignment_95711_97041, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97045 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97042, *[int_97043], **kwargs_97044)
        
        # Assigning a type to the variable 'call_assignment_95712' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'call_assignment_95712', getitem___call_result_97045)
        
        # Assigning a Name to a Name (line 526):
        # Getting the type of 'call_assignment_95712' (line 526)
        call_assignment_95712_97046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'call_assignment_95712')
        # Assigning a type to the variable 'w' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'w', call_assignment_95712_97046)
        
        # Assigning a Call to a Name (line 526):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97050 = {}
        # Getting the type of 'call_assignment_95711' (line 526)
        call_assignment_95711_97047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'call_assignment_95711', False)
        # Obtaining the member '__getitem__' of a type (line 526)
        getitem___97048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 8), call_assignment_95711_97047, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97051 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97048, *[int_97049], **kwargs_97050)
        
        # Assigning a type to the variable 'call_assignment_95713' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'call_assignment_95713', getitem___call_result_97051)
        
        # Assigning a Name to a Name (line 526):
        # Getting the type of 'call_assignment_95713' (line 526)
        call_assignment_95713_97052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'call_assignment_95713')
        # Assigning a type to the variable 'h' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 11), 'h', call_assignment_95713_97052)
        
        # Assigning a Call to a Name (line 526):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97056 = {}
        # Getting the type of 'call_assignment_95711' (line 526)
        call_assignment_95711_97053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'call_assignment_95711', False)
        # Obtaining the member '__getitem__' of a type (line 526)
        getitem___97054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 8), call_assignment_95711_97053, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97057 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97054, *[int_97055], **kwargs_97056)
        
        # Assigning a type to the variable 'call_assignment_95714' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'call_assignment_95714', getitem___call_result_97057)
        
        # Assigning a Name to a Name (line 526):
        # Getting the type of 'call_assignment_95714' (line 526)
        call_assignment_95714_97058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'call_assignment_95714')
        # Assigning a type to the variable 'xd' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 14), 'xd', call_assignment_95714_97058)
        
        # Assigning a Call to a Name (line 526):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97062 = {}
        # Getting the type of 'call_assignment_95711' (line 526)
        call_assignment_95711_97059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'call_assignment_95711', False)
        # Obtaining the member '__getitem__' of a type (line 526)
        getitem___97060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 8), call_assignment_95711_97059, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97063 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97060, *[int_97061], **kwargs_97062)
        
        # Assigning a type to the variable 'call_assignment_95715' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'call_assignment_95715', getitem___call_result_97063)
        
        # Assigning a Name to a Name (line 526):
        # Getting the type of 'call_assignment_95715' (line 526)
        call_assignment_95715_97064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'call_assignment_95715')
        # Assigning a type to the variable 'yd' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 18), 'yd', call_assignment_95715_97064)
        
        # Obtaining an instance of the builtin type 'tuple' (line 528)
        tuple_97065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 528)
        # Adding element type (line 528)
        # Getting the type of 'w' (line 528)
        w_97066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 15), 'w')
        int_97067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 19), 'int')
        # Getting the type of 'pad' (line 528)
        pad_97068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 23), 'pad')
        # Applying the binary operator '*' (line 528)
        result_mul_97069 = python_operator(stypy.reporting.localization.Localization(__file__, 528, 19), '*', int_97067, pad_97068)
        
        # Applying the binary operator '+' (line 528)
        result_add_97070 = python_operator(stypy.reporting.localization.Localization(__file__, 528, 15), '+', w_97066, result_mul_97069)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 528, 15), tuple_97065, result_add_97070)
        # Adding element type (line 528)
        # Getting the type of 'h' (line 528)
        h_97071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 28), 'h')
        int_97072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 32), 'int')
        # Getting the type of 'pad' (line 528)
        pad_97073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 36), 'pad')
        # Applying the binary operator '*' (line 528)
        result_mul_97074 = python_operator(stypy.reporting.localization.Localization(__file__, 528, 32), '*', int_97072, pad_97073)
        
        # Applying the binary operator '+' (line 528)
        result_add_97075 = python_operator(stypy.reporting.localization.Localization(__file__, 528, 28), '+', h_97071, result_mul_97074)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 528, 15), tuple_97065, result_add_97075)
        # Adding element type (line 528)
        # Getting the type of 'xd' (line 529)
        xd_97076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 15), 'xd')
        # Getting the type of 'pad' (line 529)
        pad_97077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 20), 'pad')
        # Applying the binary operator '+' (line 529)
        result_add_97078 = python_operator(stypy.reporting.localization.Localization(__file__, 529, 15), '+', xd_97076, pad_97077)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 528, 15), tuple_97065, result_add_97078)
        # Adding element type (line 528)
        # Getting the type of 'yd' (line 529)
        yd_97079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 25), 'yd')
        # Getting the type of 'pad' (line 529)
        pad_97080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 30), 'pad')
        # Applying the binary operator '+' (line 529)
        result_add_97081 = python_operator(stypy.reporting.localization.Localization(__file__, 529, 25), '+', yd_97079, pad_97080)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 528, 15), tuple_97065, result_add_97081)
        # Adding element type (line 528)
        
        # Obtaining an instance of the builtin type 'list' (line 530)
        list_97082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 530)
        # Adding element type (line 530)
        
        # Obtaining an instance of the builtin type 'tuple' (line 530)
        tuple_97083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 530)
        # Adding element type (line 530)
        int_97084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 530, 17), tuple_97083, int_97084)
        # Adding element type (line 530)
        int_97085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 530, 17), tuple_97083, int_97085)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 530, 15), list_97082, tuple_97083)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 528, 15), tuple_97065, list_97082)
        
        # Assigning a type to the variable 'stypy_return_type' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'stypy_return_type', tuple_97065)
        
        # ################# End of 'get_extent_offsets(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_extent_offsets' in the type store
        # Getting the type of 'stypy_return_type' (line 518)
        stypy_return_type_97086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97086)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_extent_offsets'
        return stypy_return_type_97086


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 532, 4, False)
        # Assigning a type to the variable 'self' (line 533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PaddedBox.draw.__dict__.__setitem__('stypy_localization', localization)
        PaddedBox.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PaddedBox.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        PaddedBox.draw.__dict__.__setitem__('stypy_function_name', 'PaddedBox.draw')
        PaddedBox.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        PaddedBox.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        PaddedBox.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PaddedBox.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        PaddedBox.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        PaddedBox.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PaddedBox.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PaddedBox.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_97087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 536, (-1)), 'unicode', u'\n        Update the location of children if necessary and draw them\n        to the given *renderer*.\n        ')
        
        # Assigning a Call to a Tuple (line 538):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent_offsets(...): (line 538)
        # Processing the call arguments (line 538)
        # Getting the type of 'renderer' (line 539)
        renderer_97090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 56), 'renderer', False)
        # Processing the call keyword arguments (line 538)
        kwargs_97091 = {}
        # Getting the type of 'self' (line 538)
        self_97088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 53), 'self', False)
        # Obtaining the member 'get_extent_offsets' of a type (line 538)
        get_extent_offsets_97089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 53), self_97088, 'get_extent_offsets')
        # Calling get_extent_offsets(args, kwargs) (line 538)
        get_extent_offsets_call_result_97092 = invoke(stypy.reporting.localization.Localization(__file__, 538, 53), get_extent_offsets_97089, *[renderer_97090], **kwargs_97091)
        
        # Assigning a type to the variable 'call_assignment_95716' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95716', get_extent_offsets_call_result_97092)
        
        # Assigning a Call to a Name (line 538):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97096 = {}
        # Getting the type of 'call_assignment_95716' (line 538)
        call_assignment_95716_97093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95716', False)
        # Obtaining the member '__getitem__' of a type (line 538)
        getitem___97094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 8), call_assignment_95716_97093, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97097 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97094, *[int_97095], **kwargs_97096)
        
        # Assigning a type to the variable 'call_assignment_95717' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95717', getitem___call_result_97097)
        
        # Assigning a Name to a Name (line 538):
        # Getting the type of 'call_assignment_95717' (line 538)
        call_assignment_95717_97098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95717')
        # Assigning a type to the variable 'width' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'width', call_assignment_95717_97098)
        
        # Assigning a Call to a Name (line 538):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97102 = {}
        # Getting the type of 'call_assignment_95716' (line 538)
        call_assignment_95716_97099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95716', False)
        # Obtaining the member '__getitem__' of a type (line 538)
        getitem___97100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 8), call_assignment_95716_97099, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97103 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97100, *[int_97101], **kwargs_97102)
        
        # Assigning a type to the variable 'call_assignment_95718' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95718', getitem___call_result_97103)
        
        # Assigning a Name to a Name (line 538):
        # Getting the type of 'call_assignment_95718' (line 538)
        call_assignment_95718_97104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95718')
        # Assigning a type to the variable 'height' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 15), 'height', call_assignment_95718_97104)
        
        # Assigning a Call to a Name (line 538):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97108 = {}
        # Getting the type of 'call_assignment_95716' (line 538)
        call_assignment_95716_97105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95716', False)
        # Obtaining the member '__getitem__' of a type (line 538)
        getitem___97106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 8), call_assignment_95716_97105, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97109 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97106, *[int_97107], **kwargs_97108)
        
        # Assigning a type to the variable 'call_assignment_95719' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95719', getitem___call_result_97109)
        
        # Assigning a Name to a Name (line 538):
        # Getting the type of 'call_assignment_95719' (line 538)
        call_assignment_95719_97110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95719')
        # Assigning a type to the variable 'xdescent' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 23), 'xdescent', call_assignment_95719_97110)
        
        # Assigning a Call to a Name (line 538):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97114 = {}
        # Getting the type of 'call_assignment_95716' (line 538)
        call_assignment_95716_97111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95716', False)
        # Obtaining the member '__getitem__' of a type (line 538)
        getitem___97112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 8), call_assignment_95716_97111, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97115 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97112, *[int_97113], **kwargs_97114)
        
        # Assigning a type to the variable 'call_assignment_95720' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95720', getitem___call_result_97115)
        
        # Assigning a Name to a Name (line 538):
        # Getting the type of 'call_assignment_95720' (line 538)
        call_assignment_95720_97116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95720')
        # Assigning a type to the variable 'ydescent' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 33), 'ydescent', call_assignment_95720_97116)
        
        # Assigning a Call to a Name (line 538):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97120 = {}
        # Getting the type of 'call_assignment_95716' (line 538)
        call_assignment_95716_97117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95716', False)
        # Obtaining the member '__getitem__' of a type (line 538)
        getitem___97118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 8), call_assignment_95716_97117, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97121 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97118, *[int_97119], **kwargs_97120)
        
        # Assigning a type to the variable 'call_assignment_95721' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95721', getitem___call_result_97121)
        
        # Assigning a Name to a Name (line 538):
        # Getting the type of 'call_assignment_95721' (line 538)
        call_assignment_95721_97122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'call_assignment_95721')
        # Assigning a type to the variable 'offsets' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 43), 'offsets', call_assignment_95721_97122)
        
        # Assigning a Call to a Tuple (line 541):
        
        # Assigning a Call to a Name:
        
        # Call to get_offset(...): (line 541)
        # Processing the call arguments (line 541)
        # Getting the type of 'width' (line 541)
        width_97125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 33), 'width', False)
        # Getting the type of 'height' (line 541)
        height_97126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 40), 'height', False)
        # Getting the type of 'xdescent' (line 541)
        xdescent_97127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 48), 'xdescent', False)
        # Getting the type of 'ydescent' (line 541)
        ydescent_97128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 58), 'ydescent', False)
        # Getting the type of 'renderer' (line 541)
        renderer_97129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 68), 'renderer', False)
        # Processing the call keyword arguments (line 541)
        kwargs_97130 = {}
        # Getting the type of 'self' (line 541)
        self_97123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 17), 'self', False)
        # Obtaining the member 'get_offset' of a type (line 541)
        get_offset_97124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 17), self_97123, 'get_offset')
        # Calling get_offset(args, kwargs) (line 541)
        get_offset_call_result_97131 = invoke(stypy.reporting.localization.Localization(__file__, 541, 17), get_offset_97124, *[width_97125, height_97126, xdescent_97127, ydescent_97128, renderer_97129], **kwargs_97130)
        
        # Assigning a type to the variable 'call_assignment_95722' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'call_assignment_95722', get_offset_call_result_97131)
        
        # Assigning a Call to a Name (line 541):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97135 = {}
        # Getting the type of 'call_assignment_95722' (line 541)
        call_assignment_95722_97132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'call_assignment_95722', False)
        # Obtaining the member '__getitem__' of a type (line 541)
        getitem___97133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 8), call_assignment_95722_97132, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97136 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97133, *[int_97134], **kwargs_97135)
        
        # Assigning a type to the variable 'call_assignment_95723' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'call_assignment_95723', getitem___call_result_97136)
        
        # Assigning a Name to a Name (line 541):
        # Getting the type of 'call_assignment_95723' (line 541)
        call_assignment_95723_97137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'call_assignment_95723')
        # Assigning a type to the variable 'px' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'px', call_assignment_95723_97137)
        
        # Assigning a Call to a Name (line 541):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97141 = {}
        # Getting the type of 'call_assignment_95722' (line 541)
        call_assignment_95722_97138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'call_assignment_95722', False)
        # Obtaining the member '__getitem__' of a type (line 541)
        getitem___97139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 8), call_assignment_95722_97138, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97142 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97139, *[int_97140], **kwargs_97141)
        
        # Assigning a type to the variable 'call_assignment_95724' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'call_assignment_95724', getitem___call_result_97142)
        
        # Assigning a Name to a Name (line 541):
        # Getting the type of 'call_assignment_95724' (line 541)
        call_assignment_95724_97143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'call_assignment_95724')
        # Assigning a type to the variable 'py' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 12), 'py', call_assignment_95724_97143)
        
        
        # Call to zip(...): (line 543)
        # Processing the call arguments (line 543)
        
        # Call to get_visible_children(...): (line 543)
        # Processing the call keyword arguments (line 543)
        kwargs_97147 = {}
        # Getting the type of 'self' (line 543)
        self_97145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 31), 'self', False)
        # Obtaining the member 'get_visible_children' of a type (line 543)
        get_visible_children_97146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 31), self_97145, 'get_visible_children')
        # Calling get_visible_children(args, kwargs) (line 543)
        get_visible_children_call_result_97148 = invoke(stypy.reporting.localization.Localization(__file__, 543, 31), get_visible_children_97146, *[], **kwargs_97147)
        
        # Getting the type of 'offsets' (line 543)
        offsets_97149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 60), 'offsets', False)
        # Processing the call keyword arguments (line 543)
        kwargs_97150 = {}
        # Getting the type of 'zip' (line 543)
        zip_97144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 27), 'zip', False)
        # Calling zip(args, kwargs) (line 543)
        zip_call_result_97151 = invoke(stypy.reporting.localization.Localization(__file__, 543, 27), zip_97144, *[get_visible_children_call_result_97148, offsets_97149], **kwargs_97150)
        
        # Testing the type of a for loop iterable (line 543)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 543, 8), zip_call_result_97151)
        # Getting the type of the for loop variable (line 543)
        for_loop_var_97152 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 543, 8), zip_call_result_97151)
        # Assigning a type to the variable 'c' (line 543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 8), 'c', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 8), for_loop_var_97152))
        # Assigning a type to the variable 'ox' (line 543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 8), 'ox', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 8), for_loop_var_97152))
        # Assigning a type to the variable 'oy' (line 543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 8), 'oy', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 8), for_loop_var_97152))
        # SSA begins for a for statement (line 543)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_offset(...): (line 544)
        # Processing the call arguments (line 544)
        
        # Obtaining an instance of the builtin type 'tuple' (line 544)
        tuple_97155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 544)
        # Adding element type (line 544)
        # Getting the type of 'px' (line 544)
        px_97156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 26), 'px', False)
        # Getting the type of 'ox' (line 544)
        ox_97157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 31), 'ox', False)
        # Applying the binary operator '+' (line 544)
        result_add_97158 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 26), '+', px_97156, ox_97157)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 544, 26), tuple_97155, result_add_97158)
        # Adding element type (line 544)
        # Getting the type of 'py' (line 544)
        py_97159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 35), 'py', False)
        # Getting the type of 'oy' (line 544)
        oy_97160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 40), 'oy', False)
        # Applying the binary operator '+' (line 544)
        result_add_97161 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 35), '+', py_97159, oy_97160)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 544, 26), tuple_97155, result_add_97161)
        
        # Processing the call keyword arguments (line 544)
        kwargs_97162 = {}
        # Getting the type of 'c' (line 544)
        c_97153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 12), 'c', False)
        # Obtaining the member 'set_offset' of a type (line 544)
        set_offset_97154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 12), c_97153, 'set_offset')
        # Calling set_offset(args, kwargs) (line 544)
        set_offset_call_result_97163 = invoke(stypy.reporting.localization.Localization(__file__, 544, 12), set_offset_97154, *[tuple_97155], **kwargs_97162)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw_frame(...): (line 546)
        # Processing the call arguments (line 546)
        # Getting the type of 'renderer' (line 546)
        renderer_97166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 24), 'renderer', False)
        # Processing the call keyword arguments (line 546)
        kwargs_97167 = {}
        # Getting the type of 'self' (line 546)
        self_97164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'self', False)
        # Obtaining the member 'draw_frame' of a type (line 546)
        draw_frame_97165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 8), self_97164, 'draw_frame')
        # Calling draw_frame(args, kwargs) (line 546)
        draw_frame_call_result_97168 = invoke(stypy.reporting.localization.Localization(__file__, 546, 8), draw_frame_97165, *[renderer_97166], **kwargs_97167)
        
        
        
        # Call to get_visible_children(...): (line 548)
        # Processing the call keyword arguments (line 548)
        kwargs_97171 = {}
        # Getting the type of 'self' (line 548)
        self_97169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 17), 'self', False)
        # Obtaining the member 'get_visible_children' of a type (line 548)
        get_visible_children_97170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 17), self_97169, 'get_visible_children')
        # Calling get_visible_children(args, kwargs) (line 548)
        get_visible_children_call_result_97172 = invoke(stypy.reporting.localization.Localization(__file__, 548, 17), get_visible_children_97170, *[], **kwargs_97171)
        
        # Testing the type of a for loop iterable (line 548)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 548, 8), get_visible_children_call_result_97172)
        # Getting the type of the for loop variable (line 548)
        for_loop_var_97173 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 548, 8), get_visible_children_call_result_97172)
        # Assigning a type to the variable 'c' (line 548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 8), 'c', for_loop_var_97173)
        # SSA begins for a for statement (line 548)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to draw(...): (line 549)
        # Processing the call arguments (line 549)
        # Getting the type of 'renderer' (line 549)
        renderer_97176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 19), 'renderer', False)
        # Processing the call keyword arguments (line 549)
        kwargs_97177 = {}
        # Getting the type of 'c' (line 549)
        c_97174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'c', False)
        # Obtaining the member 'draw' of a type (line 549)
        draw_97175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 12), c_97174, 'draw')
        # Calling draw(args, kwargs) (line 549)
        draw_call_result_97178 = invoke(stypy.reporting.localization.Localization(__file__, 549, 12), draw_97175, *[renderer_97176], **kwargs_97177)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 552):
        
        # Assigning a Name to a Attribute (line 552):
        # Getting the type of 'False' (line 552)
        False_97179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 21), 'False')
        # Getting the type of 'self' (line 552)
        self_97180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 552)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 8), self_97180, 'stale', False_97179)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 532)
        stypy_return_type_97181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97181)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_97181


    @norecursion
    def update_frame(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 554)
        None_97182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 42), 'None')
        defaults = [None_97182]
        # Create a new context for function 'update_frame'
        module_type_store = module_type_store.open_function_context('update_frame', 554, 4, False)
        # Assigning a type to the variable 'self' (line 555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PaddedBox.update_frame.__dict__.__setitem__('stypy_localization', localization)
        PaddedBox.update_frame.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PaddedBox.update_frame.__dict__.__setitem__('stypy_type_store', module_type_store)
        PaddedBox.update_frame.__dict__.__setitem__('stypy_function_name', 'PaddedBox.update_frame')
        PaddedBox.update_frame.__dict__.__setitem__('stypy_param_names_list', ['bbox', 'fontsize'])
        PaddedBox.update_frame.__dict__.__setitem__('stypy_varargs_param_name', None)
        PaddedBox.update_frame.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PaddedBox.update_frame.__dict__.__setitem__('stypy_call_defaults', defaults)
        PaddedBox.update_frame.__dict__.__setitem__('stypy_call_varargs', varargs)
        PaddedBox.update_frame.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PaddedBox.update_frame.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PaddedBox.update_frame', ['bbox', 'fontsize'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_frame', localization, ['bbox', 'fontsize'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_frame(...)' code ##################

        
        # Call to set_bounds(...): (line 555)
        # Processing the call arguments (line 555)
        # Getting the type of 'bbox' (line 555)
        bbox_97186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 30), 'bbox', False)
        # Obtaining the member 'x0' of a type (line 555)
        x0_97187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 30), bbox_97186, 'x0')
        # Getting the type of 'bbox' (line 555)
        bbox_97188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 39), 'bbox', False)
        # Obtaining the member 'y0' of a type (line 555)
        y0_97189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 39), bbox_97188, 'y0')
        # Getting the type of 'bbox' (line 556)
        bbox_97190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 30), 'bbox', False)
        # Obtaining the member 'width' of a type (line 556)
        width_97191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 30), bbox_97190, 'width')
        # Getting the type of 'bbox' (line 556)
        bbox_97192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 42), 'bbox', False)
        # Obtaining the member 'height' of a type (line 556)
        height_97193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 42), bbox_97192, 'height')
        # Processing the call keyword arguments (line 555)
        kwargs_97194 = {}
        # Getting the type of 'self' (line 555)
        self_97183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 8), 'self', False)
        # Obtaining the member 'patch' of a type (line 555)
        patch_97184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 8), self_97183, 'patch')
        # Obtaining the member 'set_bounds' of a type (line 555)
        set_bounds_97185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 8), patch_97184, 'set_bounds')
        # Calling set_bounds(args, kwargs) (line 555)
        set_bounds_call_result_97195 = invoke(stypy.reporting.localization.Localization(__file__, 555, 8), set_bounds_97185, *[x0_97187, y0_97189, width_97191, height_97193], **kwargs_97194)
        
        
        # Getting the type of 'fontsize' (line 558)
        fontsize_97196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 11), 'fontsize')
        # Testing the type of an if condition (line 558)
        if_condition_97197 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 558, 8), fontsize_97196)
        # Assigning a type to the variable 'if_condition_97197' (line 558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 558, 8), 'if_condition_97197', if_condition_97197)
        # SSA begins for if statement (line 558)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_mutation_scale(...): (line 559)
        # Processing the call arguments (line 559)
        # Getting the type of 'fontsize' (line 559)
        fontsize_97201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 42), 'fontsize', False)
        # Processing the call keyword arguments (line 559)
        kwargs_97202 = {}
        # Getting the type of 'self' (line 559)
        self_97198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 12), 'self', False)
        # Obtaining the member 'patch' of a type (line 559)
        patch_97199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 12), self_97198, 'patch')
        # Obtaining the member 'set_mutation_scale' of a type (line 559)
        set_mutation_scale_97200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 12), patch_97199, 'set_mutation_scale')
        # Calling set_mutation_scale(args, kwargs) (line 559)
        set_mutation_scale_call_result_97203 = invoke(stypy.reporting.localization.Localization(__file__, 559, 12), set_mutation_scale_97200, *[fontsize_97201], **kwargs_97202)
        
        # SSA join for if statement (line 558)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 560):
        
        # Assigning a Name to a Attribute (line 560):
        # Getting the type of 'True' (line 560)
        True_97204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 21), 'True')
        # Getting the type of 'self' (line 560)
        self_97205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 560)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 8), self_97205, 'stale', True_97204)
        
        # ################# End of 'update_frame(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_frame' in the type store
        # Getting the type of 'stypy_return_type' (line 554)
        stypy_return_type_97206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97206)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_frame'
        return stypy_return_type_97206


    @norecursion
    def draw_frame(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_frame'
        module_type_store = module_type_store.open_function_context('draw_frame', 562, 4, False)
        # Assigning a type to the variable 'self' (line 563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 563, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PaddedBox.draw_frame.__dict__.__setitem__('stypy_localization', localization)
        PaddedBox.draw_frame.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PaddedBox.draw_frame.__dict__.__setitem__('stypy_type_store', module_type_store)
        PaddedBox.draw_frame.__dict__.__setitem__('stypy_function_name', 'PaddedBox.draw_frame')
        PaddedBox.draw_frame.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        PaddedBox.draw_frame.__dict__.__setitem__('stypy_varargs_param_name', None)
        PaddedBox.draw_frame.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PaddedBox.draw_frame.__dict__.__setitem__('stypy_call_defaults', defaults)
        PaddedBox.draw_frame.__dict__.__setitem__('stypy_call_varargs', varargs)
        PaddedBox.draw_frame.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PaddedBox.draw_frame.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PaddedBox.draw_frame', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_frame', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_frame(...)' code ##################

        
        # Assigning a Call to a Name (line 564):
        
        # Assigning a Call to a Name (line 564):
        
        # Call to get_window_extent(...): (line 564)
        # Processing the call arguments (line 564)
        # Getting the type of 'renderer' (line 564)
        renderer_97209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 38), 'renderer', False)
        # Processing the call keyword arguments (line 564)
        kwargs_97210 = {}
        # Getting the type of 'self' (line 564)
        self_97207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 15), 'self', False)
        # Obtaining the member 'get_window_extent' of a type (line 564)
        get_window_extent_97208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 15), self_97207, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 564)
        get_window_extent_call_result_97211 = invoke(stypy.reporting.localization.Localization(__file__, 564, 15), get_window_extent_97208, *[renderer_97209], **kwargs_97210)
        
        # Assigning a type to the variable 'bbox' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'bbox', get_window_extent_call_result_97211)
        
        # Call to update_frame(...): (line 565)
        # Processing the call arguments (line 565)
        # Getting the type of 'bbox' (line 565)
        bbox_97214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 26), 'bbox', False)
        # Processing the call keyword arguments (line 565)
        kwargs_97215 = {}
        # Getting the type of 'self' (line 565)
        self_97212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'self', False)
        # Obtaining the member 'update_frame' of a type (line 565)
        update_frame_97213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 8), self_97212, 'update_frame')
        # Calling update_frame(args, kwargs) (line 565)
        update_frame_call_result_97216 = invoke(stypy.reporting.localization.Localization(__file__, 565, 8), update_frame_97213, *[bbox_97214], **kwargs_97215)
        
        
        # Getting the type of 'self' (line 567)
        self_97217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 11), 'self')
        # Obtaining the member '_drawFrame' of a type (line 567)
        _drawFrame_97218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 11), self_97217, '_drawFrame')
        # Testing the type of an if condition (line 567)
        if_condition_97219 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 567, 8), _drawFrame_97218)
        # Assigning a type to the variable 'if_condition_97219' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 8), 'if_condition_97219', if_condition_97219)
        # SSA begins for if statement (line 567)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 568)
        # Processing the call arguments (line 568)
        # Getting the type of 'renderer' (line 568)
        renderer_97223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 28), 'renderer', False)
        # Processing the call keyword arguments (line 568)
        kwargs_97224 = {}
        # Getting the type of 'self' (line 568)
        self_97220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 12), 'self', False)
        # Obtaining the member 'patch' of a type (line 568)
        patch_97221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 12), self_97220, 'patch')
        # Obtaining the member 'draw' of a type (line 568)
        draw_97222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 12), patch_97221, 'draw')
        # Calling draw(args, kwargs) (line 568)
        draw_call_result_97225 = invoke(stypy.reporting.localization.Localization(__file__, 568, 12), draw_97222, *[renderer_97223], **kwargs_97224)
        
        # SSA join for if statement (line 567)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'draw_frame(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_frame' in the type store
        # Getting the type of 'stypy_return_type' (line 562)
        stypy_return_type_97226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97226)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_frame'
        return stypy_return_type_97226


# Assigning a type to the variable 'PaddedBox' (line 488)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 0), 'PaddedBox', PaddedBox)
# Declaration of the 'DrawingArea' class
# Getting the type of 'OffsetBox' (line 571)
OffsetBox_97227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 18), 'OffsetBox')

class DrawingArea(OffsetBox_97227, ):
    unicode_97228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, (-1)), 'unicode', u'\n    The DrawingArea can contain any Artist as a child. The DrawingArea\n    has a fixed width and height. The position of children relative to\n    the parent is fixed. The children can be clipped at the\n    boundaries of the parent.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_97229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 47), 'float')
        float_97230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 580, 26), 'float')
        # Getting the type of 'False' (line 580)
        False_97231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 35), 'False')
        defaults = [float_97229, float_97230, False_97231]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 579, 4, False)
        # Assigning a type to the variable 'self' (line 580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 580, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DrawingArea.__init__', ['width', 'height', 'xdescent', 'ydescent', 'clip'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['width', 'height', 'xdescent', 'ydescent', 'clip'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_97232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, (-1)), 'unicode', u'\n        *width*, *height* : width and height of the container box.\n        *xdescent*, *ydescent* : descent of the box in x- and y-direction.\n        *clip* : Whether to clip the children\n        ')
        
        # Call to __init__(...): (line 587)
        # Processing the call keyword arguments (line 587)
        kwargs_97239 = {}
        
        # Call to super(...): (line 587)
        # Processing the call arguments (line 587)
        # Getting the type of 'DrawingArea' (line 587)
        DrawingArea_97234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 14), 'DrawingArea', False)
        # Getting the type of 'self' (line 587)
        self_97235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 27), 'self', False)
        # Processing the call keyword arguments (line 587)
        kwargs_97236 = {}
        # Getting the type of 'super' (line 587)
        super_97233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 8), 'super', False)
        # Calling super(args, kwargs) (line 587)
        super_call_result_97237 = invoke(stypy.reporting.localization.Localization(__file__, 587, 8), super_97233, *[DrawingArea_97234, self_97235], **kwargs_97236)
        
        # Obtaining the member '__init__' of a type (line 587)
        init___97238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 8), super_call_result_97237, '__init__')
        # Calling __init__(args, kwargs) (line 587)
        init___call_result_97240 = invoke(stypy.reporting.localization.Localization(__file__, 587, 8), init___97238, *[], **kwargs_97239)
        
        
        # Assigning a Name to a Attribute (line 589):
        
        # Assigning a Name to a Attribute (line 589):
        # Getting the type of 'width' (line 589)
        width_97241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 21), 'width')
        # Getting the type of 'self' (line 589)
        self_97242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 8), 'self')
        # Setting the type of the member 'width' of a type (line 589)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 8), self_97242, 'width', width_97241)
        
        # Assigning a Name to a Attribute (line 590):
        
        # Assigning a Name to a Attribute (line 590):
        # Getting the type of 'height' (line 590)
        height_97243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 22), 'height')
        # Getting the type of 'self' (line 590)
        self_97244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 8), 'self')
        # Setting the type of the member 'height' of a type (line 590)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 8), self_97244, 'height', height_97243)
        
        # Assigning a Name to a Attribute (line 591):
        
        # Assigning a Name to a Attribute (line 591):
        # Getting the type of 'xdescent' (line 591)
        xdescent_97245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 24), 'xdescent')
        # Getting the type of 'self' (line 591)
        self_97246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 8), 'self')
        # Setting the type of the member 'xdescent' of a type (line 591)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 8), self_97246, 'xdescent', xdescent_97245)
        
        # Assigning a Name to a Attribute (line 592):
        
        # Assigning a Name to a Attribute (line 592):
        # Getting the type of 'ydescent' (line 592)
        ydescent_97247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 24), 'ydescent')
        # Getting the type of 'self' (line 592)
        self_97248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 8), 'self')
        # Setting the type of the member 'ydescent' of a type (line 592)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 8), self_97248, 'ydescent', ydescent_97247)
        
        # Assigning a Name to a Attribute (line 593):
        
        # Assigning a Name to a Attribute (line 593):
        # Getting the type of 'clip' (line 593)
        clip_97249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 30), 'clip')
        # Getting the type of 'self' (line 593)
        self_97250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 8), 'self')
        # Setting the type of the member '_clip_children' of a type (line 593)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 8), self_97250, '_clip_children', clip_97249)
        
        # Assigning a Call to a Attribute (line 595):
        
        # Assigning a Call to a Attribute (line 595):
        
        # Call to Affine2D(...): (line 595)
        # Processing the call keyword arguments (line 595)
        kwargs_97253 = {}
        # Getting the type of 'mtransforms' (line 595)
        mtransforms_97251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 32), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 595)
        Affine2D_97252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 32), mtransforms_97251, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 595)
        Affine2D_call_result_97254 = invoke(stypy.reporting.localization.Localization(__file__, 595, 32), Affine2D_97252, *[], **kwargs_97253)
        
        # Getting the type of 'self' (line 595)
        self_97255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 8), 'self')
        # Setting the type of the member 'offset_transform' of a type (line 595)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 8), self_97255, 'offset_transform', Affine2D_call_result_97254)
        
        # Call to clear(...): (line 596)
        # Processing the call keyword arguments (line 596)
        kwargs_97259 = {}
        # Getting the type of 'self' (line 596)
        self_97256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 8), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 596)
        offset_transform_97257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 8), self_97256, 'offset_transform')
        # Obtaining the member 'clear' of a type (line 596)
        clear_97258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 8), offset_transform_97257, 'clear')
        # Calling clear(args, kwargs) (line 596)
        clear_call_result_97260 = invoke(stypy.reporting.localization.Localization(__file__, 596, 8), clear_97258, *[], **kwargs_97259)
        
        
        # Call to translate(...): (line 597)
        # Processing the call arguments (line 597)
        int_97264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 40), 'int')
        int_97265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 43), 'int')
        # Processing the call keyword arguments (line 597)
        kwargs_97266 = {}
        # Getting the type of 'self' (line 597)
        self_97261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 8), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 597)
        offset_transform_97262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 8), self_97261, 'offset_transform')
        # Obtaining the member 'translate' of a type (line 597)
        translate_97263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 8), offset_transform_97262, 'translate')
        # Calling translate(args, kwargs) (line 597)
        translate_call_result_97267 = invoke(stypy.reporting.localization.Localization(__file__, 597, 8), translate_97263, *[int_97264, int_97265], **kwargs_97266)
        
        
        # Assigning a Call to a Attribute (line 599):
        
        # Assigning a Call to a Attribute (line 599):
        
        # Call to Affine2D(...): (line 599)
        # Processing the call keyword arguments (line 599)
        kwargs_97270 = {}
        # Getting the type of 'mtransforms' (line 599)
        mtransforms_97268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 29), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 599)
        Affine2D_97269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 29), mtransforms_97268, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 599)
        Affine2D_call_result_97271 = invoke(stypy.reporting.localization.Localization(__file__, 599, 29), Affine2D_97269, *[], **kwargs_97270)
        
        # Getting the type of 'self' (line 599)
        self_97272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 8), 'self')
        # Setting the type of the member 'dpi_transform' of a type (line 599)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 8), self_97272, 'dpi_transform', Affine2D_call_result_97271)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def clip_children(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'clip_children'
        module_type_store = module_type_store.open_function_context('clip_children', 601, 4, False)
        # Assigning a type to the variable 'self' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DrawingArea.clip_children.__dict__.__setitem__('stypy_localization', localization)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_type_store', module_type_store)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_function_name', 'DrawingArea.clip_children')
        DrawingArea.clip_children.__dict__.__setitem__('stypy_param_names_list', [])
        DrawingArea.clip_children.__dict__.__setitem__('stypy_varargs_param_name', None)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_call_defaults', defaults)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_call_varargs', varargs)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DrawingArea.clip_children', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'clip_children', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'clip_children(...)' code ##################

        unicode_97273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, (-1)), 'unicode', u'\n        If the children of this DrawingArea should be clipped\n        by DrawingArea bounding box.\n        ')
        # Getting the type of 'self' (line 607)
        self_97274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 15), 'self')
        # Obtaining the member '_clip_children' of a type (line 607)
        _clip_children_97275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 15), self_97274, '_clip_children')
        # Assigning a type to the variable 'stypy_return_type' (line 607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 8), 'stypy_return_type', _clip_children_97275)
        
        # ################# End of 'clip_children(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'clip_children' in the type store
        # Getting the type of 'stypy_return_type' (line 601)
        stypy_return_type_97276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97276)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'clip_children'
        return stypy_return_type_97276


    @norecursion
    def clip_children(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'clip_children'
        module_type_store = module_type_store.open_function_context('clip_children', 609, 4, False)
        # Assigning a type to the variable 'self' (line 610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DrawingArea.clip_children.__dict__.__setitem__('stypy_localization', localization)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_type_store', module_type_store)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_function_name', 'DrawingArea.clip_children')
        DrawingArea.clip_children.__dict__.__setitem__('stypy_param_names_list', ['val'])
        DrawingArea.clip_children.__dict__.__setitem__('stypy_varargs_param_name', None)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_call_defaults', defaults)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_call_varargs', varargs)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DrawingArea.clip_children.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DrawingArea.clip_children', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'clip_children', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'clip_children(...)' code ##################

        
        # Assigning a Call to a Attribute (line 611):
        
        # Assigning a Call to a Attribute (line 611):
        
        # Call to bool(...): (line 611)
        # Processing the call arguments (line 611)
        # Getting the type of 'val' (line 611)
        val_97278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 35), 'val', False)
        # Processing the call keyword arguments (line 611)
        kwargs_97279 = {}
        # Getting the type of 'bool' (line 611)
        bool_97277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 30), 'bool', False)
        # Calling bool(args, kwargs) (line 611)
        bool_call_result_97280 = invoke(stypy.reporting.localization.Localization(__file__, 611, 30), bool_97277, *[val_97278], **kwargs_97279)
        
        # Getting the type of 'self' (line 611)
        self_97281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 8), 'self')
        # Setting the type of the member '_clip_children' of a type (line 611)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 8), self_97281, '_clip_children', bool_call_result_97280)
        
        # Assigning a Name to a Attribute (line 612):
        
        # Assigning a Name to a Attribute (line 612):
        # Getting the type of 'True' (line 612)
        True_97282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 21), 'True')
        # Getting the type of 'self' (line 612)
        self_97283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 612)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 8), self_97283, 'stale', True_97282)
        
        # ################# End of 'clip_children(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'clip_children' in the type store
        # Getting the type of 'stypy_return_type' (line 609)
        stypy_return_type_97284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97284)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'clip_children'
        return stypy_return_type_97284


    @norecursion
    def get_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_transform'
        module_type_store = module_type_store.open_function_context('get_transform', 614, 4, False)
        # Assigning a type to the variable 'self' (line 615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DrawingArea.get_transform.__dict__.__setitem__('stypy_localization', localization)
        DrawingArea.get_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DrawingArea.get_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        DrawingArea.get_transform.__dict__.__setitem__('stypy_function_name', 'DrawingArea.get_transform')
        DrawingArea.get_transform.__dict__.__setitem__('stypy_param_names_list', [])
        DrawingArea.get_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        DrawingArea.get_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DrawingArea.get_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        DrawingArea.get_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        DrawingArea.get_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DrawingArea.get_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DrawingArea.get_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_transform(...)' code ##################

        unicode_97285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 618, (-1)), 'unicode', u'\n        Return the :class:`~matplotlib.transforms.Transform` applied\n        to the children\n        ')
        # Getting the type of 'self' (line 619)
        self_97286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 15), 'self')
        # Obtaining the member 'dpi_transform' of a type (line 619)
        dpi_transform_97287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 15), self_97286, 'dpi_transform')
        # Getting the type of 'self' (line 619)
        self_97288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 36), 'self')
        # Obtaining the member 'offset_transform' of a type (line 619)
        offset_transform_97289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 36), self_97288, 'offset_transform')
        # Applying the binary operator '+' (line 619)
        result_add_97290 = python_operator(stypy.reporting.localization.Localization(__file__, 619, 15), '+', dpi_transform_97287, offset_transform_97289)
        
        # Assigning a type to the variable 'stypy_return_type' (line 619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 8), 'stypy_return_type', result_add_97290)
        
        # ################# End of 'get_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 614)
        stypy_return_type_97291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97291)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_transform'
        return stypy_return_type_97291


    @norecursion
    def set_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_transform'
        module_type_store = module_type_store.open_function_context('set_transform', 621, 4, False)
        # Assigning a type to the variable 'self' (line 622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DrawingArea.set_transform.__dict__.__setitem__('stypy_localization', localization)
        DrawingArea.set_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DrawingArea.set_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        DrawingArea.set_transform.__dict__.__setitem__('stypy_function_name', 'DrawingArea.set_transform')
        DrawingArea.set_transform.__dict__.__setitem__('stypy_param_names_list', ['t'])
        DrawingArea.set_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        DrawingArea.set_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DrawingArea.set_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        DrawingArea.set_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        DrawingArea.set_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DrawingArea.set_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DrawingArea.set_transform', ['t'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_transform', localization, ['t'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_transform(...)' code ##################

        unicode_97292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 624, (-1)), 'unicode', u'\n        set_transform is ignored.\n        ')
        pass
        
        # ################# End of 'set_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 621)
        stypy_return_type_97293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97293)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_transform'
        return stypy_return_type_97293


    @norecursion
    def set_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_offset'
        module_type_store = module_type_store.open_function_context('set_offset', 627, 4, False)
        # Assigning a type to the variable 'self' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DrawingArea.set_offset.__dict__.__setitem__('stypy_localization', localization)
        DrawingArea.set_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DrawingArea.set_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        DrawingArea.set_offset.__dict__.__setitem__('stypy_function_name', 'DrawingArea.set_offset')
        DrawingArea.set_offset.__dict__.__setitem__('stypy_param_names_list', ['xy'])
        DrawingArea.set_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        DrawingArea.set_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DrawingArea.set_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        DrawingArea.set_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        DrawingArea.set_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DrawingArea.set_offset.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DrawingArea.set_offset', ['xy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_offset', localization, ['xy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_offset(...)' code ##################

        unicode_97294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 632, (-1)), 'unicode', u'\n        set offset of the container.\n\n        Accept : tuple of x,y cooridnate in disokay units.\n        ')
        
        # Assigning a Name to a Attribute (line 633):
        
        # Assigning a Name to a Attribute (line 633):
        # Getting the type of 'xy' (line 633)
        xy_97295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 23), 'xy')
        # Getting the type of 'self' (line 633)
        self_97296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 8), 'self')
        # Setting the type of the member '_offset' of a type (line 633)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 633, 8), self_97296, '_offset', xy_97295)
        
        # Call to clear(...): (line 635)
        # Processing the call keyword arguments (line 635)
        kwargs_97300 = {}
        # Getting the type of 'self' (line 635)
        self_97297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 8), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 635)
        offset_transform_97298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 8), self_97297, 'offset_transform')
        # Obtaining the member 'clear' of a type (line 635)
        clear_97299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 8), offset_transform_97298, 'clear')
        # Calling clear(args, kwargs) (line 635)
        clear_call_result_97301 = invoke(stypy.reporting.localization.Localization(__file__, 635, 8), clear_97299, *[], **kwargs_97300)
        
        
        # Call to translate(...): (line 636)
        # Processing the call arguments (line 636)
        
        # Obtaining the type of the subscript
        int_97305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 43), 'int')
        # Getting the type of 'xy' (line 636)
        xy_97306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 40), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 636)
        getitem___97307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 40), xy_97306, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 636)
        subscript_call_result_97308 = invoke(stypy.reporting.localization.Localization(__file__, 636, 40), getitem___97307, int_97305)
        
        
        # Obtaining the type of the subscript
        int_97309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 50), 'int')
        # Getting the type of 'xy' (line 636)
        xy_97310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 47), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 636)
        getitem___97311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 47), xy_97310, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 636)
        subscript_call_result_97312 = invoke(stypy.reporting.localization.Localization(__file__, 636, 47), getitem___97311, int_97309)
        
        # Processing the call keyword arguments (line 636)
        kwargs_97313 = {}
        # Getting the type of 'self' (line 636)
        self_97302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 8), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 636)
        offset_transform_97303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 8), self_97302, 'offset_transform')
        # Obtaining the member 'translate' of a type (line 636)
        translate_97304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 8), offset_transform_97303, 'translate')
        # Calling translate(args, kwargs) (line 636)
        translate_call_result_97314 = invoke(stypy.reporting.localization.Localization(__file__, 636, 8), translate_97304, *[subscript_call_result_97308, subscript_call_result_97312], **kwargs_97313)
        
        
        # Assigning a Name to a Attribute (line 637):
        
        # Assigning a Name to a Attribute (line 637):
        # Getting the type of 'True' (line 637)
        True_97315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 21), 'True')
        # Getting the type of 'self' (line 637)
        self_97316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 637)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 8), self_97316, 'stale', True_97315)
        
        # ################# End of 'set_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 627)
        stypy_return_type_97317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97317)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_offset'
        return stypy_return_type_97317


    @norecursion
    def get_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_offset'
        module_type_store = module_type_store.open_function_context('get_offset', 639, 4, False)
        # Assigning a type to the variable 'self' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DrawingArea.get_offset.__dict__.__setitem__('stypy_localization', localization)
        DrawingArea.get_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DrawingArea.get_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        DrawingArea.get_offset.__dict__.__setitem__('stypy_function_name', 'DrawingArea.get_offset')
        DrawingArea.get_offset.__dict__.__setitem__('stypy_param_names_list', [])
        DrawingArea.get_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        DrawingArea.get_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DrawingArea.get_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        DrawingArea.get_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        DrawingArea.get_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DrawingArea.get_offset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DrawingArea.get_offset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_offset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_offset(...)' code ##################

        unicode_97318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, (-1)), 'unicode', u'\n        return offset of the container.\n        ')
        # Getting the type of 'self' (line 643)
        self_97319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 15), 'self')
        # Obtaining the member '_offset' of a type (line 643)
        _offset_97320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 15), self_97319, '_offset')
        # Assigning a type to the variable 'stypy_return_type' (line 643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 8), 'stypy_return_type', _offset_97320)
        
        # ################# End of 'get_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 639)
        stypy_return_type_97321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97321)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_offset'
        return stypy_return_type_97321


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 645, 4, False)
        # Assigning a type to the variable 'self' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DrawingArea.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        DrawingArea.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DrawingArea.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        DrawingArea.get_window_extent.__dict__.__setitem__('stypy_function_name', 'DrawingArea.get_window_extent')
        DrawingArea.get_window_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        DrawingArea.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        DrawingArea.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DrawingArea.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        DrawingArea.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        DrawingArea.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DrawingArea.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DrawingArea.get_window_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        unicode_97322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, (-1)), 'unicode', u'\n        get the bounding box in display space.\n        ')
        
        # Assigning a Call to a Tuple (line 649):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent(...): (line 649)
        # Processing the call arguments (line 649)
        # Getting the type of 'renderer' (line 649)
        renderer_97325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 39), 'renderer', False)
        # Processing the call keyword arguments (line 649)
        kwargs_97326 = {}
        # Getting the type of 'self' (line 649)
        self_97323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 23), 'self', False)
        # Obtaining the member 'get_extent' of a type (line 649)
        get_extent_97324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 23), self_97323, 'get_extent')
        # Calling get_extent(args, kwargs) (line 649)
        get_extent_call_result_97327 = invoke(stypy.reporting.localization.Localization(__file__, 649, 23), get_extent_97324, *[renderer_97325], **kwargs_97326)
        
        # Assigning a type to the variable 'call_assignment_95725' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'call_assignment_95725', get_extent_call_result_97327)
        
        # Assigning a Call to a Name (line 649):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 649, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97331 = {}
        # Getting the type of 'call_assignment_95725' (line 649)
        call_assignment_95725_97328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'call_assignment_95725', False)
        # Obtaining the member '__getitem__' of a type (line 649)
        getitem___97329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 8), call_assignment_95725_97328, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97332 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97329, *[int_97330], **kwargs_97331)
        
        # Assigning a type to the variable 'call_assignment_95726' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'call_assignment_95726', getitem___call_result_97332)
        
        # Assigning a Name to a Name (line 649):
        # Getting the type of 'call_assignment_95726' (line 649)
        call_assignment_95726_97333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'call_assignment_95726')
        # Assigning a type to the variable 'w' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'w', call_assignment_95726_97333)
        
        # Assigning a Call to a Name (line 649):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 649, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97337 = {}
        # Getting the type of 'call_assignment_95725' (line 649)
        call_assignment_95725_97334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'call_assignment_95725', False)
        # Obtaining the member '__getitem__' of a type (line 649)
        getitem___97335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 8), call_assignment_95725_97334, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97338 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97335, *[int_97336], **kwargs_97337)
        
        # Assigning a type to the variable 'call_assignment_95727' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'call_assignment_95727', getitem___call_result_97338)
        
        # Assigning a Name to a Name (line 649):
        # Getting the type of 'call_assignment_95727' (line 649)
        call_assignment_95727_97339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'call_assignment_95727')
        # Assigning a type to the variable 'h' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 11), 'h', call_assignment_95727_97339)
        
        # Assigning a Call to a Name (line 649):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 649, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97343 = {}
        # Getting the type of 'call_assignment_95725' (line 649)
        call_assignment_95725_97340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'call_assignment_95725', False)
        # Obtaining the member '__getitem__' of a type (line 649)
        getitem___97341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 8), call_assignment_95725_97340, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97344 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97341, *[int_97342], **kwargs_97343)
        
        # Assigning a type to the variable 'call_assignment_95728' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'call_assignment_95728', getitem___call_result_97344)
        
        # Assigning a Name to a Name (line 649):
        # Getting the type of 'call_assignment_95728' (line 649)
        call_assignment_95728_97345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'call_assignment_95728')
        # Assigning a type to the variable 'xd' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 14), 'xd', call_assignment_95728_97345)
        
        # Assigning a Call to a Name (line 649):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 649, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97349 = {}
        # Getting the type of 'call_assignment_95725' (line 649)
        call_assignment_95725_97346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'call_assignment_95725', False)
        # Obtaining the member '__getitem__' of a type (line 649)
        getitem___97347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 8), call_assignment_95725_97346, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97350 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97347, *[int_97348], **kwargs_97349)
        
        # Assigning a type to the variable 'call_assignment_95729' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'call_assignment_95729', getitem___call_result_97350)
        
        # Assigning a Name to a Name (line 649):
        # Getting the type of 'call_assignment_95729' (line 649)
        call_assignment_95729_97351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'call_assignment_95729')
        # Assigning a type to the variable 'yd' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 18), 'yd', call_assignment_95729_97351)
        
        # Assigning a Call to a Tuple (line 650):
        
        # Assigning a Call to a Name:
        
        # Call to get_offset(...): (line 650)
        # Processing the call keyword arguments (line 650)
        kwargs_97354 = {}
        # Getting the type of 'self' (line 650)
        self_97352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 17), 'self', False)
        # Obtaining the member 'get_offset' of a type (line 650)
        get_offset_97353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 17), self_97352, 'get_offset')
        # Calling get_offset(args, kwargs) (line 650)
        get_offset_call_result_97355 = invoke(stypy.reporting.localization.Localization(__file__, 650, 17), get_offset_97353, *[], **kwargs_97354)
        
        # Assigning a type to the variable 'call_assignment_95730' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'call_assignment_95730', get_offset_call_result_97355)
        
        # Assigning a Call to a Name (line 650):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97359 = {}
        # Getting the type of 'call_assignment_95730' (line 650)
        call_assignment_95730_97356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'call_assignment_95730', False)
        # Obtaining the member '__getitem__' of a type (line 650)
        getitem___97357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 8), call_assignment_95730_97356, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97360 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97357, *[int_97358], **kwargs_97359)
        
        # Assigning a type to the variable 'call_assignment_95731' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'call_assignment_95731', getitem___call_result_97360)
        
        # Assigning a Name to a Name (line 650):
        # Getting the type of 'call_assignment_95731' (line 650)
        call_assignment_95731_97361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'call_assignment_95731')
        # Assigning a type to the variable 'ox' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'ox', call_assignment_95731_97361)
        
        # Assigning a Call to a Name (line 650):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97365 = {}
        # Getting the type of 'call_assignment_95730' (line 650)
        call_assignment_95730_97362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'call_assignment_95730', False)
        # Obtaining the member '__getitem__' of a type (line 650)
        getitem___97363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 8), call_assignment_95730_97362, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97366 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97363, *[int_97364], **kwargs_97365)
        
        # Assigning a type to the variable 'call_assignment_95732' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'call_assignment_95732', getitem___call_result_97366)
        
        # Assigning a Name to a Name (line 650):
        # Getting the type of 'call_assignment_95732' (line 650)
        call_assignment_95732_97367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'call_assignment_95732')
        # Assigning a type to the variable 'oy' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 12), 'oy', call_assignment_95732_97367)
        
        # Call to from_bounds(...): (line 652)
        # Processing the call arguments (line 652)
        # Getting the type of 'ox' (line 652)
        ox_97371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 44), 'ox', False)
        # Getting the type of 'xd' (line 652)
        xd_97372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 49), 'xd', False)
        # Applying the binary operator '-' (line 652)
        result_sub_97373 = python_operator(stypy.reporting.localization.Localization(__file__, 652, 44), '-', ox_97371, xd_97372)
        
        # Getting the type of 'oy' (line 652)
        oy_97374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 53), 'oy', False)
        # Getting the type of 'yd' (line 652)
        yd_97375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 58), 'yd', False)
        # Applying the binary operator '-' (line 652)
        result_sub_97376 = python_operator(stypy.reporting.localization.Localization(__file__, 652, 53), '-', oy_97374, yd_97375)
        
        # Getting the type of 'w' (line 652)
        w_97377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 62), 'w', False)
        # Getting the type of 'h' (line 652)
        h_97378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 65), 'h', False)
        # Processing the call keyword arguments (line 652)
        kwargs_97379 = {}
        # Getting the type of 'mtransforms' (line 652)
        mtransforms_97368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 15), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 652)
        Bbox_97369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 15), mtransforms_97368, 'Bbox')
        # Obtaining the member 'from_bounds' of a type (line 652)
        from_bounds_97370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 15), Bbox_97369, 'from_bounds')
        # Calling from_bounds(args, kwargs) (line 652)
        from_bounds_call_result_97380 = invoke(stypy.reporting.localization.Localization(__file__, 652, 15), from_bounds_97370, *[result_sub_97373, result_sub_97376, w_97377, h_97378], **kwargs_97379)
        
        # Assigning a type to the variable 'stypy_return_type' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'stypy_return_type', from_bounds_call_result_97380)
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 645)
        stypy_return_type_97381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97381)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_97381


    @norecursion
    def get_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_extent'
        module_type_store = module_type_store.open_function_context('get_extent', 654, 4, False)
        # Assigning a type to the variable 'self' (line 655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DrawingArea.get_extent.__dict__.__setitem__('stypy_localization', localization)
        DrawingArea.get_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DrawingArea.get_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        DrawingArea.get_extent.__dict__.__setitem__('stypy_function_name', 'DrawingArea.get_extent')
        DrawingArea.get_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        DrawingArea.get_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        DrawingArea.get_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DrawingArea.get_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        DrawingArea.get_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        DrawingArea.get_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DrawingArea.get_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DrawingArea.get_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_extent(...)' code ##################

        unicode_97382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 657, (-1)), 'unicode', u'\n        Return with, height, xdescent, ydescent of box\n        ')
        
        # Assigning a Call to a Name (line 659):
        
        # Assigning a Call to a Name (line 659):
        
        # Call to points_to_pixels(...): (line 659)
        # Processing the call arguments (line 659)
        float_97385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 659, 44), 'float')
        # Processing the call keyword arguments (line 659)
        kwargs_97386 = {}
        # Getting the type of 'renderer' (line 659)
        renderer_97383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 18), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 659)
        points_to_pixels_97384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 18), renderer_97383, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 659)
        points_to_pixels_call_result_97387 = invoke(stypy.reporting.localization.Localization(__file__, 659, 18), points_to_pixels_97384, *[float_97385], **kwargs_97386)
        
        # Assigning a type to the variable 'dpi_cor' (line 659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 659, 8), 'dpi_cor', points_to_pixels_call_result_97387)
        
        # Obtaining an instance of the builtin type 'tuple' (line 660)
        tuple_97388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 660, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 660)
        # Adding element type (line 660)
        # Getting the type of 'self' (line 660)
        self_97389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 15), 'self')
        # Obtaining the member 'width' of a type (line 660)
        width_97390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 15), self_97389, 'width')
        # Getting the type of 'dpi_cor' (line 660)
        dpi_cor_97391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 28), 'dpi_cor')
        # Applying the binary operator '*' (line 660)
        result_mul_97392 = python_operator(stypy.reporting.localization.Localization(__file__, 660, 15), '*', width_97390, dpi_cor_97391)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 660, 15), tuple_97388, result_mul_97392)
        # Adding element type (line 660)
        # Getting the type of 'self' (line 660)
        self_97393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 37), 'self')
        # Obtaining the member 'height' of a type (line 660)
        height_97394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 37), self_97393, 'height')
        # Getting the type of 'dpi_cor' (line 660)
        dpi_cor_97395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 51), 'dpi_cor')
        # Applying the binary operator '*' (line 660)
        result_mul_97396 = python_operator(stypy.reporting.localization.Localization(__file__, 660, 37), '*', height_97394, dpi_cor_97395)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 660, 15), tuple_97388, result_mul_97396)
        # Adding element type (line 660)
        # Getting the type of 'self' (line 661)
        self_97397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 15), 'self')
        # Obtaining the member 'xdescent' of a type (line 661)
        xdescent_97398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 15), self_97397, 'xdescent')
        # Getting the type of 'dpi_cor' (line 661)
        dpi_cor_97399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 31), 'dpi_cor')
        # Applying the binary operator '*' (line 661)
        result_mul_97400 = python_operator(stypy.reporting.localization.Localization(__file__, 661, 15), '*', xdescent_97398, dpi_cor_97399)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 660, 15), tuple_97388, result_mul_97400)
        # Adding element type (line 660)
        # Getting the type of 'self' (line 661)
        self_97401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 40), 'self')
        # Obtaining the member 'ydescent' of a type (line 661)
        ydescent_97402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 40), self_97401, 'ydescent')
        # Getting the type of 'dpi_cor' (line 661)
        dpi_cor_97403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 56), 'dpi_cor')
        # Applying the binary operator '*' (line 661)
        result_mul_97404 = python_operator(stypy.reporting.localization.Localization(__file__, 661, 40), '*', ydescent_97402, dpi_cor_97403)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 660, 15), tuple_97388, result_mul_97404)
        
        # Assigning a type to the variable 'stypy_return_type' (line 660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 8), 'stypy_return_type', tuple_97388)
        
        # ################# End of 'get_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 654)
        stypy_return_type_97405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97405)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_extent'
        return stypy_return_type_97405


    @norecursion
    def add_artist(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_artist'
        module_type_store = module_type_store.open_function_context('add_artist', 663, 4, False)
        # Assigning a type to the variable 'self' (line 664)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DrawingArea.add_artist.__dict__.__setitem__('stypy_localization', localization)
        DrawingArea.add_artist.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DrawingArea.add_artist.__dict__.__setitem__('stypy_type_store', module_type_store)
        DrawingArea.add_artist.__dict__.__setitem__('stypy_function_name', 'DrawingArea.add_artist')
        DrawingArea.add_artist.__dict__.__setitem__('stypy_param_names_list', ['a'])
        DrawingArea.add_artist.__dict__.__setitem__('stypy_varargs_param_name', None)
        DrawingArea.add_artist.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DrawingArea.add_artist.__dict__.__setitem__('stypy_call_defaults', defaults)
        DrawingArea.add_artist.__dict__.__setitem__('stypy_call_varargs', varargs)
        DrawingArea.add_artist.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DrawingArea.add_artist.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DrawingArea.add_artist', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_artist', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_artist(...)' code ##################

        unicode_97406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, 8), 'unicode', u'Add any :class:`~matplotlib.artist.Artist` to the container box')
        
        # Call to append(...): (line 665)
        # Processing the call arguments (line 665)
        # Getting the type of 'a' (line 665)
        a_97410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 30), 'a', False)
        # Processing the call keyword arguments (line 665)
        kwargs_97411 = {}
        # Getting the type of 'self' (line 665)
        self_97407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 8), 'self', False)
        # Obtaining the member '_children' of a type (line 665)
        _children_97408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 8), self_97407, '_children')
        # Obtaining the member 'append' of a type (line 665)
        append_97409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 8), _children_97408, 'append')
        # Calling append(args, kwargs) (line 665)
        append_call_result_97412 = invoke(stypy.reporting.localization.Localization(__file__, 665, 8), append_97409, *[a_97410], **kwargs_97411)
        
        
        
        
        # Call to is_transform_set(...): (line 666)
        # Processing the call keyword arguments (line 666)
        kwargs_97415 = {}
        # Getting the type of 'a' (line 666)
        a_97413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 15), 'a', False)
        # Obtaining the member 'is_transform_set' of a type (line 666)
        is_transform_set_97414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 15), a_97413, 'is_transform_set')
        # Calling is_transform_set(args, kwargs) (line 666)
        is_transform_set_call_result_97416 = invoke(stypy.reporting.localization.Localization(__file__, 666, 15), is_transform_set_97414, *[], **kwargs_97415)
        
        # Applying the 'not' unary operator (line 666)
        result_not__97417 = python_operator(stypy.reporting.localization.Localization(__file__, 666, 11), 'not', is_transform_set_call_result_97416)
        
        # Testing the type of an if condition (line 666)
        if_condition_97418 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 666, 8), result_not__97417)
        # Assigning a type to the variable 'if_condition_97418' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 8), 'if_condition_97418', if_condition_97418)
        # SSA begins for if statement (line 666)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_transform(...): (line 667)
        # Processing the call arguments (line 667)
        
        # Call to get_transform(...): (line 667)
        # Processing the call keyword arguments (line 667)
        kwargs_97423 = {}
        # Getting the type of 'self' (line 667)
        self_97421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 28), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 667)
        get_transform_97422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 28), self_97421, 'get_transform')
        # Calling get_transform(args, kwargs) (line 667)
        get_transform_call_result_97424 = invoke(stypy.reporting.localization.Localization(__file__, 667, 28), get_transform_97422, *[], **kwargs_97423)
        
        # Processing the call keyword arguments (line 667)
        kwargs_97425 = {}
        # Getting the type of 'a' (line 667)
        a_97419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 12), 'a', False)
        # Obtaining the member 'set_transform' of a type (line 667)
        set_transform_97420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 12), a_97419, 'set_transform')
        # Calling set_transform(args, kwargs) (line 667)
        set_transform_call_result_97426 = invoke(stypy.reporting.localization.Localization(__file__, 667, 12), set_transform_97420, *[get_transform_call_result_97424], **kwargs_97425)
        
        # SSA join for if statement (line 666)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 668)
        self_97427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 11), 'self')
        # Obtaining the member 'axes' of a type (line 668)
        axes_97428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 11), self_97427, 'axes')
        # Getting the type of 'None' (line 668)
        None_97429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 28), 'None')
        # Applying the binary operator 'isnot' (line 668)
        result_is_not_97430 = python_operator(stypy.reporting.localization.Localization(__file__, 668, 11), 'isnot', axes_97428, None_97429)
        
        # Testing the type of an if condition (line 668)
        if_condition_97431 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 668, 8), result_is_not_97430)
        # Assigning a type to the variable 'if_condition_97431' (line 668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 668, 8), 'if_condition_97431', if_condition_97431)
        # SSA begins for if statement (line 668)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 669):
        
        # Assigning a Attribute to a Attribute (line 669):
        # Getting the type of 'self' (line 669)
        self_97432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 21), 'self')
        # Obtaining the member 'axes' of a type (line 669)
        axes_97433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 21), self_97432, 'axes')
        # Getting the type of 'a' (line 669)
        a_97434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 12), 'a')
        # Setting the type of the member 'axes' of a type (line 669)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 12), a_97434, 'axes', axes_97433)
        # SSA join for if statement (line 668)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 670):
        
        # Assigning a Attribute to a Name (line 670):
        # Getting the type of 'self' (line 670)
        self_97435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 14), 'self')
        # Obtaining the member 'figure' of a type (line 670)
        figure_97436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 14), self_97435, 'figure')
        # Assigning a type to the variable 'fig' (line 670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 670, 8), 'fig', figure_97436)
        
        # Type idiom detected: calculating its left and rigth part (line 671)
        # Getting the type of 'fig' (line 671)
        fig_97437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 8), 'fig')
        # Getting the type of 'None' (line 671)
        None_97438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 22), 'None')
        
        (may_be_97439, more_types_in_union_97440) = may_not_be_none(fig_97437, None_97438)

        if may_be_97439:

            if more_types_in_union_97440:
                # Runtime conditional SSA (line 671)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_figure(...): (line 672)
            # Processing the call arguments (line 672)
            # Getting the type of 'fig' (line 672)
            fig_97443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 25), 'fig', False)
            # Processing the call keyword arguments (line 672)
            kwargs_97444 = {}
            # Getting the type of 'a' (line 672)
            a_97441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 12), 'a', False)
            # Obtaining the member 'set_figure' of a type (line 672)
            set_figure_97442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 12), a_97441, 'set_figure')
            # Calling set_figure(args, kwargs) (line 672)
            set_figure_call_result_97445 = invoke(stypy.reporting.localization.Localization(__file__, 672, 12), set_figure_97442, *[fig_97443], **kwargs_97444)
            

            if more_types_in_union_97440:
                # SSA join for if statement (line 671)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'add_artist(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_artist' in the type store
        # Getting the type of 'stypy_return_type' (line 663)
        stypy_return_type_97446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97446)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_artist'
        return stypy_return_type_97446


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 674, 4, False)
        # Assigning a type to the variable 'self' (line 675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DrawingArea.draw.__dict__.__setitem__('stypy_localization', localization)
        DrawingArea.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DrawingArea.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        DrawingArea.draw.__dict__.__setitem__('stypy_function_name', 'DrawingArea.draw')
        DrawingArea.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        DrawingArea.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        DrawingArea.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DrawingArea.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        DrawingArea.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        DrawingArea.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DrawingArea.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DrawingArea.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_97447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 677, (-1)), 'unicode', u'\n        Draw the children\n        ')
        
        # Assigning a Call to a Name (line 679):
        
        # Assigning a Call to a Name (line 679):
        
        # Call to points_to_pixels(...): (line 679)
        # Processing the call arguments (line 679)
        float_97450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 44), 'float')
        # Processing the call keyword arguments (line 679)
        kwargs_97451 = {}
        # Getting the type of 'renderer' (line 679)
        renderer_97448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 18), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 679)
        points_to_pixels_97449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 18), renderer_97448, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 679)
        points_to_pixels_call_result_97452 = invoke(stypy.reporting.localization.Localization(__file__, 679, 18), points_to_pixels_97449, *[float_97450], **kwargs_97451)
        
        # Assigning a type to the variable 'dpi_cor' (line 679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'dpi_cor', points_to_pixels_call_result_97452)
        
        # Call to clear(...): (line 680)
        # Processing the call keyword arguments (line 680)
        kwargs_97456 = {}
        # Getting the type of 'self' (line 680)
        self_97453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 8), 'self', False)
        # Obtaining the member 'dpi_transform' of a type (line 680)
        dpi_transform_97454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 8), self_97453, 'dpi_transform')
        # Obtaining the member 'clear' of a type (line 680)
        clear_97455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 8), dpi_transform_97454, 'clear')
        # Calling clear(args, kwargs) (line 680)
        clear_call_result_97457 = invoke(stypy.reporting.localization.Localization(__file__, 680, 8), clear_97455, *[], **kwargs_97456)
        
        
        # Call to scale(...): (line 681)
        # Processing the call arguments (line 681)
        # Getting the type of 'dpi_cor' (line 681)
        dpi_cor_97461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 33), 'dpi_cor', False)
        # Getting the type of 'dpi_cor' (line 681)
        dpi_cor_97462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 42), 'dpi_cor', False)
        # Processing the call keyword arguments (line 681)
        kwargs_97463 = {}
        # Getting the type of 'self' (line 681)
        self_97458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 8), 'self', False)
        # Obtaining the member 'dpi_transform' of a type (line 681)
        dpi_transform_97459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 8), self_97458, 'dpi_transform')
        # Obtaining the member 'scale' of a type (line 681)
        scale_97460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 8), dpi_transform_97459, 'scale')
        # Calling scale(args, kwargs) (line 681)
        scale_call_result_97464 = invoke(stypy.reporting.localization.Localization(__file__, 681, 8), scale_97460, *[dpi_cor_97461, dpi_cor_97462], **kwargs_97463)
        
        
        # Assigning a Call to a Name (line 686):
        
        # Assigning a Call to a Name (line 686):
        
        # Call to TransformedPath(...): (line 686)
        # Processing the call arguments (line 686)
        
        # Call to Path(...): (line 687)
        # Processing the call arguments (line 687)
        
        # Obtaining an instance of the builtin type 'list' (line 687)
        list_97469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 687)
        # Adding element type (line 687)
        
        # Obtaining an instance of the builtin type 'list' (line 687)
        list_97470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 687)
        # Adding element type (line 687)
        int_97471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 24), list_97470, int_97471)
        # Adding element type (line 687)
        int_97472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 24), list_97470, int_97472)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 23), list_97469, list_97470)
        # Adding element type (line 687)
        
        # Obtaining an instance of the builtin type 'list' (line 687)
        list_97473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 687)
        # Adding element type (line 687)
        int_97474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 32), list_97473, int_97474)
        # Adding element type (line 687)
        # Getting the type of 'self' (line 687)
        self_97475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 36), 'self', False)
        # Obtaining the member 'height' of a type (line 687)
        height_97476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 36), self_97475, 'height')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 32), list_97473, height_97476)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 23), list_97469, list_97473)
        # Adding element type (line 687)
        
        # Obtaining an instance of the builtin type 'list' (line 688)
        list_97477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 688)
        # Adding element type (line 688)
        # Getting the type of 'self' (line 688)
        self_97478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 25), 'self', False)
        # Obtaining the member 'width' of a type (line 688)
        width_97479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 25), self_97478, 'width')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 688, 24), list_97477, width_97479)
        # Adding element type (line 688)
        # Getting the type of 'self' (line 688)
        self_97480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 37), 'self', False)
        # Obtaining the member 'height' of a type (line 688)
        height_97481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 37), self_97480, 'height')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 688, 24), list_97477, height_97481)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 23), list_97469, list_97477)
        # Adding element type (line 687)
        
        # Obtaining an instance of the builtin type 'list' (line 689)
        list_97482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 689, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 689)
        # Adding element type (line 689)
        # Getting the type of 'self' (line 689)
        self_97483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 25), 'self', False)
        # Obtaining the member 'width' of a type (line 689)
        width_97484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 25), self_97483, 'width')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 689, 24), list_97482, width_97484)
        # Adding element type (line 689)
        int_97485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 689, 37), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 689, 24), list_97482, int_97485)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 23), list_97469, list_97482)
        
        # Processing the call keyword arguments (line 687)
        kwargs_97486 = {}
        # Getting the type of 'mpath' (line 687)
        mpath_97467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 12), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 687)
        Path_97468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 12), mpath_97467, 'Path')
        # Calling Path(args, kwargs) (line 687)
        Path_call_result_97487 = invoke(stypy.reporting.localization.Localization(__file__, 687, 12), Path_97468, *[list_97469], **kwargs_97486)
        
        
        # Call to get_transform(...): (line 690)
        # Processing the call keyword arguments (line 690)
        kwargs_97490 = {}
        # Getting the type of 'self' (line 690)
        self_97488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 12), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 690)
        get_transform_97489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 690, 12), self_97488, 'get_transform')
        # Calling get_transform(args, kwargs) (line 690)
        get_transform_call_result_97491 = invoke(stypy.reporting.localization.Localization(__file__, 690, 12), get_transform_97489, *[], **kwargs_97490)
        
        # Processing the call keyword arguments (line 686)
        kwargs_97492 = {}
        # Getting the type of 'mtransforms' (line 686)
        mtransforms_97465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 16), 'mtransforms', False)
        # Obtaining the member 'TransformedPath' of a type (line 686)
        TransformedPath_97466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 686, 16), mtransforms_97465, 'TransformedPath')
        # Calling TransformedPath(args, kwargs) (line 686)
        TransformedPath_call_result_97493 = invoke(stypy.reporting.localization.Localization(__file__, 686, 16), TransformedPath_97466, *[Path_call_result_97487, get_transform_call_result_97491], **kwargs_97492)
        
        # Assigning a type to the variable 'tpath' (line 686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 686, 8), 'tpath', TransformedPath_call_result_97493)
        
        # Getting the type of 'self' (line 691)
        self_97494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 17), 'self')
        # Obtaining the member '_children' of a type (line 691)
        _children_97495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 17), self_97494, '_children')
        # Testing the type of a for loop iterable (line 691)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 691, 8), _children_97495)
        # Getting the type of the for loop variable (line 691)
        for_loop_var_97496 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 691, 8), _children_97495)
        # Assigning a type to the variable 'c' (line 691)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 8), 'c', for_loop_var_97496)
        # SSA begins for a for statement (line 691)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 692)
        self_97497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 15), 'self')
        # Obtaining the member '_clip_children' of a type (line 692)
        _clip_children_97498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 15), self_97497, '_clip_children')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'c' (line 692)
        c_97499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 44), 'c')
        # Obtaining the member 'clipbox' of a type (line 692)
        clipbox_97500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 44), c_97499, 'clipbox')
        # Getting the type of 'c' (line 692)
        c_97501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 57), 'c')
        # Obtaining the member '_clippath' of a type (line 692)
        _clippath_97502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 57), c_97501, '_clippath')
        # Applying the binary operator 'or' (line 692)
        result_or_keyword_97503 = python_operator(stypy.reporting.localization.Localization(__file__, 692, 44), 'or', clipbox_97500, _clippath_97502)
        
        # Applying the 'not' unary operator (line 692)
        result_not__97504 = python_operator(stypy.reporting.localization.Localization(__file__, 692, 39), 'not', result_or_keyword_97503)
        
        # Applying the binary operator 'and' (line 692)
        result_and_keyword_97505 = python_operator(stypy.reporting.localization.Localization(__file__, 692, 15), 'and', _clip_children_97498, result_not__97504)
        
        # Testing the type of an if condition (line 692)
        if_condition_97506 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 692, 12), result_and_keyword_97505)
        # Assigning a type to the variable 'if_condition_97506' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'if_condition_97506', if_condition_97506)
        # SSA begins for if statement (line 692)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_clip_path(...): (line 693)
        # Processing the call arguments (line 693)
        # Getting the type of 'tpath' (line 693)
        tpath_97509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 32), 'tpath', False)
        # Processing the call keyword arguments (line 693)
        kwargs_97510 = {}
        # Getting the type of 'c' (line 693)
        c_97507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 16), 'c', False)
        # Obtaining the member 'set_clip_path' of a type (line 693)
        set_clip_path_97508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 693, 16), c_97507, 'set_clip_path')
        # Calling set_clip_path(args, kwargs) (line 693)
        set_clip_path_call_result_97511 = invoke(stypy.reporting.localization.Localization(__file__, 693, 16), set_clip_path_97508, *[tpath_97509], **kwargs_97510)
        
        # SSA join for if statement (line 692)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw(...): (line 694)
        # Processing the call arguments (line 694)
        # Getting the type of 'renderer' (line 694)
        renderer_97514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 19), 'renderer', False)
        # Processing the call keyword arguments (line 694)
        kwargs_97515 = {}
        # Getting the type of 'c' (line 694)
        c_97512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 12), 'c', False)
        # Obtaining the member 'draw' of a type (line 694)
        draw_97513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 12), c_97512, 'draw')
        # Calling draw(args, kwargs) (line 694)
        draw_call_result_97516 = invoke(stypy.reporting.localization.Localization(__file__, 694, 12), draw_97513, *[renderer_97514], **kwargs_97515)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to bbox_artist(...): (line 696)
        # Processing the call arguments (line 696)
        # Getting the type of 'self' (line 696)
        self_97518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 20), 'self', False)
        # Getting the type of 'renderer' (line 696)
        renderer_97519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 26), 'renderer', False)
        # Processing the call keyword arguments (line 696)
        # Getting the type of 'False' (line 696)
        False_97520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 41), 'False', False)
        keyword_97521 = False_97520
        
        # Call to dict(...): (line 696)
        # Processing the call keyword arguments (line 696)
        float_97523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 63), 'float')
        keyword_97524 = float_97523
        kwargs_97525 = {'pad': keyword_97524}
        # Getting the type of 'dict' (line 696)
        dict_97522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 54), 'dict', False)
        # Calling dict(args, kwargs) (line 696)
        dict_call_result_97526 = invoke(stypy.reporting.localization.Localization(__file__, 696, 54), dict_97522, *[], **kwargs_97525)
        
        keyword_97527 = dict_call_result_97526
        kwargs_97528 = {'props': keyword_97527, 'fill': keyword_97521}
        # Getting the type of 'bbox_artist' (line 696)
        bbox_artist_97517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 8), 'bbox_artist', False)
        # Calling bbox_artist(args, kwargs) (line 696)
        bbox_artist_call_result_97529 = invoke(stypy.reporting.localization.Localization(__file__, 696, 8), bbox_artist_97517, *[self_97518, renderer_97519], **kwargs_97528)
        
        
        # Assigning a Name to a Attribute (line 697):
        
        # Assigning a Name to a Attribute (line 697):
        # Getting the type of 'False' (line 697)
        False_97530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 21), 'False')
        # Getting the type of 'self' (line 697)
        self_97531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 697)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 8), self_97531, 'stale', False_97530)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 674)
        stypy_return_type_97532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97532)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_97532


# Assigning a type to the variable 'DrawingArea' (line 571)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 0), 'DrawingArea', DrawingArea)
# Declaration of the 'TextArea' class
# Getting the type of 'OffsetBox' (line 700)
OffsetBox_97533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 15), 'OffsetBox')

class TextArea(OffsetBox_97533, ):
    unicode_97534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 706, (-1)), 'unicode', u'\n    The TextArea is contains a single Text instance. The text is\n    placed at (0,0) with baseline+left alignment. The width and height\n    of the TextArea instance is the width and height of the its child\n    text.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 708)
        None_97535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 27), 'None')
        # Getting the type of 'None' (line 709)
        None_97536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 35), 'None')
        # Getting the type of 'True' (line 710)
        True_97537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 32), 'True')
        defaults = [None_97535, None_97536, True_97537]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 707, 4, False)
        # Assigning a type to the variable 'self' (line 708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextArea.__init__', ['s', 'textprops', 'multilinebaseline', 'minimumdescent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['s', 'textprops', 'multilinebaseline', 'minimumdescent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_97538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, (-1)), 'unicode', u'\n        Parameters\n        ----------\n        s : str\n            a string to be displayed.\n\n        textprops : `~matplotlib.font_manager.FontProperties`, optional\n\n        multilinebaseline : bool, optional\n            If `True`, baseline for multiline text is adjusted so that\n            it is (approximatedly) center-aligned with singleline\n            text.\n\n        minimumdescent : bool, optional\n            If `True`, the box has a minimum descent of "p".\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 728)
        # Getting the type of 'textprops' (line 728)
        textprops_97539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 11), 'textprops')
        # Getting the type of 'None' (line 728)
        None_97540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 24), 'None')
        
        (may_be_97541, more_types_in_union_97542) = may_be_none(textprops_97539, None_97540)

        if may_be_97541:

            if more_types_in_union_97542:
                # Runtime conditional SSA (line 728)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Dict to a Name (line 729):
            
            # Assigning a Dict to a Name (line 729):
            
            # Obtaining an instance of the builtin type 'dict' (line 729)
            dict_97543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 24), 'dict')
            # Adding type elements to the builtin type 'dict' instance (line 729)
            
            # Assigning a type to the variable 'textprops' (line 729)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 12), 'textprops', dict_97543)

            if more_types_in_union_97542:
                # SSA join for if statement (line 728)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        unicode_97544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 11), 'unicode', u'va')
        # Getting the type of 'textprops' (line 731)
        textprops_97545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 23), 'textprops')
        # Applying the binary operator 'notin' (line 731)
        result_contains_97546 = python_operator(stypy.reporting.localization.Localization(__file__, 731, 11), 'notin', unicode_97544, textprops_97545)
        
        # Testing the type of an if condition (line 731)
        if_condition_97547 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 731, 8), result_contains_97546)
        # Assigning a type to the variable 'if_condition_97547' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 8), 'if_condition_97547', if_condition_97547)
        # SSA begins for if statement (line 731)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Subscript (line 732):
        
        # Assigning a Str to a Subscript (line 732):
        unicode_97548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 30), 'unicode', u'baseline')
        # Getting the type of 'textprops' (line 732)
        textprops_97549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 12), 'textprops')
        unicode_97550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 22), 'unicode', u'va')
        # Storing an element on a container (line 732)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 732, 12), textprops_97549, (unicode_97550, unicode_97548))
        # SSA join for if statement (line 731)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 734):
        
        # Assigning a Call to a Attribute (line 734):
        
        # Call to Text(...): (line 734)
        # Processing the call arguments (line 734)
        int_97553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 32), 'int')
        int_97554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 35), 'int')
        # Getting the type of 's' (line 734)
        s_97555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 38), 's', False)
        # Processing the call keyword arguments (line 734)
        # Getting the type of 'textprops' (line 734)
        textprops_97556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 43), 'textprops', False)
        kwargs_97557 = {'textprops_97556': textprops_97556}
        # Getting the type of 'mtext' (line 734)
        mtext_97551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 21), 'mtext', False)
        # Obtaining the member 'Text' of a type (line 734)
        Text_97552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 21), mtext_97551, 'Text')
        # Calling Text(args, kwargs) (line 734)
        Text_call_result_97558 = invoke(stypy.reporting.localization.Localization(__file__, 734, 21), Text_97552, *[int_97553, int_97554, s_97555], **kwargs_97557)
        
        # Getting the type of 'self' (line 734)
        self_97559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'self')
        # Setting the type of the member '_text' of a type (line 734)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 8), self_97559, '_text', Text_call_result_97558)
        
        # Call to __init__(...): (line 736)
        # Processing the call arguments (line 736)
        # Getting the type of 'self' (line 736)
        self_97562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 27), 'self', False)
        # Processing the call keyword arguments (line 736)
        kwargs_97563 = {}
        # Getting the type of 'OffsetBox' (line 736)
        OffsetBox_97560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 8), 'OffsetBox', False)
        # Obtaining the member '__init__' of a type (line 736)
        init___97561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 8), OffsetBox_97560, '__init__')
        # Calling __init__(args, kwargs) (line 736)
        init___call_result_97564 = invoke(stypy.reporting.localization.Localization(__file__, 736, 8), init___97561, *[self_97562], **kwargs_97563)
        
        
        # Assigning a List to a Attribute (line 738):
        
        # Assigning a List to a Attribute (line 738):
        
        # Obtaining an instance of the builtin type 'list' (line 738)
        list_97565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 738)
        # Adding element type (line 738)
        # Getting the type of 'self' (line 738)
        self_97566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 26), 'self')
        # Obtaining the member '_text' of a type (line 738)
        _text_97567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 26), self_97566, '_text')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 738, 25), list_97565, _text_97567)
        
        # Getting the type of 'self' (line 738)
        self_97568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 8), 'self')
        # Setting the type of the member '_children' of a type (line 738)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 8), self_97568, '_children', list_97565)
        
        # Assigning a Call to a Attribute (line 740):
        
        # Assigning a Call to a Attribute (line 740):
        
        # Call to Affine2D(...): (line 740)
        # Processing the call keyword arguments (line 740)
        kwargs_97571 = {}
        # Getting the type of 'mtransforms' (line 740)
        mtransforms_97569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 32), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 740)
        Affine2D_97570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 32), mtransforms_97569, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 740)
        Affine2D_call_result_97572 = invoke(stypy.reporting.localization.Localization(__file__, 740, 32), Affine2D_97570, *[], **kwargs_97571)
        
        # Getting the type of 'self' (line 740)
        self_97573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 8), 'self')
        # Setting the type of the member 'offset_transform' of a type (line 740)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 8), self_97573, 'offset_transform', Affine2D_call_result_97572)
        
        # Call to clear(...): (line 741)
        # Processing the call keyword arguments (line 741)
        kwargs_97577 = {}
        # Getting the type of 'self' (line 741)
        self_97574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 8), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 741)
        offset_transform_97575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 8), self_97574, 'offset_transform')
        # Obtaining the member 'clear' of a type (line 741)
        clear_97576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 8), offset_transform_97575, 'clear')
        # Calling clear(args, kwargs) (line 741)
        clear_call_result_97578 = invoke(stypy.reporting.localization.Localization(__file__, 741, 8), clear_97576, *[], **kwargs_97577)
        
        
        # Call to translate(...): (line 742)
        # Processing the call arguments (line 742)
        int_97582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 40), 'int')
        int_97583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 43), 'int')
        # Processing the call keyword arguments (line 742)
        kwargs_97584 = {}
        # Getting the type of 'self' (line 742)
        self_97579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 8), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 742)
        offset_transform_97580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 8), self_97579, 'offset_transform')
        # Obtaining the member 'translate' of a type (line 742)
        translate_97581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 8), offset_transform_97580, 'translate')
        # Calling translate(args, kwargs) (line 742)
        translate_call_result_97585 = invoke(stypy.reporting.localization.Localization(__file__, 742, 8), translate_97581, *[int_97582, int_97583], **kwargs_97584)
        
        
        # Assigning a Call to a Attribute (line 743):
        
        # Assigning a Call to a Attribute (line 743):
        
        # Call to Affine2D(...): (line 743)
        # Processing the call keyword arguments (line 743)
        kwargs_97588 = {}
        # Getting the type of 'mtransforms' (line 743)
        mtransforms_97586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 35), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 743)
        Affine2D_97587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 35), mtransforms_97586, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 743)
        Affine2D_call_result_97589 = invoke(stypy.reporting.localization.Localization(__file__, 743, 35), Affine2D_97587, *[], **kwargs_97588)
        
        # Getting the type of 'self' (line 743)
        self_97590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 8), 'self')
        # Setting the type of the member '_baseline_transform' of a type (line 743)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 8), self_97590, '_baseline_transform', Affine2D_call_result_97589)
        
        # Call to set_transform(...): (line 744)
        # Processing the call arguments (line 744)
        # Getting the type of 'self' (line 744)
        self_97594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 33), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 744)
        offset_transform_97595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 33), self_97594, 'offset_transform')
        # Getting the type of 'self' (line 745)
        self_97596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 33), 'self', False)
        # Obtaining the member '_baseline_transform' of a type (line 745)
        _baseline_transform_97597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 33), self_97596, '_baseline_transform')
        # Applying the binary operator '+' (line 744)
        result_add_97598 = python_operator(stypy.reporting.localization.Localization(__file__, 744, 33), '+', offset_transform_97595, _baseline_transform_97597)
        
        # Processing the call keyword arguments (line 744)
        kwargs_97599 = {}
        # Getting the type of 'self' (line 744)
        self_97591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 8), 'self', False)
        # Obtaining the member '_text' of a type (line 744)
        _text_97592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 8), self_97591, '_text')
        # Obtaining the member 'set_transform' of a type (line 744)
        set_transform_97593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 8), _text_97592, 'set_transform')
        # Calling set_transform(args, kwargs) (line 744)
        set_transform_call_result_97600 = invoke(stypy.reporting.localization.Localization(__file__, 744, 8), set_transform_97593, *[result_add_97598], **kwargs_97599)
        
        
        # Assigning a Name to a Attribute (line 747):
        
        # Assigning a Name to a Attribute (line 747):
        # Getting the type of 'multilinebaseline' (line 747)
        multilinebaseline_97601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 34), 'multilinebaseline')
        # Getting the type of 'self' (line 747)
        self_97602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 8), 'self')
        # Setting the type of the member '_multilinebaseline' of a type (line 747)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 8), self_97602, '_multilinebaseline', multilinebaseline_97601)
        
        # Assigning a Name to a Attribute (line 748):
        
        # Assigning a Name to a Attribute (line 748):
        # Getting the type of 'minimumdescent' (line 748)
        minimumdescent_97603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 31), 'minimumdescent')
        # Getting the type of 'self' (line 748)
        self_97604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 8), 'self')
        # Setting the type of the member '_minimumdescent' of a type (line 748)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 8), self_97604, '_minimumdescent', minimumdescent_97603)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_text'
        module_type_store = module_type_store.open_function_context('set_text', 750, 4, False)
        # Assigning a type to the variable 'self' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextArea.set_text.__dict__.__setitem__('stypy_localization', localization)
        TextArea.set_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextArea.set_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextArea.set_text.__dict__.__setitem__('stypy_function_name', 'TextArea.set_text')
        TextArea.set_text.__dict__.__setitem__('stypy_param_names_list', ['s'])
        TextArea.set_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextArea.set_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextArea.set_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextArea.set_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextArea.set_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextArea.set_text.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextArea.set_text', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_text', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_text(...)' code ##################

        unicode_97605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 8), 'unicode', u'Set the text of this area as a string.')
        
        # Call to set_text(...): (line 752)
        # Processing the call arguments (line 752)
        # Getting the type of 's' (line 752)
        s_97609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 28), 's', False)
        # Processing the call keyword arguments (line 752)
        kwargs_97610 = {}
        # Getting the type of 'self' (line 752)
        self_97606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 8), 'self', False)
        # Obtaining the member '_text' of a type (line 752)
        _text_97607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 8), self_97606, '_text')
        # Obtaining the member 'set_text' of a type (line 752)
        set_text_97608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 8), _text_97607, 'set_text')
        # Calling set_text(args, kwargs) (line 752)
        set_text_call_result_97611 = invoke(stypy.reporting.localization.Localization(__file__, 752, 8), set_text_97608, *[s_97609], **kwargs_97610)
        
        
        # Assigning a Name to a Attribute (line 753):
        
        # Assigning a Name to a Attribute (line 753):
        # Getting the type of 'True' (line 753)
        True_97612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 21), 'True')
        # Getting the type of 'self' (line 753)
        self_97613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 753)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 8), self_97613, 'stale', True_97612)
        
        # ################# End of 'set_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_text' in the type store
        # Getting the type of 'stypy_return_type' (line 750)
        stypy_return_type_97614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97614)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_text'
        return stypy_return_type_97614


    @norecursion
    def get_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_text'
        module_type_store = module_type_store.open_function_context('get_text', 755, 4, False)
        # Assigning a type to the variable 'self' (line 756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextArea.get_text.__dict__.__setitem__('stypy_localization', localization)
        TextArea.get_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextArea.get_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextArea.get_text.__dict__.__setitem__('stypy_function_name', 'TextArea.get_text')
        TextArea.get_text.__dict__.__setitem__('stypy_param_names_list', [])
        TextArea.get_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextArea.get_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextArea.get_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextArea.get_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextArea.get_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextArea.get_text.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextArea.get_text', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_text', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_text(...)' code ##################

        unicode_97615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 8), 'unicode', u"Returns the string representation of this area's text")
        
        # Call to get_text(...): (line 757)
        # Processing the call keyword arguments (line 757)
        kwargs_97619 = {}
        # Getting the type of 'self' (line 757)
        self_97616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 15), 'self', False)
        # Obtaining the member '_text' of a type (line 757)
        _text_97617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 15), self_97616, '_text')
        # Obtaining the member 'get_text' of a type (line 757)
        get_text_97618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 15), _text_97617, 'get_text')
        # Calling get_text(args, kwargs) (line 757)
        get_text_call_result_97620 = invoke(stypy.reporting.localization.Localization(__file__, 757, 15), get_text_97618, *[], **kwargs_97619)
        
        # Assigning a type to the variable 'stypy_return_type' (line 757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'stypy_return_type', get_text_call_result_97620)
        
        # ################# End of 'get_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_text' in the type store
        # Getting the type of 'stypy_return_type' (line 755)
        stypy_return_type_97621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97621)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_text'
        return stypy_return_type_97621


    @norecursion
    def set_multilinebaseline(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_multilinebaseline'
        module_type_store = module_type_store.open_function_context('set_multilinebaseline', 759, 4, False)
        # Assigning a type to the variable 'self' (line 760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 760, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextArea.set_multilinebaseline.__dict__.__setitem__('stypy_localization', localization)
        TextArea.set_multilinebaseline.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextArea.set_multilinebaseline.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextArea.set_multilinebaseline.__dict__.__setitem__('stypy_function_name', 'TextArea.set_multilinebaseline')
        TextArea.set_multilinebaseline.__dict__.__setitem__('stypy_param_names_list', ['t'])
        TextArea.set_multilinebaseline.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextArea.set_multilinebaseline.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextArea.set_multilinebaseline.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextArea.set_multilinebaseline.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextArea.set_multilinebaseline.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextArea.set_multilinebaseline.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextArea.set_multilinebaseline', ['t'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_multilinebaseline', localization, ['t'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_multilinebaseline(...)' code ##################

        unicode_97622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, (-1)), 'unicode', u'\n        Set multilinebaseline .\n\n        If True, baseline for multiline text is\n        adjusted so that it is (approximatedly) center-aligned with\n        singleline text.\n        ')
        
        # Assigning a Name to a Attribute (line 767):
        
        # Assigning a Name to a Attribute (line 767):
        # Getting the type of 't' (line 767)
        t_97623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 34), 't')
        # Getting the type of 'self' (line 767)
        self_97624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 8), 'self')
        # Setting the type of the member '_multilinebaseline' of a type (line 767)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 767, 8), self_97624, '_multilinebaseline', t_97623)
        
        # Assigning a Name to a Attribute (line 768):
        
        # Assigning a Name to a Attribute (line 768):
        # Getting the type of 'True' (line 768)
        True_97625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 21), 'True')
        # Getting the type of 'self' (line 768)
        self_97626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 768)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 8), self_97626, 'stale', True_97625)
        
        # ################# End of 'set_multilinebaseline(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_multilinebaseline' in the type store
        # Getting the type of 'stypy_return_type' (line 759)
        stypy_return_type_97627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97627)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_multilinebaseline'
        return stypy_return_type_97627


    @norecursion
    def get_multilinebaseline(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_multilinebaseline'
        module_type_store = module_type_store.open_function_context('get_multilinebaseline', 770, 4, False)
        # Assigning a type to the variable 'self' (line 771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 771, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextArea.get_multilinebaseline.__dict__.__setitem__('stypy_localization', localization)
        TextArea.get_multilinebaseline.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextArea.get_multilinebaseline.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextArea.get_multilinebaseline.__dict__.__setitem__('stypy_function_name', 'TextArea.get_multilinebaseline')
        TextArea.get_multilinebaseline.__dict__.__setitem__('stypy_param_names_list', [])
        TextArea.get_multilinebaseline.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextArea.get_multilinebaseline.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextArea.get_multilinebaseline.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextArea.get_multilinebaseline.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextArea.get_multilinebaseline.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextArea.get_multilinebaseline.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextArea.get_multilinebaseline', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_multilinebaseline', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_multilinebaseline(...)' code ##################

        unicode_97628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 773, (-1)), 'unicode', u'\n        get multilinebaseline .\n        ')
        # Getting the type of 'self' (line 774)
        self_97629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 15), 'self')
        # Obtaining the member '_multilinebaseline' of a type (line 774)
        _multilinebaseline_97630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 15), self_97629, '_multilinebaseline')
        # Assigning a type to the variable 'stypy_return_type' (line 774)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 8), 'stypy_return_type', _multilinebaseline_97630)
        
        # ################# End of 'get_multilinebaseline(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_multilinebaseline' in the type store
        # Getting the type of 'stypy_return_type' (line 770)
        stypy_return_type_97631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97631)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_multilinebaseline'
        return stypy_return_type_97631


    @norecursion
    def set_minimumdescent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_minimumdescent'
        module_type_store = module_type_store.open_function_context('set_minimumdescent', 776, 4, False)
        # Assigning a type to the variable 'self' (line 777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextArea.set_minimumdescent.__dict__.__setitem__('stypy_localization', localization)
        TextArea.set_minimumdescent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextArea.set_minimumdescent.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextArea.set_minimumdescent.__dict__.__setitem__('stypy_function_name', 'TextArea.set_minimumdescent')
        TextArea.set_minimumdescent.__dict__.__setitem__('stypy_param_names_list', ['t'])
        TextArea.set_minimumdescent.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextArea.set_minimumdescent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextArea.set_minimumdescent.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextArea.set_minimumdescent.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextArea.set_minimumdescent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextArea.set_minimumdescent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextArea.set_minimumdescent', ['t'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_minimumdescent', localization, ['t'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_minimumdescent(...)' code ##################

        unicode_97632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 782, (-1)), 'unicode', u'\n        Set minimumdescent .\n\n        If True, extent of the single line text is adjusted so that\n        it has minimum descent of "p"\n        ')
        
        # Assigning a Name to a Attribute (line 783):
        
        # Assigning a Name to a Attribute (line 783):
        # Getting the type of 't' (line 783)
        t_97633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 31), 't')
        # Getting the type of 'self' (line 783)
        self_97634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 8), 'self')
        # Setting the type of the member '_minimumdescent' of a type (line 783)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 783, 8), self_97634, '_minimumdescent', t_97633)
        
        # Assigning a Name to a Attribute (line 784):
        
        # Assigning a Name to a Attribute (line 784):
        # Getting the type of 'True' (line 784)
        True_97635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 21), 'True')
        # Getting the type of 'self' (line 784)
        self_97636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 784)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 8), self_97636, 'stale', True_97635)
        
        # ################# End of 'set_minimumdescent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_minimumdescent' in the type store
        # Getting the type of 'stypy_return_type' (line 776)
        stypy_return_type_97637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97637)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_minimumdescent'
        return stypy_return_type_97637


    @norecursion
    def get_minimumdescent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_minimumdescent'
        module_type_store = module_type_store.open_function_context('get_minimumdescent', 786, 4, False)
        # Assigning a type to the variable 'self' (line 787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextArea.get_minimumdescent.__dict__.__setitem__('stypy_localization', localization)
        TextArea.get_minimumdescent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextArea.get_minimumdescent.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextArea.get_minimumdescent.__dict__.__setitem__('stypy_function_name', 'TextArea.get_minimumdescent')
        TextArea.get_minimumdescent.__dict__.__setitem__('stypy_param_names_list', [])
        TextArea.get_minimumdescent.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextArea.get_minimumdescent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextArea.get_minimumdescent.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextArea.get_minimumdescent.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextArea.get_minimumdescent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextArea.get_minimumdescent.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextArea.get_minimumdescent', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_minimumdescent', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_minimumdescent(...)' code ##################

        unicode_97638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, (-1)), 'unicode', u'\n        get minimumdescent.\n        ')
        # Getting the type of 'self' (line 790)
        self_97639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 15), 'self')
        # Obtaining the member '_minimumdescent' of a type (line 790)
        _minimumdescent_97640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 790, 15), self_97639, '_minimumdescent')
        # Assigning a type to the variable 'stypy_return_type' (line 790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 790, 8), 'stypy_return_type', _minimumdescent_97640)
        
        # ################# End of 'get_minimumdescent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_minimumdescent' in the type store
        # Getting the type of 'stypy_return_type' (line 786)
        stypy_return_type_97641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97641)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_minimumdescent'
        return stypy_return_type_97641


    @norecursion
    def set_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_transform'
        module_type_store = module_type_store.open_function_context('set_transform', 792, 4, False)
        # Assigning a type to the variable 'self' (line 793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextArea.set_transform.__dict__.__setitem__('stypy_localization', localization)
        TextArea.set_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextArea.set_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextArea.set_transform.__dict__.__setitem__('stypy_function_name', 'TextArea.set_transform')
        TextArea.set_transform.__dict__.__setitem__('stypy_param_names_list', ['t'])
        TextArea.set_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextArea.set_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextArea.set_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextArea.set_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextArea.set_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextArea.set_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextArea.set_transform', ['t'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_transform', localization, ['t'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_transform(...)' code ##################

        unicode_97642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 795, (-1)), 'unicode', u'\n        set_transform is ignored.\n        ')
        pass
        
        # ################# End of 'set_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 792)
        stypy_return_type_97643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97643)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_transform'
        return stypy_return_type_97643


    @norecursion
    def set_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_offset'
        module_type_store = module_type_store.open_function_context('set_offset', 798, 4, False)
        # Assigning a type to the variable 'self' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextArea.set_offset.__dict__.__setitem__('stypy_localization', localization)
        TextArea.set_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextArea.set_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextArea.set_offset.__dict__.__setitem__('stypy_function_name', 'TextArea.set_offset')
        TextArea.set_offset.__dict__.__setitem__('stypy_param_names_list', ['xy'])
        TextArea.set_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextArea.set_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextArea.set_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextArea.set_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextArea.set_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextArea.set_offset.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextArea.set_offset', ['xy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_offset', localization, ['xy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_offset(...)' code ##################

        unicode_97644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, (-1)), 'unicode', u'\n        set offset of the container.\n\n        Accept : tuple of x,y coordinates in display units.\n        ')
        
        # Assigning a Name to a Attribute (line 804):
        
        # Assigning a Name to a Attribute (line 804):
        # Getting the type of 'xy' (line 804)
        xy_97645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 23), 'xy')
        # Getting the type of 'self' (line 804)
        self_97646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 8), 'self')
        # Setting the type of the member '_offset' of a type (line 804)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 8), self_97646, '_offset', xy_97645)
        
        # Call to clear(...): (line 806)
        # Processing the call keyword arguments (line 806)
        kwargs_97650 = {}
        # Getting the type of 'self' (line 806)
        self_97647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 8), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 806)
        offset_transform_97648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 8), self_97647, 'offset_transform')
        # Obtaining the member 'clear' of a type (line 806)
        clear_97649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 8), offset_transform_97648, 'clear')
        # Calling clear(args, kwargs) (line 806)
        clear_call_result_97651 = invoke(stypy.reporting.localization.Localization(__file__, 806, 8), clear_97649, *[], **kwargs_97650)
        
        
        # Call to translate(...): (line 807)
        # Processing the call arguments (line 807)
        
        # Obtaining the type of the subscript
        int_97655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 807, 43), 'int')
        # Getting the type of 'xy' (line 807)
        xy_97656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 40), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 807)
        getitem___97657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 40), xy_97656, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 807)
        subscript_call_result_97658 = invoke(stypy.reporting.localization.Localization(__file__, 807, 40), getitem___97657, int_97655)
        
        
        # Obtaining the type of the subscript
        int_97659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 807, 50), 'int')
        # Getting the type of 'xy' (line 807)
        xy_97660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 47), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 807)
        getitem___97661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 47), xy_97660, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 807)
        subscript_call_result_97662 = invoke(stypy.reporting.localization.Localization(__file__, 807, 47), getitem___97661, int_97659)
        
        # Processing the call keyword arguments (line 807)
        kwargs_97663 = {}
        # Getting the type of 'self' (line 807)
        self_97652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 8), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 807)
        offset_transform_97653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 8), self_97652, 'offset_transform')
        # Obtaining the member 'translate' of a type (line 807)
        translate_97654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 8), offset_transform_97653, 'translate')
        # Calling translate(args, kwargs) (line 807)
        translate_call_result_97664 = invoke(stypy.reporting.localization.Localization(__file__, 807, 8), translate_97654, *[subscript_call_result_97658, subscript_call_result_97662], **kwargs_97663)
        
        
        # Assigning a Name to a Attribute (line 808):
        
        # Assigning a Name to a Attribute (line 808):
        # Getting the type of 'True' (line 808)
        True_97665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 21), 'True')
        # Getting the type of 'self' (line 808)
        self_97666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 808)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 8), self_97666, 'stale', True_97665)
        
        # ################# End of 'set_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 798)
        stypy_return_type_97667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97667)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_offset'
        return stypy_return_type_97667


    @norecursion
    def get_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_offset'
        module_type_store = module_type_store.open_function_context('get_offset', 810, 4, False)
        # Assigning a type to the variable 'self' (line 811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextArea.get_offset.__dict__.__setitem__('stypy_localization', localization)
        TextArea.get_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextArea.get_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextArea.get_offset.__dict__.__setitem__('stypy_function_name', 'TextArea.get_offset')
        TextArea.get_offset.__dict__.__setitem__('stypy_param_names_list', [])
        TextArea.get_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextArea.get_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextArea.get_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextArea.get_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextArea.get_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextArea.get_offset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextArea.get_offset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_offset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_offset(...)' code ##################

        unicode_97668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, (-1)), 'unicode', u'\n        return offset of the container.\n        ')
        # Getting the type of 'self' (line 814)
        self_97669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 15), 'self')
        # Obtaining the member '_offset' of a type (line 814)
        _offset_97670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 15), self_97669, '_offset')
        # Assigning a type to the variable 'stypy_return_type' (line 814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 8), 'stypy_return_type', _offset_97670)
        
        # ################# End of 'get_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 810)
        stypy_return_type_97671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97671)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_offset'
        return stypy_return_type_97671


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 816, 4, False)
        # Assigning a type to the variable 'self' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextArea.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        TextArea.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextArea.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextArea.get_window_extent.__dict__.__setitem__('stypy_function_name', 'TextArea.get_window_extent')
        TextArea.get_window_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        TextArea.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextArea.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextArea.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextArea.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextArea.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextArea.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextArea.get_window_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        unicode_97672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 819, (-1)), 'unicode', u'\n        get the bounding box in display space.\n        ')
        
        # Assigning a Call to a Tuple (line 820):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent(...): (line 820)
        # Processing the call arguments (line 820)
        # Getting the type of 'renderer' (line 820)
        renderer_97675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 39), 'renderer', False)
        # Processing the call keyword arguments (line 820)
        kwargs_97676 = {}
        # Getting the type of 'self' (line 820)
        self_97673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 23), 'self', False)
        # Obtaining the member 'get_extent' of a type (line 820)
        get_extent_97674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 23), self_97673, 'get_extent')
        # Calling get_extent(args, kwargs) (line 820)
        get_extent_call_result_97677 = invoke(stypy.reporting.localization.Localization(__file__, 820, 23), get_extent_97674, *[renderer_97675], **kwargs_97676)
        
        # Assigning a type to the variable 'call_assignment_95733' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'call_assignment_95733', get_extent_call_result_97677)
        
        # Assigning a Call to a Name (line 820):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97681 = {}
        # Getting the type of 'call_assignment_95733' (line 820)
        call_assignment_95733_97678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'call_assignment_95733', False)
        # Obtaining the member '__getitem__' of a type (line 820)
        getitem___97679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 8), call_assignment_95733_97678, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97682 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97679, *[int_97680], **kwargs_97681)
        
        # Assigning a type to the variable 'call_assignment_95734' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'call_assignment_95734', getitem___call_result_97682)
        
        # Assigning a Name to a Name (line 820):
        # Getting the type of 'call_assignment_95734' (line 820)
        call_assignment_95734_97683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'call_assignment_95734')
        # Assigning a type to the variable 'w' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'w', call_assignment_95734_97683)
        
        # Assigning a Call to a Name (line 820):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97687 = {}
        # Getting the type of 'call_assignment_95733' (line 820)
        call_assignment_95733_97684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'call_assignment_95733', False)
        # Obtaining the member '__getitem__' of a type (line 820)
        getitem___97685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 8), call_assignment_95733_97684, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97688 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97685, *[int_97686], **kwargs_97687)
        
        # Assigning a type to the variable 'call_assignment_95735' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'call_assignment_95735', getitem___call_result_97688)
        
        # Assigning a Name to a Name (line 820):
        # Getting the type of 'call_assignment_95735' (line 820)
        call_assignment_95735_97689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'call_assignment_95735')
        # Assigning a type to the variable 'h' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 11), 'h', call_assignment_95735_97689)
        
        # Assigning a Call to a Name (line 820):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97693 = {}
        # Getting the type of 'call_assignment_95733' (line 820)
        call_assignment_95733_97690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'call_assignment_95733', False)
        # Obtaining the member '__getitem__' of a type (line 820)
        getitem___97691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 8), call_assignment_95733_97690, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97694 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97691, *[int_97692], **kwargs_97693)
        
        # Assigning a type to the variable 'call_assignment_95736' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'call_assignment_95736', getitem___call_result_97694)
        
        # Assigning a Name to a Name (line 820):
        # Getting the type of 'call_assignment_95736' (line 820)
        call_assignment_95736_97695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'call_assignment_95736')
        # Assigning a type to the variable 'xd' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 14), 'xd', call_assignment_95736_97695)
        
        # Assigning a Call to a Name (line 820):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97699 = {}
        # Getting the type of 'call_assignment_95733' (line 820)
        call_assignment_95733_97696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'call_assignment_95733', False)
        # Obtaining the member '__getitem__' of a type (line 820)
        getitem___97697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 8), call_assignment_95733_97696, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97700 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97697, *[int_97698], **kwargs_97699)
        
        # Assigning a type to the variable 'call_assignment_95737' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'call_assignment_95737', getitem___call_result_97700)
        
        # Assigning a Name to a Name (line 820):
        # Getting the type of 'call_assignment_95737' (line 820)
        call_assignment_95737_97701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'call_assignment_95737')
        # Assigning a type to the variable 'yd' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 18), 'yd', call_assignment_95737_97701)
        
        # Assigning a Call to a Tuple (line 821):
        
        # Assigning a Call to a Name:
        
        # Call to get_offset(...): (line 821)
        # Processing the call keyword arguments (line 821)
        kwargs_97704 = {}
        # Getting the type of 'self' (line 821)
        self_97702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 17), 'self', False)
        # Obtaining the member 'get_offset' of a type (line 821)
        get_offset_97703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 821, 17), self_97702, 'get_offset')
        # Calling get_offset(args, kwargs) (line 821)
        get_offset_call_result_97705 = invoke(stypy.reporting.localization.Localization(__file__, 821, 17), get_offset_97703, *[], **kwargs_97704)
        
        # Assigning a type to the variable 'call_assignment_95738' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'call_assignment_95738', get_offset_call_result_97705)
        
        # Assigning a Call to a Name (line 821):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97709 = {}
        # Getting the type of 'call_assignment_95738' (line 821)
        call_assignment_95738_97706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'call_assignment_95738', False)
        # Obtaining the member '__getitem__' of a type (line 821)
        getitem___97707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 821, 8), call_assignment_95738_97706, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97710 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97707, *[int_97708], **kwargs_97709)
        
        # Assigning a type to the variable 'call_assignment_95739' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'call_assignment_95739', getitem___call_result_97710)
        
        # Assigning a Name to a Name (line 821):
        # Getting the type of 'call_assignment_95739' (line 821)
        call_assignment_95739_97711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'call_assignment_95739')
        # Assigning a type to the variable 'ox' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'ox', call_assignment_95739_97711)
        
        # Assigning a Call to a Name (line 821):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97715 = {}
        # Getting the type of 'call_assignment_95738' (line 821)
        call_assignment_95738_97712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'call_assignment_95738', False)
        # Obtaining the member '__getitem__' of a type (line 821)
        getitem___97713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 821, 8), call_assignment_95738_97712, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97716 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97713, *[int_97714], **kwargs_97715)
        
        # Assigning a type to the variable 'call_assignment_95740' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'call_assignment_95740', getitem___call_result_97716)
        
        # Assigning a Name to a Name (line 821):
        # Getting the type of 'call_assignment_95740' (line 821)
        call_assignment_95740_97717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'call_assignment_95740')
        # Assigning a type to the variable 'oy' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 12), 'oy', call_assignment_95740_97717)
        
        # Call to from_bounds(...): (line 822)
        # Processing the call arguments (line 822)
        # Getting the type of 'ox' (line 822)
        ox_97721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 44), 'ox', False)
        # Getting the type of 'xd' (line 822)
        xd_97722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 49), 'xd', False)
        # Applying the binary operator '-' (line 822)
        result_sub_97723 = python_operator(stypy.reporting.localization.Localization(__file__, 822, 44), '-', ox_97721, xd_97722)
        
        # Getting the type of 'oy' (line 822)
        oy_97724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 53), 'oy', False)
        # Getting the type of 'yd' (line 822)
        yd_97725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 58), 'yd', False)
        # Applying the binary operator '-' (line 822)
        result_sub_97726 = python_operator(stypy.reporting.localization.Localization(__file__, 822, 53), '-', oy_97724, yd_97725)
        
        # Getting the type of 'w' (line 822)
        w_97727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 62), 'w', False)
        # Getting the type of 'h' (line 822)
        h_97728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 65), 'h', False)
        # Processing the call keyword arguments (line 822)
        kwargs_97729 = {}
        # Getting the type of 'mtransforms' (line 822)
        mtransforms_97718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 15), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 822)
        Bbox_97719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 15), mtransforms_97718, 'Bbox')
        # Obtaining the member 'from_bounds' of a type (line 822)
        from_bounds_97720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 15), Bbox_97719, 'from_bounds')
        # Calling from_bounds(args, kwargs) (line 822)
        from_bounds_call_result_97730 = invoke(stypy.reporting.localization.Localization(__file__, 822, 15), from_bounds_97720, *[result_sub_97723, result_sub_97726, w_97727, h_97728], **kwargs_97729)
        
        # Assigning a type to the variable 'stypy_return_type' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'stypy_return_type', from_bounds_call_result_97730)
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 816)
        stypy_return_type_97731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97731)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_97731


    @norecursion
    def get_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_extent'
        module_type_store = module_type_store.open_function_context('get_extent', 824, 4, False)
        # Assigning a type to the variable 'self' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextArea.get_extent.__dict__.__setitem__('stypy_localization', localization)
        TextArea.get_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextArea.get_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextArea.get_extent.__dict__.__setitem__('stypy_function_name', 'TextArea.get_extent')
        TextArea.get_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        TextArea.get_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextArea.get_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextArea.get_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextArea.get_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextArea.get_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextArea.get_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextArea.get_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_extent(...)' code ##################

        
        # Assigning a Call to a Tuple (line 825):
        
        # Assigning a Call to a Name:
        
        # Call to is_math_text(...): (line 825)
        # Processing the call arguments (line 825)
        # Getting the type of 'self' (line 825)
        self_97735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 53), 'self', False)
        # Obtaining the member '_text' of a type (line 825)
        _text_97736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 53), self_97735, '_text')
        # Obtaining the member '_text' of a type (line 825)
        _text_97737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 53), _text_97736, '_text')
        # Processing the call keyword arguments (line 825)
        kwargs_97738 = {}
        # Getting the type of 'self' (line 825)
        self_97732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 29), 'self', False)
        # Obtaining the member '_text' of a type (line 825)
        _text_97733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 29), self_97732, '_text')
        # Obtaining the member 'is_math_text' of a type (line 825)
        is_math_text_97734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 29), _text_97733, 'is_math_text')
        # Calling is_math_text(args, kwargs) (line 825)
        is_math_text_call_result_97739 = invoke(stypy.reporting.localization.Localization(__file__, 825, 29), is_math_text_97734, *[_text_97737], **kwargs_97738)
        
        # Assigning a type to the variable 'call_assignment_95741' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'call_assignment_95741', is_math_text_call_result_97739)
        
        # Assigning a Call to a Name (line 825):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97743 = {}
        # Getting the type of 'call_assignment_95741' (line 825)
        call_assignment_95741_97740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'call_assignment_95741', False)
        # Obtaining the member '__getitem__' of a type (line 825)
        getitem___97741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 8), call_assignment_95741_97740, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97744 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97741, *[int_97742], **kwargs_97743)
        
        # Assigning a type to the variable 'call_assignment_95742' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'call_assignment_95742', getitem___call_result_97744)
        
        # Assigning a Name to a Name (line 825):
        # Getting the type of 'call_assignment_95742' (line 825)
        call_assignment_95742_97745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'call_assignment_95742')
        # Assigning a type to the variable 'clean_line' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'clean_line', call_assignment_95742_97745)
        
        # Assigning a Call to a Name (line 825):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97749 = {}
        # Getting the type of 'call_assignment_95741' (line 825)
        call_assignment_95741_97746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'call_assignment_95741', False)
        # Obtaining the member '__getitem__' of a type (line 825)
        getitem___97747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 8), call_assignment_95741_97746, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97750 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97747, *[int_97748], **kwargs_97749)
        
        # Assigning a type to the variable 'call_assignment_95743' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'call_assignment_95743', getitem___call_result_97750)
        
        # Assigning a Name to a Name (line 825):
        # Getting the type of 'call_assignment_95743' (line 825)
        call_assignment_95743_97751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'call_assignment_95743')
        # Assigning a type to the variable 'ismath' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 20), 'ismath', call_assignment_95743_97751)
        
        # Assigning a Call to a Tuple (line 826):
        
        # Assigning a Call to a Name:
        
        # Call to get_text_width_height_descent(...): (line 826)
        # Processing the call arguments (line 826)
        unicode_97754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 12), 'unicode', u'lp')
        # Getting the type of 'self' (line 827)
        self_97755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 18), 'self', False)
        # Obtaining the member '_text' of a type (line 827)
        _text_97756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 18), self_97755, '_text')
        # Obtaining the member '_fontproperties' of a type (line 827)
        _fontproperties_97757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 18), _text_97756, '_fontproperties')
        # Processing the call keyword arguments (line 826)
        # Getting the type of 'False' (line 827)
        False_97758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 53), 'False', False)
        keyword_97759 = False_97758
        kwargs_97760 = {'ismath': keyword_97759}
        # Getting the type of 'renderer' (line 826)
        renderer_97752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 20), 'renderer', False)
        # Obtaining the member 'get_text_width_height_descent' of a type (line 826)
        get_text_width_height_descent_97753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 20), renderer_97752, 'get_text_width_height_descent')
        # Calling get_text_width_height_descent(args, kwargs) (line 826)
        get_text_width_height_descent_call_result_97761 = invoke(stypy.reporting.localization.Localization(__file__, 826, 20), get_text_width_height_descent_97753, *[unicode_97754, _fontproperties_97757], **kwargs_97760)
        
        # Assigning a type to the variable 'call_assignment_95744' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'call_assignment_95744', get_text_width_height_descent_call_result_97761)
        
        # Assigning a Call to a Name (line 826):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97765 = {}
        # Getting the type of 'call_assignment_95744' (line 826)
        call_assignment_95744_97762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'call_assignment_95744', False)
        # Obtaining the member '__getitem__' of a type (line 826)
        getitem___97763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 8), call_assignment_95744_97762, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97766 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97763, *[int_97764], **kwargs_97765)
        
        # Assigning a type to the variable 'call_assignment_95745' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'call_assignment_95745', getitem___call_result_97766)
        
        # Assigning a Name to a Name (line 826):
        # Getting the type of 'call_assignment_95745' (line 826)
        call_assignment_95745_97767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'call_assignment_95745')
        # Assigning a type to the variable '_' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), '_', call_assignment_95745_97767)
        
        # Assigning a Call to a Name (line 826):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97771 = {}
        # Getting the type of 'call_assignment_95744' (line 826)
        call_assignment_95744_97768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'call_assignment_95744', False)
        # Obtaining the member '__getitem__' of a type (line 826)
        getitem___97769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 8), call_assignment_95744_97768, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97772 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97769, *[int_97770], **kwargs_97771)
        
        # Assigning a type to the variable 'call_assignment_95746' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'call_assignment_95746', getitem___call_result_97772)
        
        # Assigning a Name to a Name (line 826):
        # Getting the type of 'call_assignment_95746' (line 826)
        call_assignment_95746_97773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'call_assignment_95746')
        # Assigning a type to the variable 'h_' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 11), 'h_', call_assignment_95746_97773)
        
        # Assigning a Call to a Name (line 826):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97777 = {}
        # Getting the type of 'call_assignment_95744' (line 826)
        call_assignment_95744_97774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'call_assignment_95744', False)
        # Obtaining the member '__getitem__' of a type (line 826)
        getitem___97775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 8), call_assignment_95744_97774, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97778 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97775, *[int_97776], **kwargs_97777)
        
        # Assigning a type to the variable 'call_assignment_95747' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'call_assignment_95747', getitem___call_result_97778)
        
        # Assigning a Name to a Name (line 826):
        # Getting the type of 'call_assignment_95747' (line 826)
        call_assignment_95747_97779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'call_assignment_95747')
        # Assigning a type to the variable 'd_' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 15), 'd_', call_assignment_95747_97779)
        
        # Assigning a Call to a Tuple (line 829):
        
        # Assigning a Call to a Name:
        
        # Call to _get_layout(...): (line 829)
        # Processing the call arguments (line 829)
        # Getting the type of 'renderer' (line 829)
        renderer_97783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 47), 'renderer', False)
        # Processing the call keyword arguments (line 829)
        kwargs_97784 = {}
        # Getting the type of 'self' (line 829)
        self_97780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 24), 'self', False)
        # Obtaining the member '_text' of a type (line 829)
        _text_97781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 24), self_97780, '_text')
        # Obtaining the member '_get_layout' of a type (line 829)
        _get_layout_97782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 24), _text_97781, '_get_layout')
        # Calling _get_layout(args, kwargs) (line 829)
        _get_layout_call_result_97785 = invoke(stypy.reporting.localization.Localization(__file__, 829, 24), _get_layout_97782, *[renderer_97783], **kwargs_97784)
        
        # Assigning a type to the variable 'call_assignment_95748' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'call_assignment_95748', _get_layout_call_result_97785)
        
        # Assigning a Call to a Name (line 829):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97789 = {}
        # Getting the type of 'call_assignment_95748' (line 829)
        call_assignment_95748_97786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'call_assignment_95748', False)
        # Obtaining the member '__getitem__' of a type (line 829)
        getitem___97787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 8), call_assignment_95748_97786, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97790 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97787, *[int_97788], **kwargs_97789)
        
        # Assigning a type to the variable 'call_assignment_95749' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'call_assignment_95749', getitem___call_result_97790)
        
        # Assigning a Name to a Name (line 829):
        # Getting the type of 'call_assignment_95749' (line 829)
        call_assignment_95749_97791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'call_assignment_95749')
        # Assigning a type to the variable 'bbox' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'bbox', call_assignment_95749_97791)
        
        # Assigning a Call to a Name (line 829):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97795 = {}
        # Getting the type of 'call_assignment_95748' (line 829)
        call_assignment_95748_97792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'call_assignment_95748', False)
        # Obtaining the member '__getitem__' of a type (line 829)
        getitem___97793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 8), call_assignment_95748_97792, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97796 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97793, *[int_97794], **kwargs_97795)
        
        # Assigning a type to the variable 'call_assignment_95750' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'call_assignment_95750', getitem___call_result_97796)
        
        # Assigning a Name to a Name (line 829):
        # Getting the type of 'call_assignment_95750' (line 829)
        call_assignment_95750_97797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'call_assignment_95750')
        # Assigning a type to the variable 'info' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 14), 'info', call_assignment_95750_97797)
        
        # Assigning a Call to a Name (line 829):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_97800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 8), 'int')
        # Processing the call keyword arguments
        kwargs_97801 = {}
        # Getting the type of 'call_assignment_95748' (line 829)
        call_assignment_95748_97798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'call_assignment_95748', False)
        # Obtaining the member '__getitem__' of a type (line 829)
        getitem___97799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 8), call_assignment_95748_97798, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_97802 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___97799, *[int_97800], **kwargs_97801)
        
        # Assigning a type to the variable 'call_assignment_95751' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'call_assignment_95751', getitem___call_result_97802)
        
        # Assigning a Name to a Name (line 829):
        # Getting the type of 'call_assignment_95751' (line 829)
        call_assignment_95751_97803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'call_assignment_95751')
        # Assigning a type to the variable 'd' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 20), 'd', call_assignment_95751_97803)
        
        # Assigning a Tuple to a Tuple (line 830):
        
        # Assigning a Attribute to a Name (line 830):
        # Getting the type of 'bbox' (line 830)
        bbox_97804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 15), 'bbox')
        # Obtaining the member 'width' of a type (line 830)
        width_97805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 15), bbox_97804, 'width')
        # Assigning a type to the variable 'tuple_assignment_95752' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 8), 'tuple_assignment_95752', width_97805)
        
        # Assigning a Attribute to a Name (line 830):
        # Getting the type of 'bbox' (line 830)
        bbox_97806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 27), 'bbox')
        # Obtaining the member 'height' of a type (line 830)
        height_97807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 27), bbox_97806, 'height')
        # Assigning a type to the variable 'tuple_assignment_95753' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 8), 'tuple_assignment_95753', height_97807)
        
        # Assigning a Name to a Name (line 830):
        # Getting the type of 'tuple_assignment_95752' (line 830)
        tuple_assignment_95752_97808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 8), 'tuple_assignment_95752')
        # Assigning a type to the variable 'w' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 8), 'w', tuple_assignment_95752_97808)
        
        # Assigning a Name to a Name (line 830):
        # Getting the type of 'tuple_assignment_95753' (line 830)
        tuple_assignment_95753_97809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 8), 'tuple_assignment_95753')
        # Assigning a type to the variable 'h' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 11), 'h', tuple_assignment_95753_97809)
        
        # Assigning a Subscript to a Name (line 832):
        
        # Assigning a Subscript to a Name (line 832):
        
        # Obtaining the type of the subscript
        int_97810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 24), 'int')
        
        # Obtaining the type of the subscript
        int_97811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 20), 'int')
        # Getting the type of 'info' (line 832)
        info_97812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 15), 'info')
        # Obtaining the member '__getitem__' of a type (line 832)
        getitem___97813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 832, 15), info_97812, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 832)
        subscript_call_result_97814 = invoke(stypy.reporting.localization.Localization(__file__, 832, 15), getitem___97813, int_97811)
        
        # Obtaining the member '__getitem__' of a type (line 832)
        getitem___97815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 832, 15), subscript_call_result_97814, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 832)
        subscript_call_result_97816 = invoke(stypy.reporting.localization.Localization(__file__, 832, 15), getitem___97815, int_97810)
        
        # Assigning a type to the variable 'line' (line 832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 8), 'line', subscript_call_result_97816)
        
        # Call to clear(...): (line 834)
        # Processing the call keyword arguments (line 834)
        kwargs_97820 = {}
        # Getting the type of 'self' (line 834)
        self_97817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 8), 'self', False)
        # Obtaining the member '_baseline_transform' of a type (line 834)
        _baseline_transform_97818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 8), self_97817, '_baseline_transform')
        # Obtaining the member 'clear' of a type (line 834)
        clear_97819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 8), _baseline_transform_97818, 'clear')
        # Calling clear(args, kwargs) (line 834)
        clear_call_result_97821 = invoke(stypy.reporting.localization.Localization(__file__, 834, 8), clear_97819, *[], **kwargs_97820)
        
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 836)
        # Processing the call arguments (line 836)
        # Getting the type of 'info' (line 836)
        info_97823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 15), 'info', False)
        # Processing the call keyword arguments (line 836)
        kwargs_97824 = {}
        # Getting the type of 'len' (line 836)
        len_97822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 11), 'len', False)
        # Calling len(args, kwargs) (line 836)
        len_call_result_97825 = invoke(stypy.reporting.localization.Localization(__file__, 836, 11), len_97822, *[info_97823], **kwargs_97824)
        
        int_97826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, 23), 'int')
        # Applying the binary operator '>' (line 836)
        result_gt_97827 = python_operator(stypy.reporting.localization.Localization(__file__, 836, 11), '>', len_call_result_97825, int_97826)
        
        # Getting the type of 'self' (line 836)
        self_97828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 29), 'self')
        # Obtaining the member '_multilinebaseline' of a type (line 836)
        _multilinebaseline_97829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 29), self_97828, '_multilinebaseline')
        # Applying the binary operator 'and' (line 836)
        result_and_keyword_97830 = python_operator(stypy.reporting.localization.Localization(__file__, 836, 11), 'and', result_gt_97827, _multilinebaseline_97829)
        
        # Testing the type of an if condition (line 836)
        if_condition_97831 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 836, 8), result_and_keyword_97830)
        # Assigning a type to the variable 'if_condition_97831' (line 836)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 836, 8), 'if_condition_97831', if_condition_97831)
        # SSA begins for if statement (line 836)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 837):
        
        # Assigning a BinOp to a Name (line 837):
        float_97832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, 20), 'float')
        # Getting the type of 'h' (line 837)
        h_97833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 26), 'h')
        # Applying the binary operator '*' (line 837)
        result_mul_97834 = python_operator(stypy.reporting.localization.Localization(__file__, 837, 20), '*', float_97832, h_97833)
        
        float_97835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, 30), 'float')
        # Getting the type of 'h_' (line 837)
        h__97836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 37), 'h_')
        # Getting the type of 'd_' (line 837)
        d__97837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 42), 'd_')
        # Applying the binary operator '-' (line 837)
        result_sub_97838 = python_operator(stypy.reporting.localization.Localization(__file__, 837, 37), '-', h__97836, d__97837)
        
        # Applying the binary operator '*' (line 837)
        result_mul_97839 = python_operator(stypy.reporting.localization.Localization(__file__, 837, 30), '*', float_97835, result_sub_97838)
        
        # Applying the binary operator '-' (line 837)
        result_sub_97840 = python_operator(stypy.reporting.localization.Localization(__file__, 837, 20), '-', result_mul_97834, result_mul_97839)
        
        # Assigning a type to the variable 'd_new' (line 837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 837, 12), 'd_new', result_sub_97840)
        
        # Call to translate(...): (line 838)
        # Processing the call arguments (line 838)
        int_97844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 838, 47), 'int')
        # Getting the type of 'd' (line 838)
        d_97845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 50), 'd', False)
        # Getting the type of 'd_new' (line 838)
        d_new_97846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 54), 'd_new', False)
        # Applying the binary operator '-' (line 838)
        result_sub_97847 = python_operator(stypy.reporting.localization.Localization(__file__, 838, 50), '-', d_97845, d_new_97846)
        
        # Processing the call keyword arguments (line 838)
        kwargs_97848 = {}
        # Getting the type of 'self' (line 838)
        self_97841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 12), 'self', False)
        # Obtaining the member '_baseline_transform' of a type (line 838)
        _baseline_transform_97842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 12), self_97841, '_baseline_transform')
        # Obtaining the member 'translate' of a type (line 838)
        translate_97843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 12), _baseline_transform_97842, 'translate')
        # Calling translate(args, kwargs) (line 838)
        translate_call_result_97849 = invoke(stypy.reporting.localization.Localization(__file__, 838, 12), translate_97843, *[int_97844, result_sub_97847], **kwargs_97848)
        
        
        # Assigning a Name to a Name (line 839):
        
        # Assigning a Name to a Name (line 839):
        # Getting the type of 'd_new' (line 839)
        d_new_97850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 16), 'd_new')
        # Assigning a type to the variable 'd' (line 839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 12), 'd', d_new_97850)
        # SSA branch for the else part of an if statement (line 836)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 843):
        
        # Assigning a Call to a Name (line 843):
        
        # Call to max(...): (line 843)
        # Processing the call arguments (line 843)
        # Getting the type of 'h_' (line 843)
        h__97852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 22), 'h_', False)
        # Getting the type of 'd_' (line 843)
        d__97853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 27), 'd_', False)
        # Applying the binary operator '-' (line 843)
        result_sub_97854 = python_operator(stypy.reporting.localization.Localization(__file__, 843, 22), '-', h__97852, d__97853)
        
        # Getting the type of 'h' (line 843)
        h_97855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 31), 'h', False)
        # Getting the type of 'd' (line 843)
        d_97856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 35), 'd', False)
        # Applying the binary operator '-' (line 843)
        result_sub_97857 = python_operator(stypy.reporting.localization.Localization(__file__, 843, 31), '-', h_97855, d_97856)
        
        # Processing the call keyword arguments (line 843)
        kwargs_97858 = {}
        # Getting the type of 'max' (line 843)
        max_97851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 18), 'max', False)
        # Calling max(args, kwargs) (line 843)
        max_call_result_97859 = invoke(stypy.reporting.localization.Localization(__file__, 843, 18), max_97851, *[result_sub_97854, result_sub_97857], **kwargs_97858)
        
        # Assigning a type to the variable 'h_d' (line 843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 843, 12), 'h_d', max_call_result_97859)
        
        
        # Call to get_minimumdescent(...): (line 845)
        # Processing the call keyword arguments (line 845)
        kwargs_97862 = {}
        # Getting the type of 'self' (line 845)
        self_97860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 15), 'self', False)
        # Obtaining the member 'get_minimumdescent' of a type (line 845)
        get_minimumdescent_97861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 15), self_97860, 'get_minimumdescent')
        # Calling get_minimumdescent(args, kwargs) (line 845)
        get_minimumdescent_call_result_97863 = invoke(stypy.reporting.localization.Localization(__file__, 845, 15), get_minimumdescent_97861, *[], **kwargs_97862)
        
        # Testing the type of an if condition (line 845)
        if_condition_97864 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 845, 12), get_minimumdescent_call_result_97863)
        # Assigning a type to the variable 'if_condition_97864' (line 845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 12), 'if_condition_97864', if_condition_97864)
        # SSA begins for if statement (line 845)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 848):
        
        # Assigning a Call to a Name (line 848):
        
        # Call to max(...): (line 848)
        # Processing the call arguments (line 848)
        # Getting the type of 'd' (line 848)
        d_97866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 24), 'd', False)
        # Getting the type of 'd_' (line 848)
        d__97867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 27), 'd_', False)
        # Processing the call keyword arguments (line 848)
        kwargs_97868 = {}
        # Getting the type of 'max' (line 848)
        max_97865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 20), 'max', False)
        # Calling max(args, kwargs) (line 848)
        max_call_result_97869 = invoke(stypy.reporting.localization.Localization(__file__, 848, 20), max_97865, *[d_97866, d__97867], **kwargs_97868)
        
        # Assigning a type to the variable 'd' (line 848)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 16), 'd', max_call_result_97869)
        # SSA join for if statement (line 845)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 852):
        
        # Assigning a BinOp to a Name (line 852):
        # Getting the type of 'h_d' (line 852)
        h_d_97870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 16), 'h_d')
        # Getting the type of 'd' (line 852)
        d_97871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 22), 'd')
        # Applying the binary operator '+' (line 852)
        result_add_97872 = python_operator(stypy.reporting.localization.Localization(__file__, 852, 16), '+', h_d_97870, d_97871)
        
        # Assigning a type to the variable 'h' (line 852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 12), 'h', result_add_97872)
        # SSA join for if statement (line 836)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 854)
        tuple_97873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 854, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 854)
        # Adding element type (line 854)
        # Getting the type of 'w' (line 854)
        w_97874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 15), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 854, 15), tuple_97873, w_97874)
        # Adding element type (line 854)
        # Getting the type of 'h' (line 854)
        h_97875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 18), 'h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 854, 15), tuple_97873, h_97875)
        # Adding element type (line 854)
        float_97876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 854, 21), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 854, 15), tuple_97873, float_97876)
        # Adding element type (line 854)
        # Getting the type of 'd' (line 854)
        d_97877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 25), 'd')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 854, 15), tuple_97873, d_97877)
        
        # Assigning a type to the variable 'stypy_return_type' (line 854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'stypy_return_type', tuple_97873)
        
        # ################# End of 'get_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 824)
        stypy_return_type_97878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97878)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_extent'
        return stypy_return_type_97878


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 856, 4, False)
        # Assigning a type to the variable 'self' (line 857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 857, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextArea.draw.__dict__.__setitem__('stypy_localization', localization)
        TextArea.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextArea.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextArea.draw.__dict__.__setitem__('stypy_function_name', 'TextArea.draw')
        TextArea.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        TextArea.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextArea.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextArea.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextArea.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextArea.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextArea.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextArea.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_97879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 859, (-1)), 'unicode', u'\n        Draw the children\n        ')
        
        # Call to draw(...): (line 861)
        # Processing the call arguments (line 861)
        # Getting the type of 'renderer' (line 861)
        renderer_97883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 24), 'renderer', False)
        # Processing the call keyword arguments (line 861)
        kwargs_97884 = {}
        # Getting the type of 'self' (line 861)
        self_97880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 8), 'self', False)
        # Obtaining the member '_text' of a type (line 861)
        _text_97881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 8), self_97880, '_text')
        # Obtaining the member 'draw' of a type (line 861)
        draw_97882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 8), _text_97881, 'draw')
        # Calling draw(args, kwargs) (line 861)
        draw_call_result_97885 = invoke(stypy.reporting.localization.Localization(__file__, 861, 8), draw_97882, *[renderer_97883], **kwargs_97884)
        
        
        # Call to bbox_artist(...): (line 863)
        # Processing the call arguments (line 863)
        # Getting the type of 'self' (line 863)
        self_97887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 20), 'self', False)
        # Getting the type of 'renderer' (line 863)
        renderer_97888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 26), 'renderer', False)
        # Processing the call keyword arguments (line 863)
        # Getting the type of 'False' (line 863)
        False_97889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 41), 'False', False)
        keyword_97890 = False_97889
        
        # Call to dict(...): (line 863)
        # Processing the call keyword arguments (line 863)
        float_97892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 863, 63), 'float')
        keyword_97893 = float_97892
        kwargs_97894 = {'pad': keyword_97893}
        # Getting the type of 'dict' (line 863)
        dict_97891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 54), 'dict', False)
        # Calling dict(args, kwargs) (line 863)
        dict_call_result_97895 = invoke(stypy.reporting.localization.Localization(__file__, 863, 54), dict_97891, *[], **kwargs_97894)
        
        keyword_97896 = dict_call_result_97895
        kwargs_97897 = {'props': keyword_97896, 'fill': keyword_97890}
        # Getting the type of 'bbox_artist' (line 863)
        bbox_artist_97886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 8), 'bbox_artist', False)
        # Calling bbox_artist(args, kwargs) (line 863)
        bbox_artist_call_result_97898 = invoke(stypy.reporting.localization.Localization(__file__, 863, 8), bbox_artist_97886, *[self_97887, renderer_97888], **kwargs_97897)
        
        
        # Assigning a Name to a Attribute (line 864):
        
        # Assigning a Name to a Attribute (line 864):
        # Getting the type of 'False' (line 864)
        False_97899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 21), 'False')
        # Getting the type of 'self' (line 864)
        self_97900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 864)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 8), self_97900, 'stale', False_97899)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 856)
        stypy_return_type_97901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97901)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_97901


# Assigning a type to the variable 'TextArea' (line 700)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 700, 0), 'TextArea', TextArea)
# Declaration of the 'AuxTransformBox' class
# Getting the type of 'OffsetBox' (line 867)
OffsetBox_97902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 22), 'OffsetBox')

class AuxTransformBox(OffsetBox_97902, ):
    unicode_97903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, (-1)), 'unicode', u'\n    Offset Box with the aux_transform . Its children will be\n    transformed with the aux_transform first then will be\n    offseted. The absolute coordinate of the aux_transform is meaning\n    as it will be automatically adjust so that the left-lower corner\n    of the bounding box of children will be set to (0,0) before the\n    offset transform.\n\n    It is similar to drawing area, except that the extent of the box\n    is not predetermined but calculated from the window extent of its\n    children. Furthermore, the extent of the children will be\n    calculated in the transformed coordinate.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 881, 4, False)
        # Assigning a type to the variable 'self' (line 882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AuxTransformBox.__init__', ['aux_transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['aux_transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 882):
        
        # Assigning a Name to a Attribute (line 882):
        # Getting the type of 'aux_transform' (line 882)
        aux_transform_97904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 29), 'aux_transform')
        # Getting the type of 'self' (line 882)
        self_97905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 8), 'self')
        # Setting the type of the member 'aux_transform' of a type (line 882)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 8), self_97905, 'aux_transform', aux_transform_97904)
        
        # Call to __init__(...): (line 883)
        # Processing the call arguments (line 883)
        # Getting the type of 'self' (line 883)
        self_97908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 27), 'self', False)
        # Processing the call keyword arguments (line 883)
        kwargs_97909 = {}
        # Getting the type of 'OffsetBox' (line 883)
        OffsetBox_97906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'OffsetBox', False)
        # Obtaining the member '__init__' of a type (line 883)
        init___97907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 8), OffsetBox_97906, '__init__')
        # Calling __init__(args, kwargs) (line 883)
        init___call_result_97910 = invoke(stypy.reporting.localization.Localization(__file__, 883, 8), init___97907, *[self_97908], **kwargs_97909)
        
        
        # Assigning a Call to a Attribute (line 885):
        
        # Assigning a Call to a Attribute (line 885):
        
        # Call to Affine2D(...): (line 885)
        # Processing the call keyword arguments (line 885)
        kwargs_97913 = {}
        # Getting the type of 'mtransforms' (line 885)
        mtransforms_97911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 32), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 885)
        Affine2D_97912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 32), mtransforms_97911, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 885)
        Affine2D_call_result_97914 = invoke(stypy.reporting.localization.Localization(__file__, 885, 32), Affine2D_97912, *[], **kwargs_97913)
        
        # Getting the type of 'self' (line 885)
        self_97915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 8), 'self')
        # Setting the type of the member 'offset_transform' of a type (line 885)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 8), self_97915, 'offset_transform', Affine2D_call_result_97914)
        
        # Call to clear(...): (line 886)
        # Processing the call keyword arguments (line 886)
        kwargs_97919 = {}
        # Getting the type of 'self' (line 886)
        self_97916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 8), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 886)
        offset_transform_97917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 8), self_97916, 'offset_transform')
        # Obtaining the member 'clear' of a type (line 886)
        clear_97918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 8), offset_transform_97917, 'clear')
        # Calling clear(args, kwargs) (line 886)
        clear_call_result_97920 = invoke(stypy.reporting.localization.Localization(__file__, 886, 8), clear_97918, *[], **kwargs_97919)
        
        
        # Call to translate(...): (line 887)
        # Processing the call arguments (line 887)
        int_97924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 887, 40), 'int')
        int_97925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 887, 43), 'int')
        # Processing the call keyword arguments (line 887)
        kwargs_97926 = {}
        # Getting the type of 'self' (line 887)
        self_97921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 8), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 887)
        offset_transform_97922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 8), self_97921, 'offset_transform')
        # Obtaining the member 'translate' of a type (line 887)
        translate_97923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 8), offset_transform_97922, 'translate')
        # Calling translate(args, kwargs) (line 887)
        translate_call_result_97927 = invoke(stypy.reporting.localization.Localization(__file__, 887, 8), translate_97923, *[int_97924, int_97925], **kwargs_97926)
        
        
        # Assigning a Call to a Attribute (line 892):
        
        # Assigning a Call to a Attribute (line 892):
        
        # Call to Affine2D(...): (line 892)
        # Processing the call keyword arguments (line 892)
        kwargs_97930 = {}
        # Getting the type of 'mtransforms' (line 892)
        mtransforms_97928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 36), 'mtransforms', False)
        # Obtaining the member 'Affine2D' of a type (line 892)
        Affine2D_97929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 36), mtransforms_97928, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 892)
        Affine2D_call_result_97931 = invoke(stypy.reporting.localization.Localization(__file__, 892, 36), Affine2D_97929, *[], **kwargs_97930)
        
        # Getting the type of 'self' (line 892)
        self_97932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 8), 'self')
        # Setting the type of the member 'ref_offset_transform' of a type (line 892)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 8), self_97932, 'ref_offset_transform', Affine2D_call_result_97931)
        
        # Call to clear(...): (line 893)
        # Processing the call keyword arguments (line 893)
        kwargs_97936 = {}
        # Getting the type of 'self' (line 893)
        self_97933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 8), 'self', False)
        # Obtaining the member 'ref_offset_transform' of a type (line 893)
        ref_offset_transform_97934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 8), self_97933, 'ref_offset_transform')
        # Obtaining the member 'clear' of a type (line 893)
        clear_97935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 8), ref_offset_transform_97934, 'clear')
        # Calling clear(args, kwargs) (line 893)
        clear_call_result_97937 = invoke(stypy.reporting.localization.Localization(__file__, 893, 8), clear_97935, *[], **kwargs_97936)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def add_artist(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_artist'
        module_type_store = module_type_store.open_function_context('add_artist', 895, 4, False)
        # Assigning a type to the variable 'self' (line 896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AuxTransformBox.add_artist.__dict__.__setitem__('stypy_localization', localization)
        AuxTransformBox.add_artist.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AuxTransformBox.add_artist.__dict__.__setitem__('stypy_type_store', module_type_store)
        AuxTransformBox.add_artist.__dict__.__setitem__('stypy_function_name', 'AuxTransformBox.add_artist')
        AuxTransformBox.add_artist.__dict__.__setitem__('stypy_param_names_list', ['a'])
        AuxTransformBox.add_artist.__dict__.__setitem__('stypy_varargs_param_name', None)
        AuxTransformBox.add_artist.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AuxTransformBox.add_artist.__dict__.__setitem__('stypy_call_defaults', defaults)
        AuxTransformBox.add_artist.__dict__.__setitem__('stypy_call_varargs', varargs)
        AuxTransformBox.add_artist.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AuxTransformBox.add_artist.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AuxTransformBox.add_artist', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_artist', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_artist(...)' code ##################

        unicode_97938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 8), 'unicode', u'Add any :class:`~matplotlib.artist.Artist` to the container box')
        
        # Call to append(...): (line 897)
        # Processing the call arguments (line 897)
        # Getting the type of 'a' (line 897)
        a_97942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 30), 'a', False)
        # Processing the call keyword arguments (line 897)
        kwargs_97943 = {}
        # Getting the type of 'self' (line 897)
        self_97939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 8), 'self', False)
        # Obtaining the member '_children' of a type (line 897)
        _children_97940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 897, 8), self_97939, '_children')
        # Obtaining the member 'append' of a type (line 897)
        append_97941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 897, 8), _children_97940, 'append')
        # Calling append(args, kwargs) (line 897)
        append_call_result_97944 = invoke(stypy.reporting.localization.Localization(__file__, 897, 8), append_97941, *[a_97942], **kwargs_97943)
        
        
        # Call to set_transform(...): (line 898)
        # Processing the call arguments (line 898)
        
        # Call to get_transform(...): (line 898)
        # Processing the call keyword arguments (line 898)
        kwargs_97949 = {}
        # Getting the type of 'self' (line 898)
        self_97947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 24), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 898)
        get_transform_97948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 24), self_97947, 'get_transform')
        # Calling get_transform(args, kwargs) (line 898)
        get_transform_call_result_97950 = invoke(stypy.reporting.localization.Localization(__file__, 898, 24), get_transform_97948, *[], **kwargs_97949)
        
        # Processing the call keyword arguments (line 898)
        kwargs_97951 = {}
        # Getting the type of 'a' (line 898)
        a_97945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 8), 'a', False)
        # Obtaining the member 'set_transform' of a type (line 898)
        set_transform_97946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 8), a_97945, 'set_transform')
        # Calling set_transform(args, kwargs) (line 898)
        set_transform_call_result_97952 = invoke(stypy.reporting.localization.Localization(__file__, 898, 8), set_transform_97946, *[get_transform_call_result_97950], **kwargs_97951)
        
        
        # Assigning a Name to a Attribute (line 899):
        
        # Assigning a Name to a Attribute (line 899):
        # Getting the type of 'True' (line 899)
        True_97953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 21), 'True')
        # Getting the type of 'self' (line 899)
        self_97954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 899)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 899, 8), self_97954, 'stale', True_97953)
        
        # ################# End of 'add_artist(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_artist' in the type store
        # Getting the type of 'stypy_return_type' (line 895)
        stypy_return_type_97955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97955)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_artist'
        return stypy_return_type_97955


    @norecursion
    def get_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_transform'
        module_type_store = module_type_store.open_function_context('get_transform', 901, 4, False)
        # Assigning a type to the variable 'self' (line 902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AuxTransformBox.get_transform.__dict__.__setitem__('stypy_localization', localization)
        AuxTransformBox.get_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AuxTransformBox.get_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        AuxTransformBox.get_transform.__dict__.__setitem__('stypy_function_name', 'AuxTransformBox.get_transform')
        AuxTransformBox.get_transform.__dict__.__setitem__('stypy_param_names_list', [])
        AuxTransformBox.get_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        AuxTransformBox.get_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AuxTransformBox.get_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        AuxTransformBox.get_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        AuxTransformBox.get_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AuxTransformBox.get_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AuxTransformBox.get_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_transform(...)' code ##################

        unicode_97956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, (-1)), 'unicode', u'\n        Return the :class:`~matplotlib.transforms.Transform` applied\n        to the children\n        ')
        # Getting the type of 'self' (line 906)
        self_97957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 15), 'self')
        # Obtaining the member 'aux_transform' of a type (line 906)
        aux_transform_97958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 906, 15), self_97957, 'aux_transform')
        # Getting the type of 'self' (line 907)
        self_97959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 15), 'self')
        # Obtaining the member 'ref_offset_transform' of a type (line 907)
        ref_offset_transform_97960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 907, 15), self_97959, 'ref_offset_transform')
        # Applying the binary operator '+' (line 906)
        result_add_97961 = python_operator(stypy.reporting.localization.Localization(__file__, 906, 15), '+', aux_transform_97958, ref_offset_transform_97960)
        
        # Getting the type of 'self' (line 908)
        self_97962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 15), 'self')
        # Obtaining the member 'offset_transform' of a type (line 908)
        offset_transform_97963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 908, 15), self_97962, 'offset_transform')
        # Applying the binary operator '+' (line 907)
        result_add_97964 = python_operator(stypy.reporting.localization.Localization(__file__, 907, 41), '+', result_add_97961, offset_transform_97963)
        
        # Assigning a type to the variable 'stypy_return_type' (line 906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 906, 8), 'stypy_return_type', result_add_97964)
        
        # ################# End of 'get_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 901)
        stypy_return_type_97965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97965)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_transform'
        return stypy_return_type_97965


    @norecursion
    def set_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_transform'
        module_type_store = module_type_store.open_function_context('set_transform', 910, 4, False)
        # Assigning a type to the variable 'self' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AuxTransformBox.set_transform.__dict__.__setitem__('stypy_localization', localization)
        AuxTransformBox.set_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AuxTransformBox.set_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        AuxTransformBox.set_transform.__dict__.__setitem__('stypy_function_name', 'AuxTransformBox.set_transform')
        AuxTransformBox.set_transform.__dict__.__setitem__('stypy_param_names_list', ['t'])
        AuxTransformBox.set_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        AuxTransformBox.set_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AuxTransformBox.set_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        AuxTransformBox.set_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        AuxTransformBox.set_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AuxTransformBox.set_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AuxTransformBox.set_transform', ['t'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_transform', localization, ['t'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_transform(...)' code ##################

        unicode_97966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, (-1)), 'unicode', u'\n        set_transform is ignored.\n        ')
        pass
        
        # ################# End of 'set_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 910)
        stypy_return_type_97967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97967)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_transform'
        return stypy_return_type_97967


    @norecursion
    def set_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_offset'
        module_type_store = module_type_store.open_function_context('set_offset', 916, 4, False)
        # Assigning a type to the variable 'self' (line 917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AuxTransformBox.set_offset.__dict__.__setitem__('stypy_localization', localization)
        AuxTransformBox.set_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AuxTransformBox.set_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        AuxTransformBox.set_offset.__dict__.__setitem__('stypy_function_name', 'AuxTransformBox.set_offset')
        AuxTransformBox.set_offset.__dict__.__setitem__('stypy_param_names_list', ['xy'])
        AuxTransformBox.set_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        AuxTransformBox.set_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AuxTransformBox.set_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        AuxTransformBox.set_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        AuxTransformBox.set_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AuxTransformBox.set_offset.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AuxTransformBox.set_offset', ['xy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_offset', localization, ['xy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_offset(...)' code ##################

        unicode_97968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 921, (-1)), 'unicode', u'\n        set offset of the container.\n\n        Accept : tuple of x,y coordinate in disokay units.\n        ')
        
        # Assigning a Name to a Attribute (line 922):
        
        # Assigning a Name to a Attribute (line 922):
        # Getting the type of 'xy' (line 922)
        xy_97969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 23), 'xy')
        # Getting the type of 'self' (line 922)
        self_97970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 8), 'self')
        # Setting the type of the member '_offset' of a type (line 922)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 8), self_97970, '_offset', xy_97969)
        
        # Call to clear(...): (line 924)
        # Processing the call keyword arguments (line 924)
        kwargs_97974 = {}
        # Getting the type of 'self' (line 924)
        self_97971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 924)
        offset_transform_97972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 8), self_97971, 'offset_transform')
        # Obtaining the member 'clear' of a type (line 924)
        clear_97973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 8), offset_transform_97972, 'clear')
        # Calling clear(args, kwargs) (line 924)
        clear_call_result_97975 = invoke(stypy.reporting.localization.Localization(__file__, 924, 8), clear_97973, *[], **kwargs_97974)
        
        
        # Call to translate(...): (line 925)
        # Processing the call arguments (line 925)
        
        # Obtaining the type of the subscript
        int_97979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 925, 43), 'int')
        # Getting the type of 'xy' (line 925)
        xy_97980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 40), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 925)
        getitem___97981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 40), xy_97980, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 925)
        subscript_call_result_97982 = invoke(stypy.reporting.localization.Localization(__file__, 925, 40), getitem___97981, int_97979)
        
        
        # Obtaining the type of the subscript
        int_97983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 925, 50), 'int')
        # Getting the type of 'xy' (line 925)
        xy_97984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 47), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 925)
        getitem___97985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 47), xy_97984, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 925)
        subscript_call_result_97986 = invoke(stypy.reporting.localization.Localization(__file__, 925, 47), getitem___97985, int_97983)
        
        # Processing the call keyword arguments (line 925)
        kwargs_97987 = {}
        # Getting the type of 'self' (line 925)
        self_97976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 8), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 925)
        offset_transform_97977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 8), self_97976, 'offset_transform')
        # Obtaining the member 'translate' of a type (line 925)
        translate_97978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 8), offset_transform_97977, 'translate')
        # Calling translate(args, kwargs) (line 925)
        translate_call_result_97988 = invoke(stypy.reporting.localization.Localization(__file__, 925, 8), translate_97978, *[subscript_call_result_97982, subscript_call_result_97986], **kwargs_97987)
        
        
        # Assigning a Name to a Attribute (line 926):
        
        # Assigning a Name to a Attribute (line 926):
        # Getting the type of 'True' (line 926)
        True_97989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 21), 'True')
        # Getting the type of 'self' (line 926)
        self_97990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 926)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 926, 8), self_97990, 'stale', True_97989)
        
        # ################# End of 'set_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 916)
        stypy_return_type_97991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97991)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_offset'
        return stypy_return_type_97991


    @norecursion
    def get_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_offset'
        module_type_store = module_type_store.open_function_context('get_offset', 928, 4, False)
        # Assigning a type to the variable 'self' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AuxTransformBox.get_offset.__dict__.__setitem__('stypy_localization', localization)
        AuxTransformBox.get_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AuxTransformBox.get_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        AuxTransformBox.get_offset.__dict__.__setitem__('stypy_function_name', 'AuxTransformBox.get_offset')
        AuxTransformBox.get_offset.__dict__.__setitem__('stypy_param_names_list', [])
        AuxTransformBox.get_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        AuxTransformBox.get_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AuxTransformBox.get_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        AuxTransformBox.get_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        AuxTransformBox.get_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AuxTransformBox.get_offset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AuxTransformBox.get_offset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_offset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_offset(...)' code ##################

        unicode_97992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, (-1)), 'unicode', u'\n        return offset of the container.\n        ')
        # Getting the type of 'self' (line 932)
        self_97993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 15), 'self')
        # Obtaining the member '_offset' of a type (line 932)
        _offset_97994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 15), self_97993, '_offset')
        # Assigning a type to the variable 'stypy_return_type' (line 932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 932, 8), 'stypy_return_type', _offset_97994)
        
        # ################# End of 'get_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 928)
        stypy_return_type_97995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_97995)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_offset'
        return stypy_return_type_97995


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 934, 4, False)
        # Assigning a type to the variable 'self' (line 935)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AuxTransformBox.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        AuxTransformBox.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AuxTransformBox.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        AuxTransformBox.get_window_extent.__dict__.__setitem__('stypy_function_name', 'AuxTransformBox.get_window_extent')
        AuxTransformBox.get_window_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        AuxTransformBox.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        AuxTransformBox.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AuxTransformBox.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        AuxTransformBox.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        AuxTransformBox.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AuxTransformBox.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AuxTransformBox.get_window_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        unicode_97996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 937, (-1)), 'unicode', u'\n        get the bounding box in display space.\n        ')
        
        # Assigning a Call to a Tuple (line 938):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent(...): (line 938)
        # Processing the call arguments (line 938)
        # Getting the type of 'renderer' (line 938)
        renderer_97999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 39), 'renderer', False)
        # Processing the call keyword arguments (line 938)
        kwargs_98000 = {}
        # Getting the type of 'self' (line 938)
        self_97997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 23), 'self', False)
        # Obtaining the member 'get_extent' of a type (line 938)
        get_extent_97998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 23), self_97997, 'get_extent')
        # Calling get_extent(args, kwargs) (line 938)
        get_extent_call_result_98001 = invoke(stypy.reporting.localization.Localization(__file__, 938, 23), get_extent_97998, *[renderer_97999], **kwargs_98000)
        
        # Assigning a type to the variable 'call_assignment_95754' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'call_assignment_95754', get_extent_call_result_98001)
        
        # Assigning a Call to a Name (line 938):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98005 = {}
        # Getting the type of 'call_assignment_95754' (line 938)
        call_assignment_95754_98002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'call_assignment_95754', False)
        # Obtaining the member '__getitem__' of a type (line 938)
        getitem___98003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 8), call_assignment_95754_98002, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98006 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98003, *[int_98004], **kwargs_98005)
        
        # Assigning a type to the variable 'call_assignment_95755' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'call_assignment_95755', getitem___call_result_98006)
        
        # Assigning a Name to a Name (line 938):
        # Getting the type of 'call_assignment_95755' (line 938)
        call_assignment_95755_98007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'call_assignment_95755')
        # Assigning a type to the variable 'w' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'w', call_assignment_95755_98007)
        
        # Assigning a Call to a Name (line 938):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98011 = {}
        # Getting the type of 'call_assignment_95754' (line 938)
        call_assignment_95754_98008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'call_assignment_95754', False)
        # Obtaining the member '__getitem__' of a type (line 938)
        getitem___98009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 8), call_assignment_95754_98008, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98012 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98009, *[int_98010], **kwargs_98011)
        
        # Assigning a type to the variable 'call_assignment_95756' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'call_assignment_95756', getitem___call_result_98012)
        
        # Assigning a Name to a Name (line 938):
        # Getting the type of 'call_assignment_95756' (line 938)
        call_assignment_95756_98013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'call_assignment_95756')
        # Assigning a type to the variable 'h' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 11), 'h', call_assignment_95756_98013)
        
        # Assigning a Call to a Name (line 938):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98017 = {}
        # Getting the type of 'call_assignment_95754' (line 938)
        call_assignment_95754_98014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'call_assignment_95754', False)
        # Obtaining the member '__getitem__' of a type (line 938)
        getitem___98015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 8), call_assignment_95754_98014, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98018 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98015, *[int_98016], **kwargs_98017)
        
        # Assigning a type to the variable 'call_assignment_95757' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'call_assignment_95757', getitem___call_result_98018)
        
        # Assigning a Name to a Name (line 938):
        # Getting the type of 'call_assignment_95757' (line 938)
        call_assignment_95757_98019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'call_assignment_95757')
        # Assigning a type to the variable 'xd' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 14), 'xd', call_assignment_95757_98019)
        
        # Assigning a Call to a Name (line 938):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98023 = {}
        # Getting the type of 'call_assignment_95754' (line 938)
        call_assignment_95754_98020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'call_assignment_95754', False)
        # Obtaining the member '__getitem__' of a type (line 938)
        getitem___98021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 8), call_assignment_95754_98020, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98024 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98021, *[int_98022], **kwargs_98023)
        
        # Assigning a type to the variable 'call_assignment_95758' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'call_assignment_95758', getitem___call_result_98024)
        
        # Assigning a Name to a Name (line 938):
        # Getting the type of 'call_assignment_95758' (line 938)
        call_assignment_95758_98025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'call_assignment_95758')
        # Assigning a type to the variable 'yd' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 18), 'yd', call_assignment_95758_98025)
        
        # Assigning a Call to a Tuple (line 939):
        
        # Assigning a Call to a Name:
        
        # Call to get_offset(...): (line 939)
        # Processing the call keyword arguments (line 939)
        kwargs_98028 = {}
        # Getting the type of 'self' (line 939)
        self_98026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 17), 'self', False)
        # Obtaining the member 'get_offset' of a type (line 939)
        get_offset_98027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 939, 17), self_98026, 'get_offset')
        # Calling get_offset(args, kwargs) (line 939)
        get_offset_call_result_98029 = invoke(stypy.reporting.localization.Localization(__file__, 939, 17), get_offset_98027, *[], **kwargs_98028)
        
        # Assigning a type to the variable 'call_assignment_95759' (line 939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 8), 'call_assignment_95759', get_offset_call_result_98029)
        
        # Assigning a Call to a Name (line 939):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98033 = {}
        # Getting the type of 'call_assignment_95759' (line 939)
        call_assignment_95759_98030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 8), 'call_assignment_95759', False)
        # Obtaining the member '__getitem__' of a type (line 939)
        getitem___98031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 939, 8), call_assignment_95759_98030, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98034 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98031, *[int_98032], **kwargs_98033)
        
        # Assigning a type to the variable 'call_assignment_95760' (line 939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 8), 'call_assignment_95760', getitem___call_result_98034)
        
        # Assigning a Name to a Name (line 939):
        # Getting the type of 'call_assignment_95760' (line 939)
        call_assignment_95760_98035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 8), 'call_assignment_95760')
        # Assigning a type to the variable 'ox' (line 939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 8), 'ox', call_assignment_95760_98035)
        
        # Assigning a Call to a Name (line 939):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98039 = {}
        # Getting the type of 'call_assignment_95759' (line 939)
        call_assignment_95759_98036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 8), 'call_assignment_95759', False)
        # Obtaining the member '__getitem__' of a type (line 939)
        getitem___98037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 939, 8), call_assignment_95759_98036, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98040 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98037, *[int_98038], **kwargs_98039)
        
        # Assigning a type to the variable 'call_assignment_95761' (line 939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 8), 'call_assignment_95761', getitem___call_result_98040)
        
        # Assigning a Name to a Name (line 939):
        # Getting the type of 'call_assignment_95761' (line 939)
        call_assignment_95761_98041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 8), 'call_assignment_95761')
        # Assigning a type to the variable 'oy' (line 939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 12), 'oy', call_assignment_95761_98041)
        
        # Call to from_bounds(...): (line 940)
        # Processing the call arguments (line 940)
        # Getting the type of 'ox' (line 940)
        ox_98045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 44), 'ox', False)
        # Getting the type of 'xd' (line 940)
        xd_98046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 49), 'xd', False)
        # Applying the binary operator '-' (line 940)
        result_sub_98047 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 44), '-', ox_98045, xd_98046)
        
        # Getting the type of 'oy' (line 940)
        oy_98048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 53), 'oy', False)
        # Getting the type of 'yd' (line 940)
        yd_98049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 58), 'yd', False)
        # Applying the binary operator '-' (line 940)
        result_sub_98050 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 53), '-', oy_98048, yd_98049)
        
        # Getting the type of 'w' (line 940)
        w_98051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 62), 'w', False)
        # Getting the type of 'h' (line 940)
        h_98052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 65), 'h', False)
        # Processing the call keyword arguments (line 940)
        kwargs_98053 = {}
        # Getting the type of 'mtransforms' (line 940)
        mtransforms_98042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 15), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 940)
        Bbox_98043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 15), mtransforms_98042, 'Bbox')
        # Obtaining the member 'from_bounds' of a type (line 940)
        from_bounds_98044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 15), Bbox_98043, 'from_bounds')
        # Calling from_bounds(args, kwargs) (line 940)
        from_bounds_call_result_98054 = invoke(stypy.reporting.localization.Localization(__file__, 940, 15), from_bounds_98044, *[result_sub_98047, result_sub_98050, w_98051, h_98052], **kwargs_98053)
        
        # Assigning a type to the variable 'stypy_return_type' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 8), 'stypy_return_type', from_bounds_call_result_98054)
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 934)
        stypy_return_type_98055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98055)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_98055


    @norecursion
    def get_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_extent'
        module_type_store = module_type_store.open_function_context('get_extent', 942, 4, False)
        # Assigning a type to the variable 'self' (line 943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AuxTransformBox.get_extent.__dict__.__setitem__('stypy_localization', localization)
        AuxTransformBox.get_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AuxTransformBox.get_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        AuxTransformBox.get_extent.__dict__.__setitem__('stypy_function_name', 'AuxTransformBox.get_extent')
        AuxTransformBox.get_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        AuxTransformBox.get_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        AuxTransformBox.get_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AuxTransformBox.get_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        AuxTransformBox.get_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        AuxTransformBox.get_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AuxTransformBox.get_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AuxTransformBox.get_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_extent(...)' code ##################

        
        # Assigning a Call to a Name (line 945):
        
        # Assigning a Call to a Name (line 945):
        
        # Call to to_values(...): (line 945)
        # Processing the call keyword arguments (line 945)
        kwargs_98059 = {}
        # Getting the type of 'self' (line 945)
        self_98056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 15), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 945)
        offset_transform_98057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 15), self_98056, 'offset_transform')
        # Obtaining the member 'to_values' of a type (line 945)
        to_values_98058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 15), offset_transform_98057, 'to_values')
        # Calling to_values(args, kwargs) (line 945)
        to_values_call_result_98060 = invoke(stypy.reporting.localization.Localization(__file__, 945, 15), to_values_98058, *[], **kwargs_98059)
        
        # Assigning a type to the variable '_off' (line 945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 8), '_off', to_values_call_result_98060)
        
        # Call to clear(...): (line 946)
        # Processing the call keyword arguments (line 946)
        kwargs_98064 = {}
        # Getting the type of 'self' (line 946)
        self_98061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 8), 'self', False)
        # Obtaining the member 'ref_offset_transform' of a type (line 946)
        ref_offset_transform_98062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 946, 8), self_98061, 'ref_offset_transform')
        # Obtaining the member 'clear' of a type (line 946)
        clear_98063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 946, 8), ref_offset_transform_98062, 'clear')
        # Calling clear(args, kwargs) (line 946)
        clear_call_result_98065 = invoke(stypy.reporting.localization.Localization(__file__, 946, 8), clear_98063, *[], **kwargs_98064)
        
        
        # Call to clear(...): (line 947)
        # Processing the call keyword arguments (line 947)
        kwargs_98069 = {}
        # Getting the type of 'self' (line 947)
        self_98066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 8), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 947)
        offset_transform_98067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 8), self_98066, 'offset_transform')
        # Obtaining the member 'clear' of a type (line 947)
        clear_98068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 8), offset_transform_98067, 'clear')
        # Calling clear(args, kwargs) (line 947)
        clear_call_result_98070 = invoke(stypy.reporting.localization.Localization(__file__, 947, 8), clear_98068, *[], **kwargs_98069)
        
        
        # Assigning a ListComp to a Name (line 950):
        
        # Assigning a ListComp to a Name (line 950):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'self' (line 950)
        self_98076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 57), 'self')
        # Obtaining the member '_children' of a type (line 950)
        _children_98077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 57), self_98076, '_children')
        comprehension_98078 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 950, 18), _children_98077)
        # Assigning a type to the variable 'c' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 18), 'c', comprehension_98078)
        
        # Call to get_window_extent(...): (line 950)
        # Processing the call arguments (line 950)
        # Getting the type of 'renderer' (line 950)
        renderer_98073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 38), 'renderer', False)
        # Processing the call keyword arguments (line 950)
        kwargs_98074 = {}
        # Getting the type of 'c' (line 950)
        c_98071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 18), 'c', False)
        # Obtaining the member 'get_window_extent' of a type (line 950)
        get_window_extent_98072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 18), c_98071, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 950)
        get_window_extent_call_result_98075 = invoke(stypy.reporting.localization.Localization(__file__, 950, 18), get_window_extent_98072, *[renderer_98073], **kwargs_98074)
        
        list_98079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 18), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 950, 18), list_98079, get_window_extent_call_result_98075)
        # Assigning a type to the variable 'bboxes' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'bboxes', list_98079)
        
        # Assigning a Call to a Name (line 951):
        
        # Assigning a Call to a Name (line 951):
        
        # Call to union(...): (line 951)
        # Processing the call arguments (line 951)
        # Getting the type of 'bboxes' (line 951)
        bboxes_98083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 36), 'bboxes', False)
        # Processing the call keyword arguments (line 951)
        kwargs_98084 = {}
        # Getting the type of 'mtransforms' (line 951)
        mtransforms_98080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 13), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 951)
        Bbox_98081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 13), mtransforms_98080, 'Bbox')
        # Obtaining the member 'union' of a type (line 951)
        union_98082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 13), Bbox_98081, 'union')
        # Calling union(args, kwargs) (line 951)
        union_call_result_98085 = invoke(stypy.reporting.localization.Localization(__file__, 951, 13), union_98082, *[bboxes_98083], **kwargs_98084)
        
        # Assigning a type to the variable 'ub' (line 951)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 8), 'ub', union_call_result_98085)
        
        # Call to translate(...): (line 954)
        # Processing the call arguments (line 954)
        
        # Getting the type of 'ub' (line 954)
        ub_98089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 45), 'ub', False)
        # Obtaining the member 'x0' of a type (line 954)
        x0_98090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 45), ub_98089, 'x0')
        # Applying the 'usub' unary operator (line 954)
        result___neg___98091 = python_operator(stypy.reporting.localization.Localization(__file__, 954, 44), 'usub', x0_98090)
        
        
        # Getting the type of 'ub' (line 954)
        ub_98092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 53), 'ub', False)
        # Obtaining the member 'y0' of a type (line 954)
        y0_98093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 53), ub_98092, 'y0')
        # Applying the 'usub' unary operator (line 954)
        result___neg___98094 = python_operator(stypy.reporting.localization.Localization(__file__, 954, 52), 'usub', y0_98093)
        
        # Processing the call keyword arguments (line 954)
        kwargs_98095 = {}
        # Getting the type of 'self' (line 954)
        self_98086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 8), 'self', False)
        # Obtaining the member 'ref_offset_transform' of a type (line 954)
        ref_offset_transform_98087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 8), self_98086, 'ref_offset_transform')
        # Obtaining the member 'translate' of a type (line 954)
        translate_98088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 8), ref_offset_transform_98087, 'translate')
        # Calling translate(args, kwargs) (line 954)
        translate_call_result_98096 = invoke(stypy.reporting.localization.Localization(__file__, 954, 8), translate_98088, *[result___neg___98091, result___neg___98094], **kwargs_98095)
        
        
        # Assigning a Call to a Name (line 957):
        
        # Assigning a Call to a Name (line 957):
        
        # Call to matrix_from_values(...): (line 957)
        # Getting the type of '_off' (line 957)
        _off_98100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 56), '_off', False)
        # Processing the call keyword arguments (line 957)
        kwargs_98101 = {}
        # Getting the type of 'self' (line 957)
        self_98097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 14), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 957)
        offset_transform_98098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 14), self_98097, 'offset_transform')
        # Obtaining the member 'matrix_from_values' of a type (line 957)
        matrix_from_values_98099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 14), offset_transform_98098, 'matrix_from_values')
        # Calling matrix_from_values(args, kwargs) (line 957)
        matrix_from_values_call_result_98102 = invoke(stypy.reporting.localization.Localization(__file__, 957, 14), matrix_from_values_98099, *[_off_98100], **kwargs_98101)
        
        # Assigning a type to the variable 'mtx' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 8), 'mtx', matrix_from_values_call_result_98102)
        
        # Call to set_matrix(...): (line 958)
        # Processing the call arguments (line 958)
        # Getting the type of 'mtx' (line 958)
        mtx_98106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 41), 'mtx', False)
        # Processing the call keyword arguments (line 958)
        kwargs_98107 = {}
        # Getting the type of 'self' (line 958)
        self_98103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 8), 'self', False)
        # Obtaining the member 'offset_transform' of a type (line 958)
        offset_transform_98104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 8), self_98103, 'offset_transform')
        # Obtaining the member 'set_matrix' of a type (line 958)
        set_matrix_98105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 8), offset_transform_98104, 'set_matrix')
        # Calling set_matrix(args, kwargs) (line 958)
        set_matrix_call_result_98108 = invoke(stypy.reporting.localization.Localization(__file__, 958, 8), set_matrix_98105, *[mtx_98106], **kwargs_98107)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 960)
        tuple_98109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 960)
        # Adding element type (line 960)
        # Getting the type of 'ub' (line 960)
        ub_98110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 15), 'ub')
        # Obtaining the member 'width' of a type (line 960)
        width_98111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 15), ub_98110, 'width')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 960, 15), tuple_98109, width_98111)
        # Adding element type (line 960)
        # Getting the type of 'ub' (line 960)
        ub_98112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 25), 'ub')
        # Obtaining the member 'height' of a type (line 960)
        height_98113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 25), ub_98112, 'height')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 960, 15), tuple_98109, height_98113)
        # Adding element type (line 960)
        float_98114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 960, 15), tuple_98109, float_98114)
        # Adding element type (line 960)
        float_98115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 40), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 960, 15), tuple_98109, float_98115)
        
        # Assigning a type to the variable 'stypy_return_type' (line 960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 8), 'stypy_return_type', tuple_98109)
        
        # ################# End of 'get_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 942)
        stypy_return_type_98116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98116)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_extent'
        return stypy_return_type_98116


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 962, 4, False)
        # Assigning a type to the variable 'self' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AuxTransformBox.draw.__dict__.__setitem__('stypy_localization', localization)
        AuxTransformBox.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AuxTransformBox.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        AuxTransformBox.draw.__dict__.__setitem__('stypy_function_name', 'AuxTransformBox.draw')
        AuxTransformBox.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        AuxTransformBox.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        AuxTransformBox.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AuxTransformBox.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        AuxTransformBox.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        AuxTransformBox.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AuxTransformBox.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AuxTransformBox.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_98117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 965, (-1)), 'unicode', u'\n        Draw the children\n        ')
        
        # Getting the type of 'self' (line 967)
        self_98118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 17), 'self')
        # Obtaining the member '_children' of a type (line 967)
        _children_98119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 17), self_98118, '_children')
        # Testing the type of a for loop iterable (line 967)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 967, 8), _children_98119)
        # Getting the type of the for loop variable (line 967)
        for_loop_var_98120 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 967, 8), _children_98119)
        # Assigning a type to the variable 'c' (line 967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 8), 'c', for_loop_var_98120)
        # SSA begins for a for statement (line 967)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to draw(...): (line 968)
        # Processing the call arguments (line 968)
        # Getting the type of 'renderer' (line 968)
        renderer_98123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 19), 'renderer', False)
        # Processing the call keyword arguments (line 968)
        kwargs_98124 = {}
        # Getting the type of 'c' (line 968)
        c_98121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 12), 'c', False)
        # Obtaining the member 'draw' of a type (line 968)
        draw_98122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 12), c_98121, 'draw')
        # Calling draw(args, kwargs) (line 968)
        draw_call_result_98125 = invoke(stypy.reporting.localization.Localization(__file__, 968, 12), draw_98122, *[renderer_98123], **kwargs_98124)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to bbox_artist(...): (line 970)
        # Processing the call arguments (line 970)
        # Getting the type of 'self' (line 970)
        self_98127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 20), 'self', False)
        # Getting the type of 'renderer' (line 970)
        renderer_98128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 26), 'renderer', False)
        # Processing the call keyword arguments (line 970)
        # Getting the type of 'False' (line 970)
        False_98129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 41), 'False', False)
        keyword_98130 = False_98129
        
        # Call to dict(...): (line 970)
        # Processing the call keyword arguments (line 970)
        float_98132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 63), 'float')
        keyword_98133 = float_98132
        kwargs_98134 = {'pad': keyword_98133}
        # Getting the type of 'dict' (line 970)
        dict_98131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 54), 'dict', False)
        # Calling dict(args, kwargs) (line 970)
        dict_call_result_98135 = invoke(stypy.reporting.localization.Localization(__file__, 970, 54), dict_98131, *[], **kwargs_98134)
        
        keyword_98136 = dict_call_result_98135
        kwargs_98137 = {'props': keyword_98136, 'fill': keyword_98130}
        # Getting the type of 'bbox_artist' (line 970)
        bbox_artist_98126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'bbox_artist', False)
        # Calling bbox_artist(args, kwargs) (line 970)
        bbox_artist_call_result_98138 = invoke(stypy.reporting.localization.Localization(__file__, 970, 8), bbox_artist_98126, *[self_98127, renderer_98128], **kwargs_98137)
        
        
        # Assigning a Name to a Attribute (line 971):
        
        # Assigning a Name to a Attribute (line 971):
        # Getting the type of 'False' (line 971)
        False_98139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 21), 'False')
        # Getting the type of 'self' (line 971)
        self_98140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 971)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 8), self_98140, 'stale', False_98139)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 962)
        stypy_return_type_98141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98141)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_98141


# Assigning a type to the variable 'AuxTransformBox' (line 867)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 867, 0), 'AuxTransformBox', AuxTransformBox)
# Declaration of the 'AnchoredOffsetbox' class
# Getting the type of 'OffsetBox' (line 974)
OffsetBox_98142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 24), 'OffsetBox')

class AnchoredOffsetbox(OffsetBox_98142, ):
    unicode_98143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 981, (-1)), 'unicode', u'\n    An offset box placed according to the legend location\n    loc. AnchoredOffsetbox has a single child. When multiple children\n    is needed, use other OffsetBox class to enclose them.  By default,\n    the offset box is anchored against its parent axes. You may\n    explicitly specify the bbox_to_anchor.\n    ')
    
    # Assigning a Num to a Name (line 982):
    
    # Assigning a Dict to a Name (line 985):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_98144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 21), 'float')
        float_98145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 36), 'float')
        # Getting the type of 'None' (line 999)
        None_98146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 23), 'None')
        # Getting the type of 'None' (line 999)
        None_98147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 34), 'None')
        # Getting the type of 'True' (line 999)
        True_98148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 48), 'True')
        # Getting the type of 'None' (line 1000)
        None_98149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 32), 'None')
        # Getting the type of 'None' (line 1001)
        None_98150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 32), 'None')
        defaults = [float_98144, float_98145, None_98146, None_98147, True_98148, None_98149, None_98150]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 997, 4, False)
        # Assigning a type to the variable 'self' (line 998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnchoredOffsetbox.__init__', ['loc', 'pad', 'borderpad', 'child', 'prop', 'frameon', 'bbox_to_anchor', 'bbox_transform'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['loc', 'pad', 'borderpad', 'child', 'prop', 'frameon', 'bbox_to_anchor', 'bbox_transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_98151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1033, (-1)), 'unicode', u"\n        loc is a string or an integer specifying the legend location.\n        The valid location codes are::\n\n        'upper right'  : 1,\n        'upper left'   : 2,\n        'lower left'   : 3,\n        'lower right'  : 4,\n        'right'        : 5, (same as 'center right', for back-compatibility)\n        'center left'  : 6,\n        'center right' : 7,\n        'lower center' : 8,\n        'upper center' : 9,\n        'center'       : 10,\n\n        pad : pad around the child for drawing a frame. given in\n          fraction of fontsize.\n\n        borderpad : pad between offsetbox frame and the bbox_to_anchor,\n\n        child : OffsetBox instance that will be anchored.\n\n        prop : font property. This is only used as a reference for paddings.\n\n        frameon : draw a frame box if True.\n\n        bbox_to_anchor : bbox to anchor. Use self.axes.bbox if None.\n\n        bbox_transform : with which the bbox_to_anchor will be transformed.\n\n        ")
        
        # Call to __init__(...): (line 1034)
        # Processing the call keyword arguments (line 1034)
        # Getting the type of 'kwargs' (line 1034)
        kwargs_98158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 50), 'kwargs', False)
        kwargs_98159 = {'kwargs_98158': kwargs_98158}
        
        # Call to super(...): (line 1034)
        # Processing the call arguments (line 1034)
        # Getting the type of 'AnchoredOffsetbox' (line 1034)
        AnchoredOffsetbox_98153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 14), 'AnchoredOffsetbox', False)
        # Getting the type of 'self' (line 1034)
        self_98154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 33), 'self', False)
        # Processing the call keyword arguments (line 1034)
        kwargs_98155 = {}
        # Getting the type of 'super' (line 1034)
        super_98152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 8), 'super', False)
        # Calling super(args, kwargs) (line 1034)
        super_call_result_98156 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 8), super_98152, *[AnchoredOffsetbox_98153, self_98154], **kwargs_98155)
        
        # Obtaining the member '__init__' of a type (line 1034)
        init___98157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 8), super_call_result_98156, '__init__')
        # Calling __init__(args, kwargs) (line 1034)
        init___call_result_98160 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 8), init___98157, *[], **kwargs_98159)
        
        
        # Call to set_bbox_to_anchor(...): (line 1036)
        # Processing the call arguments (line 1036)
        # Getting the type of 'bbox_to_anchor' (line 1036)
        bbox_to_anchor_98163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 32), 'bbox_to_anchor', False)
        # Getting the type of 'bbox_transform' (line 1036)
        bbox_transform_98164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 48), 'bbox_transform', False)
        # Processing the call keyword arguments (line 1036)
        kwargs_98165 = {}
        # Getting the type of 'self' (line 1036)
        self_98161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 8), 'self', False)
        # Obtaining the member 'set_bbox_to_anchor' of a type (line 1036)
        set_bbox_to_anchor_98162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 8), self_98161, 'set_bbox_to_anchor')
        # Calling set_bbox_to_anchor(args, kwargs) (line 1036)
        set_bbox_to_anchor_call_result_98166 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 8), set_bbox_to_anchor_98162, *[bbox_to_anchor_98163, bbox_transform_98164], **kwargs_98165)
        
        
        # Call to set_child(...): (line 1037)
        # Processing the call arguments (line 1037)
        # Getting the type of 'child' (line 1037)
        child_98169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 23), 'child', False)
        # Processing the call keyword arguments (line 1037)
        kwargs_98170 = {}
        # Getting the type of 'self' (line 1037)
        self_98167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 8), 'self', False)
        # Obtaining the member 'set_child' of a type (line 1037)
        set_child_98168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 8), self_98167, 'set_child')
        # Calling set_child(args, kwargs) (line 1037)
        set_child_call_result_98171 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 8), set_child_98168, *[child_98169], **kwargs_98170)
        
        
        
        # Call to isinstance(...): (line 1039)
        # Processing the call arguments (line 1039)
        # Getting the type of 'loc' (line 1039)
        loc_98173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 22), 'loc', False)
        # Getting the type of 'six' (line 1039)
        six_98174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 27), 'six', False)
        # Obtaining the member 'string_types' of a type (line 1039)
        string_types_98175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 27), six_98174, 'string_types')
        # Processing the call keyword arguments (line 1039)
        kwargs_98176 = {}
        # Getting the type of 'isinstance' (line 1039)
        isinstance_98172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1039)
        isinstance_call_result_98177 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 11), isinstance_98172, *[loc_98173, string_types_98175], **kwargs_98176)
        
        # Testing the type of an if condition (line 1039)
        if_condition_98178 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1039, 8), isinstance_call_result_98177)
        # Assigning a type to the variable 'if_condition_98178' (line 1039)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1039, 8), 'if_condition_98178', if_condition_98178)
        # SSA begins for if statement (line 1039)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 1040)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Subscript to a Name (line 1041):
        
        # Assigning a Subscript to a Name (line 1041):
        
        # Obtaining the type of the subscript
        # Getting the type of 'loc' (line 1041)
        loc_98179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 33), 'loc')
        # Getting the type of 'self' (line 1041)
        self_98180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 22), 'self')
        # Obtaining the member 'codes' of a type (line 1041)
        codes_98181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 22), self_98180, 'codes')
        # Obtaining the member '__getitem__' of a type (line 1041)
        getitem___98182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 22), codes_98181, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1041)
        subscript_call_result_98183 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 22), getitem___98182, loc_98179)
        
        # Assigning a type to the variable 'loc' (line 1041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 16), 'loc', subscript_call_result_98183)
        # SSA branch for the except part of a try statement (line 1040)
        # SSA branch for the except 'KeyError' branch of a try statement (line 1040)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 1043)
        # Processing the call arguments (line 1043)
        unicode_98185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 33), 'unicode', u'Unrecognized location "%s". Valid locations are\n\t%s\n')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1045)
        tuple_98186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1045)
        # Adding element type (line 1045)
        # Getting the type of 'loc' (line 1045)
        loc_98187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 36), 'loc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1045, 36), tuple_98186, loc_98187)
        # Adding element type (line 1045)
        
        # Call to join(...): (line 1045)
        # Processing the call arguments (line 1045)
        # Getting the type of 'self' (line 1045)
        self_98190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 53), 'self', False)
        # Obtaining the member 'codes' of a type (line 1045)
        codes_98191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 53), self_98190, 'codes')
        # Processing the call keyword arguments (line 1045)
        kwargs_98192 = {}
        unicode_98188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 41), 'unicode', u'\n\t')
        # Obtaining the member 'join' of a type (line 1045)
        join_98189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 41), unicode_98188, 'join')
        # Calling join(args, kwargs) (line 1045)
        join_call_result_98193 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 41), join_98189, *[codes_98191], **kwargs_98192)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1045, 36), tuple_98186, join_call_result_98193)
        
        # Applying the binary operator '%' (line 1043)
        result_mod_98194 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 33), '%', unicode_98185, tuple_98186)
        
        # Processing the call keyword arguments (line 1043)
        kwargs_98195 = {}
        # Getting the type of 'ValueError' (line 1043)
        ValueError_98184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1043)
        ValueError_call_result_98196 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 22), ValueError_98184, *[result_mod_98194], **kwargs_98195)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1043, 16), ValueError_call_result_98196, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 1040)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1039)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1047):
        
        # Assigning a Name to a Attribute (line 1047):
        # Getting the type of 'loc' (line 1047)
        loc_98197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 19), 'loc')
        # Getting the type of 'self' (line 1047)
        self_98198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 8), 'self')
        # Setting the type of the member 'loc' of a type (line 1047)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 8), self_98198, 'loc', loc_98197)
        
        # Assigning a Name to a Attribute (line 1048):
        
        # Assigning a Name to a Attribute (line 1048):
        # Getting the type of 'borderpad' (line 1048)
        borderpad_98199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 25), 'borderpad')
        # Getting the type of 'self' (line 1048)
        self_98200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 8), 'self')
        # Setting the type of the member 'borderpad' of a type (line 1048)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 8), self_98200, 'borderpad', borderpad_98199)
        
        # Assigning a Name to a Attribute (line 1049):
        
        # Assigning a Name to a Attribute (line 1049):
        # Getting the type of 'pad' (line 1049)
        pad_98201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 19), 'pad')
        # Getting the type of 'self' (line 1049)
        self_98202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 8), 'self')
        # Setting the type of the member 'pad' of a type (line 1049)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 8), self_98202, 'pad', pad_98201)
        
        # Type idiom detected: calculating its left and rigth part (line 1051)
        # Getting the type of 'prop' (line 1051)
        prop_98203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 11), 'prop')
        # Getting the type of 'None' (line 1051)
        None_98204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 19), 'None')
        
        (may_be_98205, more_types_in_union_98206) = may_be_none(prop_98203, None_98204)

        if may_be_98205:

            if more_types_in_union_98206:
                # Runtime conditional SSA (line 1051)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 1052):
            
            # Assigning a Call to a Attribute (line 1052):
            
            # Call to FontProperties(...): (line 1052)
            # Processing the call keyword arguments (line 1052)
            
            # Obtaining the type of the subscript
            unicode_98208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 53), 'unicode', u'legend.fontsize')
            # Getting the type of 'rcParams' (line 1052)
            rcParams_98209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 44), 'rcParams', False)
            # Obtaining the member '__getitem__' of a type (line 1052)
            getitem___98210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 44), rcParams_98209, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1052)
            subscript_call_result_98211 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 44), getitem___98210, unicode_98208)
            
            keyword_98212 = subscript_call_result_98211
            kwargs_98213 = {'size': keyword_98212}
            # Getting the type of 'FontProperties' (line 1052)
            FontProperties_98207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 24), 'FontProperties', False)
            # Calling FontProperties(args, kwargs) (line 1052)
            FontProperties_call_result_98214 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 24), FontProperties_98207, *[], **kwargs_98213)
            
            # Getting the type of 'self' (line 1052)
            self_98215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 12), 'self')
            # Setting the type of the member 'prop' of a type (line 1052)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 12), self_98215, 'prop', FontProperties_call_result_98214)

            if more_types_in_union_98206:
                # Runtime conditional SSA for else branch (line 1051)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_98205) or more_types_in_union_98206):
            
            # Type idiom detected: calculating its left and rigth part (line 1053)
            # Getting the type of 'dict' (line 1053)
            dict_98216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 30), 'dict')
            # Getting the type of 'prop' (line 1053)
            prop_98217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 24), 'prop')
            
            (may_be_98218, more_types_in_union_98219) = may_be_subtype(dict_98216, prop_98217)

            if may_be_98218:

                if more_types_in_union_98219:
                    # Runtime conditional SSA (line 1053)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'prop' (line 1053)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1053, 13), 'prop', remove_not_subtype_from_union(prop_98217, dict))
                
                # Assigning a Call to a Attribute (line 1054):
                
                # Assigning a Call to a Attribute (line 1054):
                
                # Call to FontProperties(...): (line 1054)
                # Processing the call keyword arguments (line 1054)
                # Getting the type of 'prop' (line 1054)
                prop_98221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 41), 'prop', False)
                kwargs_98222 = {'prop_98221': prop_98221}
                # Getting the type of 'FontProperties' (line 1054)
                FontProperties_98220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 24), 'FontProperties', False)
                # Calling FontProperties(args, kwargs) (line 1054)
                FontProperties_call_result_98223 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 24), FontProperties_98220, *[], **kwargs_98222)
                
                # Getting the type of 'self' (line 1054)
                self_98224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 12), 'self')
                # Setting the type of the member 'prop' of a type (line 1054)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 12), self_98224, 'prop', FontProperties_call_result_98223)
                
                
                unicode_98225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1055, 15), 'unicode', u'size')
                # Getting the type of 'prop' (line 1055)
                prop_98226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 29), 'prop')
                # Applying the binary operator 'notin' (line 1055)
                result_contains_98227 = python_operator(stypy.reporting.localization.Localization(__file__, 1055, 15), 'notin', unicode_98225, prop_98226)
                
                # Testing the type of an if condition (line 1055)
                if_condition_98228 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1055, 12), result_contains_98227)
                # Assigning a type to the variable 'if_condition_98228' (line 1055)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 12), 'if_condition_98228', if_condition_98228)
                # SSA begins for if statement (line 1055)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Call to set_size(...): (line 1056)
                # Processing the call arguments (line 1056)
                
                # Obtaining the type of the subscript
                unicode_98232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1056, 44), 'unicode', u'legend.fontsize')
                # Getting the type of 'rcParams' (line 1056)
                rcParams_98233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 35), 'rcParams', False)
                # Obtaining the member '__getitem__' of a type (line 1056)
                getitem___98234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 35), rcParams_98233, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1056)
                subscript_call_result_98235 = invoke(stypy.reporting.localization.Localization(__file__, 1056, 35), getitem___98234, unicode_98232)
                
                # Processing the call keyword arguments (line 1056)
                kwargs_98236 = {}
                # Getting the type of 'self' (line 1056)
                self_98229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 16), 'self', False)
                # Obtaining the member 'prop' of a type (line 1056)
                prop_98230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 16), self_98229, 'prop')
                # Obtaining the member 'set_size' of a type (line 1056)
                set_size_98231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 16), prop_98230, 'set_size')
                # Calling set_size(args, kwargs) (line 1056)
                set_size_call_result_98237 = invoke(stypy.reporting.localization.Localization(__file__, 1056, 16), set_size_98231, *[subscript_call_result_98235], **kwargs_98236)
                
                # SSA join for if statement (line 1055)
                module_type_store = module_type_store.join_ssa_context()
                

                if more_types_in_union_98219:
                    # Runtime conditional SSA for else branch (line 1053)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_98218) or more_types_in_union_98219):
                # Assigning a type to the variable 'prop' (line 1053)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1053, 13), 'prop', remove_subtype_from_union(prop_98217, dict))
                
                # Assigning a Name to a Attribute (line 1058):
                
                # Assigning a Name to a Attribute (line 1058):
                # Getting the type of 'prop' (line 1058)
                prop_98238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 24), 'prop')
                # Getting the type of 'self' (line 1058)
                self_98239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 12), 'self')
                # Setting the type of the member 'prop' of a type (line 1058)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1058, 12), self_98239, 'prop', prop_98238)

                if (may_be_98218 and more_types_in_union_98219):
                    # SSA join for if statement (line 1053)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_98205 and more_types_in_union_98206):
                # SSA join for if statement (line 1051)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 1060):
        
        # Assigning a Call to a Attribute (line 1060):
        
        # Call to FancyBboxPatch(...): (line 1060)
        # Processing the call keyword arguments (line 1060)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1061)
        tuple_98241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1061, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1061)
        # Adding element type (line 1061)
        float_98242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1061, 16), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1061, 16), tuple_98241, float_98242)
        # Adding element type (line 1061)
        float_98243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1061, 21), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1061, 16), tuple_98241, float_98243)
        
        keyword_98244 = tuple_98241
        float_98245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1061, 33), 'float')
        keyword_98246 = float_98245
        float_98247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1061, 44), 'float')
        keyword_98248 = float_98247
        unicode_98249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1062, 22), 'unicode', u'w')
        keyword_98250 = unicode_98249
        unicode_98251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1062, 37), 'unicode', u'k')
        keyword_98252 = unicode_98251
        
        # Call to get_size_in_points(...): (line 1063)
        # Processing the call keyword arguments (line 1063)
        kwargs_98256 = {}
        # Getting the type of 'self' (line 1063)
        self_98253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 27), 'self', False)
        # Obtaining the member 'prop' of a type (line 1063)
        prop_98254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1063, 27), self_98253, 'prop')
        # Obtaining the member 'get_size_in_points' of a type (line 1063)
        get_size_in_points_98255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1063, 27), prop_98254, 'get_size_in_points')
        # Calling get_size_in_points(args, kwargs) (line 1063)
        get_size_in_points_call_result_98257 = invoke(stypy.reporting.localization.Localization(__file__, 1063, 27), get_size_in_points_98255, *[], **kwargs_98256)
        
        keyword_98258 = get_size_in_points_call_result_98257
        # Getting the type of 'True' (line 1064)
        True_98259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 17), 'True', False)
        keyword_98260 = True_98259
        kwargs_98261 = {'mutation_scale': keyword_98258, 'edgecolor': keyword_98252, 'facecolor': keyword_98250, 'height': keyword_98248, 'width': keyword_98246, 'xy': keyword_98244, 'snap': keyword_98260}
        # Getting the type of 'FancyBboxPatch' (line 1060)
        FancyBboxPatch_98240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 21), 'FancyBboxPatch', False)
        # Calling FancyBboxPatch(args, kwargs) (line 1060)
        FancyBboxPatch_call_result_98262 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 21), FancyBboxPatch_98240, *[], **kwargs_98261)
        
        # Getting the type of 'self' (line 1060)
        self_98263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 8), 'self')
        # Setting the type of the member 'patch' of a type (line 1060)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 8), self_98263, 'patch', FancyBboxPatch_call_result_98262)
        
        # Call to set_boxstyle(...): (line 1066)
        # Processing the call arguments (line 1066)
        unicode_98267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 32), 'unicode', u'square')
        # Processing the call keyword arguments (line 1066)
        int_98268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 46), 'int')
        keyword_98269 = int_98268
        kwargs_98270 = {'pad': keyword_98269}
        # Getting the type of 'self' (line 1066)
        self_98264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 8), 'self', False)
        # Obtaining the member 'patch' of a type (line 1066)
        patch_98265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1066, 8), self_98264, 'patch')
        # Obtaining the member 'set_boxstyle' of a type (line 1066)
        set_boxstyle_98266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1066, 8), patch_98265, 'set_boxstyle')
        # Calling set_boxstyle(args, kwargs) (line 1066)
        set_boxstyle_call_result_98271 = invoke(stypy.reporting.localization.Localization(__file__, 1066, 8), set_boxstyle_98266, *[unicode_98267], **kwargs_98270)
        
        
        # Assigning a Name to a Attribute (line 1067):
        
        # Assigning a Name to a Attribute (line 1067):
        # Getting the type of 'frameon' (line 1067)
        frameon_98272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 26), 'frameon')
        # Getting the type of 'self' (line 1067)
        self_98273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 8), 'self')
        # Setting the type of the member '_drawFrame' of a type (line 1067)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 8), self_98273, '_drawFrame', frameon_98272)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_child(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_child'
        module_type_store = module_type_store.open_function_context('set_child', 1069, 4, False)
        # Assigning a type to the variable 'self' (line 1070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1070, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnchoredOffsetbox.set_child.__dict__.__setitem__('stypy_localization', localization)
        AnchoredOffsetbox.set_child.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnchoredOffsetbox.set_child.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnchoredOffsetbox.set_child.__dict__.__setitem__('stypy_function_name', 'AnchoredOffsetbox.set_child')
        AnchoredOffsetbox.set_child.__dict__.__setitem__('stypy_param_names_list', ['child'])
        AnchoredOffsetbox.set_child.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnchoredOffsetbox.set_child.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnchoredOffsetbox.set_child.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnchoredOffsetbox.set_child.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnchoredOffsetbox.set_child.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnchoredOffsetbox.set_child.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnchoredOffsetbox.set_child', ['child'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_child', localization, ['child'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_child(...)' code ##################

        unicode_98274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1070, 8), 'unicode', u'set the child to be anchored')
        
        # Assigning a Name to a Attribute (line 1071):
        
        # Assigning a Name to a Attribute (line 1071):
        # Getting the type of 'child' (line 1071)
        child_98275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 22), 'child')
        # Getting the type of 'self' (line 1071)
        self_98276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 8), 'self')
        # Setting the type of the member '_child' of a type (line 1071)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1071, 8), self_98276, '_child', child_98275)
        
        # Type idiom detected: calculating its left and rigth part (line 1072)
        # Getting the type of 'child' (line 1072)
        child_98277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 8), 'child')
        # Getting the type of 'None' (line 1072)
        None_98278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 24), 'None')
        
        (may_be_98279, more_types_in_union_98280) = may_not_be_none(child_98277, None_98278)

        if may_be_98279:

            if more_types_in_union_98280:
                # Runtime conditional SSA (line 1072)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Attribute (line 1073):
            
            # Assigning a Attribute to a Attribute (line 1073):
            # Getting the type of 'self' (line 1073)
            self_98281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 25), 'self')
            # Obtaining the member 'axes' of a type (line 1073)
            axes_98282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1073, 25), self_98281, 'axes')
            # Getting the type of 'child' (line 1073)
            child_98283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 12), 'child')
            # Setting the type of the member 'axes' of a type (line 1073)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1073, 12), child_98283, 'axes', axes_98282)

            if more_types_in_union_98280:
                # SSA join for if statement (line 1072)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 1074):
        
        # Assigning a Name to a Attribute (line 1074):
        # Getting the type of 'True' (line 1074)
        True_98284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 21), 'True')
        # Getting the type of 'self' (line 1074)
        self_98285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1074)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 8), self_98285, 'stale', True_98284)
        
        # ################# End of 'set_child(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_child' in the type store
        # Getting the type of 'stypy_return_type' (line 1069)
        stypy_return_type_98286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98286)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_child'
        return stypy_return_type_98286


    @norecursion
    def get_child(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_child'
        module_type_store = module_type_store.open_function_context('get_child', 1076, 4, False)
        # Assigning a type to the variable 'self' (line 1077)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1077, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnchoredOffsetbox.get_child.__dict__.__setitem__('stypy_localization', localization)
        AnchoredOffsetbox.get_child.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnchoredOffsetbox.get_child.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnchoredOffsetbox.get_child.__dict__.__setitem__('stypy_function_name', 'AnchoredOffsetbox.get_child')
        AnchoredOffsetbox.get_child.__dict__.__setitem__('stypy_param_names_list', [])
        AnchoredOffsetbox.get_child.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnchoredOffsetbox.get_child.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnchoredOffsetbox.get_child.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnchoredOffsetbox.get_child.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnchoredOffsetbox.get_child.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnchoredOffsetbox.get_child.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnchoredOffsetbox.get_child', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_child', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_child(...)' code ##################

        unicode_98287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, 8), 'unicode', u'return the child')
        # Getting the type of 'self' (line 1078)
        self_98288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 15), 'self')
        # Obtaining the member '_child' of a type (line 1078)
        _child_98289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 15), self_98288, '_child')
        # Assigning a type to the variable 'stypy_return_type' (line 1078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 8), 'stypy_return_type', _child_98289)
        
        # ################# End of 'get_child(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_child' in the type store
        # Getting the type of 'stypy_return_type' (line 1076)
        stypy_return_type_98290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98290)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_child'
        return stypy_return_type_98290


    @norecursion
    def get_children(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_children'
        module_type_store = module_type_store.open_function_context('get_children', 1080, 4, False)
        # Assigning a type to the variable 'self' (line 1081)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1081, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnchoredOffsetbox.get_children.__dict__.__setitem__('stypy_localization', localization)
        AnchoredOffsetbox.get_children.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnchoredOffsetbox.get_children.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnchoredOffsetbox.get_children.__dict__.__setitem__('stypy_function_name', 'AnchoredOffsetbox.get_children')
        AnchoredOffsetbox.get_children.__dict__.__setitem__('stypy_param_names_list', [])
        AnchoredOffsetbox.get_children.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnchoredOffsetbox.get_children.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnchoredOffsetbox.get_children.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnchoredOffsetbox.get_children.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnchoredOffsetbox.get_children.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnchoredOffsetbox.get_children.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnchoredOffsetbox.get_children', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_children', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_children(...)' code ##################

        unicode_98291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1081, 8), 'unicode', u'return the list of children')
        
        # Obtaining an instance of the builtin type 'list' (line 1082)
        list_98292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1082)
        # Adding element type (line 1082)
        # Getting the type of 'self' (line 1082)
        self_98293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 16), 'self')
        # Obtaining the member '_child' of a type (line 1082)
        _child_98294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1082, 16), self_98293, '_child')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1082, 15), list_98292, _child_98294)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1082)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1082, 8), 'stypy_return_type', list_98292)
        
        # ################# End of 'get_children(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_children' in the type store
        # Getting the type of 'stypy_return_type' (line 1080)
        stypy_return_type_98295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98295)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_children'
        return stypy_return_type_98295


    @norecursion
    def get_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_extent'
        module_type_store = module_type_store.open_function_context('get_extent', 1084, 4, False)
        # Assigning a type to the variable 'self' (line 1085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnchoredOffsetbox.get_extent.__dict__.__setitem__('stypy_localization', localization)
        AnchoredOffsetbox.get_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnchoredOffsetbox.get_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnchoredOffsetbox.get_extent.__dict__.__setitem__('stypy_function_name', 'AnchoredOffsetbox.get_extent')
        AnchoredOffsetbox.get_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        AnchoredOffsetbox.get_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnchoredOffsetbox.get_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnchoredOffsetbox.get_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnchoredOffsetbox.get_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnchoredOffsetbox.get_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnchoredOffsetbox.get_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnchoredOffsetbox.get_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_extent(...)' code ##################

        unicode_98296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, (-1)), 'unicode', u'\n        return the extent of the artist. The extent of the child\n        added with the pad is returned\n        ')
        
        # Assigning a Call to a Tuple (line 1089):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent(...): (line 1089)
        # Processing the call arguments (line 1089)
        # Getting the type of 'renderer' (line 1089)
        renderer_98302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 51), 'renderer', False)
        # Processing the call keyword arguments (line 1089)
        kwargs_98303 = {}
        
        # Call to get_child(...): (line 1089)
        # Processing the call keyword arguments (line 1089)
        kwargs_98299 = {}
        # Getting the type of 'self' (line 1089)
        self_98297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 23), 'self', False)
        # Obtaining the member 'get_child' of a type (line 1089)
        get_child_98298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1089, 23), self_98297, 'get_child')
        # Calling get_child(args, kwargs) (line 1089)
        get_child_call_result_98300 = invoke(stypy.reporting.localization.Localization(__file__, 1089, 23), get_child_98298, *[], **kwargs_98299)
        
        # Obtaining the member 'get_extent' of a type (line 1089)
        get_extent_98301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1089, 23), get_child_call_result_98300, 'get_extent')
        # Calling get_extent(args, kwargs) (line 1089)
        get_extent_call_result_98304 = invoke(stypy.reporting.localization.Localization(__file__, 1089, 23), get_extent_98301, *[renderer_98302], **kwargs_98303)
        
        # Assigning a type to the variable 'call_assignment_95762' (line 1089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'call_assignment_95762', get_extent_call_result_98304)
        
        # Assigning a Call to a Name (line 1089):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1089, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98308 = {}
        # Getting the type of 'call_assignment_95762' (line 1089)
        call_assignment_95762_98305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'call_assignment_95762', False)
        # Obtaining the member '__getitem__' of a type (line 1089)
        getitem___98306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1089, 8), call_assignment_95762_98305, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98309 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98306, *[int_98307], **kwargs_98308)
        
        # Assigning a type to the variable 'call_assignment_95763' (line 1089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'call_assignment_95763', getitem___call_result_98309)
        
        # Assigning a Name to a Name (line 1089):
        # Getting the type of 'call_assignment_95763' (line 1089)
        call_assignment_95763_98310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'call_assignment_95763')
        # Assigning a type to the variable 'w' (line 1089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'w', call_assignment_95763_98310)
        
        # Assigning a Call to a Name (line 1089):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1089, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98314 = {}
        # Getting the type of 'call_assignment_95762' (line 1089)
        call_assignment_95762_98311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'call_assignment_95762', False)
        # Obtaining the member '__getitem__' of a type (line 1089)
        getitem___98312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1089, 8), call_assignment_95762_98311, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98315 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98312, *[int_98313], **kwargs_98314)
        
        # Assigning a type to the variable 'call_assignment_95764' (line 1089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'call_assignment_95764', getitem___call_result_98315)
        
        # Assigning a Name to a Name (line 1089):
        # Getting the type of 'call_assignment_95764' (line 1089)
        call_assignment_95764_98316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'call_assignment_95764')
        # Assigning a type to the variable 'h' (line 1089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 11), 'h', call_assignment_95764_98316)
        
        # Assigning a Call to a Name (line 1089):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1089, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98320 = {}
        # Getting the type of 'call_assignment_95762' (line 1089)
        call_assignment_95762_98317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'call_assignment_95762', False)
        # Obtaining the member '__getitem__' of a type (line 1089)
        getitem___98318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1089, 8), call_assignment_95762_98317, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98321 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98318, *[int_98319], **kwargs_98320)
        
        # Assigning a type to the variable 'call_assignment_95765' (line 1089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'call_assignment_95765', getitem___call_result_98321)
        
        # Assigning a Name to a Name (line 1089):
        # Getting the type of 'call_assignment_95765' (line 1089)
        call_assignment_95765_98322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'call_assignment_95765')
        # Assigning a type to the variable 'xd' (line 1089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 14), 'xd', call_assignment_95765_98322)
        
        # Assigning a Call to a Name (line 1089):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1089, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98326 = {}
        # Getting the type of 'call_assignment_95762' (line 1089)
        call_assignment_95762_98323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'call_assignment_95762', False)
        # Obtaining the member '__getitem__' of a type (line 1089)
        getitem___98324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1089, 8), call_assignment_95762_98323, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98327 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98324, *[int_98325], **kwargs_98326)
        
        # Assigning a type to the variable 'call_assignment_95766' (line 1089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'call_assignment_95766', getitem___call_result_98327)
        
        # Assigning a Name to a Name (line 1089):
        # Getting the type of 'call_assignment_95766' (line 1089)
        call_assignment_95766_98328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'call_assignment_95766')
        # Assigning a type to the variable 'yd' (line 1089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 18), 'yd', call_assignment_95766_98328)
        
        # Assigning a Call to a Name (line 1090):
        
        # Assigning a Call to a Name (line 1090):
        
        # Call to points_to_pixels(...): (line 1090)
        # Processing the call arguments (line 1090)
        
        # Call to get_size_in_points(...): (line 1090)
        # Processing the call keyword arguments (line 1090)
        kwargs_98334 = {}
        # Getting the type of 'self' (line 1090)
        self_98331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 45), 'self', False)
        # Obtaining the member 'prop' of a type (line 1090)
        prop_98332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 45), self_98331, 'prop')
        # Obtaining the member 'get_size_in_points' of a type (line 1090)
        get_size_in_points_98333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 45), prop_98332, 'get_size_in_points')
        # Calling get_size_in_points(args, kwargs) (line 1090)
        get_size_in_points_call_result_98335 = invoke(stypy.reporting.localization.Localization(__file__, 1090, 45), get_size_in_points_98333, *[], **kwargs_98334)
        
        # Processing the call keyword arguments (line 1090)
        kwargs_98336 = {}
        # Getting the type of 'renderer' (line 1090)
        renderer_98329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 19), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 1090)
        points_to_pixels_98330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 19), renderer_98329, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 1090)
        points_to_pixels_call_result_98337 = invoke(stypy.reporting.localization.Localization(__file__, 1090, 19), points_to_pixels_98330, *[get_size_in_points_call_result_98335], **kwargs_98336)
        
        # Assigning a type to the variable 'fontsize' (line 1090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'fontsize', points_to_pixels_call_result_98337)
        
        # Assigning a BinOp to a Name (line 1091):
        
        # Assigning a BinOp to a Name (line 1091):
        # Getting the type of 'self' (line 1091)
        self_98338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 14), 'self')
        # Obtaining the member 'pad' of a type (line 1091)
        pad_98339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 14), self_98338, 'pad')
        # Getting the type of 'fontsize' (line 1091)
        fontsize_98340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 25), 'fontsize')
        # Applying the binary operator '*' (line 1091)
        result_mul_98341 = python_operator(stypy.reporting.localization.Localization(__file__, 1091, 14), '*', pad_98339, fontsize_98340)
        
        # Assigning a type to the variable 'pad' (line 1091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'pad', result_mul_98341)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1093)
        tuple_98342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1093, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1093)
        # Adding element type (line 1093)
        # Getting the type of 'w' (line 1093)
        w_98343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 15), 'w')
        int_98344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1093, 19), 'int')
        # Getting the type of 'pad' (line 1093)
        pad_98345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 23), 'pad')
        # Applying the binary operator '*' (line 1093)
        result_mul_98346 = python_operator(stypy.reporting.localization.Localization(__file__, 1093, 19), '*', int_98344, pad_98345)
        
        # Applying the binary operator '+' (line 1093)
        result_add_98347 = python_operator(stypy.reporting.localization.Localization(__file__, 1093, 15), '+', w_98343, result_mul_98346)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1093, 15), tuple_98342, result_add_98347)
        # Adding element type (line 1093)
        # Getting the type of 'h' (line 1093)
        h_98348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 28), 'h')
        int_98349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1093, 32), 'int')
        # Getting the type of 'pad' (line 1093)
        pad_98350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 36), 'pad')
        # Applying the binary operator '*' (line 1093)
        result_mul_98351 = python_operator(stypy.reporting.localization.Localization(__file__, 1093, 32), '*', int_98349, pad_98350)
        
        # Applying the binary operator '+' (line 1093)
        result_add_98352 = python_operator(stypy.reporting.localization.Localization(__file__, 1093, 28), '+', h_98348, result_mul_98351)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1093, 15), tuple_98342, result_add_98352)
        # Adding element type (line 1093)
        # Getting the type of 'xd' (line 1093)
        xd_98353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 41), 'xd')
        # Getting the type of 'pad' (line 1093)
        pad_98354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 46), 'pad')
        # Applying the binary operator '+' (line 1093)
        result_add_98355 = python_operator(stypy.reporting.localization.Localization(__file__, 1093, 41), '+', xd_98353, pad_98354)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1093, 15), tuple_98342, result_add_98355)
        # Adding element type (line 1093)
        # Getting the type of 'yd' (line 1093)
        yd_98356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 51), 'yd')
        # Getting the type of 'pad' (line 1093)
        pad_98357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 56), 'pad')
        # Applying the binary operator '+' (line 1093)
        result_add_98358 = python_operator(stypy.reporting.localization.Localization(__file__, 1093, 51), '+', yd_98356, pad_98357)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1093, 15), tuple_98342, result_add_98358)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1093, 8), 'stypy_return_type', tuple_98342)
        
        # ################# End of 'get_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 1084)
        stypy_return_type_98359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98359)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_extent'
        return stypy_return_type_98359


    @norecursion
    def get_bbox_to_anchor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_bbox_to_anchor'
        module_type_store = module_type_store.open_function_context('get_bbox_to_anchor', 1095, 4, False)
        # Assigning a type to the variable 'self' (line 1096)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnchoredOffsetbox.get_bbox_to_anchor.__dict__.__setitem__('stypy_localization', localization)
        AnchoredOffsetbox.get_bbox_to_anchor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnchoredOffsetbox.get_bbox_to_anchor.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnchoredOffsetbox.get_bbox_to_anchor.__dict__.__setitem__('stypy_function_name', 'AnchoredOffsetbox.get_bbox_to_anchor')
        AnchoredOffsetbox.get_bbox_to_anchor.__dict__.__setitem__('stypy_param_names_list', [])
        AnchoredOffsetbox.get_bbox_to_anchor.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnchoredOffsetbox.get_bbox_to_anchor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnchoredOffsetbox.get_bbox_to_anchor.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnchoredOffsetbox.get_bbox_to_anchor.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnchoredOffsetbox.get_bbox_to_anchor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnchoredOffsetbox.get_bbox_to_anchor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnchoredOffsetbox.get_bbox_to_anchor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_bbox_to_anchor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_bbox_to_anchor(...)' code ##################

        unicode_98360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1098, (-1)), 'unicode', u'\n        return the bbox that the legend will be anchored\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1099)
        # Getting the type of 'self' (line 1099)
        self_98361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 11), 'self')
        # Obtaining the member '_bbox_to_anchor' of a type (line 1099)
        _bbox_to_anchor_98362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 11), self_98361, '_bbox_to_anchor')
        # Getting the type of 'None' (line 1099)
        None_98363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 35), 'None')
        
        (may_be_98364, more_types_in_union_98365) = may_be_none(_bbox_to_anchor_98362, None_98363)

        if may_be_98364:

            if more_types_in_union_98365:
                # Runtime conditional SSA (line 1099)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'self' (line 1100)
            self_98366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 19), 'self')
            # Obtaining the member 'axes' of a type (line 1100)
            axes_98367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1100, 19), self_98366, 'axes')
            # Obtaining the member 'bbox' of a type (line 1100)
            bbox_98368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1100, 19), axes_98367, 'bbox')
            # Assigning a type to the variable 'stypy_return_type' (line 1100)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1100, 12), 'stypy_return_type', bbox_98368)

            if more_types_in_union_98365:
                # Runtime conditional SSA for else branch (line 1099)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_98364) or more_types_in_union_98365):
            
            # Assigning a Attribute to a Name (line 1102):
            
            # Assigning a Attribute to a Name (line 1102):
            # Getting the type of 'self' (line 1102)
            self_98369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 24), 'self')
            # Obtaining the member '_bbox_to_anchor_transform' of a type (line 1102)
            _bbox_to_anchor_transform_98370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 24), self_98369, '_bbox_to_anchor_transform')
            # Assigning a type to the variable 'transform' (line 1102)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1102, 12), 'transform', _bbox_to_anchor_transform_98370)
            
            # Type idiom detected: calculating its left and rigth part (line 1103)
            # Getting the type of 'transform' (line 1103)
            transform_98371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 15), 'transform')
            # Getting the type of 'None' (line 1103)
            None_98372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 28), 'None')
            
            (may_be_98373, more_types_in_union_98374) = may_be_none(transform_98371, None_98372)

            if may_be_98373:

                if more_types_in_union_98374:
                    # Runtime conditional SSA (line 1103)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Getting the type of 'self' (line 1104)
                self_98375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 23), 'self')
                # Obtaining the member '_bbox_to_anchor' of a type (line 1104)
                _bbox_to_anchor_98376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1104, 23), self_98375, '_bbox_to_anchor')
                # Assigning a type to the variable 'stypy_return_type' (line 1104)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1104, 16), 'stypy_return_type', _bbox_to_anchor_98376)

                if more_types_in_union_98374:
                    # Runtime conditional SSA for else branch (line 1103)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_98373) or more_types_in_union_98374):
                
                # Call to TransformedBbox(...): (line 1106)
                # Processing the call arguments (line 1106)
                # Getting the type of 'self' (line 1106)
                self_98378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 39), 'self', False)
                # Obtaining the member '_bbox_to_anchor' of a type (line 1106)
                _bbox_to_anchor_98379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1106, 39), self_98378, '_bbox_to_anchor')
                # Getting the type of 'transform' (line 1107)
                transform_98380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 39), 'transform', False)
                # Processing the call keyword arguments (line 1106)
                kwargs_98381 = {}
                # Getting the type of 'TransformedBbox' (line 1106)
                TransformedBbox_98377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 23), 'TransformedBbox', False)
                # Calling TransformedBbox(args, kwargs) (line 1106)
                TransformedBbox_call_result_98382 = invoke(stypy.reporting.localization.Localization(__file__, 1106, 23), TransformedBbox_98377, *[_bbox_to_anchor_98379, transform_98380], **kwargs_98381)
                
                # Assigning a type to the variable 'stypy_return_type' (line 1106)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1106, 16), 'stypy_return_type', TransformedBbox_call_result_98382)

                if (may_be_98373 and more_types_in_union_98374):
                    # SSA join for if statement (line 1103)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_98364 and more_types_in_union_98365):
                # SSA join for if statement (line 1099)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'get_bbox_to_anchor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_bbox_to_anchor' in the type store
        # Getting the type of 'stypy_return_type' (line 1095)
        stypy_return_type_98383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98383)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_bbox_to_anchor'
        return stypy_return_type_98383


    @norecursion
    def set_bbox_to_anchor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1109)
        None_98384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 49), 'None')
        defaults = [None_98384]
        # Create a new context for function 'set_bbox_to_anchor'
        module_type_store = module_type_store.open_function_context('set_bbox_to_anchor', 1109, 4, False)
        # Assigning a type to the variable 'self' (line 1110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1110, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnchoredOffsetbox.set_bbox_to_anchor.__dict__.__setitem__('stypy_localization', localization)
        AnchoredOffsetbox.set_bbox_to_anchor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnchoredOffsetbox.set_bbox_to_anchor.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnchoredOffsetbox.set_bbox_to_anchor.__dict__.__setitem__('stypy_function_name', 'AnchoredOffsetbox.set_bbox_to_anchor')
        AnchoredOffsetbox.set_bbox_to_anchor.__dict__.__setitem__('stypy_param_names_list', ['bbox', 'transform'])
        AnchoredOffsetbox.set_bbox_to_anchor.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnchoredOffsetbox.set_bbox_to_anchor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnchoredOffsetbox.set_bbox_to_anchor.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnchoredOffsetbox.set_bbox_to_anchor.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnchoredOffsetbox.set_bbox_to_anchor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnchoredOffsetbox.set_bbox_to_anchor.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnchoredOffsetbox.set_bbox_to_anchor', ['bbox', 'transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_bbox_to_anchor', localization, ['bbox', 'transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_bbox_to_anchor(...)' code ##################

        unicode_98385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1117, (-1)), 'unicode', u'\n        set the bbox that the child will be anchored.\n\n        *bbox* can be a Bbox instance, a list of [left, bottom, width,\n        height], or a list of [left, bottom] where the width and\n        height will be assumed to be zero. The bbox will be\n        transformed to display coordinate by the given transform.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'bbox' (line 1118)
        bbox_98386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 11), 'bbox')
        # Getting the type of 'None' (line 1118)
        None_98387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 19), 'None')
        # Applying the binary operator 'is' (line 1118)
        result_is__98388 = python_operator(stypy.reporting.localization.Localization(__file__, 1118, 11), 'is', bbox_98386, None_98387)
        
        
        # Call to isinstance(...): (line 1118)
        # Processing the call arguments (line 1118)
        # Getting the type of 'bbox' (line 1118)
        bbox_98390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 38), 'bbox', False)
        # Getting the type of 'BboxBase' (line 1118)
        BboxBase_98391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 44), 'BboxBase', False)
        # Processing the call keyword arguments (line 1118)
        kwargs_98392 = {}
        # Getting the type of 'isinstance' (line 1118)
        isinstance_98389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 27), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1118)
        isinstance_call_result_98393 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 27), isinstance_98389, *[bbox_98390, BboxBase_98391], **kwargs_98392)
        
        # Applying the binary operator 'or' (line 1118)
        result_or_keyword_98394 = python_operator(stypy.reporting.localization.Localization(__file__, 1118, 11), 'or', result_is__98388, isinstance_call_result_98393)
        
        # Testing the type of an if condition (line 1118)
        if_condition_98395 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1118, 8), result_or_keyword_98394)
        # Assigning a type to the variable 'if_condition_98395' (line 1118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 8), 'if_condition_98395', if_condition_98395)
        # SSA begins for if statement (line 1118)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1119):
        
        # Assigning a Name to a Attribute (line 1119):
        # Getting the type of 'bbox' (line 1119)
        bbox_98396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 35), 'bbox')
        # Getting the type of 'self' (line 1119)
        self_98397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 12), 'self')
        # Setting the type of the member '_bbox_to_anchor' of a type (line 1119)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 12), self_98397, '_bbox_to_anchor', bbox_98396)
        # SSA branch for the else part of an if statement (line 1118)
        module_type_store.open_ssa_branch('else')
        
        
        # SSA begins for try-except statement (line 1121)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1122):
        
        # Assigning a Call to a Name (line 1122):
        
        # Call to len(...): (line 1122)
        # Processing the call arguments (line 1122)
        # Getting the type of 'bbox' (line 1122)
        bbox_98399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 24), 'bbox', False)
        # Processing the call keyword arguments (line 1122)
        kwargs_98400 = {}
        # Getting the type of 'len' (line 1122)
        len_98398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 20), 'len', False)
        # Calling len(args, kwargs) (line 1122)
        len_call_result_98401 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 20), len_98398, *[bbox_98399], **kwargs_98400)
        
        # Assigning a type to the variable 'l' (line 1122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1122, 16), 'l', len_call_result_98401)
        # SSA branch for the except part of a try statement (line 1121)
        # SSA branch for the except 'TypeError' branch of a try statement (line 1121)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 1124)
        # Processing the call arguments (line 1124)
        unicode_98403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 33), 'unicode', u'Invalid argument for bbox : %s')
        
        # Call to str(...): (line 1124)
        # Processing the call arguments (line 1124)
        # Getting the type of 'bbox' (line 1124)
        bbox_98405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 72), 'bbox', False)
        # Processing the call keyword arguments (line 1124)
        kwargs_98406 = {}
        # Getting the type of 'str' (line 1124)
        str_98404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 68), 'str', False)
        # Calling str(args, kwargs) (line 1124)
        str_call_result_98407 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 68), str_98404, *[bbox_98405], **kwargs_98406)
        
        # Applying the binary operator '%' (line 1124)
        result_mod_98408 = python_operator(stypy.reporting.localization.Localization(__file__, 1124, 33), '%', unicode_98403, str_call_result_98407)
        
        # Processing the call keyword arguments (line 1124)
        kwargs_98409 = {}
        # Getting the type of 'ValueError' (line 1124)
        ValueError_98402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1124)
        ValueError_call_result_98410 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 22), ValueError_98402, *[result_mod_98408], **kwargs_98409)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1124, 16), ValueError_call_result_98410, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 1121)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'l' (line 1126)
        l_98411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 15), 'l')
        int_98412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 20), 'int')
        # Applying the binary operator '==' (line 1126)
        result_eq_98413 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 15), '==', l_98411, int_98412)
        
        # Testing the type of an if condition (line 1126)
        if_condition_98414 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1126, 12), result_eq_98413)
        # Assigning a type to the variable 'if_condition_98414' (line 1126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 12), 'if_condition_98414', if_condition_98414)
        # SSA begins for if statement (line 1126)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 1127):
        
        # Assigning a List to a Name (line 1127):
        
        # Obtaining an instance of the builtin type 'list' (line 1127)
        list_98415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1127)
        # Adding element type (line 1127)
        
        # Obtaining the type of the subscript
        int_98416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 29), 'int')
        # Getting the type of 'bbox' (line 1127)
        bbox_98417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 24), 'bbox')
        # Obtaining the member '__getitem__' of a type (line 1127)
        getitem___98418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1127, 24), bbox_98417, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1127)
        subscript_call_result_98419 = invoke(stypy.reporting.localization.Localization(__file__, 1127, 24), getitem___98418, int_98416)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1127, 23), list_98415, subscript_call_result_98419)
        # Adding element type (line 1127)
        
        # Obtaining the type of the subscript
        int_98420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 38), 'int')
        # Getting the type of 'bbox' (line 1127)
        bbox_98421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 33), 'bbox')
        # Obtaining the member '__getitem__' of a type (line 1127)
        getitem___98422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1127, 33), bbox_98421, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1127)
        subscript_call_result_98423 = invoke(stypy.reporting.localization.Localization(__file__, 1127, 33), getitem___98422, int_98420)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1127, 23), list_98415, subscript_call_result_98423)
        # Adding element type (line 1127)
        int_98424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 42), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1127, 23), list_98415, int_98424)
        # Adding element type (line 1127)
        int_98425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 45), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1127, 23), list_98415, int_98425)
        
        # Assigning a type to the variable 'bbox' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 16), 'bbox', list_98415)
        # SSA join for if statement (line 1126)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1129):
        
        # Assigning a Call to a Attribute (line 1129):
        
        # Call to from_bounds(...): (line 1129)
        # Getting the type of 'bbox' (line 1129)
        bbox_98428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 53), 'bbox', False)
        # Processing the call keyword arguments (line 1129)
        kwargs_98429 = {}
        # Getting the type of 'Bbox' (line 1129)
        Bbox_98426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 35), 'Bbox', False)
        # Obtaining the member 'from_bounds' of a type (line 1129)
        from_bounds_98427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 35), Bbox_98426, 'from_bounds')
        # Calling from_bounds(args, kwargs) (line 1129)
        from_bounds_call_result_98430 = invoke(stypy.reporting.localization.Localization(__file__, 1129, 35), from_bounds_98427, *[bbox_98428], **kwargs_98429)
        
        # Getting the type of 'self' (line 1129)
        self_98431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 12), 'self')
        # Setting the type of the member '_bbox_to_anchor' of a type (line 1129)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 12), self_98431, '_bbox_to_anchor', from_bounds_call_result_98430)
        # SSA join for if statement (line 1118)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1131):
        
        # Assigning a Name to a Attribute (line 1131):
        # Getting the type of 'transform' (line 1131)
        transform_98432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 41), 'transform')
        # Getting the type of 'self' (line 1131)
        self_98433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 8), 'self')
        # Setting the type of the member '_bbox_to_anchor_transform' of a type (line 1131)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 8), self_98433, '_bbox_to_anchor_transform', transform_98432)
        
        # Assigning a Name to a Attribute (line 1132):
        
        # Assigning a Name to a Attribute (line 1132):
        # Getting the type of 'True' (line 1132)
        True_98434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 21), 'True')
        # Getting the type of 'self' (line 1132)
        self_98435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1132)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 8), self_98435, 'stale', True_98434)
        
        # ################# End of 'set_bbox_to_anchor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_bbox_to_anchor' in the type store
        # Getting the type of 'stypy_return_type' (line 1109)
        stypy_return_type_98436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98436)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_bbox_to_anchor'
        return stypy_return_type_98436


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 1134, 4, False)
        # Assigning a type to the variable 'self' (line 1135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnchoredOffsetbox.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        AnchoredOffsetbox.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnchoredOffsetbox.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnchoredOffsetbox.get_window_extent.__dict__.__setitem__('stypy_function_name', 'AnchoredOffsetbox.get_window_extent')
        AnchoredOffsetbox.get_window_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        AnchoredOffsetbox.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnchoredOffsetbox.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnchoredOffsetbox.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnchoredOffsetbox.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnchoredOffsetbox.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnchoredOffsetbox.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnchoredOffsetbox.get_window_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        unicode_98437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1137, (-1)), 'unicode', u'\n        get the bounding box in display space.\n        ')
        
        # Call to _update_offset_func(...): (line 1138)
        # Processing the call arguments (line 1138)
        # Getting the type of 'renderer' (line 1138)
        renderer_98440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 33), 'renderer', False)
        # Processing the call keyword arguments (line 1138)
        kwargs_98441 = {}
        # Getting the type of 'self' (line 1138)
        self_98438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 8), 'self', False)
        # Obtaining the member '_update_offset_func' of a type (line 1138)
        _update_offset_func_98439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 8), self_98438, '_update_offset_func')
        # Calling _update_offset_func(args, kwargs) (line 1138)
        _update_offset_func_call_result_98442 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 8), _update_offset_func_98439, *[renderer_98440], **kwargs_98441)
        
        
        # Assigning a Call to a Tuple (line 1139):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent(...): (line 1139)
        # Processing the call arguments (line 1139)
        # Getting the type of 'renderer' (line 1139)
        renderer_98445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 39), 'renderer', False)
        # Processing the call keyword arguments (line 1139)
        kwargs_98446 = {}
        # Getting the type of 'self' (line 1139)
        self_98443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 23), 'self', False)
        # Obtaining the member 'get_extent' of a type (line 1139)
        get_extent_98444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 23), self_98443, 'get_extent')
        # Calling get_extent(args, kwargs) (line 1139)
        get_extent_call_result_98447 = invoke(stypy.reporting.localization.Localization(__file__, 1139, 23), get_extent_98444, *[renderer_98445], **kwargs_98446)
        
        # Assigning a type to the variable 'call_assignment_95767' (line 1139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'call_assignment_95767', get_extent_call_result_98447)
        
        # Assigning a Call to a Name (line 1139):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1139, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98451 = {}
        # Getting the type of 'call_assignment_95767' (line 1139)
        call_assignment_95767_98448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'call_assignment_95767', False)
        # Obtaining the member '__getitem__' of a type (line 1139)
        getitem___98449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 8), call_assignment_95767_98448, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98452 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98449, *[int_98450], **kwargs_98451)
        
        # Assigning a type to the variable 'call_assignment_95768' (line 1139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'call_assignment_95768', getitem___call_result_98452)
        
        # Assigning a Name to a Name (line 1139):
        # Getting the type of 'call_assignment_95768' (line 1139)
        call_assignment_95768_98453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'call_assignment_95768')
        # Assigning a type to the variable 'w' (line 1139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'w', call_assignment_95768_98453)
        
        # Assigning a Call to a Name (line 1139):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1139, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98457 = {}
        # Getting the type of 'call_assignment_95767' (line 1139)
        call_assignment_95767_98454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'call_assignment_95767', False)
        # Obtaining the member '__getitem__' of a type (line 1139)
        getitem___98455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 8), call_assignment_95767_98454, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98458 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98455, *[int_98456], **kwargs_98457)
        
        # Assigning a type to the variable 'call_assignment_95769' (line 1139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'call_assignment_95769', getitem___call_result_98458)
        
        # Assigning a Name to a Name (line 1139):
        # Getting the type of 'call_assignment_95769' (line 1139)
        call_assignment_95769_98459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'call_assignment_95769')
        # Assigning a type to the variable 'h' (line 1139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 11), 'h', call_assignment_95769_98459)
        
        # Assigning a Call to a Name (line 1139):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1139, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98463 = {}
        # Getting the type of 'call_assignment_95767' (line 1139)
        call_assignment_95767_98460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'call_assignment_95767', False)
        # Obtaining the member '__getitem__' of a type (line 1139)
        getitem___98461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 8), call_assignment_95767_98460, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98464 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98461, *[int_98462], **kwargs_98463)
        
        # Assigning a type to the variable 'call_assignment_95770' (line 1139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'call_assignment_95770', getitem___call_result_98464)
        
        # Assigning a Name to a Name (line 1139):
        # Getting the type of 'call_assignment_95770' (line 1139)
        call_assignment_95770_98465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'call_assignment_95770')
        # Assigning a type to the variable 'xd' (line 1139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 14), 'xd', call_assignment_95770_98465)
        
        # Assigning a Call to a Name (line 1139):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1139, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98469 = {}
        # Getting the type of 'call_assignment_95767' (line 1139)
        call_assignment_95767_98466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'call_assignment_95767', False)
        # Obtaining the member '__getitem__' of a type (line 1139)
        getitem___98467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 8), call_assignment_95767_98466, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98470 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98467, *[int_98468], **kwargs_98469)
        
        # Assigning a type to the variable 'call_assignment_95771' (line 1139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'call_assignment_95771', getitem___call_result_98470)
        
        # Assigning a Name to a Name (line 1139):
        # Getting the type of 'call_assignment_95771' (line 1139)
        call_assignment_95771_98471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'call_assignment_95771')
        # Assigning a type to the variable 'yd' (line 1139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 18), 'yd', call_assignment_95771_98471)
        
        # Assigning a Call to a Tuple (line 1140):
        
        # Assigning a Call to a Name:
        
        # Call to get_offset(...): (line 1140)
        # Processing the call arguments (line 1140)
        # Getting the type of 'w' (line 1140)
        w_98474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 33), 'w', False)
        # Getting the type of 'h' (line 1140)
        h_98475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 36), 'h', False)
        # Getting the type of 'xd' (line 1140)
        xd_98476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 39), 'xd', False)
        # Getting the type of 'yd' (line 1140)
        yd_98477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 43), 'yd', False)
        # Getting the type of 'renderer' (line 1140)
        renderer_98478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 47), 'renderer', False)
        # Processing the call keyword arguments (line 1140)
        kwargs_98479 = {}
        # Getting the type of 'self' (line 1140)
        self_98472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 17), 'self', False)
        # Obtaining the member 'get_offset' of a type (line 1140)
        get_offset_98473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 17), self_98472, 'get_offset')
        # Calling get_offset(args, kwargs) (line 1140)
        get_offset_call_result_98480 = invoke(stypy.reporting.localization.Localization(__file__, 1140, 17), get_offset_98473, *[w_98474, h_98475, xd_98476, yd_98477, renderer_98478], **kwargs_98479)
        
        # Assigning a type to the variable 'call_assignment_95772' (line 1140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'call_assignment_95772', get_offset_call_result_98480)
        
        # Assigning a Call to a Name (line 1140):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1140, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98484 = {}
        # Getting the type of 'call_assignment_95772' (line 1140)
        call_assignment_95772_98481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'call_assignment_95772', False)
        # Obtaining the member '__getitem__' of a type (line 1140)
        getitem___98482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 8), call_assignment_95772_98481, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98485 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98482, *[int_98483], **kwargs_98484)
        
        # Assigning a type to the variable 'call_assignment_95773' (line 1140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'call_assignment_95773', getitem___call_result_98485)
        
        # Assigning a Name to a Name (line 1140):
        # Getting the type of 'call_assignment_95773' (line 1140)
        call_assignment_95773_98486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'call_assignment_95773')
        # Assigning a type to the variable 'ox' (line 1140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'ox', call_assignment_95773_98486)
        
        # Assigning a Call to a Name (line 1140):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1140, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98490 = {}
        # Getting the type of 'call_assignment_95772' (line 1140)
        call_assignment_95772_98487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'call_assignment_95772', False)
        # Obtaining the member '__getitem__' of a type (line 1140)
        getitem___98488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 8), call_assignment_95772_98487, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98491 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98488, *[int_98489], **kwargs_98490)
        
        # Assigning a type to the variable 'call_assignment_95774' (line 1140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'call_assignment_95774', getitem___call_result_98491)
        
        # Assigning a Name to a Name (line 1140):
        # Getting the type of 'call_assignment_95774' (line 1140)
        call_assignment_95774_98492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'call_assignment_95774')
        # Assigning a type to the variable 'oy' (line 1140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1140, 12), 'oy', call_assignment_95774_98492)
        
        # Call to from_bounds(...): (line 1141)
        # Processing the call arguments (line 1141)
        # Getting the type of 'ox' (line 1141)
        ox_98495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 32), 'ox', False)
        # Getting the type of 'xd' (line 1141)
        xd_98496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 37), 'xd', False)
        # Applying the binary operator '-' (line 1141)
        result_sub_98497 = python_operator(stypy.reporting.localization.Localization(__file__, 1141, 32), '-', ox_98495, xd_98496)
        
        # Getting the type of 'oy' (line 1141)
        oy_98498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 41), 'oy', False)
        # Getting the type of 'yd' (line 1141)
        yd_98499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 46), 'yd', False)
        # Applying the binary operator '-' (line 1141)
        result_sub_98500 = python_operator(stypy.reporting.localization.Localization(__file__, 1141, 41), '-', oy_98498, yd_98499)
        
        # Getting the type of 'w' (line 1141)
        w_98501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 50), 'w', False)
        # Getting the type of 'h' (line 1141)
        h_98502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 53), 'h', False)
        # Processing the call keyword arguments (line 1141)
        kwargs_98503 = {}
        # Getting the type of 'Bbox' (line 1141)
        Bbox_98493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 15), 'Bbox', False)
        # Obtaining the member 'from_bounds' of a type (line 1141)
        from_bounds_98494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1141, 15), Bbox_98493, 'from_bounds')
        # Calling from_bounds(args, kwargs) (line 1141)
        from_bounds_call_result_98504 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 15), from_bounds_98494, *[result_sub_98497, result_sub_98500, w_98501, h_98502], **kwargs_98503)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 8), 'stypy_return_type', from_bounds_call_result_98504)
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 1134)
        stypy_return_type_98505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98505)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_98505


    @norecursion
    def _update_offset_func(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1143)
        None_98506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 53), 'None')
        defaults = [None_98506]
        # Create a new context for function '_update_offset_func'
        module_type_store = module_type_store.open_function_context('_update_offset_func', 1143, 4, False)
        # Assigning a type to the variable 'self' (line 1144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnchoredOffsetbox._update_offset_func.__dict__.__setitem__('stypy_localization', localization)
        AnchoredOffsetbox._update_offset_func.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnchoredOffsetbox._update_offset_func.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnchoredOffsetbox._update_offset_func.__dict__.__setitem__('stypy_function_name', 'AnchoredOffsetbox._update_offset_func')
        AnchoredOffsetbox._update_offset_func.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'fontsize'])
        AnchoredOffsetbox._update_offset_func.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnchoredOffsetbox._update_offset_func.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnchoredOffsetbox._update_offset_func.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnchoredOffsetbox._update_offset_func.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnchoredOffsetbox._update_offset_func.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnchoredOffsetbox._update_offset_func.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnchoredOffsetbox._update_offset_func', ['renderer', 'fontsize'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_offset_func', localization, ['renderer', 'fontsize'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_offset_func(...)' code ##################

        unicode_98507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, (-1)), 'unicode', u'\n        Update the offset func which depends on the dpi of the\n        renderer (because of the padding).\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1148)
        # Getting the type of 'fontsize' (line 1148)
        fontsize_98508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 11), 'fontsize')
        # Getting the type of 'None' (line 1148)
        None_98509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 23), 'None')
        
        (may_be_98510, more_types_in_union_98511) = may_be_none(fontsize_98508, None_98509)

        if may_be_98510:

            if more_types_in_union_98511:
                # Runtime conditional SSA (line 1148)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1149):
            
            # Assigning a Call to a Name (line 1149):
            
            # Call to points_to_pixels(...): (line 1149)
            # Processing the call arguments (line 1149)
            
            # Call to get_size_in_points(...): (line 1150)
            # Processing the call keyword arguments (line 1150)
            kwargs_98517 = {}
            # Getting the type of 'self' (line 1150)
            self_98514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 28), 'self', False)
            # Obtaining the member 'prop' of a type (line 1150)
            prop_98515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 28), self_98514, 'prop')
            # Obtaining the member 'get_size_in_points' of a type (line 1150)
            get_size_in_points_98516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 28), prop_98515, 'get_size_in_points')
            # Calling get_size_in_points(args, kwargs) (line 1150)
            get_size_in_points_call_result_98518 = invoke(stypy.reporting.localization.Localization(__file__, 1150, 28), get_size_in_points_98516, *[], **kwargs_98517)
            
            # Processing the call keyword arguments (line 1149)
            kwargs_98519 = {}
            # Getting the type of 'renderer' (line 1149)
            renderer_98512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 23), 'renderer', False)
            # Obtaining the member 'points_to_pixels' of a type (line 1149)
            points_to_pixels_98513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 23), renderer_98512, 'points_to_pixels')
            # Calling points_to_pixels(args, kwargs) (line 1149)
            points_to_pixels_call_result_98520 = invoke(stypy.reporting.localization.Localization(__file__, 1149, 23), points_to_pixels_98513, *[get_size_in_points_call_result_98518], **kwargs_98519)
            
            # Assigning a type to the variable 'fontsize' (line 1149)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'fontsize', points_to_pixels_call_result_98520)

            if more_types_in_union_98511:
                # SSA join for if statement (line 1148)
                module_type_store = module_type_store.join_ssa_context()


        

        @norecursion
        def _offset(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            # Getting the type of 'fontsize' (line 1152)
            fontsize_98521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 53), 'fontsize')
            # Getting the type of 'self' (line 1152)
            self_98522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 68), 'self')
            defaults = [fontsize_98521, self_98522]
            # Create a new context for function '_offset'
            module_type_store = module_type_store.open_function_context('_offset', 1152, 8, False)
            
            # Passed parameters checking function
            _offset.stypy_localization = localization
            _offset.stypy_type_of_self = None
            _offset.stypy_type_store = module_type_store
            _offset.stypy_function_name = '_offset'
            _offset.stypy_param_names_list = ['w', 'h', 'xd', 'yd', 'renderer', 'fontsize', 'self']
            _offset.stypy_varargs_param_name = None
            _offset.stypy_kwargs_param_name = None
            _offset.stypy_call_defaults = defaults
            _offset.stypy_call_varargs = varargs
            _offset.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_offset', ['w', 'h', 'xd', 'yd', 'renderer', 'fontsize', 'self'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '_offset', localization, ['w', 'h', 'xd', 'yd', 'renderer', 'fontsize', 'self'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '_offset(...)' code ##################

            
            # Assigning a Call to a Name (line 1153):
            
            # Assigning a Call to a Name (line 1153):
            
            # Call to from_bounds(...): (line 1153)
            # Processing the call arguments (line 1153)
            int_98525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 36), 'int')
            int_98526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 39), 'int')
            # Getting the type of 'w' (line 1153)
            w_98527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 42), 'w', False)
            # Getting the type of 'h' (line 1153)
            h_98528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 45), 'h', False)
            # Processing the call keyword arguments (line 1153)
            kwargs_98529 = {}
            # Getting the type of 'Bbox' (line 1153)
            Bbox_98523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 19), 'Bbox', False)
            # Obtaining the member 'from_bounds' of a type (line 1153)
            from_bounds_98524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 19), Bbox_98523, 'from_bounds')
            # Calling from_bounds(args, kwargs) (line 1153)
            from_bounds_call_result_98530 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 19), from_bounds_98524, *[int_98525, int_98526, w_98527, h_98528], **kwargs_98529)
            
            # Assigning a type to the variable 'bbox' (line 1153)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 12), 'bbox', from_bounds_call_result_98530)
            
            # Assigning a BinOp to a Name (line 1154):
            
            # Assigning a BinOp to a Name (line 1154):
            # Getting the type of 'self' (line 1154)
            self_98531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 24), 'self')
            # Obtaining the member 'borderpad' of a type (line 1154)
            borderpad_98532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1154, 24), self_98531, 'borderpad')
            # Getting the type of 'fontsize' (line 1154)
            fontsize_98533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 41), 'fontsize')
            # Applying the binary operator '*' (line 1154)
            result_mul_98534 = python_operator(stypy.reporting.localization.Localization(__file__, 1154, 24), '*', borderpad_98532, fontsize_98533)
            
            # Assigning a type to the variable 'borderpad' (line 1154)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1154, 12), 'borderpad', result_mul_98534)
            
            # Assigning a Call to a Name (line 1155):
            
            # Assigning a Call to a Name (line 1155):
            
            # Call to get_bbox_to_anchor(...): (line 1155)
            # Processing the call keyword arguments (line 1155)
            kwargs_98537 = {}
            # Getting the type of 'self' (line 1155)
            self_98535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 29), 'self', False)
            # Obtaining the member 'get_bbox_to_anchor' of a type (line 1155)
            get_bbox_to_anchor_98536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 29), self_98535, 'get_bbox_to_anchor')
            # Calling get_bbox_to_anchor(args, kwargs) (line 1155)
            get_bbox_to_anchor_call_result_98538 = invoke(stypy.reporting.localization.Localization(__file__, 1155, 29), get_bbox_to_anchor_98536, *[], **kwargs_98537)
            
            # Assigning a type to the variable 'bbox_to_anchor' (line 1155)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'bbox_to_anchor', get_bbox_to_anchor_call_result_98538)
            
            # Assigning a Call to a Tuple (line 1157):
            
            # Assigning a Call to a Name:
            
            # Call to _get_anchored_bbox(...): (line 1157)
            # Processing the call arguments (line 1157)
            # Getting the type of 'self' (line 1157)
            self_98541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 45), 'self', False)
            # Obtaining the member 'loc' of a type (line 1157)
            loc_98542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1157, 45), self_98541, 'loc')
            # Getting the type of 'bbox' (line 1158)
            bbox_98543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 45), 'bbox', False)
            # Getting the type of 'bbox_to_anchor' (line 1159)
            bbox_to_anchor_98544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 45), 'bbox_to_anchor', False)
            # Getting the type of 'borderpad' (line 1160)
            borderpad_98545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 45), 'borderpad', False)
            # Processing the call keyword arguments (line 1157)
            kwargs_98546 = {}
            # Getting the type of 'self' (line 1157)
            self_98539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 21), 'self', False)
            # Obtaining the member '_get_anchored_bbox' of a type (line 1157)
            _get_anchored_bbox_98540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1157, 21), self_98539, '_get_anchored_bbox')
            # Calling _get_anchored_bbox(args, kwargs) (line 1157)
            _get_anchored_bbox_call_result_98547 = invoke(stypy.reporting.localization.Localization(__file__, 1157, 21), _get_anchored_bbox_98540, *[loc_98542, bbox_98543, bbox_to_anchor_98544, borderpad_98545], **kwargs_98546)
            
            # Assigning a type to the variable 'call_assignment_95775' (line 1157)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1157, 12), 'call_assignment_95775', _get_anchored_bbox_call_result_98547)
            
            # Assigning a Call to a Name (line 1157):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_98550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1157, 12), 'int')
            # Processing the call keyword arguments
            kwargs_98551 = {}
            # Getting the type of 'call_assignment_95775' (line 1157)
            call_assignment_95775_98548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 12), 'call_assignment_95775', False)
            # Obtaining the member '__getitem__' of a type (line 1157)
            getitem___98549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1157, 12), call_assignment_95775_98548, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_98552 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98549, *[int_98550], **kwargs_98551)
            
            # Assigning a type to the variable 'call_assignment_95776' (line 1157)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1157, 12), 'call_assignment_95776', getitem___call_result_98552)
            
            # Assigning a Name to a Name (line 1157):
            # Getting the type of 'call_assignment_95776' (line 1157)
            call_assignment_95776_98553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 12), 'call_assignment_95776')
            # Assigning a type to the variable 'x0' (line 1157)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1157, 12), 'x0', call_assignment_95776_98553)
            
            # Assigning a Call to a Name (line 1157):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_98556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1157, 12), 'int')
            # Processing the call keyword arguments
            kwargs_98557 = {}
            # Getting the type of 'call_assignment_95775' (line 1157)
            call_assignment_95775_98554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 12), 'call_assignment_95775', False)
            # Obtaining the member '__getitem__' of a type (line 1157)
            getitem___98555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1157, 12), call_assignment_95775_98554, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_98558 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98555, *[int_98556], **kwargs_98557)
            
            # Assigning a type to the variable 'call_assignment_95777' (line 1157)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1157, 12), 'call_assignment_95777', getitem___call_result_98558)
            
            # Assigning a Name to a Name (line 1157):
            # Getting the type of 'call_assignment_95777' (line 1157)
            call_assignment_95777_98559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 12), 'call_assignment_95777')
            # Assigning a type to the variable 'y0' (line 1157)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1157, 16), 'y0', call_assignment_95777_98559)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1161)
            tuple_98560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1161, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1161)
            # Adding element type (line 1161)
            # Getting the type of 'x0' (line 1161)
            x0_98561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 19), 'x0')
            # Getting the type of 'xd' (line 1161)
            xd_98562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 24), 'xd')
            # Applying the binary operator '+' (line 1161)
            result_add_98563 = python_operator(stypy.reporting.localization.Localization(__file__, 1161, 19), '+', x0_98561, xd_98562)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1161, 19), tuple_98560, result_add_98563)
            # Adding element type (line 1161)
            # Getting the type of 'y0' (line 1161)
            y0_98564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 28), 'y0')
            # Getting the type of 'yd' (line 1161)
            yd_98565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 33), 'yd')
            # Applying the binary operator '+' (line 1161)
            result_add_98566 = python_operator(stypy.reporting.localization.Localization(__file__, 1161, 28), '+', y0_98564, yd_98565)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1161, 19), tuple_98560, result_add_98566)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1161)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1161, 12), 'stypy_return_type', tuple_98560)
            
            # ################# End of '_offset(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '_offset' in the type store
            # Getting the type of 'stypy_return_type' (line 1152)
            stypy_return_type_98567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_98567)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_offset'
            return stypy_return_type_98567

        # Assigning a type to the variable '_offset' (line 1152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1152, 8), '_offset', _offset)
        
        # Call to set_offset(...): (line 1163)
        # Processing the call arguments (line 1163)
        # Getting the type of '_offset' (line 1163)
        _offset_98570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 24), '_offset', False)
        # Processing the call keyword arguments (line 1163)
        kwargs_98571 = {}
        # Getting the type of 'self' (line 1163)
        self_98568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'self', False)
        # Obtaining the member 'set_offset' of a type (line 1163)
        set_offset_98569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 8), self_98568, 'set_offset')
        # Calling set_offset(args, kwargs) (line 1163)
        set_offset_call_result_98572 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 8), set_offset_98569, *[_offset_98570], **kwargs_98571)
        
        
        # ################# End of '_update_offset_func(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_offset_func' in the type store
        # Getting the type of 'stypy_return_type' (line 1143)
        stypy_return_type_98573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98573)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_offset_func'
        return stypy_return_type_98573


    @norecursion
    def update_frame(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1165)
        None_98574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 42), 'None')
        defaults = [None_98574]
        # Create a new context for function 'update_frame'
        module_type_store = module_type_store.open_function_context('update_frame', 1165, 4, False)
        # Assigning a type to the variable 'self' (line 1166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnchoredOffsetbox.update_frame.__dict__.__setitem__('stypy_localization', localization)
        AnchoredOffsetbox.update_frame.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnchoredOffsetbox.update_frame.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnchoredOffsetbox.update_frame.__dict__.__setitem__('stypy_function_name', 'AnchoredOffsetbox.update_frame')
        AnchoredOffsetbox.update_frame.__dict__.__setitem__('stypy_param_names_list', ['bbox', 'fontsize'])
        AnchoredOffsetbox.update_frame.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnchoredOffsetbox.update_frame.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnchoredOffsetbox.update_frame.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnchoredOffsetbox.update_frame.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnchoredOffsetbox.update_frame.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnchoredOffsetbox.update_frame.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnchoredOffsetbox.update_frame', ['bbox', 'fontsize'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_frame', localization, ['bbox', 'fontsize'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_frame(...)' code ##################

        
        # Call to set_bounds(...): (line 1166)
        # Processing the call arguments (line 1166)
        # Getting the type of 'bbox' (line 1166)
        bbox_98578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 30), 'bbox', False)
        # Obtaining the member 'x0' of a type (line 1166)
        x0_98579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 30), bbox_98578, 'x0')
        # Getting the type of 'bbox' (line 1166)
        bbox_98580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 39), 'bbox', False)
        # Obtaining the member 'y0' of a type (line 1166)
        y0_98581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 39), bbox_98580, 'y0')
        # Getting the type of 'bbox' (line 1167)
        bbox_98582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 30), 'bbox', False)
        # Obtaining the member 'width' of a type (line 1167)
        width_98583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1167, 30), bbox_98582, 'width')
        # Getting the type of 'bbox' (line 1167)
        bbox_98584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 42), 'bbox', False)
        # Obtaining the member 'height' of a type (line 1167)
        height_98585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1167, 42), bbox_98584, 'height')
        # Processing the call keyword arguments (line 1166)
        kwargs_98586 = {}
        # Getting the type of 'self' (line 1166)
        self_98575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 8), 'self', False)
        # Obtaining the member 'patch' of a type (line 1166)
        patch_98576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 8), self_98575, 'patch')
        # Obtaining the member 'set_bounds' of a type (line 1166)
        set_bounds_98577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 8), patch_98576, 'set_bounds')
        # Calling set_bounds(args, kwargs) (line 1166)
        set_bounds_call_result_98587 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 8), set_bounds_98577, *[x0_98579, y0_98581, width_98583, height_98585], **kwargs_98586)
        
        
        # Getting the type of 'fontsize' (line 1169)
        fontsize_98588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 11), 'fontsize')
        # Testing the type of an if condition (line 1169)
        if_condition_98589 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1169, 8), fontsize_98588)
        # Assigning a type to the variable 'if_condition_98589' (line 1169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 8), 'if_condition_98589', if_condition_98589)
        # SSA begins for if statement (line 1169)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_mutation_scale(...): (line 1170)
        # Processing the call arguments (line 1170)
        # Getting the type of 'fontsize' (line 1170)
        fontsize_98593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 42), 'fontsize', False)
        # Processing the call keyword arguments (line 1170)
        kwargs_98594 = {}
        # Getting the type of 'self' (line 1170)
        self_98590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 12), 'self', False)
        # Obtaining the member 'patch' of a type (line 1170)
        patch_98591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 12), self_98590, 'patch')
        # Obtaining the member 'set_mutation_scale' of a type (line 1170)
        set_mutation_scale_98592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 12), patch_98591, 'set_mutation_scale')
        # Calling set_mutation_scale(args, kwargs) (line 1170)
        set_mutation_scale_call_result_98595 = invoke(stypy.reporting.localization.Localization(__file__, 1170, 12), set_mutation_scale_98592, *[fontsize_98593], **kwargs_98594)
        
        # SSA join for if statement (line 1169)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'update_frame(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_frame' in the type store
        # Getting the type of 'stypy_return_type' (line 1165)
        stypy_return_type_98596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98596)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_frame'
        return stypy_return_type_98596


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 1172, 4, False)
        # Assigning a type to the variable 'self' (line 1173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1173, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnchoredOffsetbox.draw.__dict__.__setitem__('stypy_localization', localization)
        AnchoredOffsetbox.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnchoredOffsetbox.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnchoredOffsetbox.draw.__dict__.__setitem__('stypy_function_name', 'AnchoredOffsetbox.draw')
        AnchoredOffsetbox.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        AnchoredOffsetbox.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnchoredOffsetbox.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnchoredOffsetbox.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnchoredOffsetbox.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnchoredOffsetbox.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnchoredOffsetbox.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnchoredOffsetbox.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_98597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1173, 8), 'unicode', u'draw the artist')
        
        
        
        # Call to get_visible(...): (line 1175)
        # Processing the call keyword arguments (line 1175)
        kwargs_98600 = {}
        # Getting the type of 'self' (line 1175)
        self_98598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 1175)
        get_visible_98599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 15), self_98598, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1175)
        get_visible_call_result_98601 = invoke(stypy.reporting.localization.Localization(__file__, 1175, 15), get_visible_98599, *[], **kwargs_98600)
        
        # Applying the 'not' unary operator (line 1175)
        result_not__98602 = python_operator(stypy.reporting.localization.Localization(__file__, 1175, 11), 'not', get_visible_call_result_98601)
        
        # Testing the type of an if condition (line 1175)
        if_condition_98603 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1175, 8), result_not__98602)
        # Assigning a type to the variable 'if_condition_98603' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 8), 'if_condition_98603', if_condition_98603)
        # SSA begins for if statement (line 1175)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1175)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1178):
        
        # Assigning a Call to a Name (line 1178):
        
        # Call to points_to_pixels(...): (line 1178)
        # Processing the call arguments (line 1178)
        
        # Call to get_size_in_points(...): (line 1178)
        # Processing the call keyword arguments (line 1178)
        kwargs_98609 = {}
        # Getting the type of 'self' (line 1178)
        self_98606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 45), 'self', False)
        # Obtaining the member 'prop' of a type (line 1178)
        prop_98607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1178, 45), self_98606, 'prop')
        # Obtaining the member 'get_size_in_points' of a type (line 1178)
        get_size_in_points_98608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1178, 45), prop_98607, 'get_size_in_points')
        # Calling get_size_in_points(args, kwargs) (line 1178)
        get_size_in_points_call_result_98610 = invoke(stypy.reporting.localization.Localization(__file__, 1178, 45), get_size_in_points_98608, *[], **kwargs_98609)
        
        # Processing the call keyword arguments (line 1178)
        kwargs_98611 = {}
        # Getting the type of 'renderer' (line 1178)
        renderer_98604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 19), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 1178)
        points_to_pixels_98605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1178, 19), renderer_98604, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 1178)
        points_to_pixels_call_result_98612 = invoke(stypy.reporting.localization.Localization(__file__, 1178, 19), points_to_pixels_98605, *[get_size_in_points_call_result_98610], **kwargs_98611)
        
        # Assigning a type to the variable 'fontsize' (line 1178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1178, 8), 'fontsize', points_to_pixels_call_result_98612)
        
        # Call to _update_offset_func(...): (line 1179)
        # Processing the call arguments (line 1179)
        # Getting the type of 'renderer' (line 1179)
        renderer_98615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 33), 'renderer', False)
        # Getting the type of 'fontsize' (line 1179)
        fontsize_98616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 43), 'fontsize', False)
        # Processing the call keyword arguments (line 1179)
        kwargs_98617 = {}
        # Getting the type of 'self' (line 1179)
        self_98613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 8), 'self', False)
        # Obtaining the member '_update_offset_func' of a type (line 1179)
        _update_offset_func_98614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 8), self_98613, '_update_offset_func')
        # Calling _update_offset_func(args, kwargs) (line 1179)
        _update_offset_func_call_result_98618 = invoke(stypy.reporting.localization.Localization(__file__, 1179, 8), _update_offset_func_98614, *[renderer_98615, fontsize_98616], **kwargs_98617)
        
        
        # Getting the type of 'self' (line 1181)
        self_98619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 11), 'self')
        # Obtaining the member '_drawFrame' of a type (line 1181)
        _drawFrame_98620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 11), self_98619, '_drawFrame')
        # Testing the type of an if condition (line 1181)
        if_condition_98621 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1181, 8), _drawFrame_98620)
        # Assigning a type to the variable 'if_condition_98621' (line 1181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1181, 8), 'if_condition_98621', if_condition_98621)
        # SSA begins for if statement (line 1181)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1183):
        
        # Assigning a Call to a Name (line 1183):
        
        # Call to get_window_extent(...): (line 1183)
        # Processing the call arguments (line 1183)
        # Getting the type of 'renderer' (line 1183)
        renderer_98624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 42), 'renderer', False)
        # Processing the call keyword arguments (line 1183)
        kwargs_98625 = {}
        # Getting the type of 'self' (line 1183)
        self_98622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 19), 'self', False)
        # Obtaining the member 'get_window_extent' of a type (line 1183)
        get_window_extent_98623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 19), self_98622, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 1183)
        get_window_extent_call_result_98626 = invoke(stypy.reporting.localization.Localization(__file__, 1183, 19), get_window_extent_98623, *[renderer_98624], **kwargs_98625)
        
        # Assigning a type to the variable 'bbox' (line 1183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1183, 12), 'bbox', get_window_extent_call_result_98626)
        
        # Call to update_frame(...): (line 1184)
        # Processing the call arguments (line 1184)
        # Getting the type of 'bbox' (line 1184)
        bbox_98629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 30), 'bbox', False)
        # Getting the type of 'fontsize' (line 1184)
        fontsize_98630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 36), 'fontsize', False)
        # Processing the call keyword arguments (line 1184)
        kwargs_98631 = {}
        # Getting the type of 'self' (line 1184)
        self_98627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 12), 'self', False)
        # Obtaining the member 'update_frame' of a type (line 1184)
        update_frame_98628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1184, 12), self_98627, 'update_frame')
        # Calling update_frame(args, kwargs) (line 1184)
        update_frame_call_result_98632 = invoke(stypy.reporting.localization.Localization(__file__, 1184, 12), update_frame_98628, *[bbox_98629, fontsize_98630], **kwargs_98631)
        
        
        # Call to draw(...): (line 1185)
        # Processing the call arguments (line 1185)
        # Getting the type of 'renderer' (line 1185)
        renderer_98636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 28), 'renderer', False)
        # Processing the call keyword arguments (line 1185)
        kwargs_98637 = {}
        # Getting the type of 'self' (line 1185)
        self_98633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 12), 'self', False)
        # Obtaining the member 'patch' of a type (line 1185)
        patch_98634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 12), self_98633, 'patch')
        # Obtaining the member 'draw' of a type (line 1185)
        draw_98635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 12), patch_98634, 'draw')
        # Calling draw(args, kwargs) (line 1185)
        draw_call_result_98638 = invoke(stypy.reporting.localization.Localization(__file__, 1185, 12), draw_98635, *[renderer_98636], **kwargs_98637)
        
        # SSA join for if statement (line 1181)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1187):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent(...): (line 1187)
        # Processing the call arguments (line 1187)
        # Getting the type of 'renderer' (line 1187)
        renderer_98641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 60), 'renderer', False)
        # Processing the call keyword arguments (line 1187)
        kwargs_98642 = {}
        # Getting the type of 'self' (line 1187)
        self_98639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 44), 'self', False)
        # Obtaining the member 'get_extent' of a type (line 1187)
        get_extent_98640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 44), self_98639, 'get_extent')
        # Calling get_extent(args, kwargs) (line 1187)
        get_extent_call_result_98643 = invoke(stypy.reporting.localization.Localization(__file__, 1187, 44), get_extent_98640, *[renderer_98641], **kwargs_98642)
        
        # Assigning a type to the variable 'call_assignment_95778' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'call_assignment_95778', get_extent_call_result_98643)
        
        # Assigning a Call to a Name (line 1187):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98647 = {}
        # Getting the type of 'call_assignment_95778' (line 1187)
        call_assignment_95778_98644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'call_assignment_95778', False)
        # Obtaining the member '__getitem__' of a type (line 1187)
        getitem___98645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 8), call_assignment_95778_98644, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98648 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98645, *[int_98646], **kwargs_98647)
        
        # Assigning a type to the variable 'call_assignment_95779' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'call_assignment_95779', getitem___call_result_98648)
        
        # Assigning a Name to a Name (line 1187):
        # Getting the type of 'call_assignment_95779' (line 1187)
        call_assignment_95779_98649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'call_assignment_95779')
        # Assigning a type to the variable 'width' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'width', call_assignment_95779_98649)
        
        # Assigning a Call to a Name (line 1187):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98653 = {}
        # Getting the type of 'call_assignment_95778' (line 1187)
        call_assignment_95778_98650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'call_assignment_95778', False)
        # Obtaining the member '__getitem__' of a type (line 1187)
        getitem___98651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 8), call_assignment_95778_98650, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98654 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98651, *[int_98652], **kwargs_98653)
        
        # Assigning a type to the variable 'call_assignment_95780' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'call_assignment_95780', getitem___call_result_98654)
        
        # Assigning a Name to a Name (line 1187):
        # Getting the type of 'call_assignment_95780' (line 1187)
        call_assignment_95780_98655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'call_assignment_95780')
        # Assigning a type to the variable 'height' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 15), 'height', call_assignment_95780_98655)
        
        # Assigning a Call to a Name (line 1187):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98659 = {}
        # Getting the type of 'call_assignment_95778' (line 1187)
        call_assignment_95778_98656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'call_assignment_95778', False)
        # Obtaining the member '__getitem__' of a type (line 1187)
        getitem___98657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 8), call_assignment_95778_98656, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98660 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98657, *[int_98658], **kwargs_98659)
        
        # Assigning a type to the variable 'call_assignment_95781' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'call_assignment_95781', getitem___call_result_98660)
        
        # Assigning a Name to a Name (line 1187):
        # Getting the type of 'call_assignment_95781' (line 1187)
        call_assignment_95781_98661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'call_assignment_95781')
        # Assigning a type to the variable 'xdescent' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 23), 'xdescent', call_assignment_95781_98661)
        
        # Assigning a Call to a Name (line 1187):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98665 = {}
        # Getting the type of 'call_assignment_95778' (line 1187)
        call_assignment_95778_98662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'call_assignment_95778', False)
        # Obtaining the member '__getitem__' of a type (line 1187)
        getitem___98663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 8), call_assignment_95778_98662, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98666 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98663, *[int_98664], **kwargs_98665)
        
        # Assigning a type to the variable 'call_assignment_95782' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'call_assignment_95782', getitem___call_result_98666)
        
        # Assigning a Name to a Name (line 1187):
        # Getting the type of 'call_assignment_95782' (line 1187)
        call_assignment_95782_98667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'call_assignment_95782')
        # Assigning a type to the variable 'ydescent' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 33), 'ydescent', call_assignment_95782_98667)
        
        # Assigning a Call to a Tuple (line 1189):
        
        # Assigning a Call to a Name:
        
        # Call to get_offset(...): (line 1189)
        # Processing the call arguments (line 1189)
        # Getting the type of 'width' (line 1189)
        width_98670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 33), 'width', False)
        # Getting the type of 'height' (line 1189)
        height_98671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 40), 'height', False)
        # Getting the type of 'xdescent' (line 1189)
        xdescent_98672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 48), 'xdescent', False)
        # Getting the type of 'ydescent' (line 1189)
        ydescent_98673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 58), 'ydescent', False)
        # Getting the type of 'renderer' (line 1189)
        renderer_98674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 68), 'renderer', False)
        # Processing the call keyword arguments (line 1189)
        kwargs_98675 = {}
        # Getting the type of 'self' (line 1189)
        self_98668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 17), 'self', False)
        # Obtaining the member 'get_offset' of a type (line 1189)
        get_offset_98669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 17), self_98668, 'get_offset')
        # Calling get_offset(args, kwargs) (line 1189)
        get_offset_call_result_98676 = invoke(stypy.reporting.localization.Localization(__file__, 1189, 17), get_offset_98669, *[width_98670, height_98671, xdescent_98672, ydescent_98673, renderer_98674], **kwargs_98675)
        
        # Assigning a type to the variable 'call_assignment_95783' (line 1189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 8), 'call_assignment_95783', get_offset_call_result_98676)
        
        # Assigning a Call to a Name (line 1189):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98680 = {}
        # Getting the type of 'call_assignment_95783' (line 1189)
        call_assignment_95783_98677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 8), 'call_assignment_95783', False)
        # Obtaining the member '__getitem__' of a type (line 1189)
        getitem___98678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 8), call_assignment_95783_98677, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98681 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98678, *[int_98679], **kwargs_98680)
        
        # Assigning a type to the variable 'call_assignment_95784' (line 1189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 8), 'call_assignment_95784', getitem___call_result_98681)
        
        # Assigning a Name to a Name (line 1189):
        # Getting the type of 'call_assignment_95784' (line 1189)
        call_assignment_95784_98682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 8), 'call_assignment_95784')
        # Assigning a type to the variable 'px' (line 1189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 8), 'px', call_assignment_95784_98682)
        
        # Assigning a Call to a Name (line 1189):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98686 = {}
        # Getting the type of 'call_assignment_95783' (line 1189)
        call_assignment_95783_98683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 8), 'call_assignment_95783', False)
        # Obtaining the member '__getitem__' of a type (line 1189)
        getitem___98684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 8), call_assignment_95783_98683, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98687 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98684, *[int_98685], **kwargs_98686)
        
        # Assigning a type to the variable 'call_assignment_95785' (line 1189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 8), 'call_assignment_95785', getitem___call_result_98687)
        
        # Assigning a Name to a Name (line 1189):
        # Getting the type of 'call_assignment_95785' (line 1189)
        call_assignment_95785_98688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 8), 'call_assignment_95785')
        # Assigning a type to the variable 'py' (line 1189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 12), 'py', call_assignment_95785_98688)
        
        # Call to set_offset(...): (line 1191)
        # Processing the call arguments (line 1191)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1191)
        tuple_98694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1191, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1191)
        # Adding element type (line 1191)
        # Getting the type of 'px' (line 1191)
        px_98695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 37), 'px', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1191, 37), tuple_98694, px_98695)
        # Adding element type (line 1191)
        # Getting the type of 'py' (line 1191)
        py_98696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 41), 'py', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1191, 37), tuple_98694, py_98696)
        
        # Processing the call keyword arguments (line 1191)
        kwargs_98697 = {}
        
        # Call to get_child(...): (line 1191)
        # Processing the call keyword arguments (line 1191)
        kwargs_98691 = {}
        # Getting the type of 'self' (line 1191)
        self_98689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 8), 'self', False)
        # Obtaining the member 'get_child' of a type (line 1191)
        get_child_98690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 8), self_98689, 'get_child')
        # Calling get_child(args, kwargs) (line 1191)
        get_child_call_result_98692 = invoke(stypy.reporting.localization.Localization(__file__, 1191, 8), get_child_98690, *[], **kwargs_98691)
        
        # Obtaining the member 'set_offset' of a type (line 1191)
        set_offset_98693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 8), get_child_call_result_98692, 'set_offset')
        # Calling set_offset(args, kwargs) (line 1191)
        set_offset_call_result_98698 = invoke(stypy.reporting.localization.Localization(__file__, 1191, 8), set_offset_98693, *[tuple_98694], **kwargs_98697)
        
        
        # Call to draw(...): (line 1192)
        # Processing the call arguments (line 1192)
        # Getting the type of 'renderer' (line 1192)
        renderer_98704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 30), 'renderer', False)
        # Processing the call keyword arguments (line 1192)
        kwargs_98705 = {}
        
        # Call to get_child(...): (line 1192)
        # Processing the call keyword arguments (line 1192)
        kwargs_98701 = {}
        # Getting the type of 'self' (line 1192)
        self_98699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 8), 'self', False)
        # Obtaining the member 'get_child' of a type (line 1192)
        get_child_98700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1192, 8), self_98699, 'get_child')
        # Calling get_child(args, kwargs) (line 1192)
        get_child_call_result_98702 = invoke(stypy.reporting.localization.Localization(__file__, 1192, 8), get_child_98700, *[], **kwargs_98701)
        
        # Obtaining the member 'draw' of a type (line 1192)
        draw_98703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1192, 8), get_child_call_result_98702, 'draw')
        # Calling draw(args, kwargs) (line 1192)
        draw_call_result_98706 = invoke(stypy.reporting.localization.Localization(__file__, 1192, 8), draw_98703, *[renderer_98704], **kwargs_98705)
        
        
        # Assigning a Name to a Attribute (line 1193):
        
        # Assigning a Name to a Attribute (line 1193):
        # Getting the type of 'False' (line 1193)
        False_98707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 21), 'False')
        # Getting the type of 'self' (line 1193)
        self_98708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1193)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 8), self_98708, 'stale', False_98707)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1172)
        stypy_return_type_98709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98709)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_98709


    @norecursion
    def _get_anchored_bbox(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_anchored_bbox'
        module_type_store = module_type_store.open_function_context('_get_anchored_bbox', 1195, 4, False)
        # Assigning a type to the variable 'self' (line 1196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1196, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnchoredOffsetbox._get_anchored_bbox.__dict__.__setitem__('stypy_localization', localization)
        AnchoredOffsetbox._get_anchored_bbox.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnchoredOffsetbox._get_anchored_bbox.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnchoredOffsetbox._get_anchored_bbox.__dict__.__setitem__('stypy_function_name', 'AnchoredOffsetbox._get_anchored_bbox')
        AnchoredOffsetbox._get_anchored_bbox.__dict__.__setitem__('stypy_param_names_list', ['loc', 'bbox', 'parentbbox', 'borderpad'])
        AnchoredOffsetbox._get_anchored_bbox.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnchoredOffsetbox._get_anchored_bbox.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnchoredOffsetbox._get_anchored_bbox.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnchoredOffsetbox._get_anchored_bbox.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnchoredOffsetbox._get_anchored_bbox.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnchoredOffsetbox._get_anchored_bbox.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnchoredOffsetbox._get_anchored_bbox', ['loc', 'bbox', 'parentbbox', 'borderpad'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_anchored_bbox', localization, ['loc', 'bbox', 'parentbbox', 'borderpad'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_anchored_bbox(...)' code ##################

        unicode_98710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, (-1)), 'unicode', u'\n        return the position of the bbox anchored at the parentbbox\n        with the loc code, with the borderpad.\n        ')
        # Evaluating assert statement condition
        
        # Getting the type of 'loc' (line 1200)
        loc_98711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 15), 'loc')
        
        # Call to range(...): (line 1200)
        # Processing the call arguments (line 1200)
        int_98713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, 28), 'int')
        int_98714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, 31), 'int')
        # Processing the call keyword arguments (line 1200)
        kwargs_98715 = {}
        # Getting the type of 'range' (line 1200)
        range_98712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 22), 'range', False)
        # Calling range(args, kwargs) (line 1200)
        range_call_result_98716 = invoke(stypy.reporting.localization.Localization(__file__, 1200, 22), range_98712, *[int_98713, int_98714], **kwargs_98715)
        
        # Applying the binary operator 'in' (line 1200)
        result_contains_98717 = python_operator(stypy.reporting.localization.Localization(__file__, 1200, 15), 'in', loc_98711, range_call_result_98716)
        
        
        # Assigning a Call to a Tuple (line 1202):
        
        # Assigning a Call to a Name:
        
        # Call to xrange(...): (line 1202)
        # Processing the call arguments (line 1202)
        int_98719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 60), 'int')
        # Processing the call keyword arguments (line 1202)
        kwargs_98720 = {}
        # Getting the type of 'xrange' (line 1202)
        xrange_98718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 53), 'xrange', False)
        # Calling xrange(args, kwargs) (line 1202)
        xrange_call_result_98721 = invoke(stypy.reporting.localization.Localization(__file__, 1202, 53), xrange_98718, *[int_98719], **kwargs_98720)
        
        # Assigning a type to the variable 'call_assignment_95786' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95786', xrange_call_result_98721)
        
        # Assigning a Call to a Name (line 1202):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98725 = {}
        # Getting the type of 'call_assignment_95786' (line 1202)
        call_assignment_95786_98722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95786', False)
        # Obtaining the member '__getitem__' of a type (line 1202)
        getitem___98723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 8), call_assignment_95786_98722, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98726 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98723, *[int_98724], **kwargs_98725)
        
        # Assigning a type to the variable 'call_assignment_95787' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95787', getitem___call_result_98726)
        
        # Assigning a Name to a Name (line 1202):
        # Getting the type of 'call_assignment_95787' (line 1202)
        call_assignment_95787_98727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95787')
        # Assigning a type to the variable 'BEST' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'BEST', call_assignment_95787_98727)
        
        # Assigning a Call to a Name (line 1202):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98731 = {}
        # Getting the type of 'call_assignment_95786' (line 1202)
        call_assignment_95786_98728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95786', False)
        # Obtaining the member '__getitem__' of a type (line 1202)
        getitem___98729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 8), call_assignment_95786_98728, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98732 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98729, *[int_98730], **kwargs_98731)
        
        # Assigning a type to the variable 'call_assignment_95788' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95788', getitem___call_result_98732)
        
        # Assigning a Name to a Name (line 1202):
        # Getting the type of 'call_assignment_95788' (line 1202)
        call_assignment_95788_98733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95788')
        # Assigning a type to the variable 'UR' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 14), 'UR', call_assignment_95788_98733)
        
        # Assigning a Call to a Name (line 1202):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98737 = {}
        # Getting the type of 'call_assignment_95786' (line 1202)
        call_assignment_95786_98734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95786', False)
        # Obtaining the member '__getitem__' of a type (line 1202)
        getitem___98735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 8), call_assignment_95786_98734, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98738 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98735, *[int_98736], **kwargs_98737)
        
        # Assigning a type to the variable 'call_assignment_95789' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95789', getitem___call_result_98738)
        
        # Assigning a Name to a Name (line 1202):
        # Getting the type of 'call_assignment_95789' (line 1202)
        call_assignment_95789_98739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95789')
        # Assigning a type to the variable 'UL' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 18), 'UL', call_assignment_95789_98739)
        
        # Assigning a Call to a Name (line 1202):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98743 = {}
        # Getting the type of 'call_assignment_95786' (line 1202)
        call_assignment_95786_98740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95786', False)
        # Obtaining the member '__getitem__' of a type (line 1202)
        getitem___98741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 8), call_assignment_95786_98740, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98744 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98741, *[int_98742], **kwargs_98743)
        
        # Assigning a type to the variable 'call_assignment_95790' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95790', getitem___call_result_98744)
        
        # Assigning a Name to a Name (line 1202):
        # Getting the type of 'call_assignment_95790' (line 1202)
        call_assignment_95790_98745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95790')
        # Assigning a type to the variable 'LL' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 22), 'LL', call_assignment_95790_98745)
        
        # Assigning a Call to a Name (line 1202):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98749 = {}
        # Getting the type of 'call_assignment_95786' (line 1202)
        call_assignment_95786_98746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95786', False)
        # Obtaining the member '__getitem__' of a type (line 1202)
        getitem___98747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 8), call_assignment_95786_98746, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98750 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98747, *[int_98748], **kwargs_98749)
        
        # Assigning a type to the variable 'call_assignment_95791' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95791', getitem___call_result_98750)
        
        # Assigning a Name to a Name (line 1202):
        # Getting the type of 'call_assignment_95791' (line 1202)
        call_assignment_95791_98751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95791')
        # Assigning a type to the variable 'LR' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 26), 'LR', call_assignment_95791_98751)
        
        # Assigning a Call to a Name (line 1202):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98755 = {}
        # Getting the type of 'call_assignment_95786' (line 1202)
        call_assignment_95786_98752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95786', False)
        # Obtaining the member '__getitem__' of a type (line 1202)
        getitem___98753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 8), call_assignment_95786_98752, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98756 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98753, *[int_98754], **kwargs_98755)
        
        # Assigning a type to the variable 'call_assignment_95792' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95792', getitem___call_result_98756)
        
        # Assigning a Name to a Name (line 1202):
        # Getting the type of 'call_assignment_95792' (line 1202)
        call_assignment_95792_98757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95792')
        # Assigning a type to the variable 'R' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 30), 'R', call_assignment_95792_98757)
        
        # Assigning a Call to a Name (line 1202):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98761 = {}
        # Getting the type of 'call_assignment_95786' (line 1202)
        call_assignment_95786_98758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95786', False)
        # Obtaining the member '__getitem__' of a type (line 1202)
        getitem___98759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 8), call_assignment_95786_98758, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98762 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98759, *[int_98760], **kwargs_98761)
        
        # Assigning a type to the variable 'call_assignment_95793' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95793', getitem___call_result_98762)
        
        # Assigning a Name to a Name (line 1202):
        # Getting the type of 'call_assignment_95793' (line 1202)
        call_assignment_95793_98763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95793')
        # Assigning a type to the variable 'CL' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 33), 'CL', call_assignment_95793_98763)
        
        # Assigning a Call to a Name (line 1202):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98767 = {}
        # Getting the type of 'call_assignment_95786' (line 1202)
        call_assignment_95786_98764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95786', False)
        # Obtaining the member '__getitem__' of a type (line 1202)
        getitem___98765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 8), call_assignment_95786_98764, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98768 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98765, *[int_98766], **kwargs_98767)
        
        # Assigning a type to the variable 'call_assignment_95794' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95794', getitem___call_result_98768)
        
        # Assigning a Name to a Name (line 1202):
        # Getting the type of 'call_assignment_95794' (line 1202)
        call_assignment_95794_98769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95794')
        # Assigning a type to the variable 'CR' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 37), 'CR', call_assignment_95794_98769)
        
        # Assigning a Call to a Name (line 1202):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98773 = {}
        # Getting the type of 'call_assignment_95786' (line 1202)
        call_assignment_95786_98770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95786', False)
        # Obtaining the member '__getitem__' of a type (line 1202)
        getitem___98771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 8), call_assignment_95786_98770, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98774 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98771, *[int_98772], **kwargs_98773)
        
        # Assigning a type to the variable 'call_assignment_95795' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95795', getitem___call_result_98774)
        
        # Assigning a Name to a Name (line 1202):
        # Getting the type of 'call_assignment_95795' (line 1202)
        call_assignment_95795_98775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95795')
        # Assigning a type to the variable 'LC' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 41), 'LC', call_assignment_95795_98775)
        
        # Assigning a Call to a Name (line 1202):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98779 = {}
        # Getting the type of 'call_assignment_95786' (line 1202)
        call_assignment_95786_98776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95786', False)
        # Obtaining the member '__getitem__' of a type (line 1202)
        getitem___98777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 8), call_assignment_95786_98776, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98780 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98777, *[int_98778], **kwargs_98779)
        
        # Assigning a type to the variable 'call_assignment_95796' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95796', getitem___call_result_98780)
        
        # Assigning a Name to a Name (line 1202):
        # Getting the type of 'call_assignment_95796' (line 1202)
        call_assignment_95796_98781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95796')
        # Assigning a type to the variable 'UC' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 45), 'UC', call_assignment_95796_98781)
        
        # Assigning a Call to a Name (line 1202):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_98784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 8), 'int')
        # Processing the call keyword arguments
        kwargs_98785 = {}
        # Getting the type of 'call_assignment_95786' (line 1202)
        call_assignment_95786_98782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95786', False)
        # Obtaining the member '__getitem__' of a type (line 1202)
        getitem___98783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 8), call_assignment_95786_98782, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_98786 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___98783, *[int_98784], **kwargs_98785)
        
        # Assigning a type to the variable 'call_assignment_95797' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95797', getitem___call_result_98786)
        
        # Assigning a Name to a Name (line 1202):
        # Getting the type of 'call_assignment_95797' (line 1202)
        call_assignment_95797_98787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'call_assignment_95797')
        # Assigning a type to the variable 'C' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 49), 'C', call_assignment_95797_98787)
        
        # Assigning a Dict to a Name (line 1204):
        
        # Assigning a Dict to a Name (line 1204):
        
        # Obtaining an instance of the builtin type 'dict' (line 1204)
        dict_98788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1204, 23), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1204)
        # Adding element type (key, value) (line 1204)
        # Getting the type of 'UR' (line 1204)
        UR_98789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 24), 'UR')
        unicode_98790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1204, 28), 'unicode', u'NE')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1204, 23), dict_98788, (UR_98789, unicode_98790))
        # Adding element type (key, value) (line 1204)
        # Getting the type of 'UL' (line 1205)
        UL_98791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 24), 'UL')
        unicode_98792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1205, 28), 'unicode', u'NW')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1204, 23), dict_98788, (UL_98791, unicode_98792))
        # Adding element type (key, value) (line 1204)
        # Getting the type of 'LL' (line 1206)
        LL_98793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 24), 'LL')
        unicode_98794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1206, 28), 'unicode', u'SW')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1204, 23), dict_98788, (LL_98793, unicode_98794))
        # Adding element type (key, value) (line 1204)
        # Getting the type of 'LR' (line 1207)
        LR_98795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 24), 'LR')
        unicode_98796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1207, 28), 'unicode', u'SE')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1204, 23), dict_98788, (LR_98795, unicode_98796))
        # Adding element type (key, value) (line 1204)
        # Getting the type of 'R' (line 1208)
        R_98797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 24), 'R')
        unicode_98798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1208, 27), 'unicode', u'E')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1204, 23), dict_98788, (R_98797, unicode_98798))
        # Adding element type (key, value) (line 1204)
        # Getting the type of 'CL' (line 1209)
        CL_98799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 24), 'CL')
        unicode_98800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1209, 28), 'unicode', u'W')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1204, 23), dict_98788, (CL_98799, unicode_98800))
        # Adding element type (key, value) (line 1204)
        # Getting the type of 'CR' (line 1210)
        CR_98801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 24), 'CR')
        unicode_98802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, 28), 'unicode', u'E')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1204, 23), dict_98788, (CR_98801, unicode_98802))
        # Adding element type (key, value) (line 1204)
        # Getting the type of 'LC' (line 1211)
        LC_98803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 24), 'LC')
        unicode_98804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, 28), 'unicode', u'S')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1204, 23), dict_98788, (LC_98803, unicode_98804))
        # Adding element type (key, value) (line 1204)
        # Getting the type of 'UC' (line 1212)
        UC_98805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 24), 'UC')
        unicode_98806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1212, 28), 'unicode', u'N')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1204, 23), dict_98788, (UC_98805, unicode_98806))
        # Adding element type (key, value) (line 1204)
        # Getting the type of 'C' (line 1213)
        C_98807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 24), 'C')
        unicode_98808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1213, 27), 'unicode', u'C')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1204, 23), dict_98788, (C_98807, unicode_98808))
        
        # Assigning a type to the variable 'anchor_coefs' (line 1204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1204, 8), 'anchor_coefs', dict_98788)
        
        # Assigning a Subscript to a Name (line 1215):
        
        # Assigning a Subscript to a Name (line 1215):
        
        # Obtaining the type of the subscript
        # Getting the type of 'loc' (line 1215)
        loc_98809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 25), 'loc')
        # Getting the type of 'anchor_coefs' (line 1215)
        anchor_coefs_98810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 12), 'anchor_coefs')
        # Obtaining the member '__getitem__' of a type (line 1215)
        getitem___98811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 12), anchor_coefs_98810, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1215)
        subscript_call_result_98812 = invoke(stypy.reporting.localization.Localization(__file__, 1215, 12), getitem___98811, loc_98809)
        
        # Assigning a type to the variable 'c' (line 1215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'c', subscript_call_result_98812)
        
        # Assigning a Call to a Name (line 1217):
        
        # Assigning a Call to a Name (line 1217):
        
        # Call to padded(...): (line 1217)
        # Processing the call arguments (line 1217)
        
        # Getting the type of 'borderpad' (line 1217)
        borderpad_98815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 39), 'borderpad', False)
        # Applying the 'usub' unary operator (line 1217)
        result___neg___98816 = python_operator(stypy.reporting.localization.Localization(__file__, 1217, 38), 'usub', borderpad_98815)
        
        # Processing the call keyword arguments (line 1217)
        kwargs_98817 = {}
        # Getting the type of 'parentbbox' (line 1217)
        parentbbox_98813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 20), 'parentbbox', False)
        # Obtaining the member 'padded' of a type (line 1217)
        padded_98814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 20), parentbbox_98813, 'padded')
        # Calling padded(args, kwargs) (line 1217)
        padded_call_result_98818 = invoke(stypy.reporting.localization.Localization(__file__, 1217, 20), padded_98814, *[result___neg___98816], **kwargs_98817)
        
        # Assigning a type to the variable 'container' (line 1217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 8), 'container', padded_call_result_98818)
        
        # Assigning a Call to a Name (line 1218):
        
        # Assigning a Call to a Name (line 1218):
        
        # Call to anchored(...): (line 1218)
        # Processing the call arguments (line 1218)
        # Getting the type of 'c' (line 1218)
        c_98821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 37), 'c', False)
        # Processing the call keyword arguments (line 1218)
        # Getting the type of 'container' (line 1218)
        container_98822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 50), 'container', False)
        keyword_98823 = container_98822
        kwargs_98824 = {'container': keyword_98823}
        # Getting the type of 'bbox' (line 1218)
        bbox_98819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 23), 'bbox', False)
        # Obtaining the member 'anchored' of a type (line 1218)
        anchored_98820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 23), bbox_98819, 'anchored')
        # Calling anchored(args, kwargs) (line 1218)
        anchored_call_result_98825 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 23), anchored_98820, *[c_98821], **kwargs_98824)
        
        # Assigning a type to the variable 'anchored_box' (line 1218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1218, 8), 'anchored_box', anchored_call_result_98825)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1219)
        tuple_98826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1219, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1219)
        # Adding element type (line 1219)
        # Getting the type of 'anchored_box' (line 1219)
        anchored_box_98827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 15), 'anchored_box')
        # Obtaining the member 'x0' of a type (line 1219)
        x0_98828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1219, 15), anchored_box_98827, 'x0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1219, 15), tuple_98826, x0_98828)
        # Adding element type (line 1219)
        # Getting the type of 'anchored_box' (line 1219)
        anchored_box_98829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 32), 'anchored_box')
        # Obtaining the member 'y0' of a type (line 1219)
        y0_98830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1219, 32), anchored_box_98829, 'y0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1219, 15), tuple_98826, y0_98830)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1219, 8), 'stypy_return_type', tuple_98826)
        
        # ################# End of '_get_anchored_bbox(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_anchored_bbox' in the type store
        # Getting the type of 'stypy_return_type' (line 1195)
        stypy_return_type_98831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98831)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_anchored_bbox'
        return stypy_return_type_98831


# Assigning a type to the variable 'AnchoredOffsetbox' (line 974)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 0), 'AnchoredOffsetbox', AnchoredOffsetbox)

# Assigning a Num to a Name (line 982):
int_98832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 982, 13), 'int')
# Getting the type of 'AnchoredOffsetbox'
AnchoredOffsetbox_98833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'AnchoredOffsetbox')
# Setting the type of the member 'zorder' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), AnchoredOffsetbox_98833, 'zorder', int_98832)

# Assigning a Dict to a Name (line 985):

# Obtaining an instance of the builtin type 'dict' (line 985)
dict_98834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, 12), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 985)
# Adding element type (key, value) (line 985)
unicode_98835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, 13), 'unicode', u'upper right')
int_98836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, 28), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 985, 12), dict_98834, (unicode_98835, int_98836))
# Adding element type (key, value) (line 985)
unicode_98837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 13), 'unicode', u'upper left')
int_98838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 27), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 985, 12), dict_98834, (unicode_98837, int_98838))
# Adding element type (key, value) (line 985)
unicode_98839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 987, 13), 'unicode', u'lower left')
int_98840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 987, 27), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 985, 12), dict_98834, (unicode_98839, int_98840))
# Adding element type (key, value) (line 985)
unicode_98841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 988, 13), 'unicode', u'lower right')
int_98842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 988, 28), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 985, 12), dict_98834, (unicode_98841, int_98842))
# Adding element type (key, value) (line 985)
unicode_98843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 13), 'unicode', u'right')
int_98844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 22), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 985, 12), dict_98834, (unicode_98843, int_98844))
# Adding element type (key, value) (line 985)
unicode_98845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 990, 13), 'unicode', u'center left')
int_98846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 990, 28), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 985, 12), dict_98834, (unicode_98845, int_98846))
# Adding element type (key, value) (line 985)
unicode_98847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 991, 13), 'unicode', u'center right')
int_98848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 991, 29), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 985, 12), dict_98834, (unicode_98847, int_98848))
# Adding element type (key, value) (line 985)
unicode_98849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 992, 13), 'unicode', u'lower center')
int_98850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 992, 29), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 985, 12), dict_98834, (unicode_98849, int_98850))
# Adding element type (key, value) (line 985)
unicode_98851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 993, 13), 'unicode', u'upper center')
int_98852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 993, 29), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 985, 12), dict_98834, (unicode_98851, int_98852))
# Adding element type (key, value) (line 985)
unicode_98853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 994, 13), 'unicode', u'center')
int_98854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 994, 23), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 985, 12), dict_98834, (unicode_98853, int_98854))

# Getting the type of 'AnchoredOffsetbox'
AnchoredOffsetbox_98855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'AnchoredOffsetbox')
# Setting the type of the member 'codes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), AnchoredOffsetbox_98855, 'codes', dict_98834)
# Declaration of the 'AnchoredText' class
# Getting the type of 'AnchoredOffsetbox' (line 1222)
AnchoredOffsetbox_98856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 19), 'AnchoredOffsetbox')

class AnchoredText(AnchoredOffsetbox_98856, ):
    unicode_98857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, (-1)), 'unicode', u'\n    AnchoredOffsetbox with Text.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_98858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 35), 'float')
        float_98859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 50), 'float')
        # Getting the type of 'None' (line 1227)
        None_98860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 60), 'None')
        defaults = [float_98858, float_98859, None_98860]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1227, 4, False)
        # Assigning a type to the variable 'self' (line 1228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1228, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnchoredText.__init__', ['s', 'loc', 'pad', 'borderpad', 'prop'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['s', 'loc', 'pad', 'borderpad', 'prop'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_98861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1251, (-1)), 'unicode', u'\n        Parameters\n        ----------\n        s : string\n            Text.\n\n        loc : str\n            Location code.\n\n        pad : float, optional\n            Pad between the text and the frame as fraction of the font\n            size.\n\n        borderpad : float, optional\n            Pad between the frame and the axes (or *bbox_to_anchor*).\n\n        prop : `matplotlib.font_manager.FontProperties`\n            Font properties.\n\n        Notes\n        -----\n        Other keyword parameters of `AnchoredOffsetbox` are also\n        allowed.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1253)
        # Getting the type of 'prop' (line 1253)
        prop_98862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 11), 'prop')
        # Getting the type of 'None' (line 1253)
        None_98863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 19), 'None')
        
        (may_be_98864, more_types_in_union_98865) = may_be_none(prop_98862, None_98863)

        if may_be_98864:

            if more_types_in_union_98865:
                # Runtime conditional SSA (line 1253)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Dict to a Name (line 1254):
            
            # Assigning a Dict to a Name (line 1254):
            
            # Obtaining an instance of the builtin type 'dict' (line 1254)
            dict_98866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1254, 19), 'dict')
            # Adding type elements to the builtin type 'dict' instance (line 1254)
            
            # Assigning a type to the variable 'prop' (line 1254)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1254, 12), 'prop', dict_98866)

            if more_types_in_union_98865:
                # SSA join for if statement (line 1253)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Set to a Name (line 1255):
        
        # Assigning a Set to a Name (line 1255):
        
        # Obtaining an instance of the builtin type 'set' (line 1255)
        set_98867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 20), 'set')
        # Adding type elements to the builtin type 'set' instance (line 1255)
        # Adding element type (line 1255)
        unicode_98868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 21), 'unicode', u'ha')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 20), set_98867, unicode_98868)
        # Adding element type (line 1255)
        unicode_98869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 27), 'unicode', u'horizontalalignment')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 20), set_98867, unicode_98869)
        # Adding element type (line 1255)
        unicode_98870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 50), 'unicode', u'va')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 20), set_98867, unicode_98870)
        # Adding element type (line 1255)
        unicode_98871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 56), 'unicode', u'verticalalignment')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 20), set_98867, unicode_98871)
        
        # Assigning a type to the variable 'badkwargs' (line 1255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 8), 'badkwargs', set_98867)
        
        # Getting the type of 'badkwargs' (line 1256)
        badkwargs_98872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 11), 'badkwargs')
        
        # Call to set(...): (line 1256)
        # Processing the call arguments (line 1256)
        # Getting the type of 'prop' (line 1256)
        prop_98874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 27), 'prop', False)
        # Processing the call keyword arguments (line 1256)
        kwargs_98875 = {}
        # Getting the type of 'set' (line 1256)
        set_98873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 23), 'set', False)
        # Calling set(args, kwargs) (line 1256)
        set_call_result_98876 = invoke(stypy.reporting.localization.Localization(__file__, 1256, 23), set_98873, *[prop_98874], **kwargs_98875)
        
        # Applying the binary operator '&' (line 1256)
        result_and__98877 = python_operator(stypy.reporting.localization.Localization(__file__, 1256, 11), '&', badkwargs_98872, set_call_result_98876)
        
        # Testing the type of an if condition (line 1256)
        if_condition_98878 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1256, 8), result_and__98877)
        # Assigning a type to the variable 'if_condition_98878' (line 1256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 8), 'if_condition_98878', if_condition_98878)
        # SSA begins for if statement (line 1256)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1257)
        # Processing the call arguments (line 1257)
        unicode_98881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 26), 'unicode', u'Mixing horizontalalignment or verticalalignment with AnchoredText is not supported.')
        # Processing the call keyword arguments (line 1257)
        kwargs_98882 = {}
        # Getting the type of 'warnings' (line 1257)
        warnings_98879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1257)
        warn_98880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1257, 12), warnings_98879, 'warn')
        # Calling warn(args, kwargs) (line 1257)
        warn_call_result_98883 = invoke(stypy.reporting.localization.Localization(__file__, 1257, 12), warn_98880, *[unicode_98881], **kwargs_98882)
        
        # SSA join for if statement (line 1256)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1260):
        
        # Assigning a Call to a Attribute (line 1260):
        
        # Call to TextArea(...): (line 1260)
        # Processing the call arguments (line 1260)
        # Getting the type of 's' (line 1260)
        s_98885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 28), 's', False)
        # Processing the call keyword arguments (line 1260)
        # Getting the type of 'prop' (line 1260)
        prop_98886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 41), 'prop', False)
        keyword_98887 = prop_98886
        # Getting the type of 'False' (line 1260)
        False_98888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 62), 'False', False)
        keyword_98889 = False_98888
        kwargs_98890 = {'textprops': keyword_98887, 'minimumdescent': keyword_98889}
        # Getting the type of 'TextArea' (line 1260)
        TextArea_98884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 19), 'TextArea', False)
        # Calling TextArea(args, kwargs) (line 1260)
        TextArea_call_result_98891 = invoke(stypy.reporting.localization.Localization(__file__, 1260, 19), TextArea_98884, *[s_98885], **kwargs_98890)
        
        # Getting the type of 'self' (line 1260)
        self_98892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 8), 'self')
        # Setting the type of the member 'txt' of a type (line 1260)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1260, 8), self_98892, 'txt', TextArea_call_result_98891)
        
        # Assigning a Call to a Name (line 1261):
        
        # Assigning a Call to a Name (line 1261):
        
        # Call to get_fontproperties(...): (line 1261)
        # Processing the call keyword arguments (line 1261)
        kwargs_98897 = {}
        # Getting the type of 'self' (line 1261)
        self_98893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 13), 'self', False)
        # Obtaining the member 'txt' of a type (line 1261)
        txt_98894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 13), self_98893, 'txt')
        # Obtaining the member '_text' of a type (line 1261)
        _text_98895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 13), txt_98894, '_text')
        # Obtaining the member 'get_fontproperties' of a type (line 1261)
        get_fontproperties_98896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 13), _text_98895, 'get_fontproperties')
        # Calling get_fontproperties(args, kwargs) (line 1261)
        get_fontproperties_call_result_98898 = invoke(stypy.reporting.localization.Localization(__file__, 1261, 13), get_fontproperties_98896, *[], **kwargs_98897)
        
        # Assigning a type to the variable 'fp' (line 1261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1261, 8), 'fp', get_fontproperties_call_result_98898)
        
        # Call to __init__(...): (line 1262)
        # Processing the call arguments (line 1262)
        # Getting the type of 'loc' (line 1263)
        loc_98905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 12), 'loc', False)
        # Processing the call keyword arguments (line 1262)
        # Getting the type of 'pad' (line 1263)
        pad_98906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 21), 'pad', False)
        keyword_98907 = pad_98906
        # Getting the type of 'borderpad' (line 1263)
        borderpad_98908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 36), 'borderpad', False)
        keyword_98909 = borderpad_98908
        # Getting the type of 'self' (line 1263)
        self_98910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 53), 'self', False)
        # Obtaining the member 'txt' of a type (line 1263)
        txt_98911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1263, 53), self_98910, 'txt')
        keyword_98912 = txt_98911
        # Getting the type of 'fp' (line 1263)
        fp_98913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 68), 'fp', False)
        keyword_98914 = fp_98913
        # Getting the type of 'kwargs' (line 1264)
        kwargs_98915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 14), 'kwargs', False)
        kwargs_98916 = {'borderpad': keyword_98909, 'prop': keyword_98914, 'pad': keyword_98907, 'kwargs_98915': kwargs_98915, 'child': keyword_98912}
        
        # Call to super(...): (line 1262)
        # Processing the call arguments (line 1262)
        # Getting the type of 'AnchoredText' (line 1262)
        AnchoredText_98900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 14), 'AnchoredText', False)
        # Getting the type of 'self' (line 1262)
        self_98901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 28), 'self', False)
        # Processing the call keyword arguments (line 1262)
        kwargs_98902 = {}
        # Getting the type of 'super' (line 1262)
        super_98899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 8), 'super', False)
        # Calling super(args, kwargs) (line 1262)
        super_call_result_98903 = invoke(stypy.reporting.localization.Localization(__file__, 1262, 8), super_98899, *[AnchoredText_98900, self_98901], **kwargs_98902)
        
        # Obtaining the member '__init__' of a type (line 1262)
        init___98904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1262, 8), super_call_result_98903, '__init__')
        # Calling __init__(args, kwargs) (line 1262)
        init___call_result_98917 = invoke(stypy.reporting.localization.Localization(__file__, 1262, 8), init___98904, *[loc_98905], **kwargs_98916)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'AnchoredText' (line 1222)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1222, 0), 'AnchoredText', AnchoredText)
# Declaration of the 'OffsetImage' class
# Getting the type of 'OffsetBox' (line 1267)
OffsetBox_98918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 18), 'OffsetBox')

class OffsetImage(OffsetBox_98918, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_98919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1269, 22), 'int')
        # Getting the type of 'None' (line 1270)
        None_98920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 22), 'None')
        # Getting the type of 'None' (line 1271)
        None_98921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 22), 'None')
        # Getting the type of 'None' (line 1272)
        None_98922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 31), 'None')
        # Getting the type of 'None' (line 1273)
        None_98923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 24), 'None')
        int_98924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1274, 28), 'int')
        float_98925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1275, 27), 'float')
        # Getting the type of 'False' (line 1276)
        False_98926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 26), 'False')
        # Getting the type of 'True' (line 1277)
        True_98927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 25), 'True')
        defaults = [int_98919, None_98920, None_98921, None_98922, None_98923, int_98924, float_98925, False_98926, True_98927]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1268, 4, False)
        # Assigning a type to the variable 'self' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetImage.__init__', ['arr', 'zoom', 'cmap', 'norm', 'interpolation', 'origin', 'filternorm', 'filterrad', 'resample', 'dpi_cor'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['arr', 'zoom', 'cmap', 'norm', 'interpolation', 'origin', 'filternorm', 'filterrad', 'resample', 'dpi_cor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1281)
        # Processing the call arguments (line 1281)
        # Getting the type of 'self' (line 1281)
        self_98930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 27), 'self', False)
        # Processing the call keyword arguments (line 1281)
        kwargs_98931 = {}
        # Getting the type of 'OffsetBox' (line 1281)
        OffsetBox_98928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 8), 'OffsetBox', False)
        # Obtaining the member '__init__' of a type (line 1281)
        init___98929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1281, 8), OffsetBox_98928, '__init__')
        # Calling __init__(args, kwargs) (line 1281)
        init___call_result_98932 = invoke(stypy.reporting.localization.Localization(__file__, 1281, 8), init___98929, *[self_98930], **kwargs_98931)
        
        
        # Assigning a Name to a Attribute (line 1282):
        
        # Assigning a Name to a Attribute (line 1282):
        # Getting the type of 'dpi_cor' (line 1282)
        dpi_cor_98933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 24), 'dpi_cor')
        # Getting the type of 'self' (line 1282)
        self_98934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 8), 'self')
        # Setting the type of the member '_dpi_cor' of a type (line 1282)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 8), self_98934, '_dpi_cor', dpi_cor_98933)
        
        # Assigning a Call to a Attribute (line 1284):
        
        # Assigning a Call to a Attribute (line 1284):
        
        # Call to BboxImage(...): (line 1284)
        # Processing the call keyword arguments (line 1284)
        # Getting the type of 'self' (line 1284)
        self_98936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 36), 'self', False)
        # Obtaining the member 'get_window_extent' of a type (line 1284)
        get_window_extent_98937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 36), self_98936, 'get_window_extent')
        keyword_98938 = get_window_extent_98937
        # Getting the type of 'cmap' (line 1285)
        cmap_98939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 36), 'cmap', False)
        keyword_98940 = cmap_98939
        # Getting the type of 'norm' (line 1286)
        norm_98941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 36), 'norm', False)
        keyword_98942 = norm_98941
        # Getting the type of 'interpolation' (line 1287)
        interpolation_98943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 45), 'interpolation', False)
        keyword_98944 = interpolation_98943
        # Getting the type of 'origin' (line 1288)
        origin_98945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 38), 'origin', False)
        keyword_98946 = origin_98945
        # Getting the type of 'filternorm' (line 1289)
        filternorm_98947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 42), 'filternorm', False)
        keyword_98948 = filternorm_98947
        # Getting the type of 'filterrad' (line 1290)
        filterrad_98949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 41), 'filterrad', False)
        keyword_98950 = filterrad_98949
        # Getting the type of 'resample' (line 1291)
        resample_98951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 40), 'resample', False)
        keyword_98952 = resample_98951
        # Getting the type of 'kwargs' (line 1292)
        kwargs_98953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 33), 'kwargs', False)
        kwargs_98954 = {'origin': keyword_98946, 'kwargs_98953': kwargs_98953, 'resample': keyword_98952, 'norm': keyword_98942, 'cmap': keyword_98940, 'filterrad': keyword_98950, 'bbox': keyword_98938, 'filternorm': keyword_98948, 'interpolation': keyword_98944}
        # Getting the type of 'BboxImage' (line 1284)
        BboxImage_98935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 21), 'BboxImage', False)
        # Calling BboxImage(args, kwargs) (line 1284)
        BboxImage_call_result_98955 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 21), BboxImage_98935, *[], **kwargs_98954)
        
        # Getting the type of 'self' (line 1284)
        self_98956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 8), 'self')
        # Setting the type of the member 'image' of a type (line 1284)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 8), self_98956, 'image', BboxImage_call_result_98955)
        
        # Assigning a List to a Attribute (line 1295):
        
        # Assigning a List to a Attribute (line 1295):
        
        # Obtaining an instance of the builtin type 'list' (line 1295)
        list_98957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1295, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1295)
        # Adding element type (line 1295)
        # Getting the type of 'self' (line 1295)
        self_98958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 26), 'self')
        # Obtaining the member 'image' of a type (line 1295)
        image_98959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 26), self_98958, 'image')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1295, 25), list_98957, image_98959)
        
        # Getting the type of 'self' (line 1295)
        self_98960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 8), 'self')
        # Setting the type of the member '_children' of a type (line 1295)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 8), self_98960, '_children', list_98957)
        
        # Call to set_zoom(...): (line 1297)
        # Processing the call arguments (line 1297)
        # Getting the type of 'zoom' (line 1297)
        zoom_98963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 22), 'zoom', False)
        # Processing the call keyword arguments (line 1297)
        kwargs_98964 = {}
        # Getting the type of 'self' (line 1297)
        self_98961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 8), 'self', False)
        # Obtaining the member 'set_zoom' of a type (line 1297)
        set_zoom_98962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 8), self_98961, 'set_zoom')
        # Calling set_zoom(args, kwargs) (line 1297)
        set_zoom_call_result_98965 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 8), set_zoom_98962, *[zoom_98963], **kwargs_98964)
        
        
        # Call to set_data(...): (line 1298)
        # Processing the call arguments (line 1298)
        # Getting the type of 'arr' (line 1298)
        arr_98968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 22), 'arr', False)
        # Processing the call keyword arguments (line 1298)
        kwargs_98969 = {}
        # Getting the type of 'self' (line 1298)
        self_98966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 8), 'self', False)
        # Obtaining the member 'set_data' of a type (line 1298)
        set_data_98967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 8), self_98966, 'set_data')
        # Calling set_data(args, kwargs) (line 1298)
        set_data_call_result_98970 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 8), set_data_98967, *[arr_98968], **kwargs_98969)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_data'
        module_type_store = module_type_store.open_function_context('set_data', 1300, 4, False)
        # Assigning a type to the variable 'self' (line 1301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1301, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetImage.set_data.__dict__.__setitem__('stypy_localization', localization)
        OffsetImage.set_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetImage.set_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetImage.set_data.__dict__.__setitem__('stypy_function_name', 'OffsetImage.set_data')
        OffsetImage.set_data.__dict__.__setitem__('stypy_param_names_list', ['arr'])
        OffsetImage.set_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetImage.set_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetImage.set_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetImage.set_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetImage.set_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetImage.set_data.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetImage.set_data', ['arr'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_data', localization, ['arr'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_data(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1301):
        
        # Assigning a Call to a Attribute (line 1301):
        
        # Call to asarray(...): (line 1301)
        # Processing the call arguments (line 1301)
        # Getting the type of 'arr' (line 1301)
        arr_98973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 32), 'arr', False)
        # Processing the call keyword arguments (line 1301)
        kwargs_98974 = {}
        # Getting the type of 'np' (line 1301)
        np_98971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 21), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1301)
        asarray_98972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 21), np_98971, 'asarray')
        # Calling asarray(args, kwargs) (line 1301)
        asarray_call_result_98975 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 21), asarray_98972, *[arr_98973], **kwargs_98974)
        
        # Getting the type of 'self' (line 1301)
        self_98976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 8), 'self')
        # Setting the type of the member '_data' of a type (line 1301)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 8), self_98976, '_data', asarray_call_result_98975)
        
        # Call to set_data(...): (line 1302)
        # Processing the call arguments (line 1302)
        # Getting the type of 'self' (line 1302)
        self_98980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 28), 'self', False)
        # Obtaining the member '_data' of a type (line 1302)
        _data_98981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 28), self_98980, '_data')
        # Processing the call keyword arguments (line 1302)
        kwargs_98982 = {}
        # Getting the type of 'self' (line 1302)
        self_98977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 8), 'self', False)
        # Obtaining the member 'image' of a type (line 1302)
        image_98978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 8), self_98977, 'image')
        # Obtaining the member 'set_data' of a type (line 1302)
        set_data_98979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 8), image_98978, 'set_data')
        # Calling set_data(args, kwargs) (line 1302)
        set_data_call_result_98983 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 8), set_data_98979, *[_data_98981], **kwargs_98982)
        
        
        # Assigning a Name to a Attribute (line 1303):
        
        # Assigning a Name to a Attribute (line 1303):
        # Getting the type of 'True' (line 1303)
        True_98984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 21), 'True')
        # Getting the type of 'self' (line 1303)
        self_98985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1303)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1303, 8), self_98985, 'stale', True_98984)
        
        # ################# End of 'set_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_data' in the type store
        # Getting the type of 'stypy_return_type' (line 1300)
        stypy_return_type_98986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98986)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_data'
        return stypy_return_type_98986


    @norecursion
    def get_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_data'
        module_type_store = module_type_store.open_function_context('get_data', 1305, 4, False)
        # Assigning a type to the variable 'self' (line 1306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1306, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetImage.get_data.__dict__.__setitem__('stypy_localization', localization)
        OffsetImage.get_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetImage.get_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetImage.get_data.__dict__.__setitem__('stypy_function_name', 'OffsetImage.get_data')
        OffsetImage.get_data.__dict__.__setitem__('stypy_param_names_list', [])
        OffsetImage.get_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetImage.get_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetImage.get_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetImage.get_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetImage.get_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetImage.get_data.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetImage.get_data', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_data', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_data(...)' code ##################

        # Getting the type of 'self' (line 1306)
        self_98987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 15), 'self')
        # Obtaining the member '_data' of a type (line 1306)
        _data_98988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1306, 15), self_98987, '_data')
        # Assigning a type to the variable 'stypy_return_type' (line 1306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1306, 8), 'stypy_return_type', _data_98988)
        
        # ################# End of 'get_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_data' in the type store
        # Getting the type of 'stypy_return_type' (line 1305)
        stypy_return_type_98989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98989)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_data'
        return stypy_return_type_98989


    @norecursion
    def set_zoom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_zoom'
        module_type_store = module_type_store.open_function_context('set_zoom', 1308, 4, False)
        # Assigning a type to the variable 'self' (line 1309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1309, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetImage.set_zoom.__dict__.__setitem__('stypy_localization', localization)
        OffsetImage.set_zoom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetImage.set_zoom.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetImage.set_zoom.__dict__.__setitem__('stypy_function_name', 'OffsetImage.set_zoom')
        OffsetImage.set_zoom.__dict__.__setitem__('stypy_param_names_list', ['zoom'])
        OffsetImage.set_zoom.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetImage.set_zoom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetImage.set_zoom.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetImage.set_zoom.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetImage.set_zoom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetImage.set_zoom.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetImage.set_zoom', ['zoom'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_zoom', localization, ['zoom'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_zoom(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1309):
        
        # Assigning a Name to a Attribute (line 1309):
        # Getting the type of 'zoom' (line 1309)
        zoom_98990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 21), 'zoom')
        # Getting the type of 'self' (line 1309)
        self_98991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 8), 'self')
        # Setting the type of the member '_zoom' of a type (line 1309)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1309, 8), self_98991, '_zoom', zoom_98990)
        
        # Assigning a Name to a Attribute (line 1310):
        
        # Assigning a Name to a Attribute (line 1310):
        # Getting the type of 'True' (line 1310)
        True_98992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 21), 'True')
        # Getting the type of 'self' (line 1310)
        self_98993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1310)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1310, 8), self_98993, 'stale', True_98992)
        
        # ################# End of 'set_zoom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_zoom' in the type store
        # Getting the type of 'stypy_return_type' (line 1308)
        stypy_return_type_98994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98994)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_zoom'
        return stypy_return_type_98994


    @norecursion
    def get_zoom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_zoom'
        module_type_store = module_type_store.open_function_context('get_zoom', 1312, 4, False)
        # Assigning a type to the variable 'self' (line 1313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1313, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetImage.get_zoom.__dict__.__setitem__('stypy_localization', localization)
        OffsetImage.get_zoom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetImage.get_zoom.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetImage.get_zoom.__dict__.__setitem__('stypy_function_name', 'OffsetImage.get_zoom')
        OffsetImage.get_zoom.__dict__.__setitem__('stypy_param_names_list', [])
        OffsetImage.get_zoom.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetImage.get_zoom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetImage.get_zoom.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetImage.get_zoom.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetImage.get_zoom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetImage.get_zoom.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetImage.get_zoom', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_zoom', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_zoom(...)' code ##################

        # Getting the type of 'self' (line 1313)
        self_98995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 15), 'self')
        # Obtaining the member '_zoom' of a type (line 1313)
        _zoom_98996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 15), self_98995, '_zoom')
        # Assigning a type to the variable 'stypy_return_type' (line 1313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1313, 8), 'stypy_return_type', _zoom_98996)
        
        # ################# End of 'get_zoom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_zoom' in the type store
        # Getting the type of 'stypy_return_type' (line 1312)
        stypy_return_type_98997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98997)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_zoom'
        return stypy_return_type_98997


    @norecursion
    def get_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_offset'
        module_type_store = module_type_store.open_function_context('get_offset', 1330, 4, False)
        # Assigning a type to the variable 'self' (line 1331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1331, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetImage.get_offset.__dict__.__setitem__('stypy_localization', localization)
        OffsetImage.get_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetImage.get_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetImage.get_offset.__dict__.__setitem__('stypy_function_name', 'OffsetImage.get_offset')
        OffsetImage.get_offset.__dict__.__setitem__('stypy_param_names_list', [])
        OffsetImage.get_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetImage.get_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetImage.get_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetImage.get_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetImage.get_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetImage.get_offset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetImage.get_offset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_offset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_offset(...)' code ##################

        unicode_98998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1333, (-1)), 'unicode', u'\n        return offset of the container.\n        ')
        # Getting the type of 'self' (line 1334)
        self_98999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 15), 'self')
        # Obtaining the member '_offset' of a type (line 1334)
        _offset_99000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 15), self_98999, '_offset')
        # Assigning a type to the variable 'stypy_return_type' (line 1334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1334, 8), 'stypy_return_type', _offset_99000)
        
        # ################# End of 'get_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 1330)
        stypy_return_type_99001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99001)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_offset'
        return stypy_return_type_99001


    @norecursion
    def get_children(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_children'
        module_type_store = module_type_store.open_function_context('get_children', 1336, 4, False)
        # Assigning a type to the variable 'self' (line 1337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetImage.get_children.__dict__.__setitem__('stypy_localization', localization)
        OffsetImage.get_children.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetImage.get_children.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetImage.get_children.__dict__.__setitem__('stypy_function_name', 'OffsetImage.get_children')
        OffsetImage.get_children.__dict__.__setitem__('stypy_param_names_list', [])
        OffsetImage.get_children.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetImage.get_children.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetImage.get_children.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetImage.get_children.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetImage.get_children.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetImage.get_children.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetImage.get_children', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_children', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_children(...)' code ##################

        
        # Obtaining an instance of the builtin type 'list' (line 1337)
        list_99002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1337, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1337)
        # Adding element type (line 1337)
        # Getting the type of 'self' (line 1337)
        self_99003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 16), 'self')
        # Obtaining the member 'image' of a type (line 1337)
        image_99004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1337, 16), self_99003, 'image')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1337, 15), list_99002, image_99004)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 8), 'stypy_return_type', list_99002)
        
        # ################# End of 'get_children(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_children' in the type store
        # Getting the type of 'stypy_return_type' (line 1336)
        stypy_return_type_99005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99005)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_children'
        return stypy_return_type_99005


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 1339, 4, False)
        # Assigning a type to the variable 'self' (line 1340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetImage.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        OffsetImage.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetImage.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetImage.get_window_extent.__dict__.__setitem__('stypy_function_name', 'OffsetImage.get_window_extent')
        OffsetImage.get_window_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        OffsetImage.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetImage.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetImage.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetImage.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetImage.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetImage.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetImage.get_window_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        unicode_99006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1342, (-1)), 'unicode', u'\n        get the bounding box in display space.\n        ')
        
        # Assigning a Call to a Tuple (line 1343):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent(...): (line 1343)
        # Processing the call arguments (line 1343)
        # Getting the type of 'renderer' (line 1343)
        renderer_99009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 39), 'renderer', False)
        # Processing the call keyword arguments (line 1343)
        kwargs_99010 = {}
        # Getting the type of 'self' (line 1343)
        self_99007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 23), 'self', False)
        # Obtaining the member 'get_extent' of a type (line 1343)
        get_extent_99008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 23), self_99007, 'get_extent')
        # Calling get_extent(args, kwargs) (line 1343)
        get_extent_call_result_99011 = invoke(stypy.reporting.localization.Localization(__file__, 1343, 23), get_extent_99008, *[renderer_99009], **kwargs_99010)
        
        # Assigning a type to the variable 'call_assignment_95798' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'call_assignment_95798', get_extent_call_result_99011)
        
        # Assigning a Call to a Name (line 1343):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_99014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, 8), 'int')
        # Processing the call keyword arguments
        kwargs_99015 = {}
        # Getting the type of 'call_assignment_95798' (line 1343)
        call_assignment_95798_99012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'call_assignment_95798', False)
        # Obtaining the member '__getitem__' of a type (line 1343)
        getitem___99013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 8), call_assignment_95798_99012, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_99016 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99013, *[int_99014], **kwargs_99015)
        
        # Assigning a type to the variable 'call_assignment_95799' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'call_assignment_95799', getitem___call_result_99016)
        
        # Assigning a Name to a Name (line 1343):
        # Getting the type of 'call_assignment_95799' (line 1343)
        call_assignment_95799_99017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'call_assignment_95799')
        # Assigning a type to the variable 'w' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'w', call_assignment_95799_99017)
        
        # Assigning a Call to a Name (line 1343):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_99020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, 8), 'int')
        # Processing the call keyword arguments
        kwargs_99021 = {}
        # Getting the type of 'call_assignment_95798' (line 1343)
        call_assignment_95798_99018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'call_assignment_95798', False)
        # Obtaining the member '__getitem__' of a type (line 1343)
        getitem___99019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 8), call_assignment_95798_99018, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_99022 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99019, *[int_99020], **kwargs_99021)
        
        # Assigning a type to the variable 'call_assignment_95800' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'call_assignment_95800', getitem___call_result_99022)
        
        # Assigning a Name to a Name (line 1343):
        # Getting the type of 'call_assignment_95800' (line 1343)
        call_assignment_95800_99023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'call_assignment_95800')
        # Assigning a type to the variable 'h' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 11), 'h', call_assignment_95800_99023)
        
        # Assigning a Call to a Name (line 1343):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_99026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, 8), 'int')
        # Processing the call keyword arguments
        kwargs_99027 = {}
        # Getting the type of 'call_assignment_95798' (line 1343)
        call_assignment_95798_99024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'call_assignment_95798', False)
        # Obtaining the member '__getitem__' of a type (line 1343)
        getitem___99025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 8), call_assignment_95798_99024, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_99028 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99025, *[int_99026], **kwargs_99027)
        
        # Assigning a type to the variable 'call_assignment_95801' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'call_assignment_95801', getitem___call_result_99028)
        
        # Assigning a Name to a Name (line 1343):
        # Getting the type of 'call_assignment_95801' (line 1343)
        call_assignment_95801_99029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'call_assignment_95801')
        # Assigning a type to the variable 'xd' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 14), 'xd', call_assignment_95801_99029)
        
        # Assigning a Call to a Name (line 1343):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_99032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, 8), 'int')
        # Processing the call keyword arguments
        kwargs_99033 = {}
        # Getting the type of 'call_assignment_95798' (line 1343)
        call_assignment_95798_99030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'call_assignment_95798', False)
        # Obtaining the member '__getitem__' of a type (line 1343)
        getitem___99031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 8), call_assignment_95798_99030, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_99034 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99031, *[int_99032], **kwargs_99033)
        
        # Assigning a type to the variable 'call_assignment_95802' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'call_assignment_95802', getitem___call_result_99034)
        
        # Assigning a Name to a Name (line 1343):
        # Getting the type of 'call_assignment_95802' (line 1343)
        call_assignment_95802_99035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'call_assignment_95802')
        # Assigning a type to the variable 'yd' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 18), 'yd', call_assignment_95802_99035)
        
        # Assigning a Call to a Tuple (line 1344):
        
        # Assigning a Call to a Name:
        
        # Call to get_offset(...): (line 1344)
        # Processing the call keyword arguments (line 1344)
        kwargs_99038 = {}
        # Getting the type of 'self' (line 1344)
        self_99036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 17), 'self', False)
        # Obtaining the member 'get_offset' of a type (line 1344)
        get_offset_99037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1344, 17), self_99036, 'get_offset')
        # Calling get_offset(args, kwargs) (line 1344)
        get_offset_call_result_99039 = invoke(stypy.reporting.localization.Localization(__file__, 1344, 17), get_offset_99037, *[], **kwargs_99038)
        
        # Assigning a type to the variable 'call_assignment_95803' (line 1344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1344, 8), 'call_assignment_95803', get_offset_call_result_99039)
        
        # Assigning a Call to a Name (line 1344):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_99042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1344, 8), 'int')
        # Processing the call keyword arguments
        kwargs_99043 = {}
        # Getting the type of 'call_assignment_95803' (line 1344)
        call_assignment_95803_99040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 8), 'call_assignment_95803', False)
        # Obtaining the member '__getitem__' of a type (line 1344)
        getitem___99041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1344, 8), call_assignment_95803_99040, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_99044 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99041, *[int_99042], **kwargs_99043)
        
        # Assigning a type to the variable 'call_assignment_95804' (line 1344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1344, 8), 'call_assignment_95804', getitem___call_result_99044)
        
        # Assigning a Name to a Name (line 1344):
        # Getting the type of 'call_assignment_95804' (line 1344)
        call_assignment_95804_99045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 8), 'call_assignment_95804')
        # Assigning a type to the variable 'ox' (line 1344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1344, 8), 'ox', call_assignment_95804_99045)
        
        # Assigning a Call to a Name (line 1344):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_99048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1344, 8), 'int')
        # Processing the call keyword arguments
        kwargs_99049 = {}
        # Getting the type of 'call_assignment_95803' (line 1344)
        call_assignment_95803_99046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 8), 'call_assignment_95803', False)
        # Obtaining the member '__getitem__' of a type (line 1344)
        getitem___99047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1344, 8), call_assignment_95803_99046, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_99050 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99047, *[int_99048], **kwargs_99049)
        
        # Assigning a type to the variable 'call_assignment_95805' (line 1344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1344, 8), 'call_assignment_95805', getitem___call_result_99050)
        
        # Assigning a Name to a Name (line 1344):
        # Getting the type of 'call_assignment_95805' (line 1344)
        call_assignment_95805_99051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 8), 'call_assignment_95805')
        # Assigning a type to the variable 'oy' (line 1344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1344, 12), 'oy', call_assignment_95805_99051)
        
        # Call to from_bounds(...): (line 1345)
        # Processing the call arguments (line 1345)
        # Getting the type of 'ox' (line 1345)
        ox_99055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 44), 'ox', False)
        # Getting the type of 'xd' (line 1345)
        xd_99056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 49), 'xd', False)
        # Applying the binary operator '-' (line 1345)
        result_sub_99057 = python_operator(stypy.reporting.localization.Localization(__file__, 1345, 44), '-', ox_99055, xd_99056)
        
        # Getting the type of 'oy' (line 1345)
        oy_99058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 53), 'oy', False)
        # Getting the type of 'yd' (line 1345)
        yd_99059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 58), 'yd', False)
        # Applying the binary operator '-' (line 1345)
        result_sub_99060 = python_operator(stypy.reporting.localization.Localization(__file__, 1345, 53), '-', oy_99058, yd_99059)
        
        # Getting the type of 'w' (line 1345)
        w_99061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 62), 'w', False)
        # Getting the type of 'h' (line 1345)
        h_99062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 65), 'h', False)
        # Processing the call keyword arguments (line 1345)
        kwargs_99063 = {}
        # Getting the type of 'mtransforms' (line 1345)
        mtransforms_99052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 15), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 1345)
        Bbox_99053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1345, 15), mtransforms_99052, 'Bbox')
        # Obtaining the member 'from_bounds' of a type (line 1345)
        from_bounds_99054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1345, 15), Bbox_99053, 'from_bounds')
        # Calling from_bounds(args, kwargs) (line 1345)
        from_bounds_call_result_99064 = invoke(stypy.reporting.localization.Localization(__file__, 1345, 15), from_bounds_99054, *[result_sub_99057, result_sub_99060, w_99061, h_99062], **kwargs_99063)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1345)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1345, 8), 'stypy_return_type', from_bounds_call_result_99064)
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 1339)
        stypy_return_type_99065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99065)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_99065


    @norecursion
    def get_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_extent'
        module_type_store = module_type_store.open_function_context('get_extent', 1347, 4, False)
        # Assigning a type to the variable 'self' (line 1348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetImage.get_extent.__dict__.__setitem__('stypy_localization', localization)
        OffsetImage.get_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetImage.get_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetImage.get_extent.__dict__.__setitem__('stypy_function_name', 'OffsetImage.get_extent')
        OffsetImage.get_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        OffsetImage.get_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetImage.get_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetImage.get_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetImage.get_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetImage.get_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetImage.get_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetImage.get_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_extent(...)' code ##################

        
        # Getting the type of 'self' (line 1348)
        self_99066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 11), 'self')
        # Obtaining the member '_dpi_cor' of a type (line 1348)
        _dpi_cor_99067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 11), self_99066, '_dpi_cor')
        # Testing the type of an if condition (line 1348)
        if_condition_99068 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1348, 8), _dpi_cor_99067)
        # Assigning a type to the variable 'if_condition_99068' (line 1348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 8), 'if_condition_99068', if_condition_99068)
        # SSA begins for if statement (line 1348)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1349):
        
        # Assigning a Call to a Name (line 1349):
        
        # Call to points_to_pixels(...): (line 1349)
        # Processing the call arguments (line 1349)
        float_99071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1349, 48), 'float')
        # Processing the call keyword arguments (line 1349)
        kwargs_99072 = {}
        # Getting the type of 'renderer' (line 1349)
        renderer_99069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 22), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 1349)
        points_to_pixels_99070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1349, 22), renderer_99069, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 1349)
        points_to_pixels_call_result_99073 = invoke(stypy.reporting.localization.Localization(__file__, 1349, 22), points_to_pixels_99070, *[float_99071], **kwargs_99072)
        
        # Assigning a type to the variable 'dpi_cor' (line 1349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1349, 12), 'dpi_cor', points_to_pixels_call_result_99073)
        # SSA branch for the else part of an if statement (line 1348)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 1351):
        
        # Assigning a Num to a Name (line 1351):
        float_99074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1351, 22), 'float')
        # Assigning a type to the variable 'dpi_cor' (line 1351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 12), 'dpi_cor', float_99074)
        # SSA join for if statement (line 1348)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1353):
        
        # Assigning a Call to a Name (line 1353):
        
        # Call to get_zoom(...): (line 1353)
        # Processing the call keyword arguments (line 1353)
        kwargs_99077 = {}
        # Getting the type of 'self' (line 1353)
        self_99075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 15), 'self', False)
        # Obtaining the member 'get_zoom' of a type (line 1353)
        get_zoom_99076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1353, 15), self_99075, 'get_zoom')
        # Calling get_zoom(args, kwargs) (line 1353)
        get_zoom_call_result_99078 = invoke(stypy.reporting.localization.Localization(__file__, 1353, 15), get_zoom_99076, *[], **kwargs_99077)
        
        # Assigning a type to the variable 'zoom' (line 1353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1353, 8), 'zoom', get_zoom_call_result_99078)
        
        # Assigning a Call to a Name (line 1354):
        
        # Assigning a Call to a Name (line 1354):
        
        # Call to get_data(...): (line 1354)
        # Processing the call keyword arguments (line 1354)
        kwargs_99081 = {}
        # Getting the type of 'self' (line 1354)
        self_99079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 15), 'self', False)
        # Obtaining the member 'get_data' of a type (line 1354)
        get_data_99080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1354, 15), self_99079, 'get_data')
        # Calling get_data(args, kwargs) (line 1354)
        get_data_call_result_99082 = invoke(stypy.reporting.localization.Localization(__file__, 1354, 15), get_data_99080, *[], **kwargs_99081)
        
        # Assigning a type to the variable 'data' (line 1354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'data', get_data_call_result_99082)
        
        # Assigning a Subscript to a Tuple (line 1355):
        
        # Assigning a Subscript to a Name (line 1355):
        
        # Obtaining the type of the subscript
        int_99083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1355, 8), 'int')
        
        # Obtaining the type of the subscript
        int_99084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1355, 29), 'int')
        slice_99085 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1355, 17), None, int_99084, None)
        # Getting the type of 'data' (line 1355)
        data_99086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 17), 'data')
        # Obtaining the member 'shape' of a type (line 1355)
        shape_99087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 17), data_99086, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1355)
        getitem___99088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 17), shape_99087, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1355)
        subscript_call_result_99089 = invoke(stypy.reporting.localization.Localization(__file__, 1355, 17), getitem___99088, slice_99085)
        
        # Obtaining the member '__getitem__' of a type (line 1355)
        getitem___99090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 8), subscript_call_result_99089, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1355)
        subscript_call_result_99091 = invoke(stypy.reporting.localization.Localization(__file__, 1355, 8), getitem___99090, int_99083)
        
        # Assigning a type to the variable 'tuple_var_assignment_95806' (line 1355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1355, 8), 'tuple_var_assignment_95806', subscript_call_result_99091)
        
        # Assigning a Subscript to a Name (line 1355):
        
        # Obtaining the type of the subscript
        int_99092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1355, 8), 'int')
        
        # Obtaining the type of the subscript
        int_99093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1355, 29), 'int')
        slice_99094 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1355, 17), None, int_99093, None)
        # Getting the type of 'data' (line 1355)
        data_99095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 17), 'data')
        # Obtaining the member 'shape' of a type (line 1355)
        shape_99096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 17), data_99095, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1355)
        getitem___99097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 17), shape_99096, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1355)
        subscript_call_result_99098 = invoke(stypy.reporting.localization.Localization(__file__, 1355, 17), getitem___99097, slice_99094)
        
        # Obtaining the member '__getitem__' of a type (line 1355)
        getitem___99099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 8), subscript_call_result_99098, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1355)
        subscript_call_result_99100 = invoke(stypy.reporting.localization.Localization(__file__, 1355, 8), getitem___99099, int_99092)
        
        # Assigning a type to the variable 'tuple_var_assignment_95807' (line 1355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1355, 8), 'tuple_var_assignment_95807', subscript_call_result_99100)
        
        # Assigning a Name to a Name (line 1355):
        # Getting the type of 'tuple_var_assignment_95806' (line 1355)
        tuple_var_assignment_95806_99101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 8), 'tuple_var_assignment_95806')
        # Assigning a type to the variable 'ny' (line 1355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1355, 8), 'ny', tuple_var_assignment_95806_99101)
        
        # Assigning a Name to a Name (line 1355):
        # Getting the type of 'tuple_var_assignment_95807' (line 1355)
        tuple_var_assignment_95807_99102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 8), 'tuple_var_assignment_95807')
        # Assigning a type to the variable 'nx' (line 1355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1355, 12), 'nx', tuple_var_assignment_95807_99102)
        
        # Assigning a Tuple to a Tuple (line 1356):
        
        # Assigning a BinOp to a Name (line 1356):
        # Getting the type of 'dpi_cor' (line 1356)
        dpi_cor_99103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 15), 'dpi_cor')
        # Getting the type of 'nx' (line 1356)
        nx_99104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 25), 'nx')
        # Applying the binary operator '*' (line 1356)
        result_mul_99105 = python_operator(stypy.reporting.localization.Localization(__file__, 1356, 15), '*', dpi_cor_99103, nx_99104)
        
        # Getting the type of 'zoom' (line 1356)
        zoom_99106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 30), 'zoom')
        # Applying the binary operator '*' (line 1356)
        result_mul_99107 = python_operator(stypy.reporting.localization.Localization(__file__, 1356, 28), '*', result_mul_99105, zoom_99106)
        
        # Assigning a type to the variable 'tuple_assignment_95808' (line 1356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1356, 8), 'tuple_assignment_95808', result_mul_99107)
        
        # Assigning a BinOp to a Name (line 1356):
        # Getting the type of 'dpi_cor' (line 1356)
        dpi_cor_99108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 36), 'dpi_cor')
        # Getting the type of 'ny' (line 1356)
        ny_99109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 46), 'ny')
        # Applying the binary operator '*' (line 1356)
        result_mul_99110 = python_operator(stypy.reporting.localization.Localization(__file__, 1356, 36), '*', dpi_cor_99108, ny_99109)
        
        # Getting the type of 'zoom' (line 1356)
        zoom_99111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 51), 'zoom')
        # Applying the binary operator '*' (line 1356)
        result_mul_99112 = python_operator(stypy.reporting.localization.Localization(__file__, 1356, 49), '*', result_mul_99110, zoom_99111)
        
        # Assigning a type to the variable 'tuple_assignment_95809' (line 1356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1356, 8), 'tuple_assignment_95809', result_mul_99112)
        
        # Assigning a Name to a Name (line 1356):
        # Getting the type of 'tuple_assignment_95808' (line 1356)
        tuple_assignment_95808_99113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 8), 'tuple_assignment_95808')
        # Assigning a type to the variable 'w' (line 1356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1356, 8), 'w', tuple_assignment_95808_99113)
        
        # Assigning a Name to a Name (line 1356):
        # Getting the type of 'tuple_assignment_95809' (line 1356)
        tuple_assignment_95809_99114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 8), 'tuple_assignment_95809')
        # Assigning a type to the variable 'h' (line 1356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1356, 11), 'h', tuple_assignment_95809_99114)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1358)
        tuple_99115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1358, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1358)
        # Adding element type (line 1358)
        # Getting the type of 'w' (line 1358)
        w_99116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 15), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1358, 15), tuple_99115, w_99116)
        # Adding element type (line 1358)
        # Getting the type of 'h' (line 1358)
        h_99117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 18), 'h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1358, 15), tuple_99115, h_99117)
        # Adding element type (line 1358)
        int_99118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1358, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1358, 15), tuple_99115, int_99118)
        # Adding element type (line 1358)
        int_99119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1358, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1358, 15), tuple_99115, int_99119)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1358)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1358, 8), 'stypy_return_type', tuple_99115)
        
        # ################# End of 'get_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 1347)
        stypy_return_type_99120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99120)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_extent'
        return stypy_return_type_99120


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 1360, 4, False)
        # Assigning a type to the variable 'self' (line 1361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OffsetImage.draw.__dict__.__setitem__('stypy_localization', localization)
        OffsetImage.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OffsetImage.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        OffsetImage.draw.__dict__.__setitem__('stypy_function_name', 'OffsetImage.draw')
        OffsetImage.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        OffsetImage.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        OffsetImage.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OffsetImage.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        OffsetImage.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        OffsetImage.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OffsetImage.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OffsetImage.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_99121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1363, (-1)), 'unicode', u'\n        Draw the children\n        ')
        
        # Call to draw(...): (line 1364)
        # Processing the call arguments (line 1364)
        # Getting the type of 'renderer' (line 1364)
        renderer_99125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 24), 'renderer', False)
        # Processing the call keyword arguments (line 1364)
        kwargs_99126 = {}
        # Getting the type of 'self' (line 1364)
        self_99122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 8), 'self', False)
        # Obtaining the member 'image' of a type (line 1364)
        image_99123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1364, 8), self_99122, 'image')
        # Obtaining the member 'draw' of a type (line 1364)
        draw_99124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1364, 8), image_99123, 'draw')
        # Calling draw(args, kwargs) (line 1364)
        draw_call_result_99127 = invoke(stypy.reporting.localization.Localization(__file__, 1364, 8), draw_99124, *[renderer_99125], **kwargs_99126)
        
        
        # Assigning a Name to a Attribute (line 1366):
        
        # Assigning a Name to a Attribute (line 1366):
        # Getting the type of 'False' (line 1366)
        False_99128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 21), 'False')
        # Getting the type of 'self' (line 1366)
        self_99129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1366)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 8), self_99129, 'stale', False_99128)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1360)
        stypy_return_type_99130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99130)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_99130


# Assigning a type to the variable 'OffsetImage' (line 1267)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1267, 0), 'OffsetImage', OffsetImage)
# Declaration of the 'AnnotationBbox' class
# Getting the type of 'martist' (line 1369)
martist_99131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 21), 'martist')
# Obtaining the member 'Artist' of a type (line 1369)
Artist_99132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1369, 21), martist_99131, 'Artist')
# Getting the type of '_AnnotationBase' (line 1369)
_AnnotationBase_99133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 37), '_AnnotationBase')

class AnnotationBbox(Artist_99132, _AnnotationBase_99133, ):
    unicode_99134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1372, (-1)), 'unicode', u'\n    Annotation-like class, but with offsetbox instead of Text.\n    ')
    
    # Assigning a Num to a Name (line 1373):

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1375, 4, False)
        # Assigning a type to the variable 'self' (line 1376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnnotationBbox.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        AnnotationBbox.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnnotationBbox.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnnotationBbox.stypy__str__.__dict__.__setitem__('stypy_function_name', 'AnnotationBbox.stypy__str__')
        AnnotationBbox.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        AnnotationBbox.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnnotationBbox.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnnotationBbox.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnnotationBbox.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnnotationBbox.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnnotationBbox.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnnotationBbox.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_99135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1376, 15), 'unicode', u'AnnotationBbox(%g,%g)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1376)
        tuple_99136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1376, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1376)
        # Adding element type (line 1376)
        
        # Obtaining the type of the subscript
        int_99137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1376, 50), 'int')
        # Getting the type of 'self' (line 1376)
        self_99138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 42), 'self')
        # Obtaining the member 'xy' of a type (line 1376)
        xy_99139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 42), self_99138, 'xy')
        # Obtaining the member '__getitem__' of a type (line 1376)
        getitem___99140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 42), xy_99139, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1376)
        subscript_call_result_99141 = invoke(stypy.reporting.localization.Localization(__file__, 1376, 42), getitem___99140, int_99137)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1376, 42), tuple_99136, subscript_call_result_99141)
        # Adding element type (line 1376)
        
        # Obtaining the type of the subscript
        int_99142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1376, 62), 'int')
        # Getting the type of 'self' (line 1376)
        self_99143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 54), 'self')
        # Obtaining the member 'xy' of a type (line 1376)
        xy_99144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 54), self_99143, 'xy')
        # Obtaining the member '__getitem__' of a type (line 1376)
        getitem___99145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 54), xy_99144, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1376)
        subscript_call_result_99146 = invoke(stypy.reporting.localization.Localization(__file__, 1376, 54), getitem___99145, int_99142)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1376, 42), tuple_99136, subscript_call_result_99146)
        
        # Applying the binary operator '%' (line 1376)
        result_mod_99147 = python_operator(stypy.reporting.localization.Localization(__file__, 1376, 15), '%', unicode_99135, tuple_99136)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 8), 'stypy_return_type', result_mod_99147)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1375)
        stypy_return_type_99148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99148)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_99148


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1380)
        None_99149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 23), 'None')
        unicode_99150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1381, 26), 'unicode', u'data')
        # Getting the type of 'None' (line 1382)
        None_99151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 27), 'None')
        # Getting the type of 'True' (line 1383)
        True_99152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 25), 'True')
        float_99153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1383, 35), 'float')
        # Getting the type of 'None' (line 1384)
        None_99154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 33), 'None')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1385)
        tuple_99155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1385)
        # Adding element type (line 1385)
        float_99156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1385, 32), tuple_99155, float_99156)
        # Adding element type (line 1385)
        float_99157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 37), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1385, 32), tuple_99155, float_99157)
        
        # Getting the type of 'None' (line 1386)
        None_99158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 27), 'None')
        # Getting the type of 'None' (line 1387)
        None_99159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 28), 'None')
        # Getting the type of 'None' (line 1388)
        None_99160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 26), 'None')
        defaults = [None_99149, unicode_99150, None_99151, True_99152, float_99153, None_99154, tuple_99155, None_99158, None_99159, None_99160]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1378, 4, False)
        # Assigning a type to the variable 'self' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnnotationBbox.__init__', ['offsetbox', 'xy', 'xybox', 'xycoords', 'boxcoords', 'frameon', 'pad', 'annotation_clip', 'box_alignment', 'bboxprops', 'arrowprops', 'fontsize'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['offsetbox', 'xy', 'xybox', 'xycoords', 'boxcoords', 'frameon', 'pad', 'annotation_clip', 'box_alignment', 'bboxprops', 'arrowprops', 'fontsize'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_99161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1405, (-1)), 'unicode', u'\n        *offsetbox* : OffsetBox instance\n\n        *xycoords* : same as Annotation but can be a tuple of two\n           strings which are interpreted as x and y coordinates.\n\n        *boxcoords* : similar to textcoords as Annotation but can be a\n           tuple of two strings which are interpreted as x and y\n           coordinates.\n\n        *box_alignment* : a tuple of two floats for a vertical and\n           horizontal alignment of the offset box w.r.t. the *boxcoords*.\n           The lower-left corner is (0.0) and upper-right corner is (1.1).\n\n        other parameters are identical to that of Annotation.\n        ')
        
        # Call to __init__(...): (line 1407)
        # Processing the call arguments (line 1407)
        # Getting the type of 'self' (line 1407)
        self_99165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 32), 'self', False)
        # Processing the call keyword arguments (line 1407)
        # Getting the type of 'kwargs' (line 1407)
        kwargs_99166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 40), 'kwargs', False)
        kwargs_99167 = {'kwargs_99166': kwargs_99166}
        # Getting the type of 'martist' (line 1407)
        martist_99162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 8), 'martist', False)
        # Obtaining the member 'Artist' of a type (line 1407)
        Artist_99163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 8), martist_99162, 'Artist')
        # Obtaining the member '__init__' of a type (line 1407)
        init___99164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 8), Artist_99163, '__init__')
        # Calling __init__(args, kwargs) (line 1407)
        init___call_result_99168 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 8), init___99164, *[self_99165], **kwargs_99167)
        
        
        # Call to __init__(...): (line 1408)
        # Processing the call arguments (line 1408)
        # Getting the type of 'self' (line 1408)
        self_99171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 33), 'self', False)
        # Getting the type of 'xy' (line 1409)
        xy_99172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 33), 'xy', False)
        # Processing the call keyword arguments (line 1408)
        # Getting the type of 'xycoords' (line 1410)
        xycoords_99173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 42), 'xycoords', False)
        keyword_99174 = xycoords_99173
        # Getting the type of 'annotation_clip' (line 1411)
        annotation_clip_99175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 49), 'annotation_clip', False)
        keyword_99176 = annotation_clip_99175
        kwargs_99177 = {'xycoords': keyword_99174, 'annotation_clip': keyword_99176}
        # Getting the type of '_AnnotationBase' (line 1408)
        _AnnotationBase_99169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 8), '_AnnotationBase', False)
        # Obtaining the member '__init__' of a type (line 1408)
        init___99170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 8), _AnnotationBase_99169, '__init__')
        # Calling __init__(args, kwargs) (line 1408)
        init___call_result_99178 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 8), init___99170, *[self_99171, xy_99172], **kwargs_99177)
        
        
        # Assigning a Name to a Attribute (line 1413):
        
        # Assigning a Name to a Attribute (line 1413):
        # Getting the type of 'offsetbox' (line 1413)
        offsetbox_99179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 25), 'offsetbox')
        # Getting the type of 'self' (line 1413)
        self_99180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 8), 'self')
        # Setting the type of the member 'offsetbox' of a type (line 1413)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 8), self_99180, 'offsetbox', offsetbox_99179)
        
        # Assigning a Name to a Attribute (line 1415):
        
        # Assigning a Name to a Attribute (line 1415):
        # Getting the type of 'arrowprops' (line 1415)
        arrowprops_99181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 26), 'arrowprops')
        # Getting the type of 'self' (line 1415)
        self_99182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 8), 'self')
        # Setting the type of the member 'arrowprops' of a type (line 1415)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1415, 8), self_99182, 'arrowprops', arrowprops_99181)
        
        # Call to set_fontsize(...): (line 1417)
        # Processing the call arguments (line 1417)
        # Getting the type of 'fontsize' (line 1417)
        fontsize_99185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 26), 'fontsize', False)
        # Processing the call keyword arguments (line 1417)
        kwargs_99186 = {}
        # Getting the type of 'self' (line 1417)
        self_99183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'self', False)
        # Obtaining the member 'set_fontsize' of a type (line 1417)
        set_fontsize_99184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 8), self_99183, 'set_fontsize')
        # Calling set_fontsize(args, kwargs) (line 1417)
        set_fontsize_call_result_99187 = invoke(stypy.reporting.localization.Localization(__file__, 1417, 8), set_fontsize_99184, *[fontsize_99185], **kwargs_99186)
        
        
        # Type idiom detected: calculating its left and rigth part (line 1419)
        # Getting the type of 'xybox' (line 1419)
        xybox_99188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 11), 'xybox')
        # Getting the type of 'None' (line 1419)
        None_99189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 20), 'None')
        
        (may_be_99190, more_types_in_union_99191) = may_be_none(xybox_99188, None_99189)

        if may_be_99190:

            if more_types_in_union_99191:
                # Runtime conditional SSA (line 1419)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1420):
            
            # Assigning a Name to a Attribute (line 1420):
            # Getting the type of 'xy' (line 1420)
            xy_99192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 25), 'xy')
            # Getting the type of 'self' (line 1420)
            self_99193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 12), 'self')
            # Setting the type of the member 'xybox' of a type (line 1420)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 12), self_99193, 'xybox', xy_99192)

            if more_types_in_union_99191:
                # Runtime conditional SSA for else branch (line 1419)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_99190) or more_types_in_union_99191):
            
            # Assigning a Name to a Attribute (line 1422):
            
            # Assigning a Name to a Attribute (line 1422):
            # Getting the type of 'xybox' (line 1422)
            xybox_99194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 25), 'xybox')
            # Getting the type of 'self' (line 1422)
            self_99195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 12), 'self')
            # Setting the type of the member 'xybox' of a type (line 1422)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 12), self_99195, 'xybox', xybox_99194)

            if (may_be_99190 and more_types_in_union_99191):
                # SSA join for if statement (line 1419)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1424)
        # Getting the type of 'boxcoords' (line 1424)
        boxcoords_99196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 11), 'boxcoords')
        # Getting the type of 'None' (line 1424)
        None_99197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 24), 'None')
        
        (may_be_99198, more_types_in_union_99199) = may_be_none(boxcoords_99196, None_99197)

        if may_be_99198:

            if more_types_in_union_99199:
                # Runtime conditional SSA (line 1424)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1425):
            
            # Assigning a Name to a Attribute (line 1425):
            # Getting the type of 'xycoords' (line 1425)
            xycoords_99200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 29), 'xycoords')
            # Getting the type of 'self' (line 1425)
            self_99201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 12), 'self')
            # Setting the type of the member 'boxcoords' of a type (line 1425)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1425, 12), self_99201, 'boxcoords', xycoords_99200)

            if more_types_in_union_99199:
                # Runtime conditional SSA for else branch (line 1424)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_99198) or more_types_in_union_99199):
            
            # Assigning a Name to a Attribute (line 1427):
            
            # Assigning a Name to a Attribute (line 1427):
            # Getting the type of 'boxcoords' (line 1427)
            boxcoords_99202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 29), 'boxcoords')
            # Getting the type of 'self' (line 1427)
            self_99203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 12), 'self')
            # Setting the type of the member 'boxcoords' of a type (line 1427)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1427, 12), self_99203, 'boxcoords', boxcoords_99202)

            if (may_be_99198 and more_types_in_union_99199):
                # SSA join for if statement (line 1424)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1429)
        # Getting the type of 'arrowprops' (line 1429)
        arrowprops_99204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 8), 'arrowprops')
        # Getting the type of 'None' (line 1429)
        None_99205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 29), 'None')
        
        (may_be_99206, more_types_in_union_99207) = may_not_be_none(arrowprops_99204, None_99205)

        if may_be_99206:

            if more_types_in_union_99207:
                # Runtime conditional SSA (line 1429)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 1430):
            
            # Assigning a Call to a Attribute (line 1430):
            
            # Call to pop(...): (line 1430)
            # Processing the call arguments (line 1430)
            unicode_99211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, 53), 'unicode', u'relpos')
            
            # Obtaining an instance of the builtin type 'tuple' (line 1430)
            tuple_99212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, 64), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1430)
            # Adding element type (line 1430)
            float_99213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, 64), 'float')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1430, 64), tuple_99212, float_99213)
            # Adding element type (line 1430)
            float_99214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, 69), 'float')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1430, 64), tuple_99212, float_99214)
            
            # Processing the call keyword arguments (line 1430)
            kwargs_99215 = {}
            # Getting the type of 'self' (line 1430)
            self_99208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 33), 'self', False)
            # Obtaining the member 'arrowprops' of a type (line 1430)
            arrowprops_99209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1430, 33), self_99208, 'arrowprops')
            # Obtaining the member 'pop' of a type (line 1430)
            pop_99210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1430, 33), arrowprops_99209, 'pop')
            # Calling pop(args, kwargs) (line 1430)
            pop_call_result_99216 = invoke(stypy.reporting.localization.Localization(__file__, 1430, 33), pop_99210, *[unicode_99211, tuple_99212], **kwargs_99215)
            
            # Getting the type of 'self' (line 1430)
            self_99217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 12), 'self')
            # Setting the type of the member '_arrow_relpos' of a type (line 1430)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1430, 12), self_99217, '_arrow_relpos', pop_call_result_99216)
            
            # Assigning a Call to a Attribute (line 1431):
            
            # Assigning a Call to a Attribute (line 1431):
            
            # Call to FancyArrowPatch(...): (line 1431)
            # Processing the call arguments (line 1431)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1431)
            tuple_99219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 48), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1431)
            # Adding element type (line 1431)
            int_99220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 48), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1431, 48), tuple_99219, int_99220)
            # Adding element type (line 1431)
            int_99221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 51), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1431, 48), tuple_99219, int_99221)
            
            
            # Obtaining an instance of the builtin type 'tuple' (line 1431)
            tuple_99222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 56), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1431)
            # Adding element type (line 1431)
            int_99223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 56), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1431, 56), tuple_99222, int_99223)
            # Adding element type (line 1431)
            int_99224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 59), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1431, 56), tuple_99222, int_99224)
            
            # Processing the call keyword arguments (line 1431)
            # Getting the type of 'self' (line 1432)
            self_99225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 49), 'self', False)
            # Obtaining the member 'arrowprops' of a type (line 1432)
            arrowprops_99226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 49), self_99225, 'arrowprops')
            kwargs_99227 = {'arrowprops_99226': arrowprops_99226}
            # Getting the type of 'FancyArrowPatch' (line 1431)
            FancyArrowPatch_99218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 31), 'FancyArrowPatch', False)
            # Calling FancyArrowPatch(args, kwargs) (line 1431)
            FancyArrowPatch_call_result_99228 = invoke(stypy.reporting.localization.Localization(__file__, 1431, 31), FancyArrowPatch_99218, *[tuple_99219, tuple_99222], **kwargs_99227)
            
            # Getting the type of 'self' (line 1431)
            self_99229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 12), 'self')
            # Setting the type of the member 'arrow_patch' of a type (line 1431)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 12), self_99229, 'arrow_patch', FancyArrowPatch_call_result_99228)

            if more_types_in_union_99207:
                # Runtime conditional SSA for else branch (line 1429)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_99206) or more_types_in_union_99207):
            
            # Assigning a Name to a Attribute (line 1434):
            
            # Assigning a Name to a Attribute (line 1434):
            # Getting the type of 'None' (line 1434)
            None_99230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 33), 'None')
            # Getting the type of 'self' (line 1434)
            self_99231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 12), 'self')
            # Setting the type of the member '_arrow_relpos' of a type (line 1434)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 12), self_99231, '_arrow_relpos', None_99230)
            
            # Assigning a Name to a Attribute (line 1435):
            
            # Assigning a Name to a Attribute (line 1435):
            # Getting the type of 'None' (line 1435)
            None_99232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 31), 'None')
            # Getting the type of 'self' (line 1435)
            self_99233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 12), 'self')
            # Setting the type of the member 'arrow_patch' of a type (line 1435)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1435, 12), self_99233, 'arrow_patch', None_99232)

            if (may_be_99206 and more_types_in_union_99207):
                # SSA join for if statement (line 1429)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 1438):
        
        # Assigning a Name to a Attribute (line 1438):
        # Getting the type of 'box_alignment' (line 1438)
        box_alignment_99234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 30), 'box_alignment')
        # Getting the type of 'self' (line 1438)
        self_99235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 8), 'self')
        # Setting the type of the member '_box_alignment' of a type (line 1438)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1438, 8), self_99235, '_box_alignment', box_alignment_99234)
        
        # Assigning a Call to a Attribute (line 1441):
        
        # Assigning a Call to a Attribute (line 1441):
        
        # Call to FancyBboxPatch(...): (line 1441)
        # Processing the call keyword arguments (line 1441)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1442)
        tuple_99237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1442)
        # Adding element type (line 1442)
        float_99238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, 16), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1442, 16), tuple_99237, float_99238)
        # Adding element type (line 1442)
        float_99239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, 21), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1442, 16), tuple_99237, float_99239)
        
        keyword_99240 = tuple_99237
        float_99241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, 33), 'float')
        keyword_99242 = float_99241
        float_99243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, 44), 'float')
        keyword_99244 = float_99243
        unicode_99245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1443, 22), 'unicode', u'w')
        keyword_99246 = unicode_99245
        unicode_99247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1443, 37), 'unicode', u'k')
        keyword_99248 = unicode_99247
        
        # Call to get_size_in_points(...): (line 1444)
        # Processing the call keyword arguments (line 1444)
        kwargs_99252 = {}
        # Getting the type of 'self' (line 1444)
        self_99249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 27), 'self', False)
        # Obtaining the member 'prop' of a type (line 1444)
        prop_99250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 27), self_99249, 'prop')
        # Obtaining the member 'get_size_in_points' of a type (line 1444)
        get_size_in_points_99251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 27), prop_99250, 'get_size_in_points')
        # Calling get_size_in_points(args, kwargs) (line 1444)
        get_size_in_points_call_result_99253 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 27), get_size_in_points_99251, *[], **kwargs_99252)
        
        keyword_99254 = get_size_in_points_call_result_99253
        # Getting the type of 'True' (line 1445)
        True_99255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 17), 'True', False)
        keyword_99256 = True_99255
        kwargs_99257 = {'mutation_scale': keyword_99254, 'edgecolor': keyword_99248, 'facecolor': keyword_99246, 'height': keyword_99244, 'width': keyword_99242, 'xy': keyword_99240, 'snap': keyword_99256}
        # Getting the type of 'FancyBboxPatch' (line 1441)
        FancyBboxPatch_99236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 21), 'FancyBboxPatch', False)
        # Calling FancyBboxPatch(args, kwargs) (line 1441)
        FancyBboxPatch_call_result_99258 = invoke(stypy.reporting.localization.Localization(__file__, 1441, 21), FancyBboxPatch_99236, *[], **kwargs_99257)
        
        # Getting the type of 'self' (line 1441)
        self_99259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 8), 'self')
        # Setting the type of the member 'patch' of a type (line 1441)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1441, 8), self_99259, 'patch', FancyBboxPatch_call_result_99258)
        
        # Call to set_boxstyle(...): (line 1447)
        # Processing the call arguments (line 1447)
        unicode_99263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1447, 32), 'unicode', u'square')
        # Processing the call keyword arguments (line 1447)
        # Getting the type of 'pad' (line 1447)
        pad_99264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 46), 'pad', False)
        keyword_99265 = pad_99264
        kwargs_99266 = {'pad': keyword_99265}
        # Getting the type of 'self' (line 1447)
        self_99260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 8), 'self', False)
        # Obtaining the member 'patch' of a type (line 1447)
        patch_99261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1447, 8), self_99260, 'patch')
        # Obtaining the member 'set_boxstyle' of a type (line 1447)
        set_boxstyle_99262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1447, 8), patch_99261, 'set_boxstyle')
        # Calling set_boxstyle(args, kwargs) (line 1447)
        set_boxstyle_call_result_99267 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 8), set_boxstyle_99262, *[unicode_99263], **kwargs_99266)
        
        
        # Getting the type of 'bboxprops' (line 1448)
        bboxprops_99268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 11), 'bboxprops')
        # Testing the type of an if condition (line 1448)
        if_condition_99269 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1448, 8), bboxprops_99268)
        # Assigning a type to the variable 'if_condition_99269' (line 1448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 8), 'if_condition_99269', if_condition_99269)
        # SSA begins for if statement (line 1448)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set(...): (line 1449)
        # Processing the call keyword arguments (line 1449)
        # Getting the type of 'bboxprops' (line 1449)
        bboxprops_99273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 29), 'bboxprops', False)
        kwargs_99274 = {'bboxprops_99273': bboxprops_99273}
        # Getting the type of 'self' (line 1449)
        self_99270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 12), 'self', False)
        # Obtaining the member 'patch' of a type (line 1449)
        patch_99271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1449, 12), self_99270, 'patch')
        # Obtaining the member 'set' of a type (line 1449)
        set_99272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1449, 12), patch_99271, 'set')
        # Calling set(args, kwargs) (line 1449)
        set_call_result_99275 = invoke(stypy.reporting.localization.Localization(__file__, 1449, 12), set_99272, *[], **kwargs_99274)
        
        # SSA join for if statement (line 1448)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1450):
        
        # Assigning a Name to a Attribute (line 1450):
        # Getting the type of 'frameon' (line 1450)
        frameon_99276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 26), 'frameon')
        # Getting the type of 'self' (line 1450)
        self_99277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 8), 'self')
        # Setting the type of the member '_drawFrame' of a type (line 1450)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1450, 8), self_99277, '_drawFrame', frameon_99276)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def xyann(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'xyann'
        module_type_store = module_type_store.open_function_context('xyann', 1452, 4, False)
        # Assigning a type to the variable 'self' (line 1453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1453, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_localization', localization)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_function_name', 'AnnotationBbox.xyann')
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_param_names_list', [])
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnnotationBbox.xyann', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'xyann', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'xyann(...)' code ##################

        # Getting the type of 'self' (line 1454)
        self_99278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 15), 'self')
        # Obtaining the member 'xybox' of a type (line 1454)
        xybox_99279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1454, 15), self_99278, 'xybox')
        # Assigning a type to the variable 'stypy_return_type' (line 1454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1454, 8), 'stypy_return_type', xybox_99279)
        
        # ################# End of 'xyann(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'xyann' in the type store
        # Getting the type of 'stypy_return_type' (line 1452)
        stypy_return_type_99280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99280)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'xyann'
        return stypy_return_type_99280


    @norecursion
    def xyann(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'xyann'
        module_type_store = module_type_store.open_function_context('xyann', 1456, 4, False)
        # Assigning a type to the variable 'self' (line 1457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1457, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_localization', localization)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_function_name', 'AnnotationBbox.xyann')
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_param_names_list', ['xyann'])
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnnotationBbox.xyann.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnnotationBbox.xyann', ['xyann'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'xyann', localization, ['xyann'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'xyann(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1458):
        
        # Assigning a Name to a Attribute (line 1458):
        # Getting the type of 'xyann' (line 1458)
        xyann_99281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 21), 'xyann')
        # Getting the type of 'self' (line 1458)
        self_99282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 8), 'self')
        # Setting the type of the member 'xybox' of a type (line 1458)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 8), self_99282, 'xybox', xyann_99281)
        
        # Assigning a Name to a Attribute (line 1459):
        
        # Assigning a Name to a Attribute (line 1459):
        # Getting the type of 'True' (line 1459)
        True_99283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 21), 'True')
        # Getting the type of 'self' (line 1459)
        self_99284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1459)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 8), self_99284, 'stale', True_99283)
        
        # ################# End of 'xyann(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'xyann' in the type store
        # Getting the type of 'stypy_return_type' (line 1456)
        stypy_return_type_99285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99285)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'xyann'
        return stypy_return_type_99285


    @norecursion
    def anncoords(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'anncoords'
        module_type_store = module_type_store.open_function_context('anncoords', 1461, 4, False)
        # Assigning a type to the variable 'self' (line 1462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1462, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_localization', localization)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_function_name', 'AnnotationBbox.anncoords')
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_param_names_list', [])
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnnotationBbox.anncoords', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'anncoords', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'anncoords(...)' code ##################

        # Getting the type of 'self' (line 1463)
        self_99286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 15), 'self')
        # Obtaining the member 'boxcoords' of a type (line 1463)
        boxcoords_99287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1463, 15), self_99286, 'boxcoords')
        # Assigning a type to the variable 'stypy_return_type' (line 1463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1463, 8), 'stypy_return_type', boxcoords_99287)
        
        # ################# End of 'anncoords(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'anncoords' in the type store
        # Getting the type of 'stypy_return_type' (line 1461)
        stypy_return_type_99288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99288)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'anncoords'
        return stypy_return_type_99288


    @norecursion
    def anncoords(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'anncoords'
        module_type_store = module_type_store.open_function_context('anncoords', 1465, 4, False)
        # Assigning a type to the variable 'self' (line 1466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1466, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_localization', localization)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_function_name', 'AnnotationBbox.anncoords')
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_param_names_list', ['coords'])
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnnotationBbox.anncoords.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnnotationBbox.anncoords', ['coords'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'anncoords', localization, ['coords'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'anncoords(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1467):
        
        # Assigning a Name to a Attribute (line 1467):
        # Getting the type of 'coords' (line 1467)
        coords_99289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 25), 'coords')
        # Getting the type of 'self' (line 1467)
        self_99290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 8), 'self')
        # Setting the type of the member 'boxcoords' of a type (line 1467)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 8), self_99290, 'boxcoords', coords_99289)
        
        # Assigning a Name to a Attribute (line 1468):
        
        # Assigning a Name to a Attribute (line 1468):
        # Getting the type of 'True' (line 1468)
        True_99291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 21), 'True')
        # Getting the type of 'self' (line 1468)
        self_99292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1468)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 8), self_99292, 'stale', True_99291)
        
        # ################# End of 'anncoords(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'anncoords' in the type store
        # Getting the type of 'stypy_return_type' (line 1465)
        stypy_return_type_99293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99293)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'anncoords'
        return stypy_return_type_99293


    @norecursion
    def contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains'
        module_type_store = module_type_store.open_function_context('contains', 1470, 4, False)
        # Assigning a type to the variable 'self' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnnotationBbox.contains.__dict__.__setitem__('stypy_localization', localization)
        AnnotationBbox.contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnnotationBbox.contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnnotationBbox.contains.__dict__.__setitem__('stypy_function_name', 'AnnotationBbox.contains')
        AnnotationBbox.contains.__dict__.__setitem__('stypy_param_names_list', ['event'])
        AnnotationBbox.contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnnotationBbox.contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnnotationBbox.contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnnotationBbox.contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnnotationBbox.contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnnotationBbox.contains.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnnotationBbox.contains', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains(...)' code ##################

        
        # Assigning a Call to a Tuple (line 1471):
        
        # Assigning a Call to a Name:
        
        # Call to contains(...): (line 1471)
        # Processing the call arguments (line 1471)
        # Getting the type of 'event' (line 1471)
        event_99297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 43), 'event', False)
        # Processing the call keyword arguments (line 1471)
        kwargs_99298 = {}
        # Getting the type of 'self' (line 1471)
        self_99294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 19), 'self', False)
        # Obtaining the member 'offsetbox' of a type (line 1471)
        offsetbox_99295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 19), self_99294, 'offsetbox')
        # Obtaining the member 'contains' of a type (line 1471)
        contains_99296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 19), offsetbox_99295, 'contains')
        # Calling contains(args, kwargs) (line 1471)
        contains_call_result_99299 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 19), contains_99296, *[event_99297], **kwargs_99298)
        
        # Assigning a type to the variable 'call_assignment_95810' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'call_assignment_95810', contains_call_result_99299)
        
        # Assigning a Call to a Name (line 1471):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_99302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 8), 'int')
        # Processing the call keyword arguments
        kwargs_99303 = {}
        # Getting the type of 'call_assignment_95810' (line 1471)
        call_assignment_95810_99300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'call_assignment_95810', False)
        # Obtaining the member '__getitem__' of a type (line 1471)
        getitem___99301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 8), call_assignment_95810_99300, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_99304 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99301, *[int_99302], **kwargs_99303)
        
        # Assigning a type to the variable 'call_assignment_95811' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'call_assignment_95811', getitem___call_result_99304)
        
        # Assigning a Name to a Name (line 1471):
        # Getting the type of 'call_assignment_95811' (line 1471)
        call_assignment_95811_99305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'call_assignment_95811')
        # Assigning a type to the variable 't' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 't', call_assignment_95811_99305)
        
        # Assigning a Call to a Name (line 1471):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_99308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 8), 'int')
        # Processing the call keyword arguments
        kwargs_99309 = {}
        # Getting the type of 'call_assignment_95810' (line 1471)
        call_assignment_95810_99306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'call_assignment_95810', False)
        # Obtaining the member '__getitem__' of a type (line 1471)
        getitem___99307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 8), call_assignment_95810_99306, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_99310 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99307, *[int_99308], **kwargs_99309)
        
        # Assigning a type to the variable 'call_assignment_95812' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'call_assignment_95812', getitem___call_result_99310)
        
        # Assigning a Name to a Name (line 1471):
        # Getting the type of 'call_assignment_95812' (line 1471)
        call_assignment_95812_99311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'call_assignment_95812')
        # Assigning a type to the variable 'tinfo' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 11), 'tinfo', call_assignment_95812_99311)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1478)
        tuple_99312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1478, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1478)
        # Adding element type (line 1478)
        # Getting the type of 't' (line 1478)
        t_99313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 15), 't')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1478, 15), tuple_99312, t_99313)
        # Adding element type (line 1478)
        # Getting the type of 'tinfo' (line 1478)
        tinfo_99314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 18), 'tinfo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1478, 15), tuple_99312, tinfo_99314)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1478, 8), 'stypy_return_type', tuple_99312)
        
        # ################# End of 'contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains' in the type store
        # Getting the type of 'stypy_return_type' (line 1470)
        stypy_return_type_99315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99315)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains'
        return stypy_return_type_99315


    @norecursion
    def get_children(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_children'
        module_type_store = module_type_store.open_function_context('get_children', 1480, 4, False)
        # Assigning a type to the variable 'self' (line 1481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnnotationBbox.get_children.__dict__.__setitem__('stypy_localization', localization)
        AnnotationBbox.get_children.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnnotationBbox.get_children.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnnotationBbox.get_children.__dict__.__setitem__('stypy_function_name', 'AnnotationBbox.get_children')
        AnnotationBbox.get_children.__dict__.__setitem__('stypy_param_names_list', [])
        AnnotationBbox.get_children.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnnotationBbox.get_children.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnnotationBbox.get_children.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnnotationBbox.get_children.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnnotationBbox.get_children.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnnotationBbox.get_children.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnnotationBbox.get_children', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_children', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_children(...)' code ##################

        
        # Assigning a List to a Name (line 1481):
        
        # Assigning a List to a Name (line 1481):
        
        # Obtaining an instance of the builtin type 'list' (line 1481)
        list_99316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1481, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1481)
        # Adding element type (line 1481)
        # Getting the type of 'self' (line 1481)
        self_99317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 20), 'self')
        # Obtaining the member 'offsetbox' of a type (line 1481)
        offsetbox_99318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 20), self_99317, 'offsetbox')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1481, 19), list_99316, offsetbox_99318)
        # Adding element type (line 1481)
        # Getting the type of 'self' (line 1481)
        self_99319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 36), 'self')
        # Obtaining the member 'patch' of a type (line 1481)
        patch_99320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 36), self_99319, 'patch')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1481, 19), list_99316, patch_99320)
        
        # Assigning a type to the variable 'children' (line 1481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 8), 'children', list_99316)
        
        # Getting the type of 'self' (line 1482)
        self_99321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 11), 'self')
        # Obtaining the member 'arrow_patch' of a type (line 1482)
        arrow_patch_99322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1482, 11), self_99321, 'arrow_patch')
        # Testing the type of an if condition (line 1482)
        if_condition_99323 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1482, 8), arrow_patch_99322)
        # Assigning a type to the variable 'if_condition_99323' (line 1482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1482, 8), 'if_condition_99323', if_condition_99323)
        # SSA begins for if statement (line 1482)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1483)
        # Processing the call arguments (line 1483)
        # Getting the type of 'self' (line 1483)
        self_99326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 28), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 1483)
        arrow_patch_99327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1483, 28), self_99326, 'arrow_patch')
        # Processing the call keyword arguments (line 1483)
        kwargs_99328 = {}
        # Getting the type of 'children' (line 1483)
        children_99324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 12), 'children', False)
        # Obtaining the member 'append' of a type (line 1483)
        append_99325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1483, 12), children_99324, 'append')
        # Calling append(args, kwargs) (line 1483)
        append_call_result_99329 = invoke(stypy.reporting.localization.Localization(__file__, 1483, 12), append_99325, *[arrow_patch_99327], **kwargs_99328)
        
        # SSA join for if statement (line 1482)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'children' (line 1484)
        children_99330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 15), 'children')
        # Assigning a type to the variable 'stypy_return_type' (line 1484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1484, 8), 'stypy_return_type', children_99330)
        
        # ################# End of 'get_children(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_children' in the type store
        # Getting the type of 'stypy_return_type' (line 1480)
        stypy_return_type_99331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99331)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_children'
        return stypy_return_type_99331


    @norecursion
    def set_figure(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_figure'
        module_type_store = module_type_store.open_function_context('set_figure', 1486, 4, False)
        # Assigning a type to the variable 'self' (line 1487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1487, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnnotationBbox.set_figure.__dict__.__setitem__('stypy_localization', localization)
        AnnotationBbox.set_figure.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnnotationBbox.set_figure.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnnotationBbox.set_figure.__dict__.__setitem__('stypy_function_name', 'AnnotationBbox.set_figure')
        AnnotationBbox.set_figure.__dict__.__setitem__('stypy_param_names_list', ['fig'])
        AnnotationBbox.set_figure.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnnotationBbox.set_figure.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnnotationBbox.set_figure.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnnotationBbox.set_figure.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnnotationBbox.set_figure.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnnotationBbox.set_figure.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnnotationBbox.set_figure', ['fig'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_figure', localization, ['fig'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_figure(...)' code ##################

        
        
        # Getting the type of 'self' (line 1488)
        self_99332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 11), 'self')
        # Obtaining the member 'arrow_patch' of a type (line 1488)
        arrow_patch_99333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1488, 11), self_99332, 'arrow_patch')
        # Getting the type of 'None' (line 1488)
        None_99334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 35), 'None')
        # Applying the binary operator 'isnot' (line 1488)
        result_is_not_99335 = python_operator(stypy.reporting.localization.Localization(__file__, 1488, 11), 'isnot', arrow_patch_99333, None_99334)
        
        # Testing the type of an if condition (line 1488)
        if_condition_99336 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1488, 8), result_is_not_99335)
        # Assigning a type to the variable 'if_condition_99336' (line 1488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 8), 'if_condition_99336', if_condition_99336)
        # SSA begins for if statement (line 1488)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_figure(...): (line 1489)
        # Processing the call arguments (line 1489)
        # Getting the type of 'fig' (line 1489)
        fig_99340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 40), 'fig', False)
        # Processing the call keyword arguments (line 1489)
        kwargs_99341 = {}
        # Getting the type of 'self' (line 1489)
        self_99337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 12), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 1489)
        arrow_patch_99338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1489, 12), self_99337, 'arrow_patch')
        # Obtaining the member 'set_figure' of a type (line 1489)
        set_figure_99339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1489, 12), arrow_patch_99338, 'set_figure')
        # Calling set_figure(args, kwargs) (line 1489)
        set_figure_call_result_99342 = invoke(stypy.reporting.localization.Localization(__file__, 1489, 12), set_figure_99339, *[fig_99340], **kwargs_99341)
        
        # SSA join for if statement (line 1488)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_figure(...): (line 1490)
        # Processing the call arguments (line 1490)
        # Getting the type of 'fig' (line 1490)
        fig_99346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 34), 'fig', False)
        # Processing the call keyword arguments (line 1490)
        kwargs_99347 = {}
        # Getting the type of 'self' (line 1490)
        self_99343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 8), 'self', False)
        # Obtaining the member 'offsetbox' of a type (line 1490)
        offsetbox_99344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1490, 8), self_99343, 'offsetbox')
        # Obtaining the member 'set_figure' of a type (line 1490)
        set_figure_99345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1490, 8), offsetbox_99344, 'set_figure')
        # Calling set_figure(args, kwargs) (line 1490)
        set_figure_call_result_99348 = invoke(stypy.reporting.localization.Localization(__file__, 1490, 8), set_figure_99345, *[fig_99346], **kwargs_99347)
        
        
        # Call to set_figure(...): (line 1491)
        # Processing the call arguments (line 1491)
        # Getting the type of 'self' (line 1491)
        self_99352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 34), 'self', False)
        # Getting the type of 'fig' (line 1491)
        fig_99353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 40), 'fig', False)
        # Processing the call keyword arguments (line 1491)
        kwargs_99354 = {}
        # Getting the type of 'martist' (line 1491)
        martist_99349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'martist', False)
        # Obtaining the member 'Artist' of a type (line 1491)
        Artist_99350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 8), martist_99349, 'Artist')
        # Obtaining the member 'set_figure' of a type (line 1491)
        set_figure_99351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 8), Artist_99350, 'set_figure')
        # Calling set_figure(args, kwargs) (line 1491)
        set_figure_call_result_99355 = invoke(stypy.reporting.localization.Localization(__file__, 1491, 8), set_figure_99351, *[self_99352, fig_99353], **kwargs_99354)
        
        
        # ################# End of 'set_figure(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_figure' in the type store
        # Getting the type of 'stypy_return_type' (line 1486)
        stypy_return_type_99356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99356)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_figure'
        return stypy_return_type_99356


    @norecursion
    def set_fontsize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1493)
        None_99357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 29), 'None')
        defaults = [None_99357]
        # Create a new context for function 'set_fontsize'
        module_type_store = module_type_store.open_function_context('set_fontsize', 1493, 4, False)
        # Assigning a type to the variable 'self' (line 1494)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1494, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnnotationBbox.set_fontsize.__dict__.__setitem__('stypy_localization', localization)
        AnnotationBbox.set_fontsize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnnotationBbox.set_fontsize.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnnotationBbox.set_fontsize.__dict__.__setitem__('stypy_function_name', 'AnnotationBbox.set_fontsize')
        AnnotationBbox.set_fontsize.__dict__.__setitem__('stypy_param_names_list', ['s'])
        AnnotationBbox.set_fontsize.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnnotationBbox.set_fontsize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnnotationBbox.set_fontsize.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnnotationBbox.set_fontsize.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnnotationBbox.set_fontsize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnnotationBbox.set_fontsize.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnnotationBbox.set_fontsize', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_fontsize', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_fontsize(...)' code ##################

        unicode_99358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1496, (-1)), 'unicode', u'\n        set fontsize in points\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1497)
        # Getting the type of 's' (line 1497)
        s_99359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 11), 's')
        # Getting the type of 'None' (line 1497)
        None_99360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 16), 'None')
        
        (may_be_99361, more_types_in_union_99362) = may_be_none(s_99359, None_99360)

        if may_be_99361:

            if more_types_in_union_99362:
                # Runtime conditional SSA (line 1497)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 1498):
            
            # Assigning a Subscript to a Name (line 1498):
            
            # Obtaining the type of the subscript
            unicode_99363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1498, 25), 'unicode', u'legend.fontsize')
            # Getting the type of 'rcParams' (line 1498)
            rcParams_99364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 16), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1498)
            getitem___99365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1498, 16), rcParams_99364, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1498)
            subscript_call_result_99366 = invoke(stypy.reporting.localization.Localization(__file__, 1498, 16), getitem___99365, unicode_99363)
            
            # Assigning a type to the variable 's' (line 1498)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1498, 12), 's', subscript_call_result_99366)

            if more_types_in_union_99362:
                # SSA join for if statement (line 1497)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 1500):
        
        # Assigning a Call to a Attribute (line 1500):
        
        # Call to FontProperties(...): (line 1500)
        # Processing the call keyword arguments (line 1500)
        # Getting the type of 's' (line 1500)
        s_99368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 40), 's', False)
        keyword_99369 = s_99368
        kwargs_99370 = {'size': keyword_99369}
        # Getting the type of 'FontProperties' (line 1500)
        FontProperties_99367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 20), 'FontProperties', False)
        # Calling FontProperties(args, kwargs) (line 1500)
        FontProperties_call_result_99371 = invoke(stypy.reporting.localization.Localization(__file__, 1500, 20), FontProperties_99367, *[], **kwargs_99370)
        
        # Getting the type of 'self' (line 1500)
        self_99372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 8), 'self')
        # Setting the type of the member 'prop' of a type (line 1500)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1500, 8), self_99372, 'prop', FontProperties_call_result_99371)
        
        # Assigning a Name to a Attribute (line 1501):
        
        # Assigning a Name to a Attribute (line 1501):
        # Getting the type of 'True' (line 1501)
        True_99373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 21), 'True')
        # Getting the type of 'self' (line 1501)
        self_99374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1501)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1501, 8), self_99374, 'stale', True_99373)
        
        # ################# End of 'set_fontsize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_fontsize' in the type store
        # Getting the type of 'stypy_return_type' (line 1493)
        stypy_return_type_99375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99375)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_fontsize'
        return stypy_return_type_99375


    @norecursion
    def get_fontsize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1503)
        None_99376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 29), 'None')
        defaults = [None_99376]
        # Create a new context for function 'get_fontsize'
        module_type_store = module_type_store.open_function_context('get_fontsize', 1503, 4, False)
        # Assigning a type to the variable 'self' (line 1504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1504, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnnotationBbox.get_fontsize.__dict__.__setitem__('stypy_localization', localization)
        AnnotationBbox.get_fontsize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnnotationBbox.get_fontsize.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnnotationBbox.get_fontsize.__dict__.__setitem__('stypy_function_name', 'AnnotationBbox.get_fontsize')
        AnnotationBbox.get_fontsize.__dict__.__setitem__('stypy_param_names_list', ['s'])
        AnnotationBbox.get_fontsize.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnnotationBbox.get_fontsize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnnotationBbox.get_fontsize.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnnotationBbox.get_fontsize.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnnotationBbox.get_fontsize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnnotationBbox.get_fontsize.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnnotationBbox.get_fontsize', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_fontsize', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_fontsize(...)' code ##################

        unicode_99377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1506, (-1)), 'unicode', u'\n        return fontsize in points\n        ')
        
        # Call to get_size_in_points(...): (line 1507)
        # Processing the call keyword arguments (line 1507)
        kwargs_99381 = {}
        # Getting the type of 'self' (line 1507)
        self_99378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 15), 'self', False)
        # Obtaining the member 'prop' of a type (line 1507)
        prop_99379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1507, 15), self_99378, 'prop')
        # Obtaining the member 'get_size_in_points' of a type (line 1507)
        get_size_in_points_99380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1507, 15), prop_99379, 'get_size_in_points')
        # Calling get_size_in_points(args, kwargs) (line 1507)
        get_size_in_points_call_result_99382 = invoke(stypy.reporting.localization.Localization(__file__, 1507, 15), get_size_in_points_99380, *[], **kwargs_99381)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'stypy_return_type', get_size_in_points_call_result_99382)
        
        # ################# End of 'get_fontsize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_fontsize' in the type store
        # Getting the type of 'stypy_return_type' (line 1503)
        stypy_return_type_99383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99383)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_fontsize'
        return stypy_return_type_99383


    @norecursion
    def update_positions(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_positions'
        module_type_store = module_type_store.open_function_context('update_positions', 1509, 4, False)
        # Assigning a type to the variable 'self' (line 1510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1510, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnnotationBbox.update_positions.__dict__.__setitem__('stypy_localization', localization)
        AnnotationBbox.update_positions.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnnotationBbox.update_positions.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnnotationBbox.update_positions.__dict__.__setitem__('stypy_function_name', 'AnnotationBbox.update_positions')
        AnnotationBbox.update_positions.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        AnnotationBbox.update_positions.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnnotationBbox.update_positions.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnnotationBbox.update_positions.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnnotationBbox.update_positions.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnnotationBbox.update_positions.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnnotationBbox.update_positions.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnnotationBbox.update_positions', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_positions', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_positions(...)' code ##################

        unicode_99384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1512, (-1)), 'unicode', u'\n        Update the pixel positions of the annotated point and the text.\n        ')
        
        # Assigning a Call to a Name (line 1513):
        
        # Assigning a Call to a Name (line 1513):
        
        # Call to _get_position_xy(...): (line 1513)
        # Processing the call arguments (line 1513)
        # Getting the type of 'renderer' (line 1513)
        renderer_99387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 41), 'renderer', False)
        # Processing the call keyword arguments (line 1513)
        kwargs_99388 = {}
        # Getting the type of 'self' (line 1513)
        self_99385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 19), 'self', False)
        # Obtaining the member '_get_position_xy' of a type (line 1513)
        _get_position_xy_99386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1513, 19), self_99385, '_get_position_xy')
        # Calling _get_position_xy(args, kwargs) (line 1513)
        _get_position_xy_call_result_99389 = invoke(stypy.reporting.localization.Localization(__file__, 1513, 19), _get_position_xy_99386, *[renderer_99387], **kwargs_99388)
        
        # Assigning a type to the variable 'xy_pixel' (line 1513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1513, 8), 'xy_pixel', _get_position_xy_call_result_99389)
        
        # Call to _update_position_xybox(...): (line 1514)
        # Processing the call arguments (line 1514)
        # Getting the type of 'renderer' (line 1514)
        renderer_99392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 36), 'renderer', False)
        # Getting the type of 'xy_pixel' (line 1514)
        xy_pixel_99393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 46), 'xy_pixel', False)
        # Processing the call keyword arguments (line 1514)
        kwargs_99394 = {}
        # Getting the type of 'self' (line 1514)
        self_99390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 8), 'self', False)
        # Obtaining the member '_update_position_xybox' of a type (line 1514)
        _update_position_xybox_99391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1514, 8), self_99390, '_update_position_xybox')
        # Calling _update_position_xybox(args, kwargs) (line 1514)
        _update_position_xybox_call_result_99395 = invoke(stypy.reporting.localization.Localization(__file__, 1514, 8), _update_position_xybox_99391, *[renderer_99392, xy_pixel_99393], **kwargs_99394)
        
        
        # Assigning a Call to a Name (line 1516):
        
        # Assigning a Call to a Name (line 1516):
        
        # Call to points_to_pixels(...): (line 1516)
        # Processing the call arguments (line 1516)
        
        # Call to get_fontsize(...): (line 1516)
        # Processing the call keyword arguments (line 1516)
        kwargs_99400 = {}
        # Getting the type of 'self' (line 1516)
        self_99398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 51), 'self', False)
        # Obtaining the member 'get_fontsize' of a type (line 1516)
        get_fontsize_99399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1516, 51), self_99398, 'get_fontsize')
        # Calling get_fontsize(args, kwargs) (line 1516)
        get_fontsize_call_result_99401 = invoke(stypy.reporting.localization.Localization(__file__, 1516, 51), get_fontsize_99399, *[], **kwargs_99400)
        
        # Processing the call keyword arguments (line 1516)
        kwargs_99402 = {}
        # Getting the type of 'renderer' (line 1516)
        renderer_99396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 25), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 1516)
        points_to_pixels_99397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1516, 25), renderer_99396, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 1516)
        points_to_pixels_call_result_99403 = invoke(stypy.reporting.localization.Localization(__file__, 1516, 25), points_to_pixels_99397, *[get_fontsize_call_result_99401], **kwargs_99402)
        
        # Assigning a type to the variable 'mutation_scale' (line 1516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1516, 8), 'mutation_scale', points_to_pixels_call_result_99403)
        
        # Call to set_mutation_scale(...): (line 1517)
        # Processing the call arguments (line 1517)
        # Getting the type of 'mutation_scale' (line 1517)
        mutation_scale_99407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 38), 'mutation_scale', False)
        # Processing the call keyword arguments (line 1517)
        kwargs_99408 = {}
        # Getting the type of 'self' (line 1517)
        self_99404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 8), 'self', False)
        # Obtaining the member 'patch' of a type (line 1517)
        patch_99405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1517, 8), self_99404, 'patch')
        # Obtaining the member 'set_mutation_scale' of a type (line 1517)
        set_mutation_scale_99406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1517, 8), patch_99405, 'set_mutation_scale')
        # Calling set_mutation_scale(args, kwargs) (line 1517)
        set_mutation_scale_call_result_99409 = invoke(stypy.reporting.localization.Localization(__file__, 1517, 8), set_mutation_scale_99406, *[mutation_scale_99407], **kwargs_99408)
        
        
        # Getting the type of 'self' (line 1519)
        self_99410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 11), 'self')
        # Obtaining the member 'arrow_patch' of a type (line 1519)
        arrow_patch_99411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1519, 11), self_99410, 'arrow_patch')
        # Testing the type of an if condition (line 1519)
        if_condition_99412 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1519, 8), arrow_patch_99411)
        # Assigning a type to the variable 'if_condition_99412' (line 1519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1519, 8), 'if_condition_99412', if_condition_99412)
        # SSA begins for if statement (line 1519)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_mutation_scale(...): (line 1520)
        # Processing the call arguments (line 1520)
        # Getting the type of 'mutation_scale' (line 1520)
        mutation_scale_99416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 48), 'mutation_scale', False)
        # Processing the call keyword arguments (line 1520)
        kwargs_99417 = {}
        # Getting the type of 'self' (line 1520)
        self_99413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 12), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 1520)
        arrow_patch_99414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 12), self_99413, 'arrow_patch')
        # Obtaining the member 'set_mutation_scale' of a type (line 1520)
        set_mutation_scale_99415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 12), arrow_patch_99414, 'set_mutation_scale')
        # Calling set_mutation_scale(args, kwargs) (line 1520)
        set_mutation_scale_call_result_99418 = invoke(stypy.reporting.localization.Localization(__file__, 1520, 12), set_mutation_scale_99415, *[mutation_scale_99416], **kwargs_99417)
        
        # SSA join for if statement (line 1519)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'update_positions(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_positions' in the type store
        # Getting the type of 'stypy_return_type' (line 1509)
        stypy_return_type_99419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99419)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_positions'
        return stypy_return_type_99419


    @norecursion
    def _update_position_xybox(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_position_xybox'
        module_type_store = module_type_store.open_function_context('_update_position_xybox', 1522, 4, False)
        # Assigning a type to the variable 'self' (line 1523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1523, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnnotationBbox._update_position_xybox.__dict__.__setitem__('stypy_localization', localization)
        AnnotationBbox._update_position_xybox.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnnotationBbox._update_position_xybox.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnnotationBbox._update_position_xybox.__dict__.__setitem__('stypy_function_name', 'AnnotationBbox._update_position_xybox')
        AnnotationBbox._update_position_xybox.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'xy_pixel'])
        AnnotationBbox._update_position_xybox.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnnotationBbox._update_position_xybox.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnnotationBbox._update_position_xybox.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnnotationBbox._update_position_xybox.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnnotationBbox._update_position_xybox.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnnotationBbox._update_position_xybox.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnnotationBbox._update_position_xybox', ['renderer', 'xy_pixel'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_position_xybox', localization, ['renderer', 'xy_pixel'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_position_xybox(...)' code ##################

        unicode_99420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1526, (-1)), 'unicode', u'\n        Update the pixel positions of the annotation text and the arrow\n        patch.\n        ')
        
        # Assigning a Attribute to a Tuple (line 1528):
        
        # Assigning a Subscript to a Name (line 1528):
        
        # Obtaining the type of the subscript
        int_99421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1528, 8), 'int')
        # Getting the type of 'self' (line 1528)
        self_99422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 15), 'self')
        # Obtaining the member 'xybox' of a type (line 1528)
        xybox_99423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 15), self_99422, 'xybox')
        # Obtaining the member '__getitem__' of a type (line 1528)
        getitem___99424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 8), xybox_99423, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1528)
        subscript_call_result_99425 = invoke(stypy.reporting.localization.Localization(__file__, 1528, 8), getitem___99424, int_99421)
        
        # Assigning a type to the variable 'tuple_var_assignment_95813' (line 1528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 8), 'tuple_var_assignment_95813', subscript_call_result_99425)
        
        # Assigning a Subscript to a Name (line 1528):
        
        # Obtaining the type of the subscript
        int_99426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1528, 8), 'int')
        # Getting the type of 'self' (line 1528)
        self_99427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 15), 'self')
        # Obtaining the member 'xybox' of a type (line 1528)
        xybox_99428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 15), self_99427, 'xybox')
        # Obtaining the member '__getitem__' of a type (line 1528)
        getitem___99429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 8), xybox_99428, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1528)
        subscript_call_result_99430 = invoke(stypy.reporting.localization.Localization(__file__, 1528, 8), getitem___99429, int_99426)
        
        # Assigning a type to the variable 'tuple_var_assignment_95814' (line 1528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 8), 'tuple_var_assignment_95814', subscript_call_result_99430)
        
        # Assigning a Name to a Name (line 1528):
        # Getting the type of 'tuple_var_assignment_95813' (line 1528)
        tuple_var_assignment_95813_99431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 8), 'tuple_var_assignment_95813')
        # Assigning a type to the variable 'x' (line 1528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 8), 'x', tuple_var_assignment_95813_99431)
        
        # Assigning a Name to a Name (line 1528):
        # Getting the type of 'tuple_var_assignment_95814' (line 1528)
        tuple_var_assignment_95814_99432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 8), 'tuple_var_assignment_95814')
        # Assigning a type to the variable 'y' (line 1528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 11), 'y', tuple_var_assignment_95814_99432)
        
        # Type idiom detected: calculating its left and rigth part (line 1529)
        # Getting the type of 'tuple' (line 1529)
        tuple_99433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 38), 'tuple')
        # Getting the type of 'self' (line 1529)
        self_99434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 22), 'self')
        # Obtaining the member 'boxcoords' of a type (line 1529)
        boxcoords_99435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 22), self_99434, 'boxcoords')
        
        (may_be_99436, more_types_in_union_99437) = may_be_subtype(tuple_99433, boxcoords_99435)

        if may_be_99436:

            if more_types_in_union_99437:
                # Runtime conditional SSA (line 1529)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'self' (line 1529)
            self_99438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 8), 'self')
            # Obtaining the member 'boxcoords' of a type (line 1529)
            boxcoords_99439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 8), self_99438, 'boxcoords')
            # Setting the type of the member 'boxcoords' of a type (line 1529)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 8), self_99438, 'boxcoords', remove_not_subtype_from_union(boxcoords_99435, tuple))
            
            # Assigning a Attribute to a Tuple (line 1530):
            
            # Assigning a Subscript to a Name (line 1530):
            
            # Obtaining the type of the subscript
            int_99440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1530, 12), 'int')
            # Getting the type of 'self' (line 1530)
            self_99441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 29), 'self')
            # Obtaining the member 'boxcoords' of a type (line 1530)
            boxcoords_99442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1530, 29), self_99441, 'boxcoords')
            # Obtaining the member '__getitem__' of a type (line 1530)
            getitem___99443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1530, 12), boxcoords_99442, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1530)
            subscript_call_result_99444 = invoke(stypy.reporting.localization.Localization(__file__, 1530, 12), getitem___99443, int_99440)
            
            # Assigning a type to the variable 'tuple_var_assignment_95815' (line 1530)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 12), 'tuple_var_assignment_95815', subscript_call_result_99444)
            
            # Assigning a Subscript to a Name (line 1530):
            
            # Obtaining the type of the subscript
            int_99445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1530, 12), 'int')
            # Getting the type of 'self' (line 1530)
            self_99446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 29), 'self')
            # Obtaining the member 'boxcoords' of a type (line 1530)
            boxcoords_99447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1530, 29), self_99446, 'boxcoords')
            # Obtaining the member '__getitem__' of a type (line 1530)
            getitem___99448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1530, 12), boxcoords_99447, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1530)
            subscript_call_result_99449 = invoke(stypy.reporting.localization.Localization(__file__, 1530, 12), getitem___99448, int_99445)
            
            # Assigning a type to the variable 'tuple_var_assignment_95816' (line 1530)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 12), 'tuple_var_assignment_95816', subscript_call_result_99449)
            
            # Assigning a Name to a Name (line 1530):
            # Getting the type of 'tuple_var_assignment_95815' (line 1530)
            tuple_var_assignment_95815_99450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 12), 'tuple_var_assignment_95815')
            # Assigning a type to the variable 'xcoord' (line 1530)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 12), 'xcoord', tuple_var_assignment_95815_99450)
            
            # Assigning a Name to a Name (line 1530):
            # Getting the type of 'tuple_var_assignment_95816' (line 1530)
            tuple_var_assignment_95816_99451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 12), 'tuple_var_assignment_95816')
            # Assigning a type to the variable 'ycoord' (line 1530)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 20), 'ycoord', tuple_var_assignment_95816_99451)
            
            # Assigning a Call to a Tuple (line 1531):
            
            # Assigning a Call to a Name:
            
            # Call to _get_xy(...): (line 1531)
            # Processing the call arguments (line 1531)
            # Getting the type of 'renderer' (line 1531)
            renderer_99454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 34), 'renderer', False)
            # Getting the type of 'x' (line 1531)
            x_99455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 44), 'x', False)
            # Getting the type of 'y' (line 1531)
            y_99456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 47), 'y', False)
            # Getting the type of 'xcoord' (line 1531)
            xcoord_99457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 50), 'xcoord', False)
            # Processing the call keyword arguments (line 1531)
            kwargs_99458 = {}
            # Getting the type of 'self' (line 1531)
            self_99452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 21), 'self', False)
            # Obtaining the member '_get_xy' of a type (line 1531)
            _get_xy_99453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1531, 21), self_99452, '_get_xy')
            # Calling _get_xy(args, kwargs) (line 1531)
            _get_xy_call_result_99459 = invoke(stypy.reporting.localization.Localization(__file__, 1531, 21), _get_xy_99453, *[renderer_99454, x_99455, y_99456, xcoord_99457], **kwargs_99458)
            
            # Assigning a type to the variable 'call_assignment_95817' (line 1531)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 12), 'call_assignment_95817', _get_xy_call_result_99459)
            
            # Assigning a Call to a Name (line 1531):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_99462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1531, 12), 'int')
            # Processing the call keyword arguments
            kwargs_99463 = {}
            # Getting the type of 'call_assignment_95817' (line 1531)
            call_assignment_95817_99460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 12), 'call_assignment_95817', False)
            # Obtaining the member '__getitem__' of a type (line 1531)
            getitem___99461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1531, 12), call_assignment_95817_99460, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_99464 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99461, *[int_99462], **kwargs_99463)
            
            # Assigning a type to the variable 'call_assignment_95818' (line 1531)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 12), 'call_assignment_95818', getitem___call_result_99464)
            
            # Assigning a Name to a Name (line 1531):
            # Getting the type of 'call_assignment_95818' (line 1531)
            call_assignment_95818_99465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 12), 'call_assignment_95818')
            # Assigning a type to the variable 'x1' (line 1531)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 12), 'x1', call_assignment_95818_99465)
            
            # Assigning a Call to a Name (line 1531):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_99468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1531, 12), 'int')
            # Processing the call keyword arguments
            kwargs_99469 = {}
            # Getting the type of 'call_assignment_95817' (line 1531)
            call_assignment_95817_99466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 12), 'call_assignment_95817', False)
            # Obtaining the member '__getitem__' of a type (line 1531)
            getitem___99467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1531, 12), call_assignment_95817_99466, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_99470 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99467, *[int_99468], **kwargs_99469)
            
            # Assigning a type to the variable 'call_assignment_95819' (line 1531)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 12), 'call_assignment_95819', getitem___call_result_99470)
            
            # Assigning a Name to a Name (line 1531):
            # Getting the type of 'call_assignment_95819' (line 1531)
            call_assignment_95819_99471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 12), 'call_assignment_95819')
            # Assigning a type to the variable 'y1' (line 1531)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 16), 'y1', call_assignment_95819_99471)
            
            # Assigning a Call to a Tuple (line 1532):
            
            # Assigning a Call to a Name:
            
            # Call to _get_xy(...): (line 1532)
            # Processing the call arguments (line 1532)
            # Getting the type of 'renderer' (line 1532)
            renderer_99474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 34), 'renderer', False)
            # Getting the type of 'x' (line 1532)
            x_99475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 44), 'x', False)
            # Getting the type of 'y' (line 1532)
            y_99476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 47), 'y', False)
            # Getting the type of 'ycoord' (line 1532)
            ycoord_99477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 50), 'ycoord', False)
            # Processing the call keyword arguments (line 1532)
            kwargs_99478 = {}
            # Getting the type of 'self' (line 1532)
            self_99472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 21), 'self', False)
            # Obtaining the member '_get_xy' of a type (line 1532)
            _get_xy_99473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 21), self_99472, '_get_xy')
            # Calling _get_xy(args, kwargs) (line 1532)
            _get_xy_call_result_99479 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 21), _get_xy_99473, *[renderer_99474, x_99475, y_99476, ycoord_99477], **kwargs_99478)
            
            # Assigning a type to the variable 'call_assignment_95820' (line 1532)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 12), 'call_assignment_95820', _get_xy_call_result_99479)
            
            # Assigning a Call to a Name (line 1532):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_99482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1532, 12), 'int')
            # Processing the call keyword arguments
            kwargs_99483 = {}
            # Getting the type of 'call_assignment_95820' (line 1532)
            call_assignment_95820_99480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 12), 'call_assignment_95820', False)
            # Obtaining the member '__getitem__' of a type (line 1532)
            getitem___99481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 12), call_assignment_95820_99480, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_99484 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99481, *[int_99482], **kwargs_99483)
            
            # Assigning a type to the variable 'call_assignment_95821' (line 1532)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 12), 'call_assignment_95821', getitem___call_result_99484)
            
            # Assigning a Name to a Name (line 1532):
            # Getting the type of 'call_assignment_95821' (line 1532)
            call_assignment_95821_99485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 12), 'call_assignment_95821')
            # Assigning a type to the variable 'x2' (line 1532)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 12), 'x2', call_assignment_95821_99485)
            
            # Assigning a Call to a Name (line 1532):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_99488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1532, 12), 'int')
            # Processing the call keyword arguments
            kwargs_99489 = {}
            # Getting the type of 'call_assignment_95820' (line 1532)
            call_assignment_95820_99486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 12), 'call_assignment_95820', False)
            # Obtaining the member '__getitem__' of a type (line 1532)
            getitem___99487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 12), call_assignment_95820_99486, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_99490 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99487, *[int_99488], **kwargs_99489)
            
            # Assigning a type to the variable 'call_assignment_95822' (line 1532)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 12), 'call_assignment_95822', getitem___call_result_99490)
            
            # Assigning a Name to a Name (line 1532):
            # Getting the type of 'call_assignment_95822' (line 1532)
            call_assignment_95822_99491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 12), 'call_assignment_95822')
            # Assigning a type to the variable 'y2' (line 1532)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 16), 'y2', call_assignment_95822_99491)
            
            # Assigning a Tuple to a Tuple (line 1533):
            
            # Assigning a Name to a Name (line 1533):
            # Getting the type of 'x1' (line 1533)
            x1_99492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 23), 'x1')
            # Assigning a type to the variable 'tuple_assignment_95823' (line 1533)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 12), 'tuple_assignment_95823', x1_99492)
            
            # Assigning a Name to a Name (line 1533):
            # Getting the type of 'y2' (line 1533)
            y2_99493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 27), 'y2')
            # Assigning a type to the variable 'tuple_assignment_95824' (line 1533)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 12), 'tuple_assignment_95824', y2_99493)
            
            # Assigning a Name to a Name (line 1533):
            # Getting the type of 'tuple_assignment_95823' (line 1533)
            tuple_assignment_95823_99494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 12), 'tuple_assignment_95823')
            # Assigning a type to the variable 'ox0' (line 1533)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 12), 'ox0', tuple_assignment_95823_99494)
            
            # Assigning a Name to a Name (line 1533):
            # Getting the type of 'tuple_assignment_95824' (line 1533)
            tuple_assignment_95824_99495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 12), 'tuple_assignment_95824')
            # Assigning a type to the variable 'oy0' (line 1533)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 17), 'oy0', tuple_assignment_95824_99495)

            if more_types_in_union_99437:
                # Runtime conditional SSA for else branch (line 1529)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_99436) or more_types_in_union_99437):
            # Getting the type of 'self' (line 1529)
            self_99496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 8), 'self')
            # Obtaining the member 'boxcoords' of a type (line 1529)
            boxcoords_99497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 8), self_99496, 'boxcoords')
            # Setting the type of the member 'boxcoords' of a type (line 1529)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 8), self_99496, 'boxcoords', remove_subtype_from_union(boxcoords_99435, tuple))
            
            # Assigning a Call to a Tuple (line 1535):
            
            # Assigning a Call to a Name:
            
            # Call to _get_xy(...): (line 1535)
            # Processing the call arguments (line 1535)
            # Getting the type of 'renderer' (line 1535)
            renderer_99500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 36), 'renderer', False)
            # Getting the type of 'x' (line 1535)
            x_99501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 46), 'x', False)
            # Getting the type of 'y' (line 1535)
            y_99502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 49), 'y', False)
            # Getting the type of 'self' (line 1535)
            self_99503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 52), 'self', False)
            # Obtaining the member 'boxcoords' of a type (line 1535)
            boxcoords_99504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 52), self_99503, 'boxcoords')
            # Processing the call keyword arguments (line 1535)
            kwargs_99505 = {}
            # Getting the type of 'self' (line 1535)
            self_99498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 23), 'self', False)
            # Obtaining the member '_get_xy' of a type (line 1535)
            _get_xy_99499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 23), self_99498, '_get_xy')
            # Calling _get_xy(args, kwargs) (line 1535)
            _get_xy_call_result_99506 = invoke(stypy.reporting.localization.Localization(__file__, 1535, 23), _get_xy_99499, *[renderer_99500, x_99501, y_99502, boxcoords_99504], **kwargs_99505)
            
            # Assigning a type to the variable 'call_assignment_95825' (line 1535)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 12), 'call_assignment_95825', _get_xy_call_result_99506)
            
            # Assigning a Call to a Name (line 1535):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_99509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 12), 'int')
            # Processing the call keyword arguments
            kwargs_99510 = {}
            # Getting the type of 'call_assignment_95825' (line 1535)
            call_assignment_95825_99507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 12), 'call_assignment_95825', False)
            # Obtaining the member '__getitem__' of a type (line 1535)
            getitem___99508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 12), call_assignment_95825_99507, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_99511 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99508, *[int_99509], **kwargs_99510)
            
            # Assigning a type to the variable 'call_assignment_95826' (line 1535)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 12), 'call_assignment_95826', getitem___call_result_99511)
            
            # Assigning a Name to a Name (line 1535):
            # Getting the type of 'call_assignment_95826' (line 1535)
            call_assignment_95826_99512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 12), 'call_assignment_95826')
            # Assigning a type to the variable 'ox0' (line 1535)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 12), 'ox0', call_assignment_95826_99512)
            
            # Assigning a Call to a Name (line 1535):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_99515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 12), 'int')
            # Processing the call keyword arguments
            kwargs_99516 = {}
            # Getting the type of 'call_assignment_95825' (line 1535)
            call_assignment_95825_99513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 12), 'call_assignment_95825', False)
            # Obtaining the member '__getitem__' of a type (line 1535)
            getitem___99514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 12), call_assignment_95825_99513, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_99517 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99514, *[int_99515], **kwargs_99516)
            
            # Assigning a type to the variable 'call_assignment_95827' (line 1535)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 12), 'call_assignment_95827', getitem___call_result_99517)
            
            # Assigning a Name to a Name (line 1535):
            # Getting the type of 'call_assignment_95827' (line 1535)
            call_assignment_95827_99518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 12), 'call_assignment_95827')
            # Assigning a type to the variable 'oy0' (line 1535)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 17), 'oy0', call_assignment_95827_99518)

            if (may_be_99436 and more_types_in_union_99437):
                # SSA join for if statement (line 1529)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 1537):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent(...): (line 1537)
        # Processing the call arguments (line 1537)
        # Getting the type of 'renderer' (line 1537)
        renderer_99522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 49), 'renderer', False)
        # Processing the call keyword arguments (line 1537)
        kwargs_99523 = {}
        # Getting the type of 'self' (line 1537)
        self_99519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 23), 'self', False)
        # Obtaining the member 'offsetbox' of a type (line 1537)
        offsetbox_99520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1537, 23), self_99519, 'offsetbox')
        # Obtaining the member 'get_extent' of a type (line 1537)
        get_extent_99521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1537, 23), offsetbox_99520, 'get_extent')
        # Calling get_extent(args, kwargs) (line 1537)
        get_extent_call_result_99524 = invoke(stypy.reporting.localization.Localization(__file__, 1537, 23), get_extent_99521, *[renderer_99522], **kwargs_99523)
        
        # Assigning a type to the variable 'call_assignment_95828' (line 1537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'call_assignment_95828', get_extent_call_result_99524)
        
        # Assigning a Call to a Name (line 1537):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_99527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1537, 8), 'int')
        # Processing the call keyword arguments
        kwargs_99528 = {}
        # Getting the type of 'call_assignment_95828' (line 1537)
        call_assignment_95828_99525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'call_assignment_95828', False)
        # Obtaining the member '__getitem__' of a type (line 1537)
        getitem___99526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1537, 8), call_assignment_95828_99525, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_99529 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99526, *[int_99527], **kwargs_99528)
        
        # Assigning a type to the variable 'call_assignment_95829' (line 1537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'call_assignment_95829', getitem___call_result_99529)
        
        # Assigning a Name to a Name (line 1537):
        # Getting the type of 'call_assignment_95829' (line 1537)
        call_assignment_95829_99530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'call_assignment_95829')
        # Assigning a type to the variable 'w' (line 1537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'w', call_assignment_95829_99530)
        
        # Assigning a Call to a Name (line 1537):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_99533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1537, 8), 'int')
        # Processing the call keyword arguments
        kwargs_99534 = {}
        # Getting the type of 'call_assignment_95828' (line 1537)
        call_assignment_95828_99531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'call_assignment_95828', False)
        # Obtaining the member '__getitem__' of a type (line 1537)
        getitem___99532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1537, 8), call_assignment_95828_99531, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_99535 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99532, *[int_99533], **kwargs_99534)
        
        # Assigning a type to the variable 'call_assignment_95830' (line 1537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'call_assignment_95830', getitem___call_result_99535)
        
        # Assigning a Name to a Name (line 1537):
        # Getting the type of 'call_assignment_95830' (line 1537)
        call_assignment_95830_99536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'call_assignment_95830')
        # Assigning a type to the variable 'h' (line 1537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 11), 'h', call_assignment_95830_99536)
        
        # Assigning a Call to a Name (line 1537):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_99539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1537, 8), 'int')
        # Processing the call keyword arguments
        kwargs_99540 = {}
        # Getting the type of 'call_assignment_95828' (line 1537)
        call_assignment_95828_99537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'call_assignment_95828', False)
        # Obtaining the member '__getitem__' of a type (line 1537)
        getitem___99538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1537, 8), call_assignment_95828_99537, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_99541 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99538, *[int_99539], **kwargs_99540)
        
        # Assigning a type to the variable 'call_assignment_95831' (line 1537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'call_assignment_95831', getitem___call_result_99541)
        
        # Assigning a Name to a Name (line 1537):
        # Getting the type of 'call_assignment_95831' (line 1537)
        call_assignment_95831_99542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'call_assignment_95831')
        # Assigning a type to the variable 'xd' (line 1537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 14), 'xd', call_assignment_95831_99542)
        
        # Assigning a Call to a Name (line 1537):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_99545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1537, 8), 'int')
        # Processing the call keyword arguments
        kwargs_99546 = {}
        # Getting the type of 'call_assignment_95828' (line 1537)
        call_assignment_95828_99543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'call_assignment_95828', False)
        # Obtaining the member '__getitem__' of a type (line 1537)
        getitem___99544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1537, 8), call_assignment_95828_99543, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_99547 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___99544, *[int_99545], **kwargs_99546)
        
        # Assigning a type to the variable 'call_assignment_95832' (line 1537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'call_assignment_95832', getitem___call_result_99547)
        
        # Assigning a Name to a Name (line 1537):
        # Getting the type of 'call_assignment_95832' (line 1537)
        call_assignment_95832_99548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'call_assignment_95832')
        # Assigning a type to the variable 'yd' (line 1537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 18), 'yd', call_assignment_95832_99548)
        
        # Assigning a Attribute to a Tuple (line 1539):
        
        # Assigning a Subscript to a Name (line 1539):
        
        # Obtaining the type of the subscript
        int_99549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 8), 'int')
        # Getting the type of 'self' (line 1539)
        self_99550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 19), 'self')
        # Obtaining the member '_box_alignment' of a type (line 1539)
        _box_alignment_99551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 19), self_99550, '_box_alignment')
        # Obtaining the member '__getitem__' of a type (line 1539)
        getitem___99552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 8), _box_alignment_99551, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1539)
        subscript_call_result_99553 = invoke(stypy.reporting.localization.Localization(__file__, 1539, 8), getitem___99552, int_99549)
        
        # Assigning a type to the variable 'tuple_var_assignment_95833' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 8), 'tuple_var_assignment_95833', subscript_call_result_99553)
        
        # Assigning a Subscript to a Name (line 1539):
        
        # Obtaining the type of the subscript
        int_99554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 8), 'int')
        # Getting the type of 'self' (line 1539)
        self_99555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 19), 'self')
        # Obtaining the member '_box_alignment' of a type (line 1539)
        _box_alignment_99556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 19), self_99555, '_box_alignment')
        # Obtaining the member '__getitem__' of a type (line 1539)
        getitem___99557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 8), _box_alignment_99556, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1539)
        subscript_call_result_99558 = invoke(stypy.reporting.localization.Localization(__file__, 1539, 8), getitem___99557, int_99554)
        
        # Assigning a type to the variable 'tuple_var_assignment_95834' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 8), 'tuple_var_assignment_95834', subscript_call_result_99558)
        
        # Assigning a Name to a Name (line 1539):
        # Getting the type of 'tuple_var_assignment_95833' (line 1539)
        tuple_var_assignment_95833_99559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 8), 'tuple_var_assignment_95833')
        # Assigning a type to the variable '_fw' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 8), '_fw', tuple_var_assignment_95833_99559)
        
        # Assigning a Name to a Name (line 1539):
        # Getting the type of 'tuple_var_assignment_95834' (line 1539)
        tuple_var_assignment_95834_99560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 8), 'tuple_var_assignment_95834')
        # Assigning a type to the variable '_fh' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 13), '_fh', tuple_var_assignment_95834_99560)
        
        # Call to set_offset(...): (line 1540)
        # Processing the call arguments (line 1540)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1540)
        tuple_99564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1540, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1540)
        # Adding element type (line 1540)
        # Getting the type of 'ox0' (line 1540)
        ox0_99565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 35), 'ox0', False)
        # Getting the type of '_fw' (line 1540)
        _fw_99566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 41), '_fw', False)
        # Getting the type of 'w' (line 1540)
        w_99567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 47), 'w', False)
        # Applying the binary operator '*' (line 1540)
        result_mul_99568 = python_operator(stypy.reporting.localization.Localization(__file__, 1540, 41), '*', _fw_99566, w_99567)
        
        # Applying the binary operator '-' (line 1540)
        result_sub_99569 = python_operator(stypy.reporting.localization.Localization(__file__, 1540, 35), '-', ox0_99565, result_mul_99568)
        
        # Getting the type of 'xd' (line 1540)
        xd_99570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 51), 'xd', False)
        # Applying the binary operator '+' (line 1540)
        result_add_99571 = python_operator(stypy.reporting.localization.Localization(__file__, 1540, 49), '+', result_sub_99569, xd_99570)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1540, 35), tuple_99564, result_add_99571)
        # Adding element type (line 1540)
        # Getting the type of 'oy0' (line 1540)
        oy0_99572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 55), 'oy0', False)
        # Getting the type of '_fh' (line 1540)
        _fh_99573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 61), '_fh', False)
        # Getting the type of 'h' (line 1540)
        h_99574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 67), 'h', False)
        # Applying the binary operator '*' (line 1540)
        result_mul_99575 = python_operator(stypy.reporting.localization.Localization(__file__, 1540, 61), '*', _fh_99573, h_99574)
        
        # Applying the binary operator '-' (line 1540)
        result_sub_99576 = python_operator(stypy.reporting.localization.Localization(__file__, 1540, 55), '-', oy0_99572, result_mul_99575)
        
        # Getting the type of 'yd' (line 1540)
        yd_99577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 71), 'yd', False)
        # Applying the binary operator '+' (line 1540)
        result_add_99578 = python_operator(stypy.reporting.localization.Localization(__file__, 1540, 69), '+', result_sub_99576, yd_99577)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1540, 35), tuple_99564, result_add_99578)
        
        # Processing the call keyword arguments (line 1540)
        kwargs_99579 = {}
        # Getting the type of 'self' (line 1540)
        self_99561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 8), 'self', False)
        # Obtaining the member 'offsetbox' of a type (line 1540)
        offsetbox_99562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1540, 8), self_99561, 'offsetbox')
        # Obtaining the member 'set_offset' of a type (line 1540)
        set_offset_99563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1540, 8), offsetbox_99562, 'set_offset')
        # Calling set_offset(args, kwargs) (line 1540)
        set_offset_call_result_99580 = invoke(stypy.reporting.localization.Localization(__file__, 1540, 8), set_offset_99563, *[tuple_99564], **kwargs_99579)
        
        
        # Assigning a Call to a Name (line 1543):
        
        # Assigning a Call to a Name (line 1543):
        
        # Call to get_window_extent(...): (line 1543)
        # Processing the call arguments (line 1543)
        # Getting the type of 'renderer' (line 1543)
        renderer_99584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 48), 'renderer', False)
        # Processing the call keyword arguments (line 1543)
        kwargs_99585 = {}
        # Getting the type of 'self' (line 1543)
        self_99581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 15), 'self', False)
        # Obtaining the member 'offsetbox' of a type (line 1543)
        offsetbox_99582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 15), self_99581, 'offsetbox')
        # Obtaining the member 'get_window_extent' of a type (line 1543)
        get_window_extent_99583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 15), offsetbox_99582, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 1543)
        get_window_extent_call_result_99586 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 15), get_window_extent_99583, *[renderer_99584], **kwargs_99585)
        
        # Assigning a type to the variable 'bbox' (line 1543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 8), 'bbox', get_window_extent_call_result_99586)
        
        # Call to set_bounds(...): (line 1545)
        # Processing the call arguments (line 1545)
        # Getting the type of 'bbox' (line 1545)
        bbox_99590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 30), 'bbox', False)
        # Obtaining the member 'x0' of a type (line 1545)
        x0_99591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 30), bbox_99590, 'x0')
        # Getting the type of 'bbox' (line 1545)
        bbox_99592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 39), 'bbox', False)
        # Obtaining the member 'y0' of a type (line 1545)
        y0_99593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 39), bbox_99592, 'y0')
        # Getting the type of 'bbox' (line 1546)
        bbox_99594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 30), 'bbox', False)
        # Obtaining the member 'width' of a type (line 1546)
        width_99595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1546, 30), bbox_99594, 'width')
        # Getting the type of 'bbox' (line 1546)
        bbox_99596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 42), 'bbox', False)
        # Obtaining the member 'height' of a type (line 1546)
        height_99597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1546, 42), bbox_99596, 'height')
        # Processing the call keyword arguments (line 1545)
        kwargs_99598 = {}
        # Getting the type of 'self' (line 1545)
        self_99587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 8), 'self', False)
        # Obtaining the member 'patch' of a type (line 1545)
        patch_99588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 8), self_99587, 'patch')
        # Obtaining the member 'set_bounds' of a type (line 1545)
        set_bounds_99589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 8), patch_99588, 'set_bounds')
        # Calling set_bounds(args, kwargs) (line 1545)
        set_bounds_call_result_99599 = invoke(stypy.reporting.localization.Localization(__file__, 1545, 8), set_bounds_99589, *[x0_99591, y0_99593, width_99595, height_99597], **kwargs_99598)
        
        
        # Assigning a Name to a Tuple (line 1548):
        
        # Assigning a Subscript to a Name (line 1548):
        
        # Obtaining the type of the subscript
        int_99600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1548, 8), 'int')
        # Getting the type of 'xy_pixel' (line 1548)
        xy_pixel_99601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 15), 'xy_pixel')
        # Obtaining the member '__getitem__' of a type (line 1548)
        getitem___99602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1548, 8), xy_pixel_99601, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1548)
        subscript_call_result_99603 = invoke(stypy.reporting.localization.Localization(__file__, 1548, 8), getitem___99602, int_99600)
        
        # Assigning a type to the variable 'tuple_var_assignment_95835' (line 1548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1548, 8), 'tuple_var_assignment_95835', subscript_call_result_99603)
        
        # Assigning a Subscript to a Name (line 1548):
        
        # Obtaining the type of the subscript
        int_99604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1548, 8), 'int')
        # Getting the type of 'xy_pixel' (line 1548)
        xy_pixel_99605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 15), 'xy_pixel')
        # Obtaining the member '__getitem__' of a type (line 1548)
        getitem___99606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1548, 8), xy_pixel_99605, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1548)
        subscript_call_result_99607 = invoke(stypy.reporting.localization.Localization(__file__, 1548, 8), getitem___99606, int_99604)
        
        # Assigning a type to the variable 'tuple_var_assignment_95836' (line 1548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1548, 8), 'tuple_var_assignment_95836', subscript_call_result_99607)
        
        # Assigning a Name to a Name (line 1548):
        # Getting the type of 'tuple_var_assignment_95835' (line 1548)
        tuple_var_assignment_95835_99608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 8), 'tuple_var_assignment_95835')
        # Assigning a type to the variable 'x' (line 1548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1548, 8), 'x', tuple_var_assignment_95835_99608)
        
        # Assigning a Name to a Name (line 1548):
        # Getting the type of 'tuple_var_assignment_95836' (line 1548)
        tuple_var_assignment_95836_99609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 8), 'tuple_var_assignment_95836')
        # Assigning a type to the variable 'y' (line 1548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1548, 11), 'y', tuple_var_assignment_95836_99609)
        
        # Assigning a Tuple to a Tuple (line 1550):
        
        # Assigning a Name to a Name (line 1550):
        # Getting the type of 'x' (line 1550)
        x_99610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 19), 'x')
        # Assigning a type to the variable 'tuple_assignment_95837' (line 1550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 8), 'tuple_assignment_95837', x_99610)
        
        # Assigning a Name to a Name (line 1550):
        # Getting the type of 'y' (line 1550)
        y_99611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 22), 'y')
        # Assigning a type to the variable 'tuple_assignment_95838' (line 1550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 8), 'tuple_assignment_95838', y_99611)
        
        # Assigning a Name to a Name (line 1550):
        # Getting the type of 'tuple_assignment_95837' (line 1550)
        tuple_assignment_95837_99612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 8), 'tuple_assignment_95837')
        # Assigning a type to the variable 'ox1' (line 1550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 8), 'ox1', tuple_assignment_95837_99612)
        
        # Assigning a Name to a Name (line 1550):
        # Getting the type of 'tuple_assignment_95838' (line 1550)
        tuple_assignment_95838_99613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 8), 'tuple_assignment_95838')
        # Assigning a type to the variable 'oy1' (line 1550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 13), 'oy1', tuple_assignment_95838_99613)
        
        # Getting the type of 'self' (line 1552)
        self_99614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 11), 'self')
        # Obtaining the member 'arrowprops' of a type (line 1552)
        arrowprops_99615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1552, 11), self_99614, 'arrowprops')
        # Testing the type of an if condition (line 1552)
        if_condition_99616 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1552, 8), arrowprops_99615)
        # Assigning a type to the variable 'if_condition_99616' (line 1552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1552, 8), 'if_condition_99616', if_condition_99616)
        # SSA begins for if statement (line 1552)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1553):
        
        # Assigning a Name to a Name (line 1553):
        # Getting the type of 'x' (line 1553)
        x_99617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 21), 'x')
        # Assigning a type to the variable 'tuple_assignment_95839' (line 1553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1553, 12), 'tuple_assignment_95839', x_99617)
        
        # Assigning a Name to a Name (line 1553):
        # Getting the type of 'y' (line 1553)
        y_99618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 24), 'y')
        # Assigning a type to the variable 'tuple_assignment_95840' (line 1553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1553, 12), 'tuple_assignment_95840', y_99618)
        
        # Assigning a Name to a Name (line 1553):
        # Getting the type of 'tuple_assignment_95839' (line 1553)
        tuple_assignment_95839_99619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 12), 'tuple_assignment_95839')
        # Assigning a type to the variable 'x0' (line 1553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1553, 12), 'x0', tuple_assignment_95839_99619)
        
        # Assigning a Name to a Name (line 1553):
        # Getting the type of 'tuple_assignment_95840' (line 1553)
        tuple_assignment_95840_99620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 12), 'tuple_assignment_95840')
        # Assigning a type to the variable 'y0' (line 1553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1553, 16), 'y0', tuple_assignment_95840_99620)
        
        # Assigning a Call to a Name (line 1555):
        
        # Assigning a Call to a Name (line 1555):
        
        # Call to copy(...): (line 1555)
        # Processing the call keyword arguments (line 1555)
        kwargs_99624 = {}
        # Getting the type of 'self' (line 1555)
        self_99621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 16), 'self', False)
        # Obtaining the member 'arrowprops' of a type (line 1555)
        arrowprops_99622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1555, 16), self_99621, 'arrowprops')
        # Obtaining the member 'copy' of a type (line 1555)
        copy_99623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1555, 16), arrowprops_99622, 'copy')
        # Calling copy(args, kwargs) (line 1555)
        copy_call_result_99625 = invoke(stypy.reporting.localization.Localization(__file__, 1555, 16), copy_99623, *[], **kwargs_99624)
        
        # Assigning a type to the variable 'd' (line 1555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1555, 12), 'd', copy_call_result_99625)
        
        # Assigning a Attribute to a Name (line 1562):
        
        # Assigning a Attribute to a Name (line 1562):
        # Getting the type of 'self' (line 1562)
        self_99626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 21), 'self')
        # Obtaining the member '_arrow_relpos' of a type (line 1562)
        _arrow_relpos_99627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1562, 21), self_99626, '_arrow_relpos')
        # Assigning a type to the variable 'relpos' (line 1562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1562, 12), 'relpos', _arrow_relpos_99627)
        
        # Assigning a BinOp to a Name (line 1564):
        
        # Assigning a BinOp to a Name (line 1564):
        # Getting the type of 'bbox' (line 1564)
        bbox_99628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 18), 'bbox')
        # Obtaining the member 'x0' of a type (line 1564)
        x0_99629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1564, 18), bbox_99628, 'x0')
        # Getting the type of 'bbox' (line 1564)
        bbox_99630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 28), 'bbox')
        # Obtaining the member 'width' of a type (line 1564)
        width_99631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1564, 28), bbox_99630, 'width')
        
        # Obtaining the type of the subscript
        int_99632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1564, 48), 'int')
        # Getting the type of 'relpos' (line 1564)
        relpos_99633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 41), 'relpos')
        # Obtaining the member '__getitem__' of a type (line 1564)
        getitem___99634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1564, 41), relpos_99633, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1564)
        subscript_call_result_99635 = invoke(stypy.reporting.localization.Localization(__file__, 1564, 41), getitem___99634, int_99632)
        
        # Applying the binary operator '*' (line 1564)
        result_mul_99636 = python_operator(stypy.reporting.localization.Localization(__file__, 1564, 28), '*', width_99631, subscript_call_result_99635)
        
        # Applying the binary operator '+' (line 1564)
        result_add_99637 = python_operator(stypy.reporting.localization.Localization(__file__, 1564, 18), '+', x0_99629, result_mul_99636)
        
        # Assigning a type to the variable 'ox0' (line 1564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1564, 12), 'ox0', result_add_99637)
        
        # Assigning a BinOp to a Name (line 1565):
        
        # Assigning a BinOp to a Name (line 1565):
        # Getting the type of 'bbox' (line 1565)
        bbox_99638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 18), 'bbox')
        # Obtaining the member 'y0' of a type (line 1565)
        y0_99639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 18), bbox_99638, 'y0')
        # Getting the type of 'bbox' (line 1565)
        bbox_99640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 28), 'bbox')
        # Obtaining the member 'height' of a type (line 1565)
        height_99641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 28), bbox_99640, 'height')
        
        # Obtaining the type of the subscript
        int_99642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1565, 49), 'int')
        # Getting the type of 'relpos' (line 1565)
        relpos_99643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 42), 'relpos')
        # Obtaining the member '__getitem__' of a type (line 1565)
        getitem___99644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 42), relpos_99643, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1565)
        subscript_call_result_99645 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 42), getitem___99644, int_99642)
        
        # Applying the binary operator '*' (line 1565)
        result_mul_99646 = python_operator(stypy.reporting.localization.Localization(__file__, 1565, 28), '*', height_99641, subscript_call_result_99645)
        
        # Applying the binary operator '+' (line 1565)
        result_add_99647 = python_operator(stypy.reporting.localization.Localization(__file__, 1565, 18), '+', y0_99639, result_mul_99646)
        
        # Assigning a type to the variable 'oy0' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 12), 'oy0', result_add_99647)
        
        # Call to set_positions(...): (line 1573)
        # Processing the call arguments (line 1573)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1573)
        tuple_99651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1573, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1573)
        # Adding element type (line 1573)
        # Getting the type of 'ox0' (line 1573)
        ox0_99652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 44), 'ox0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1573, 44), tuple_99651, ox0_99652)
        # Adding element type (line 1573)
        # Getting the type of 'oy0' (line 1573)
        oy0_99653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 49), 'oy0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1573, 44), tuple_99651, oy0_99653)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1573)
        tuple_99654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1573, 56), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1573)
        # Adding element type (line 1573)
        # Getting the type of 'ox1' (line 1573)
        ox1_99655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 56), 'ox1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1573, 56), tuple_99654, ox1_99655)
        # Adding element type (line 1573)
        # Getting the type of 'oy1' (line 1573)
        oy1_99656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 61), 'oy1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1573, 56), tuple_99654, oy1_99656)
        
        # Processing the call keyword arguments (line 1573)
        kwargs_99657 = {}
        # Getting the type of 'self' (line 1573)
        self_99648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 12), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 1573)
        arrow_patch_99649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 12), self_99648, 'arrow_patch')
        # Obtaining the member 'set_positions' of a type (line 1573)
        set_positions_99650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 12), arrow_patch_99649, 'set_positions')
        # Calling set_positions(args, kwargs) (line 1573)
        set_positions_call_result_99658 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 12), set_positions_99650, *[tuple_99651, tuple_99654], **kwargs_99657)
        
        
        # Assigning a Call to a Name (line 1574):
        
        # Assigning a Call to a Name (line 1574):
        
        # Call to get_size_in_points(...): (line 1574)
        # Processing the call keyword arguments (line 1574)
        kwargs_99662 = {}
        # Getting the type of 'self' (line 1574)
        self_99659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 17), 'self', False)
        # Obtaining the member 'prop' of a type (line 1574)
        prop_99660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1574, 17), self_99659, 'prop')
        # Obtaining the member 'get_size_in_points' of a type (line 1574)
        get_size_in_points_99661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1574, 17), prop_99660, 'get_size_in_points')
        # Calling get_size_in_points(args, kwargs) (line 1574)
        get_size_in_points_call_result_99663 = invoke(stypy.reporting.localization.Localization(__file__, 1574, 17), get_size_in_points_99661, *[], **kwargs_99662)
        
        # Assigning a type to the variable 'fs' (line 1574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1574, 12), 'fs', get_size_in_points_call_result_99663)
        
        # Assigning a Call to a Name (line 1575):
        
        # Assigning a Call to a Name (line 1575):
        
        # Call to pop(...): (line 1575)
        # Processing the call arguments (line 1575)
        unicode_99666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1575, 35), 'unicode', u'mutation_scale')
        # Getting the type of 'fs' (line 1575)
        fs_99667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 53), 'fs', False)
        # Processing the call keyword arguments (line 1575)
        kwargs_99668 = {}
        # Getting the type of 'd' (line 1575)
        d_99664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 29), 'd', False)
        # Obtaining the member 'pop' of a type (line 1575)
        pop_99665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 29), d_99664, 'pop')
        # Calling pop(args, kwargs) (line 1575)
        pop_call_result_99669 = invoke(stypy.reporting.localization.Localization(__file__, 1575, 29), pop_99665, *[unicode_99666, fs_99667], **kwargs_99668)
        
        # Assigning a type to the variable 'mutation_scale' (line 1575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1575, 12), 'mutation_scale', pop_call_result_99669)
        
        # Assigning a Call to a Name (line 1576):
        
        # Assigning a Call to a Name (line 1576):
        
        # Call to points_to_pixels(...): (line 1576)
        # Processing the call arguments (line 1576)
        # Getting the type of 'mutation_scale' (line 1576)
        mutation_scale_99672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 55), 'mutation_scale', False)
        # Processing the call keyword arguments (line 1576)
        kwargs_99673 = {}
        # Getting the type of 'renderer' (line 1576)
        renderer_99670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 29), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 1576)
        points_to_pixels_99671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1576, 29), renderer_99670, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 1576)
        points_to_pixels_call_result_99674 = invoke(stypy.reporting.localization.Localization(__file__, 1576, 29), points_to_pixels_99671, *[mutation_scale_99672], **kwargs_99673)
        
        # Assigning a type to the variable 'mutation_scale' (line 1576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1576, 12), 'mutation_scale', points_to_pixels_call_result_99674)
        
        # Call to set_mutation_scale(...): (line 1577)
        # Processing the call arguments (line 1577)
        # Getting the type of 'mutation_scale' (line 1577)
        mutation_scale_99678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 48), 'mutation_scale', False)
        # Processing the call keyword arguments (line 1577)
        kwargs_99679 = {}
        # Getting the type of 'self' (line 1577)
        self_99675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 12), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 1577)
        arrow_patch_99676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 12), self_99675, 'arrow_patch')
        # Obtaining the member 'set_mutation_scale' of a type (line 1577)
        set_mutation_scale_99677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 12), arrow_patch_99676, 'set_mutation_scale')
        # Calling set_mutation_scale(args, kwargs) (line 1577)
        set_mutation_scale_call_result_99680 = invoke(stypy.reporting.localization.Localization(__file__, 1577, 12), set_mutation_scale_99677, *[mutation_scale_99678], **kwargs_99679)
        
        
        # Assigning a Call to a Name (line 1579):
        
        # Assigning a Call to a Name (line 1579):
        
        # Call to pop(...): (line 1579)
        # Processing the call arguments (line 1579)
        unicode_99683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1579, 27), 'unicode', u'patchA')
        # Getting the type of 'self' (line 1579)
        self_99684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1579, 37), 'self', False)
        # Obtaining the member 'patch' of a type (line 1579)
        patch_99685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1579, 37), self_99684, 'patch')
        # Processing the call keyword arguments (line 1579)
        kwargs_99686 = {}
        # Getting the type of 'd' (line 1579)
        d_99681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1579, 21), 'd', False)
        # Obtaining the member 'pop' of a type (line 1579)
        pop_99682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1579, 21), d_99681, 'pop')
        # Calling pop(args, kwargs) (line 1579)
        pop_call_result_99687 = invoke(stypy.reporting.localization.Localization(__file__, 1579, 21), pop_99682, *[unicode_99683, patch_99685], **kwargs_99686)
        
        # Assigning a type to the variable 'patchA' (line 1579)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1579, 12), 'patchA', pop_call_result_99687)
        
        # Call to set_patchA(...): (line 1580)
        # Processing the call arguments (line 1580)
        # Getting the type of 'patchA' (line 1580)
        patchA_99691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 40), 'patchA', False)
        # Processing the call keyword arguments (line 1580)
        kwargs_99692 = {}
        # Getting the type of 'self' (line 1580)
        self_99688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 12), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 1580)
        arrow_patch_99689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1580, 12), self_99688, 'arrow_patch')
        # Obtaining the member 'set_patchA' of a type (line 1580)
        set_patchA_99690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1580, 12), arrow_patch_99689, 'set_patchA')
        # Calling set_patchA(args, kwargs) (line 1580)
        set_patchA_call_result_99693 = invoke(stypy.reporting.localization.Localization(__file__, 1580, 12), set_patchA_99690, *[patchA_99691], **kwargs_99692)
        
        # SSA join for if statement (line 1552)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_update_position_xybox(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_position_xybox' in the type store
        # Getting the type of 'stypy_return_type' (line 1522)
        stypy_return_type_99694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99694)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_position_xybox'
        return stypy_return_type_99694


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 1582, 4, False)
        # Assigning a type to the variable 'self' (line 1583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AnnotationBbox.draw.__dict__.__setitem__('stypy_localization', localization)
        AnnotationBbox.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AnnotationBbox.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        AnnotationBbox.draw.__dict__.__setitem__('stypy_function_name', 'AnnotationBbox.draw')
        AnnotationBbox.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        AnnotationBbox.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        AnnotationBbox.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AnnotationBbox.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        AnnotationBbox.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        AnnotationBbox.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AnnotationBbox.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AnnotationBbox.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_99695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1585, (-1)), 'unicode', u'\n        Draw the :class:`Annotation` object to the given *renderer*.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1587)
        # Getting the type of 'renderer' (line 1587)
        renderer_99696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 8), 'renderer')
        # Getting the type of 'None' (line 1587)
        None_99697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 27), 'None')
        
        (may_be_99698, more_types_in_union_99699) = may_not_be_none(renderer_99696, None_99697)

        if may_be_99698:

            if more_types_in_union_99699:
                # Runtime conditional SSA (line 1587)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1588):
            
            # Assigning a Name to a Attribute (line 1588):
            # Getting the type of 'renderer' (line 1588)
            renderer_99700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 29), 'renderer')
            # Getting the type of 'self' (line 1588)
            self_99701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 12), 'self')
            # Setting the type of the member '_renderer' of a type (line 1588)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1588, 12), self_99701, '_renderer', renderer_99700)

            if more_types_in_union_99699:
                # SSA join for if statement (line 1587)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to get_visible(...): (line 1589)
        # Processing the call keyword arguments (line 1589)
        kwargs_99704 = {}
        # Getting the type of 'self' (line 1589)
        self_99702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 1589)
        get_visible_99703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1589, 15), self_99702, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1589)
        get_visible_call_result_99705 = invoke(stypy.reporting.localization.Localization(__file__, 1589, 15), get_visible_99703, *[], **kwargs_99704)
        
        # Applying the 'not' unary operator (line 1589)
        result_not__99706 = python_operator(stypy.reporting.localization.Localization(__file__, 1589, 11), 'not', get_visible_call_result_99705)
        
        # Testing the type of an if condition (line 1589)
        if_condition_99707 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1589, 8), result_not__99706)
        # Assigning a type to the variable 'if_condition_99707' (line 1589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1589, 8), 'if_condition_99707', if_condition_99707)
        # SSA begins for if statement (line 1589)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1590, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1589)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1592):
        
        # Assigning a Call to a Name (line 1592):
        
        # Call to _get_position_xy(...): (line 1592)
        # Processing the call arguments (line 1592)
        # Getting the type of 'renderer' (line 1592)
        renderer_99710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 41), 'renderer', False)
        # Processing the call keyword arguments (line 1592)
        kwargs_99711 = {}
        # Getting the type of 'self' (line 1592)
        self_99708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 19), 'self', False)
        # Obtaining the member '_get_position_xy' of a type (line 1592)
        _get_position_xy_99709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1592, 19), self_99708, '_get_position_xy')
        # Calling _get_position_xy(args, kwargs) (line 1592)
        _get_position_xy_call_result_99712 = invoke(stypy.reporting.localization.Localization(__file__, 1592, 19), _get_position_xy_99709, *[renderer_99710], **kwargs_99711)
        
        # Assigning a type to the variable 'xy_pixel' (line 1592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1592, 8), 'xy_pixel', _get_position_xy_call_result_99712)
        
        
        
        # Call to _check_xy(...): (line 1594)
        # Processing the call arguments (line 1594)
        # Getting the type of 'renderer' (line 1594)
        renderer_99715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 30), 'renderer', False)
        # Getting the type of 'xy_pixel' (line 1594)
        xy_pixel_99716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 40), 'xy_pixel', False)
        # Processing the call keyword arguments (line 1594)
        kwargs_99717 = {}
        # Getting the type of 'self' (line 1594)
        self_99713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 15), 'self', False)
        # Obtaining the member '_check_xy' of a type (line 1594)
        _check_xy_99714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1594, 15), self_99713, '_check_xy')
        # Calling _check_xy(args, kwargs) (line 1594)
        _check_xy_call_result_99718 = invoke(stypy.reporting.localization.Localization(__file__, 1594, 15), _check_xy_99714, *[renderer_99715, xy_pixel_99716], **kwargs_99717)
        
        # Applying the 'not' unary operator (line 1594)
        result_not__99719 = python_operator(stypy.reporting.localization.Localization(__file__, 1594, 11), 'not', _check_xy_call_result_99718)
        
        # Testing the type of an if condition (line 1594)
        if_condition_99720 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1594, 8), result_not__99719)
        # Assigning a type to the variable 'if_condition_99720' (line 1594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 8), 'if_condition_99720', if_condition_99720)
        # SSA begins for if statement (line 1594)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1595, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1594)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to update_positions(...): (line 1597)
        # Processing the call arguments (line 1597)
        # Getting the type of 'renderer' (line 1597)
        renderer_99723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 30), 'renderer', False)
        # Processing the call keyword arguments (line 1597)
        kwargs_99724 = {}
        # Getting the type of 'self' (line 1597)
        self_99721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 8), 'self', False)
        # Obtaining the member 'update_positions' of a type (line 1597)
        update_positions_99722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1597, 8), self_99721, 'update_positions')
        # Calling update_positions(args, kwargs) (line 1597)
        update_positions_call_result_99725 = invoke(stypy.reporting.localization.Localization(__file__, 1597, 8), update_positions_99722, *[renderer_99723], **kwargs_99724)
        
        
        
        # Getting the type of 'self' (line 1599)
        self_99726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 11), 'self')
        # Obtaining the member 'arrow_patch' of a type (line 1599)
        arrow_patch_99727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1599, 11), self_99726, 'arrow_patch')
        # Getting the type of 'None' (line 1599)
        None_99728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 35), 'None')
        # Applying the binary operator 'isnot' (line 1599)
        result_is_not_99729 = python_operator(stypy.reporting.localization.Localization(__file__, 1599, 11), 'isnot', arrow_patch_99727, None_99728)
        
        # Testing the type of an if condition (line 1599)
        if_condition_99730 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1599, 8), result_is_not_99729)
        # Assigning a type to the variable 'if_condition_99730' (line 1599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 8), 'if_condition_99730', if_condition_99730)
        # SSA begins for if statement (line 1599)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1600)
        self_99731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 15), 'self')
        # Obtaining the member 'arrow_patch' of a type (line 1600)
        arrow_patch_99732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1600, 15), self_99731, 'arrow_patch')
        # Obtaining the member 'figure' of a type (line 1600)
        figure_99733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1600, 15), arrow_patch_99732, 'figure')
        # Getting the type of 'None' (line 1600)
        None_99734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 42), 'None')
        # Applying the binary operator 'is' (line 1600)
        result_is__99735 = python_operator(stypy.reporting.localization.Localization(__file__, 1600, 15), 'is', figure_99733, None_99734)
        
        
        # Getting the type of 'self' (line 1600)
        self_99736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 51), 'self')
        # Obtaining the member 'figure' of a type (line 1600)
        figure_99737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1600, 51), self_99736, 'figure')
        # Getting the type of 'None' (line 1600)
        None_99738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 70), 'None')
        # Applying the binary operator 'isnot' (line 1600)
        result_is_not_99739 = python_operator(stypy.reporting.localization.Localization(__file__, 1600, 51), 'isnot', figure_99737, None_99738)
        
        # Applying the binary operator 'and' (line 1600)
        result_and_keyword_99740 = python_operator(stypy.reporting.localization.Localization(__file__, 1600, 15), 'and', result_is__99735, result_is_not_99739)
        
        # Testing the type of an if condition (line 1600)
        if_condition_99741 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1600, 12), result_and_keyword_99740)
        # Assigning a type to the variable 'if_condition_99741' (line 1600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1600, 12), 'if_condition_99741', if_condition_99741)
        # SSA begins for if statement (line 1600)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 1601):
        
        # Assigning a Attribute to a Attribute (line 1601):
        # Getting the type of 'self' (line 1601)
        self_99742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 42), 'self')
        # Obtaining the member 'figure' of a type (line 1601)
        figure_99743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1601, 42), self_99742, 'figure')
        # Getting the type of 'self' (line 1601)
        self_99744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 16), 'self')
        # Obtaining the member 'arrow_patch' of a type (line 1601)
        arrow_patch_99745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1601, 16), self_99744, 'arrow_patch')
        # Setting the type of the member 'figure' of a type (line 1601)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1601, 16), arrow_patch_99745, 'figure', figure_99743)
        # SSA join for if statement (line 1600)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw(...): (line 1602)
        # Processing the call arguments (line 1602)
        # Getting the type of 'renderer' (line 1602)
        renderer_99749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 34), 'renderer', False)
        # Processing the call keyword arguments (line 1602)
        kwargs_99750 = {}
        # Getting the type of 'self' (line 1602)
        self_99746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 12), 'self', False)
        # Obtaining the member 'arrow_patch' of a type (line 1602)
        arrow_patch_99747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1602, 12), self_99746, 'arrow_patch')
        # Obtaining the member 'draw' of a type (line 1602)
        draw_99748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1602, 12), arrow_patch_99747, 'draw')
        # Calling draw(args, kwargs) (line 1602)
        draw_call_result_99751 = invoke(stypy.reporting.localization.Localization(__file__, 1602, 12), draw_99748, *[renderer_99749], **kwargs_99750)
        
        # SSA join for if statement (line 1599)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1604)
        self_99752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 11), 'self')
        # Obtaining the member '_drawFrame' of a type (line 1604)
        _drawFrame_99753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1604, 11), self_99752, '_drawFrame')
        # Testing the type of an if condition (line 1604)
        if_condition_99754 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1604, 8), _drawFrame_99753)
        # Assigning a type to the variable 'if_condition_99754' (line 1604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1604, 8), 'if_condition_99754', if_condition_99754)
        # SSA begins for if statement (line 1604)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 1605)
        # Processing the call arguments (line 1605)
        # Getting the type of 'renderer' (line 1605)
        renderer_99758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 28), 'renderer', False)
        # Processing the call keyword arguments (line 1605)
        kwargs_99759 = {}
        # Getting the type of 'self' (line 1605)
        self_99755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 12), 'self', False)
        # Obtaining the member 'patch' of a type (line 1605)
        patch_99756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1605, 12), self_99755, 'patch')
        # Obtaining the member 'draw' of a type (line 1605)
        draw_99757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1605, 12), patch_99756, 'draw')
        # Calling draw(args, kwargs) (line 1605)
        draw_call_result_99760 = invoke(stypy.reporting.localization.Localization(__file__, 1605, 12), draw_99757, *[renderer_99758], **kwargs_99759)
        
        # SSA join for if statement (line 1604)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw(...): (line 1607)
        # Processing the call arguments (line 1607)
        # Getting the type of 'renderer' (line 1607)
        renderer_99764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 28), 'renderer', False)
        # Processing the call keyword arguments (line 1607)
        kwargs_99765 = {}
        # Getting the type of 'self' (line 1607)
        self_99761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 8), 'self', False)
        # Obtaining the member 'offsetbox' of a type (line 1607)
        offsetbox_99762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1607, 8), self_99761, 'offsetbox')
        # Obtaining the member 'draw' of a type (line 1607)
        draw_99763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1607, 8), offsetbox_99762, 'draw')
        # Calling draw(args, kwargs) (line 1607)
        draw_call_result_99766 = invoke(stypy.reporting.localization.Localization(__file__, 1607, 8), draw_99763, *[renderer_99764], **kwargs_99765)
        
        
        # Assigning a Name to a Attribute (line 1608):
        
        # Assigning a Name to a Attribute (line 1608):
        # Getting the type of 'False' (line 1608)
        False_99767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 21), 'False')
        # Getting the type of 'self' (line 1608)
        self_99768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1608)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1608, 8), self_99768, 'stale', False_99767)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1582)
        stypy_return_type_99769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99769)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_99769


# Assigning a type to the variable 'AnnotationBbox' (line 1369)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1369, 0), 'AnnotationBbox', AnnotationBbox)

# Assigning a Num to a Name (line 1373):
int_99770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1373, 13), 'int')
# Getting the type of 'AnnotationBbox'
AnnotationBbox_99771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'AnnotationBbox')
# Setting the type of the member 'zorder' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), AnnotationBbox_99771, 'zorder', int_99770)
# Declaration of the 'DraggableBase' class

class DraggableBase(object, ):
    unicode_99772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1643, (-1)), 'unicode', u'\n    helper code for a draggable artist (legend, offsetbox)\n    The derived class must override following two method.\n\n      def saveoffset(self):\n          pass\n\n      def update_offset(self, dx, dy):\n          pass\n\n    *saveoffset* is called when the object is picked for dragging and it is\n    meant to save reference position of the artist.\n\n    *update_offset* is called during the dragging. dx and dy is the pixel\n     offset from the point where the mouse drag started.\n\n    Optionally you may override following two methods.\n\n      def artist_picker(self, artist, evt):\n          return self.ref_artist.contains(evt)\n\n      def finalize_offset(self):\n          pass\n\n    *artist_picker* is a picker method that will be\n     used. *finalize_offset* is called when the mouse is released. In\n     current implementation of DraggableLegend and DraggableAnnotation,\n     *update_offset* places the artists simply in display\n     coordinates. And *finalize_offset* recalculate their position in\n     the normalized axes coordinate and set a relavant attribute.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1644)
        False_99773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 44), 'False')
        defaults = [False_99773]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1644, 4, False)
        # Assigning a type to the variable 'self' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableBase.__init__', ['ref_artist', 'use_blit'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ref_artist', 'use_blit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1645):
        
        # Assigning a Name to a Attribute (line 1645):
        # Getting the type of 'ref_artist' (line 1645)
        ref_artist_99774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 26), 'ref_artist')
        # Getting the type of 'self' (line 1645)
        self_99775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'self')
        # Setting the type of the member 'ref_artist' of a type (line 1645)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1645, 8), self_99775, 'ref_artist', ref_artist_99774)
        
        # Assigning a Name to a Attribute (line 1646):
        
        # Assigning a Name to a Attribute (line 1646):
        # Getting the type of 'False' (line 1646)
        False_99776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 26), 'False')
        # Getting the type of 'self' (line 1646)
        self_99777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 8), 'self')
        # Setting the type of the member 'got_artist' of a type (line 1646)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1646, 8), self_99777, 'got_artist', False_99776)
        
        # Assigning a Attribute to a Attribute (line 1648):
        
        # Assigning a Attribute to a Attribute (line 1648):
        # Getting the type of 'self' (line 1648)
        self_99778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 22), 'self')
        # Obtaining the member 'ref_artist' of a type (line 1648)
        ref_artist_99779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 22), self_99778, 'ref_artist')
        # Obtaining the member 'figure' of a type (line 1648)
        figure_99780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 22), ref_artist_99779, 'figure')
        # Obtaining the member 'canvas' of a type (line 1648)
        canvas_99781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 22), figure_99780, 'canvas')
        # Getting the type of 'self' (line 1648)
        self_99782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 1648)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 8), self_99782, 'canvas', canvas_99781)
        
        # Assigning a BoolOp to a Attribute (line 1649):
        
        # Assigning a BoolOp to a Attribute (line 1649):
        
        # Evaluating a boolean operation
        # Getting the type of 'use_blit' (line 1649)
        use_blit_99783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 25), 'use_blit')
        # Getting the type of 'self' (line 1649)
        self_99784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 38), 'self')
        # Obtaining the member 'canvas' of a type (line 1649)
        canvas_99785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 38), self_99784, 'canvas')
        # Obtaining the member 'supports_blit' of a type (line 1649)
        supports_blit_99786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 38), canvas_99785, 'supports_blit')
        # Applying the binary operator 'and' (line 1649)
        result_and_keyword_99787 = python_operator(stypy.reporting.localization.Localization(__file__, 1649, 25), 'and', use_blit_99783, supports_blit_99786)
        
        # Getting the type of 'self' (line 1649)
        self_99788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 8), 'self')
        # Setting the type of the member '_use_blit' of a type (line 1649)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 8), self_99788, '_use_blit', result_and_keyword_99787)
        
        # Assigning a Call to a Name (line 1651):
        
        # Assigning a Call to a Name (line 1651):
        
        # Call to mpl_connect(...): (line 1651)
        # Processing the call arguments (line 1651)
        unicode_99792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1651, 37), 'unicode', u'pick_event')
        # Getting the type of 'self' (line 1651)
        self_99793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 51), 'self', False)
        # Obtaining the member 'on_pick' of a type (line 1651)
        on_pick_99794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1651, 51), self_99793, 'on_pick')
        # Processing the call keyword arguments (line 1651)
        kwargs_99795 = {}
        # Getting the type of 'self' (line 1651)
        self_99789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 13), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1651)
        canvas_99790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1651, 13), self_99789, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 1651)
        mpl_connect_99791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1651, 13), canvas_99790, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1651)
        mpl_connect_call_result_99796 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 13), mpl_connect_99791, *[unicode_99792, on_pick_99794], **kwargs_99795)
        
        # Assigning a type to the variable 'c2' (line 1651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1651, 8), 'c2', mpl_connect_call_result_99796)
        
        # Assigning a Call to a Name (line 1652):
        
        # Assigning a Call to a Name (line 1652):
        
        # Call to mpl_connect(...): (line 1652)
        # Processing the call arguments (line 1652)
        unicode_99800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1652, 37), 'unicode', u'button_release_event')
        # Getting the type of 'self' (line 1652)
        self_99801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 61), 'self', False)
        # Obtaining the member 'on_release' of a type (line 1652)
        on_release_99802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 61), self_99801, 'on_release')
        # Processing the call keyword arguments (line 1652)
        kwargs_99803 = {}
        # Getting the type of 'self' (line 1652)
        self_99797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 13), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1652)
        canvas_99798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 13), self_99797, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 1652)
        mpl_connect_99799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 13), canvas_99798, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1652)
        mpl_connect_call_result_99804 = invoke(stypy.reporting.localization.Localization(__file__, 1652, 13), mpl_connect_99799, *[unicode_99800, on_release_99802], **kwargs_99803)
        
        # Assigning a type to the variable 'c3' (line 1652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1652, 8), 'c3', mpl_connect_call_result_99804)
        
        # Call to set_picker(...): (line 1654)
        # Processing the call arguments (line 1654)
        # Getting the type of 'self' (line 1654)
        self_99807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 30), 'self', False)
        # Obtaining the member 'artist_picker' of a type (line 1654)
        artist_picker_99808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 30), self_99807, 'artist_picker')
        # Processing the call keyword arguments (line 1654)
        kwargs_99809 = {}
        # Getting the type of 'ref_artist' (line 1654)
        ref_artist_99805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 8), 'ref_artist', False)
        # Obtaining the member 'set_picker' of a type (line 1654)
        set_picker_99806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 8), ref_artist_99805, 'set_picker')
        # Calling set_picker(args, kwargs) (line 1654)
        set_picker_call_result_99810 = invoke(stypy.reporting.localization.Localization(__file__, 1654, 8), set_picker_99806, *[artist_picker_99808], **kwargs_99809)
        
        
        # Assigning a List to a Attribute (line 1655):
        
        # Assigning a List to a Attribute (line 1655):
        
        # Obtaining an instance of the builtin type 'list' (line 1655)
        list_99811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1655, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1655)
        # Adding element type (line 1655)
        # Getting the type of 'c2' (line 1655)
        c2_99812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 21), 'c2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1655, 20), list_99811, c2_99812)
        # Adding element type (line 1655)
        # Getting the type of 'c3' (line 1655)
        c3_99813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 25), 'c3')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1655, 20), list_99811, c3_99813)
        
        # Getting the type of 'self' (line 1655)
        self_99814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 8), 'self')
        # Setting the type of the member 'cids' of a type (line 1655)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1655, 8), self_99814, 'cids', list_99811)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def on_motion(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'on_motion'
        module_type_store = module_type_store.open_function_context('on_motion', 1657, 4, False)
        # Assigning a type to the variable 'self' (line 1658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1658, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DraggableBase.on_motion.__dict__.__setitem__('stypy_localization', localization)
        DraggableBase.on_motion.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DraggableBase.on_motion.__dict__.__setitem__('stypy_type_store', module_type_store)
        DraggableBase.on_motion.__dict__.__setitem__('stypy_function_name', 'DraggableBase.on_motion')
        DraggableBase.on_motion.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        DraggableBase.on_motion.__dict__.__setitem__('stypy_varargs_param_name', None)
        DraggableBase.on_motion.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DraggableBase.on_motion.__dict__.__setitem__('stypy_call_defaults', defaults)
        DraggableBase.on_motion.__dict__.__setitem__('stypy_call_varargs', varargs)
        DraggableBase.on_motion.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DraggableBase.on_motion.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableBase.on_motion', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'on_motion', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'on_motion(...)' code ##################

        
        # Getting the type of 'self' (line 1658)
        self_99815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 11), 'self')
        # Obtaining the member 'got_artist' of a type (line 1658)
        got_artist_99816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1658, 11), self_99815, 'got_artist')
        # Testing the type of an if condition (line 1658)
        if_condition_99817 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1658, 8), got_artist_99816)
        # Assigning a type to the variable 'if_condition_99817' (line 1658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1658, 8), 'if_condition_99817', if_condition_99817)
        # SSA begins for if statement (line 1658)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1659):
        
        # Assigning a BinOp to a Name (line 1659):
        # Getting the type of 'evt' (line 1659)
        evt_99818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 17), 'evt')
        # Obtaining the member 'x' of a type (line 1659)
        x_99819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1659, 17), evt_99818, 'x')
        # Getting the type of 'self' (line 1659)
        self_99820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 25), 'self')
        # Obtaining the member 'mouse_x' of a type (line 1659)
        mouse_x_99821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1659, 25), self_99820, 'mouse_x')
        # Applying the binary operator '-' (line 1659)
        result_sub_99822 = python_operator(stypy.reporting.localization.Localization(__file__, 1659, 17), '-', x_99819, mouse_x_99821)
        
        # Assigning a type to the variable 'dx' (line 1659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 12), 'dx', result_sub_99822)
        
        # Assigning a BinOp to a Name (line 1660):
        
        # Assigning a BinOp to a Name (line 1660):
        # Getting the type of 'evt' (line 1660)
        evt_99823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 17), 'evt')
        # Obtaining the member 'y' of a type (line 1660)
        y_99824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1660, 17), evt_99823, 'y')
        # Getting the type of 'self' (line 1660)
        self_99825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 25), 'self')
        # Obtaining the member 'mouse_y' of a type (line 1660)
        mouse_y_99826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1660, 25), self_99825, 'mouse_y')
        # Applying the binary operator '-' (line 1660)
        result_sub_99827 = python_operator(stypy.reporting.localization.Localization(__file__, 1660, 17), '-', y_99824, mouse_y_99826)
        
        # Assigning a type to the variable 'dy' (line 1660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1660, 12), 'dy', result_sub_99827)
        
        # Call to update_offset(...): (line 1661)
        # Processing the call arguments (line 1661)
        # Getting the type of 'dx' (line 1661)
        dx_99830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 31), 'dx', False)
        # Getting the type of 'dy' (line 1661)
        dy_99831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 35), 'dy', False)
        # Processing the call keyword arguments (line 1661)
        kwargs_99832 = {}
        # Getting the type of 'self' (line 1661)
        self_99828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 12), 'self', False)
        # Obtaining the member 'update_offset' of a type (line 1661)
        update_offset_99829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1661, 12), self_99828, 'update_offset')
        # Calling update_offset(args, kwargs) (line 1661)
        update_offset_call_result_99833 = invoke(stypy.reporting.localization.Localization(__file__, 1661, 12), update_offset_99829, *[dx_99830, dy_99831], **kwargs_99832)
        
        
        # Call to draw(...): (line 1662)
        # Processing the call keyword arguments (line 1662)
        kwargs_99837 = {}
        # Getting the type of 'self' (line 1662)
        self_99834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1662)
        canvas_99835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1662, 12), self_99834, 'canvas')
        # Obtaining the member 'draw' of a type (line 1662)
        draw_99836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1662, 12), canvas_99835, 'draw')
        # Calling draw(args, kwargs) (line 1662)
        draw_call_result_99838 = invoke(stypy.reporting.localization.Localization(__file__, 1662, 12), draw_99836, *[], **kwargs_99837)
        
        # SSA join for if statement (line 1658)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'on_motion(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'on_motion' in the type store
        # Getting the type of 'stypy_return_type' (line 1657)
        stypy_return_type_99839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99839)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'on_motion'
        return stypy_return_type_99839


    @norecursion
    def on_motion_blit(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'on_motion_blit'
        module_type_store = module_type_store.open_function_context('on_motion_blit', 1664, 4, False)
        # Assigning a type to the variable 'self' (line 1665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1665, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DraggableBase.on_motion_blit.__dict__.__setitem__('stypy_localization', localization)
        DraggableBase.on_motion_blit.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DraggableBase.on_motion_blit.__dict__.__setitem__('stypy_type_store', module_type_store)
        DraggableBase.on_motion_blit.__dict__.__setitem__('stypy_function_name', 'DraggableBase.on_motion_blit')
        DraggableBase.on_motion_blit.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        DraggableBase.on_motion_blit.__dict__.__setitem__('stypy_varargs_param_name', None)
        DraggableBase.on_motion_blit.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DraggableBase.on_motion_blit.__dict__.__setitem__('stypy_call_defaults', defaults)
        DraggableBase.on_motion_blit.__dict__.__setitem__('stypy_call_varargs', varargs)
        DraggableBase.on_motion_blit.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DraggableBase.on_motion_blit.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableBase.on_motion_blit', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'on_motion_blit', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'on_motion_blit(...)' code ##################

        
        # Getting the type of 'self' (line 1665)
        self_99840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 11), 'self')
        # Obtaining the member 'got_artist' of a type (line 1665)
        got_artist_99841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1665, 11), self_99840, 'got_artist')
        # Testing the type of an if condition (line 1665)
        if_condition_99842 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1665, 8), got_artist_99841)
        # Assigning a type to the variable 'if_condition_99842' (line 1665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1665, 8), 'if_condition_99842', if_condition_99842)
        # SSA begins for if statement (line 1665)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1666):
        
        # Assigning a BinOp to a Name (line 1666):
        # Getting the type of 'evt' (line 1666)
        evt_99843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 17), 'evt')
        # Obtaining the member 'x' of a type (line 1666)
        x_99844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1666, 17), evt_99843, 'x')
        # Getting the type of 'self' (line 1666)
        self_99845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 25), 'self')
        # Obtaining the member 'mouse_x' of a type (line 1666)
        mouse_x_99846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1666, 25), self_99845, 'mouse_x')
        # Applying the binary operator '-' (line 1666)
        result_sub_99847 = python_operator(stypy.reporting.localization.Localization(__file__, 1666, 17), '-', x_99844, mouse_x_99846)
        
        # Assigning a type to the variable 'dx' (line 1666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1666, 12), 'dx', result_sub_99847)
        
        # Assigning a BinOp to a Name (line 1667):
        
        # Assigning a BinOp to a Name (line 1667):
        # Getting the type of 'evt' (line 1667)
        evt_99848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 17), 'evt')
        # Obtaining the member 'y' of a type (line 1667)
        y_99849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 17), evt_99848, 'y')
        # Getting the type of 'self' (line 1667)
        self_99850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 25), 'self')
        # Obtaining the member 'mouse_y' of a type (line 1667)
        mouse_y_99851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 25), self_99850, 'mouse_y')
        # Applying the binary operator '-' (line 1667)
        result_sub_99852 = python_operator(stypy.reporting.localization.Localization(__file__, 1667, 17), '-', y_99849, mouse_y_99851)
        
        # Assigning a type to the variable 'dy' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 12), 'dy', result_sub_99852)
        
        # Call to update_offset(...): (line 1668)
        # Processing the call arguments (line 1668)
        # Getting the type of 'dx' (line 1668)
        dx_99855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 31), 'dx', False)
        # Getting the type of 'dy' (line 1668)
        dy_99856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 35), 'dy', False)
        # Processing the call keyword arguments (line 1668)
        kwargs_99857 = {}
        # Getting the type of 'self' (line 1668)
        self_99853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 12), 'self', False)
        # Obtaining the member 'update_offset' of a type (line 1668)
        update_offset_99854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1668, 12), self_99853, 'update_offset')
        # Calling update_offset(args, kwargs) (line 1668)
        update_offset_call_result_99858 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 12), update_offset_99854, *[dx_99855, dy_99856], **kwargs_99857)
        
        
        # Call to restore_region(...): (line 1669)
        # Processing the call arguments (line 1669)
        # Getting the type of 'self' (line 1669)
        self_99862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 39), 'self', False)
        # Obtaining the member 'background' of a type (line 1669)
        background_99863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1669, 39), self_99862, 'background')
        # Processing the call keyword arguments (line 1669)
        kwargs_99864 = {}
        # Getting the type of 'self' (line 1669)
        self_99859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1669)
        canvas_99860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1669, 12), self_99859, 'canvas')
        # Obtaining the member 'restore_region' of a type (line 1669)
        restore_region_99861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1669, 12), canvas_99860, 'restore_region')
        # Calling restore_region(args, kwargs) (line 1669)
        restore_region_call_result_99865 = invoke(stypy.reporting.localization.Localization(__file__, 1669, 12), restore_region_99861, *[background_99863], **kwargs_99864)
        
        
        # Call to draw(...): (line 1670)
        # Processing the call arguments (line 1670)
        # Getting the type of 'self' (line 1670)
        self_99869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 33), 'self', False)
        # Obtaining the member 'ref_artist' of a type (line 1670)
        ref_artist_99870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 33), self_99869, 'ref_artist')
        # Obtaining the member 'figure' of a type (line 1670)
        figure_99871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 33), ref_artist_99870, 'figure')
        # Obtaining the member '_cachedRenderer' of a type (line 1670)
        _cachedRenderer_99872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 33), figure_99871, '_cachedRenderer')
        # Processing the call keyword arguments (line 1670)
        kwargs_99873 = {}
        # Getting the type of 'self' (line 1670)
        self_99866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 12), 'self', False)
        # Obtaining the member 'ref_artist' of a type (line 1670)
        ref_artist_99867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 12), self_99866, 'ref_artist')
        # Obtaining the member 'draw' of a type (line 1670)
        draw_99868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 12), ref_artist_99867, 'draw')
        # Calling draw(args, kwargs) (line 1670)
        draw_call_result_99874 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 12), draw_99868, *[_cachedRenderer_99872], **kwargs_99873)
        
        
        # Call to blit(...): (line 1671)
        # Processing the call arguments (line 1671)
        # Getting the type of 'self' (line 1671)
        self_99878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 29), 'self', False)
        # Obtaining the member 'ref_artist' of a type (line 1671)
        ref_artist_99879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1671, 29), self_99878, 'ref_artist')
        # Obtaining the member 'figure' of a type (line 1671)
        figure_99880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1671, 29), ref_artist_99879, 'figure')
        # Obtaining the member 'bbox' of a type (line 1671)
        bbox_99881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1671, 29), figure_99880, 'bbox')
        # Processing the call keyword arguments (line 1671)
        kwargs_99882 = {}
        # Getting the type of 'self' (line 1671)
        self_99875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1671)
        canvas_99876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1671, 12), self_99875, 'canvas')
        # Obtaining the member 'blit' of a type (line 1671)
        blit_99877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1671, 12), canvas_99876, 'blit')
        # Calling blit(args, kwargs) (line 1671)
        blit_call_result_99883 = invoke(stypy.reporting.localization.Localization(__file__, 1671, 12), blit_99877, *[bbox_99881], **kwargs_99882)
        
        # SSA join for if statement (line 1665)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'on_motion_blit(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'on_motion_blit' in the type store
        # Getting the type of 'stypy_return_type' (line 1664)
        stypy_return_type_99884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99884)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'on_motion_blit'
        return stypy_return_type_99884


    @norecursion
    def on_pick(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'on_pick'
        module_type_store = module_type_store.open_function_context('on_pick', 1673, 4, False)
        # Assigning a type to the variable 'self' (line 1674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DraggableBase.on_pick.__dict__.__setitem__('stypy_localization', localization)
        DraggableBase.on_pick.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DraggableBase.on_pick.__dict__.__setitem__('stypy_type_store', module_type_store)
        DraggableBase.on_pick.__dict__.__setitem__('stypy_function_name', 'DraggableBase.on_pick')
        DraggableBase.on_pick.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        DraggableBase.on_pick.__dict__.__setitem__('stypy_varargs_param_name', None)
        DraggableBase.on_pick.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DraggableBase.on_pick.__dict__.__setitem__('stypy_call_defaults', defaults)
        DraggableBase.on_pick.__dict__.__setitem__('stypy_call_varargs', varargs)
        DraggableBase.on_pick.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DraggableBase.on_pick.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableBase.on_pick', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'on_pick', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'on_pick(...)' code ##################

        
        
        # Getting the type of 'evt' (line 1674)
        evt_99885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 11), 'evt')
        # Obtaining the member 'artist' of a type (line 1674)
        artist_99886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1674, 11), evt_99885, 'artist')
        # Getting the type of 'self' (line 1674)
        self_99887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 25), 'self')
        # Obtaining the member 'ref_artist' of a type (line 1674)
        ref_artist_99888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1674, 25), self_99887, 'ref_artist')
        # Applying the binary operator '==' (line 1674)
        result_eq_99889 = python_operator(stypy.reporting.localization.Localization(__file__, 1674, 11), '==', artist_99886, ref_artist_99888)
        
        # Testing the type of an if condition (line 1674)
        if_condition_99890 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1674, 8), result_eq_99889)
        # Assigning a type to the variable 'if_condition_99890' (line 1674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 8), 'if_condition_99890', if_condition_99890)
        # SSA begins for if statement (line 1674)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 1676):
        
        # Assigning a Attribute to a Attribute (line 1676):
        # Getting the type of 'evt' (line 1676)
        evt_99891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 27), 'evt')
        # Obtaining the member 'mouseevent' of a type (line 1676)
        mouseevent_99892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1676, 27), evt_99891, 'mouseevent')
        # Obtaining the member 'x' of a type (line 1676)
        x_99893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1676, 27), mouseevent_99892, 'x')
        # Getting the type of 'self' (line 1676)
        self_99894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 12), 'self')
        # Setting the type of the member 'mouse_x' of a type (line 1676)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1676, 12), self_99894, 'mouse_x', x_99893)
        
        # Assigning a Attribute to a Attribute (line 1677):
        
        # Assigning a Attribute to a Attribute (line 1677):
        # Getting the type of 'evt' (line 1677)
        evt_99895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 27), 'evt')
        # Obtaining the member 'mouseevent' of a type (line 1677)
        mouseevent_99896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 27), evt_99895, 'mouseevent')
        # Obtaining the member 'y' of a type (line 1677)
        y_99897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 27), mouseevent_99896, 'y')
        # Getting the type of 'self' (line 1677)
        self_99898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 12), 'self')
        # Setting the type of the member 'mouse_y' of a type (line 1677)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 12), self_99898, 'mouse_y', y_99897)
        
        # Assigning a Name to a Attribute (line 1678):
        
        # Assigning a Name to a Attribute (line 1678):
        # Getting the type of 'True' (line 1678)
        True_99899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 30), 'True')
        # Getting the type of 'self' (line 1678)
        self_99900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 12), 'self')
        # Setting the type of the member 'got_artist' of a type (line 1678)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1678, 12), self_99900, 'got_artist', True_99899)
        
        # Getting the type of 'self' (line 1680)
        self_99901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 15), 'self')
        # Obtaining the member '_use_blit' of a type (line 1680)
        _use_blit_99902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1680, 15), self_99901, '_use_blit')
        # Testing the type of an if condition (line 1680)
        if_condition_99903 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1680, 12), _use_blit_99902)
        # Assigning a type to the variable 'if_condition_99903' (line 1680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1680, 12), 'if_condition_99903', if_condition_99903)
        # SSA begins for if statement (line 1680)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_animated(...): (line 1681)
        # Processing the call arguments (line 1681)
        # Getting the type of 'True' (line 1681)
        True_99907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 45), 'True', False)
        # Processing the call keyword arguments (line 1681)
        kwargs_99908 = {}
        # Getting the type of 'self' (line 1681)
        self_99904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 16), 'self', False)
        # Obtaining the member 'ref_artist' of a type (line 1681)
        ref_artist_99905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1681, 16), self_99904, 'ref_artist')
        # Obtaining the member 'set_animated' of a type (line 1681)
        set_animated_99906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1681, 16), ref_artist_99905, 'set_animated')
        # Calling set_animated(args, kwargs) (line 1681)
        set_animated_call_result_99909 = invoke(stypy.reporting.localization.Localization(__file__, 1681, 16), set_animated_99906, *[True_99907], **kwargs_99908)
        
        
        # Call to draw(...): (line 1682)
        # Processing the call keyword arguments (line 1682)
        kwargs_99913 = {}
        # Getting the type of 'self' (line 1682)
        self_99910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 16), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1682)
        canvas_99911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1682, 16), self_99910, 'canvas')
        # Obtaining the member 'draw' of a type (line 1682)
        draw_99912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1682, 16), canvas_99911, 'draw')
        # Calling draw(args, kwargs) (line 1682)
        draw_call_result_99914 = invoke(stypy.reporting.localization.Localization(__file__, 1682, 16), draw_99912, *[], **kwargs_99913)
        
        
        # Assigning a Call to a Attribute (line 1683):
        
        # Assigning a Call to a Attribute (line 1683):
        
        # Call to copy_from_bbox(...): (line 1683)
        # Processing the call arguments (line 1683)
        # Getting the type of 'self' (line 1684)
        self_99918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 36), 'self', False)
        # Obtaining the member 'ref_artist' of a type (line 1684)
        ref_artist_99919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1684, 36), self_99918, 'ref_artist')
        # Obtaining the member 'figure' of a type (line 1684)
        figure_99920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1684, 36), ref_artist_99919, 'figure')
        # Obtaining the member 'bbox' of a type (line 1684)
        bbox_99921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1684, 36), figure_99920, 'bbox')
        # Processing the call keyword arguments (line 1683)
        kwargs_99922 = {}
        # Getting the type of 'self' (line 1683)
        self_99915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 34), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1683)
        canvas_99916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1683, 34), self_99915, 'canvas')
        # Obtaining the member 'copy_from_bbox' of a type (line 1683)
        copy_from_bbox_99917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1683, 34), canvas_99916, 'copy_from_bbox')
        # Calling copy_from_bbox(args, kwargs) (line 1683)
        copy_from_bbox_call_result_99923 = invoke(stypy.reporting.localization.Localization(__file__, 1683, 34), copy_from_bbox_99917, *[bbox_99921], **kwargs_99922)
        
        # Getting the type of 'self' (line 1683)
        self_99924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 16), 'self')
        # Setting the type of the member 'background' of a type (line 1683)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1683, 16), self_99924, 'background', copy_from_bbox_call_result_99923)
        
        # Call to draw(...): (line 1685)
        # Processing the call arguments (line 1685)
        # Getting the type of 'self' (line 1685)
        self_99928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 37), 'self', False)
        # Obtaining the member 'ref_artist' of a type (line 1685)
        ref_artist_99929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 37), self_99928, 'ref_artist')
        # Obtaining the member 'figure' of a type (line 1685)
        figure_99930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 37), ref_artist_99929, 'figure')
        # Obtaining the member '_cachedRenderer' of a type (line 1685)
        _cachedRenderer_99931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 37), figure_99930, '_cachedRenderer')
        # Processing the call keyword arguments (line 1685)
        kwargs_99932 = {}
        # Getting the type of 'self' (line 1685)
        self_99925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 16), 'self', False)
        # Obtaining the member 'ref_artist' of a type (line 1685)
        ref_artist_99926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 16), self_99925, 'ref_artist')
        # Obtaining the member 'draw' of a type (line 1685)
        draw_99927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 16), ref_artist_99926, 'draw')
        # Calling draw(args, kwargs) (line 1685)
        draw_call_result_99933 = invoke(stypy.reporting.localization.Localization(__file__, 1685, 16), draw_99927, *[_cachedRenderer_99931], **kwargs_99932)
        
        
        # Call to blit(...): (line 1686)
        # Processing the call arguments (line 1686)
        # Getting the type of 'self' (line 1686)
        self_99937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 33), 'self', False)
        # Obtaining the member 'ref_artist' of a type (line 1686)
        ref_artist_99938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 33), self_99937, 'ref_artist')
        # Obtaining the member 'figure' of a type (line 1686)
        figure_99939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 33), ref_artist_99938, 'figure')
        # Obtaining the member 'bbox' of a type (line 1686)
        bbox_99940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 33), figure_99939, 'bbox')
        # Processing the call keyword arguments (line 1686)
        kwargs_99941 = {}
        # Getting the type of 'self' (line 1686)
        self_99934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 16), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1686)
        canvas_99935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 16), self_99934, 'canvas')
        # Obtaining the member 'blit' of a type (line 1686)
        blit_99936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 16), canvas_99935, 'blit')
        # Calling blit(args, kwargs) (line 1686)
        blit_call_result_99942 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 16), blit_99936, *[bbox_99940], **kwargs_99941)
        
        
        # Assigning a Call to a Attribute (line 1687):
        
        # Assigning a Call to a Attribute (line 1687):
        
        # Call to mpl_connect(...): (line 1687)
        # Processing the call arguments (line 1687)
        unicode_99946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1687, 51), 'unicode', u'motion_notify_event')
        # Getting the type of 'self' (line 1688)
        self_99947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 51), 'self', False)
        # Obtaining the member 'on_motion_blit' of a type (line 1688)
        on_motion_blit_99948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1688, 51), self_99947, 'on_motion_blit')
        # Processing the call keyword arguments (line 1687)
        kwargs_99949 = {}
        # Getting the type of 'self' (line 1687)
        self_99943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 27), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1687)
        canvas_99944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1687, 27), self_99943, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 1687)
        mpl_connect_99945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1687, 27), canvas_99944, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1687)
        mpl_connect_call_result_99950 = invoke(stypy.reporting.localization.Localization(__file__, 1687, 27), mpl_connect_99945, *[unicode_99946, on_motion_blit_99948], **kwargs_99949)
        
        # Getting the type of 'self' (line 1687)
        self_99951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 16), 'self')
        # Setting the type of the member '_c1' of a type (line 1687)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1687, 16), self_99951, '_c1', mpl_connect_call_result_99950)
        # SSA branch for the else part of an if statement (line 1680)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 1690):
        
        # Assigning a Call to a Attribute (line 1690):
        
        # Call to mpl_connect(...): (line 1690)
        # Processing the call arguments (line 1690)
        unicode_99955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1690, 51), 'unicode', u'motion_notify_event')
        # Getting the type of 'self' (line 1691)
        self_99956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 51), 'self', False)
        # Obtaining the member 'on_motion' of a type (line 1691)
        on_motion_99957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1691, 51), self_99956, 'on_motion')
        # Processing the call keyword arguments (line 1690)
        kwargs_99958 = {}
        # Getting the type of 'self' (line 1690)
        self_99952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 27), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1690)
        canvas_99953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 27), self_99952, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 1690)
        mpl_connect_99954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 27), canvas_99953, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1690)
        mpl_connect_call_result_99959 = invoke(stypy.reporting.localization.Localization(__file__, 1690, 27), mpl_connect_99954, *[unicode_99955, on_motion_99957], **kwargs_99958)
        
        # Getting the type of 'self' (line 1690)
        self_99960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 16), 'self')
        # Setting the type of the member '_c1' of a type (line 1690)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 16), self_99960, '_c1', mpl_connect_call_result_99959)
        # SSA join for if statement (line 1680)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to save_offset(...): (line 1692)
        # Processing the call keyword arguments (line 1692)
        kwargs_99963 = {}
        # Getting the type of 'self' (line 1692)
        self_99961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 12), 'self', False)
        # Obtaining the member 'save_offset' of a type (line 1692)
        save_offset_99962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1692, 12), self_99961, 'save_offset')
        # Calling save_offset(args, kwargs) (line 1692)
        save_offset_call_result_99964 = invoke(stypy.reporting.localization.Localization(__file__, 1692, 12), save_offset_99962, *[], **kwargs_99963)
        
        # SSA join for if statement (line 1674)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'on_pick(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'on_pick' in the type store
        # Getting the type of 'stypy_return_type' (line 1673)
        stypy_return_type_99965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99965)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'on_pick'
        return stypy_return_type_99965


    @norecursion
    def on_release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'on_release'
        module_type_store = module_type_store.open_function_context('on_release', 1694, 4, False)
        # Assigning a type to the variable 'self' (line 1695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DraggableBase.on_release.__dict__.__setitem__('stypy_localization', localization)
        DraggableBase.on_release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DraggableBase.on_release.__dict__.__setitem__('stypy_type_store', module_type_store)
        DraggableBase.on_release.__dict__.__setitem__('stypy_function_name', 'DraggableBase.on_release')
        DraggableBase.on_release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        DraggableBase.on_release.__dict__.__setitem__('stypy_varargs_param_name', None)
        DraggableBase.on_release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DraggableBase.on_release.__dict__.__setitem__('stypy_call_defaults', defaults)
        DraggableBase.on_release.__dict__.__setitem__('stypy_call_varargs', varargs)
        DraggableBase.on_release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DraggableBase.on_release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableBase.on_release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'on_release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'on_release(...)' code ##################

        
        # Getting the type of 'self' (line 1695)
        self_99966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 11), 'self')
        # Obtaining the member 'got_artist' of a type (line 1695)
        got_artist_99967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1695, 11), self_99966, 'got_artist')
        # Testing the type of an if condition (line 1695)
        if_condition_99968 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1695, 8), got_artist_99967)
        # Assigning a type to the variable 'if_condition_99968' (line 1695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 8), 'if_condition_99968', if_condition_99968)
        # SSA begins for if statement (line 1695)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to finalize_offset(...): (line 1696)
        # Processing the call keyword arguments (line 1696)
        kwargs_99971 = {}
        # Getting the type of 'self' (line 1696)
        self_99969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 12), 'self', False)
        # Obtaining the member 'finalize_offset' of a type (line 1696)
        finalize_offset_99970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1696, 12), self_99969, 'finalize_offset')
        # Calling finalize_offset(args, kwargs) (line 1696)
        finalize_offset_call_result_99972 = invoke(stypy.reporting.localization.Localization(__file__, 1696, 12), finalize_offset_99970, *[], **kwargs_99971)
        
        
        # Assigning a Name to a Attribute (line 1697):
        
        # Assigning a Name to a Attribute (line 1697):
        # Getting the type of 'False' (line 1697)
        False_99973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 30), 'False')
        # Getting the type of 'self' (line 1697)
        self_99974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 12), 'self')
        # Setting the type of the member 'got_artist' of a type (line 1697)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1697, 12), self_99974, 'got_artist', False_99973)
        
        # Call to mpl_disconnect(...): (line 1698)
        # Processing the call arguments (line 1698)
        # Getting the type of 'self' (line 1698)
        self_99978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 39), 'self', False)
        # Obtaining the member '_c1' of a type (line 1698)
        _c1_99979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1698, 39), self_99978, '_c1')
        # Processing the call keyword arguments (line 1698)
        kwargs_99980 = {}
        # Getting the type of 'self' (line 1698)
        self_99975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1698)
        canvas_99976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1698, 12), self_99975, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 1698)
        mpl_disconnect_99977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1698, 12), canvas_99976, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 1698)
        mpl_disconnect_call_result_99981 = invoke(stypy.reporting.localization.Localization(__file__, 1698, 12), mpl_disconnect_99977, *[_c1_99979], **kwargs_99980)
        
        
        # Getting the type of 'self' (line 1700)
        self_99982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 15), 'self')
        # Obtaining the member '_use_blit' of a type (line 1700)
        _use_blit_99983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1700, 15), self_99982, '_use_blit')
        # Testing the type of an if condition (line 1700)
        if_condition_99984 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1700, 12), _use_blit_99983)
        # Assigning a type to the variable 'if_condition_99984' (line 1700)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1700, 12), 'if_condition_99984', if_condition_99984)
        # SSA begins for if statement (line 1700)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_animated(...): (line 1701)
        # Processing the call arguments (line 1701)
        # Getting the type of 'False' (line 1701)
        False_99988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 45), 'False', False)
        # Processing the call keyword arguments (line 1701)
        kwargs_99989 = {}
        # Getting the type of 'self' (line 1701)
        self_99985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 16), 'self', False)
        # Obtaining the member 'ref_artist' of a type (line 1701)
        ref_artist_99986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1701, 16), self_99985, 'ref_artist')
        # Obtaining the member 'set_animated' of a type (line 1701)
        set_animated_99987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1701, 16), ref_artist_99986, 'set_animated')
        # Calling set_animated(args, kwargs) (line 1701)
        set_animated_call_result_99990 = invoke(stypy.reporting.localization.Localization(__file__, 1701, 16), set_animated_99987, *[False_99988], **kwargs_99989)
        
        # SSA join for if statement (line 1700)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1695)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'on_release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'on_release' in the type store
        # Getting the type of 'stypy_return_type' (line 1694)
        stypy_return_type_99991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_99991)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'on_release'
        return stypy_return_type_99991


    @norecursion
    def disconnect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'disconnect'
        module_type_store = module_type_store.open_function_context('disconnect', 1703, 4, False)
        # Assigning a type to the variable 'self' (line 1704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1704, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DraggableBase.disconnect.__dict__.__setitem__('stypy_localization', localization)
        DraggableBase.disconnect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DraggableBase.disconnect.__dict__.__setitem__('stypy_type_store', module_type_store)
        DraggableBase.disconnect.__dict__.__setitem__('stypy_function_name', 'DraggableBase.disconnect')
        DraggableBase.disconnect.__dict__.__setitem__('stypy_param_names_list', [])
        DraggableBase.disconnect.__dict__.__setitem__('stypy_varargs_param_name', None)
        DraggableBase.disconnect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DraggableBase.disconnect.__dict__.__setitem__('stypy_call_defaults', defaults)
        DraggableBase.disconnect.__dict__.__setitem__('stypy_call_varargs', varargs)
        DraggableBase.disconnect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DraggableBase.disconnect.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableBase.disconnect', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'disconnect', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'disconnect(...)' code ##################

        unicode_99992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 8), 'unicode', u'disconnect the callbacks')
        
        # Getting the type of 'self' (line 1705)
        self_99993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 19), 'self')
        # Obtaining the member 'cids' of a type (line 1705)
        cids_99994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1705, 19), self_99993, 'cids')
        # Testing the type of a for loop iterable (line 1705)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1705, 8), cids_99994)
        # Getting the type of the for loop variable (line 1705)
        for_loop_var_99995 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1705, 8), cids_99994)
        # Assigning a type to the variable 'cid' (line 1705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1705, 8), 'cid', for_loop_var_99995)
        # SSA begins for a for statement (line 1705)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to mpl_disconnect(...): (line 1706)
        # Processing the call arguments (line 1706)
        # Getting the type of 'cid' (line 1706)
        cid_99999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 39), 'cid', False)
        # Processing the call keyword arguments (line 1706)
        kwargs_100000 = {}
        # Getting the type of 'self' (line 1706)
        self_99996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1706)
        canvas_99997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 12), self_99996, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 1706)
        mpl_disconnect_99998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 12), canvas_99997, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 1706)
        mpl_disconnect_call_result_100001 = invoke(stypy.reporting.localization.Localization(__file__, 1706, 12), mpl_disconnect_99998, *[cid_99999], **kwargs_100000)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 1707)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Attribute to a Name (line 1708):
        
        # Assigning a Attribute to a Name (line 1708):
        # Getting the type of 'self' (line 1708)
        self_100002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 17), 'self')
        # Obtaining the member '_c1' of a type (line 1708)
        _c1_100003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 17), self_100002, '_c1')
        # Assigning a type to the variable 'c1' (line 1708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1708, 12), 'c1', _c1_100003)
        # SSA branch for the except part of a try statement (line 1707)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 1707)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 1707)
        module_type_store.open_ssa_branch('except else')
        
        # Call to mpl_disconnect(...): (line 1712)
        # Processing the call arguments (line 1712)
        # Getting the type of 'c1' (line 1712)
        c1_100007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 39), 'c1', False)
        # Processing the call keyword arguments (line 1712)
        kwargs_100008 = {}
        # Getting the type of 'self' (line 1712)
        self_100004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1712)
        canvas_100005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1712, 12), self_100004, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 1712)
        mpl_disconnect_100006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1712, 12), canvas_100005, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 1712)
        mpl_disconnect_call_result_100009 = invoke(stypy.reporting.localization.Localization(__file__, 1712, 12), mpl_disconnect_100006, *[c1_100007], **kwargs_100008)
        
        # SSA join for try-except statement (line 1707)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'disconnect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'disconnect' in the type store
        # Getting the type of 'stypy_return_type' (line 1703)
        stypy_return_type_100010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100010)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'disconnect'
        return stypy_return_type_100010


    @norecursion
    def artist_picker(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'artist_picker'
        module_type_store = module_type_store.open_function_context('artist_picker', 1714, 4, False)
        # Assigning a type to the variable 'self' (line 1715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DraggableBase.artist_picker.__dict__.__setitem__('stypy_localization', localization)
        DraggableBase.artist_picker.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DraggableBase.artist_picker.__dict__.__setitem__('stypy_type_store', module_type_store)
        DraggableBase.artist_picker.__dict__.__setitem__('stypy_function_name', 'DraggableBase.artist_picker')
        DraggableBase.artist_picker.__dict__.__setitem__('stypy_param_names_list', ['artist', 'evt'])
        DraggableBase.artist_picker.__dict__.__setitem__('stypy_varargs_param_name', None)
        DraggableBase.artist_picker.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DraggableBase.artist_picker.__dict__.__setitem__('stypy_call_defaults', defaults)
        DraggableBase.artist_picker.__dict__.__setitem__('stypy_call_varargs', varargs)
        DraggableBase.artist_picker.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DraggableBase.artist_picker.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableBase.artist_picker', ['artist', 'evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'artist_picker', localization, ['artist', 'evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'artist_picker(...)' code ##################

        
        # Call to contains(...): (line 1715)
        # Processing the call arguments (line 1715)
        # Getting the type of 'evt' (line 1715)
        evt_100014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 40), 'evt', False)
        # Processing the call keyword arguments (line 1715)
        kwargs_100015 = {}
        # Getting the type of 'self' (line 1715)
        self_100011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 15), 'self', False)
        # Obtaining the member 'ref_artist' of a type (line 1715)
        ref_artist_100012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1715, 15), self_100011, 'ref_artist')
        # Obtaining the member 'contains' of a type (line 1715)
        contains_100013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1715, 15), ref_artist_100012, 'contains')
        # Calling contains(args, kwargs) (line 1715)
        contains_call_result_100016 = invoke(stypy.reporting.localization.Localization(__file__, 1715, 15), contains_100013, *[evt_100014], **kwargs_100015)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 8), 'stypy_return_type', contains_call_result_100016)
        
        # ################# End of 'artist_picker(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'artist_picker' in the type store
        # Getting the type of 'stypy_return_type' (line 1714)
        stypy_return_type_100017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100017)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'artist_picker'
        return stypy_return_type_100017


    @norecursion
    def save_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'save_offset'
        module_type_store = module_type_store.open_function_context('save_offset', 1717, 4, False)
        # Assigning a type to the variable 'self' (line 1718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1718, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DraggableBase.save_offset.__dict__.__setitem__('stypy_localization', localization)
        DraggableBase.save_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DraggableBase.save_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        DraggableBase.save_offset.__dict__.__setitem__('stypy_function_name', 'DraggableBase.save_offset')
        DraggableBase.save_offset.__dict__.__setitem__('stypy_param_names_list', [])
        DraggableBase.save_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        DraggableBase.save_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DraggableBase.save_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        DraggableBase.save_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        DraggableBase.save_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DraggableBase.save_offset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableBase.save_offset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'save_offset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'save_offset(...)' code ##################

        pass
        
        # ################# End of 'save_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'save_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 1717)
        stypy_return_type_100018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100018)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'save_offset'
        return stypy_return_type_100018


    @norecursion
    def update_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_offset'
        module_type_store = module_type_store.open_function_context('update_offset', 1720, 4, False)
        # Assigning a type to the variable 'self' (line 1721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DraggableBase.update_offset.__dict__.__setitem__('stypy_localization', localization)
        DraggableBase.update_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DraggableBase.update_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        DraggableBase.update_offset.__dict__.__setitem__('stypy_function_name', 'DraggableBase.update_offset')
        DraggableBase.update_offset.__dict__.__setitem__('stypy_param_names_list', ['dx', 'dy'])
        DraggableBase.update_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        DraggableBase.update_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DraggableBase.update_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        DraggableBase.update_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        DraggableBase.update_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DraggableBase.update_offset.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableBase.update_offset', ['dx', 'dy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_offset', localization, ['dx', 'dy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_offset(...)' code ##################

        pass
        
        # ################# End of 'update_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 1720)
        stypy_return_type_100019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100019)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_offset'
        return stypy_return_type_100019


    @norecursion
    def finalize_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'finalize_offset'
        module_type_store = module_type_store.open_function_context('finalize_offset', 1723, 4, False)
        # Assigning a type to the variable 'self' (line 1724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DraggableBase.finalize_offset.__dict__.__setitem__('stypy_localization', localization)
        DraggableBase.finalize_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DraggableBase.finalize_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        DraggableBase.finalize_offset.__dict__.__setitem__('stypy_function_name', 'DraggableBase.finalize_offset')
        DraggableBase.finalize_offset.__dict__.__setitem__('stypy_param_names_list', [])
        DraggableBase.finalize_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        DraggableBase.finalize_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DraggableBase.finalize_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        DraggableBase.finalize_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        DraggableBase.finalize_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DraggableBase.finalize_offset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableBase.finalize_offset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'finalize_offset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'finalize_offset(...)' code ##################

        pass
        
        # ################# End of 'finalize_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'finalize_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 1723)
        stypy_return_type_100020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100020)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'finalize_offset'
        return stypy_return_type_100020


# Assigning a type to the variable 'DraggableBase' (line 1611)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1611, 0), 'DraggableBase', DraggableBase)
# Declaration of the 'DraggableOffsetBox' class
# Getting the type of 'DraggableBase' (line 1727)
DraggableBase_100021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 25), 'DraggableBase')

class DraggableOffsetBox(DraggableBase_100021, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1728)
        False_100022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 55), 'False')
        defaults = [False_100022]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1728, 4, False)
        # Assigning a type to the variable 'self' (line 1729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1729, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableOffsetBox.__init__', ['ref_artist', 'offsetbox', 'use_blit'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ref_artist', 'offsetbox', 'use_blit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1729)
        # Processing the call arguments (line 1729)
        # Getting the type of 'self' (line 1729)
        self_100025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 31), 'self', False)
        # Getting the type of 'ref_artist' (line 1729)
        ref_artist_100026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 37), 'ref_artist', False)
        # Processing the call keyword arguments (line 1729)
        # Getting the type of 'use_blit' (line 1729)
        use_blit_100027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 58), 'use_blit', False)
        keyword_100028 = use_blit_100027
        kwargs_100029 = {'use_blit': keyword_100028}
        # Getting the type of 'DraggableBase' (line 1729)
        DraggableBase_100023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 8), 'DraggableBase', False)
        # Obtaining the member '__init__' of a type (line 1729)
        init___100024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1729, 8), DraggableBase_100023, '__init__')
        # Calling __init__(args, kwargs) (line 1729)
        init___call_result_100030 = invoke(stypy.reporting.localization.Localization(__file__, 1729, 8), init___100024, *[self_100025, ref_artist_100026], **kwargs_100029)
        
        
        # Assigning a Name to a Attribute (line 1730):
        
        # Assigning a Name to a Attribute (line 1730):
        # Getting the type of 'offsetbox' (line 1730)
        offsetbox_100031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 25), 'offsetbox')
        # Getting the type of 'self' (line 1730)
        self_100032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 8), 'self')
        # Setting the type of the member 'offsetbox' of a type (line 1730)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 8), self_100032, 'offsetbox', offsetbox_100031)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def save_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'save_offset'
        module_type_store = module_type_store.open_function_context('save_offset', 1732, 4, False)
        # Assigning a type to the variable 'self' (line 1733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1733, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DraggableOffsetBox.save_offset.__dict__.__setitem__('stypy_localization', localization)
        DraggableOffsetBox.save_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DraggableOffsetBox.save_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        DraggableOffsetBox.save_offset.__dict__.__setitem__('stypy_function_name', 'DraggableOffsetBox.save_offset')
        DraggableOffsetBox.save_offset.__dict__.__setitem__('stypy_param_names_list', [])
        DraggableOffsetBox.save_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        DraggableOffsetBox.save_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DraggableOffsetBox.save_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        DraggableOffsetBox.save_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        DraggableOffsetBox.save_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DraggableOffsetBox.save_offset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableOffsetBox.save_offset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'save_offset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'save_offset(...)' code ##################

        
        # Assigning a Attribute to a Name (line 1733):
        
        # Assigning a Attribute to a Name (line 1733):
        # Getting the type of 'self' (line 1733)
        self_100033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 20), 'self')
        # Obtaining the member 'offsetbox' of a type (line 1733)
        offsetbox_100034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1733, 20), self_100033, 'offsetbox')
        # Assigning a type to the variable 'offsetbox' (line 1733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1733, 8), 'offsetbox', offsetbox_100034)
        
        # Assigning a Attribute to a Name (line 1734):
        
        # Assigning a Attribute to a Name (line 1734):
        # Getting the type of 'offsetbox' (line 1734)
        offsetbox_100035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 19), 'offsetbox')
        # Obtaining the member 'figure' of a type (line 1734)
        figure_100036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1734, 19), offsetbox_100035, 'figure')
        # Obtaining the member '_cachedRenderer' of a type (line 1734)
        _cachedRenderer_100037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1734, 19), figure_100036, '_cachedRenderer')
        # Assigning a type to the variable 'renderer' (line 1734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1734, 8), 'renderer', _cachedRenderer_100037)
        
        # Assigning a Call to a Tuple (line 1735):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent(...): (line 1735)
        # Processing the call arguments (line 1735)
        # Getting the type of 'renderer' (line 1735)
        renderer_100040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 44), 'renderer', False)
        # Processing the call keyword arguments (line 1735)
        kwargs_100041 = {}
        # Getting the type of 'offsetbox' (line 1735)
        offsetbox_100038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 23), 'offsetbox', False)
        # Obtaining the member 'get_extent' of a type (line 1735)
        get_extent_100039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1735, 23), offsetbox_100038, 'get_extent')
        # Calling get_extent(args, kwargs) (line 1735)
        get_extent_call_result_100042 = invoke(stypy.reporting.localization.Localization(__file__, 1735, 23), get_extent_100039, *[renderer_100040], **kwargs_100041)
        
        # Assigning a type to the variable 'call_assignment_95841' (line 1735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 8), 'call_assignment_95841', get_extent_call_result_100042)
        
        # Assigning a Call to a Name (line 1735):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_100045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 8), 'int')
        # Processing the call keyword arguments
        kwargs_100046 = {}
        # Getting the type of 'call_assignment_95841' (line 1735)
        call_assignment_95841_100043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 8), 'call_assignment_95841', False)
        # Obtaining the member '__getitem__' of a type (line 1735)
        getitem___100044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1735, 8), call_assignment_95841_100043, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_100047 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___100044, *[int_100045], **kwargs_100046)
        
        # Assigning a type to the variable 'call_assignment_95842' (line 1735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 8), 'call_assignment_95842', getitem___call_result_100047)
        
        # Assigning a Name to a Name (line 1735):
        # Getting the type of 'call_assignment_95842' (line 1735)
        call_assignment_95842_100048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 8), 'call_assignment_95842')
        # Assigning a type to the variable 'w' (line 1735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 8), 'w', call_assignment_95842_100048)
        
        # Assigning a Call to a Name (line 1735):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_100051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 8), 'int')
        # Processing the call keyword arguments
        kwargs_100052 = {}
        # Getting the type of 'call_assignment_95841' (line 1735)
        call_assignment_95841_100049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 8), 'call_assignment_95841', False)
        # Obtaining the member '__getitem__' of a type (line 1735)
        getitem___100050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1735, 8), call_assignment_95841_100049, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_100053 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___100050, *[int_100051], **kwargs_100052)
        
        # Assigning a type to the variable 'call_assignment_95843' (line 1735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 8), 'call_assignment_95843', getitem___call_result_100053)
        
        # Assigning a Name to a Name (line 1735):
        # Getting the type of 'call_assignment_95843' (line 1735)
        call_assignment_95843_100054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 8), 'call_assignment_95843')
        # Assigning a type to the variable 'h' (line 1735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 11), 'h', call_assignment_95843_100054)
        
        # Assigning a Call to a Name (line 1735):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_100057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 8), 'int')
        # Processing the call keyword arguments
        kwargs_100058 = {}
        # Getting the type of 'call_assignment_95841' (line 1735)
        call_assignment_95841_100055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 8), 'call_assignment_95841', False)
        # Obtaining the member '__getitem__' of a type (line 1735)
        getitem___100056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1735, 8), call_assignment_95841_100055, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_100059 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___100056, *[int_100057], **kwargs_100058)
        
        # Assigning a type to the variable 'call_assignment_95844' (line 1735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 8), 'call_assignment_95844', getitem___call_result_100059)
        
        # Assigning a Name to a Name (line 1735):
        # Getting the type of 'call_assignment_95844' (line 1735)
        call_assignment_95844_100060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 8), 'call_assignment_95844')
        # Assigning a type to the variable 'xd' (line 1735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 14), 'xd', call_assignment_95844_100060)
        
        # Assigning a Call to a Name (line 1735):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_100063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 8), 'int')
        # Processing the call keyword arguments
        kwargs_100064 = {}
        # Getting the type of 'call_assignment_95841' (line 1735)
        call_assignment_95841_100061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 8), 'call_assignment_95841', False)
        # Obtaining the member '__getitem__' of a type (line 1735)
        getitem___100062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1735, 8), call_assignment_95841_100061, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_100065 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___100062, *[int_100063], **kwargs_100064)
        
        # Assigning a type to the variable 'call_assignment_95845' (line 1735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 8), 'call_assignment_95845', getitem___call_result_100065)
        
        # Assigning a Name to a Name (line 1735):
        # Getting the type of 'call_assignment_95845' (line 1735)
        call_assignment_95845_100066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 8), 'call_assignment_95845')
        # Assigning a type to the variable 'yd' (line 1735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 18), 'yd', call_assignment_95845_100066)
        
        # Assigning a Call to a Name (line 1736):
        
        # Assigning a Call to a Name (line 1736):
        
        # Call to get_offset(...): (line 1736)
        # Processing the call arguments (line 1736)
        # Getting the type of 'w' (line 1736)
        w_100069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 38), 'w', False)
        # Getting the type of 'h' (line 1736)
        h_100070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 41), 'h', False)
        # Getting the type of 'xd' (line 1736)
        xd_100071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 44), 'xd', False)
        # Getting the type of 'yd' (line 1736)
        yd_100072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 48), 'yd', False)
        # Getting the type of 'renderer' (line 1736)
        renderer_100073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 52), 'renderer', False)
        # Processing the call keyword arguments (line 1736)
        kwargs_100074 = {}
        # Getting the type of 'offsetbox' (line 1736)
        offsetbox_100067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 17), 'offsetbox', False)
        # Obtaining the member 'get_offset' of a type (line 1736)
        get_offset_100068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 17), offsetbox_100067, 'get_offset')
        # Calling get_offset(args, kwargs) (line 1736)
        get_offset_call_result_100075 = invoke(stypy.reporting.localization.Localization(__file__, 1736, 17), get_offset_100068, *[w_100069, h_100070, xd_100071, yd_100072, renderer_100073], **kwargs_100074)
        
        # Assigning a type to the variable 'offset' (line 1736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 8), 'offset', get_offset_call_result_100075)
        
        # Assigning a Name to a Tuple (line 1737):
        
        # Assigning a Subscript to a Name (line 1737):
        
        # Obtaining the type of the subscript
        int_100076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, 8), 'int')
        # Getting the type of 'offset' (line 1737)
        offset_100077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 45), 'offset')
        # Obtaining the member '__getitem__' of a type (line 1737)
        getitem___100078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 8), offset_100077, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1737)
        subscript_call_result_100079 = invoke(stypy.reporting.localization.Localization(__file__, 1737, 8), getitem___100078, int_100076)
        
        # Assigning a type to the variable 'tuple_var_assignment_95846' (line 1737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'tuple_var_assignment_95846', subscript_call_result_100079)
        
        # Assigning a Subscript to a Name (line 1737):
        
        # Obtaining the type of the subscript
        int_100080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, 8), 'int')
        # Getting the type of 'offset' (line 1737)
        offset_100081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 45), 'offset')
        # Obtaining the member '__getitem__' of a type (line 1737)
        getitem___100082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 8), offset_100081, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1737)
        subscript_call_result_100083 = invoke(stypy.reporting.localization.Localization(__file__, 1737, 8), getitem___100082, int_100080)
        
        # Assigning a type to the variable 'tuple_var_assignment_95847' (line 1737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'tuple_var_assignment_95847', subscript_call_result_100083)
        
        # Assigning a Name to a Attribute (line 1737):
        # Getting the type of 'tuple_var_assignment_95846' (line 1737)
        tuple_var_assignment_95846_100084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'tuple_var_assignment_95846')
        # Getting the type of 'self' (line 1737)
        self_100085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'self')
        # Setting the type of the member 'offsetbox_x' of a type (line 1737)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 8), self_100085, 'offsetbox_x', tuple_var_assignment_95846_100084)
        
        # Assigning a Name to a Attribute (line 1737):
        # Getting the type of 'tuple_var_assignment_95847' (line 1737)
        tuple_var_assignment_95847_100086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'tuple_var_assignment_95847')
        # Getting the type of 'self' (line 1737)
        self_100087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 26), 'self')
        # Setting the type of the member 'offsetbox_y' of a type (line 1737)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 26), self_100087, 'offsetbox_y', tuple_var_assignment_95847_100086)
        
        # Call to set_offset(...): (line 1738)
        # Processing the call arguments (line 1738)
        # Getting the type of 'offset' (line 1738)
        offset_100091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 34), 'offset', False)
        # Processing the call keyword arguments (line 1738)
        kwargs_100092 = {}
        # Getting the type of 'self' (line 1738)
        self_100088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 8), 'self', False)
        # Obtaining the member 'offsetbox' of a type (line 1738)
        offsetbox_100089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1738, 8), self_100088, 'offsetbox')
        # Obtaining the member 'set_offset' of a type (line 1738)
        set_offset_100090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1738, 8), offsetbox_100089, 'set_offset')
        # Calling set_offset(args, kwargs) (line 1738)
        set_offset_call_result_100093 = invoke(stypy.reporting.localization.Localization(__file__, 1738, 8), set_offset_100090, *[offset_100091], **kwargs_100092)
        
        
        # ################# End of 'save_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'save_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 1732)
        stypy_return_type_100094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100094)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'save_offset'
        return stypy_return_type_100094


    @norecursion
    def update_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_offset'
        module_type_store = module_type_store.open_function_context('update_offset', 1740, 4, False)
        # Assigning a type to the variable 'self' (line 1741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1741, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DraggableOffsetBox.update_offset.__dict__.__setitem__('stypy_localization', localization)
        DraggableOffsetBox.update_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DraggableOffsetBox.update_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        DraggableOffsetBox.update_offset.__dict__.__setitem__('stypy_function_name', 'DraggableOffsetBox.update_offset')
        DraggableOffsetBox.update_offset.__dict__.__setitem__('stypy_param_names_list', ['dx', 'dy'])
        DraggableOffsetBox.update_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        DraggableOffsetBox.update_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DraggableOffsetBox.update_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        DraggableOffsetBox.update_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        DraggableOffsetBox.update_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DraggableOffsetBox.update_offset.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableOffsetBox.update_offset', ['dx', 'dy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_offset', localization, ['dx', 'dy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_offset(...)' code ##################

        
        # Assigning a Tuple to a Name (line 1741):
        
        # Assigning a Tuple to a Name (line 1741):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1741)
        tuple_100095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1741, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1741)
        # Adding element type (line 1741)
        # Getting the type of 'self' (line 1741)
        self_100096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 24), 'self')
        # Obtaining the member 'offsetbox_x' of a type (line 1741)
        offsetbox_x_100097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1741, 24), self_100096, 'offsetbox_x')
        # Getting the type of 'dx' (line 1741)
        dx_100098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 43), 'dx')
        # Applying the binary operator '+' (line 1741)
        result_add_100099 = python_operator(stypy.reporting.localization.Localization(__file__, 1741, 24), '+', offsetbox_x_100097, dx_100098)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1741, 24), tuple_100095, result_add_100099)
        # Adding element type (line 1741)
        # Getting the type of 'self' (line 1741)
        self_100100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 47), 'self')
        # Obtaining the member 'offsetbox_y' of a type (line 1741)
        offsetbox_y_100101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1741, 47), self_100100, 'offsetbox_y')
        # Getting the type of 'dy' (line 1741)
        dy_100102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 66), 'dy')
        # Applying the binary operator '+' (line 1741)
        result_add_100103 = python_operator(stypy.reporting.localization.Localization(__file__, 1741, 47), '+', offsetbox_y_100101, dy_100102)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1741, 24), tuple_100095, result_add_100103)
        
        # Assigning a type to the variable 'loc_in_canvas' (line 1741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1741, 8), 'loc_in_canvas', tuple_100095)
        
        # Call to set_offset(...): (line 1742)
        # Processing the call arguments (line 1742)
        # Getting the type of 'loc_in_canvas' (line 1742)
        loc_in_canvas_100107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 34), 'loc_in_canvas', False)
        # Processing the call keyword arguments (line 1742)
        kwargs_100108 = {}
        # Getting the type of 'self' (line 1742)
        self_100104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 8), 'self', False)
        # Obtaining the member 'offsetbox' of a type (line 1742)
        offsetbox_100105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1742, 8), self_100104, 'offsetbox')
        # Obtaining the member 'set_offset' of a type (line 1742)
        set_offset_100106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1742, 8), offsetbox_100105, 'set_offset')
        # Calling set_offset(args, kwargs) (line 1742)
        set_offset_call_result_100109 = invoke(stypy.reporting.localization.Localization(__file__, 1742, 8), set_offset_100106, *[loc_in_canvas_100107], **kwargs_100108)
        
        
        # ################# End of 'update_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 1740)
        stypy_return_type_100110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100110)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_offset'
        return stypy_return_type_100110


    @norecursion
    def get_loc_in_canvas(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_loc_in_canvas'
        module_type_store = module_type_store.open_function_context('get_loc_in_canvas', 1744, 4, False)
        # Assigning a type to the variable 'self' (line 1745)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1745, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DraggableOffsetBox.get_loc_in_canvas.__dict__.__setitem__('stypy_localization', localization)
        DraggableOffsetBox.get_loc_in_canvas.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DraggableOffsetBox.get_loc_in_canvas.__dict__.__setitem__('stypy_type_store', module_type_store)
        DraggableOffsetBox.get_loc_in_canvas.__dict__.__setitem__('stypy_function_name', 'DraggableOffsetBox.get_loc_in_canvas')
        DraggableOffsetBox.get_loc_in_canvas.__dict__.__setitem__('stypy_param_names_list', [])
        DraggableOffsetBox.get_loc_in_canvas.__dict__.__setitem__('stypy_varargs_param_name', None)
        DraggableOffsetBox.get_loc_in_canvas.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DraggableOffsetBox.get_loc_in_canvas.__dict__.__setitem__('stypy_call_defaults', defaults)
        DraggableOffsetBox.get_loc_in_canvas.__dict__.__setitem__('stypy_call_varargs', varargs)
        DraggableOffsetBox.get_loc_in_canvas.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DraggableOffsetBox.get_loc_in_canvas.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableOffsetBox.get_loc_in_canvas', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_loc_in_canvas', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_loc_in_canvas(...)' code ##################

        
        # Assigning a Attribute to a Name (line 1746):
        
        # Assigning a Attribute to a Name (line 1746):
        # Getting the type of 'self' (line 1746)
        self_100111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 20), 'self')
        # Obtaining the member 'offsetbox' of a type (line 1746)
        offsetbox_100112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1746, 20), self_100111, 'offsetbox')
        # Assigning a type to the variable 'offsetbox' (line 1746)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1746, 8), 'offsetbox', offsetbox_100112)
        
        # Assigning a Attribute to a Name (line 1747):
        
        # Assigning a Attribute to a Name (line 1747):
        # Getting the type of 'offsetbox' (line 1747)
        offsetbox_100113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 19), 'offsetbox')
        # Obtaining the member 'figure' of a type (line 1747)
        figure_100114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1747, 19), offsetbox_100113, 'figure')
        # Obtaining the member '_cachedRenderer' of a type (line 1747)
        _cachedRenderer_100115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1747, 19), figure_100114, '_cachedRenderer')
        # Assigning a type to the variable 'renderer' (line 1747)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1747, 8), 'renderer', _cachedRenderer_100115)
        
        # Assigning a Call to a Tuple (line 1748):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent(...): (line 1748)
        # Processing the call arguments (line 1748)
        # Getting the type of 'renderer' (line 1748)
        renderer_100118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 44), 'renderer', False)
        # Processing the call keyword arguments (line 1748)
        kwargs_100119 = {}
        # Getting the type of 'offsetbox' (line 1748)
        offsetbox_100116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 23), 'offsetbox', False)
        # Obtaining the member 'get_extent' of a type (line 1748)
        get_extent_100117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1748, 23), offsetbox_100116, 'get_extent')
        # Calling get_extent(args, kwargs) (line 1748)
        get_extent_call_result_100120 = invoke(stypy.reporting.localization.Localization(__file__, 1748, 23), get_extent_100117, *[renderer_100118], **kwargs_100119)
        
        # Assigning a type to the variable 'call_assignment_95848' (line 1748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'call_assignment_95848', get_extent_call_result_100120)
        
        # Assigning a Call to a Name (line 1748):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_100123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1748, 8), 'int')
        # Processing the call keyword arguments
        kwargs_100124 = {}
        # Getting the type of 'call_assignment_95848' (line 1748)
        call_assignment_95848_100121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'call_assignment_95848', False)
        # Obtaining the member '__getitem__' of a type (line 1748)
        getitem___100122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1748, 8), call_assignment_95848_100121, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_100125 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___100122, *[int_100123], **kwargs_100124)
        
        # Assigning a type to the variable 'call_assignment_95849' (line 1748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'call_assignment_95849', getitem___call_result_100125)
        
        # Assigning a Name to a Name (line 1748):
        # Getting the type of 'call_assignment_95849' (line 1748)
        call_assignment_95849_100126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'call_assignment_95849')
        # Assigning a type to the variable 'w' (line 1748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'w', call_assignment_95849_100126)
        
        # Assigning a Call to a Name (line 1748):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_100129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1748, 8), 'int')
        # Processing the call keyword arguments
        kwargs_100130 = {}
        # Getting the type of 'call_assignment_95848' (line 1748)
        call_assignment_95848_100127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'call_assignment_95848', False)
        # Obtaining the member '__getitem__' of a type (line 1748)
        getitem___100128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1748, 8), call_assignment_95848_100127, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_100131 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___100128, *[int_100129], **kwargs_100130)
        
        # Assigning a type to the variable 'call_assignment_95850' (line 1748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'call_assignment_95850', getitem___call_result_100131)
        
        # Assigning a Name to a Name (line 1748):
        # Getting the type of 'call_assignment_95850' (line 1748)
        call_assignment_95850_100132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'call_assignment_95850')
        # Assigning a type to the variable 'h' (line 1748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 11), 'h', call_assignment_95850_100132)
        
        # Assigning a Call to a Name (line 1748):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_100135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1748, 8), 'int')
        # Processing the call keyword arguments
        kwargs_100136 = {}
        # Getting the type of 'call_assignment_95848' (line 1748)
        call_assignment_95848_100133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'call_assignment_95848', False)
        # Obtaining the member '__getitem__' of a type (line 1748)
        getitem___100134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1748, 8), call_assignment_95848_100133, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_100137 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___100134, *[int_100135], **kwargs_100136)
        
        # Assigning a type to the variable 'call_assignment_95851' (line 1748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'call_assignment_95851', getitem___call_result_100137)
        
        # Assigning a Name to a Name (line 1748):
        # Getting the type of 'call_assignment_95851' (line 1748)
        call_assignment_95851_100138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'call_assignment_95851')
        # Assigning a type to the variable 'xd' (line 1748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 14), 'xd', call_assignment_95851_100138)
        
        # Assigning a Call to a Name (line 1748):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_100141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1748, 8), 'int')
        # Processing the call keyword arguments
        kwargs_100142 = {}
        # Getting the type of 'call_assignment_95848' (line 1748)
        call_assignment_95848_100139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'call_assignment_95848', False)
        # Obtaining the member '__getitem__' of a type (line 1748)
        getitem___100140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1748, 8), call_assignment_95848_100139, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_100143 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___100140, *[int_100141], **kwargs_100142)
        
        # Assigning a type to the variable 'call_assignment_95852' (line 1748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'call_assignment_95852', getitem___call_result_100143)
        
        # Assigning a Name to a Name (line 1748):
        # Getting the type of 'call_assignment_95852' (line 1748)
        call_assignment_95852_100144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'call_assignment_95852')
        # Assigning a type to the variable 'yd' (line 1748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 18), 'yd', call_assignment_95852_100144)
        
        # Assigning a Attribute to a Tuple (line 1749):
        
        # Assigning a Subscript to a Name (line 1749):
        
        # Obtaining the type of the subscript
        int_100145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1749, 8), 'int')
        # Getting the type of 'offsetbox' (line 1749)
        offsetbox_100146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 17), 'offsetbox')
        # Obtaining the member '_offset' of a type (line 1749)
        _offset_100147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1749, 17), offsetbox_100146, '_offset')
        # Obtaining the member '__getitem__' of a type (line 1749)
        getitem___100148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1749, 8), _offset_100147, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1749)
        subscript_call_result_100149 = invoke(stypy.reporting.localization.Localization(__file__, 1749, 8), getitem___100148, int_100145)
        
        # Assigning a type to the variable 'tuple_var_assignment_95853' (line 1749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'tuple_var_assignment_95853', subscript_call_result_100149)
        
        # Assigning a Subscript to a Name (line 1749):
        
        # Obtaining the type of the subscript
        int_100150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1749, 8), 'int')
        # Getting the type of 'offsetbox' (line 1749)
        offsetbox_100151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 17), 'offsetbox')
        # Obtaining the member '_offset' of a type (line 1749)
        _offset_100152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1749, 17), offsetbox_100151, '_offset')
        # Obtaining the member '__getitem__' of a type (line 1749)
        getitem___100153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1749, 8), _offset_100152, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1749)
        subscript_call_result_100154 = invoke(stypy.reporting.localization.Localization(__file__, 1749, 8), getitem___100153, int_100150)
        
        # Assigning a type to the variable 'tuple_var_assignment_95854' (line 1749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'tuple_var_assignment_95854', subscript_call_result_100154)
        
        # Assigning a Name to a Name (line 1749):
        # Getting the type of 'tuple_var_assignment_95853' (line 1749)
        tuple_var_assignment_95853_100155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'tuple_var_assignment_95853')
        # Assigning a type to the variable 'ox' (line 1749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'ox', tuple_var_assignment_95853_100155)
        
        # Assigning a Name to a Name (line 1749):
        # Getting the type of 'tuple_var_assignment_95854' (line 1749)
        tuple_var_assignment_95854_100156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'tuple_var_assignment_95854')
        # Assigning a type to the variable 'oy' (line 1749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 12), 'oy', tuple_var_assignment_95854_100156)
        
        # Assigning a Tuple to a Name (line 1750):
        
        # Assigning a Tuple to a Name (line 1750):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1750)
        tuple_100157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1750, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1750)
        # Adding element type (line 1750)
        # Getting the type of 'ox' (line 1750)
        ox_100158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 25), 'ox')
        # Getting the type of 'xd' (line 1750)
        xd_100159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 30), 'xd')
        # Applying the binary operator '-' (line 1750)
        result_sub_100160 = python_operator(stypy.reporting.localization.Localization(__file__, 1750, 25), '-', ox_100158, xd_100159)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1750, 25), tuple_100157, result_sub_100160)
        # Adding element type (line 1750)
        # Getting the type of 'oy' (line 1750)
        oy_100161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 34), 'oy')
        # Getting the type of 'yd' (line 1750)
        yd_100162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 39), 'yd')
        # Applying the binary operator '-' (line 1750)
        result_sub_100163 = python_operator(stypy.reporting.localization.Localization(__file__, 1750, 34), '-', oy_100161, yd_100162)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1750, 25), tuple_100157, result_sub_100163)
        
        # Assigning a type to the variable 'loc_in_canvas' (line 1750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1750, 8), 'loc_in_canvas', tuple_100157)
        # Getting the type of 'loc_in_canvas' (line 1752)
        loc_in_canvas_100164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1752, 15), 'loc_in_canvas')
        # Assigning a type to the variable 'stypy_return_type' (line 1752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1752, 8), 'stypy_return_type', loc_in_canvas_100164)
        
        # ################# End of 'get_loc_in_canvas(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_loc_in_canvas' in the type store
        # Getting the type of 'stypy_return_type' (line 1744)
        stypy_return_type_100165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100165)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_loc_in_canvas'
        return stypy_return_type_100165


# Assigning a type to the variable 'DraggableOffsetBox' (line 1727)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 0), 'DraggableOffsetBox', DraggableOffsetBox)
# Declaration of the 'DraggableAnnotation' class
# Getting the type of 'DraggableBase' (line 1755)
DraggableBase_100166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 26), 'DraggableBase')

class DraggableAnnotation(DraggableBase_100166, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1756)
        False_100167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 44), 'False')
        defaults = [False_100167]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1756, 4, False)
        # Assigning a type to the variable 'self' (line 1757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1757, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableAnnotation.__init__', ['annotation', 'use_blit'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['annotation', 'use_blit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1757)
        # Processing the call arguments (line 1757)
        # Getting the type of 'self' (line 1757)
        self_100170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 31), 'self', False)
        # Getting the type of 'annotation' (line 1757)
        annotation_100171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 37), 'annotation', False)
        # Processing the call keyword arguments (line 1757)
        # Getting the type of 'use_blit' (line 1757)
        use_blit_100172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 58), 'use_blit', False)
        keyword_100173 = use_blit_100172
        kwargs_100174 = {'use_blit': keyword_100173}
        # Getting the type of 'DraggableBase' (line 1757)
        DraggableBase_100168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 8), 'DraggableBase', False)
        # Obtaining the member '__init__' of a type (line 1757)
        init___100169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1757, 8), DraggableBase_100168, '__init__')
        # Calling __init__(args, kwargs) (line 1757)
        init___call_result_100175 = invoke(stypy.reporting.localization.Localization(__file__, 1757, 8), init___100169, *[self_100170, annotation_100171], **kwargs_100174)
        
        
        # Assigning a Name to a Attribute (line 1758):
        
        # Assigning a Name to a Attribute (line 1758):
        # Getting the type of 'annotation' (line 1758)
        annotation_100176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 26), 'annotation')
        # Getting the type of 'self' (line 1758)
        self_100177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 8), 'self')
        # Setting the type of the member 'annotation' of a type (line 1758)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1758, 8), self_100177, 'annotation', annotation_100176)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def save_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'save_offset'
        module_type_store = module_type_store.open_function_context('save_offset', 1760, 4, False)
        # Assigning a type to the variable 'self' (line 1761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1761, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DraggableAnnotation.save_offset.__dict__.__setitem__('stypy_localization', localization)
        DraggableAnnotation.save_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DraggableAnnotation.save_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        DraggableAnnotation.save_offset.__dict__.__setitem__('stypy_function_name', 'DraggableAnnotation.save_offset')
        DraggableAnnotation.save_offset.__dict__.__setitem__('stypy_param_names_list', [])
        DraggableAnnotation.save_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        DraggableAnnotation.save_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DraggableAnnotation.save_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        DraggableAnnotation.save_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        DraggableAnnotation.save_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DraggableAnnotation.save_offset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableAnnotation.save_offset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'save_offset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'save_offset(...)' code ##################

        
        # Assigning a Attribute to a Name (line 1761):
        
        # Assigning a Attribute to a Name (line 1761):
        # Getting the type of 'self' (line 1761)
        self_100178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 14), 'self')
        # Obtaining the member 'annotation' of a type (line 1761)
        annotation_100179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1761, 14), self_100178, 'annotation')
        # Assigning a type to the variable 'ann' (line 1761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1761, 8), 'ann', annotation_100179)
        
        # Assigning a Call to a Tuple (line 1762):
        
        # Assigning a Call to a Name:
        
        # Call to transform(...): (line 1762)
        # Processing the call arguments (line 1762)
        # Getting the type of 'ann' (line 1762)
        ann_100185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 57), 'ann', False)
        # Obtaining the member 'xyann' of a type (line 1762)
        xyann_100186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 57), ann_100185, 'xyann')
        # Processing the call keyword arguments (line 1762)
        kwargs_100187 = {}
        
        # Call to get_transform(...): (line 1762)
        # Processing the call keyword arguments (line 1762)
        kwargs_100182 = {}
        # Getting the type of 'ann' (line 1762)
        ann_100180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 27), 'ann', False)
        # Obtaining the member 'get_transform' of a type (line 1762)
        get_transform_100181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 27), ann_100180, 'get_transform')
        # Calling get_transform(args, kwargs) (line 1762)
        get_transform_call_result_100183 = invoke(stypy.reporting.localization.Localization(__file__, 1762, 27), get_transform_100181, *[], **kwargs_100182)
        
        # Obtaining the member 'transform' of a type (line 1762)
        transform_100184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 27), get_transform_call_result_100183, 'transform')
        # Calling transform(args, kwargs) (line 1762)
        transform_call_result_100188 = invoke(stypy.reporting.localization.Localization(__file__, 1762, 27), transform_100184, *[xyann_100186], **kwargs_100187)
        
        # Assigning a type to the variable 'call_assignment_95855' (line 1762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'call_assignment_95855', transform_call_result_100188)
        
        # Assigning a Call to a Name (line 1762):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_100191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1762, 8), 'int')
        # Processing the call keyword arguments
        kwargs_100192 = {}
        # Getting the type of 'call_assignment_95855' (line 1762)
        call_assignment_95855_100189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'call_assignment_95855', False)
        # Obtaining the member '__getitem__' of a type (line 1762)
        getitem___100190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 8), call_assignment_95855_100189, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_100193 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___100190, *[int_100191], **kwargs_100192)
        
        # Assigning a type to the variable 'call_assignment_95856' (line 1762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'call_assignment_95856', getitem___call_result_100193)
        
        # Assigning a Name to a Attribute (line 1762):
        # Getting the type of 'call_assignment_95856' (line 1762)
        call_assignment_95856_100194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'call_assignment_95856')
        # Getting the type of 'self' (line 1762)
        self_100195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'self')
        # Setting the type of the member 'ox' of a type (line 1762)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 8), self_100195, 'ox', call_assignment_95856_100194)
        
        # Assigning a Call to a Name (line 1762):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_100198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1762, 8), 'int')
        # Processing the call keyword arguments
        kwargs_100199 = {}
        # Getting the type of 'call_assignment_95855' (line 1762)
        call_assignment_95855_100196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'call_assignment_95855', False)
        # Obtaining the member '__getitem__' of a type (line 1762)
        getitem___100197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 8), call_assignment_95855_100196, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_100200 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___100197, *[int_100198], **kwargs_100199)
        
        # Assigning a type to the variable 'call_assignment_95857' (line 1762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'call_assignment_95857', getitem___call_result_100200)
        
        # Assigning a Name to a Attribute (line 1762):
        # Getting the type of 'call_assignment_95857' (line 1762)
        call_assignment_95857_100201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'call_assignment_95857')
        # Getting the type of 'self' (line 1762)
        self_100202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 17), 'self')
        # Setting the type of the member 'oy' of a type (line 1762)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 17), self_100202, 'oy', call_assignment_95857_100201)
        
        # ################# End of 'save_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'save_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 1760)
        stypy_return_type_100203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100203)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'save_offset'
        return stypy_return_type_100203


    @norecursion
    def update_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_offset'
        module_type_store = module_type_store.open_function_context('update_offset', 1764, 4, False)
        # Assigning a type to the variable 'self' (line 1765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1765, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DraggableAnnotation.update_offset.__dict__.__setitem__('stypy_localization', localization)
        DraggableAnnotation.update_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DraggableAnnotation.update_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        DraggableAnnotation.update_offset.__dict__.__setitem__('stypy_function_name', 'DraggableAnnotation.update_offset')
        DraggableAnnotation.update_offset.__dict__.__setitem__('stypy_param_names_list', ['dx', 'dy'])
        DraggableAnnotation.update_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        DraggableAnnotation.update_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DraggableAnnotation.update_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        DraggableAnnotation.update_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        DraggableAnnotation.update_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DraggableAnnotation.update_offset.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DraggableAnnotation.update_offset', ['dx', 'dy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_offset', localization, ['dx', 'dy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_offset(...)' code ##################

        
        # Assigning a Attribute to a Name (line 1765):
        
        # Assigning a Attribute to a Name (line 1765):
        # Getting the type of 'self' (line 1765)
        self_100204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 14), 'self')
        # Obtaining the member 'annotation' of a type (line 1765)
        annotation_100205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1765, 14), self_100204, 'annotation')
        # Assigning a type to the variable 'ann' (line 1765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1765, 8), 'ann', annotation_100205)
        
        # Assigning a Call to a Attribute (line 1766):
        
        # Assigning a Call to a Attribute (line 1766):
        
        # Call to transform(...): (line 1766)
        # Processing the call arguments (line 1766)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1767)
        tuple_100214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1767, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1767)
        # Adding element type (line 1767)
        # Getting the type of 'self' (line 1767)
        self_100215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 13), 'self', False)
        # Obtaining the member 'ox' of a type (line 1767)
        ox_100216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 13), self_100215, 'ox')
        # Getting the type of 'dx' (line 1767)
        dx_100217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 23), 'dx', False)
        # Applying the binary operator '+' (line 1767)
        result_add_100218 = python_operator(stypy.reporting.localization.Localization(__file__, 1767, 13), '+', ox_100216, dx_100217)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 13), tuple_100214, result_add_100218)
        # Adding element type (line 1767)
        # Getting the type of 'self' (line 1767)
        self_100219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 27), 'self', False)
        # Obtaining the member 'oy' of a type (line 1767)
        oy_100220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 27), self_100219, 'oy')
        # Getting the type of 'dy' (line 1767)
        dy_100221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 37), 'dy', False)
        # Applying the binary operator '+' (line 1767)
        result_add_100222 = python_operator(stypy.reporting.localization.Localization(__file__, 1767, 27), '+', oy_100220, dy_100221)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 13), tuple_100214, result_add_100222)
        
        # Processing the call keyword arguments (line 1766)
        kwargs_100223 = {}
        
        # Call to inverted(...): (line 1766)
        # Processing the call keyword arguments (line 1766)
        kwargs_100211 = {}
        
        # Call to get_transform(...): (line 1766)
        # Processing the call keyword arguments (line 1766)
        kwargs_100208 = {}
        # Getting the type of 'ann' (line 1766)
        ann_100206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 20), 'ann', False)
        # Obtaining the member 'get_transform' of a type (line 1766)
        get_transform_100207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1766, 20), ann_100206, 'get_transform')
        # Calling get_transform(args, kwargs) (line 1766)
        get_transform_call_result_100209 = invoke(stypy.reporting.localization.Localization(__file__, 1766, 20), get_transform_100207, *[], **kwargs_100208)
        
        # Obtaining the member 'inverted' of a type (line 1766)
        inverted_100210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1766, 20), get_transform_call_result_100209, 'inverted')
        # Calling inverted(args, kwargs) (line 1766)
        inverted_call_result_100212 = invoke(stypy.reporting.localization.Localization(__file__, 1766, 20), inverted_100210, *[], **kwargs_100211)
        
        # Obtaining the member 'transform' of a type (line 1766)
        transform_100213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1766, 20), inverted_call_result_100212, 'transform')
        # Calling transform(args, kwargs) (line 1766)
        transform_call_result_100224 = invoke(stypy.reporting.localization.Localization(__file__, 1766, 20), transform_100213, *[tuple_100214], **kwargs_100223)
        
        # Getting the type of 'ann' (line 1766)
        ann_100225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 8), 'ann')
        # Setting the type of the member 'xyann' of a type (line 1766)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1766, 8), ann_100225, 'xyann', transform_call_result_100224)
        
        # ################# End of 'update_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 1764)
        stypy_return_type_100226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100226)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_offset'
        return stypy_return_type_100226


# Assigning a type to the variable 'DraggableAnnotation' (line 1755)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1755, 0), 'DraggableAnnotation', DraggableAnnotation)

if (__name__ == u'__main__'):
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1771, 4))
    
    # 'import matplotlib.pyplot' statement (line 1771)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_100227 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1771, 4), 'matplotlib.pyplot')

    if (type(import_100227) is not StypyTypeError):

        if (import_100227 != 'pyd_module'):
            __import__(import_100227)
            sys_modules_100228 = sys.modules[import_100227]
            import_module(stypy.reporting.localization.Localization(__file__, 1771, 4), 'plt', sys_modules_100228.module_type_store, module_type_store)
        else:
            import matplotlib.pyplot as plt

            import_module(stypy.reporting.localization.Localization(__file__, 1771, 4), 'plt', matplotlib.pyplot, module_type_store)

    else:
        # Assigning a type to the variable 'matplotlib.pyplot' (line 1771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1771, 4), 'matplotlib.pyplot', import_100227)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Assigning a Call to a Name (line 1772):
    
    # Assigning a Call to a Name (line 1772):
    
    # Call to figure(...): (line 1772)
    # Processing the call arguments (line 1772)
    int_100231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1772, 21), 'int')
    # Processing the call keyword arguments (line 1772)
    kwargs_100232 = {}
    # Getting the type of 'plt' (line 1772)
    plt_100229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 10), 'plt', False)
    # Obtaining the member 'figure' of a type (line 1772)
    figure_100230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1772, 10), plt_100229, 'figure')
    # Calling figure(args, kwargs) (line 1772)
    figure_call_result_100233 = invoke(stypy.reporting.localization.Localization(__file__, 1772, 10), figure_100230, *[int_100231], **kwargs_100232)
    
    # Assigning a type to the variable 'fig' (line 1772)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1772, 4), 'fig', figure_call_result_100233)
    
    # Call to clf(...): (line 1773)
    # Processing the call keyword arguments (line 1773)
    kwargs_100236 = {}
    # Getting the type of 'fig' (line 1773)
    fig_100234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 4), 'fig', False)
    # Obtaining the member 'clf' of a type (line 1773)
    clf_100235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 4), fig_100234, 'clf')
    # Calling clf(args, kwargs) (line 1773)
    clf_call_result_100237 = invoke(stypy.reporting.localization.Localization(__file__, 1773, 4), clf_100235, *[], **kwargs_100236)
    
    
    # Assigning a Call to a Name (line 1774):
    
    # Assigning a Call to a Name (line 1774):
    
    # Call to subplot(...): (line 1774)
    # Processing the call arguments (line 1774)
    int_100240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1774, 21), 'int')
    # Processing the call keyword arguments (line 1774)
    kwargs_100241 = {}
    # Getting the type of 'plt' (line 1774)
    plt_100238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 9), 'plt', False)
    # Obtaining the member 'subplot' of a type (line 1774)
    subplot_100239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1774, 9), plt_100238, 'subplot')
    # Calling subplot(args, kwargs) (line 1774)
    subplot_call_result_100242 = invoke(stypy.reporting.localization.Localization(__file__, 1774, 9), subplot_100239, *[int_100240], **kwargs_100241)
    
    # Assigning a type to the variable 'ax' (line 1774)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1774, 4), 'ax', subplot_call_result_100242)
    
    # Assigning a Call to a Name (line 1777):
    
    # Assigning a Call to a Name (line 1777):
    
    # Call to dict(...): (line 1777)
    # Processing the call keyword arguments (line 1777)
    kwargs_100244 = {}
    # Getting the type of 'dict' (line 1777)
    dict_100243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 13), 'dict', False)
    # Calling dict(args, kwargs) (line 1777)
    dict_call_result_100245 = invoke(stypy.reporting.localization.Localization(__file__, 1777, 13), dict_100243, *[], **kwargs_100244)
    
    # Assigning a type to the variable 'kwargs' (line 1777)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1777, 4), 'kwargs', dict_call_result_100245)
    
    # Assigning a BinOp to a Name (line 1779):
    
    # Assigning a BinOp to a Name (line 1779):
    
    # Call to reshape(...): (line 1779)
    # Processing the call arguments (line 1779)
    int_100252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1779, 31), 'int')
    int_100253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1779, 35), 'int')
    # Processing the call keyword arguments (line 1779)
    kwargs_100254 = {}
    
    # Call to arange(...): (line 1779)
    # Processing the call arguments (line 1779)
    int_100248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1779, 18), 'int')
    # Processing the call keyword arguments (line 1779)
    kwargs_100249 = {}
    # Getting the type of 'np' (line 1779)
    np_100246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'np', False)
    # Obtaining the member 'arange' of a type (line 1779)
    arange_100247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1779, 8), np_100246, 'arange')
    # Calling arange(args, kwargs) (line 1779)
    arange_call_result_100250 = invoke(stypy.reporting.localization.Localization(__file__, 1779, 8), arange_100247, *[int_100248], **kwargs_100249)
    
    # Obtaining the member 'reshape' of a type (line 1779)
    reshape_100251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1779, 8), arange_call_result_100250, 'reshape')
    # Calling reshape(args, kwargs) (line 1779)
    reshape_call_result_100255 = invoke(stypy.reporting.localization.Localization(__file__, 1779, 8), reshape_100251, *[int_100252, int_100253], **kwargs_100254)
    
    float_100256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1779, 41), 'float')
    # Applying the binary operator 'div' (line 1779)
    result_div_100257 = python_operator(stypy.reporting.localization.Localization(__file__, 1779, 8), 'div', reshape_call_result_100255, float_100256)
    
    # Assigning a type to the variable 'a' (line 1779)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1779, 4), 'a', result_div_100257)
    
    # Assigning a Call to a Name (line 1780):
    
    # Assigning a Call to a Name (line 1780):
    
    # Call to OffsetImage(...): (line 1780)
    # Processing the call arguments (line 1780)
    # Getting the type of 'a' (line 1780)
    a_100259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 26), 'a', False)
    # Processing the call keyword arguments (line 1780)
    int_100260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1781, 31), 'int')
    keyword_100261 = int_100260
    # Getting the type of 'None' (line 1782)
    None_100262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 31), 'None', False)
    keyword_100263 = None_100262
    # Getting the type of 'None' (line 1783)
    None_100264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 33), 'None', False)
    keyword_100265 = None_100264
    # Getting the type of 'kwargs' (line 1784)
    kwargs_100266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 28), 'kwargs', False)
    kwargs_100267 = {'origin': keyword_100265, 'kwargs_100266': kwargs_100266, 'zoom': keyword_100261, 'norm': keyword_100263}
    # Getting the type of 'OffsetImage' (line 1780)
    OffsetImage_100258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 14), 'OffsetImage', False)
    # Calling OffsetImage(args, kwargs) (line 1780)
    OffsetImage_call_result_100268 = invoke(stypy.reporting.localization.Localization(__file__, 1780, 14), OffsetImage_100258, *[a_100259], **kwargs_100267)
    
    # Assigning a type to the variable 'myimage' (line 1780)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1780, 4), 'myimage', OffsetImage_call_result_100268)
    
    # Call to add_artist(...): (line 1786)
    # Processing the call arguments (line 1786)
    # Getting the type of 'myimage' (line 1786)
    myimage_100271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 18), 'myimage', False)
    # Processing the call keyword arguments (line 1786)
    kwargs_100272 = {}
    # Getting the type of 'ax' (line 1786)
    ax_100269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 4), 'ax', False)
    # Obtaining the member 'add_artist' of a type (line 1786)
    add_artist_100270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1786, 4), ax_100269, 'add_artist')
    # Calling add_artist(args, kwargs) (line 1786)
    add_artist_call_result_100273 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 4), add_artist_100270, *[myimage_100271], **kwargs_100272)
    
    
    # Call to set_offset(...): (line 1788)
    # Processing the call arguments (line 1788)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1788)
    tuple_100276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1788, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1788)
    # Adding element type (line 1788)
    int_100277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1788, 24), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1788, 24), tuple_100276, int_100277)
    # Adding element type (line 1788)
    int_100278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1788, 29), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1788, 24), tuple_100276, int_100278)
    
    # Processing the call keyword arguments (line 1788)
    kwargs_100279 = {}
    # Getting the type of 'myimage' (line 1788)
    myimage_100274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 4), 'myimage', False)
    # Obtaining the member 'set_offset' of a type (line 1788)
    set_offset_100275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1788, 4), myimage_100274, 'set_offset')
    # Calling set_offset(args, kwargs) (line 1788)
    set_offset_call_result_100280 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 4), set_offset_100275, *[tuple_100276], **kwargs_100279)
    
    
    # Assigning a Call to a Name (line 1790):
    
    # Assigning a Call to a Name (line 1790):
    
    # Call to OffsetImage(...): (line 1790)
    # Processing the call arguments (line 1790)
    # Getting the type of 'a' (line 1790)
    a_100282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 27), 'a', False)
    # Processing the call keyword arguments (line 1790)
    int_100283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1791, 32), 'int')
    keyword_100284 = int_100283
    # Getting the type of 'None' (line 1792)
    None_100285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 32), 'None', False)
    keyword_100286 = None_100285
    # Getting the type of 'None' (line 1793)
    None_100287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 34), 'None', False)
    keyword_100288 = None_100287
    # Getting the type of 'kwargs' (line 1794)
    kwargs_100289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 29), 'kwargs', False)
    kwargs_100290 = {'origin': keyword_100288, 'kwargs_100289': kwargs_100289, 'zoom': keyword_100284, 'norm': keyword_100286}
    # Getting the type of 'OffsetImage' (line 1790)
    OffsetImage_100281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 15), 'OffsetImage', False)
    # Calling OffsetImage(args, kwargs) (line 1790)
    OffsetImage_call_result_100291 = invoke(stypy.reporting.localization.Localization(__file__, 1790, 15), OffsetImage_100281, *[a_100282], **kwargs_100290)
    
    # Assigning a type to the variable 'myimage2' (line 1790)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 4), 'myimage2', OffsetImage_call_result_100291)
    
    # Assigning a Call to a Name (line 1796):
    
    # Assigning a Call to a Name (line 1796):
    
    # Call to AnnotationBbox(...): (line 1796)
    # Processing the call arguments (line 1796)
    # Getting the type of 'myimage2' (line 1796)
    myimage2_100293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 25), 'myimage2', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1796)
    tuple_100294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1796, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1796)
    # Adding element type (line 1796)
    float_100295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1796, 36), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1796, 36), tuple_100294, float_100295)
    # Adding element type (line 1796)
    float_100296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1796, 41), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1796, 36), tuple_100294, float_100296)
    
    # Processing the call keyword arguments (line 1796)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1797)
    tuple_100297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1797, 32), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1797)
    # Adding element type (line 1797)
    int_100298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1797, 32), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1797, 32), tuple_100297, int_100298)
    # Adding element type (line 1797)
    int_100299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1797, 36), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1797, 32), tuple_100297, int_100299)
    
    keyword_100300 = tuple_100297
    unicode_100301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, 34), 'unicode', u'data')
    keyword_100302 = unicode_100301
    unicode_100303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1799, 35), 'unicode', u'offset points')
    keyword_100304 = unicode_100303
    # Getting the type of 'True' (line 1800)
    True_100305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 33), 'True', False)
    keyword_100306 = True_100305
    float_100307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1800, 43), 'float')
    keyword_100308 = float_100307
    
    # Call to dict(...): (line 1801)
    # Processing the call keyword arguments (line 1801)
    unicode_100310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1801, 49), 'unicode', u'round')
    keyword_100311 = unicode_100310
    unicode_100312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1801, 61), 'unicode', u'y')
    keyword_100313 = unicode_100312
    kwargs_100314 = {'fc': keyword_100313, 'boxstyle': keyword_100311}
    # Getting the type of 'dict' (line 1801)
    dict_100309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 35), 'dict', False)
    # Calling dict(args, kwargs) (line 1801)
    dict_call_result_100315 = invoke(stypy.reporting.localization.Localization(__file__, 1801, 35), dict_100309, *[], **kwargs_100314)
    
    keyword_100316 = dict_call_result_100315
    # Getting the type of 'None' (line 1802)
    None_100317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 34), 'None', False)
    keyword_100318 = None_100317
    
    # Call to dict(...): (line 1803)
    # Processing the call keyword arguments (line 1803)
    unicode_100320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1803, 52), 'unicode', u'->')
    keyword_100321 = unicode_100320
    kwargs_100322 = {'arrowstyle': keyword_100321}
    # Getting the type of 'dict' (line 1803)
    dict_100319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 36), 'dict', False)
    # Calling dict(args, kwargs) (line 1803)
    dict_call_result_100323 = invoke(stypy.reporting.localization.Localization(__file__, 1803, 36), dict_100319, *[], **kwargs_100322)
    
    keyword_100324 = dict_call_result_100323
    kwargs_100325 = {'xycoords': keyword_100302, 'bboxprops': keyword_100316, 'xybox': keyword_100300, 'frameon': keyword_100306, 'pad': keyword_100308, 'boxcoords': keyword_100304, 'fontsize': keyword_100318, 'arrowprops': keyword_100324}
    # Getting the type of 'AnnotationBbox' (line 1796)
    AnnotationBbox_100292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 10), 'AnnotationBbox', False)
    # Calling AnnotationBbox(args, kwargs) (line 1796)
    AnnotationBbox_call_result_100326 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 10), AnnotationBbox_100292, *[myimage2_100293, tuple_100294], **kwargs_100325)
    
    # Assigning a type to the variable 'ann' (line 1796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1796, 4), 'ann', AnnotationBbox_call_result_100326)
    
    # Call to add_artist(...): (line 1806)
    # Processing the call arguments (line 1806)
    # Getting the type of 'ann' (line 1806)
    ann_100329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 18), 'ann', False)
    # Processing the call keyword arguments (line 1806)
    kwargs_100330 = {}
    # Getting the type of 'ax' (line 1806)
    ax_100327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 4), 'ax', False)
    # Obtaining the member 'add_artist' of a type (line 1806)
    add_artist_100328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1806, 4), ax_100327, 'add_artist')
    # Calling add_artist(args, kwargs) (line 1806)
    add_artist_call_result_100331 = invoke(stypy.reporting.localization.Localization(__file__, 1806, 4), add_artist_100328, *[ann_100329], **kwargs_100330)
    
    
    # Call to draw(...): (line 1808)
    # Processing the call keyword arguments (line 1808)
    kwargs_100334 = {}
    # Getting the type of 'plt' (line 1808)
    plt_100332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 4), 'plt', False)
    # Obtaining the member 'draw' of a type (line 1808)
    draw_100333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 4), plt_100332, 'draw')
    # Calling draw(args, kwargs) (line 1808)
    draw_call_result_100335 = invoke(stypy.reporting.localization.Localization(__file__, 1808, 4), draw_100333, *[], **kwargs_100334)
    
    
    # Call to show(...): (line 1809)
    # Processing the call keyword arguments (line 1809)
    kwargs_100338 = {}
    # Getting the type of 'plt' (line 1809)
    plt_100336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 4), 'plt', False)
    # Obtaining the member 'show' of a type (line 1809)
    show_100337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1809, 4), plt_100336, 'show')
    # Calling show(args, kwargs) (line 1809)
    show_call_result_100339 = invoke(stypy.reporting.localization.Localization(__file__, 1809, 4), show_100337, *[], **kwargs_100338)
    


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
